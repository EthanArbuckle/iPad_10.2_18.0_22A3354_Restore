void sub_196DA4ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_196DA4C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DA4CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA4D9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA4EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionControllerConfiguration::setDefaultWebsiteDataStore(WebKit::WebExtensionControllerConfiguration *this, CFTypeRef *a2)
{
  uint64_t v4;

  if (a2)
    CFRetain(a2[1]);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = a2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void sub_196DA4FC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

const void **WTF::RetainPtr<WKWebViewConfiguration>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_196DA5060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA51D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<_WKWebExtensionDataRecord>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DA5228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA5308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WTF::makeVector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  id v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v26 = v3;
  v4 = objc_msgSend(v3, "count");
  v5 = v4;
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v7 = v26;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (!v8)
    goto LABEL_21;
  v9 = *(_QWORD *)v30;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v30 != v9)
        objc_enumerationMutation(v7);
      v11 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * i);
      objc_opt_class();
      WTF::dynamic_objc_cast<_WKWebExtensionDataRecord>(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12)
      {
        v14 = objc_msgSend(v12, "_webExtensionDataRecord");
        CFRetain(*(CFTypeRef *)(v14 + 8));
        v27 = v14;
        v28 = 1;

      }
      else
      {
        LOBYTE(v27) = 0;
        v28 = 0;
      }

      if (v28)
      {
        v15 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
        {
          v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)&v27);
          v17 = *(unsigned int *)(a2 + 12);
          v18 = *(WTF **)a2;
          v19 = *v16;
          *v16 = 0;
          *((_QWORD *)v18 + v17) = v19;
          LODWORD(v18) = v28;
          *(_DWORD *)(a2 + 12) = v17 + 1;
          if (!(_DWORD)v18)
            goto LABEL_19;
        }
        else
        {
          v20 = *(WTF **)a2;
          v21 = v27;
          v27 = 0;
          *((_QWORD *)v20 + v15) = v21;
          *(_DWORD *)(a2 + 12) = v15 + 1;
        }
        v22 = v27;
        v27 = 0;
        if (v22)
          CFRelease(*(CFTypeRef *)(v22 + 8));
      }
LABEL_19:

    }
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  }
  while (v8);
LABEL_21:

  v24 = *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) > v24)
  {
    v25 = *(WTF **)a2;
    if ((_DWORD)v24)
    {
      *(_DWORD *)(a2 + 8) = v24;
      *(_QWORD *)a2 = WTF::fastRealloc(v25, (void *)(8 * v24));
    }
    else if (v25)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v25, v23);
    }
  }

}

void sub_196DA557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  void *v13;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v13);
  _Unwind_Resume(a1);
}

id WebKit::toAPI(uint64_t a1)
{
  void *v1;
  CFTypeRef v2;
  CFTypeRef cf;

  WTF::createNSArray<WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (id *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  return v1;
}

void sub_196DA5640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, id *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  id **v7;
  uint64_t v8;
  WTF *v9;
  id v10;
  void *v11;
  NSMutableArray *v12;
  objc_object *v13;
  CFTypeRef v14;
  CFTypeRef cf;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v5 = v4;
  *a2 = v4;
  if (v4)
    CFRetain(v4);

  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(id ***)a1;
    v8 = 8 * v6;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get(a2);
      v9 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtension::wrapper(*v7);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      cf = v10;
      if (v10)
        CFRetain(v10);

      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v12 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v9, v12, v13);

      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);

      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
}

void sub_196DA5764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

id WebKit::createDataRecordError(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = *MEMORY[0x1E0CB2938];
    v9[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AA70];
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("_WKWebExtensionDataRecordErrorDomain"), a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_196DA58B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::toWebExtensionDataTypes(WebKit *this, NSSet *a2)
{
  WebKit *v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = this;
  v3 = -[WebKit containsObject:](v2, "containsObject:", CFSTR("local"));
  v4 = -[WebKit containsObject:](v2, "containsObject:", CFSTR("session"));
  v5 = -[WebKit containsObject:](v2, "containsObject:", CFSTR("sync"));
  v6 = v3 | 2;
  if (!v4)
    v6 = v3;
  if (v5)
    v7 = v6 | 4;
  else
    v7 = v6;

  return v7;
}

void sub_196DA5A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::toAPI(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("local"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("session"));
  if ((a1 & 4) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("sync"));
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

void sub_196DA5B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA74E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSNumber>(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSNumber>(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_196DA7858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isArrayOfDomainsValid(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v9;
      while (2)
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v9 != v4)
            objc_enumerationMutation(v2);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v5), "canBeConvertedToEncoding:", 1, (_QWORD)v8) & 1) == 0)
          {
            v6 = 0;
            goto LABEL_12;
          }
          ++v5;
        }
        while (v3 != v5);
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v3)
          continue;
        break;
      }
    }
    v6 = 1;
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_196DA7980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t isArrayOfExcludedDomainsValid(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v8;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v1);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v4), "canBeConvertedToEncoding:", 1, (_QWORD)v7) & 1) == 0)
        {
          v5 = 0;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
  v5 = 1;
LABEL_11:

  return v5;
}

void sub_196DA7AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA7E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA7F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DA7FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA81D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DA8384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_196DA8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_196DA8F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA8FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA908C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196DA931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_196DA9530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA9690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t priorityForRuleType(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("allow")))
  {
    v2 = 5;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("allowAllRequests")))
  {
    v2 = 4;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("block")))
  {
    v2 = 3;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("upgradeScheme")))
  {
    v2 = 2;
  }
  else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("redirect")))
  {
    v2 = 1;
  }
  else
  {
    v2 = -[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("modifyHeaders")) - 1;
  }

  return v2;
}

void sub_196DA97B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA98E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSNumber>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DA99B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSDictionary>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DA9A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSString>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DA9A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA9B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DA9C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  id *v16;
  void *v17;
  void *v18;
  void *v19;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_196DA9D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::get(_QWORD *a1, id *location)
{
  id v3;
  void *cf;

  v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_196DA9E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 48), (id *)(a2 + 48));
}

void __destroy_helper_block_ea8_48c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
}

void sub_196DA9F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DAA558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,const void *a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  if (a56)
    CFRelease(a56);
  _Unwind_Resume(a1);
}

id WebKit::SQLiteDatabaseFetch<>(void *a1, void *a2)
{
  id v3;
  id v4;
  _WKWebExtensionSQLiteStatement *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  v5 = -[_WKWebExtensionSQLiteStatement initWithDatabase:query:]([_WKWebExtensionSQLiteStatement alloc], "initWithDatabase:query:", v3, v4);
  -[_WKWebExtensionSQLiteStatement fetch](v5, "fetch");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_196DAA6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DAA830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DAAB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196DAADB8(_Unwind_Exception *a1)
{
  void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_196DAAEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DAB134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_196DAB40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_196DAB628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DAB798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DAB85C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::_SQLiteDatabaseExecuteAndReturnError<>(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  _WKWebExtensionSQLiteStatement *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v13;

  v5 = a1;
  v6 = a3;
  v13 = 0;
  v7 = -[_WKWebExtensionSQLiteStatement initWithDatabase:query:error:]([_WKWebExtensionSQLiteStatement alloc], "initWithDatabase:query:error:", v5, v6, &v13);
  v8 = v13;
  v9 = v8;
  if (v7)
  {
    v10 = -[_WKWebExtensionSQLiteStatement execute](v7, "execute");
    -[_WKWebExtensionSQLiteStatement invalidate](v7, "invalidate");
    if ((v10 - 100) >= 2 && (_DWORD)v10 != 0)
      objc_msgSend(v5, "reportErrorWithCode:statement:error:", v10, -[_WKWebExtensionSQLiteStatement handle](v7, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v8);
    v10 = objc_msgSend(v9, "code");
  }

  return v10;
}

void sub_196DAB9B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DABD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196DABFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196DAC43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_196DAC568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_196DAC74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_196DAC9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DACBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_196DACC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DACD6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DACEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DACFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DAD3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_196DAD668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DAD880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DADA60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::wrapper<WebKit::WebExtensionMatchPattern>(_QWORD *a1, id *this)
{
  id v3;
  void *cf;

  v3 = WebKit::WebExtension::wrapper(this);
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_196DADADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_196DADB4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DADC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196DADF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_196DAE1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void API::Object::constructInWrapper<WebKit::WebExtensionMatchPattern>(void *a1)
{
  uint64_t v1;
  id v2;

  v2 = a1;
  v1 = objc_msgSend(v2, "_apiObject");
  *(_QWORD *)v1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v1);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_QWORD *)v1 = &off_1E34AAF28;
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = 0;

}

void sub_196DAE308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_196DAE680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_196DAE8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DAE9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DAEA2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DAEAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<_WKWebExtensionMatchPattern>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DAEB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DAEC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DAED3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_196DAEE1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196DAEF34(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_196DAEFEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196DAF1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DAF2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionMatchPattern::~WebExtensionMatchPattern(WebKit::WebExtensionMatchPattern *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionMatchPattern::~WebExtensionMatchPattern(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34AAF28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)117>::type()
{
  return 117;
}

void sub_196DAF540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DAF650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

void sub_196DAF704(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  BOOL v16;

  if ((_BYTE)a13)
    v16 = a11 == 0;
  else
    v16 = 1;
  if (!v16 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

void sub_196DAF960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  WTF::StringImpl *v15;
  void *v16;
  int v17;
  WTF::StringImpl *v19;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v19);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v17 && v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v19);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196DAFB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_196DAFC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionRegisteredScriptsSQLiteStore>::get(_QWORD *a1, id *location)
{
  id v3;
  void *cf;

  v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_196DAFCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 48), (id *)(a2 + 48));
}

void __destroy_helper_block_ea8_48c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
}

void sub_196DAFE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB0258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, CFTypeRef cf, uint64_t a14, uint64_t a15)
{
  void *v15;

  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_196DB0468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB04F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB0760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  void *v33;
  void *v34;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_196DB0988(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_196DB0A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB0CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_196DB0F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_196DB10E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB120C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB1290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB1354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DB1494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB1684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DB1798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB18BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB19A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB1BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB1D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB1E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_196DB1EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB1FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB2028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB209C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB2110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB22A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB2320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB24E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DB2610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB27B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DB2888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)_WKWebExtensionSQLiteStatement;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_196DB2930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB29B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB2A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB2ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB2BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB2D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB2E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB2F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB30BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB31E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB3344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB3478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB35B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB36CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB3858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DB38C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_WKWebExtensionSQLiteStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_196DB39C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_196DB3C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB3CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB4030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DB42F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196DB4528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB4698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB483C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB4998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB4A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB4B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB4DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  CFRelease(v2);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionSQLiteStore>::get(_QWORD *a1, id *location)
{
  id v3;
  void *cf;

  v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_196DB4EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c56_ZTSN3WTF14WeakObjCPtrArcI26_WKWebExtensionSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 48), (id *)(a2 + 48));
}

void __destroy_helper_block_ea8_48c56_ZTSN3WTF14WeakObjCPtrArcI26_WKWebExtensionSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
}

void sub_196DB52B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_196DB56A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *a1;
  v3 = a2[1];
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v7 = *a2;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v8 = v5;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v9, (uint64_t)&v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    *a3 = 0;
  }
  else
  {
    v7 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v7, v4, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), &v8);
    *a3 = v8;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  int64_t v12;
  char *v13;
  _DWORD *v14;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v14;
        if (v14)
        {
          *v14 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          v14 = (_DWORD *)a3;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v14, (char *)v11 + 20);
          v12 = (int64_t)v14;
          if (v14)
            v12 = v14[1];
          if (a5)
          {
            result = (uint64_t)v11 + v12 + 20;
            if (a5 == 1)
              *(_BYTE *)result = a4->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a4, a5);
          }
        }
        goto LABEL_10;
      }
LABEL_13:
      v11 = 0;
      goto LABEL_10;
    }
LABEL_14:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_10;
  }
  if (!(_DWORD)result)
    goto LABEL_14;
  if (result > 0x7FFFFFEF)
    goto LABEL_13;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v14;
  if (v14)
  {
    v13 = (char *)(v14 + 5);
    *v14 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, a3, a4, a5);
  }
LABEL_10:
  *a6 = v11;
  return result;
}

void sub_196DB59C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4)
{
  uint64_t *result;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  uint64_t v20;
  int8x16x2_t v21;
  int8x16x2_t v22;
  int8x16x2_t v23;

  v20 = a2;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v20, __dst);
  v8 = v20;
  if (v20)
    v8 = *(unsigned int *)(v20 + 4);
  v9 = &__dst[2 * v8];
  v10 = &v9[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v11 = &v9[2 * (a4 & 0xFFFFFFC0)];
    v12 = 0uLL;
    do
    {
      v21.val[0] = *a3;
      v13 = a3[1];
      v22.val[0] = a3[2];
      v14 = a3[3];
      a3 += 4;
      v15 = v14;
      v22.val[1] = 0uLL;
      v23.val[0] = v13;
      v21.val[1] = 0uLL;
      v16 = v9;
      vst2q_s8(v16, v21);
      v16 += 32;
      v23.val[1] = 0uLL;
      vst2q_s8(v16, v23);
      v17 = v9 + 64;
      vst2q_s8(v17, v22);
      v18 = v9 + 96;
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      v9 += 128;
    }
    while (v9 != v11);
    v9 = v11;
  }
  while (v9 != v10)
  {
    v19 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v9 = v19;
    v9 += 2;
  }
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16x2_t v15;
  int8x16x2_t v16;
  int8x16x2_t v17;

  v2 = *result;
  if (*result)
  {
    v3 = *(int8x16_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v5 = &__dst[2 * v4];
      if (v4 >= 0x40)
      {
        v6 = &__dst[2 * (v4 & 0xFFFFFFC0)];
        v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          v8 = v3[1];
          v16.val[0] = v3[2];
          v9 = v3[3];
          v3 += 4;
          v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          v11 = __dst;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          v12 = __dst + 64;
          vst2q_s8(v12, v16);
          v13 = __dst + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          __dst += 128;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v14 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)__dst = v14;
        __dst += 2;
      }
    }
    else if ((_DWORD)v4)
    {
      if ((_DWORD)v4 == 1)
        *(_WORD *)__dst = v3->i16[0];
      else
        return (uint64_t *)memcpy(__dst, v3, 2 * v4);
    }
  }
  return result;
}

void sub_196DB5EB4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionStorageSQLiteStore>::get(_QWORD *a1, id *location)
{
  id v3;
  void *cf;

  v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3)
    CFRetain(v3);

}

void sub_196DB5F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_56c63_ZTSN3WTF14WeakObjCPtrArcI33_WKWebExtensionStorageSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 56), (id *)(a2 + 56));
}

void __destroy_helper_block_ea8_56c63_ZTSN3WTF14WeakObjCPtrArcI33_WKWebExtensionStorageSQLiteStoreEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 56));
}

void sub_196DB6474(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;
  void *v3;
  void *v4;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196DB6678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_196DB6884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB6B2C(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196DB6FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFTypeRef cf)
{
  void *v32;
  void *v33;
  void *v34;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_196DB709C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_196DB746C(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

id rowFilterStringFromRowKeys(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v9;
  id obj;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v9, "count"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  obj = v9;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v12;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v12 != v3)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v4), "stringByReplacingOccurrencesOfString:withString:", CFSTR("'"), CFSTR("''"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("'%@'"), v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "addObject:", v6);

        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v2);
  }

  objc_msgSend(v1, "componentsJoinedByString:", CFSTR(","));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_196DB767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DB79A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_196DB7A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB7BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB7DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB7ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB8018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB813C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB81C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DB89FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSArray>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DB8B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DB8F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_196DB95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_196DB9720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DB9900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _WKWebExtensionWebRequestResourceTypeFromResourceLoadInfo(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(a1 + 113);
  result = 2;
  switch(v1)
  {
    case 0:
      result = 12;
      break;
    case 1:
      result = 14;
      break;
    case 2:
      result = 9;
      break;
    case 3:
      result = *(unsigned __int8 *)(a1 + 48) == 0;
      break;
    case 4:
    case 13:
      result = 7;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 4;
      break;
    case 7:
      result = 10;
      break;
    case 8:
      result = 6;
      break;
    case 10:
      result = 8;
      break;
    case 11:
      result = 3;
      break;
    case 12:
      return result;
    case 14:
      result = 13;
      break;
    default:
      result = 15;
      break;
  }
  return result;
}

void sub_196DB9BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DBA210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196DBA4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id std::__throw_bad_optional_access[abi:sn180100]()
{
  _WKWebExtensionWindowCreationOptions *v0;
  SEL v1;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return -[_WKWebExtensionWindowCreationOptions _init](v0, v1);
}

uint64_t ___ZN6WebKit24AppAttestInternalLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppAttestInternal.framework/AppAttestInternal", 2);
  _MergedGlobals_40 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(WebKit *this)
{
  if (WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(void)::once != -1)
    dispatch_once(&WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(void)::once, &__block_literal_global_3);
  return WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported((WebKit *)WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported);
}

uint64_t ___ZN6WebKitL60initAppAttestInternalAppAttest_WebAuthentication_IsSupportedEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit24AppAttestInternalLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE71D60 != -1)
    dispatch_once(&qword_1ECE71D60, block);
  result = (uint64_t)dlsym((void *)_MergedGlobals_40, "AppAttest_WebAuthentication_IsSupported");
  WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported = (uint64_t (*)(WebKit *__hidden))result;
  if (!result)
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

void sub_196DBA968(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WebPushD::ApplePushServiceConnection *WebPushD::ApplePushServiceConnection::ApplePushServiceConnection(WebPushD::ApplePushServiceConnection *this, const WTF::String *a2)
{
  id *v4;
  id v5;
  const __CFString *v6;
  uint64_t v7;
  id v8;
  _WKAPSConnectionDelegate *v9;
  const void *v10;

  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 10) = 0;
  v4 = (id *)((char *)this + 80);
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E34AB368;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = 0;
  v5 = objc_alloc(MEMORY[0x1E0CFE148]);
  if (*(_QWORD *)a2)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = objc_msgSend(v5, "initWithEnvironmentName:namedDelegatePort:queue:", *MEMORY[0x1E0CFE130], v6, MEMORY[0x1E0C80D38]);
  v8 = *v4;
  *v4 = (id)v7;
  if (v8)
    CFRelease(v8);
  v9 = -[_WKAPSConnectionDelegate initWithConnection:]([_WKAPSConnectionDelegate alloc], "initWithConnection:", this);
  v10 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v9;
  if (v10)
  {
    CFRelease(v10);
    v9 = (_WKAPSConnectionDelegate *)*((_QWORD *)this + 11);
  }
  objc_msgSend(*v4, "setDelegate:", v9);
  return this;
}

void sub_196DBAB2C(_Unwind_Exception *a1, void *a2)
{
  WebPushD::PushServiceConnection *v2;
  const void **v3;
  uint64_t *v4;
  uint64_t v6;
  const void *v7;
  const void *v8;

  v6 = *((_QWORD *)v2 + 14);
  if (v6)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v6, a2);
  if (*v4)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(*v4, a2);
  v7 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *v3;
  *v3 = 0;
  if (v8)
    CFRelease(v8);
  WebPushD::PushServiceConnection::~PushServiceConnection(v2);
  _Unwind_Resume(a1);
}

void WebPushD::PushServiceConnection::~PushServiceConnection(WebPushD::PushServiceConnection *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E34B3040;
  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  if (v2 <= v3)
  {
    v7 = v4 + 16 * v3;
    v6 = v4 + 16 * v2;
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(v4, v4 + 16 * v3);
    v5 = *((_QWORD *)this + 8);
    v6 = v5 + 16 * *((_QWORD *)this + 6);
    v7 = v5 + 16 * *((unsigned int *)this + 18);
  }
  WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(v6, v7);
  v9 = (WTF *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v9, v8);
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (WTF *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, v8);
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

void WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(id *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  objc_msgSend(this[10], "setDelegate:", 0);
  v3 = (uint64_t)this[14];
  if (v3)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v3, v2);
  v4 = (uint64_t)this[13];
  if (v4)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v4, v2);
  v5 = this[11];
  this[11] = 0;
  if (v5)
    CFRelease(v5);
  v6 = this[10];
  this[10] = 0;
  if (v6)
    CFRelease(v6);
  WebPushD::PushServiceConnection::~PushServiceConnection((WebPushD::PushServiceConnection *)this);
}

{
  WTF *v1;
  void *v2;

  WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(this);
  WTF::fastFree(v1, v2);
}

void sub_196DBACB0(_Unwind_Exception *a1, void *a2)
{
  WebPushD::PushServiceConnection *v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  v4 = *((_QWORD *)v2 + 14);
  if (v4)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)v2 + 13);
  if (v5)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v5, a2);
  v6 = (const void *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)v2 + 10);
  *((_QWORD *)v2 + 10) = 0;
  if (v7)
    CFRelease(v7);
  WebPushD::PushServiceConnection::~PushServiceConnection(v2);
  _Unwind_Resume(a1);
}

void WebPushD::ApplePushServiceConnection::subscribe(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  CFTypeRef v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  CFTypeRef cf;

  v9 = (uint64_t *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 104);
  v10 = *(_DWORD *)(a1 + 96);
  v11 = v10 + 1;
  *(_DWORD *)(a1 + 96) = v10 + 1;
  if (v8
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand((uint64_t *)(a1 + 104)),
        (v8 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 9 * ((v10 - (v11 << 15)) ^ ((v10 - (v11 << 15)) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = v8 + 16 * v15;
  v17 = *(_DWORD *)v16;
  if (!*(_DWORD *)v16)
  {
LABEL_12:
    *(_DWORD *)v16 = v11;
    v20 = *a4;
    *a4 = 0;
    v21 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *v9;
    if (*v9)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v9;
    if (*v9)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_23;
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_23;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v9);
    goto LABEL_23;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v12;
    v16 = v8 + 16 * v15;
    v17 = *(_DWORD *)v16;
    ++v19;
    if (!*(_DWORD *)v16)
    {
      if (v18)
      {
        *(_DWORD *)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        --*(_DWORD *)(*v9 - 16);
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v28 = *(void **)(a1 + 80);
  WebPushD::makeTokenInfo(&cf, a2, a3);
  v29 = cf;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v30 = *(unsigned int **)(a1 + 8);
  if (v30)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = malloc_type_malloc(0x38uLL, 0x10E0040165BCC43uLL);
  *v32 = MEMORY[0x1E0C809A0];
  v32[1] = 50331650;
  v32[2] = WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void *,APSURLToken *,NSError *)#1}::__invoke;
  v32[3] = &WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::descriptor;
  v32[4] = a1;
  v32[5] = v30;
  *((_DWORD *)v32 + 12) = v11;
  objc_msgSend(v28, "requestURLTokenForInfo:completion:", v29, v32);
  _Block_release(v32);
  if (cf)
    CFRelease(cf);
}

void sub_196DBAF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  _Block_release(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WebPushD::makeTokenInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  id v6;
  const __CFString *v7;
  const void *v8;

  v6 = objc_alloc(MEMORY[0x1E0CFE150]);
  if (*a2)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)a3, *(unsigned int *)(a3 + 12));
  *a1 = objc_msgSend(v6, "initWithTopic:vapidPublicKey:", v7, v8);
  if (v8)
    CFRelease(v8);
}

void sub_196DBB080(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::unsubscribe(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  CFTypeRef v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  CFTypeRef cf;

  v9 = (uint64_t *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 112);
  v10 = *(_DWORD *)(a1 + 96);
  v11 = v10 + 1;
  *(_DWORD *)(a1 + 96) = v10 + 1;
  if (v8
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand((uint64_t *)(a1 + 112)),
        (v8 = *v9) != 0))
  {
    v12 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 9 * ((v10 - (v11 << 15)) ^ ((v10 - (v11 << 15)) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = v8 + 16 * v15;
  v17 = *(_DWORD *)v16;
  if (!*(_DWORD *)v16)
  {
LABEL_12:
    *(_DWORD *)v16 = v11;
    v20 = *a4;
    *a4 = 0;
    v21 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *v9;
    if (*v9)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v9;
    if (*v9)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_23;
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_23;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v9);
    goto LABEL_23;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v12;
    v16 = v8 + 16 * v15;
    v17 = *(_DWORD *)v16;
    ++v19;
    if (!*(_DWORD *)v16)
    {
      if (v18)
      {
        *(_DWORD *)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        --*(_DWORD *)(*v9 - 16);
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  v28 = *(void **)(a1 + 80);
  WebPushD::makeTokenInfo(&cf, a2, a3);
  v29 = cf;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v30 = *(unsigned int **)(a1 + 8);
  if (v30)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = malloc_type_malloc(0x38uLL, 0x10E0040165BCC43uLL);
  *v32 = MEMORY[0x1E0C809A0];
  v32[1] = 50331650;
  v32[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  v32[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::descriptor;
  v32[4] = a1;
  v32[5] = v30;
  *((_DWORD *)v32 + 12) = v11;
  objc_msgSend(v28, "invalidateURLTokenForInfo:completion:", v29, v32);
  _Block_release(v32);
  if (cf)
    CFRelease(cf);
}

void sub_196DBB2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  _Block_release(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

unsigned int *WebPushD::ApplePushServiceConnection::enabledTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::makeVector<WTF::String>((void *)objc_msgSend(this[10], "enabledTopics"), a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::ignoredTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::makeVector<WTF::String>((void *)objc_msgSend(this[10], "ignoredTopics"), a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::opportunisticTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::makeVector<WTF::String>((void *)objc_msgSend(this[10], "opportunisticTopics"), a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::nonWakingTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::makeVector<WTF::String>((void *)objc_msgSend(this[10], "nonWakingTopics"), a2);
}

void WebPushD::ApplePushServiceConnection::setEnabledTopics(uint64_t a1, uint64_t a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  objc_msgSend(v2, "_setEnabledTopics:", cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_196DBB43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_196DBB4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setIgnoredTopics(uint64_t a1, uint64_t a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  objc_msgSend(v2, "_setIgnoredTopics:", cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_196DBB570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setOpportunisticTopics(uint64_t a1, uint64_t a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  objc_msgSend(v2, "_setOpportunisticTopics:", cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_196DBB5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setNonWakingTopics(uint64_t a1, uint64_t a2)
{
  void *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  objc_msgSend(v2, "_setNonWakingTopics:", cf);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_196DBB640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setTopicLists(uint64_t a1, uint64_t a2)
{
  void *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;

  v3 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&v14);
  v4 = v14;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 16, (uint64_t *)&v13);
  v5 = v13;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 32, (uint64_t *)&v12);
  v6 = v12;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 48, (uint64_t *)&cf);
  objc_msgSend(v3, "setEnabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:", v4, v5, v6, cf);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  v8 = v12;
  v12 = 0;
  if (v8)
    CFRelease(v8);
  v9 = v13;
  v13 = 0;
  if (v9)
    CFRelease(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    CFRelease(v10);
}

void sub_196DBB728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  if (a11)
    CFRelease(a11);
  if (a12)
    CFRelease(a12);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
        CFRelease(v5);
      v3 += 16;
    }
    while (v3 != a2);
  }
}

unsigned int *WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void *,APSURLToken *,NSError *)#1}::__invoke(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *(_QWORD *)(result + 40);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 32);
    v10 = *(_QWORD *)(v7 + 104);
    v8 = (uint64_t *)(v7 + 104);
    v9 = v10;
    if (!v10)
      goto LABEL_12;
    v11 = *(_DWORD *)(v6 + 48);
    v12 = *(_DWORD *)(v9 - 8);
    v13 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = v12 & (v14 ^ HIWORD(v14));
    v16 = *(_DWORD *)(v9 + 16 * v15);
    if (v16 != v11)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v12;
        v16 = *(_DWORD *)(v9 + 16 * v15);
        ++v17;
        if (v16 == v11)
          goto LABEL_11;
      }
      v15 = *(unsigned int *)(v9 - 4);
    }
LABEL_11:
    if (v15 != *(_DWORD *)(v9 - 4))
    {
      v19 = v9 + 16 * v15;
      v18 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      v20 = *v8;
      if (!*v8 || (v20 += 16 * *(unsigned int *)(v20 - 4), v20 != v19))
      {
        if (v20 != v19)
        {
          v21 = -1;
          *(_DWORD *)v19 = -1;
          *(_QWORD *)(v19 + 8) = 0;
          ++*(_DWORD *)(*v8 - 16);
          v22 = *v8;
          if (*v8)
            v21 = *(_DWORD *)(v22 - 12) - 1;
          *(_DWORD *)(v22 - 12) = v21;
          v23 = *v8;
          if (*v8)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v8, v25 >> 1);
          }
        }
      }
    }
    else
    {
LABEL_12:
      v18 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, objc_msgSend(a2, "tokenURL"), a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

void sub_196DBBA0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (int *)(v4 + 16 * v11);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21));
          v22 = v16 + 16 * v21;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          *(_DWORD *)v22 = *v12;
          v24 = v4 + 16 * v11;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v25;
          v15 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v15)
            goto LABEL_22;
LABEL_21:
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          goto LABEL_22;
        }
        v14 = v4 + 16 * v11;
        v15 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v15)
          goto LABEL_21;
      }
LABEL_22:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *(_QWORD *)(result + 40);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 32);
    v10 = *(_QWORD *)(v7 + 112);
    v8 = (uint64_t *)(v7 + 112);
    v9 = v10;
    if (!v10)
      goto LABEL_12;
    v11 = *(_DWORD *)(v6 + 48);
    v12 = *(_DWORD *)(v9 - 8);
    v13 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = v12 & (v14 ^ HIWORD(v14));
    v16 = *(_DWORD *)(v9 + 16 * v15);
    if (v16 != v11)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v12;
        v16 = *(_DWORD *)(v9 + 16 * v15);
        ++v17;
        if (v16 == v11)
          goto LABEL_11;
      }
      v15 = *(unsigned int *)(v9 - 4);
    }
LABEL_11:
    if (v15 != *(_DWORD *)(v9 - 4))
    {
      v19 = v9 + 16 * v15;
      v18 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      v20 = *v8;
      if (!*v8 || (v20 += 16 * *(unsigned int *)(v20 - 4), v20 != v19))
      {
        if (v20 != v19)
        {
          v21 = -1;
          *(_DWORD *)v19 = -1;
          *(_QWORD *)(v19 + 8) = 0;
          ++*(_DWORD *)(*v8 - 16);
          v22 = *v8;
          if (*v8)
            v21 = *(_DWORD *)(v22 - 12) - 1;
          *(_DWORD *)(v22 - 12) = v21;
          v23 = *v8;
          if (*v8)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v8, v25 >> 1);
          }
        }
      }
    }
    else
    {
LABEL_12:
      v18 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a2, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

void sub_196DBBDCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v3);
}

void WebKit::AssertionCapability::~AssertionCapability(const void **this)
{
  WebKit::AssertionCapability::~AssertionCapability(this);
  JUMPOUT(0x19AEB936CLL);
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;

  _Block_release(this[6]);
  _Block_release(this[5]);
  v3 = (WTF::StringImpl *)this[4];
  this[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)this[3];
  this[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = this[1];
  *this = off_1E34AB458;
  this[1] = 0;
  if (v6)
    CFRelease(v6);
}

uint64_t WebKit::AssertionCapability::environmentIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

unint64_t WebKit::AuthenticationManager::didReceiveMessage(unint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned __int8 v6;
  _BYTE v7[40];

  if (*((_WORD *)a3 + 25) == 2)
  {
    v3 = this;
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>>((uint64_t *)a3, &v5);
    if (v7[32])
      WebKit::AuthenticationManager::completeAuthenticationChallenge(v3, v5, v6, (uint64_t)v7);
    return std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v4);
  }
  return this;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

unint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v6;

  v6 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition>(a1, a2, &v6, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  char v14;

  IPC::Decoder::decode<WebCore::Credential>(a1, (uint64_t)&v11);
  v8 = v14;
  if (!v14)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 8) && a3[1])
  {
    *(_QWORD *)a4 = *(_QWORD *)a2;
    *(_BYTE *)(a4 + 8) = *a3;
    v9 = v11;
    v11 = 0uLL;
    *(_OWORD *)(a4 + 16) = v9;
    *(_BYTE *)(a4 + 32) = v12;
    v10 = v13;
    v13 = 0;
    v8 = 1;
    *(_QWORD *)(a4 + 40) = v10;
LABEL_6:
    *(_BYTE *)(a4 + 48) = v8;
    std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v7);
    return;
  }
  __break(1u);
}

uint64_t std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::AuthenticationServicesCoreLibrary(WebKit *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit33AuthenticationServicesCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE71D70 != -1)
    dispatch_once(&qword_1ECE71D70, block);
  return _MergedGlobals_41;
}

uint64_t ___ZN6WebKit33AuthenticationServicesCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AuthenticationServicesCore.framework/AuthenticationServicesCore", 2);
  _MergedGlobals_41 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASCWebKitSPISupport(WebKit *this)
{
  if (qword_1ECE71D88 != -1)
    dispatch_once(&qword_1ECE71D88, &__block_literal_global_6);
  return qword_1ECE71D90;
}

uint64_t WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain(WebKit *this)
{
  if (qword_1ECE71D80 != -1)
    dispatch_once(&qword_1ECE71D80, &__block_literal_global_4);
  return qword_1ECE71D78;
}

uint64_t ___ZN6WebKit58get_AuthenticationServicesCore_ASCAuthorizationErrorDomainEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)dlsym(v0, "ASCAuthorizationErrorDomain");
  if (result)
  {
    qword_1ECE71D78 = *(_QWORD *)result;
  }
  else
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASCAgentProxy(WebKit *this)
{
  if (qword_1ECE71D98 != -1)
    dispatch_once(&qword_1ECE71D98, &__block_literal_global_8);
  return qword_1ECE71DA0;
}

uint64_t WebKit::initASCAppleIDCredential(WebKit *this)
{
  if (qword_1ECE71DA8 != -1)
    dispatch_once(&qword_1ECE71DA8, &__block_literal_global_10);
  return qword_1ECE71DB0;
}

uint64_t WebKit::initASCAuthorizationPresentationContext(WebKit *this)
{
  if (qword_1ECE71DB8 != -1)
    dispatch_once(&qword_1ECE71DB8, &__block_literal_global_12_0);
  return qword_1ECE71DC0;
}

uint64_t WebKit::initASCAuthorizationPresenter(WebKit *this)
{
  if (qword_1ECE71DC8 != -1)
    dispatch_once(&qword_1ECE71DC8, &__block_literal_global_14);
  return qword_1ECE71DD0;
}

uint64_t WebKit::initASCCredentialRequestContext(WebKit *this)
{
  if (qword_1ECE71DD8 != -1)
    dispatch_once(&qword_1ECE71DD8, &__block_literal_global_18);
  return qword_1ECE71DE0;
}

uint64_t WebKit::initASCWebAuthenticationExtensionsClientInputs(WebKit *this)
{
  if (qword_1ECE71DE8 != -1)
    dispatch_once(&qword_1ECE71DE8, &__block_literal_global_20);
  return qword_1ECE71DF0;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1ECE71DF8 != -1)
    dispatch_once(&qword_1ECE71DF8, &__block_literal_global_22);
  return qword_1ECE71E00;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialLoginChoice(WebKit *this)
{
  if (qword_1ECE71E08 != -1)
    dispatch_once(&qword_1ECE71E08, &__block_literal_global_24);
  return qword_1ECE71E10;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1ECE71E18 != -1)
    dispatch_once(&qword_1ECE71E18, &__block_literal_global_26);
  return qword_1ECE71E20;
}

uint64_t WebKit::initASCPublicKeyCredentialAssertionOptions(WebKit *this)
{
  if (qword_1ECE71E28 != -1)
    dispatch_once(&qword_1ECE71E28, &__block_literal_global_28);
  return qword_1ECE71E30;
}

uint64_t WebKit::initASCPublicKeyCredentialCreationOptions(WebKit *this)
{
  if (qword_1ECE71E38 != -1)
    dispatch_once(&qword_1ECE71E38, &__block_literal_global_30);
  return qword_1ECE71E40;
}

uint64_t WebKit::initASCPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1ECE71E48 != -1)
    dispatch_once(&qword_1ECE71E48, &__block_literal_global_32);
  return qword_1ECE71E50;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1ECE71E58 != -1)
    dispatch_once(&qword_1ECE71E58, &__block_literal_global_34);
  return qword_1ECE71E60;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialLoginChoice(WebKit *this)
{
  if (qword_1ECE71E68 != -1)
    dispatch_once(&qword_1ECE71E68, &__block_literal_global_36);
  return qword_1ECE71E70;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1ECE71E78 != -1)
    dispatch_once(&qword_1ECE71E78, &__block_literal_global_38);
  return qword_1ECE71E80;
}

uint64_t WebKit::initASGlobalFrameIdentifier(WebKit *this)
{
  if (qword_1ECE71E88 != -1)
    dispatch_once(&qword_1ECE71E88, &__block_literal_global_40);
  return qword_1ECE71E90;
}

Class ___ZN6WebKitL23initASCWebKitSPISupportEv_block_invoke()
{
  Class result;

  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  result = objc_getClass("ASCWebKitSPISupport");
  qword_1ECE71D90 = (uint64_t)result;
  WebKit::getASCWebKitSPISupportClass[0] = WebKit::ASCWebKitSPISupportFunction;
  return result;
}

uint64_t WebKit::ASCWebKitSPISupportFunction(WebKit *this)
{
  return qword_1ECE71D90;
}

uint64_t ___ZN6WebKitL17initASCAgentProxyEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCAgentProxy");
  qword_1ECE71DA0 = result;
  if (result)
  {
    WebKit::getASCAgentProxyClass[0] = WebKit::ASCAgentProxyFunction;
  }
  else
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAgentProxyFunction(WebKit *this)
{
  return qword_1ECE71DA0;
}

uint64_t ___ZN6WebKitL24initASCAppleIDCredentialEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCAppleIDCredential");
  qword_1ECE71DB0 = result;
  if (result)
  {
    WebKit::getASCAppleIDCredentialClass = WebKit::ASCAppleIDCredentialFunction;
  }
  else
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAppleIDCredentialFunction(WebKit *this)
{
  return qword_1ECE71DB0;
}

uint64_t ___ZN6WebKitL39initASCAuthorizationPresentationContextEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCAuthorizationPresentationContext");
  qword_1ECE71DC0 = result;
  if (result)
  {
    WebKit::getASCAuthorizationPresentationContextClass[0] = WebKit::ASCAuthorizationPresentationContextFunction;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAuthorizationPresentationContextFunction(WebKit *this)
{
  return qword_1ECE71DC0;
}

uint64_t ___ZN6WebKitL29initASCAuthorizationPresenterEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCAuthorizationPresenter");
  qword_1ECE71DD0 = result;
  if (result)
  {
    WebKit::getASCAuthorizationPresenterClass[0] = WebKit::ASCAuthorizationPresenterFunction;
  }
  else
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAuthorizationPresenterFunction(WebKit *this)
{
  return qword_1ECE71DD0;
}

uint64_t ___ZN6WebKitL31initASCCredentialRequestContextEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCCredentialRequestContext");
  qword_1ECE71DE0 = result;
  if (result)
  {
    WebKit::getASCCredentialRequestContextClass[0] = WebKit::ASCCredentialRequestContextFunction;
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCCredentialRequestContextFunction(WebKit *this)
{
  return qword_1ECE71DE0;
}

Class ___ZN6WebKitL46initASCWebAuthenticationExtensionsClientInputsEv_block_invoke()
{
  Class result;

  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  result = objc_getClass("ASCWebAuthenticationExtensionsClientInputs");
  qword_1ECE71DF0 = (uint64_t)result;
  WebKit::getASCWebAuthenticationExtensionsClientInputsClass[0] = WebKit::ASCWebAuthenticationExtensionsClientInputsFunction;
  return result;
}

uint64_t WebKit::ASCWebAuthenticationExtensionsClientInputsFunction(WebKit *this)
{
  return qword_1ECE71DF0;
}

uint64_t ___ZN6WebKitL43initASCPlatformPublicKeyCredentialAssertionEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialAssertion");
  qword_1ECE71E00 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialAssertionClass[0] = WebKit::ASCPlatformPublicKeyCredentialAssertionFunction;
  }
  else
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1ECE71E00;
}

uint64_t ___ZN6WebKitL45initASCPlatformPublicKeyCredentialLoginChoiceEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialLoginChoice");
  qword_1ECE71E10 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0] = WebKit::ASCPlatformPublicKeyCredentialLoginChoiceFunction;
  }
  else
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialLoginChoiceFunction(WebKit *this)
{
  return qword_1ECE71E10;
}

uint64_t ___ZN6WebKitL46initASCPlatformPublicKeyCredentialRegistrationEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialRegistration");
  qword_1ECE71E20 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialRegistrationClass[0] = WebKit::ASCPlatformPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1ECE71E20;
}

uint64_t ___ZN6WebKitL42initASCPublicKeyCredentialAssertionOptionsEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPublicKeyCredentialAssertionOptions");
  qword_1ECE71E30 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialAssertionOptionsClass[0] = WebKit::ASCPublicKeyCredentialAssertionOptionsFunction;
  }
  else
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialAssertionOptionsFunction(WebKit *this)
{
  return qword_1ECE71E30;
}

uint64_t ___ZN6WebKitL41initASCPublicKeyCredentialCreationOptionsEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPublicKeyCredentialCreationOptions");
  qword_1ECE71E40 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialCreationOptionsClass[0] = WebKit::ASCPublicKeyCredentialCreationOptionsFunction;
  }
  else
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialCreationOptionsFunction(WebKit *this)
{
  return qword_1ECE71E40;
}

uint64_t ___ZN6WebKitL36initASCPublicKeyCredentialDescriptorEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCPublicKeyCredentialDescriptor");
  qword_1ECE71E50 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialDescriptorClass[0] = WebKit::ASCPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1ECE71E50;
}

uint64_t ___ZN6WebKitL46initASCSecurityKeyPublicKeyCredentialAssertionEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialAssertion");
  qword_1ECE71E60 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialAssertionClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialAssertionFunction;
  }
  else
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1ECE71E60;
}

uint64_t ___ZN6WebKitL48initASCSecurityKeyPublicKeyCredentialLoginChoiceEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialLoginChoice");
  qword_1ECE71E70 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialLoginChoiceFunction;
  }
  else
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialLoginChoiceFunction(WebKit *this)
{
  return qword_1ECE71E70;
}

uint64_t ___ZN6WebKitL49initASCSecurityKeyPublicKeyCredentialRegistrationEv_block_invoke()
{
  uint64_t result;

  WebKit::AuthenticationServicesCoreLibrary(0);
  result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialRegistration");
  qword_1ECE71E80 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialRegistrationClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1ECE71E80;
}

Class ___ZN6WebKitL27initASGlobalFrameIdentifierEv_block_invoke()
{
  Class result;

  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  result = objc_getClass("ASGlobalFrameIdentifier");
  qword_1ECE71E90 = (uint64_t)result;
  WebKit::getASGlobalFrameIdentifierClass[0] = WebKit::ASGlobalFrameIdentifierFunction;
  return result;
}

uint64_t WebKit::ASGlobalFrameIdentifierFunction(WebKit *this)
{
  return qword_1ECE71E90;
}

uint64_t WebKit::AuthenticationServicesLibrary(WebKit *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit29AuthenticationServicesLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE71EA0 != -1)
    dispatch_once(&qword_1ECE71EA0, block);
  return _MergedGlobals_42;
}

uint64_t ___ZN6WebKit29AuthenticationServicesLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices", 2);
  _MergedGlobals_42 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 30;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASAuthorizationController(WebKit *this)
{
  if (qword_1ECE71EB8 != -1)
    dispatch_once(&qword_1ECE71EB8, &__block_literal_global_4);
  return qword_1ECE71EC0;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialProvider(WebKit *this)
{
  if (qword_1ECE71EC8 != -1)
    dispatch_once(&qword_1ECE71EC8, &__block_literal_global_6_0);
  return qword_1ECE71ED0;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialProvider(WebKit *this)
{
  if (qword_1ECE71ED8 != -1)
    dispatch_once(&qword_1ECE71ED8, &__block_literal_global_8_0);
  return qword_1ECE71EE0;
}

uint64_t WebKit::initASPublicKeyCredentialClientData(WebKit *this)
{
  if (qword_1ECE71EE8 != -1)
    dispatch_once(&qword_1ECE71EE8, &__block_literal_global_10_0);
  return qword_1ECE71EF0;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1ECE71EF8 != -1)
    dispatch_once(&qword_1ECE71EF8, &__block_literal_global_12_1);
  return qword_1ECE71F00;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1ECE71F08 != -1)
    dispatch_once(&qword_1ECE71F08, &__block_literal_global_14_0);
  return qword_1ECE71F10;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1ECE71F18 != -1)
    dispatch_once(&qword_1ECE71F18, &__block_literal_global_16);
  return qword_1ECE71F20;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialParameters(WebKit *this)
{
  if (qword_1ECE71F28 != -1)
    dispatch_once(&qword_1ECE71F28, &__block_literal_global_18_0);
  return qword_1ECE71F30;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1ECE71F38 != -1)
    dispatch_once(&qword_1ECE71F38, &__block_literal_global_20_0);
  return qword_1ECE71F40;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1ECE71F48 != -1)
    dispatch_once(&qword_1ECE71F48, &__block_literal_global_22_0);
  return qword_1ECE71F50;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1ECE71F58 != -1)
    dispatch_once(&qword_1ECE71F58, &__block_literal_global_24_0);
  return qword_1ECE71F60;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialLargeBlobAssertionInput(WebKit *this)
{
  if (qword_1ECE71F68 != -1)
    dispatch_once(&qword_1ECE71F68, &__block_literal_global_26_0);
  return qword_1ECE71F70;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput(WebKit *this)
{
  if (qword_1ECE71F78 != -1)
    dispatch_once(&qword_1ECE71F78, &__block_literal_global_28_0);
  return qword_1ECE71F80;
}

uint64_t WebKit::get_AuthenticationServices_ASAuthorizationErrorDomain(WebKit *this)
{
  if (qword_1ECE71EB0 != -1)
    dispatch_once(&qword_1ECE71EB0, &__block_literal_global_5);
  return qword_1ECE71EA8;
}

uint64_t ___ZN6WebKit53get_AuthenticationServices_ASAuthorizationErrorDomainEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)dlsym(v1, "ASAuthorizationErrorDomain");
  if (result)
  {
    qword_1ECE71EA8 = *(_QWORD *)result;
  }
  else
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFRegistrationInput(WebKit *this)
{
  if (qword_1ECE71F88 != -1)
    dispatch_once(&qword_1ECE71F88, &__block_literal_global_30_0);
  return qword_1ECE71F90;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFAssertionInputValues(WebKit *this)
{
  if (qword_1ECE71F98 != -1)
    dispatch_once(&qword_1ECE71F98, &__block_literal_global_32_0);
  return qword_1ECE71FA0;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFAssertionInput(WebKit *this)
{
  if (qword_1ECE71FA8 != -1)
    dispatch_once(&qword_1ECE71FA8, &__block_literal_global_34_0);
  return qword_1ECE71FB0;
}

uint64_t ___ZN6WebKitL29initASAuthorizationControllerEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationController");
  qword_1ECE71EC0 = result;
  if (result)
  {
    WebKit::getASAuthorizationControllerClass[0] = WebKit::ASAuthorizationControllerFunction;
  }
  else
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationControllerFunction(WebKit *this)
{
  return qword_1ECE71EC0;
}

uint64_t ___ZN6WebKitL54initASAuthorizationPlatformPublicKeyCredentialProviderEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialProvider");
  qword_1ECE71ED0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialProviderClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialProviderFunction;
  }
  else
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialProviderFunction(WebKit *this)
{
  return qword_1ECE71ED0;
}

uint64_t ___ZN6WebKitL57initASAuthorizationSecurityKeyPublicKeyCredentialProviderEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialProvider");
  qword_1ECE71EE0 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialProviderClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialProviderFunction;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialProviderFunction(WebKit *this)
{
  return qword_1ECE71EE0;
}

uint64_t ___ZN6WebKitL35initASPublicKeyCredentialClientDataEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASPublicKeyCredentialClientData");
  qword_1ECE71EF0 = result;
  if (result)
  {
    WebKit::getASPublicKeyCredentialClientDataClass[0] = WebKit::ASPublicKeyCredentialClientDataFunction;
  }
  else
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASPublicKeyCredentialClientDataFunction(WebKit *this)
{
  return qword_1ECE71EF0;
}

uint64_t ___ZN6WebKitL58initASAuthorizationPlatformPublicKeyCredentialRegistrationEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialRegistration");
  qword_1ECE71F00 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialRegistrationClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1ECE71F00;
}

uint64_t ___ZN6WebKitL61initASAuthorizationSecurityKeyPublicKeyCredentialRegistrationEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialRegistration");
  qword_1ECE71F10 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialRegistrationClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1ECE71F10;
}

uint64_t ___ZN6WebKitL55initASAuthorizationPlatformPublicKeyCredentialAssertionEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialAssertion");
  qword_1ECE71F20 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialAssertionClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialAssertionFunction;
  }
  else
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1ECE71F20;
}

uint64_t ___ZN6WebKitL48initASAuthorizationPublicKeyCredentialParametersEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialParameters");
  qword_1ECE71F30 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialParametersClass[0] = WebKit::ASAuthorizationPublicKeyCredentialParametersFunction;
  }
  else
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialParametersFunction(WebKit *this)
{
  return qword_1ECE71F30;
}

uint64_t ___ZN6WebKitL56initASAuthorizationPlatformPublicKeyCredentialDescriptorEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialDescriptor");
  qword_1ECE71F40 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialDescriptorClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1ECE71F40;
}

uint64_t ___ZN6WebKitL59initASAuthorizationSecurityKeyPublicKeyCredentialDescriptorEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor");
  qword_1ECE71F50 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialDescriptorClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1ECE71F50;
}

uint64_t ___ZN6WebKitL58initASAuthorizationSecurityKeyPublicKeyCredentialAssertionEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialAssertion");
  qword_1ECE71F60 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialAssertionClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialAssertionFunction;
  }
  else
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1ECE71F60;
}

uint64_t ___ZN6WebKitL61initASAuthorizationPublicKeyCredentialLargeBlobAssertionInputEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput");
  qword_1ECE71F70 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialLargeBlobAssertionInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialLargeBlobAssertionInputFunction;
  }
  else
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialLargeBlobAssertionInputFunction(WebKit *this)
{
  return qword_1ECE71F70;
}

uint64_t ___ZN6WebKitL64initASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput");
  qword_1ECE71F80 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputFunction;
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputFunction(WebKit *this)
{
  return qword_1ECE71F80;
}

uint64_t ___ZN6WebKitL58initASAuthorizationPublicKeyCredentialPRFRegistrationInputEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFRegistrationInput");
  qword_1ECE71F90 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFRegistrationInputFunction;
  }
  else
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFRegistrationInputFunction(WebKit *this)
{
  return qword_1ECE71F90;
}

uint64_t ___ZN6WebKitL61initASAuthorizationPublicKeyCredentialPRFAssertionInputValuesEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFAssertionInputValues");
  qword_1ECE71FA0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputValuesClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputValuesFunction;
  }
  else
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputValuesFunction(WebKit *this)
{
  return qword_1ECE71FA0;
}

uint64_t ___ZN6WebKitL55initASAuthorizationPublicKeyCredentialPRFAssertionInputEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::AuthenticationServicesLibrary(a1);
  result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFAssertionInput");
  qword_1ECE71FB0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputFunction;
  }
  else
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputFunction(WebKit *this)
{
  return qword_1ECE71FB0;
}

WebKit::AuthenticatorTransportServiceObserver *WebKit::AuthenticatorTransportServiceObserver::AuthenticatorTransportServiceObserver(WebKit::AuthenticatorTransportServiceObserver *this)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34AB900;
  return this;
}

WebKit::AuthenticatorObserver *WebKit::AuthenticatorObserver::AuthenticatorObserver(WebKit::AuthenticatorObserver *this)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34AB930;
  return this;
}

_QWORD *WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::CompletionHandler(_QWORD *a1)
{
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::CompletionHandler(a1);
  return a1;
}

{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::Function(a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void WebKit::AuthenticatorManager::timeOutTimerFired(WebKit::AuthenticatorManager *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4[8];
  uint64_t v5;
  _BYTE v6[24];
  WebKit::AuthenticatorManager *v7;

  v7 = this;
  v4[0] = 31;
  v2 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Operation timed out.", (const char *)0x14);
  WTF::String::String(&v5, v2, v3);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v6, (uint64_t)v4);
  WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)this, (uint64_t)v6);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v6);
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v4);
  WebKit::AuthenticatorManager::clearState(this);
}

_QWORD *std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(_QWORD *a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

_QWORD *WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::HashSet(_QWORD *a1)
{
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::HashSet(a1);
  return a1;
}

{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  return a1;
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::handleRequest(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v7[8];
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL())
  {
    v7[0] = 31;
    v4 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by a new request.", (const char *)0x31);
    WTF::String::String(&v8, v4, v5);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v9, (uint64_t)v7);
    WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)a1, (uint64_t)v9);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v9);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v7);
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 196));
  }
  WebKit::AuthenticatorManager::clearState((WebKit::AuthenticatorManager *)a1);
  WebKit::WebAuthenticationRequestData::operator=((uint64_t)(a1 + 8), v11);
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=((uint64_t)(a1 + 194));
  WebKit::AuthenticatorManager::initTimeOutTimer((WebKit::AuthenticatorManager *)a1);
  if (a1[212])
    return WebKit::AuthenticatorManager::runPresenter((WebKit::AuthenticatorManager *)a1);
  else
    return (WTF::RefCountedBase *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
}

BOOL WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
{
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
}

uint64_t WebKit::AuthenticatorManager::invokePendingCompletionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = !std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a2);
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::dimissPresenter(v3, v7);
  }
  else
  {
    v5 = v7;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void>(&v6, &v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
  }
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 776), v8);
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>(uint64_t a1, uint64_t a2)
{
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100](uint64_t a1)
{
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100](a1);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__impl(a1);
  return a1;
}

void WebKit::AuthenticatorManager::clearState(WebKit::AuthenticatorManager *this)
{
  _BYTE v2[16];
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v7[40];
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  _QWORD v11[2];
  _BYTE v12[24];
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL())
  {
    WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::clear((WebKit::AuthenticatorManager *)((char *)this + 840));
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebKit::AuthenticatorManager *)((char *)this + 824));
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v2);
    std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)&v3);
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v4);
    v5 = 0;
    v6 = 0;
    std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100](v7);
    v7[32] = 0;
    v7[33] = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v8);
    memset(v9, 0, sizeof(v9));
    WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v9);
    memset(&v10, 0, sizeof(v10));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v10);
    memset(v11, 0, sizeof(v11));
    WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::ProcessQualified(v11);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::optional[abi:sn180100](v12);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    memset(&v16, 0, sizeof(v16));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v16);
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v17);
    std::optional<WebCore::MediationRequirement>::optional[abi:sn180100](v18);
    std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100](v19);
    WebKit::WebAuthenticationRequestData::operator=((uint64_t)this + 32, (uint64_t)v2);
    WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v2);
    std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100]((uint64_t)this + 816);
  }
}

void WebKit::WebAuthenticationRequestData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)a1, (uint64_t *)a2);
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](a1 + 16, a2 + 16);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=((uint64_t *)(a1 + 344), (uint64_t *)(a2 + 344));
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  WebKit::FrameInfoData::operator=(a1 + 384, (_WORD *)(a2 + 384));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 680), (WTF::StringImpl *)(a2 + 680));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)(a1 + 688), (uint64_t *)(a2 + 688));
  *(_WORD *)(a1 + 696) = *(_WORD *)(a2 + 696);
  std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]((WebCore::SecurityOriginData *)(a1 + 704), a2 + 704);
}

void WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(uint64_t a1)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a1);
  WTF::ThreadLikeAssertion::operator=();
}

uint64_t WebKit::AuthenticatorManager::initTimeOutTimer(WebKit::AuthenticatorManager *this)
{
  uint64_t result;
  WTF::Seconds *v3;
  unint64_t v4;
  double v5;
  int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE v10[11];
  char v11;
  WebKit::AuthenticatorManager *v12;

  v12 = this;
  v11 = 3;
  result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)this + 728, &v11);
  if ((result & 1) == 0)
  {
    std::optional<unsigned int>::optional[abi:sn180100](v10);
    v9 = v10;
    v8 = v10;
    WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>((uint64_t)this + 48, (uint64_t *)&v9, (uint64_t *)&v8);
    v7 = 0;
    v6 = std::optional<unsigned int>::value_or[abi:sn180100]<unsigned int const&>((uint64_t)v10);
    v3 = (WTF::Seconds *)std::min[abi:sn180100]<unsigned int>(&v6);
    v7 = *(_DWORD *)v3;
    LODWORD(v4) = v7;
    v5 = WTF::Seconds::fromMilliseconds(v3, (double)v4);
    return WTF::RunLoop::TimerBase::startOneShot((uint64_t)this + 784, v5);
  }
  return result;
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::runPresenter(WebKit::AuthenticatorManager *this)
{
  uint64_t v3[2];

  v3[1] = (uint64_t)this;
  WebKit::AuthenticatorManager::getTransports(this, v3);
  if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(v3))
  {
    WebKit::AuthenticatorManager::cancel(this);
  }
  else
  {
    WebKit::AuthenticatorManager::startDiscovery((uint64_t)this, v3);
    if (*((_DWORD *)this + 212) != 1)
      (*(void (**)(WebKit::AuthenticatorManager *, uint64_t *))(*(_QWORD *)this + 144))(this, v3);
  }
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v3);
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  WebKit::AuthenticatorManager *v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if ((result & 1) != 0)
  {
    v8[0] = *((_QWORD *)a1 + 48);
    v8[1] = *((_QWORD *)a1 + 49);
    v8[2] = *((_QWORD *)a1 + 50);
    v8[3] = *((_QWORD *)a1 + 51);
    if ((std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100]((uint64_t)v8) & 1) == 0)
      return WebKit::AuthenticatorManager::cancelRequest(a1);
    std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)v8);
    result = WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>>(v5, v10);
    if (((result ^ 1) & 1) == 0)
    {
      if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v9) & 1) == 0)
        return WebKit::AuthenticatorManager::cancelRequest(a1);
      v6 = v9;
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)v8);
      result = std::operator!=[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v6, v7 + 8);
      if ((result & 1) == 0)
        return WebKit::AuthenticatorManager::cancelRequest(a1);
    }
  }
  return result;
}

uint64_t std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a1) & 1;
}

BOOL WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  return v2 == std::span<char const,18446744073709551615ul>::data[abi:sn180100](a2);
}

void std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1;
}

BOOL std::operator!=[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](a1) & 1) != 0)
  {
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](a1);
    return !WebCore::operator==(v2, a2);
  }
  else
  {
    return 1;
  }
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v7[3];
  char v8;
  os_log_t oslog;
  uint64_t v10;
  uint64_t v11;
  char v12[8];
  uint64_t v13;
  _BYTE v14[24];
  WebKit::AuthenticatorManager *v15;

  v15 = this;
  v12[0] = 31;
  v2 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by the user.", (const char *)0x2C);
  v11 = v3;
  v10 = v2;
  WTF::String::String(&v13, v2, v3);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v14, (uint64_t)v12);
  WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)this, (uint64_t)v14);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v14);
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v12);
  oslog = (os_log_t)qword_1ECE71AC8;
  v8 = 16;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
  {
    v4 = oslog;
    v5 = v8;
    __os_log_helper_16_0_0(v7);
    _os_log_error_impl(&dword_196BCC000, v4, v5, "Request cancelled due to AuthenticatorManager::cancelRequest being called.", (uint8_t *)v7, 2u);
  }
  WebKit::AuthenticatorManager::clearState(this);
  return WTF::RunLoop::TimerBase::stop((WebKit::AuthenticatorManager *)((char *)this + 784));
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this, const API::WebAuthenticationPanel *a2)
{
  WTF *isMain;
  WTF *isIntegralOrPointerType;
  uint64_t result;

  isMain = (WTF *)WTF::RunLoop::isMain(this);
  if (((isMain ^ 1) & 1) != 0)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196DBE714);
  }
  result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if ((result & 1) != 0)
  {
    result = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 376);
    if ((const API::WebAuthenticationPanel *)result == a2)
      return WebKit::AuthenticatorManager::cancelRequest(this);
  }
  return result;
}

uint64_t WTF::RunLoop::isMain(WTF::RunLoop *this)
{
  WTF::RunLoop *v1;

  v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  return WTF::RunLoop::isCurrent(v1) & 1;
}

uint64_t WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t WebKit::AuthenticatorManager::cancel(WebKit::AuthenticatorManager *this)
{
  WTF *isMain;
  WTF *isIntegralOrPointerType;
  uint64_t result;

  isMain = (WTF *)WTF::RunLoop::isMain(this);
  if (((isMain ^ 1) & 1) != 0)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196DBE86CLL);
  }
  result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if ((result & 1) != 0)
    return WebKit::AuthenticatorManager::cancelRequest(this);
  return result;
}

uint64_t WebKit::AuthenticatorManager::enableNativeSupport(uint64_t this)
{
  *(_DWORD *)(this + 848) = 1;
  return this;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(WebKit::AuthenticatorManager *this)
{
  WTF::ThreadSafeRefCountedBase *v3;
  _QWORD v4[2];

  v4[1] = this;
  WTF::RunLoop::main(this);
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v3, (uint64_t)this);
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>(v4, (uint64_t *)&v3);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)v4);
  return WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0((uint64_t *)&v3);
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2)
{
  WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>,WebKit::AuthenticatorManager::clearStateAsync(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0(uint64_t *a1)
{
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::clear(WTF::RefCountedBase *a1)
{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::clear(a1);
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1);
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>(uint64_t a1)
{
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>(a1);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN7WebCore34PublicKeyCredentialCreationOptionsENS2_33PublicKeyCredentialRequestOptionsEEECI1NS0_6__baseILNS0_6_TraitE1EJS3_S4_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_((_DWORD *)(a1 + 8));
  return a1;
}

_BYTE *std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::GlobalFrameIdentifier,true>::__optional_move_assign_base(a1);
  return a1;
}

_QWORD *WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::ProcessQualified(_QWORD *a1)
{
  WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::ProcessQualified(a1);
  return a1;
}

{
  WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::ObjectIdentifierGeneric(a1);
  WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::ObjectIdentifierGeneric(a1 + 1);
  return a1;
}

_BYTE *std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::optional<WebCore::MediationRequirement>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::MediationRequirement>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::MediationRequirement,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

void WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData(WebKit::WebAuthenticationRequestData *this)
{
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  API::Object *v4;
  char *v5;
  char *v6;
  _QWORD v7[4];
  WTF::StringImpl *v8;

  std::optional<WebCore::SecurityOriginData>::~optional((WebKit::WebAuthenticationRequestData *)((char *)this + 704));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 86);
  v5 = (char *)this + 680;
  v6 = (char *)this + 680;
  v7[1] = (char *)this + 680;
  v7[0] = 0;
  v7[3] = (char *)this + 680;
  v7[2] = v7;
  v8 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 85);
  if (v8)
    WTF::StringImpl::deref(v8, v2);
  WebKit::FrameInfoData::~FrameInfoData((WebKit::WebAuthenticationRequestData *)((char *)this + 384));
  v3[1] = (char *)this + 344;
  v3[0] = 0;
  v3[3] = (char *)this + 344;
  v3[2] = v3;
  v4 = (API::Object *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 43);
  if (v4)
    API::Object::deref((CFTypeRef *)v4);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 41);
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~variant[abi:sn180100]((uint64_t)this + 16);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(this);
}

void std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](a1, 0);
}

{
  uint64_t v2;

  v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

uint64_t WebKit::AuthenticatorManager::authenticatorAdded(uint64_t a1, uint64_t *a2)
{
  WebKit::Authenticator *v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t *v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  v3 = (WebKit::Authenticator *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a2);
  WebKit::Authenticator::setObserver(v3, (WebKit::AuthenticatorObserver *)(a1 + 16));
  v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)v7);
  WebKit::Authenticator::handleRequest(v4, a1 + 32);
  return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::add((uint64_t)v6, (WTF::RefCountedBase *)(a1 + 840), v7);
}

uint64_t *WebKit::Authenticator::setObserver(WebKit::Authenticator *this, WebKit::AuthenticatorObserver *a2)
{
  WTF::ThreadSafeRefCountedBase *v4[3];

  v4[2] = this;
  v4[1] = a2;
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v4, (uint64_t)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)this + 3, (uint64_t *)v4);
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)v4);
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t *a3)
{
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(a1, a2, a3);
}

void WebKit::AuthenticatorManager::serviceStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::updatePresenter(v3, v6);
  }
  else
  {
    v4 = v6;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(&v5, &v4);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v5);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v5);
  }
}

BOOL std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]()
{
  _QWORD *v0;

  std::to_address[abi:sn180100]<char const>();
  return *v0 != 0;
}

uint64_t std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]()
{
  uint64_t v0;

  std::to_address[abi:sn180100]<char const>();
  return *(_QWORD *)v0;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::ThreadSafeRefCountedBase *v9;
  WTF::ThreadSafeRefCountedBase *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v10, (WTF::ThreadSafeRefCountedBase **)(a1 + 720));
  if (WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(&v10))
  {
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v9, a1 + 376);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)&v10, (uint64_t *)&v9);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v9);
  }
  v3 = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(&v10);
  if (v3)
  {
    v8 = 1;
  }
  else
  {
    WTF::RunLoop::main((WTF::RunLoop *)v3);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, (uint64_t *)&v10);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(&v6, v11);
    WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>(&v7, &v5);
    WTF::RunLoop::dispatch();
    WTF::Function<void ()(void)>::~Function((uint64_t)&v7);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(&v5);
    v8 = 0;
  }
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v10);
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(_QWORD *a1, _BYTE *a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function(uint64_t a1)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function(a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::respondReceived(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  _BYTE *v5;
  BOOL v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2;
  result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(a1 + 784));
  v4 = 0;
  if ((result & 1) == 0)
  {
    v8 = 3;
    result = std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(a1 + 728, &v8);
    v4 = 1;
    if ((result & 1) == 0)
    {
      result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
      v4 = result ^ 1;
    }
  }
  if ((v4 & 1) == 0)
  {
    v7 = std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(v9);
    if (!v7)
    {
      std::get[abi:sn180100]<WebCore::ExceptionData,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(v9);
      v6 = 1;
      if (*v5 != 8)
        v6 = *v5 == 6;
      v7 = v6;
    }
    if (v7)
    {
      WebKit::AuthenticatorManager::invokePendingCompletionHandler(a1, v9);
      WebKit::AuthenticatorManager::clearStateAsync((WebKit::AuthenticatorManager *)a1);
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 784));
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9);
      return WebKit::AuthenticatorManager::restartDiscovery((WebKit::AuthenticatorManager *)a1);
    }
  }
  return result;
}

BOOL std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(uint64_t a1, char *a2)
{
  char *v2;

  if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](a1) & 1) != 0)
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](a1);
    return *v2 != *a2;
  }
  else
  {
    return 1;
  }
}

BOOL std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a1);
}

void std::get[abi:sn180100]<WebCore::ExceptionData,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  std::get[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a1);
}

uint64_t WebKit::AuthenticatorManager::restartDiscovery(WebKit::AuthenticatorManager *this)
{
  uint64_t result;
  WebKit::AuthenticatorTransportService *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v5 = (unsigned int *)((char *)this + 824);
  v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WebKit::AuthenticatorManager *)((char *)this + 824));
  result = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v5);
  v3 = result;
  while (v4 != v3)
  {
    v2 = (WebKit::AuthenticatorTransportService *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
    result = WebKit::AuthenticatorTransportService::restartDiscovery(v2);
    v4 += 8;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::AuthenticatorManager::respondReceived(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::respondReceived(a1 - 16, a2);
}

uint64_t WebKit::AuthenticatorManager::downgrade(WTF::RunLoop *a1, WTF::ThreadSafeRefCountedBase *a2, uint64_t *a3)
{
  WTF::ThreadSafeRefCountedBase *v5[2];
  uint64_t v6;
  uint64_t *v7;
  WTF::ThreadSafeRefCountedBase *v8;
  WTF::RunLoop *v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  WTF::RunLoop::main(a1);
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v5, (uint64_t)a1);
  v5[1] = v8;
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>(&v6, (uint64_t *)v5);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v6);
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0((uint64_t *)v5);
  return WebKit::AuthenticatorManager::authenticatorAdded((uint64_t)a1, v7);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t `non-virtual thunk to'WebKit::AuthenticatorManager::downgrade(uint64_t a1, WTF::ThreadSafeRefCountedBase *a2, uint64_t *a3)
{
  return WebKit::AuthenticatorManager::downgrade((WTF::RunLoop *)(a1 - 16), a2, a3);
}

void WebKit::AuthenticatorManager::authenticatorStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t __b;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t *p_b;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD v13[4];
  WTF::StringImpl *v14;

  v9 = a1;
  v8 = a2;
  memset(&__b, 0, sizeof(__b));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&__b);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 712), (WTF::StringImpl *)&__b);
  p_b = &__b;
  v11 = &__b;
  v12 = &__b;
  v13[1] = &__b;
  v13[0] = 0;
  v13[3] = &__b;
  v13[2] = v13;
  v14 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&__b);
  if (v14)
    WTF::StringImpl::deref(v14, v3);
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    v4 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::updatePresenter(v4, v8);
  }
  else
  {
    v5 = v8;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(&v6, &v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
  }
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(_QWORD *a1, _BYTE *a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void `non-virtual thunk to'WebKit::AuthenticatorManager::authenticatorStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
  WebKit::AuthenticatorManager::authenticatorStatusUpdated(a1 - 16, a2);
}

WTF::StringImpl *WebKit::AuthenticatorManager::requestPin(WTF::StringImpl **a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[3];
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  WTF::ThreadSafeRefCountedBase *v14[2];
  uint64_t v15;
  uint64_t __b;
  WTF::RefCountedBase *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t *p_b;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD v23[4];
  WTF::StringImpl *v24;

  v19 = a1;
  v18 = a2;
  v17 = a3;
  if (WTF::String::isNull((WTF::String *)(a1 + 89)))
  {
    WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v14, (uint64_t)a1);
    v14[1] = (WTF::ThreadSafeRefCountedBase *)a1;
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v15, (uint64_t)v17);
    if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
    {
      v6 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
      v7 = v18;
      WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v12);
      WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(&v13, (uint64_t *)v14);
      WebKit::AuthenticatorPresenterCoordinator::requestPin(v6, v7, &v13);
      WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v13);
      WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v12);
      v11 = 1;
    }
    else
    {
      v8 = v18;
      WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(v9, (uint64_t *)v14);
      WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void>(&v10, &v8);
      WebKit::AuthenticatorManager::dispatchPanelClientCall((uint64_t)a1, (uint64_t)&v10);
      WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v10);
      WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1((uint64_t)&v8);
      v11 = 0;
    }
    return (WTF::StringImpl *)WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0((uint64_t *)v14);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v17, (uint64_t)(a1 + 89));
    memset(&__b, 0, sizeof(__b));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&__b);
    WTF::String::operator=(a1 + 89, (WTF::StringImpl *)&__b);
    p_b = &__b;
    v21 = &__b;
    v22 = &__b;
    v23[1] = &__b;
    v23[0] = 0;
    v23[3] = &__b;
    v23[2] = v23;
    result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&__b);
    v24 = result;
    if (result)
      return WTF::StringImpl::deref(v24, v5);
  }
  return result;
}

BOOL WTF::String::isNull(WTF::String *this)
{
  return WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(this);
}

uint64_t WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(WTF::RefCountedBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::RefCountedBase *v6;

  v6 = a1;
  v5 = a2;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::String const&)>,decltype(nullptr)>(&v4, (uint64_t)a1);
  WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)&v4, v5);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v4);
}

_QWORD *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~CompletionHandler(a1);
  return a1;
}

void WTF::ThreadLikeAssertion::~ThreadLikeAssertion(WTF::ThreadLikeAssertion *this)
{
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(this);
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
}

uint64_t *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(a1 + 2, (uint64_t)(a2 + 2));
  return a1;
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void>(_QWORD *a1, _QWORD *a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1(uint64_t a1)
{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1(a1);
  return a1;
}

{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 2));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::AuthenticatorManager::requestPin(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WebKit::AuthenticatorManager::requestPin((WTF::StringImpl **)(a1 - 16), a2, a3);
}

void WebKit::AuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  unsigned int *v11;
  uint64_t v12;

  v12 = a1;
  v11 = (unsigned int *)a2;
  v10 = a3;
  v9 = a4;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    v5 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::selectAssertionResponse(v5, v11, v10 & 1, v9);
  }
  else
  {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, (uint64_t *)v11);
    v6[16] = v10 & 1;
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v7, (uint64_t)v9);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void>(&v8, (uint64_t)v6);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v8);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v8);
    WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0((uint64_t)v6);
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0(uint64_t a1)
{
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 24));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)a1);
  return a1;
}

void `non-virtual thunk to'WebKit::AuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  WebKit::AuthenticatorManager::selectAssertionResponse(a1 - 16, a2, a3 & 1, a4);
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[3];

  v5[2] = a1;
  v5[1] = a2;
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v4, a2);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void>(v5, (uint64_t)&v4);
  WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)v5);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)v5);
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v4);
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::~CompletionHandler(a1);
  return a1;
}

WTF::ThreadLikeAssertion *`non-virtual thunk to'WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(a1 - 16, a2);
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    return (WTF::ThreadLikeAssertion *)WebKit::AuthenticatorPresenterCoordinator::requestLAContextForUserVerification(v3, v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v5, (uint64_t)v7);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void>(&v6, (uint64_t)&v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
    return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v5);
  }
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(LAContext *)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *`non-virtual thunk to'WebKit::AuthenticatorManager::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  return WebKit::AuthenticatorManager::requestLAContextForUserVerification(a1 - 16, a2);
}

_WORD *__os_log_helper_16_0_0(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this)
{
  return WebKit::AuthenticatorManager::cancelRequest((WebKit::AuthenticatorManager *)((char *)this - 16));
}

void *WebKit::AuthenticatorManager::createService@<X0>(unsigned __int8 a1@<W1>, uint64_t *a2@<X2>, WebKit::HidService **a3@<X8>)
{
  return WebKit::AuthenticatorTransportService::create(a1, a2, a3);
}

uint64_t WebKit::AuthenticatorManager::filterTransports(WebKit::NfcService *a1, uint64_t *a2)
{
  uint64_t isAvailable;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t *v7;
  WebKit::NfcService *v8;

  v8 = a1;
  v7 = a2;
  isAvailable = WebKit::NfcService::isAvailable(a1);
  if ((isAvailable & 1) == 0)
  {
    v6 = 1;
    isAvailable = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v6);
  }
  if ((WebKit::LocalService::isAvailable((WebKit::LocalService *)isAvailable) & 1) == 0)
  {
    v5 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v5);
  }
  v4 = 2;
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v4);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(uint64_t *a1, unsigned __int8 *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::find(a1, a2);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(a1, v3, v4);
}

WTF::ASCIILiteral *WebKit::AuthenticatorManager::startDiscovery(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5[4];

  v5[3] = a1;
  v5[2] = (uint64_t)a2;
  v4 = a1;
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const>((uint64_t)v5, a2, &v4);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 824), v5);
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v5);
}

BOOL WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1);
  return WTF::Mapper<WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,void>::map(a1, a2, a3);
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WTF::ASCIILiteral *WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

BOOL std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(uint64_t a1, char *a2)
{
  char *v2;

  if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](a1) & 1) != 0)
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](a1);
    return *v2 == *a2;
  }
  else
  {
    return 0;
  }
}

_BYTE *std::optional<unsigned int>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<unsigned int>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<unsigned int,true>::__optional_move_assign_base(a1);
  return a1;
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;

  v7 = a1;
  v6[3] = a2;
  v6[2] = a3;
  v3 = WTF::makeVisitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(*a2, *a3);
  v6[1] = v4;
  v6[0] = v3;
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,void>((uint64_t)v6, v7);
}

_DWORD *std::min[abi:sn180100]<unsigned int>(_DWORD *a1)
{
}

uint64_t std::optional<unsigned int>::value_or[abi:sn180100]<unsigned int const&>(uint64_t a1)
{
  unsigned int *v1;

  if ((std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1) == 0)
    return 120000;
  std::__to_address[abi:sn180100]<char const>();
  return *v1;
}

uint64_t WTF::RunLoop::TimerBase::startOneShot(uint64_t a1, double a2)
{
  double v3[3];
  double v4;

  v4 = a2;
  *(_QWORD *)&v3[2] = a1;
  v3[0] = WTF::seconds_literals::operator"" _s();
  v3[1] = *std::max[abi:sn180100]<WTF::Seconds>(&v4, v3);
  return WTF::RunLoop::TimerBase::start();
}

double WTF::Seconds::fromMilliseconds(WTF::Seconds *this, double a2)
{
  double v3;

  WTF::Seconds::Seconds((WTF::Seconds *)&v3, a2 / 1000.0);
  return v3;
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::runPanel(WebKit::AuthenticatorManager *this)
{
  WTF::RefCountedBase *result;
  uint64_t v3;
  BOOL ClientDataType;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::WebPageProxy *v8;
  uint64_t v9;
  WTF::RefCountedBase *v10;
  char v11;
  uint64_t v12;
  WTF::ThreadSafeRefCountedBase *v13;
  WTF::ThreadSafeRefCountedBase *v14[2];
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  WTF::RefCountedBase *v24;
  WebKit::WebPageProxy *v25;
  WebKit::AuthenticatorManager *v26;
  _DWORD **v27;
  _DWORD **v28;
  _DWORD **v29;
  _DWORD **v30;
  _QWORD v31[4];
  WTF::StringImpl *v32;
  _DWORD **v33;
  _DWORD **v34;
  _QWORD v35[4];
  WTF::StringImpl *v36;
  CFTypeRef v37[38];

  v37[37] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v26 = this;
  result = (WTF::RefCountedBase *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get((uint64_t *)this + 45);
  v25 = result;
  if (result)
  {
    v24 = 0;
    std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)this + 384);
    v23 = *(_OWORD *)(v3 + 8);
    result = (WTF::RefCountedBase *)WebKit::WebFrameProxy::webFrame(v23, *((uint64_t *)&v23 + 1));
    v24 = result;
    if (result)
    {
      v22 = (uint64_t)this + 48;
      WebKit::AuthenticatorManager::getTransports(this, &v21);
      if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(&v21))
      {
        WebKit::AuthenticatorManager::cancel(this);
        v20 = 1;
      }
      else
      {
        ClientDataType = WebKit::getClientDataType(v22);
        API::WebAuthenticationPanel::create((uint64_t)this, &v18, &v21, ClientDataType, &v17, &v19);
        WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=<API::WebAuthenticationPanel>((uint64_t *)this + 47, &v19);
        WTF::Ref<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::~Ref(&v19);
        v28 = &v17;
        v29 = &v17;
        v30 = &v17;
        v31[1] = &v17;
        v31[0] = 0;
        v31[3] = &v17;
        v31[2] = v31;
        v32 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v17);
        if (v32)
          WTF::StringImpl::deref(v32, v5);
        v27 = &v18;
        v33 = &v18;
        v34 = &v18;
        v35[1] = &v18;
        v35[0] = 0;
        v35[3] = &v18;
        v35[2] = v35;
        v36 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v18);
        if (v36)
          WTF::StringImpl::deref(v36, v6);
        v16 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 376);
        v7 = WebKit::WebPageProxy::uiClient(v25);
        v8 = v25;
        v9 = v16;
        v10 = v24;
        WebKit::FrameInfoData::FrameInfoData(v37, (WebKit::AuthenticatorManager *)((char *)this + 416));
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(&v12, (WTF::RefCountedBase *)&v21);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v13, v16);
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v14, (uint64_t)this);
        v14[1] = this;
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v11);
        WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::CompletionHandler<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(&v15, &v12);
        (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, WTF::RefCountedBase *, CFTypeRef *, uint64_t *))(*(_QWORD *)v7 + 552))(v7, v8, v9, v10, v37, &v15);
        WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v15);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v11);
        WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(&v12);
        WebKit::FrameInfoData::~FrameInfoData((WebKit::FrameInfoData *)v37);
        v20 = 0;
      }
      return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)&v21);
    }
  }
  return result;
}

uint64_t WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(uint64_t *a1)
{
  uint64_t v2;

  if (!WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
    return 0;
  v2 = std::span<char const,18446744073709551615ul>::size[abi:sn180100](*a1);
  if (v2)
    return v2 - 16;
  else
    return 0;
}

uint64_t WebKit::AuthenticatorManager::getTransports@<X0>(WebKit::AuthenticatorManager *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  WebKit::AuthenticatorManager *v8;
  _QWORD *v9;

  v9 = a2;
  v8 = this;
  v7 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a2);
  v6 = a2;
  v5 = a2;
  WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>((uint64_t)this + 48, (uint64_t *)&v6, (uint64_t *)&v5);
  return (*(uint64_t (**)(WebKit::AuthenticatorManager *, _QWORD *))(*(_QWORD *)this + 136))(this, a2);
}

BOOL WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(_QWORD *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(a1);
}

WTF::String *WebKit::`anonymous namespace'::getRpId(WTF::String *a1, uint64_t a2)
{
  uint64_t v3;
  const WTF::String *v4;
  uint64_t v6;

  if (std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2))
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    std::optional<WTF::String>::operator*[abi:sn180100](v3 + 16);
    return WTF::String::String(a1, v4);
  }
  else
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    return WTF::String::String(a1, (const WTF::String *)(v6 + 24));
  }
}

WTF::String *WebKit::`anonymous namespace'::getUserName(WTF::String *a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v4;
  const WTF::String *v6;

  v3 = std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
  if (v3)
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    return WTF::String::String(a1, (const WTF::String *)(v4 + 32));
  }
  else
  {
    v6 = (const WTF::String *)WTF::emptyString((WTF *)v3);
    return WTF::String::String(a1, v6);
  }
}

void WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=<API::WebAuthenticationPanel>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3[4];
  _QWORD v4[4];
  CFTypeRef *v5;

  v3[2] = (uint64_t)a1;
  v3[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v3, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v3);
  v3[3] = (uint64_t)v3;
  v4[1] = v3;
  v4[0] = 0;
  v4[3] = v3;
  v4[2] = v4;
  v5 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v3);
  if (v5)
    API::Object::deref(v5);
}

uint64_t *WTF::Ref<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::~Ref(uint64_t *a1)
{
  WTF::Ref<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  CFTypeRef *v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v7 = a1;
  v6 = &v2;
  v3 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v8 = v3;
    API::Object::deref(v3);
  }
  return v5;
}

uint64_t WebKit::WebPageProxy::uiClient(WebKit::WebPageProxy *this)
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
}

CFTypeRef *WebKit::FrameInfoData::FrameInfoData(CFTypeRef *this, const WebKit::FrameInfoData *a2)
{
  WebKit::FrameInfoData::FrameInfoData(this, a2);
  return this;
}

{
  *(_WORD *)this = *(_WORD *)a2;
  WebCore::ResourceRequest::ResourceRequest(this + 1, (const WebKit::FrameInfoData *)((char *)a2 + 8));
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)(this + 26), (const WebKit::FrameInfoData *)((char *)a2 + 208));
  WTF::String::String((WTF::String *)(this + 30), (const WebKit::FrameInfoData *)((char *)a2 + 240));
  memcpy(this + 31, (char *)a2 + 248, 0x2EuLL);
  return this;
}

uint64_t *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::RefCountedBase *a2)
{
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1, a2);
  return a1;
}

{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(a1, a2);
  return a1;
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

{
  uint64_t v3;

  v3 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, v3);
  return a1;
}

{
  WTF::ThreadSafeRefCountedBase *v5;

  v5 = (WTF::ThreadSafeRefCountedBase *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(a2);
  if (v5)
    WTF::ThreadSafeRefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

{
  WTF::ThreadSafeRefCountedBase *v3;
  WTF::ThreadSafeRefCountedBase *v6;

  if (a2)
    v3 = (WTF::ThreadSafeRefCountedBase *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(a2);
  else
    v3 = 0;
  v6 = v3;
  if (v3)
    WTF::ThreadSafeRefCountedBase::ref(v3);
  *a1 = v6;
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::CompletionHandler<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::CompletionHandler<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::Function<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::~CompletionHandler(a1);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(uint64_t *a1)
{
  WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1 + 2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1 + 1);
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)a1);
  return a1;
}

WTF::RefCountedBase *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet(a1);
  return a1;
}

{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable(a1);
  return a1;
}

WTF::StringImpl *WebKit::AuthenticatorManager::runPresenterInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  BOOL ClientDataType;
  uint64_t v9;
  char v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL *p_ClientDataType;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD v24[4];
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[4];
  WTF::StringImpl *v29;

  v13 = a1;
  v12 = a2;
  v11 = a1 + 48;
  v3 = v12;
  ClientDataType = WebKit::getClientDataType(v11);
  v21 = v10;
  v20 = a1;
  v19 = &v9;
  v18 = v3;
  p_ClientDataType = &ClientDataType;
  v16 = &v7;
  std::make_unique[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator,WebKit::AuthenticatorManager &,WTF::String,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String>((WebKit::AuthenticatorPresenterCoordinator *)v10, a1, (uint64_t)&v9, v3, &ClientDataType, (uint64_t)&v7);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100](a1 + 816);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100]((uint64_t)v10);
  v15 = &v7;
  v22 = &v7;
  v23 = &v7;
  v24[1] = &v7;
  v24[0] = 0;
  v24[3] = &v7;
  v24[2] = v24;
  v25 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v7);
  if (v25)
    WTF::StringImpl::deref(v25, v4);
  v14 = &v9;
  v26 = &v9;
  v27 = &v9;
  v28[1] = &v9;
  v28[0] = 0;
  v28[3] = &v9;
  v28[2] = v28;
  result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v9);
  v29 = result;
  if (result)
    return WTF::StringImpl::deref(v29, v6);
  return result;
}

uint64_t std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](a1, 0);
  return a1;
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void>(_QWORD *a1, _BYTE *a2)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
}

_QWORD *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(_QWORD *a1)
{
  WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::ObjectIdentifierGeneric(a1);
  return a1;
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;

  v7 = a1;
  v6[3] = a2;
  v6[2] = a3;
  v3 = WTF::makeVisitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(*a2, *a3);
  v6[1] = v4;
  v6[0] = v3;
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>((uint64_t)v6, v7);
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(WTF::ThreadSafeRefCountedBase **a1, WTF::ThreadSafeRefCountedBase **a2)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  return a1;
}

{
  WTF::ThreadSafeRefCountedBase *v5;

  v5 = *a2;
  if (*a2)
    WTF::ThreadSafeRefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

BOOL WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(_QWORD *a1)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  v2 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(a1);
  v3 = 1;
  if (!v2)
  {
    v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
    return !WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(v4);
  }
  return v3;
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1, uint64_t *a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(a1, a2);
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

_QWORD *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  return a1;
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>,WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(uint64_t *a1)
{
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(a1);
  return a1;
}

{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WebKit::AuthenticatorManager::~AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
}

{
  void *v2;

  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
  WTF::FastMalloc::free(this, v2);
}

{
  *(_QWORD *)this = off_1E34ABCF8;
  *((_QWORD *)this + 2) = off_1E34ABDA0;
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::~HashSet((WebKit::AuthenticatorManager *)((char *)this + 840));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::AuthenticatorManager *)((char *)this + 824));
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100]((uint64_t)this + 816);
  WTF::RunLoop::Timer::~Timer((WebKit::AuthenticatorManager *)((char *)this + 784));
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WebKit::AuthenticatorManager *)((char *)this + 776));
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::AuthenticatorManager *)((char *)this + 32));
  WebKit::AuthenticatorObserver::~AuthenticatorObserver((WebKit::AuthenticatorManager *)((char *)this + 16));
  WebKit::AuthenticatorObserver::~AuthenticatorObserver(this);
}

uint64_t WebKit::AuthenticatorManager::isMock(WebKit::AuthenticatorManager *this)
{
  return 0;
}

uint64_t WebKit::AuthenticatorManager::isVirtual(WebKit::AuthenticatorManager *this)
{
  return 0;
}

void `non-virtual thunk to'WebKit::AuthenticatorManager::~AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::AuthenticatorManager *)((char *)this - 16));
}

{
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::AuthenticatorManager *)((char *)this - 16));
}

_QWORD *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase(_QWORD *a1)
{
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1);
  return a1;
}

void WebKit::AuthenticatorTransportServiceObserver::~AuthenticatorTransportServiceObserver(WebKit::AuthenticatorTransportServiceObserver *this)
{
  __break(1u);
}

{
  __break(1u);
}

void WebKit::AuthenticatorObserver::~AuthenticatorObserver(WebKit::AuthenticatorObserver *this)
{
  __break(1u);
}

{
  __break(1u);
}

{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this + 1);
}

_QWORD *WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::Function(_QWORD *a1)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::Function(a1);
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

_QWORD *std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::unique_ptr[abi:sn180100]<true,void>(_QWORD *a1)
{
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]<std::__value_init_tag,std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]>(a1);
  return a1;
}

_QWORD *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]<std::__value_init_tag,std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]>(_QWORD *a1)
{
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]<std::__value_init_tag,std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::__compressed_pair[abi:sn180100]>(a1);
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,0,false>::__compressed_pair_elem[abi:sn180100](a1);
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

_QWORD *std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&> *,0,false>::__compressed_pair_elem[abi:sn180100](_QWORD *result)
{
  *result = 0;
  return result;
}

size_t std::char_traits<char>::length[abi:sn180100](const char *a1)
{
  return std::__constexpr_strlen[abi:sn180100](a1);
}

_QWORD *std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(a1, a2, a3);
  return a1;
}

{
  uint64_t v4;

  std::to_address[abi:sn180100]<char const>();
  *a1 = v4;
  a1[1] = a3;
  return a1;
}

size_t std::__constexpr_strlen[abi:sn180100](const char *a1)
{
  return strlen(a1);
}

void std::to_address[abi:sn180100]<char const>()
{
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(uint64_t *a1, uint64_t *a2)
{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, a2);
  return a1;
}

{
  *a1 = WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

uint64_t *WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(uint64_t *a1)
{
  WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(a1);
  return a1;
}

{
  WTF::StringImpl *v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  WTF::StringImpl *v9;

  v5 = a1;
  v6 = a1;
  v4 = 0;
  v3 = 0;
  v8 = a1;
  v7 = &v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
  {
    v9 = v4;
    WTF::StringImpl::deref(v4, v1);
  }
  return v6;
}

BOOL std::span<char const,18446744073709551615ul>::empty[abi:sn180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

_QWORD *WTF::StringImpl::createWithoutCopying@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v5[3];

  v5[2] = a3;
  v5[1] = a2;
  v5[0] = a1;
  if (std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)v5))
    return WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::Ref(a3, MEMORY[0x1E0CBEF70]);
  else
    return (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WTF::ASCIILiteral::span8(WTF::ASCIILiteral *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = WTF::ASCIILiteral::characters(this);
  v3 = WTF::bitwise_cast<unsigned char const*,char const*>(v2);
  v4 = WTF::ASCIILiteral::length(this);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v6, v3, v4);
  return v6;
}

_QWORD *WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::Ref(_QWORD *a1, _DWORD *a2)
{
  WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::Ref(a1, a2);
  return a1;
}

{
  WTF::StringImpl::ref(a2);
  *a1 = a2;
  return a1;
}

uint64_t std::span<char const,18446744073709551615ul>::size[abi:sn180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(uint64_t *a1)
{
  _QWORD v2[5];

  v2[2] = a1;
  v2[0] = 0;
  v2[4] = a1;
  v2[3] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

uint64_t std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  return v2;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<1ul,WebCore::ExceptionData>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<1ul,WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<1ul,WebCore::ExceptionData>(a1, a2);
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<1ul,WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<1ul,WebCore::ExceptionData>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WebCore::ExceptionData>::__union[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WebCore::ExceptionData>::__union[abi:sn180100]<WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WebCore::ExceptionData>::__union[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::__alt[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::__alt[abi:sn180100]<WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::__alt[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

{
  WebCore::ExceptionData::ExceptionData(a1, a2);
  return a1;
}

uint64_t WebCore::ExceptionData::ExceptionData(uint64_t a1, uint64_t a2)
{
  WebCore::ExceptionData::ExceptionData(a1, a2);
  return a1;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__impl(uint64_t a1)
{
  std::__variant_detail::__impl<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__impl(a1);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__assignment(uint64_t a1)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__ctor(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__ctor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__dtor(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__base(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = a1;
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0)
    result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0_((uint64_t)&v3, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return result;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__base(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == -1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_;
  v8[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == -1)
    return -1;
  else
    return *(unsigned int *)(a1 + 16);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1)
{
  uint64_t *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(a1, v2);
}

WebCore::ExceptionData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1)
{
  WebCore::ExceptionData *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESD_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(a1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_(uint64_t a1, uint64_t a2)
{
  _ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em(a1, a2);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::~__alt(uint64_t *a1)
{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::~__alt(a1);
  return a1;
}

{
  WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(uint64_t *a1)
{
  WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v7 = a1;
  v6 = &v2;
  v3 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v8 = v3;
    WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v3 + 8));
  }
  return v5;
}

uint64_t WTF::RefCounted<WebCore::AuthenticatorResponse>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result;

  result = WTF::RefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    result = (uint64_t)a1 - 8;
    if (a1 != (WTF::RefCountedBase *)8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(WTF::RefCountedBase *this)
{
  char v3;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  if (*(_DWORD *)this == 1)
  {
    v3 = 1;
  }
  else
  {
    --*(_DWORD *)this;
    v3 = 0;
  }
  return v3 & 1;
}

WebCore::ExceptionData *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESD_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(uint64_t a1, WebCore::ExceptionData *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::ExceptionData>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &,1ul>();
}

WebCore::ExceptionData *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::ExceptionData>>(uint64_t a1, WebCore::ExceptionData *a2)
{
  return std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::~__alt(a2);
}

WebCore::ExceptionData *std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::~__alt(WebCore::ExceptionData *a1)
{
  std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::~__alt(a1);
  return a1;
}

{
  WebCore::ExceptionData::~ExceptionData(a1);
  return a1;
}

void std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &,1ul>()
{
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
}

uint64_t _ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em(uint64_t a1, uint64_t a2)
{
  return a1 + 8 * a2;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(uint64_t a1)
{
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  return a1;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](a1 + 8, a2 + 8);
}

void WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3[8];
  _QWORD v4[4];
  CFTypeRef *v5;

  v3[2] = (uint64_t)a1;
  v3[1] = (uint64_t)a2;
  v3[4] = (uint64_t)v3;
  v3[3] = (uint64_t)a2;
  v3[7] = (uint64_t)v3;
  v3[6] = (uint64_t)a2;
  v3[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v3);
  v3[5] = (uint64_t)v3;
  v4[1] = v3;
  v4[0] = 0;
  v4[3] = v3;
  v4[2] = v4;
  v5 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v3);
  if (v5)
    API::Object::deref(v5);
}

void *WebKit::FrameInfoData::operator=(uint64_t a1, _WORD *a2)
{
  *(_WORD *)a1 = *a2;
  WebCore::ResourceRequest::operator=(a1 + 8, (uint64_t)(a2 + 4));
  WebCore::SecurityOriginData::operator=(a1 + 208, (uint64_t)(a2 + 104));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 240), (WTF::StringImpl *)(a2 + 120));
  return memcpy((void *)(a1 + 248), a2 + 124, 0x2EuLL);
}

void std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100](WebCore::SecurityOriginData *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::operator=[abi:sn180100](a1, a2);
}

void WTF::VectorTypeOperations<unsigned char>::destruct()
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

uint64_t std::exchange[abi:sn180100]<unsigned int,int>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;

  v3 = *a1;
  *a1 = *a2;
  return v3;
}

uint64_t std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](a1)
    || (result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v6);
      v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSF_OT0_E_JRSA_SE_EEEDcmSG_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == -1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = a1;
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0)
    result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0_((uint64_t)&v3, a1);
  *(_DWORD *)(a1 + 296) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSF_OT0_E_JRSA_SE_EEEDcmSG_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 296) == -1)
    return -1;
  else
    return *(unsigned int *)(a1 + 296);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_;
  v8[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WebCore::PublicKeyCredentialCreationOptions *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1)
{
  WebCore::PublicKeyCredentialCreationOptions *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES5_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(a1, v2);
}

WebCore::PublicKeyCredentialRequestOptions *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1)
{
  WebCore::PublicKeyCredentialRequestOptions *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ES6_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(a1, v2);
}

WebCore::PublicKeyCredentialCreationOptions *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES5_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(uint64_t a1, WebCore::PublicKeyCredentialCreationOptions *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>>(a1, a2);
}

WebCore::PublicKeyCredentialCreationOptions *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>>(uint64_t a1, WebCore::PublicKeyCredentialCreationOptions *a2)
{
  return std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::~__alt(a2);
}

WebCore::PublicKeyCredentialCreationOptions *std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::~__alt(WebCore::PublicKeyCredentialCreationOptions *a1)
{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::~__alt(a1);
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(a1);
  return a1;
}

void WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this)
{
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(this);
}

{
  WTF::StringImpl *v2;

  std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 144));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 112));
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 88));
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 72));
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::~UserEntity((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 32));
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::~RpEntity(this, v2);
}

WebCore::AuthenticationExtensionsClientInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  WebCore::PublicKeyCredentialDescriptor *v2;
  WebCore::PublicKeyCredentialDescriptor *v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

void WebCore::BufferSource::~BufferSource(WebCore::BufferSource *this)
{
  WebCore::BufferSource::~BufferSource(this);
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100]((uint64_t)this);
}

void WebCore::PublicKeyCredentialCreationOptions::UserEntity::~UserEntity(WebCore::PublicKeyCredentialCreationOptions::UserEntity *this)
{
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::~UserEntity(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  v3[1] = (char *)this + 32;
  v3[0] = 0;
  v3[3] = (char *)this + 32;
  v3[2] = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 4);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialCreationOptions::UserEntity *)((char *)this + 16));
  WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(this);
}

void WebCore::PublicKeyCredentialCreationOptions::RpEntity::~RpEntity(WebCore::PublicKeyCredentialCreationOptions::RpEntity *this, WTF::StringImpl *a2)
{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::~RpEntity(this, a2);
}

{
  std::optional<WTF::String>::~optional((uint64_t)this + 16, a2);
  WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(this);
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1)
{
  if ((*((_BYTE *)a1 + 144) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(WebCore::AuthenticationExtensionsClientInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 64));
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  v3[3] = this;
  v3[2] = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  if ((*((_BYTE *)a1 + 72) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(this);
}

{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)((char *)this + 48));
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(this);
}

WTF::ASCIILiteral *std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(WTF::ASCIILiteral *a1)
{
  std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(WTF::ASCIILiteral *a1)
{
  std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(WTF::ASCIILiteral *a1)
{
  std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(WTF::ASCIILiteral *a1)
{
  std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](WTF::ASCIILiteral *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  uint64_t *v2;
  uint64_t *v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t *WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *a1, uint64_t *a2)
{
  return WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 48 * a1[3];
}

uint64_t *WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *result, uint64_t *a2)
{
  uint64_t *i;

  for (i = result; i != a2; i += 6)
    result = WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(i);
  return result;
}

uint64_t *WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(uint64_t *a1)
{
  WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(a1);
  return a1;
}

{
  WTF::StringImpl *v2;
  _QWORD v4[4];
  WTF::StringImpl *v5;

  WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)(a1 + 1));
  v4[1] = a1;
  v4[0] = 0;
  v4[3] = a1;
  v4[2] = v4;
  v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5)
    WTF::StringImpl::deref(v5, v2);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientInputs::PRFValues *this)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(this);
}

{
  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)((char *)this + 16));
  WebCore::BufferSource::~BufferSource(this);
}

WebCore::BufferSource *std::optional<WebCore::BufferSource>::~optional(WebCore::BufferSource *a1)
{
  std::optional<WebCore::BufferSource>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(WebCore::BufferSource *a1)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_assign_base<WebCore::BufferSource,false>::~__optional_copy_assign_base(WebCore::BufferSource *a1)
{
  std::__optional_move_base<WebCore::BufferSource,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_move_base<WebCore::BufferSource,false>::~__optional_move_base(WebCore::BufferSource *a1)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_base<WebCore::BufferSource,false>::~__optional_copy_base(WebCore::BufferSource *a1)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_storage_base<WebCore::BufferSource,false>::~__optional_storage_base(WebCore::BufferSource *a1)
{
  std::__optional_destruct_base<WebCore::BufferSource,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::BufferSource *std::__optional_destruct_base<WebCore::BufferSource,false>::~__optional_destruct_base[abi:sn180100](WebCore::BufferSource *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
    WebCore::BufferSource::~BufferSource(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  v3[3] = this;
  v3[2] = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
}

void WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(WebCore::PublicKeyCredentialDescriptor *a1, WebCore::PublicKeyCredentialDescriptor *a2)
{
  WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct(a1, a2);
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 40 * a1[3];
}

void WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct(WebCore::PublicKeyCredentialDescriptor *a1, WebCore::PublicKeyCredentialDescriptor *a2)
{
  while (a1 != a2)
  {
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor(a1);
    a1 = (WebCore::PublicKeyCredentialDescriptor *)((char *)a1 + 40);
  }
}

void WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor(WebCore::PublicKeyCredentialDescriptor *this)
{
  WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor(this);
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 24));
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 8));
}

WTF::ASCIILiteral *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100](uint64_t a1)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100](a1);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(a1);
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(uint64_t a1)
{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(a1);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__assignment(uint64_t a1)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__ctor(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__ctor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__dtor(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = a1;
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0)
    result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_((uint64_t)&v3, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == -1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_;
  v8[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == -1)
    return -1;
  else
    return *(unsigned int *)(a1 + 8);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  uint64_t *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  uint64_t *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(a1, a2);
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(uint64_t *a1)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(a1);
  return a1;
}

{
  _QWORD v3[2];
  WTF::RefCountedBase *v4;
  _QWORD *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  v6 = a1;
  v5 = v3;
  v4 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::RefCounted<JSC::ArrayBufferView>::deref(v4);
  return a1;
}

uint64_t WTF::RefCounted<JSC::ArrayBufferView>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result;

  result = WTF::RefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
      return JSC::ArrayBufferView::operator delete();
  }
  return result;
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(a1, a2);
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(uint64_t *a1)
{
  std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(a1);
  return a1;
}

{
  _QWORD v3[2];
  WTF::DeferrableRefCountedBase *v4;
  _QWORD *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  v6 = a1;
  v5 = v3;
  v4 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  return a1;
}

uint64_t WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(WTF::DeferrableRefCountedBase *a1)
{
  uint64_t result;
  void *v3;

  result = WTF::DeferrableRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
    {
      JSC::ArrayBuffer::~ArrayBuffer(a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

BOOL WTF::DeferrableRefCountedBase::derefBase(WTF::DeferrableRefCountedBase *this)
{
  *(_DWORD *)this -= 2;
  return *(_DWORD *)this == 0;
}

void JSC::ArrayBuffer::~ArrayBuffer(JSC::ArrayBuffer *this)
{
  JSC::ArrayBuffer::~ArrayBuffer(this);
}

{
  JSC::Weak<JSC::JSArrayBuffer>::~Weak((_QWORD *)this + 10);
  JSC::InlineWatchpointSet::~InlineWatchpointSet((JSC::ArrayBuffer *)((char *)this + 72));
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBuffer *)((char *)this + 16));
  JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted((uint64_t)this);
}

_QWORD *JSC::Weak<JSC::JSArrayBuffer>::~Weak(_QWORD *a1)
{
  JSC::Weak<JSC::JSArrayBuffer>::~Weak(a1);
  return a1;
}

{
  JSC::Weak<JSC::JSArrayBuffer>::clear(a1);
  return a1;
}

void JSC::InlineWatchpointSet::~InlineWatchpointSet(JSC::InlineWatchpointSet *this)
{
  JSC::InlineWatchpointSet::~InlineWatchpointSet(this);
}

{
  if (!JSC::InlineWatchpointSet::isThin((JSC::InlineWatchpointSet **)this))
    JSC::InlineWatchpointSet::freeFat(this);
}

void JSC::ArrayBufferContents::~ArrayBufferContents(JSC::ArrayBufferContents *this)
{
  JSC::ArrayBufferContents::~ArrayBufferContents(this);
}

{
  uint64_t v2;
  uint64_t Unsafe;
  _QWORD v4[2];
  WTF::FastMalloc *v5;
  _QWORD *v6;
  char *v7;
  _QWORD v8[2];
  WTF::FastMalloc *v9;
  _QWORD *v10;
  char *v11;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD *v14;
  char *v15;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL((_QWORD *)this + 1))
  {
    v2 = *((_QWORD *)this + 1);
    Unsafe = WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe((uint64_t *)this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, Unsafe);
  }
  v4[1] = (char *)this + 24;
  v4[0] = 0;
  v7 = (char *)this + 24;
  v6 = v4;
  v5 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 3);
  if (v5)
    WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(v5);
  v8[1] = (char *)this + 16;
  v8[0] = 0;
  v11 = (char *)this + 16;
  v10 = v8;
  v9 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 2);
  if (v9)
    WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(v9);
  v12[1] = (char *)this + 8;
  v12[0] = 0;
  v15 = (char *)this + 8;
  v14 = v12;
  v13 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v13)
    WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref((WTF::ThreadSafeRefCountedBase *)(v13 + 8));
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted(uint64_t a1)
{
  WTF::ASCIILiteral *v2;
  WTF::FastMalloc *v3;
  void *v4;

  if (JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(a1))
  {
    v2 = (WTF::ASCIILiteral *)JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(a1);
    v3 = v2;
    if (v2)
    {
      WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2);
      WTF::FastMalloc::free(v3, v4);
    }
  }
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

JSC::WeakImpl *JSC::Weak<JSC::JSArrayBuffer>::clear(_QWORD *a1)
{
  JSC::WeakImpl *result;

  result = (JSC::WeakImpl *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1);
  if (result)
  {
    result = (JSC::WeakImpl *)JSC::WeakImpl::clear(result);
    *a1 = 0;
  }
  return result;
}

uint64_t JSC::WeakImpl::clear(JSC::WeakImpl *this)
{
  uint64_t result;

  result = WTF::bitwise_cast<unsigned char const*,char const*>(3);
  *((_QWORD *)this + 1) = result;
  return result;
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet **this)
{
  return JSC::InlineWatchpointSet::isThin(*this);
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet *this)
{
  return (this & 1) != 0;
}

BOOL WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  if (!*a1)
    return 0;
  v1 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E0CC10F8] + 32);
  v2 = Gigacage::Config::basePtr(v1, 0);
  v3 = 0;
  if (v2)
  {
    v4 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E0CC10F8] + 32);
    v3 = 1;
    if ((*(_BYTE *)(v4 + 2) & 1) == 0)
      v3 = *MEMORY[0x1E0CC10F0] ^ 1;
  }
  if ((v3 & 1) == 0)
    return v8;
  v5 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E0CC10F8] + 32);
  v6 = Gigacage::Config::basePtr(v5, 0);
  return v6 + (v8 & Gigacage::gigacageSizeToMask((Gigacage *)0x400000000));
}

uint64_t Gigacage::Config::basePtr(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196DC44D4);
  }
  return *(_QWORD *)(a1 + 24 + 8 * a2);
}

uint64_t Gigacage::gigacageSizeToMask(Gigacage *this)
{
  return (uint64_t)this - 1;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(WTF::FastMalloc *a1)
{
  WTF::FastMalloc **result;
  WTF::FastMalloc *v3[2];

  v3[1] = a1;
  result = (WTF::FastMalloc **)WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBase(WTF::ThreadSafeRefCountedBase *this)
{
  return WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(this) & 1;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::FastMalloc **result)
{
  WTF::FastMalloc *v1;
  void *v2;

  v1 = *result;
  if (*result)
  {
    MEMORY[0x19AEAAA50](*result);
    return (WTF::FastMalloc **)WTF::FastMalloc::free(v1, v2);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(WTF::ThreadSafeRefCountedBase *this)
{
  char v3;

  if (std::__atomic_base<unsigned int,true>::operator--[abi:sn180100]((unsigned int *)this))
  {
    v3 = 0;
  }
  else
  {
    std::atomic<unsigned int>::operator=[abi:sn180100]((unsigned int *)this, 1u);
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t std::__atomic_base<unsigned int,true>::operator--[abi:sn180100](unsigned int *a1)
{
  return std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](a1, 1, 5) - 1;
}

uint64_t std::atomic<unsigned int>::operator=[abi:sn180100](unsigned int *a1, unsigned int a2)
{
  std::__atomic_base<unsigned int,false>::store[abi:sn180100](a1, a2, 5);
  return a2;
}

uint64_t std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](unsigned int *a1, int a2, int a3)
{
  return std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(a1, a2, a3);
}

uint64_t std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(unsigned int *a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;

  switch(a3)
  {
    case 1:
    case 2:
      do
        v4 = __ldaxr(a1);
      while (__stxr(v4 - a2, a1));
      v9 = v4;
      break;
    case 3:
      do
        v5 = __ldxr(a1);
      while (__stlxr(v5 - a2, a1));
      v9 = v5;
      break;
    case 4:
      do
        v6 = __ldaxr(a1);
      while (__stlxr(v6 - a2, a1));
      v9 = v6;
      break;
    case 5:
      do
        v7 = __ldaxr(a1);
      while (__stlxr(v7 - a2, a1));
      v9 = v7;
      break;
    default:
      do
        v3 = __ldxr(a1);
      while (__stxr(v3 - a2, a1));
      v9 = v3;
      break;
  }
  return v9;
}

void std::__atomic_base<unsigned int,false>::store[abi:sn180100](unsigned int *a1, unsigned int a2, int a3)
{
  std::__cxx_atomic_store[abi:sn180100]<unsigned int>(a1, a2, a3);
}

void std::__cxx_atomic_store[abi:sn180100]<unsigned int>(unsigned int *a1, unsigned int a2, int a3)
{
  if (a3 == 3 || a3 == 5)
    atomic_store(a2, a1);
  else
    *a1 = a2;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(WTF::FastMalloc *a1)
{
  WTF::FastMalloc **result;
  WTF::FastMalloc *v3[2];

  v3[1] = a1;
  result = (WTF::FastMalloc **)WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::FastMalloc **result)
{
  WTF::FastMalloc *v1;
  void *v2;

  v1 = *result;
  if (*result)
  {
    MEMORY[0x19AEAAA8C](*result);
    return (WTF::FastMalloc **)WTF::FastMalloc::free(v1, v2);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result;
  _QWORD v3[2];

  v3[1] = a1;
  result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(_QWORD *a1)
{
  uint64_t result;

  result = *a1 - 8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return (v1 & JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag()) == 0;
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(uint64_t a1)
{
  return WTF::bitwise_cast<unsigned char const*,char const*>(*(_QWORD *)(a1 + 8));
}

WTF::ASCIILiteral *WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag()
{
  return 1;
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  std::optional<WTF::String>::~optional(a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::~__optional_move_assign_base(a1, a2);
  return a1;
}

uint64_t std::__optional_move_assign_base<WTF::String,false>::~__optional_move_assign_base(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_copy_assign_base<WTF::String,false>::~__optional_copy_assign_base(a1, a2);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::String,false>::~__optional_copy_assign_base(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_move_base<WTF::String,false>::~__optional_move_base(a1, a2);
  return a1;
}

uint64_t std::__optional_move_base<WTF::String,false>::~__optional_move_base(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_copy_base<WTF::String,false>::~__optional_copy_base(a1, a2);
  return a1;
}

uint64_t std::__optional_copy_base<WTF::String,false>::~__optional_copy_base(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_storage_base<WTF::String,false>::~__optional_storage_base(a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::String,false>::~__optional_storage_base(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1, a2);
  return a1;
}

WebCore::PublicKeyCredentialRequestOptions *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ES6_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(uint64_t a1, WebCore::PublicKeyCredentialRequestOptions *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>>(a1, a2);
}

WebCore::PublicKeyCredentialRequestOptions *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>>(uint64_t a1, WebCore::PublicKeyCredentialRequestOptions *a2)
{
  return std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::~__alt(a2);
}

WebCore::PublicKeyCredentialRequestOptions *std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::~__alt(WebCore::PublicKeyCredentialRequestOptions *a1)
{
  std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::~__alt(a1);
  return a1;
}

{
  WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions(a1);
  return a1;
}

void WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions(WebCore::PublicKeyCredentialRequestOptions *this)
{
  WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional((WebCore::PublicKeyCredentialRequestOptions *)((char *)this + 56));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialRequestOptions *)((char *)this + 32));
  v3[1] = (char *)this + 24;
  v3[0] = 0;
  v3[3] = (char *)this + 24;
  v3[2] = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 3);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
  WebCore::BufferSource::~BufferSource(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm0ES5_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm1ES6_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm0ES5_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm0ES4_EESK_EEDaSE_SG_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm0ES4_EESK_EEDaSE_SG_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &,WebCore::PublicKeyCredentialCreationOptions &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
  else
  {
    WebCore::PublicKeyCredentialCreationOptions::operator=(v6, v5);
  }
}

void WebCore::PublicKeyCredentialCreationOptions::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::operator=((WTF::StringImpl **)a1, a2);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::operator=((WTF::StringImpl **)(a1 + 32), a2 + 32);
  WebCore::BufferSource::operator=(a1 + 72, a2 + 72);
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)(a1 + 144), a2 + 144);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &,WebCore::PublicKeyCredentialCreationOptions &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions>(*a1, a1[1]);
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::RpEntity::operator=(WTF::StringImpl **a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(a1, a2);
  return std::optional<WTF::String>::operator=[abi:sn180100]((uint64_t)(a1 + 2), a2 + 16);
}

WTF::StringImpl **WebCore::PublicKeyCredentialCreationOptions::UserEntity::operator=(WTF::StringImpl **a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(a1, a2);
  WebCore::BufferSource::operator=((uint64_t)(a1 + 2), a2 + 16);
  return WTF::String::operator=(a1 + 4, (WTF::StringImpl *)(a2 + 32));
}

uint64_t WebCore::BufferSource::operator=(uint64_t a1, uint64_t a2)
{
  return std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

void WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  WebCore::PublicKeyCredentialDescriptor *v3;
  WebCore::PublicKeyCredentialDescriptor *v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::operator=[abi:sn180100](a1, a2);
}

WTF::StringImpl **WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::String::operator=(a1, (WTF::StringImpl *)a2);
  return WTF::String::operator=(a1 + 1, (WTF::StringImpl *)(a2 + 8));
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WTF::String,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WTF::String,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1, a2);
}

uint64_t std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t *v6;

  v3 = *(_BYTE *)(a1 + 8) & 1;
  result = std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a2);
  if (v3 == (result & 1))
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      return (uint64_t)WTF::String::operator=((WTF::StringImpl **)a1, v5);
    }
  }
  else if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    return std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(a1, v6);
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) & 1;
}

uint64_t std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100](uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _QWORD v3[4];
  WTF::StringImpl *v4;

  v1 = result;
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    v3[1] = result;
    v3[0] = 0;
    v3[3] = result;
    v3[2] = v3;
    result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)result);
    v4 = (WTF::StringImpl *)result;
    if (result)
      result = (uint64_t)WTF::StringImpl::deref(v4, v2);
    *(_BYTE *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t *std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;

  result = std::__construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t *std::__construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(uint64_t *a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(a1, a2);
}

uint64_t *std::construct_at[abi:sn180100]<WTF::String,WTF::String,WTF::String*>(uint64_t *a1, uint64_t *a2)
{
  if (!a1)
    __break(1u);
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1)
    || (result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v6);
      v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm0ESB_EESU_EEDaSO_SQ_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm0ESB_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD v4[2];
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
  else
  {
    WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(v6, v5);
  }
}

WTF::RefCountedBase *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefCountedBase *result;
  uint64_t v4[4];
  _QWORD v5[2];
  WTF::RefCountedBase *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v10 = v4;
  v9 = a2;
  v12 = v4;
  v11 = a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v8 = v4;
  v7 = v5;
  result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<JSC::ArrayBufferView>::deref(v6);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(*(_QWORD *)a1, *(uint64_t **)(a1 + 8));
}

uint64_t *std::swap[abi:sn180100]<JSC::ArrayBufferView *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a1, a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a1, a2);
  return a1;
}

{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESF_EESU_EEDaSO_SQ_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESF_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD v4[2];
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == 1)
  {
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
}

uint64_t *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[4];
  _QWORD v5[2];
  WTF::DeferrableRefCountedBase *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v10 = v4;
  v9 = a2;
  v12 = v4;
  v11 = a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v8 = v4;
  v7 = v5;
  v6 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(*(_QWORD *)a1, *(uint64_t **)(a1 + 8));
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 1;
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>>(WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
  int v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 144) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 144) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 144) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 144) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8) & 1;
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(a1 + 16), (uint64_t)a2 + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(a1 + 64), (uint64_t)a2 + 64);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1)
{
  if ((*((_BYTE *)a1 + 144) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(a1);
    *((_BYTE *)a1 + 144) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
  int v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 40) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 40) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 40) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]((WebCore::BufferSource *)(a1 + 16), (uint64_t)a2 + 16);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(a1);
    *((_BYTE *)a1 + 40) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

void std::optional<WebCore::BufferSource>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::BufferSource,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::BufferSource,false>>(WebCore::BufferSource *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 16) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 16) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::BufferSource::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) & 1;
}

void std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](WebCore::BufferSource *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    WebCore::BufferSource::~BufferSource(a1);
    *((_BYTE *)a1 + 16) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::BufferSource::BufferSource(a1, a2);
}

uint64_t WebCore::BufferSource::BufferSource(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::BufferSource(a1, a2);
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  return a1;
}

{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v5);
    result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 8) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]((_BYTE *)a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

_BYTE *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](_BYTE *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](_BYTE *result)
{
  *result = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(a1, a2, a3);
}

uint64_t *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a2, a3);
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  return a1;
}

_BYTE *std::optional<WebCore::BufferSource>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::BufferSource,false>>((uint64_t)a1, a2);
  return a1;
}

{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::BufferSource,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<WebCore::BufferSource,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[16] = 0;
  return result;
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 72) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 72) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::PRFInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 72) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 72) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFInputs::operator=(uint64_t a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)a1, a2);
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((WTF::ASCIILiteral *)(a1 + 48), a2 + 48);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  if ((*((_BYTE *)a1 + 72) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(a1);
    *((_BYTE *)a1 + 72) = 0;
  }
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
  a1[72] = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](WTF::ASCIILiteral *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 40) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 40) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)a1, v5);
  }
}

void WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::operator=(a1, a2);
  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]((WebCore::BufferSource *)(a1 + 16), a2 + 16);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(a1);
    *((_BYTE *)a1 + 40) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
  return a1;
}

{
  WebCore::BufferSource::BufferSource(a1, a2);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  return a1;
}

void std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::operator=[abi:sn180100](WTF::ASCIILiteral *a1, uint64_t a2)
{
  std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a1, a2);
}

void std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = *((_BYTE *)a1 + 16) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 16) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, v5);
  }
}

void WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::reset[abi:sn180100](WTF::ASCIILiteral *result)
{
  WTF::ASCIILiteral *v1;

  v1 = result;
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result);
    *((_BYTE *)v1 + 16) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  if (!a1)
    __break(1u);
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::VectorBuffer(a1, a2);
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  v6 = 0;
  *(_QWORD *)a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v7);
  v5 = 0;
  *(_DWORD *)(a1 + 8) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 2, &v5);
  v4 = 0;
  *(_DWORD *)(a1 + 12) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 3, &v4);
  return a1;
}

_BYTE *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(_BYTE *a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
}

_BYTE *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(_BYTE *a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(a1, a2);
  return a1;
}

_BYTE *WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(_BYTE *a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1 + 48, a2 + 48);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>((uint64_t)a1, a2);
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[40] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;

  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
  }
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 64), a2 + 64);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((uint64_t)a1, a2);
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(a1, a2);
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[72] = 0;
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(v3, a2);
  *(_DWORD *)(a1 + 296) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions>(a1, a2);
}

uint64_t std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions>(a1, a2);
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(a1, a2);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(uint64_t a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(a1, a2);
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(a1, (uint64_t *)a2);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  WebCore::BufferSource::BufferSource(a1 + 72, a2 + 72);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 88, (uint64_t *)(a2 + 88));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 112, (uint64_t *)(a2 + 112));
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 144), a2 + 144);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(uint64_t a1, uint64_t *a2)
{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(a1, a2);
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity((uint64_t *)a1, a2);
  std::optional<WTF::String>::optional[abi:sn180100]((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  return a1;
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(uint64_t *a1, uint64_t *a2)
{
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(a1, a2);
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(a1, a2);
  WebCore::BufferSource::BufferSource((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 4, a2 + 4);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(uint64_t *a1, uint64_t *a2)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 1, a2 + 1);
  return a1;
}

_BYTE *std::optional<WTF::String>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::String>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WTF::String,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WTF::String,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::String,false>>((uint64_t)a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WTF::String,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WTF::String,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::String,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::String,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;

  result = std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<WTF::String,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[8] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>>((uint64_t)a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[144] = 0;
  return result;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm1ES6_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm1ES5_EESK_EEDaSE_SG_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm1ES5_EESK_EEDaSE_SG_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 1)
  {
    WebCore::PublicKeyCredentialRequestOptions::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &,WebCore::PublicKeyCredentialRequestOptions &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
}

void WebCore::PublicKeyCredentialRequestOptions::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::operator=(a1, a2);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)(a1 + 56), a2 + 56);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &,WebCore::PublicKeyCredentialRequestOptions &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions>(*a1, a1[1]);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(v3, a2);
  *(_DWORD *)(a1 + 296) = 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(a1, a2);
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(a1, a2);
  return a1;
}

{
  WebCore::PublicKeyCredentialRequestOptions::PublicKeyCredentialRequestOptions(a1, a2);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialRequestOptions::PublicKeyCredentialRequestOptions(uint64_t a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialRequestOptions::PublicKeyCredentialRequestOptions(a1, a2);
  return a1;
}

{
  WebCore::BufferSource::BufferSource(a1, a2);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 32, (uint64_t *)(a2 + 32));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 56), a2 + 56);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  return a1;
}

uint64_t *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[8];
  _QWORD v5[4];
  WTF::FastMalloc *v6;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v4[4] = (uint64_t)v4;
  v4[3] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[5] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v5[3] = v4;
  v5[2] = v5;
  v6 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v6);
  return a1;
}

WTF::FastMalloc *WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(WTF::FastMalloc *a1)
{
  WTF::FastMalloc *result;
  void *v3;
  WTF::FastMalloc *v4[2];

  v4[1] = a1;
  result = (WTF::FastMalloc *)WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v4[0] = a1;
    return WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v4, v3);
  }
  return result;
}

WTF::FastMalloc *WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::FastMalloc **a1, void *a2)
{
  WTF::FastMalloc *result;

  result = *a1;
  if (result)
    return (WTF::FastMalloc *)WTF::FastMalloc::free(result, a2);
  return result;
}

uint64_t WebCore::SecurityOriginData::operator=(uint64_t a1, uint64_t a2)
{
  return std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t WTF::RefCounted<WebCore::FormData>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result;
  void *v3;

  result = WTF::RefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
    {
      MEMORY[0x19AEB5148](a1);
      return bmalloc::api::isoDeallocate(a1, v3);
    }
  }
  return result;
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](a1)
    || (result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](v6);
      v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](a1) == -1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = a1;
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0)
    result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0_((uint64_t)&v3, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRSI_SM_EEEDcmSO_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) == -1)
    return -1;
  else
    return *(unsigned int *)(a1 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_;
  v8[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WebCore::HTTPHeaderMap::UncommonHeader *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_(uint64_t a1)
{
  WebCore::HTTPHeaderMap::UncommonHeader *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES6_EEEEEDTclclsr3stdE7declvalISI_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSO_(a1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_()
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  WTF::VectorTypeOperations<unsigned char>::destruct();
}

WebCore::HTTPHeaderMap::UncommonHeader *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES6_EEEEEDTclclsr3stdE7declvalISI_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSO_(uint64_t a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>>(a1, a2);
}

WebCore::HTTPHeaderMap::UncommonHeader *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>>(uint64_t a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  return std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::~__alt(a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISF_LNS1_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS1_5__altILm0ES6_EESS_EEEDTclclsr3stdE7declvalISL_EEspclsr3stdE7declvalIT0_EEEESM_DpOSU_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISF_LNS1_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS1_5__altILm1ESE_EESS_EEEDTclclsr3stdE7declvalISL_EEspclsr3stdE7declvalIT0_EEEESM_DpOSU_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISF_LNS1_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS1_5__altILm0ES6_EESS_EEEDTclclsr3stdE7declvalISL_EEspclsr3stdE7declvalIT0_EEEESM_DpOSU_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_ENKUlRSK_OT0_E_clINS0_5__altILm0ES5_EESS_EEDaSM_SO_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_ENKUlRSK_OT0_E_clINS0_5__altILm0ES5_EESS_EEDaSM_SO_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple> &,WebCore::SecurityOriginData::Tuple &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
  else
  {
    WebCore::SecurityOriginData::Tuple::operator=(v6, v5);
  }
}

WTF::StringImpl **WebCore::SecurityOriginData::Tuple::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **result;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  result = WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple> &,WebCore::SecurityOriginData::Tuple &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple>(*a1, a1[1]);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(v3, a2);
  *(_DWORD *)(a1 + 24) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple>(a1, a2);
}

uint64_t std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple>(a1, a2);
  return a1;
}

{
  WebCore::SecurityOriginData::Tuple::Tuple(a1, a2);
  return a1;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISF_LNS1_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS1_5__altILm1ESE_EESS_EEEDTclclsr3stdE7declvalISL_EEspclsr3stdE7declvalIT0_EEEESM_DpOSU_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_ENKUlRSK_OT0_E_clINS0_5__altILm1ESD_EESS_EEDaSM_SO_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_ENKUlRSK_OT0_E_clINS0_5__altILm1ESD_EESS_EEDaSM_SO_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](a1) == 1)
  {
    v4 = v7;
    v5 = v8;
    *v8 = *v7;
    v5[1] = v4[1];
  }
  else
  {
    v6[0] = a1;
    v6[1] = v7;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v6);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)a1, *(_QWORD **)(a1 + 8));
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__emplace[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, a2);
  *(_DWORD *)(a1 + 24) = 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_QWORD *a1, _QWORD *a2)
{
  std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
}

_QWORD *std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_QWORD *a1, _QWORD *a2)
{
  std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  return a1;
}

_QWORD *std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  return result;
}

void std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::operator=[abi:sn180100](WebCore::SecurityOriginData *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>(WebCore::SecurityOriginData *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 32) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 32) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::SecurityOriginData::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 32) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::SecurityOriginData,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::SecurityOriginData,false>::__construct[abi:sn180100]<WebCore::SecurityOriginData>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 32) & 1;
}

void std::__optional_destruct_base<WebCore::SecurityOriginData,false>::reset[abi:sn180100](WebCore::SecurityOriginData *a1)
{
  if ((*((_BYTE *)a1 + 32) & 1) != 0)
  {
    WebCore::SecurityOriginData::~SecurityOriginData(a1);
    *((_BYTE *)a1 + 32) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::__construct[abi:sn180100]<WebCore::SecurityOriginData>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(a1, a2);
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~variant[abi:sn180100](uint64_t a1)
{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~variant[abi:sn180100](a1);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~__impl(a1);
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~__impl(uint64_t a1)
{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::~__impl(a1);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::~__assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::~__assignment(uint64_t a1)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::~__ctor(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::~__ctor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__dtor(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(a1);
  return a1;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::SecurityOriginData::SecurityOriginData(a1, a2);
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](v5);
    result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 24) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(uint64_t a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__base[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]((_BYTE *)a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS1_5__altILm0ES6_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(a1, v3, v4);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS1_5__altILm1ESE_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(a1, v3, v4);
}

uint64_t _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS1_5__altILm0ES6_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSL_OT0_E_clINS0_5__altILm0ES5_EEST_EEDaSN_SP_(a1, a2, a3);
}

uint64_t _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSL_OT0_E_clINS0_5__altILm0ES5_EEST_EEDaSN_SP_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(a2, a3);
  return result;
}

_QWORD *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS1_5__altILm1ESE_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSL_OT0_E_clINS0_5__altILm1ESD_EEST_EEDaSN_SP_(a1, a2, a3);
}

_QWORD *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSL_OT0_E_clINS0_5__altILm1ESD_EEST_EEDaSN_SP_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, a3);
  return result;
}

void WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2;

  v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  std::to_address[abi:sn180100]<char const>();
  v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v3;

  std::to_address[abi:sn180100]<char const>();
  v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  *v1 = 0;
  return v3;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 24) & 1;
}

BOOL WebCore::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v3;

  v2 = WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>>(a1, a2);
  v3 = 0;
  if (v2)
    return WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>>(a1 + 8, a2 + 8);
  return v3;
}

{
  WebCore::Node *v2;
  WebCore::Node *v3;
  _BOOL8 v4;
  int v5;
  WebCore::Node *v6;
  WebCore::Node *v8;
  int v9;
  unsigned __int8 v10;
  WebCore::Node *v11;
  int v12;
  unsigned __int8 v13;

  v2 = *(WebCore::Node **)a1;
  if (*(_QWORD *)a1)
    *((_DWORD *)v2 + 6) += 2;
  v11 = v2;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 12);
  v3 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a2)
    *((_DWORD *)v3 + 6) += 2;
  v8 = v3;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_BYTE *)(a2 + 12);
  if (v2 == v3)
  {
    v5 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v11);
    v4 = v5 == WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v8)
      && ((v10 ^ v13) & 7) == 0;
    v3 = v8;
  }
  else
  {
    v4 = 0;
  }
  v8 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v3);
    }
    else
    {
      *((_DWORD *)v3 + 6) -= 2;
    }
  }
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return v4;
}

void std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t *WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  _QWORD v3[4];
  WTF::FastMalloc *v4;

  v3[1] = a1;
  v3[0] = 0;
  v3[3] = a1;
  v3[2] = v3;
  v4 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v4);
  return a1;
}

_DWORD *std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__base[abi:sn180100]<0ul>(_DWORD *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__union[abi:sn180100]<>(a1);
  a1[74] = 0;
  return a1;
}

void *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__union[abi:sn180100]<>(void *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::__union[abi:sn180100]<>(a1);
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<>(a1);
  return a1;
}

void *std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<>(void *a1)
{
  std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<>(a1);
  return a1;
}

{
  memset(a1, 0, 0x128uLL);
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)a1);
  return a1;
}

_BYTE *std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::optional<WTF::String>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WTF::String>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WTF::String,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<true,0>(uint64_t a1)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<true,0>(a1);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100]<0ul>(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<>((_QWORD *)a1);
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

_QWORD *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<>(_QWORD *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<>(a1);
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(a1);
  return a1;
}

_QWORD *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(_QWORD *a1)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(a1);
  return a1;
}

_QWORD *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<>(_QWORD *result)
{
  *result = 0;
  return result;
}

_BYTE *std::__optional_destruct_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[6] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::GlobalFrameIdentifier,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[24] = 0;
  return result;
}

_BYTE *std::optional<int>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<int>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<int,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<int,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[4] = 0;
  return result;
}

_DWORD *std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100]<true,0>(_DWORD *a1)
{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100]<true,0>(a1);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEECI1NS0_6__baseILNS0_6_TraitE1EJS4_SC_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEECI1NS0_6__baseILNS0_6_TraitE1EJS4_SC_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_SC_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__implIJN7WebCore18SecurityOriginData5TupleENS2_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS2_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS4_SC_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(a1);
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEILm0EJEEENS_16in_place_index_tIXT_EEEDpOT0_(_DWORD *a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__base[abi:sn180100]<0ul>(a1);
  return a1;
}

_DWORD *std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__base[abi:sn180100]<0ul>(_DWORD *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__union[abi:sn180100]<>(a1);
  a1[6] = 0;
  return a1;
}

void *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__union[abi:sn180100]<>(void *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__union[abi:sn180100]<>(a1);
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<>(a1);
  return a1;
}

void *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<>(void *a1)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<>(a1);
  return a1;
}

{
  memset(a1, 0, 0x18uLL);
  WebCore::SecurityOriginData::Tuple::Tuple((WebCore::SecurityOriginData::Tuple *)a1);
  return a1;
}

_BYTE *std::optional<unsigned short>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<unsigned short>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<unsigned short,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<unsigned short,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[2] = 0;
  return result;
}

_QWORD *WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::ObjectIdentifierGeneric(_QWORD *a1)
{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::MediationRequirement,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::SecurityOriginData,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::SecurityOriginData,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::SecurityOriginData,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::SecurityOriginData,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::SecurityOriginData,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[32] = 0;
  return result;
}

WebCore::SecurityOriginData *std::optional<WebCore::SecurityOriginData>::~optional(WebCore::SecurityOriginData *a1)
{
  std::optional<WebCore::SecurityOriginData>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~variant[abi:sn180100](uint64_t a1)
{
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~variant[abi:sn180100](a1);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~__impl(a1 + 8);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::~__optional_move_assign_base(WebCore::SecurityOriginData *a1)
{
  std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::~__optional_copy_assign_base(WebCore::SecurityOriginData *a1)
{
  std::__optional_move_base<WebCore::SecurityOriginData,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_move_base<WebCore::SecurityOriginData,false>::~__optional_move_base(WebCore::SecurityOriginData *a1)
{
  std::__optional_copy_base<WebCore::SecurityOriginData,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_copy_base<WebCore::SecurityOriginData,false>::~__optional_copy_base(WebCore::SecurityOriginData *a1)
{
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_storage_base<WebCore::SecurityOriginData,false>::~__optional_storage_base(WebCore::SecurityOriginData *a1)
{
  std::__optional_destruct_base<WebCore::SecurityOriginData,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_destruct_base<WebCore::SecurityOriginData,false>::~__optional_destruct_base[abi:sn180100](WebCore::SecurityOriginData *a1)
{
  if ((*((_BYTE *)a1 + 32) & 1) != 0)
    WebCore::SecurityOriginData::~SecurityOriginData(a1);
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~__impl(uint64_t a1)
{
  std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~__impl(a1);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__assignment(uint64_t a1)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__ctor(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__ctor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__dtor(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(a1);
  return a1;
}

void std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WebKit::AuthenticatorPresenterCoordinator **v2;
  _QWORD *v3;
  uint64_t v4;
  WebKit::AuthenticatorPresenterCoordinator *v5;

  std::to_address[abi:sn180100]<char const>();
  v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::AuthenticatorPresenterCoordinator>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::AuthenticatorPresenterCoordinator>::operator()[abi:sn180100](uint64_t a1, WebKit::AuthenticatorPresenterCoordinator *a2)
{
  void *v3;
  uint64_t result;

  if (a2)
  {
    WebKit::AuthenticatorPresenterCoordinator::~AuthenticatorPresenterCoordinator(a2);
    return WTF::FastMalloc::free(a2, v3);
  }
  return result;
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2)
{
  WTF::ThreadSafeRefCountedBase *v5;

  v5 = (WTF::ThreadSafeRefCountedBase *)WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::AuthenticatorObserver>(a2);
  if (v5)
    WTF::ThreadSafeRefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::AuthenticatorObserver>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  WTF::RefCountedBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v7 = a1;
  v6 = a2;
  result = (uint64_t *)WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1);
  if ((result & 1) == 0)
  {
    v4 = (WTF::RefCountedBase *)WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator new((WTF *)0x10);
    WTF::DefaultWeakPtrImpl::DefaultWeakPtrImpl<WebKit::AuthenticatorObserver>((uint64_t)v4, v6);
    WTF::adoptRef<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>(v4, &v5);
    WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=<WTF::DefaultWeakPtrImpl>(a1, &v5);
    return WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::~Ref(&v5);
  }
  return result;
}

uint64_t WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(uint64_t a1)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a1);
}

_QWORD *WTF::adoptRef<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>@<X0>(WTF::RefCountedBase *a1@<X0>, _QWORD *a2@<X8>)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(a2, (uint64_t)a1);
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator new(WTF *a1)
{
  return WTF::fastCompactMalloc(a1);
}

uint64_t WTF::DefaultWeakPtrImpl::DefaultWeakPtrImpl<WebKit::AuthenticatorObserver>(uint64_t a1, uint64_t a2)
{
  WTF::DefaultWeakPtrImpl::DefaultWeakPtrImpl<WebKit::AuthenticatorObserver>(a1, a2);
  return a1;
}

{
  WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::WeakPtrImplBase<WebKit::AuthenticatorObserver>(a1, a2);
  return a1;
}

uint64_t *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=<WTF::DefaultWeakPtrImpl>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[4];
  _QWORD v5[4];
  WTF::FastMalloc *v6;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v5[3] = v4;
  v5[2] = v5;
  v6 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v6);
  return a1;
}

uint64_t *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::~Ref(uint64_t *a1)
{
  WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  WTF::FastMalloc *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::FastMalloc *v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v7 = a1;
  v6 = &v2;
  v3 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v8 = v3;
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v3);
  }
  return v5;
}

_QWORD *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(_QWORD *a1, uint64_t a2)
{
  WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(a1, a2);
  return a1;
}

_QWORD *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::WeakPtrImplBase<WebKit::AuthenticatorObserver>(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::ThreadSafeRefCounted((std::__cxx_atomic_base_impl<unsigned int> *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::ThreadSafeRefCounted(std::__cxx_atomic_base_impl<unsigned int> *a1)
{
  WTF::ThreadSafeRefCountedBase::ThreadSafeRefCountedBase(a1);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *WTF::ThreadSafeRefCountedBase::ThreadSafeRefCountedBase(std::__cxx_atomic_base_impl<unsigned int> *this)
{
  std::atomic<unsigned int>::atomic[abi:sn180100](this, 1u);
  return this;
}

std::__cxx_atomic_base_impl<unsigned int> *std::atomic<unsigned int>::atomic[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  std::atomic<unsigned int>::atomic[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__atomic_base<unsigned int,true>::__atomic_base[abi:sn180100](a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__atomic_base<unsigned int,true>::__atomic_base[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  std::__atomic_base<unsigned int,false>::__atomic_base[abi:sn180100](a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__atomic_base<unsigned int,false>::__atomic_base[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  std::__cxx_atomic_impl<unsigned int,std::__cxx_atomic_base_impl<unsigned int>>::__cxx_atomic_impl[abi:sn180100](a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__cxx_atomic_impl<unsigned int,std::__cxx_atomic_base_impl<unsigned int>>::__cxx_atomic_impl[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  std::__cxx_atomic_impl<unsigned int,std::__cxx_atomic_base_impl<unsigned int>>::__cxx_atomic_impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__cxx_atomic_base_impl<unsigned int>::__cxx_atomic_base_impl(a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *__cdecl std::__cxx_atomic_base_impl<unsigned int>::__cxx_atomic_base_impl(std::__cxx_atomic_base_impl<unsigned int> *this, unsigned int __value)
{
  this->__a_value = __value;
  return this;
}

uint64_t WTF::ThreadSafeRefCountedBase::ref(WTF::ThreadSafeRefCountedBase *this)
{
  return WTF::ThreadSafeRefCountedBase::refAllowingPartiallyDestroyed(this);
}

uint64_t WTF::ThreadSafeRefCountedBase::refAllowingPartiallyDestroyed(WTF::ThreadSafeRefCountedBase *this)
{
  return std::__atomic_base<unsigned int,true>::operator++[abi:sn180100]((unsigned int *)this);
}

uint64_t std::__atomic_base<unsigned int,true>::operator++[abi:sn180100](unsigned int *a1)
{
  return std::__atomic_base<unsigned int,true>::fetch_add[abi:sn180100](a1, 1, 5) + 1;
}

uint64_t std::__atomic_base<unsigned int,true>::fetch_add[abi:sn180100](unsigned int *a1, int a2, int a3)
{
  return std::__cxx_atomic_fetch_add[abi:sn180100]<unsigned int>(a1, a2, a3);
}

uint64_t std::__cxx_atomic_fetch_add[abi:sn180100]<unsigned int>(unsigned int *a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;

  switch(a3)
  {
    case 1:
    case 2:
      do
        v4 = __ldaxr(a1);
      while (__stxr(v4 + a2, a1));
      v9 = v4;
      break;
    case 3:
      do
        v5 = __ldxr(a1);
      while (__stlxr(v5 + a2, a1));
      v9 = v5;
      break;
    case 4:
      do
        v6 = __ldaxr(a1);
      while (__stlxr(v6 + a2, a1));
      v9 = v6;
      break;
    case 5:
      do
        v7 = __ldaxr(a1);
      while (__stlxr(v7 + a2, a1));
      v9 = v7;
      break;
    default:
      do
        v3 = __ldxr(a1);
      while (__stxr(v3 + a2, a1));
      v9 = v3;
      break;
  }
  return v9;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::reset[abi:sn180100]()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::to_address[abi:sn180100]<char const>();
  v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 1) & 1;
}

BOOL std::__holds_alternative[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == 0;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1);
}

void std::get[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  std::__generic_get[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(a1);
}

void std::__generic_get[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a1))
    std::__throw_bad_variant_access[abi:sn180100]();
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

BOOL std::__holds_alternative[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == 1;
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

BOOL WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(_QWORD *a1)
{
  return *a1 == 0;
}

_QWORD *std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::unique_ptr[abi:sn180100](_QWORD *a1, uint64_t a2)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::unique_ptr[abi:sn180100](a1, a2);
  return a1;
}

{
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>(a1, v4);
  return a1;
}

_QWORD *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>(_QWORD *a1, _QWORD *a2)
{
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>>(a1, a2);
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  WTF::ThreadLikeAssertion::operator=();
  return a1;
}

_QWORD *std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler(a1);
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::~Function((uint64_t)a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  uint64_t *v2;
  uint64_t *v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::ThreadLikeAssertion::ThreadLikeAssertion(WTF::ThreadLikeAssertion *a1)
{
  WTF::AnyThreadLike::operator unsigned int();
  WTF::ThreadLikeAssertion::ThreadLikeAssertion(a1);
  return a1;
}

uint64_t WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::~Function(uint64_t a1)
{
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::~Function(a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t WTF::AnyThreadLike::operator unsigned int()
{
  return 0xFFFFFFFFLL;
}

WTF::ThreadLikeAssertion *WTF::ThreadLikeAssertion::ThreadLikeAssertion(WTF::ThreadLikeAssertion *this)
{
  WTF::ThreadLikeAssertion::ThreadLikeAssertion(this);
  return this;
}

uint64_t *WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(uint64_t *a1, uint64_t *a2)
{
  return WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(a1, a2);
}

uint64_t *WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(uint64_t *result, uint64_t *a2)
{
  uint64_t *i;

  for (i = result; i != a2; ++i)
    result = WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(i);
  return result;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(uint64_t a1)
{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function(a1);
  return a1;
}

_DWORD *std::min[abi:sn180100]<unsigned int,std::__less<void,void>>(_DWORD *a1, _DWORD *a2)
{
  char v5;

  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned int,unsigned int>((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<unsigned int,unsigned int>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

uint64_t std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 4) & 1;
}

double *std::max[abi:sn180100]<WTF::Seconds>(double *a1, double *a2)
{
  return std::max[abi:sn180100]<WTF::Seconds,std::__less<void,void>>(a1, a2);
}

double WTF::seconds_literals::operator"" _s()
{
  double v1;

  WTF::Seconds::Seconds((WTF::Seconds *)&v1, (double)0);
  return v1;
}

double *std::max[abi:sn180100]<WTF::Seconds,std::__less<void,void>>(double *a1, double *a2)
{
  char v5;

  if (std::__less<void,void>::operator()[abi:sn180100]<WTF::Seconds,WTF::Seconds>((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<WTF::Seconds,WTF::Seconds>(uint64_t a1, double *a2, double *a3)
{
  return WTF::Seconds::operator<(a2, *a3);
}

BOOL WTF::Seconds::operator<(double *a1, double a2)
{
  return *a1 < a2;
}

WTF::Seconds *WTF::Seconds::Seconds(WTF::Seconds *this, double a2)
{
  WTF::Seconds::Seconds((double *)this, a2);
  return this;
}

double *WTF::Seconds::Seconds(double *this, double a2)
{
  *this = a2;
  return this;
}

BOOL std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

void std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

void std::optional<WTF::String>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

void std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

BOOL std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 0;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1 + 8);
}

void std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  std::__generic_get[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1);
}

void std::__generic_get[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1))
    std::__throw_bad_variant_access[abi:sn180100]();
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>();
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>()
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

void std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  std::__generic_get[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1);
}

void std::__generic_get[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1))
    std::__throw_bad_variant_access[abi:sn180100]();
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>();
}

BOOL std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 1;
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>()
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

WebCore::SecurityOriginData *WebCore::SecurityOriginData::SecurityOriginData(WebCore::SecurityOriginData *this, const WebCore::SecurityOriginData *a2)
{
  WebCore::SecurityOriginData::SecurityOriginData(this, a2);
  return this;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100]((uint64_t)this, (uint64_t)a2);
  return this;
}

uint64_t std::numeric_limits<unsigned int>::max[abi:sn180100]()
{
  return std::__libcpp_numeric_limits<unsigned int,true>::max[abi:sn180100]();
}

uint64_t std::__libcpp_numeric_limits<unsigned int,true>::max[abi:sn180100]()
{
  return 0xFFFFFFFFLL;
}

void WTF::RefCountedBase::refAllowingPartiallyDestroyed(WTF::RefCountedBase *this)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  ++*(_DWORD *)this;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSF_1EJS5_SD_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::index[abi:sn180100](v5);
    result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 24) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

WebCore::SecurityOriginData::Tuple *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1)
{
  WebCore::SecurityOriginData::Tuple *v2;
  WebCore::SecurityOriginData::Tuple *v3;
  const Tuple *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ES6_EERKSV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSZ_(a1, v3, v4);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS1_5__altILm1ESE_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(a1, v3, v4);
}

WebCore::SecurityOriginData::Tuple *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISF_LNS1_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ES6_EERKSV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSZ_(uint64_t a1, WebCore::SecurityOriginData::Tuple *a2, const Tuple *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ES5_EERKSV_EEDaSP_SR_(a1, a2, a3);
}

WebCore::SecurityOriginData::Tuple *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ES5_EERKSV_EEDaSP_SR_(uint64_t a1, WebCore::SecurityOriginData::Tuple *a2, const Tuple *a3)
{
  WebCore::SecurityOriginData::Tuple *result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(a2, a3);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(WebCore::SecurityOriginData::Tuple *a1, const Tuple *a2)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple const&>(a1, a2);
}

WebCore::SecurityOriginData::Tuple *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple const&>(WebCore::SecurityOriginData::Tuple *a1, const Tuple *a2)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple const&>(a1, a2);
  return a1;
}

{
  WebCore::SecurityOriginData::Tuple::Tuple(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(uint64_t *a1, WTF::RefCountedBase *a2)
{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(a1, a2);
  return a1;
}

{
  *a1 = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  *a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)a2);
  return a1;
}

WTF::RefCountedBase *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable(WTF::RefCountedBase *a1)
{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable(a1);
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(_QWORD *)a1)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deallocateTable(*(_QWORD *)a1, v2);
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int i;
  unsigned int v4;

  v4 = *(_DWORD *)(a1 - 4);
  for (i = 0; i < v4; ++i)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket()
{
  unsigned __int8 *v0;

  std::__to_address[abi:sn180100]<char const>();
  return WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::isDeletedValue((WTF *)*v0);
}

BOOL WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::isDeletedValue(WTF *a1)
{
  char v1;

  v1 = (char)a1;
  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  return v1 == -2;
}

uint64_t std::numeric_limits<unsigned char>::max[abi:sn180100](WTF *a1)
{
  return WTF::isIntegralOrPointerType(a1);
}

_QWORD *std::make_unique[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator,WebKit::AuthenticatorManager &,WTF::String,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String>(WebKit::AuthenticatorPresenterCoordinator *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v7;

  v7 = WebKit::AuthenticatorPresenterCoordinator::operator new(a1);
  WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(v7, a2, a3, a4, *a5 & 1, a6);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v7);
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::operator new(WebKit::AuthenticatorPresenterCoordinator *this)
{
  return WTF::fastMalloc((WTF *)0x70);
}

_QWORD *std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(_QWORD *a1, uint64_t a2)
{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[2];

  v4[1] = a1;
  v4[0] = a2;
  std::__compressed_pair<WebKit::AuthenticatorPresenterCoordinator *,std::default_delete<WebKit::AuthenticatorPresenterCoordinator>>::__compressed_pair[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator *&,std::__value_init_tag>(a1, v4);
  return a1;
}

_QWORD *std::__compressed_pair<WebKit::AuthenticatorPresenterCoordinator *,std::default_delete<WebKit::AuthenticatorPresenterCoordinator>>::__compressed_pair[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator *&,std::__value_init_tag>(_QWORD *a1, _QWORD *a2)
{
  std::__compressed_pair<WebKit::AuthenticatorPresenterCoordinator *,std::default_delete<WebKit::AuthenticatorPresenterCoordinator>>::__compressed_pair[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator *&,std::__value_init_tag>(a1, a2);
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  std::__compressed_pair_elem<std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>,1,true>::__compressed_pair_elem[abi:sn180100]();
  return a1;
}

WTF::RefCountedBase *WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::~HashSet(a1);
  return a1;
}

{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::~HashTable(a1);
  return a1;
}

void WTF::RunLoop::Timer::~Timer(WTF::RunLoop::Timer *this)
{
  WTF::RunLoop::Timer::~Timer(this);
}

{
  *(_QWORD *)this = off_1E34ABE00;
  WTF::Function<void ()(void)>::~Function((uint64_t)this + 24);
  WTF::RunLoop::TimerBase::~TimerBase(this);
}

{
  void *v2;

  WTF::RunLoop::Timer::~Timer(this);
  WTF::FastMalloc::free(this, v2);
}

WTF::RefCountedBase *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::~HashTable(WTF::RefCountedBase *a1)
{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::~HashTable(a1);
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(_QWORD *)a1)
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(*(_QWORD *)a1, v2);
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int i;
  unsigned int v4;

  v4 = *(_DWORD *)(a1 - 4);
  for (i = 0; i < v4; ++i)
  {
    if (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket())
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref((uint64_t *)(a1 + 8 * i));
  }
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket()
{
  uint64_t *v0;

  std::__to_address[abi:sn180100]<char const>();
  return WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::isDeletedValue(v0);
}

BOOL WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::isDeletedValue(uint64_t *a1)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableDeletedValue(a1);
}

BOOL WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableDeletedValue(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  return v1 == WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue();
}

uint64_t WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue()
{
  return WTF::bitwise_cast<WebKit::Authenticator *,unsigned long>();
}

uint64_t WTF::bitwise_cast<WebKit::Authenticator *,unsigned long>()
{
  uint64_t v1;
  uint64_t __src;

  __src = -1;
  memcpy(&v1, &__src, sizeof(v1));
  return v1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(uint64_t a1)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

{
  _QWORD v4[4];
  WTF::FastMalloc *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
  {
    v6 = a1;
    v7 = a1;
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  }
  v4[1] = a1;
  v4[0] = 0;
  v4[3] = a1;
  v4[2] = v4;
  v5 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  return a1;
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::String const&)>,decltype(nullptr)>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::Function<void ()(WTF::String const&)>::operator=(a2);
}

uint64_t WTF::Function<void ()(WTF::String const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2);
}

void WTF::Function<void ()(WTF::String const&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator=[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, 0);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF *a2, WTF *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  WTF *v8;
  WTF *v9;
  char v10;

  v8 = a2;
  v9 = a3;
  v7[2] = a1;
  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(&v8, (uint64_t)v7);
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)result);
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeWithoutEntryConsistencyCheck(a1, v8, v9);
  }
  return result;
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::find(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  uint64_t v6;

  v5[3] = a1;
  v5[2] = a2;
  v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find(a1, a2);
  v5[1] = v3;
  v5[0] = v2;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v6, v5);
  return v6;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v6[3] = a1;
  v6[2] = a2;
  v3 = WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(a2);
  v6[1] = v4;
  v6[0] = v3;
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(a1, v6);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator(a1, v2 + v3);
}

{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(a1, v2 + v3);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, WTF *a2, WTF *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  WTF *v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[2] = a1;
  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(v8, (uint64_t)v7);
  if ((result & 1) == 0)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeAndInvalidateWithoutEntryConsistencyCheck((WTF::RefCountedBase *)a1, v8[0]);
  return result;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(_QWORD *a1, _QWORD *a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  return *a1 == *a2;
}

uint64_t WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v4 = *a1;
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(_QWORD *a1)
{
  if (*a1)
    return *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

_QWORD *WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(a1, a2, a3, a4);
  return a1;
}

{
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(a1, a2, a3, a4);
  return a1;
}

_QWORD *WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(a1, a2, a3, a4);
  return a1;
}

{
  *a1 = a3;
  a1[1] = a4;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  return a1;
}

{
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(a1, a2, a3, a4);
  return a1;
}

{
  *a1 = a3;
  a1[1] = a4;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(a1);
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeAndInvalidateWithoutEntryConsistencyCheck(WTF::RefCountedBase *a1, WTF *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove(a1, a2);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove(WTF *a1, WTF *a2)
{
  int v3;
  int v4;
  uint64_t shouldShrink;

  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deleteBucket(a2);
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, v3 + 1);
  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v4 - 1);
  shouldShrink = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(a1);
  if ((shouldShrink & 1) != 0)
    shouldShrink = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shrink(a1);
  return WTF::isIntegralOrPointerType((WTF *)shouldShrink);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deleteBucket(WTF *a1)
{
  return WTF::hashTraitsDeleteBucket<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a1);
}

_QWORD *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(_QWORD *result, int a2)
{
  *(_DWORD *)(*result - 16) = a2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(_QWORD *a1)
{
  return *(unsigned int *)(*a1 - 16);
}

_QWORD *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(_QWORD *result, int a2)
{
  *(_DWORD *)(*result - 12) = a2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(_QWORD *a1)
{
  if (*a1)
    return *(unsigned int *)(*a1 - 12);
  else
    return 0;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(_QWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;

  v2 = 6
     * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  v4 = 0;
  if (v2 < v3)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1) > 8;
  return v4;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shrink(WTF *a1)
{
  unsigned int v2;

  v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, v2 >> 1, 0);
}

uint64_t WTF::hashTraitsDeleteBucket<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF *a1)
{
  return WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::constructDeletedValue(a1);
}

uint64_t WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::constructDeletedValue(WTF *a1)
{
  uint64_t result;

  result = std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  *(_BYTE *)a1 = -2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(WTF *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t isDeletedBucket;
  void *v5;
  _BYTE *v7;
  unsigned int i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  WTF::isIntegralOrPointerType(a1);
  v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  v11 = *(_QWORD *)a1;
  v10 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  *(_QWORD *)a1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::allocateTable(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(a1, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(a1, a2 - 1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, 0);
  isDeletedBucket = (uint64_t)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v10);
  v9 = 0;
  for (i = 0; i != v12; ++i)
  {
    v7 = (_BYTE *)(v11 + i);
    isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
    if ((isDeletedBucket & 1) == 0)
    {
      isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket();
      if ((isDeletedBucket & 1) == 0)
      {
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket();
        isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::reinsert((uint64_t *)a1, v7);
        if (v7 == a3)
          v9 = isDeletedBucket;
      }
    }
  }
  if (v11)
    isDeletedBucket = WTF::FastMalloc::free((WTF::FastMalloc *)(v11 - 16), v5);
  WTF::isIntegralOrPointerType((WTF *)isDeletedBucket);
  return v9;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::allocateTable(unsigned int a1)
{
  unsigned int i;
  uint64_t v3;

  v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)(a1 + 16)) + 16;
  for (i = 0; i < a1; ++i)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket(v3 + i);
  return v3;
}

_QWORD *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(_QWORD *result, int a2)
{
  *(_DWORD *)(*result - 4) = a2;
  return result;
}

_QWORD *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(_QWORD *result, int a2)
{
  *(_DWORD *)(*result - 8) = a2;
  return result;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket()
{
  WTF *v0;

  std::__to_address[abi:sn180100]<char const>();
  return WTF::isHashTraitsEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(v0);
}

void WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket()
{
  WTF::RefCountedBase *v0;

  std::__to_address[abi:sn180100]<char const>();
  WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(v0);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::reinsert(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;

  std::__to_address[abi:sn180100]<char const>();
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert(a1, v3);
  *(_BYTE *)operator new(1, 0, v5) = *a2;
  return v5;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket(uint64_t a1)
{
  return WTF::HashTableBucketInitializer<false>::initialize<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a1);
}

uint64_t WTF::HashTableBucketInitializer<false>::initialize<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(uint64_t a1)
{
  return WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::constructEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(a1);
}

uint64_t WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::constructEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(uint64_t a1)
{
  WTF *v1;
  uint64_t result;

  v1 = (WTF *)operator new(1, 0, a1);
  result = WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(v1);
  *(_BYTE *)v1 = -1;
  return result;
}

uint64_t WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(WTF *a1)
{
  return std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
}

BOOL WTF::isHashTraitsEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF *a1)
{
  return WTF::HashTraitsEmptyValueChecker<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,false>::isEmptyValue<WebCore::AuthenticatorTransport>(a1);
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,false>::isEmptyValue<WebCore::AuthenticatorTransport>(WTF *a1)
{
  char v1;

  v1 = *(_BYTE *)a1;
  WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(a1);
  return v1 == -1;
}

void WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v7 = *a1;
  v6 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  v5 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(a2) & v6;
  v4 = 0;
  while (!WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket())
  {
    ++v4;
    v5 = (v5 + v4) & v6;
  }
  return v7 + v5;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(_QWORD *a1)
{
  if (*a1)
    return *(unsigned int *)(*a1 - 8);
  else
    return 0;
}

uint64_t WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(unsigned __int8 *a1)
{
  return WTF::IntHash<WebCore::AuthenticatorTransport>::hash(*a1);
}

uint64_t WTF::IntHash<WebCore::AuthenticatorTransport>::hash(unsigned __int8 a1)
{
  return WTF::intHash((WTF *)a1);
}

uint64_t WTF::intHash(WTF *this)
{
  return (((9
          * ((this + ~(this << 15)) ^ ((this
                                                                                      + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6))
        + ~(((9
            * ((this + ~(this << 15)) ^ ((this
                                                                                        + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) << 11)) ^ ((((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) + ~(((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) << 11)) >> 16);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find(uint64_t *a1, unsigned __int8 *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
}

_QWORD *WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(_QWORD *a1, _QWORD *a2)
{
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(a1, a2);
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v5;

  if (!*a1)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookup<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
  if (v5)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(a1, v5);
  else
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookup<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  char *v3;
  int i;
  unsigned int v6;
  int v7;
  uint64_t v8;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v8 = *a1;
  if (!*a1)
    return 0;
  v7 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  v6 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(a2) & v7;
  for (i = 0; ; v6 = (v6 + i) & v7)
  {
    std::__to_address[abi:sn180100]<char const>();
    if (WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(v3, (char *)a2))
    {
      return v8 + v6;
    }
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket())
      break;
    ++i;
  }
  return 0;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v4 = *a1;
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

BOOL WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  return WTF::IntHash<WebCore::AuthenticatorTransport>::equal(*a1, *a2);
}

BOOL WTF::IntHash<WebCore::AuthenticatorTransport>::equal(char a1, char a2)
{
  return a1 == a2;
}

_QWORD *WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  return result;
}

_QWORD *std::bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  return std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::__bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&,0>(a1, a2, a3);
}

_QWORD *std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::__bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&,0>(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::__bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&,0>(a1, a2, a3);
  return a1;
}

{
  uint64_t v4;

  v4 = *a2;
  a1[1] = a2[1];
  *a1 = v4;
  std::tuple<WebKit::AuthenticatorManager *>::tuple[abi:sn180100]<WebKit::AuthenticatorManager *&,0>(a1 + 2, a3);
  return a1;
}

_QWORD *std::tuple<WebKit::AuthenticatorManager *>::tuple[abi:sn180100]<WebKit::AuthenticatorManager *&,0>(_QWORD *a1, _QWORD *a2)
{
  std::tuple<WebKit::AuthenticatorManager *>::tuple[abi:sn180100]<WebKit::AuthenticatorManager *&,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC1B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC1B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(_QWORD *a1, _QWORD *a2)
{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC2B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJPN6WebKit20AuthenticatorManagerEEEC2B8sn180100IJLm0EEJS5_EJEJEJRS5_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(_QWORD *a1, _QWORD *a2)
{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  return a1;
}

_QWORD *std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(_QWORD *a1, uint64_t a2)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  v4[0] = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void> *,std::default_delete<WTF::Detail::CallableWrapperBase<void>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void> *,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>>(a1, v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::call(uint64_t a1)
{
  return std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::operator()[abi:sn180100]<>(a1 + 8);
}

void WTF::Detail::CallableWrapperBase<void>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::operator()[abi:sn180100]<>(uint64_t a1)
{
  return std::__apply_functor[abi:sn180100]<void (WebKit::AuthenticatorManager::*)(void),std::tuple<WebKit::AuthenticatorManager*>,0ul,std::tuple<>>(a1);
}

uint64_t std::__apply_functor[abi:sn180100]<void (WebKit::AuthenticatorManager::*)(void),std::tuple<WebKit::AuthenticatorManager*>,0ul,std::tuple<>>(uint64_t a1)
{
  _QWORD *v2;

  std::to_address[abi:sn180100]<char const>();
  WTF::ThreadLikeAssertion::operator=();
  return _ZNSt3__18__invokeB8sn180100IRMN6WebKit20AuthenticatorManagerEFvvERPS2_JEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOS9_OS8_DpOSA_(a1, v2);
}

uint64_t _ZNSt3__18__invokeB8sn180100IRMN6WebKit20AuthenticatorManagerEFvvERPS2_JEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOS9_OS8_DpOSA_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(_QWORD *))a1;
  v4 = (_QWORD *)(*a2 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *))(*v4 + v3);
  return v3(v4);
}

_QWORD *std::__compressed_pair<WTF::Detail::CallableWrapperBase<void> *,std::default_delete<WTF::Detail::CallableWrapperBase<void>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void> *,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>>(_QWORD *a1, _QWORD *a2)
{
  std::__compressed_pair<WTF::Detail::CallableWrapperBase<void> *,std::default_delete<WTF::Detail::CallableWrapperBase<void>>>::__compressed_pair[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void> *,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>>(a1, a2);
  return a1;
}

{
  std::__compressed_pair_elem<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,0,false>::__compressed_pair_elem[abi:sn180100]<WTF::Detail::CallableWrapperBase<void,WTF::String const&> *,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(uint64_t a1, uint64_t a2)
{
  return WTF::VectorDestructor<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(a1, a2);
}

uint64_t WTF::VectorDestructor<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = result; i != a2; i += 8)
    result = WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(i);
  return result;
}

BOOL WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]();
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>,WebKit::AuthenticatorManager::clearStateAsync(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34ABA80;
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABA80;
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::operator()((uint64_t *)(a1 + 8));
}

void WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::operator()(uint64_t *a1)
{
  WebKit::AuthenticatorManager *v2;

  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    v2 = (WebKit::AuthenticatorManager *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::AuthenticatorManager::clearState(v2);
  }
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(uint64_t *a1)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
}

BOOL WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(uint64_t *a1)
{
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
    return std::span<char const,18446744073709551615ul>::size[abi:sn180100](*a1);
  else
    return 0;
}

void WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::clear(WTF::RefCountedBase *a1)
{
  uint64_t v2;
  void *v3;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(_QWORD *)a1)
  {
    v2 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)a1);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(v2, v3);
  }
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF::ASCIILiteral *a1)
{
  WTF::FastMalloc *v2;

  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1))
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, 0);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    v2 = (WTF::FastMalloc *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, v2);
    WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  }
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(WTF::ASCIILiteral *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = a2;
  v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
     + 8 * a2;
  v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
  WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  *((_DWORD *)a1 + 3) = v5;
}

BOOL WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::shouldReallocateBuffer(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = 0;
  if (*(_DWORD *)(a1 + 8))
    return a2 != 0;
  return v2;
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::reallocateBuffer(WTF *a1, unint64_t a2)
{
  uint64_t result;

  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  if (a2 > 0x1FFFFFFFFFFFFFFFLL)
  {
    __break(0xC471u);
    JUMPOUT(0x196DCF200);
  }
  *((_DWORD *)a1 + 2) = a2;
  result = WTF::FastMalloc::realloc(*(WTF::FastMalloc **)a1, (void *)(8 * a2));
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t WTF::FastMalloc::realloc(WTF::FastMalloc *this, void *a2)
{
  return WTF::fastRealloc(this, a2);
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (!WTF::isValidCapacityForVector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>(a2))
  {
    __break(0xC471u);
    JUMPOUT(0x196DCF2A0);
  }
  result = WTF::FastMalloc::malloc((WTF::FastMalloc *)(8 * a2));
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = result;
  return result;
}

BOOL WTF::isValidCapacityForVector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>(unint64_t a1)
{
  return a1 <= (unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() >> 3;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t KnownGoodIterator;
  uint64_t v9;
  int v11;
  int v12;
  uint64_t *shouldExpand;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  void *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  std::__to_address[abi:sn180100]<char const>();
  v23 = v5;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  if (!*(_QWORD *)a2)
    v6 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(a2, 0);
  WTF::isIntegralOrPointerType((WTF *)v6);
  v22 = *(_QWORD *)a2;
  v21 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a2);
  v20 = WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v23) & v21;
  v19 = 0;
  v18 = 0;
  while (1)
  {
    v17 = (uint64_t *)(v22 + 8 * v20);
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
      break;
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket())
    {
      v18 = (void *)(v22 + 8 * v20);
    }
    else
    {
      std::__to_address[abi:sn180100]<char const>();
      if (WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v7, v23))
      {
        KnownGoodIterator = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v17);
        return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, KnownGoodIterator, v9, 0);
      }
    }
    ++v19;
    v20 = (v20 + v19) & v21;
  }
  if (v18)
  {
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::initializeBucket(v18);
    v17 = (uint64_t *)v18;
    v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a2);
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a2, v11 - 1);
  }
  WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::translate<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v17, v23, a3);
  v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a2, v12 + 1);
  shouldExpand = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(a2);
  if ((shouldExpand & 1) != 0)
  {
    shouldExpand = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(a2, v17);
    v17 = shouldExpand;
  }
  WTF::isIntegralOrPointerType((WTF *)shouldExpand);
  v14 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v17);
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, v14, v15, 1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(WTF *a1, uint64_t *a2)
{
  unsigned int v4;

  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  if (!v4)
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, 8u, a2);
  if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(a1))
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, v4, a2);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, 2 * v4, a2);
}

unint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(a1);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket()
{
  WTF *v0;

  std::__to_address[abi:sn180100]<char const>();
  return WTF::isHashTraitsEmptyValue<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v0);
}

BOOL WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1, uint64_t a2)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v4 = *a1;
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(&v7, (uint64_t)a1, a2, v4 + 8 * v5);
  return v7;
}

uint64_t WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, a2, a3, a4 & 1);
}

void *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::initializeBucket(void *a1)
{
  return WTF::HashTableBucketInitializer<true>::initialize<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

uint64_t *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::translate<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return WTF::GenericHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::assignToEmpty<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, a3);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  v3 = v2
     + WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTableCapacityForSize<1u>::shouldExpand(v3, v4);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(_QWORD *a1)
{
  unsigned int v2;

  v2 = 6
     * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  return v2 < 2
            * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(WTF *a1, unsigned int a2, uint64_t *a3)
{
  WTF *isDeletedBucket;
  void *v5;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int i;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;

  WTF::isIntegralOrPointerType(a1);
  v13 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  v12 = *(_QWORD *)a1;
  v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  *(_QWORD *)a1 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::allocateTable(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(a1, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(a1, a2 - 1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, 0);
  isDeletedBucket = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v11);
  v10 = 0;
  for (i = 0; i != v13; ++i)
  {
    v8 = (uint64_t *)(v12 + 8 * i);
    isDeletedBucket = (WTF *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket();
    if ((isDeletedBucket & 1) == 0)
    {
      if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
      {
        isDeletedBucket = (WTF *)WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref((uint64_t *)(v12 + 8 * i));
      }
      else
      {
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket();
        v7 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::reinsert((uint64_t *)a1, v8);
        isDeletedBucket = (WTF *)WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(v8);
        if (v8 == a3)
          v10 = v7;
      }
    }
  }
  if (v12)
    isDeletedBucket = (WTF *)WTF::FastMalloc::free((WTF::FastMalloc *)(v12 - 16), v5);
  WTF::isIntegralOrPointerType(isDeletedBucket);
  return v10;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::allocateTable(unsigned int a1)
{
  return WTF::FastMalloc::zeroedMalloc((WTF::FastMalloc *)(8 * a1 + 16)) + 16;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::reinsert(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  std::__to_address[abi:sn180100]<char const>();
  v6 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert(a1, v3);
  WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(v6);
  v4 = (uint64_t *)operator new(8, 0, (uint64_t)v6);
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  return v6;
}

uint64_t WTF::FastMalloc::zeroedMalloc(WTF::FastMalloc *this)
{
  return WTF::fastZeroedMalloc(this);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert(uint64_t *a1, uint64_t a2)
{
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v7 = *a1;
  v6 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  v5 = WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a2) & v6;
  v4 = 0;
  while (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
  {
    ++v4;
    v5 = (v5 + v4) & v6;
  }
  return v7 + 8 * v5;
}

unint64_t WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(uint64_t a1)
{
  WTF *v1;

  v1 = (WTF *)WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(v1);
}

unint64_t WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(WTF *a1)
{
  return WTF::IntHash<unsigned long>::hash(a1);
}

uint64_t WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1)
{
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(a1);
}

BOOL WTF::isHashTraitsEmptyValue<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1)
{
  return WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,true>::isEmptyValue<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,true>::isEmptyValue<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1)
{
  return WTF::RefHashTraits<WebKit::Authenticator>::isEmptyValue(a1);
}

BOOL WTF::RefHashTraits<WebKit::Authenticator>::isEmptyValue(WTF *a1)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableEmptyValue(a1);
}

BOOL WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableEmptyValue(WTF *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  WTF::isIntegralOrPointerType(a1);
  return v1 == 0;
}

BOOL WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
  return v2 == WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a2);
}

{
  return WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1) == a2;
}

uint64_t WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = a4 & 1;
  return result;
}

void *WTF::HashTableBucketInitializer<true>::initialize<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(void *a1)
{
  return memset(a1, 0, 8uLL);
}

uint64_t *WTF::GenericHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::assignToEmpty<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1, uint64_t *a2)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::operator=(a1, a2);
}

uint64_t *WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  return WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(v4);
}

BOOL WTF::HashTableCapacityForSize<1u>::shouldExpand(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x400)
    return 2 * a1 >= a2;
  else
    return 4 * a1 >= 3 * a2;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(_QWORD *a1, _BYTE *a2)
{
  uint64_t v3;

  v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, _BYTE *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E34ABAA8;
  *(_BYTE *)(a1 + 8) = *a2;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ABAD0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()((unsigned __int8 *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()(unsigned __int8 *a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;

  v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, *a1);
}

uint64_t API::WebAuthenticationPanel::client(API::WebAuthenticationPanel *this)
{
  return WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34ABAF8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABAF8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::operator()(a1 + 8);
}

uint64_t WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!((_QWORD *)a1);
  if ((result & 1) == 0)
  {
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
    return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>((WTF *)(v3 + 840), *(WTF **)(a1 + 8));
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1, WTF *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::find<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, a2);
  return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove((uint64_t *)a1, v3, v4) & 1;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  _QWORD v8[3];
  uint64_t *v9;
  uint64_t *v10;
  char v11;

  v9 = a2;
  v10 = a3;
  v8[2] = a1;
  v4 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  v8[1] = v5;
  v8[0] = v4;
  v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(&v9, (uint64_t)v8);
  if (v6)
  {
    v11 = 0;
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)v6);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeWithoutEntryConsistencyCheck(a1, v9, v10);
    v11 = 1;
  }
  return v11 & 1;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::find<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  WTF *v6[2];
  uint64_t v7;

  v6[1] = a1;
  v6[0] = a2;
  v2 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>((uint64_t *)a1, v6);
  v5[1] = v3;
  v5[0] = v2;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v7, v5);
  return v7;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator(a1, v2 + 8 * v3);
}

{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(a1, v2 + 8 * v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t *v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[2] = a1;
  v4 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(v8, (uint64_t)v7);
  if ((result & 1) == 0)
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeAndInvalidateWithoutEntryConsistencyCheck((WTF::RefCountedBase *)a1, v8[0]);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeAndInvalidateWithoutEntryConsistencyCheck(WTF::RefCountedBase *a1, uint64_t *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::remove(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::remove(WTF *a1, uint64_t *a2)
{
  int v3;
  int v4;
  uint64_t *shouldShrink;

  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deleteBucket(a2);
  v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, v3 + 1);
  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v4 - 1);
  shouldShrink = (uint64_t *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(a1);
  if ((shouldShrink & 1) != 0)
    shouldShrink = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shrink(a1);
  return WTF::isIntegralOrPointerType((WTF *)shouldShrink);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deleteBucket(uint64_t *a1)
{
  return WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shrink(WTF *a1)
{
  unsigned int v2;

  v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, v2 >> 1, 0);
}

uint64_t *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1)
{
  WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(a1);
  return WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::constructDeletedValue((uint64_t)a1);
}

uint64_t *WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::constructDeletedValue(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)operator new(8, 0, a1);
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::Ref(v1);
}

uint64_t *WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::Ref(uint64_t *a1)
{
  WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::Ref(a1);
  return a1;
}

{
  *a1 = WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue();
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(uint64_t *a1, WTF **a2)
{
  uint64_t v5;

  if (!*a1)
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  v5 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(a1, a2);
  if (v5)
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(a1, v5);
  else
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int i;
  unsigned int v6;
  int v7;
  uint64_t v8;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v8 = *a1;
  if (!*a1)
    return 0;
  v7 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  v6 = WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WebKit::Authenticator const*>(a2) & v7;
  for (i = 0; ; v6 = (v6 + i) & v7)
  {
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
      return 0;
    if (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket())
    {
      std::__to_address[abi:sn180100]<char const>();
      if (WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WebKit::Authenticator const*>(v3, (uint64_t *)a2))
      {
        break;
      }
    }
    ++i;
  }
  return v8 + 8 * v6;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v4 = *a1;
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + 8 * v5);
  return v7;
}

unint64_t WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WebKit::Authenticator const*>(WTF **a1)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(*a1);
}

BOOL WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WebKit::Authenticator const*>(uint64_t a1, uint64_t *a2)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(a1, *a2);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(_QWORD *a1, _BYTE *a2)
{
  uint64_t v3;

  v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, _BYTE *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E34ABB20;
  *(_BYTE *)(a1 + 8) = *a2;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()((unsigned __int8 *)(a1 + 8), a2);
}

_QWORD *WTF::Function<void ()(WTF::String const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ABB48;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ABB70;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABB48;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl *a2)
{
  return WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()((_QWORD *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WTF::String const&>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1[1];
  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    WTF::String::operator=((WTF::StringImpl **)(v3 + 712), a2);
    return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 2), (uint64_t)a2);
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::CallableWrapper(_QWORD *a1, _QWORD *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ABB98;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::$_1(a1 + 1, a2);
  return a1;
}

_QWORD *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::$_1(_QWORD *a1, _QWORD *a2)
{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::$_1(a1, a2);
  return a1;
}

{
  *a1 = *a2;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABB98;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::operator()((uint64_t *)(a1 + 8), a2);
}

void WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::operator()(uint64_t *a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  API::WebAuthenticationPanel *v6[3];

  v6[2] = (API::WebAuthenticationPanel *)a1;
  v6[1] = a2;
  v3 = API::WebAuthenticationPanel::client(a2);
  v4 = *a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(v6, a1 + 1);
  (*(void (**)(uint64_t, uint64_t, API::WebAuthenticationPanel **))(*(_QWORD *)v3 + 32))(v3, v4, v6);
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v6);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ABBC0;
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler((_QWORD *)(a1 + 24), a2 + 24);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABBC0;
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;

  v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1, *(_BYTE *)(a1 + 16) & 1, a1 + 24);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ABBE8;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(_QWORD *a1, uint64_t a2)
{
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(a1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABBE8;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;

  v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(LAContext *)> &&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ABC10;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABC10;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;

  v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a1);
}

BOOL WTF::Mapper<WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,void>::map(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD v11[2];
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;

  v15 = (unsigned int *)a1;
  v14 = a2;
  v13 = a3;
  v17 = a1;
  v16 = WTF::containerSize<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(a2);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(v17, v16);
  v12[2] = v14;
  v3 = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::begin(v14);
  v12[1] = v4;
  v12[0] = v3;
  v5 = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::end(v14);
  v11[1] = v6;
  v11[0] = v5;
  while (1)
  {
    result = WTF::operator==<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(v12, v11);
    if (result)
      break;
    v10 = (unsigned __int8 *)WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator*((WTF::RefCountedBase *)v12);
    v8 = v15;
    WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0::operator()<WebCore::AuthenticatorTransport const>(&v9, v13, v10);
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(v8, (uint64_t)&v9);
    WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)&v9);
    WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator++((WTF::RefCountedBase *)v12);
  }
  return result;
}

uint64_t WTF::containerSize<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(_QWORD *a1)
{
  return std::size[abi:sn180100]<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(a1);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::begin(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;

  v4[2] = a1;
  v1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::begin(a1);
  v4[1] = v2;
  v4[0] = v1;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v5, v4);
  return v5;
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::end(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;

  v4[2] = a1;
  v1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v4[1] = v2;
  v4[0] = v1;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v5, v4);
  return v5;
}

BOOL WTF::operator==<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(_QWORD *a1, _QWORD *a2)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(a1, a2);
}

uint64_t WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator*(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::get(a1);
}

_QWORD *WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  v4 = (_QWORD *)operator new(8, 0, v3);
  result = WTF::Function<void ()(WTF::String const&)>::Function(v4, a2);
  ++a1[3];
  return result;
}

uint64_t WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0::operator()<WebCore::AuthenticatorTransport const>(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3)
{
  WebKit::AuthenticatorTransportService *v4;
  _QWORD v6[4];

  v6[3] = a1;
  v6[2] = a2;
  v6[1] = a3;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 120))(v6, *a2, *a3, *a2);
  v4 = (WebKit::AuthenticatorTransportService *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::AuthenticatorTransportService::startDiscovery(v4);
  WTF::Function<void ()(WTF::String const&)>::Function(a1, (uint64_t)v6);
  return WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)v6);
}

BOOL WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator++(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator++(a1);
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (a2)
    return WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, a2);
  return result;
}

uint64_t std::size[abi:sn180100]<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(_QWORD *a1)
{
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(a1);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(_QWORD *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::size(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::size(_QWORD *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::begin(uint64_t *a1)
{
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(a1))
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  else
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeConstIterator(a1, *a1);
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(_QWORD *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1) == 0;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  v4 = *a1;
  v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(_QWORD *a1)
{
  _BOOL8 result;

  while (1)
  {
    result = 0;
    if (*a1 != a1[1])
      result = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyOrDeletedBucket();
    if (!result)
      break;
    ++*a1;
  }
  return result;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyOrDeletedBucket()
{
  BOOL isEmptyBucket;
  BOOL v1;

  isEmptyBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket();
  v1 = 1;
  if (!isEmptyBucket)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
  return v1;
}

uint64_t WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::get(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a1);
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return *(_QWORD *)a1;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator++(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  ++*(_QWORD *)a1;
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(a1);
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>(a1, a2);
}

uint64_t WTF::makeVisitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(&v3, a1, a2);
  return v3;
}

uint64_t std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>()
{
  uint64_t v0;
  uint64_t result;

  std::__to_address[abi:sn180100]<char const>();
  result = std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](v0);
  if ((result & 1) != 0)
    return std::__throw_bad_variant_access[abi:sn180100]();
  return result;
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>((uint64_t)v4);
}

BOOL std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](a1 + 8);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> &>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> &>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> &>(WTF *a1)
{
  uint64_t v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(a1, v2);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> &>(WTF *a1)
{
  uint64_t v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(a1, v2);
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(WTF *a1, uint64_t a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(WTF *a1, uint64_t a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(*(uint64_t **)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t *a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 108);
  return result;
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(WTF *a1, uint64_t a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(WTF *a1, uint64_t a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(*(_QWORD *)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t *WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 20);
  return result;
}

_QWORD *WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(a1, a2, a3);
  return a1;
}

{
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(a1, a2);
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(a1 + 1, a3);
  return a1;
}

_QWORD *WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

_QWORD *WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::Function<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::Function<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>,WebKit::AuthenticatorManager::runPanel(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>,WebKit::AuthenticatorManager::runPanel(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::operator new();
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::operator new()
{
  return WTF::fastMalloc((WTF *)0x28);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::CallableWrapperBase(a1);
  *a1 = off_1E34ABC48;
  WebKit::AuthenticatorManager::runPanel(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ABC70;
  return result;
}

uint64_t *WebKit::AuthenticatorManager::runPanel(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::runPanel(void)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1, (WTF::RefCountedBase *)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 1, a2 + 1);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 2, a2 + 2);
  a1[3] = a2[3];
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABC48;
  WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::call(uint64_t a1, char a2)
{
  return WebKit::AuthenticatorManager::runPanel(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::runPanel(void)::$_0::operator()(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = a1[3];
  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1 + 2);
  if ((result & 1) == 0)
  {
    result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1 + 1);
    if ((result & 1) == 0 && a2 != 2)
    {
      v5 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1 + 1);
      result = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(v3 + 376);
      if (v5 == result)
        return (uint64_t)WebKit::AuthenticatorManager::startDiscovery(v3, a1);
    }
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>(_QWORD *a1, _BYTE *a2)
{
  uint64_t v3;

  v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, _BYTE *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E34ABC98;
  *(_BYTE *)(a1 + 8) = *a2;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0::operator()((_BYTE *)(a1 + 8), a2);
}

uint64_t WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0::operator()(_BYTE *a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3;

  v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, *a1 & 1);
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>((uint64_t)v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WTF::RefCountedBase *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  uint64_t v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, v2);
}

WTF::RefCountedBase *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  uint64_t v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, uint64_t a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, a2);
}

WTF::RefCountedBase *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, uint64_t a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(*(WTF::RefCountedBase ***)a1, a2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WTF::RefCountedBase **a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::getTransports(void)const::$_0::operator()(a1, a2);
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::getTransports(void)const::$_0::operator()(WTF::RefCountedBase **a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t v5;
  WTF::RefCountedBase **v6;

  v6 = a1;
  v5 = a2;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(*a1, (WTF::RefCountedBase *)v4);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v4);
}

uint64_t WebKit::`anonymous namespace'::collectTransports(WTF::RefCountedBase *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  char v11;
  char v12;
  _QWORD v13[2];
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  _BYTE v21[31];
  char v22;
  int v23;
  char v24;
  _QWORD v25[2];
  char v26;
  char v27;
  _QWORD v28[2];
  char v29;
  char v30;
  _QWORD v31[2];
  char v32;
  char v33;
  _QWORD v34[2];
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  WTF::RefCountedBase *v42;

  v42 = a1;
  v41 = a2;
  v40 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1);
  if ((std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v41) & 1) != 0
    && (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41),
        (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v3) & 1) != 0))
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41);
    v22 = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v5, &v22))
    {
      v20 = 3;
      result = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v21, a1, &v20);
      v40 = 1;
      v23 = 1;
    }
    else
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41);
      v19 = 1;
      result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v6, &v19);
      if ((result & 1) != 0)
      {
        v15 = 0;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v16, a1, &v15);
        v12 = 1;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v13, a1, &v12);
        v16 = v13[0];
        v17 = v13[1];
        v18 = v14;
        v9 = 2;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v10, a1, &v9);
        v16 = v10[0];
        v17 = v10[1];
        v18 = v11;
        v7 = 6;
        return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v8, a1, &v7);
      }
    }
  }
  else
  {
    v36 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v37, a1, &v36);
    v33 = 0;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v34, a1, &v33);
    v37 = v34[0];
    v38 = v34[1];
    v39 = v35;
    v30 = 1;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v31, a1, &v30);
    v37 = v31[0];
    v38 = v31[1];
    v39 = v32;
    v27 = 2;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v28, a1, &v27);
    v37 = v28[0];
    v38 = v28[1];
    v39 = v29;
    v24 = 6;
    result = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v25, a1, &v24);
    v37 = v25[0];
    v38 = v25[1];
    v39 = v26;
    v40 = 1;
    v23 = 1;
  }
  return result;
}

WTF::RefCountedBase *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator=(a1, a2);
}

uint64_t std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add(uint64_t a1, WTF::RefCountedBase *a2, _BYTE *a3)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(a1, a2, a3);
}

uint64_t std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 6) & 1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(uint64_t a1, WTF::RefCountedBase *a2, _BYTE *a3)
{
  unsigned __int8 *v5;
  WTF *v6;
  char *v7;
  uint64_t KnownGoodIterator;
  uint64_t v9;
  int v11;
  int v12;
  uint64_t shouldExpand;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;

  std::__to_address[abi:sn180100]<char const>();
  v23 = v5;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  if (!*(_QWORD *)a2)
    v6 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(a2, 0);
  WTF::isIntegralOrPointerType(v6);
  v22 = *(_QWORD *)a2;
  v21 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a2);
  v20 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(v23) & v21;
  v19 = 0;
  v18 = 0;
  while (1)
  {
    v17 = (_BYTE *)(v22 + v20);
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket())
      break;
    std::__to_address[abi:sn180100]<char const>();
    if (WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(v7, (char *)v23))
    {
      KnownGoodIterator = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v17);
      return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, KnownGoodIterator, v9, 0);
    }
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket())
      v18 = v22 + v20;
    ++v19;
    v20 = (v20 + v19) & v21;
  }
  if (v18)
  {
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket(v18);
    v17 = (_BYTE *)v18;
    v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a2);
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a2, v11 - 1);
  }
  WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::translate<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(v17, (uint64_t)v23, a3);
  v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a2, v12 + 1);
  shouldExpand = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(a2);
  if ((shouldExpand & 1) != 0)
  {
    shouldExpand = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(a2, v17);
    v17 = (_BYTE *)shouldExpand;
  }
  WTF::isIntegralOrPointerType((WTF *)shouldExpand);
  v14 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v17);
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, v14, v15, 1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(WTF *a1, _BYTE *a2)
{
  unsigned int v4;

  v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  if (!v4)
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, 8u, a2);
  if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(a1))
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, v4, a2);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, 2 * v4, a2);
}

_BYTE *WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::translate<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  return WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::assignToEmpty<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(a1, a3);
}

_BYTE *WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::assignToEmpty<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

WTF::RefCountedBase *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator=(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(v4, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::swap(a1, (WTF::RefCountedBase *)v4);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable((WTF::RefCountedBase *)v4);
}

uint64_t *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::swap(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>((uint64_t *)a1, (uint64_t *)a2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, uint64_t a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

WTF::RefCountedBase *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, uint64_t a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(*(_QWORD *)a1, a2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::getTransports(void)const::$_1::operator()((WTF::RefCountedBase **)(a1 + 8), a2);
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::getTransports(void)const::$_1::operator()(WTF::RefCountedBase **a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t v5;
  WTF::RefCountedBase **v6;

  v6 = a1;
  v5 = a2;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(*a1, (WTF::RefCountedBase *)v4);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v4);
}

uint64_t WebKit::`anonymous namespace'::collectTransports(WTF::RefCountedBase *a1, WTF::ASCIILiteral *a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 v5;
  char v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int *v16;
  _BYTE v17[31];
  char v18;
  _BYTE v19[31];
  char v20;
  _BYTE v21[31];
  char v22;
  _BYTE v23[31];
  char v24;
  _BYTE v25[31];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  char v31;
  _QWORD v32[2];
  char v33;
  char v34;
  _QWORD v35[2];
  char v36;
  char v37;
  _QWORD v38[2];
  char v39;
  char v40;
  _QWORD v41[2];
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  WTF::ASCIILiteral *v49;
  WTF::RefCountedBase *v50;

  v50 = a1;
  v49 = a2;
  v48 = a3;
  v47 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1);
  if (WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v49))
  {
    v43 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v44, a1, &v43);
    v40 = 0;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v41, a1, &v40);
    v44 = v41[0];
    v45 = v41[1];
    v46 = v42;
    v37 = 1;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v38, a1, &v37);
    v44 = v38[0];
    v45 = v38[1];
    v46 = v39;
    v34 = 2;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v35, a1, &v34);
    v44 = v35[0];
    v45 = v35[1];
    v46 = v36;
    v31 = 6;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v32, a1, &v31);
    v44 = v32[0];
    v45 = v32[1];
    v46 = v33;
  }
  v30 = (unsigned int *)v49;
  v29 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(v49);
  v28 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v30);
  while (v29 != v28)
  {
    v27 = v29;
    if (WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(v29 + 24))
    {
      v26 = 3;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v25, a1, &v26);
      v24 = 0;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v23, a1, &v24);
      v22 = 1;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v21, a1, &v22);
      v20 = 2;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v19, a1, &v20);
      v18 = 6;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v17, a1, &v18);
      break;
    }
    v16 = (unsigned int *)(v27 + 24);
    v15 = (_BYTE *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v27 + 24));
    v14 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v16);
    while (v15 != (_BYTE *)v14)
    {
      v13 = v15;
      if (*v15 != 2)
      {
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v12, a1, v13);
        if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(a1) >= 5uLL)
          break;
      }
      ++v15;
    }
    v29 += 40;
  }
  result = std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v48);
  if ((result & 1) != 0)
  {
    v11 = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v48, &v11))
    {
      v10 = 0;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v10);
      v9 = 1;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v9);
      v8 = 2;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v8);
      v7 = 6;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v7);
    }
    v6 = 1;
    result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v48, &v6);
    if ((result & 1) != 0)
    {
      v5 = 3;
      return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v5);
    }
  }
  return result;
}

BOOL WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1) == 0;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>,WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34ABCD0;
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ABCD0;
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::operator()(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)(a1 + 1), v3);
  }
  return result;
}

Inspector::SupplementalBackendDispatcher *Inspector::AutomationBackendDispatcher::AutomationBackendDispatcher(Inspector::SupplementalBackendDispatcher *a1, Inspector::BackendDispatcher *a2, uint64_t a3)
{
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v5 = (_QWORD *)Inspector::SupplementalBackendDispatcher::SupplementalBackendDispatcher(a1, a2);
  *v5 = off_1E34ABE28;
  v5[3] = a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::registerDispatcherForDomain();
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

_DWORD *Inspector::AutomationBackendDispatcher::dispatch(_DWORD *a1, uint64_t a2, const WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int k;
  int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t, _DWORD **);
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *result;
  _OWORD *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  int i;
  unsigned int v37;
  WTF *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t j;
  WTF::StringImpl *v45;
  _QWORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  _DWORD *v96;
  WTF::StringImpl *v97[3];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[5];

  v142[3] = *MEMORY[0x1E0C80C00];
  ++a1[2];
  v7 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getObject(v7, (const WTF::String *)v97);
  v10 = v97[0];
  v97[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = &unk_1ECE71000;
  if ((_MergedGlobals_43 & 1) == 0)
  {
    *(_QWORD *)&v94 = Inspector::AutomationBackendDispatcher::getBrowsingContexts;
    *((_QWORD *)&v94 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)v97, (uint64_t)"getBrowsingContexts", 20, &v94);
    *(_QWORD *)&v93 = Inspector::AutomationBackendDispatcher::getBrowsingContext;
    *((_QWORD *)&v93 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v98, (uint64_t)"getBrowsingContext", 19, &v93);
    *(_QWORD *)&v92 = Inspector::AutomationBackendDispatcher::createBrowsingContext;
    *((_QWORD *)&v92 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v99, (uint64_t)"createBrowsingContext", 22, &v92);
    *(_QWORD *)&v91 = Inspector::AutomationBackendDispatcher::closeBrowsingContext;
    *((_QWORD *)&v91 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v100, (uint64_t)"closeBrowsingContext", 21, &v91);
    *(_QWORD *)&v90 = Inspector::AutomationBackendDispatcher::switchToBrowsingContext;
    *((_QWORD *)&v90 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v101, (uint64_t)"switchToBrowsingContext", 24, &v90);
    *(_QWORD *)&v89 = Inspector::AutomationBackendDispatcher::setWindowFrameOfBrowsingContext;
    *((_QWORD *)&v89 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v102, (uint64_t)"setWindowFrameOfBrowsingContext", 32, &v89);
    *(_QWORD *)&v88 = Inspector::AutomationBackendDispatcher::maximizeWindowOfBrowsingContext;
    *((_QWORD *)&v88 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v103, (uint64_t)"maximizeWindowOfBrowsingContext", 32, &v88);
    *(_QWORD *)&v87 = Inspector::AutomationBackendDispatcher::hideWindowOfBrowsingContext;
    *((_QWORD *)&v87 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v104, (uint64_t)"hideWindowOfBrowsingContext", 28, &v87);
    *(_QWORD *)&v86 = Inspector::AutomationBackendDispatcher::navigateBrowsingContext;
    *((_QWORD *)&v86 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v105, (uint64_t)"navigateBrowsingContext", 24, &v86);
    *(_QWORD *)&v85 = Inspector::AutomationBackendDispatcher::goBackInBrowsingContext;
    *((_QWORD *)&v85 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v106, (uint64_t)"goBackInBrowsingContext", 24, &v85);
    *(_QWORD *)&v84 = Inspector::AutomationBackendDispatcher::goForwardInBrowsingContext;
    *((_QWORD *)&v84 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v107, (uint64_t)"goForwardInBrowsingContext", 27, &v84);
    *(_QWORD *)&v83 = Inspector::AutomationBackendDispatcher::reloadBrowsingContext;
    *((_QWORD *)&v83 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v108, (uint64_t)"reloadBrowsingContext", 22, &v83);
    *(_QWORD *)&v82 = Inspector::AutomationBackendDispatcher::waitForNavigationToComplete;
    *((_QWORD *)&v82 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v109, (uint64_t)"waitForNavigationToComplete", 28, &v82);
    *(_QWORD *)&v81 = Inspector::AutomationBackendDispatcher::evaluateJavaScriptFunction;
    *((_QWORD *)&v81 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v110, (uint64_t)"evaluateJavaScriptFunction", 27, &v81);
    *(_QWORD *)&v80 = Inspector::AutomationBackendDispatcher::performMouseInteraction;
    *((_QWORD *)&v80 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v111, (uint64_t)"performMouseInteraction", 24, &v80);
    *(_QWORD *)&v79 = Inspector::AutomationBackendDispatcher::performKeyboardInteractions;
    *((_QWORD *)&v79 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v112, (uint64_t)"performKeyboardInteractions", 28, &v79);
    *(_QWORD *)&v78 = Inspector::AutomationBackendDispatcher::performInteractionSequence;
    *((_QWORD *)&v78 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v113, (uint64_t)"performInteractionSequence", 27, &v78);
    *(_QWORD *)&v77 = Inspector::AutomationBackendDispatcher::cancelInteractionSequence;
    *((_QWORD *)&v77 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v114, (uint64_t)"cancelInteractionSequence", 26, &v77);
    *(_QWORD *)&v76 = Inspector::AutomationBackendDispatcher::takeScreenshot;
    *((_QWORD *)&v76 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v115, (uint64_t)"takeScreenshot", 15, &v76);
    *(_QWORD *)&v75 = Inspector::AutomationBackendDispatcher::resolveChildFrameHandle;
    *((_QWORD *)&v75 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v116, (uint64_t)"resolveChildFrameHandle", 24, &v75);
    *(_QWORD *)&v74 = Inspector::AutomationBackendDispatcher::resolveParentFrameHandle;
    *((_QWORD *)&v74 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v117, (uint64_t)"resolveParentFrameHandle", 25, &v74);
    *(_QWORD *)&v73 = Inspector::AutomationBackendDispatcher::computeElementLayout;
    *((_QWORD *)&v73 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v118, (uint64_t)"computeElementLayout", 21, &v73);
    *(_QWORD *)&v72 = Inspector::AutomationBackendDispatcher::getComputedRole;
    *((_QWORD *)&v72 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v119, (uint64_t)"getComputedRole", 16, &v72);
    *(_QWORD *)&v71 = Inspector::AutomationBackendDispatcher::getComputedLabel;
    *((_QWORD *)&v71 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v120, (uint64_t)"getComputedLabel", 17, &v71);
    *(_QWORD *)&v70 = Inspector::AutomationBackendDispatcher::selectOptionElement;
    *((_QWORD *)&v70 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v121, (uint64_t)"selectOptionElement", 20, &v70);
    *(_QWORD *)&v69 = Inspector::AutomationBackendDispatcher::isShowingJavaScriptDialog;
    *((_QWORD *)&v69 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v122, (uint64_t)"isShowingJavaScriptDialog", 26, &v69);
    *(_QWORD *)&v68 = Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog;
    *((_QWORD *)&v68 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v123, (uint64_t)"dismissCurrentJavaScriptDialog", 31, &v68);
    *(_QWORD *)&v67 = Inspector::AutomationBackendDispatcher::acceptCurrentJavaScriptDialog;
    *((_QWORD *)&v67 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v124, (uint64_t)"acceptCurrentJavaScriptDialog", 30, &v67);
    *(_QWORD *)&v66 = Inspector::AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog;
    *((_QWORD *)&v66 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v125, (uint64_t)"messageOfCurrentJavaScriptDialog", 33, &v66);
    *(_QWORD *)&v65 = Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt;
    *((_QWORD *)&v65 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v126, (uint64_t)"setUserInputForCurrentJavaScriptPrompt", 39, &v65);
    *(_QWORD *)&v64 = Inspector::AutomationBackendDispatcher::setFilesToSelectForFileUpload;
    *((_QWORD *)&v64 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v127, (uint64_t)"setFilesToSelectForFileUpload", 30, &v64);
    *(_QWORD *)&v63 = Inspector::AutomationBackendDispatcher::setFilesForInputFileUpload;
    *((_QWORD *)&v63 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v128, (uint64_t)"setFilesForInputFileUpload", 27, &v63);
    *(_QWORD *)&v62 = Inspector::AutomationBackendDispatcher::getAllCookies;
    *((_QWORD *)&v62 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v129, (uint64_t)"getAllCookies", 14, &v62);
    *(_QWORD *)&v61 = Inspector::AutomationBackendDispatcher::deleteSingleCookie;
    *((_QWORD *)&v61 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v130, (uint64_t)"deleteSingleCookie", 19, &v61);
    *(_QWORD *)&v60 = Inspector::AutomationBackendDispatcher::addSingleCookie;
    *((_QWORD *)&v60 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v131, (uint64_t)"addSingleCookie", 16, &v60);
    *(_QWORD *)&v59 = Inspector::AutomationBackendDispatcher::deleteAllCookies;
    *((_QWORD *)&v59 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v132, (uint64_t)"deleteAllCookies", 17, &v59);
    *(_QWORD *)&v58 = Inspector::AutomationBackendDispatcher::getSessionPermissions;
    *((_QWORD *)&v58 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v133, (uint64_t)"getSessionPermissions", 22, &v58);
    *(_QWORD *)&v57 = Inspector::AutomationBackendDispatcher::setSessionPermissions;
    *((_QWORD *)&v57 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v134, (uint64_t)"setSessionPermissions", 22, &v57);
    *(_QWORD *)&v56 = Inspector::AutomationBackendDispatcher::addVirtualAuthenticator;
    *((_QWORD *)&v56 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v135, (uint64_t)"addVirtualAuthenticator", 24, &v56);
    *(_QWORD *)&v55 = Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator;
    *((_QWORD *)&v55 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v136, (uint64_t)"removeVirtualAuthenticator", 27, &v55);
    *(_QWORD *)&v54 = Inspector::AutomationBackendDispatcher::addVirtualAuthenticatorCredential;
    *((_QWORD *)&v54 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v137, (uint64_t)"addVirtualAuthenticatorCredential", 34, &v54);
    *(_QWORD *)&v53 = Inspector::AutomationBackendDispatcher::getVirtualAuthenticatorCredentials;
    *((_QWORD *)&v53 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v138, (uint64_t)"getVirtualAuthenticatorCredentials", 35, &v53);
    *(_QWORD *)&v52 = Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential;
    *((_QWORD *)&v52 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v139, (uint64_t)"removeVirtualAuthenticatorCredential", 37, &v52);
    *(_QWORD *)&v51 = Inspector::AutomationBackendDispatcher::removeAllVirtualAuthenticatorCredentials;
    *((_QWORD *)&v51 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v140, (uint64_t)"removeAllVirtualAuthenticatorCredentials", 41, &v51);
    *(_QWORD *)&v50 = Inspector::AutomationBackendDispatcher::setVirtualAuthenticatorUserVerified;
    *((_QWORD *)&v50 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v141, (uint64_t)"setVirtualAuthenticatorUserVerified", 36, &v50);
    *(_QWORD *)&v49 = Inspector::AutomationBackendDispatcher::generateTestReport;
    *((_QWORD *)&v49 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)v142, (uint64_t)"generateTestReport", 19, &v49);
    v29 = (_OWORD *)WTF::fastMalloc((WTF *)0xC10);
    bzero(v29 + 1, 0xC00uLL);
    v47 = 0;
    v95 = v29 + 1;
    *v29 = xmmword_1978CDED0;
    while (1)
    {
      v30 = (uint64_t)v95;
      if (v95
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)&v95),
            (v30 = (uint64_t)v95) != 0))
      {
        v31 = *(_DWORD *)(v30 - 8);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v97[3 * v47];
      v33 = *((_DWORD *)*v32 + 4);
      if (v33 >= 0x100)
        v34 = v33 >> 8;
      else
        v34 = WTF::StringImpl::hashSlowCase(*v32);
      v35 = 0;
      for (i = 1; ; ++i)
      {
        v37 = v34 & v31;
        v38 = *(WTF **)(v30 + 24 * (v34 & v31));
        if (v38 == (WTF *)-1)
        {
          v35 = (_QWORD *)(v30 + 24 * v37);
          goto LABEL_57;
        }
        if (!v38)
          break;
        if ((WTF::equal(v38, *v32, v9) & 1) != 0)
          goto LABEL_66;
LABEL_57:
        v34 = i + v37;
      }
      v46 = (_QWORD *)(v30 + 24 * v37);
      if (v35)
      {
        *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
        --*(_DWORD *)(v30 - 16);
        v46 = v35;
      }
      WTF::String::operator=((WTF::StringImpl **)v46, (WTF::StringImpl *)v32);
      *(_OWORD *)(v46 + 1) = *(_OWORD *)(v32 + 1);
      v40 = (uint64_t)v95;
      if (v95)
        v41 = *((_DWORD *)v95 - 3) + 1;
      else
        v41 = 1;
      *((_DWORD *)v95 - 3) = v41;
      v42 = (*(_DWORD *)(v40 - 16) + v41);
      v43 = *(unsigned int *)(v40 - 4);
      if (v43 > 0x400)
      {
        if (v43 <= 2 * v42)
LABEL_65:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)&v95);
      }
      else if (3 * v43 <= 4 * v42)
      {
        goto LABEL_65;
      }
LABEL_66:
      if (++v47 == 46)
      {
        qword_1ECE71FC0 = (uint64_t)v95;
        for (j = 135; j != -3; j -= 3)
        {
          v45 = v97[j];
          v97[j] = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v39);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        _MergedGlobals_43 = 1;
        v11 = (_QWORD *)&unk_1ECE71000;
        break;
      }
    }
  }
  v12 = v11[504];
  v13 = *a3;
  if (v12)
  {
    v14 = *(_DWORD *)(v12 - 8);
    v15 = *((_DWORD *)v13 + 4);
    if (v15 >= 0x100)
      v16 = v15 >> 8;
    else
      v16 = WTF::StringImpl::hashSlowCase(v13);
    for (k = 0; ; v16 = k + v18)
    {
      v18 = v16 & v14;
      v19 = v12 + 24 * (v16 & v14);
      v20 = *(WTF **)v19;
      if (*(_QWORD *)v19 != -1)
      {
        if (!v20)
        {
          v21 = v11[504];
          if (v21)
          {
            v19 = v21 + 24 * *(unsigned int *)(v21 - 4);
            goto LABEL_18;
          }
          goto LABEL_23;
        }
        if ((WTF::equal(v20, *a3, v9) & 1) != 0)
        {
          v21 = v11[504];
          if (v21)
LABEL_18:
            v21 += 24 * *(unsigned int *)(v21 - 4);
          if (v21 != v19)
          {
            v22 = *(void (**)(_QWORD *, uint64_t, _DWORD **))(v19 + 8);
            v23 = *(_QWORD *)(v19 + 16);
            v24 = (_QWORD *)((char *)a1 + (v23 >> 1));
            if ((v23 & 1) != 0)
              v22 = *(void (**)(_QWORD *, uint64_t, _DWORD **))(*v24 + v22);
            v22(v24, a2, &v96);
            goto LABEL_34;
          }
LABEL_23:
          v13 = *a3;
          break;
        }
      }
      ++k;
    }
  }
  if (v13)
    *(_DWORD *)v13 += 2;
  v48 = v13;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"'Automation.", 13, (uint64_t *)&v48, (uint64_t)"' was not found", 16, v97);
  Inspector::BackendDispatcher::reportProtocolError();
  v26 = v97[0];
  v97[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v48;
  v48 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_34:
  result = v96;
  v96 = 0;
  if (result)
  {
    if (*result == 1)
    {
      result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
      if (!a1)
        return result;
      goto LABEL_40;
    }
    --*result;
  }
  if (!a1)
    return result;
LABEL_40:
  if (a1[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  --a1[2];
  return result;
}

WTF *Inspector::AutomationBackendDispatcher::getBrowsingContexts(uint64_t a1)
{
  void (***v2)(_QWORD, _DWORD **);
  WTF *v3;
  _QWORD *v4;
  void *v5;
  _DWORD *v6;
  WTF *result;
  WTF *v8;
  _DWORD *v9;

  v2 = *(void (****)(_QWORD, _DWORD **))(a1 + 24);
  WTF::fastMalloc((WTF *)0x28);
  v3 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v3;
  v8 = v3;
  v4 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v4 = off_1E34ABE50;
  v9 = v4;
  (**v2)(v2, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = v8;
  if (v8)
    return WTF::RefCounted<Inspector::BackendDispatcher>::deref(v8, v5);
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    v15 = v11;
    v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v12 = off_1E34ABE70;
    v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v10 + 8))(v10, &v17, &v16);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    if (v15)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::createBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  _QWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *result;
  WTF *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v17);
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v17;
    v17 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v17 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(&v18);
    v10 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    v15 = v11;
    v12 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v12 = off_1E34ABE90;
    v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v10 + 16))(v10, &v17, &v16);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
    if (v15)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::closeBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::Object *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _DWORD *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v13);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_14;
  }
  v9 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 24))(&v13, *(_QWORD *)(a1 + 24), &v15);
  if (v14)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v9);
    Inspector::BackendDispatcher::sendResponse();
    if (v12)
    {
      if (*v12 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v12;
    }
  }
  if (v14)
    goto LABEL_10;
LABEL_14:
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::switchToBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    v21 = v16;
    v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v17 = off_1E34ABEB0;
    v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 32))(v15, &v24, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    if (v21)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setWindowFrameOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  v8 = v30;
  v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v30;
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getObject(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v26 = v20;
    v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v21 = off_1E34ABED0;
    v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v19 + 40))(v19, &v29, &v30, &v28, &v27);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      else
        --*((_DWORD *)v22 + 2);
    }
    if (v26)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
  }
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v23;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v24;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::maximizeWindowOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    v15 = v11;
    v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v12 = off_1E34ABEF0;
    v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v10 + 48))(v10, &v17, &v16);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    if (v15)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::hideWindowOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    v15 = v11;
    v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v12 = off_1E34ABF10;
    v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v10 + 56))(v10, &v17, &v16);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    if (v15)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::navigateBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF *v30;
  _DWORD *v31;
  WTF::StringImpl *v32[2];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v32);
  v8 = v32[0];
  v32[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v32[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v34);
  v12 = v34;
  v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v32[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v33);
  v16 = v33;
  v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v17, v18, (const WTF::String *)&v33);
  v32[1] = v19;
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else
  {
    v33 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v34);
    v23 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v24 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v24;
    v30 = v24;
    v25 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v25 = off_1E34ABF30;
    v31 = v25;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v23 + 64))(v23, &v36, &v35, &v33, v32, &v31);
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (v26[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[2];
    }
    if (v30)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v30, v21);
  }
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v35;
  v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v21);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::goBackInBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v25 = v20;
    v21 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v21 = off_1E34ABF50;
    v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v19 + 72))(v19, &v30, &v27, v28, &v26);
    v22 = v26;
    v26 = 0;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    if (v25)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
  }
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::goForwardInBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v25 = v20;
    v21 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v21 = off_1E34ABF70;
    v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v19 + 80))(v19, &v30, &v27, v28, &v26);
    v22 = v26;
    v26 = 0;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    if (v25)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
  }
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::reloadBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v25 = v20;
    v21 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v21 = off_1E34ABF90;
    v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v19 + 88))(v19, &v30, &v27, v28, &v26);
    v22 = v26;
    v26 = 0;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    if (v25)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
  }
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::waitForNavigationToComplete(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF *v30;
  _DWORD *v31;
  WTF::StringImpl *v32[2];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v32);
  v8 = v32[0];
  v32[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v32[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v34);
  v12 = v34;
  v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v32[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v33);
  v16 = v33;
  v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v17, v18, (const WTF::String *)&v33);
  v32[1] = v19;
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else
  {
    v33 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v34);
    v23 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v24 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v24;
    v30 = v24;
    v25 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *v25 = off_1E34ABFB0;
    v31 = v25;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v23 + 96))(v23, &v36, &v35, &v33, v32, &v31);
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (v26[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[2];
    }
    if (v30)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v30, v21);
  }
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v35;
  v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v21);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::evaluateJavaScriptFunction(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher *v21;
  WTF::JSONImpl::Object *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  Inspector::BackendDispatcher *v25;
  WTF::JSONImpl::Object *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *result;
  WTF *v40;
  _DWORD *v41;
  WTF::StringImpl *v42[2];
  __int16 Boolean;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v42);
  v8 = v42[0];
  v42[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v46 = v42[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v46);
  v12 = v46;
  v46 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v45 = v42[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v45);
  v16 = v45;
  v45 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = v42[0];
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v44);
  v20 = v44;
  v44 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = v42[0];
  Boolean = Inspector::BackendDispatcher::getBoolean(v21, v22, (const WTF::String *)&v44);
  v24 = v44;
  v44 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v26 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = v42[0];
  v42[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v25, v26, (const WTF::String *)&v44);
  v42[1] = v27;
  v28 = v44;
  v44 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v30 = v44;
    v44 = 0;
    if (!v30)
      goto LABEL_38;
    v31 = *(_DWORD *)v30 - 2;
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v29);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v32 = *(_QWORD *)(a1 + 24);
  v44 = v45;
  v45 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v33 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v33;
  v40 = v33;
  v34 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v34 = off_1E34ABFD0;
  v41 = v34;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v32 + 104))(v32, &v48, &v47, &v46, &v44, &Boolean, v42, &v41);
  v35 = v41;
  v41 = 0;
  if (v35)
  {
    if (v35[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    else
      --v35[2];
  }
  if (v40)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v40, v29);
  v30 = v44;
  v44 = 0;
  if (v30)
  {
    v31 = *(_DWORD *)v30 - 1;
    if (*(_DWORD *)v30 != 1)
    {
LABEL_37:
      *(_DWORD *)v30 = v31;
      goto LABEL_38;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_38:
  v36 = v45;
  v45 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v37 = v46;
  v46 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v29);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v47;
  v47 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v29);
    else
      *(_DWORD *)v38 -= 2;
  }
  result = v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performMouseInteraction(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher *v21;
  WTF::JSONImpl::Object *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  char *v39;
  WTF::StringImpl *result;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  char *v54;
  WTF::StringImpl *v55;
  char *v56;
  uint64_t v57;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v56);
  v8 = (WTF::StringImpl *)v56;
  v56 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v53 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v53);
  v12 = v53;
  v53 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v52 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v52);
  v16 = v52;
  v52 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v51 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getString(v17, v18, (const WTF::String *)&v51);
  v20 = v51;
  v51 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v50 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getArray(v21, v22, (const WTF::String *)&v50);
  v24 = v50;
  v50 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v26 = (WTF::StringImpl *)v56;
    v56 = 0;
    if (!v26)
      goto LABEL_31;
LABEL_23:
    v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
    {
LABEL_24:
      *(_DWORD *)v26 = v27;
      goto LABEL_31;
    }
    WTF::StringImpl::destroy(v26, v25);
    goto LABEL_31;
  }
  v28 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(&v53);
  if ((v28 & 0xFF00000000) == 0)
  {
    v41 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    v49 = v41;
    v56 = "Unknown button: ";
    v57 = 17;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v56, (uint64_t *)&v49, &v50);
    if (v50)
    {
      Inspector::BackendDispatcher::reportProtocolError();
      v42 = v50;
      v50 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v25);
        else
          *(_DWORD *)v42 -= 2;
      }
      v26 = v49;
      v49 = 0;
      if (!v26)
        goto LABEL_31;
      goto LABEL_23;
    }
    __break(0xC471u);
    goto LABEL_82;
  }
  v29 = v28;
  v30 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(&v52);
  if ((v30 & 0xFF00000000) == 0)
  {
    v43 = v52;
    if (v52)
      *(_DWORD *)v52 += 2;
    v48 = v43;
    v56 = "Unknown interaction: ";
    v57 = 22;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v56, (uint64_t *)&v48, &v50);
    if (v50)
    {
      Inspector::BackendDispatcher::reportProtocolError();
      v44 = v50;
      v50 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v25);
        else
          *(_DWORD *)v44 -= 2;
      }
      v26 = v48;
      v48 = 0;
      if (!v26)
        goto LABEL_31;
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x196DD7000);
  }
  v31 = v30;
  v32 = *(_QWORD *)(a1 + 24);
  v56 = v54;
  v54 = 0;
  v50 = v51;
  v51 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v33 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v33;
  v46 = v33;
  v34 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v34 = off_1E34ABFF0;
  v47 = v34;
  (*(void (**)(uint64_t, WTF::StringImpl **, char **, uint64_t, uint64_t, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v32 + 112))(v32, &v55, &v56, v29, v31, &v50, &v47);
  v35 = v47;
  v47 = 0;
  if (v35)
  {
    if (v35[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    else
      --v35[2];
  }
  if (v46)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v46, v25);
  v45 = v50;
  v50 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v45;
  }
  v26 = (WTF::StringImpl *)v56;
  v56 = 0;
  if (v26)
  {
    v27 = *(_DWORD *)v26 - 1;
    if (*(_DWORD *)v26 != 1)
      goto LABEL_24;
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_31:
  v36 = v51;
  v51 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v37 = v52;
  v52 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v25);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v53;
  v53 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v25);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v54;
  v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v39;
  }
  result = v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performKeyboardInteractions(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  v8 = v25;
  v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getArray(v9, v10, (const WTF::String *)&v24);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v24;
    v24 = 0;
    if (!v14)
      goto LABEL_22;
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(a1 + 24);
  v24 = v25;
  v25 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v17 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v17;
  v22 = v17;
  v18 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v18 = off_1E34AC010;
  v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v16 + 120))(v16, &v26, &v24, &v23);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  if (v22)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v22, v13);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    v15 = *(_DWORD *)v14 - 1;
    if (*(_DWORD *)v14 != 1)
    {
LABEL_21:
      *(_DWORD *)v14 = v15;
      goto LABEL_22;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_22:
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performInteractionSequence(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  _QWORD *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  WTF *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v40);
  v8 = v40;
  v40 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v40;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v37);
  v12 = v37;
  v37 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v40;
  Inspector::BackendDispatcher::getArray(v13, v14, (const WTF::String *)&v36);
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v40;
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v36);
  v20 = v36;
  v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v22 = v36;
    v36 = 0;
    if (!v22)
      goto LABEL_34;
    v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  v24 = *(_QWORD *)(a1 + 24);
  v36 = v37;
  v37 = 0;
  v35 = v40;
  v40 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v25 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v25;
  v33 = v25;
  v26 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v26 = off_1E34AC030;
  v34 = v26;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v24 + 128))(v24, &v39, &v38, &v36, &v35, &v34);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  if (v33)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v33, v21);
  v28 = v35;
  v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 != 1)
    {
LABEL_33:
      *(_DWORD *)v22 = v23;
      goto LABEL_34;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_34:
  v29 = v40;
  v40 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v37;
  v37 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v30;
  }
  v31 = v38;
  v38 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v21);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::cancelInteractionSequence(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    v21 = v16;
    v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v17 = off_1E34AC050;
    v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 136))(v15, &v24, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    if (v21)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::takeScreenshot(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher *v21;
  WTF::JSONImpl::Object *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  __int16 v35;
  __int16 Boolean;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v41);
  v8 = v41;
  v41 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v38 = v41;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v38);
  v12 = v38;
  v38 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v41;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v37);
  v16 = v37;
  v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v41;
  Boolean = Inspector::BackendDispatcher::getBoolean(v17, v18, (const WTF::String *)&v37);
  v20 = v37;
  v37 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = Inspector::BackendDispatcher::getBoolean(v21, v22, (const WTF::String *)&v41);
  v24 = v41;
  v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v26 = v41;
    v41 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v28 = *(WTF::StringImpl **)(a1 + 16);
    ++*(_DWORD *)v28;
    v37 = v28;
    v29 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v29 = off_1E34AC070;
    v41 = v29;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF::StringImpl **))(*(_QWORD *)v27 + 144))(v27, &v40, &v39, &v38, &Boolean, &v35, &v41);
    v30 = v41;
    v41 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
      else
        --*((_DWORD *)v30 + 2);
    }
    v31 = v37;
    v37 = 0;
    if (v31)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v31, v25);
  }
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v25);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v39;
  v39 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v25);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::resolveChildFrameHandle(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher *v21;
  WTF::JSONImpl::Object *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *Integer;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v41);
  v8 = v41;
  v41 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Integer = v41;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&Integer);
  v12 = Integer;
  Integer = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = v41;
  Integer = (WTF::StringImpl *)Inspector::BackendDispatcher::getInteger(v13, v14, (const WTF::String *)&v37);
  v16 = v37;
  v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v41;
  Inspector::BackendDispatcher::getString(v17, v18, (const WTF::String *)&v36);
  v20 = v36;
  v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v41;
  Inspector::BackendDispatcher::getString(v21, v22, (const WTF::String *)&v36);
  v24 = v36;
  v36 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v26 = v36;
    v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v28 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v28;
    v35 = v28;
    v29 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v29 = off_1E34AC090;
    v36 = v29;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v27 + 152))(v27, &v40, &v39, &Integer, &v37, &v41, &v36);
    v30 = v36;
    v36 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
      else
        --*((_DWORD *)v30 + 2);
    }
    if (v35)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v35, v25);
  }
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v25);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v25);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v39;
  v39 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v25);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::resolveParentFrameHandle(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    v21 = v16;
    v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v17 = off_1E34AC0B0;
    v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 160))(v15, &v24, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    if (v21)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::computeElementLayout(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher *v21;
  WTF::JSONImpl::Object *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int16 Boolean;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47[2];

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v47);
  v8 = v47[0];
  v47[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = v47[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v44);
  v12 = v44;
  v44 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v47[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v43);
  v16 = v43;
  v43 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = v47[0];
  Boolean = Inspector::BackendDispatcher::getBoolean(v17, v18, (const WTF::String *)&v43);
  v20 = v43;
  v43 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = v47[0];
  Inspector::BackendDispatcher::getString(v21, v22, (const WTF::String *)&v41);
  v24 = v41;
  v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v26 = v47[0];
    v47[0] = 0;
    if (v26)
    {
LABEL_23:
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v27 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(&v43);
    if ((v27 & 0xFF00000000) != 0)
    {
      v28 = v27;
      v29 = *(_QWORD *)(a1 + 24);
      WTF::fastMalloc((WTF *)0x28);
      v30 = *(WTF::StringImpl **)(a1 + 16);
      ++*(_DWORD *)v30;
      v41 = v30;
      v31 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
      *(_QWORD *)v31 = off_1E34AC0D0;
      v47[0] = v31;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v29 + 168))(v29, &v46, &v45, &v44, &Boolean, v28, v47);
      v32 = v47[0];
      v47[0] = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
        else
          --*((_DWORD *)v32 + 2);
      }
      v36 = v41;
      v41 = 0;
      if (v36)
        WTF::RefCounted<Inspector::BackendDispatcher>::deref(v36, v25);
      goto LABEL_39;
    }
    v33 = v43;
    if (v43)
      *(_DWORD *)v43 += 2;
    v40 = v33;
    v47[0] = (WTF::StringImpl *)"Unknown coordinateSystem: ";
    v47[1] = (WTF::StringImpl *)27;
    result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v47, (uint64_t *)&v40, &v41);
    if (!v41)
    {
      __break(0xC471u);
      return result;
    }
    Inspector::BackendDispatcher::reportProtocolError();
    v35 = v41;
    v41 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v25);
      else
        *(_DWORD *)v35 -= 2;
    }
    v26 = v40;
    v40 = 0;
    if (v26)
      goto LABEL_23;
  }
LABEL_39:
  v37 = v43;
  v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v25);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v44;
  v44 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v25);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v45;
  v45 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v25);
    else
      *(_DWORD *)v39 -= 2;
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getComputedRole(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  v8 = v30;
  v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v26 = v20;
    v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v21 = off_1E34AC0F0;
    v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v19 + 176))(v19, &v29, &v30, &v28, &v27);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      else
        --*((_DWORD *)v22 + 2);
    }
    if (v26)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
  }
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getComputedLabel(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  v8 = v30;
  v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v26 = v20;
    v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v21 = off_1E34AC110;
    v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v19 + 184))(v19, &v29, &v30, &v28, &v27);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      else
        --*((_DWORD *)v22 + 2);
    }
    if (v26)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
  }
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::selectOptionElement(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  v8 = v30;
  v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    v26 = v20;
    v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v21 = off_1E34AC130;
    v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v19 + 192))(v19, &v29, &v30, &v28, &v27);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
      else
        --*((_DWORD *)v22 + 2);
    }
    if (v26)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
  }
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::isShowingJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::JSONImpl::Object *v10;
  WTF::JSONImpl::Value *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29[2];
  char v30;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)v29);
  v7 = v29[0];
  v29[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v29[0];
    v29[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 200))(&v25, *(_QWORD *)(a1 + 24), &v27);
    if (v26)
    {
      if (v26 != 1)
      {
        v22 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog(v22);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      v11 = (WTF::JSONImpl::Value *)v25;
      WTF::JSONImpl::Object::create(v10);
      v12 = v24;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v11);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v24 + 16), &v23, (const WTF::StringImpl *)&v28, (uint64_t)v29);
      if (v30)
      {
        v14 = (uint64_t *)(v12 + 24);
        v15 = *(unsigned int *)(v12 + 36);
        if ((_DWORD)v15 == *(_DWORD *)(v12 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v14, (unint64_t)&v23);
        }
        else
        {
          v16 = *v14;
          v17 = v23;
          if (v23)
            *(_DWORD *)v23 += 2;
          *(_QWORD *)(v16 + 8 * v15) = v17;
          *(_DWORD *)(v12 + 36) = v15 + 1;
        }
      }
      v18 = v28;
      v28 = 0;
      if (v18)
      {
        if (*v18 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v18;
      }
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      Inspector::BackendDispatcher::sendResponse();
      v20 = (_DWORD *)v24;
      v24 = 0;
      if (v20)
      {
        if (*v20 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v20;
      }
    }
    if (v26 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34AC1C0[v26])(v29, &v25);
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::Object *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _DWORD *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v13);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_14;
  }
  v9 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 208))(&v13, *(_QWORD *)(a1 + 24), &v15);
  if (v14)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v9);
    Inspector::BackendDispatcher::sendResponse();
    if (v12)
    {
      if (*v12 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v12;
    }
  }
  if (v14)
    goto LABEL_10;
LABEL_14:
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::acceptCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::Object *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _DWORD *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v13);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_14;
  }
  v9 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 216))(&v13, *(_QWORD *)(a1 + 24), &v15);
  if (v14)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v9);
    Inspector::BackendDispatcher::sendResponse();
    if (v12)
    {
      if (*v12 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v12;
    }
  }
  if (v14)
    goto LABEL_10;
LABEL_14:
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::JSONImpl::Object *v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31[2];
  char v32;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)v31);
  v7 = v31[0];
  v31[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v31[0];
    v31[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 224))(&v27, *(_QWORD *)(a1 + 24), &v29);
    if (v28)
    {
      if (v28 != 1)
      {
        v23 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt(v23);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      v26 = v27;
      v27 = 0;
      WTF::JSONImpl::Object::create(v10);
      v11 = v25;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v26, v12);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v25 + 16), &v24, (const WTF::StringImpl *)&v30, (uint64_t)v31);
      if (v32)
      {
        v14 = (uint64_t *)(v11 + 24);
        v15 = *(unsigned int *)(v11 + 36);
        if ((_DWORD)v15 == *(_DWORD *)(v11 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v14, (unint64_t)&v24);
        }
        else
        {
          v16 = *v14;
          v17 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          *(_QWORD *)(v16 + 8 * v15) = v17;
          *(_DWORD *)(v11 + 36) = v15 + 1;
        }
      }
      v18 = v30;
      v30 = 0;
      if (v18)
      {
        if (*v18 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v18;
      }
      v19 = v24;
      v24 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
      Inspector::BackendDispatcher::sendResponse();
      v20 = (_DWORD *)v25;
      v25 = 0;
      if (v20)
      {
        if (*v20 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v20;
      }
      v21 = v26;
      v26 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v8);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (v28 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34AC1D0[v28])(v31, &v27);
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v19);
  v8 = v19;
  v19 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_18;
  }
  v14 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 232))(&v19, *(_QWORD *)(a1 + 24), &v22, &v21);
  if (v20)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v14);
    Inspector::BackendDispatcher::sendResponse();
    if (v18)
    {
      if (*v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v18;
    }
  }
  if (v20)
    goto LABEL_14;
LABEL_18:
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setFilesToSelectForFileUpload(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::JSONImpl::Object *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  v8 = v25;
  v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v25;
  Inspector::BackendDispatcher::getArray(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = v25;
  Inspector::BackendDispatcher::getArray(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_22:
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(a1 + 24);
  v27 = v29;
  v29 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v18 + 240))(&v25, v18, &v30, &v27, &v28);
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      v19 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v19;
  }
  if (v26)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v19);
    Inspector::BackendDispatcher::sendResponse();
    v24 = v27;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v24;
    }
  }
  if (v26)
    goto LABEL_22;
LABEL_26:
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
  }
  v22 = v29;
  v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v22;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setFilesForInputFileUpload(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  _QWORD *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  WTF *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v38);
  v8 = v38;
  v38 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v38;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v35);
  v12 = v35;
  v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v38;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v34);
  v16 = v34;
  v34 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v38;
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v34);
  v20 = v34;
  v34 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v22 = v34;
    v34 = 0;
    if (!v22)
      goto LABEL_30;
    v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(a1 + 24);
  v34 = v38;
  v38 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v25 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v25;
  v32 = v25;
  v26 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v26 = off_1E34AC150;
  v33 = v26;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v24 + 248))(v24, &v37, &v36, &v35, &v34, &v33);
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  if (v32)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v32, v21);
  v22 = v34;
  v34 = 0;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 != 1)
    {
LABEL_29:
      *(_DWORD *)v22 = v23;
      goto LABEL_30;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_30:
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v21);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v36;
  v36 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v21);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getAllCookies(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    v15 = v11;
    v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v12 = off_1E34AC170;
    v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v10 + 256))(v10, &v17, &v16);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    if (v15)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::deleteSingleCookie(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v22;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    v21 = v16;
    v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(_QWORD *)v17 = off_1E34AC190;
    v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 264))(v15, &v24, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    if (v21)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
  }
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addSingleCookie(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  v8 = v25;
  v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v24);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v24;
    v24 = 0;
    if (!v14)
      goto LABEL_22;
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(a1 + 24);
  v24 = v25;
  v25 = 0;
  WTF::fastMalloc((WTF *)0x28);
  v17 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v17;
  v22 = v17;
  v18 = (_QWORD *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *v18 = off_1E34AC1B0;
  v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(_QWORD *)v16 + 272))(v16, &v26, &v24, &v23);
  v19 = v23;
  v23 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  if (v22)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v22, v13);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    v15 = *(_DWORD *)v14 - 1;
    if (*(_DWORD *)v14 != 1)
    {
LABEL_21:
      *(_DWORD *)v14 = v15;
      goto LABEL_22;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_22:
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::deleteAllCookies(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::JSONImpl::Object *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _DWORD *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v13);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_14;
  }
  v9 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 280))(&v13, *(_QWORD *)(a1 + 24), &v15);
  if (v14)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v9);
    Inspector::BackendDispatcher::sendResponse();
    if (v12)
    {
      if (*v12 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v12;
    }
  }
  if (v14)
    goto LABEL_10;
LABEL_14:
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcher::getSessionPermissions(uint64_t a1)
{
  WTF::JSONImpl::Object *v1;
  _DWORD *result;
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _BYTE v18[24];

  v1 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 24) + 288))(&v16);
  if (v17)
  {
    if (v17 != 1)
    {
      v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_DWORD *)Inspector::AutomationBackendDispatcher::setSessionPermissions(v12);
    }
    result = (_DWORD *)Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    v3 = v16;
    v16 = 0;
    WTF::JSONImpl::Object::create(v1);
    v4 = v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v3;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v15 + 16), &v14, (const WTF::StringImpl *)&v13, (uint64_t)v18);
    if (v18[16])
    {
      v6 = (uint64_t *)(v4 + 24);
      v7 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v7 == *(_DWORD *)(v4 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
      }
      else
      {
        v8 = *v6;
        v9 = v14;
        if (v14)
          *(_DWORD *)v14 += 2;
        *(_QWORD *)(v8 + 8 * v7) = v9;
        *(_DWORD *)(v4 + 36) = v7 + 1;
      }
    }
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*v10 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v10;
    }
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v5);
      else
        *(_DWORD *)v11 -= 2;
    }
    Inspector::BackendDispatcher::sendResponse();
    result = (_DWORD *)v15;
    v15 = 0;
    if (result)
    {
      if (*result == 1)
        result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
      else
        --*result;
    }
  }
  if (v17 != -1)
    return (_DWORD *)((uint64_t (*)(_BYTE *, _DWORD **))off_1E34AC1E0[v17])(v18, &v16);
  return result;
}

WTF::JSONImpl::Object *Inspector::AutomationBackendDispatcher::setSessionPermissions(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v4;
  WTF::JSONImpl::Object *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::Object *result;
  WTF::JSONImpl::Object *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::JSONImpl::Object *v17;

  v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getArray(v4, v5, (const WTF::String *)&v15);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v14 = v17;
  v17 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::JSONImpl::Object **))(*(_QWORD *)v9 + 296))(&v15, v9, &v14);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      v10 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v10;
  }
  if (v16)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v10);
    Inspector::BackendDispatcher::sendResponse();
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v13;
    }
  }
  if (v16)
    goto LABEL_14;
LABEL_18:
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addVirtualAuthenticator(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39[2];
  char v40;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v39);
  v8 = v39[0];
  v39[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = v39[0];
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v34);
  v12 = v34;
  v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v39[0];
    v39[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    v39[0] = v36;
    v36 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 304))(&v34, v15, &v37, v39);
    v16 = v39[0];
    v39[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v16;
    }
    if (v35)
    {
      if (v35 != 1)
      {
        v30 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator(v30);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      v33 = v34;
      v34 = 0;
      WTF::JSONImpl::Object::create(v16);
      v17 = v32;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v31 = v39[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v33, v18);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v32 + 16), &v31, (const WTF::StringImpl *)&v38, (uint64_t)v39);
      if (v40)
      {
        v20 = (uint64_t *)(v17 + 24);
        v21 = *(unsigned int *)(v17 + 36);
        if ((_DWORD)v21 == *(_DWORD *)(v17 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v20, (unint64_t)&v31);
        }
        else
        {
          v22 = *v20;
          v23 = v31;
          if (v31)
            *(_DWORD *)v31 += 2;
          *(_QWORD *)(v22 + 8 * v21) = v23;
          *(_DWORD *)(v17 + 36) = v21 + 1;
        }
      }
      v24 = v38;
      v38 = 0;
      if (v24)
      {
        if (*v24 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v24;
      }
      v25 = v31;
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v19);
        else
          *(_DWORD *)v25 -= 2;
      }
      Inspector::BackendDispatcher::sendResponse();
      v26 = (_DWORD *)v32;
      v32 = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v26;
      }
      v27 = v33;
      v33 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v13);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    if (v35 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34AC1D0[v35])(v39, &v34);
  }
  v28 = v36;
  v36 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v19);
  v8 = v19;
  v19 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_18;
  }
  v14 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 312))(&v19, *(_QWORD *)(a1 + 24), &v22, &v21);
  if (v20)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v14);
    Inspector::BackendDispatcher::sendResponse();
    if (v18)
    {
      if (*v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v18;
    }
  }
  if (v20)
    goto LABEL_14;
LABEL_18:
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addVirtualAuthenticatorCredential(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::JSONImpl::Object *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  v8 = v25;
  v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = v25;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = v25;
  Inspector::BackendDispatcher::getObject(v13, v14, (const WTF::String *)&v27);
  v16 = v27;
  v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_22:
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(a1 + 24);
  v27 = v28;
  v28 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v18 + 320))(&v25, v18, &v30, &v29, &v27);
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      v19 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v19;
  }
  if (v26)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v19);
    Inspector::BackendDispatcher::sendResponse();
    v24 = v27;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v24;
    }
  }
  if (v26)
    goto LABEL_22;
LABEL_26:
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
  }
  v22 = v29;
  v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v17);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getVirtualAuthenticatorCredentials(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::JSONImpl::Object *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[2];
  char v37;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v36);
  v8 = v36[0];
  v36[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = v36[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v32);
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    v14 = v36[0];
    v36[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v15 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 328))(&v32, *(_QWORD *)(a1 + 24), &v35, &v34);
    if (v33)
    {
      if (v33 != 1)
      {
        v28 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential(v28);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      v16 = v32;
      v32 = 0;
      WTF::JSONImpl::Object::create(v15);
      v17 = v31;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = v16;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v31 + 16), &v30, (const WTF::StringImpl *)&v29, (uint64_t)v36);
      if (v37)
      {
        v19 = (uint64_t *)(v17 + 24);
        v20 = *(unsigned int *)(v17 + 36);
        if ((_DWORD)v20 == *(_DWORD *)(v17 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v30);
        }
        else
        {
          v21 = *v19;
          v22 = v30;
          if (v30)
            *(_DWORD *)v30 += 2;
          *(_QWORD *)(v21 + 8 * v20) = v22;
          *(_DWORD *)(v17 + 36) = v20 + 1;
        }
      }
      v23 = v29;
      v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v23;
      }
      v24 = v30;
      v30 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v18);
        else
          *(_DWORD *)v24 -= 2;
      }
      Inspector::BackendDispatcher::sendResponse();
      v25 = (_DWORD *)v31;
      v31 = 0;
      if (v25)
      {
        if (*v25 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v25;
      }
    }
    if (v33 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34AC1F0[v33])(v36, &v32);
  }
  v26 = v34;
  v34 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v13);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v24);
  v8 = v24;
  v24 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = v24;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v27);
  v12 = v27;
  v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v24;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v26);
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_18:
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    goto LABEL_22;
  }
  v18 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 336))(&v24, *(_QWORD *)(a1 + 24), &v29, &v28, &v27);
  if (v25)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v18);
    Inspector::BackendDispatcher::sendResponse();
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
  }
  if (v25)
    goto LABEL_18;
LABEL_22:
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeAllVirtualAuthenticatorCredentials(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v19);
  v8 = v19;
  v19 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_18;
  }
  v14 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 344))(&v19, *(_QWORD *)(a1 + 24), &v22, &v21);
  if (v20)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v14);
    Inspector::BackendDispatcher::sendResponse();
    if (v18)
    {
      if (*v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v18;
    }
  }
  if (v20)
    goto LABEL_14;
LABEL_18:
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setVirtualAuthenticatorUserVerified(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  unsigned __int16 Boolean;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::JSONImpl::Object *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v23;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v25);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v23;
  Boolean = Inspector::BackendDispatcher::getBoolean(v13, v14, (const WTF::String *)&v25);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_19:
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_23;
  }
  if (Boolean <= 0xFFu)
  {
    __break(1u);
    return result;
  }
  v19 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, BOOL))(**(_QWORD **)(a1 + 24) + 352))(&v23, *(_QWORD *)(a1 + 24), &v27, &v26, Boolean != 0);
  if (v24)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v19);
    Inspector::BackendDispatcher::sendResponse();
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v22;
    }
  }
  if (v24)
    goto LABEL_19;
LABEL_23:
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::generateTestReport(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  Inspector::BackendDispatcher *v5;
  WTF::JSONImpl::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher *v9;
  WTF::JSONImpl::Object *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher *v13;
  WTF::JSONImpl::Object *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::JSONImpl::Object *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v24);
  v8 = v24;
  v24 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = v24;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v27);
  v12 = v27;
  v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v24;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v26);
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_18:
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    goto LABEL_22;
  }
  v18 = (WTF::JSONImpl::Object *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 360))(&v24, *(_QWORD *)(a1 + 24), &v29, &v28, &v27);
  if (v25)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create(v18);
    Inspector::BackendDispatcher::sendResponse();
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
  }
  if (v25)
    goto LABEL_18;
LABEL_22:
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  uint64_t v8[2];
  uint64_t v9[2];

  v9[0] = a1;
  v9[1] = a2;
  v8[0] = a4;
  v8[1] = a5;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(v9, a3, v8, a6);
  if (!*a6)
    __break(0xC471u);
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::sendSuccess(WTF::JSONImpl::Object *a1, _QWORD *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(a1);
  v3 = v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (_DWORD *)*a2;
  *a2 = 0;
  v13 = v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v3 + 2, &v14, (const WTF::StringImpl *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      v8 = *v6;
      v9 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::sendSuccess(WTF::JSONImpl::Object *a1, _QWORD *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(a1);
  v3 = v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (_DWORD *)*a2;
  *a2 = 0;
  v13 = v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v3 + 2, &v14, (const WTF::StringImpl *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      v8 = *v6;
      v9 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::sendSuccess(WTF::JSONImpl::Object *a1, WTF::JSONImpl::Value *a2, uint64_t a3)
{
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *result;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  _BYTE v29[16];
  char v30;

  WTF::JSONImpl::Object::create(a1);
  v5 = v27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v27 + 16), &v26, (const WTF::StringImpl *)&v28, (uint64_t)v29);
  if (v30)
  {
    v8 = (uint64_t *)(v5 + 24);
    v9 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v5 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v8, (unint64_t)&v26);
    }
    else
    {
      v10 = *v8;
      v11 = v26;
      if (v26)
        *(_DWORD *)v26 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
      *(_DWORD *)(v5 + 36) = v9 + 1;
    }
  }
  v12 = v28;
  v28 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v26;
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(a3, &v25);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v25, v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v14 + 16), &v26, (const WTF::StringImpl *)&v28, (uint64_t)v29);
  if (v30)
  {
    v17 = (uint64_t *)(v14 + 24);
    v18 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v17, (unint64_t)&v26);
    }
    else
    {
      v19 = *v17;
      v20 = v26;
      if (v26)
        *(_DWORD *)v26 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
      *(_DWORD *)(v14 + 36) = v18 + 1;
    }
  }
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v21;
  }
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v26;
  v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v16);
    else
      *(_DWORD *)v23 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = (_DWORD *)v27;
  v27 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *this)
{
  _DWORD *result;
  _DWORD *v2;

  WTF::JSONImpl::Object::create(this);
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v2;
  if (v2)
  {
    if (*v2 == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*v2;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *this, const WTF::String *a2)
{
  uint64_t *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  WTF::StringImpl *v13;
  uint64_t *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(this);
  v3 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v14 + 2, &v13, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      v8 = *v6;
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback *this, const WTF::String *a2)
{
  uint64_t *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  WTF::StringImpl *v13;
  uint64_t *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(this);
  v3 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v14 + 2, &v13, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      v8 = *v6;
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::sendSuccess(WTF::JSONImpl::Object *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::JSONImpl::Value *a4)
{
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t *result;
  WTF::StringImpl *v34;
  uint64_t *v35;
  WTF::StringImpl *v36;
  _QWORD v37[2];
  char v38;

  WTF::JSONImpl::Object::create(a1);
  v7 = v35;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = *a2;
  *a2 = 0;
  v34 = v8;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v7 + 2, &v36, (const WTF::StringImpl *)&v34, (uint64_t)v37);
  if (v38)
  {
    v10 = v7 + 3;
    v11 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v11 == *((_DWORD *)v7 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v10, (unint64_t)&v36);
    }
    else
    {
      v12 = *v10;
      v13 = v36;
      if (v36)
        *(_DWORD *)v36 += 2;
      *(_QWORD *)(v12 + 8 * v11) = v13;
      *((_DWORD *)v7 + 9) = v11 + 1;
    }
  }
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v14;
  }
  v15 = v36;
  v36 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*a3)
  {
    v16 = v35;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = (WTF::StringImpl *)v37[0];
    v17 = *a3;
    *a3 = 0;
    v34 = v17;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v16 + 2, &v36, (const WTF::StringImpl *)&v34, (uint64_t)v37);
    if (v38)
    {
      v19 = v16 + 3;
      v20 = *((unsigned int *)v16 + 9);
      if ((_DWORD)v20 == *((_DWORD *)v16 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v36);
      }
      else
      {
        v21 = *v19;
        v22 = v36;
        if (v36)
          *(_DWORD *)v36 += 2;
        *(_QWORD *)(v21 + 8 * v20) = v22;
        *((_DWORD *)v16 + 9) = v20 + 1;
      }
    }
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
    v24 = v36;
    v36 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v35;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v25 + 2, &v34, (const WTF::StringImpl *)&v36, (uint64_t)v37);
  if (v38)
  {
    v27 = v25 + 3;
    v28 = *((unsigned int *)v25 + 9);
    if ((_DWORD)v28 == *((_DWORD *)v25 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v27, (unint64_t)&v34);
    }
    else
    {
      v29 = *v27;
      v30 = v34;
      if (v34)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)(v29 + 8 * v28) = v30;
      *((_DWORD *)v25 + 9) = v28 + 1;
    }
  }
  v31 = v36;
  v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v31;
  }
  v32 = v34;
  v34 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v26);
    else
      *(_DWORD *)v32 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback *this, const WTF::String *a2)
{
  uint64_t *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  WTF::StringImpl *v13;
  uint64_t *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(this);
  v3 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v14 + 2, &v13, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      v8 = *v6;
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback *this, const WTF::String *a2)
{
  uint64_t *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  WTF::StringImpl *v13;
  uint64_t *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(this);
  v3 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v14 + 2, &v13, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      v8 = *v6;
      v9 = v13;
      if (v13)
        *(_DWORD *)v13 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::sendSuccess(WTF::JSONImpl::Object *a1, _QWORD *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t *result;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  _BYTE v16[24];

  WTF::JSONImpl::Object::create(a1);
  v3 = v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (_DWORD *)*a2;
  *a2 = 0;
  v13 = v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v3 + 2, &v14, (const WTF::StringImpl *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    v6 = v3 + 3;
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      v8 = *v6;
      v9 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
      *((_DWORD *)v3 + 9) = v7 + 1;
    }
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void Inspector::AutomationBackendDispatcher::~AutomationBackendDispatcher(Inspector::AutomationBackendDispatcher *this)
{
  WTF *v1;
  void *v2;

  Inspector::SupplementalBackendDispatcher::~SupplementalBackendDispatcher(this);
  WTF::fastFree(v1, v2);
}

void Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::~GetBrowsingContextsCallback(Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::~GetBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::~CreateBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::~SwitchToBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback::~SetWindowFrameOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback::~MaximizeWindowOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback::~HideWindowOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback::~NavigateBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback::~GoBackInBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback::~GoForwardInBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback::~ReloadBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::WaitForNavigationToCompleteCallback::~WaitForNavigationToCompleteCallback(Inspector::AutomationBackendDispatcherHandler::WaitForNavigationToCompleteCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::~EvaluateJavaScriptFunctionCallback(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformMouseInteractionCallback::~PerformMouseInteractionCallback(Inspector::AutomationBackendDispatcherHandler::PerformMouseInteractionCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback::~PerformKeyboardInteractionsCallback(Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback::~PerformInteractionSequenceCallback(Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback::~CancelInteractionSequenceCallback(Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::~TakeScreenshotCallback(Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback::~ResolveChildFrameHandleCallback(Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback::~ResolveParentFrameHandleCallback(Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::~ComputeElementLayoutCallback(Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::~GetComputedRoleCallback(Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::~GetComputedLabelCallback(Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback::~SelectOptionElementCallback(Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback::~SetFilesForInputFileUploadCallback(Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::~GetAllCookiesCallback(Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback::~DeleteSingleCookieCallback(Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback::~AddSingleCookieCallback(Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

_DWORD *WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    result = WTF::GenericHashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::assignToEmpty<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((_DWORD **)(v15 + 8), a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (uint64_t)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v20 + 16 * v21;
  *(_BYTE *)(a4 + 16) = 0;
  v26 = v8 + 16 * v14;
  v27 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  result = *(_DWORD **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v27;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (v14)
        {
          v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          v17 = *(_DWORD **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            if (*v17 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v17;
          }
          v18 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v16 = v19;
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v16 + 8) = v20;
          v21 = *(_DWORD **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v21)
          {
            if (*v21 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v21;
          }
          v22 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v11 = v16;
        }
        else
        {
          v15 = *(_DWORD **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            if (*v15 == 1)
            {
              WTF::JSONImpl::Value::operator delete();
              v14 = *(WTF::StringImpl **)v13;
            }
            else
            {
              --*v15;
            }
          }
          *(_QWORD *)v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_DWORD *WTF::GenericHashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::assignToEmpty<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(_DWORD **a1, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = (_DWORD *)*a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation21SessionPermissionDataEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation21SessionPermissionDataEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation30VirtualAuthenticatorCredentialEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation30VirtualAuthenticatorCredentialEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WTF::RefCounted<Inspector::BackendDispatcher>::deref(WTF *result, void *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 24, a2);
    v4 = (WTF::StringImpl **)*((_QWORD *)v2 + 2);
    if (v4)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
    v5 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
      WTF::RefCounted<Inspector::FrontendRouter>::deref(v5, v3);
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::RefCounted<Inspector::FrontendRouter>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(WTF **)(this + 8);
    if ((WTF *)(v2 + 24) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_OWORD *)(a1 + 8) = *a4;
  return a1;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(24 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 24 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v11 = (WTF::StringImpl **)(v2 + 24 * i);
      v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v12);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v19 = (WTF::StringImpl **)(v13 + 24 * (v16 & v14));
            v16 = ++v17 + (v16 & v14);
          }
          while (*v19);
          *v19 = 0;
          v20 = *v11;
          *v11 = 0;
          *v19 = v20;
          *(_OWORD *)(v13 + 24 * v18 + 8) = *(_OWORD *)(v2 + 24 * i + 8);
          v21 = *v11;
          *v11 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v7);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        else
        {
          *v11 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = a1[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v13 = *a1;
  if (v6 >> 31)
    goto LABEL_8;
  v14 = v6;
  v12 = *a2;
  v7 = a3[1];
  v5 = v7 != 0;
  v8 = v7 - 1;
  if (!v5)
    v8 = 0;
  v10 = *a3;
  if (v8 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x196DDE1D4);
  }
  v11 = v8;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v13, &v12, (uint64_t)&v10, a4);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = *a2;
  if (*a2)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  if ((v6 | v5) < 0
    || ((v7 = *(_DWORD *)(result + 8), v8 = __OFADD__(v5, v6), v9 = v5 + v6, !v8) ? (v10 = 0) : (v10 = 1),
        v7 < 0 || (v10 & 1) != 0 || (v8 = __OFADD__(v7, v9), v11 = (v7 + v9), v8)))
  {
    *a4 = 0;
  }
  else
  {
    v12 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, v12, *(int8x16_t **)result, *(_QWORD *)(result + 8), v4, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  _DWORD *v15;
  _BYTE *v16;
  char *v17;
  int64_t v18;
  char *v19;
  _DWORD *v20;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v20;
        if (v20)
        {
          v16 = v20 + 5;
          *v20 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v16 = a3->i8[0];
            else
              memcpy(v15 + 5, a3, a4);
          }
          v17 = &v16[a4];
          v20 = (_DWORD *)a5;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v20, v17);
          v18 = (int64_t)v20;
          if (v20)
            v18 = v20[1];
          if (a7)
          {
            result = (uint64_t)&v17[v18];
            if (a7 == 1)
              *(_BYTE *)result = a6->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a6, a7);
          }
        }
        goto LABEL_13;
      }
LABEL_16:
      v15 = 0;
      goto LABEL_13;
    }
LABEL_17:
    v15 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_13;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_16;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v20;
  if (v20)
  {
    v19 = (char *)(v20 + 5);
    *v20 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v19, a3, a4, a5, a6, a7);
  }
LABEL_13:
  *a8 = v15;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  uint64_t *result;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v8 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v32.val[0] = *a2;
      v11 = a2[1];
      v34.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v34.val[1] = 0uLL;
      v36.val[0] = v11;
      v32.val[1] = 0uLL;
      v14 = a1;
      vst2q_s8(v14, v32);
      v14 += 32;
      v36.val[1] = 0uLL;
      vst2q_s8(v14, v36);
      v15 = a1 + 64;
      vst2q_s8(v15, v34);
      v16 = a1 + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      a1 += 128;
    }
    while (a1 != v9);
    a1 = v9;
  }
  while (a1 != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v17;
    a1 += 2;
  }
  v31 = a4;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v31, v8);
  v19 = v31;
  if (v31)
    v19 = *(unsigned int *)(v31 + 4);
  v20 = &v8[2 * v19];
  v21 = &v20[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v22 = &v20[2 * (a6 & 0xFFFFFFC0)];
    v23 = 0uLL;
    do
    {
      v33.val[0] = *a5;
      v24 = a5[1];
      v35.val[0] = a5[2];
      v25 = a5[3];
      a5 += 4;
      v26 = v25;
      v35.val[1] = 0uLL;
      v37.val[0] = v24;
      v33.val[1] = 0uLL;
      v27 = v20;
      vst2q_s8(v27, v33);
      v27 += 32;
      v37.val[1] = 0uLL;
      vst2q_s8(v27, v37);
      v28 = v20 + 64;
      vst2q_s8(v28, v35);
      v29 = v20 + 96;
      vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
      v20 += 128;
    }
    while (v20 != v22);
    v20 = v22;
  }
  while (v20 != v21)
  {
    v30 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v20 = v30;
    v20 += 2;
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = a1[1];
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v8 = *a1;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v5;
    v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;

  v3 = *(_DWORD *)(result + 8);
  v4 = *a2;
  if (*a2)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  if ((v5 | v3) < 0 || (v6 = __OFADD__(v3, v5), v7 = (v3 + v5), v6))
  {
    *a3 = 0;
  }
  else
  {
    if (v4)
      v8 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
    else
      v8 = 1;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, v8, *(_OWORD **)result, *(_QWORD *)(result + 8), (_DWORD *)v4, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  _DWORD *v24;
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v24;
        if (v24)
        {
          v12 = v24 + 5;
          *v24 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v12 = *(_BYTE *)a3;
            else
              memcpy(v11 + 5, a3, a4);
          }
          v24 = a5;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v24, &v12[a4]);
        }
        goto LABEL_21;
      }
LABEL_11:
      v11 = 0;
      goto LABEL_21;
    }
LABEL_12:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if (result > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v24;
  if (v24)
  {
    v13 = (char *)(v24 + 5);
    *v24 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v14 = (char *)v11 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v15 = &v13[2 * (a4 & 0xFFFFFFC0)];
      v16 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*a3;
        v17 = *((int8x16_t *)a3 + 1);
        v26.val[0] = (int8x16_t)a3[2];
        v18 = a3[3];
        a3 += 4;
        v19 = v18;
        v26.val[1] = 0uLL;
        v27.val[0] = v17;
        v25.val[1] = 0uLL;
        v20 = v13;
        vst2q_s8(v20, v25);
        v20 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v20, v27);
        v21 = v13 + 64;
        vst2q_s8(v21, v26);
        v22 = v13 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
        v13 += 128;
      }
      while (v13 != v15);
      v13 = v15;
    }
    while (v13 != v14)
    {
      v23 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v13 = v23;
      v13 += 2;
    }
    v24 = a5;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v24, v14);
  }
LABEL_21:
  *a6 = v11;
  return result;
}

void Inspector::BackendDispatcher::CallbackBase::~CallbackBase(Inspector::BackendDispatcher::CallbackBase *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E34AC210;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

WTF::JSONImpl::Value *Inspector::AutomationFrontendDispatcher::fileChooserDismissed(WTF::JSONImpl::Object *a1, WTF::JSONImpl::Value *a2, WTF::JSONImpl::Value *a3, WTF::StringImpl **a4)
{
  WTF::JSONImpl::Value *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::JSONImpl::Value *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  Inspector::FrontendRouter *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::JSONImpl::Value *result;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::JSONImpl::Value *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61[2];
  char v62;

  WTF::JSONImpl::Object::create(a1);
  v8 = v59;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v8 + 2, &v58, (const WTF::StringImpl *)&v60, (uint64_t)v61);
  if (v62)
  {
    v11 = (uint64_t *)((char *)v8 + 24);
    v12 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v12 == *((_DWORD *)v8 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v11, (unint64_t)&v58);
    }
    else
    {
      v13 = *v11;
      v14 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
      *((_DWORD *)v8 + 9) = v12 + 1;
    }
  }
  v15 = v60;
  v60 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v15;
  }
  v16 = v57;
  v57 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v58;
  v58 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::JSONImpl::Object::create(v17);
  v18 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v61[0];
  WTF::JSONImpl::Value::create(a2, v19);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v18 + 2, &v57, (const WTF::StringImpl *)&v60, (uint64_t)v61);
  if (v62)
  {
    v21 = (uint64_t *)((char *)v18 + 24);
    v22 = *((unsigned int *)v18 + 9);
    if ((_DWORD)v22 == *((_DWORD *)v18 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v21, (unint64_t)&v57);
    }
    else
    {
      v23 = *v21;
      v24 = v57;
      if (v57)
        *(_DWORD *)v57 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
      *((_DWORD *)v18 + 9) = v22 + 1;
    }
  }
  v25 = v60;
  v60 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v25;
  }
  v26 = v57;
  v57 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v61[0];
  WTF::JSONImpl::Value::create(a3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v27 + 2, &v57, (const WTF::StringImpl *)&v60, (uint64_t)v61);
  if (v62)
  {
    v29 = (uint64_t *)((char *)v27 + 24);
    v30 = *((unsigned int *)v27 + 9);
    if ((_DWORD)v30 == *((_DWORD *)v27 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v29, (unint64_t)&v57);
    }
    else
    {
      v31 = *v29;
      v32 = v57;
      if (v57)
        *(_DWORD *)v57 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
      *((_DWORD *)v27 + 9) = v30 + 1;
    }
  }
  v33 = v60;
  v60 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v33;
  }
  v34 = v57;
  v57 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*a4)
  {
    v35 = v58;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = v61[0];
    v36 = *a4;
    *a4 = 0;
    v57 = v36;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v35 + 2, &v60, (const WTF::StringImpl *)&v57, (uint64_t)v61);
    if (v62)
    {
      v38 = (uint64_t *)((char *)v35 + 24);
      v39 = *((unsigned int *)v35 + 9);
      if ((_DWORD)v39 == *((_DWORD *)v35 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v38, (unint64_t)&v60);
      }
      else
      {
        v40 = *v38;
        v41 = v60;
        if (v60)
          *(_DWORD *)v60 += 2;
        *(_QWORD *)(v40 + 8 * v39) = v41;
        *((_DWORD *)v35 + 9) = v39 + 1;
      }
    }
    v42 = v57;
    v57 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v42;
    }
    v43 = v60;
    v60 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v37);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v59;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v58;
  v58 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v44 + 2, &v60, (const WTF::StringImpl *)&v57, (uint64_t)v61);
  if (v62)
  {
    v46 = (uint64_t *)((char *)v44 + 24);
    v47 = *((unsigned int *)v44 + 9);
    if ((_DWORD)v47 == *((_DWORD *)v44 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v46, (unint64_t)&v60);
    }
    else
    {
      v48 = *v46;
      v49 = v60;
      if (v60)
        *(_DWORD *)v60 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
      *((_DWORD *)v44 + 9) = v47 + 1;
    }
  }
  v50 = v57;
  v57 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v50;
  }
  v51 = v60;
  v60 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v45);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = *(Inspector::FrontendRouter **)a1;
  WTF::JSONImpl::Value::toJSONString(v59);
  Inspector::FrontendRouter::sendEvent(v52, (const WTF::String *)v61);
  v54 = v61[0];
  v61[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v58;
  v58 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v55;
  }
  result = v59;
  v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::JSONImpl::Value *Inspector::AutomationFrontendDispatcher::browsingContextCleared(Inspector::AutomationFrontendDispatcher *this, const WTF::String *a2)
{
  WTF::JSONImpl::Value *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::JSONImpl::Value *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  Inspector::FrontendRouter *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::JSONImpl::Value *result;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::JSONImpl::Value *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[2];
  char v41;

  WTF::JSONImpl::Object::create(this);
  v4 = v38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v36, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v4 + 2, &v37, (const WTF::StringImpl *)&v39, (uint64_t)v40);
  if (v41)
  {
    v7 = (uint64_t *)((char *)v4 + 24);
    v8 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v8 == *((_DWORD *)v4 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v37);
    }
    else
    {
      v9 = *v7;
      v10 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *((_DWORD *)v4 + 9) = v8 + 1;
    }
  }
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v11;
  }
  v12 = v36;
  v36 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v37;
  v37 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::JSONImpl::Object::create(v13);
  v14 = v37;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v40[0];
  WTF::JSONImpl::Value::create(a2, v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v14 + 2, &v36, (const WTF::StringImpl *)&v39, (uint64_t)v40);
  if (v41)
  {
    v17 = (uint64_t *)((char *)v14 + 24);
    v18 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v18 == *((_DWORD *)v14 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v17, (unint64_t)&v36);
    }
    else
    {
      v19 = *v17;
      v20 = v36;
      if (v36)
        *(_DWORD *)v36 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
      *((_DWORD *)v14 + 9) = v18 + 1;
    }
  }
  v21 = v39;
  v39 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v37;
  v37 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v23 + 2, &v39, (const WTF::StringImpl *)&v36, (uint64_t)v40);
  if (v41)
  {
    v25 = (uint64_t *)((char *)v23 + 24);
    v26 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v23 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v25, (unint64_t)&v39);
    }
    else
    {
      v27 = *v25;
      v28 = v39;
      if (v39)
        *(_DWORD *)v39 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
      *((_DWORD *)v23 + 9) = v26 + 1;
    }
  }
  v29 = v36;
  v36 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v39;
  v39 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *(Inspector::FrontendRouter **)this;
  WTF::JSONImpl::Value::toJSONString(v38);
  Inspector::FrontendRouter::sendEvent(v31, (const WTF::String *)v40);
  v33 = v40[0];
  v40[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v37;
  v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v34;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t Inspector::Protocol::AutomationHelpers::getEnumConstantValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * (int)this + 1];
  if (v3)
  {
    if (v3 == (char *)1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v5;
    }
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 3)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(_QWORD *a1)
{
  uint64_t v2;
  char i;
  char v4;
  uint64_t v5;
  char **v6;
  char *v7;
  char *v8;
  BOOL v9;
  char *v10;
  char *v11;

  v2 = 0;
  for (i = 1; ; i = 0)
  {
    v4 = i;
    v5 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(WTF::String const&)::constantValues[v2];
    v6 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v5];
    v7 = *v6;
    v8 = v6[1];
    v9 = v8 != 0;
    v10 = v8 - 1;
    v11 = v9 ? v10 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v7, v11))
      break;
    v2 = 1;
    if ((v4 & 1) == 0)
      return 0;
  }
  return v5 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 19)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 3)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 5)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 4)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 70)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 3)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 3)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 6)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 3)
      return 0;
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v2 = 0;
  while (1)
  {
    v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(WTF::String const&)::constantValues[v2];
    v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    v5 = *v4;
    v6 = v4[1];
    v7 = v6 != 0;
    v8 = v6 - 1;
    v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19AEABBCC](*a1, v5, v9))
      break;
    if (++v2 == 4)
      return 0;
  }
  return v3 | 0x100000000;
}

WTF::StringImpl *IPC::handleMessage<Messages::AuxiliaryProcess::PreferenceDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::String const&,WTF::String const&,std::optional<WTF::String> const&)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  char v32;

  IPC::Decoder::decode<WTF::String>(a2, &v26);
  if (!v27)
  {
    v13 = 0;
    LOBYTE(v21) = 0;
    v25 = 0;
    goto LABEL_10;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v28);
  if (!v29)
  {
    v13 = 0;
    LOBYTE(v21) = 0;
    v25 = 0;
LABEL_22:
    v12 = 1;
    goto LABEL_23;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v30);
  if (!v32)
  {
    LOBYTE(v21) = 0;
    v25 = 0;
    if (v29)
    {
      result = v28;
      v28 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          v13 = 0;
          *(_DWORD *)result -= 2;
          goto LABEL_22;
        }
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
    }
    v13 = 0;
    goto LABEL_22;
  }
  if (!v27 || !v29)
  {
    __break(1u);
    return result;
  }
  v11 = v26;
  v26 = 0;
  v21 = v11;
  v22 = v28;
  LOBYTE(v23) = 0;
  v24 = 0;
  if (v31)
  {
    v23 = v30;
    v24 = 1;
  }
  v12 = 0;
  v13 = 1;
  v25 = 1;
LABEL_23:
  if (!v27 || (result = v26, v26 = 0, !result))
  {
LABEL_27:
    if (!v12)
      goto LABEL_28;
LABEL_10:
    v14 = *a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v14);
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_27;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (v12)
    goto LABEL_10;
LABEL_28:
  if (v13)
  {
    v17 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*v17 + a4);
    result = (WTF::StringImpl *)a4(v17, &v21, &v22, &v23);
    if (v25)
    {
      if (v24)
      {
        v19 = v23;
        v23 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = v21;
      v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::AuxiliaryProcess::PreferencesDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>)>(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int i;
  unsigned int v26;
  WTF::StringImpl **v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const WTF::StringImpl *v51;
  const WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  _QWORD *v67;
  void (*v68)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **);
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v85;
  char v86;
  char v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  char v90;
  WTF::StringImpl *v91;

  v7 = (a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = *a2;
  v9 = a2[1];
  v10 = v7 - v8;
  if (v9 < v10 || v9 - v10 <= 3)
  {
    v76 = 0;
    v77 = 0;
    *a2 = 0;
    a2[1] = 0;
    v78 = a2[3];
    if (v78)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v77 = *a2;
        v76 = a2[1];
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
    }
    goto LABEL_147;
  }
  v12 = (int *)(v8 + v10);
  v13 = v8 + v10 + 4;
  a2[2] = v13;
  if (!v8)
  {
    v76 = v9;
    v77 = 0;
LABEL_147:
    *a2 = 0;
    a2[1] = 0;
    v79 = a2[3];
    if (v79 && v76)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v77, v76);
    goto LABEL_64;
  }
  v14 = *v12;
  v91 = 0;
  if (!v14)
  {
    v5 = 0;
    goto LABEL_67;
  }
  v15 = 0;
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v85);
    if (!v86)
      break;
    IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v88);
    if (!v90)
    {
LABEL_13:
      v5 = 0;
      goto LABEL_14;
    }
    if (!v86)
    {
LABEL_133:
      __break(1u);
LABEL_134:
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v16);
LABEL_135:
      if (v91)
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable((uint64_t)v91, v65);
      goto LABEL_137;
    }
    if ((unint64_t)v85 + 1 < 2)
      goto LABEL_13;
    v19 = (uint64_t)v91;
    if (v91
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v91, 0), (v19 = (uint64_t)v91) != 0))
    {
      v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = *((_DWORD *)v85 + 4);
    if (v21 >= 0x100)
      v22 = v21 >> 8;
    else
      v22 = WTF::StringImpl::hashSlowCase(v85);
    v24 = 0;
    for (i = 1; ; ++i)
    {
      v26 = v22 & v20;
      v27 = (WTF::StringImpl **)(v19 + 24 * (v22 & v20));
      v28 = *v27;
      if (*v27 == (WTF::StringImpl *)-1)
      {
        v24 = v19 + 24 * v26;
        goto LABEL_41;
      }
      if (!v28)
        break;
      if ((WTF::equal(v28, v85, v17) & 1) != 0)
        goto LABEL_13;
LABEL_41:
      v22 = i + v26;
    }
    if (v24)
    {
      *(_QWORD *)v24 = 0;
      *(_BYTE *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      --*((_DWORD *)v91 - 4);
      v27 = (WTF::StringImpl **)v24;
    }
    v29 = v85;
    v85 = 0;
    v30 = *v27;
    *v27 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v16);
      else
        *(_DWORD *)v30 -= 2;
    }
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(v27 + 1), (uint64_t)&v88);
    if (v91)
      v31 = *((_DWORD *)v91 - 3) + 1;
    else
      v31 = 1;
    *((_DWORD *)v91 - 3) = v31;
    if (v91)
      v32 = *((_DWORD *)v91 - 3);
    else
      v32 = 0;
    v33 = (*((_DWORD *)v91 - 4) + v32);
    v34 = *((unsigned int *)v91 - 1);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
LABEL_56:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v91, (uint64_t)v27);
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_56;
    }
    v5 = 1;
LABEL_14:
    if (v90)
    {
      if ((_BYTE)v89)
      {
        v18 = v88;
        v88 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
    }
    if (!v86 || (v23 = v85, v85 = 0, !v23))
    {
LABEL_29:
      if ((v5 & 1) == 0)
        break;
      goto LABEL_30;
    }
    if (*(_DWORD *)v23 != 2)
    {
      *(_DWORD *)v23 -= 2;
      goto LABEL_29;
    }
    WTF::StringImpl::destroy(v23, v16);
    if ((v5 & 1) == 0)
      break;
LABEL_30:
    if (++v15 == v14)
    {
      v5 = (uint64_t)v91;
      v9 = a2[1];
      v13 = a2[2];
      v8 = *a2;
LABEL_67:
      v38 = ((v13 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v8;
      if (v9 < v38 || v9 - v38 <= 3)
      {
        v41 = 0;
        v42 = 0;
        *a2 = 0;
        a2[1] = 0;
        v80 = a2[3];
        if (v80)
        {
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
            v42 = *a2;
            v41 = a2[1];
          }
          else
          {
            v41 = 0;
            v42 = 0;
          }
        }
        goto LABEL_151;
      }
      v40 = (int *)(v8 + v38);
      a2[2] = v8 + v38 + 4;
      v41 = v9;
      v42 = v8;
      if (!v8)
      {
LABEL_151:
        *a2 = 0;
        a2[1] = 0;
        v81 = a2[3];
        if (v81 && v41)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v42, v41);
LABEL_137:
        v71 = (WTF::StringImpl *)*a2;
        v72 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v73 = a2[3];
        if (v73 && v72)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v73 + 16))(v73, v71);
        if (v5)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v71);
        goto LABEL_140;
      }
      v43 = *v40;
      v91 = 0;
      if (!v43)
      {
        v66 = 0;
LABEL_126:
        v67 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          v68 = *(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **))(*v67 + a4);
        else
          v68 = a4;
        v88 = (WTF::StringImpl *)v5;
        v85 = v66;
        v68(v67, &v88, &v85);
        if (v85)
          WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable((uint64_t)v85, v69);
        result = v88;
        if (v88)
          return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v88, v69);
        return result;
      }
      v44 = 0;
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a2, (uint64_t)&v88);
        if (!v90)
          goto LABEL_134;
        IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v85);
        if (v87)
        {
          if (!v90)
            goto LABEL_133;
          if (v88 != (WTF::StringImpl *)-1
            && (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(&v88, (uint64_t)v16, v45) & 1) == 0)
          {
            break;
          }
        }
LABEL_117:
        v63 = 0;
LABEL_112:
        if (v87)
        {
          if (v86)
          {
            v64 = v85;
            v85 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, v16);
              else
                *(_DWORD *)v64 -= 2;
            }
          }
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v16);
        if ((v63 & 1) == 0)
          goto LABEL_135;
        if (++v44 == v43)
        {
          v66 = v91;
          goto LABEL_126;
        }
      }
      if (!v90 || !v87)
        goto LABEL_133;
      v46 = (uint64_t)v91;
      if (v91
        || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand((uint64_t *)&v91, 0), (v46 = (uint64_t)v91) != 0))
      {
        v47 = *(_DWORD *)(v46 - 8);
      }
      else
      {
        v47 = 0;
      }
      v48 = WTF::PairHash<WTF::String,WTF::String>::hash(&v88) & v47;
      v49 = v46 + 32 * v48;
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v49, v50, v51) & 1) == 0)
      {
        v53 = 0;
        v54 = 1;
        do
        {
          if (*(_QWORD *)v49 == -1)
          {
            v53 = v49;
          }
          else if ((WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v49, &v88, v52) & 1) != 0)
          {
            goto LABEL_117;
          }
          v48 = ((_DWORD)v48 + v54) & v47;
          v49 = v46 + 32 * v48;
          ++v54;
        }
        while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v49, (uint64_t)v16, v52));
        if (v53)
        {
          *(_BYTE *)(v53 + 24) = 0;
          *(_QWORD *)v53 = 0;
          *(_QWORD *)(v53 + 8) = 0;
          *(_BYTE *)(v53 + 16) = 0;
          --*((_DWORD *)v91 - 4);
          v49 = v53;
        }
      }
      v55 = v88;
      v88 = 0;
      v56 = *(WTF::StringImpl **)v49;
      *(_QWORD *)v49 = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v16);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = v89;
      v89 = 0;
      v58 = *(WTF::StringImpl **)(v49 + 8);
      *(_QWORD *)(v49 + 8) = v57;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v16);
        else
          *(_DWORD *)v58 -= 2;
      }
      std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(v49 + 16, (uint64_t)&v85);
      if (v91)
        v59 = *((_DWORD *)v91 - 3) + 1;
      else
        v59 = 1;
      *((_DWORD *)v91 - 3) = v59;
      if (v91)
        v60 = *((_DWORD *)v91 - 3);
      else
        v60 = 0;
      v61 = (*((_DWORD *)v91 - 4) + v60);
      v62 = *((unsigned int *)v91 - 1);
      if (v62 > 0x400)
      {
        if (v62 > 2 * v61)
          goto LABEL_111;
      }
      else if (3 * v62 > 4 * v61)
      {
LABEL_111:
        v63 = 1;
        goto LABEL_112;
      }
      WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand((uint64_t *)&v91, v49);
      goto LABEL_111;
    }
  }
  if (v91)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v91, v16);
LABEL_64:
  v35 = *a2;
  v36 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v37 = a2[3];
  if (v37 && v36)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
LABEL_140:
  v74 = *a2;
  v75 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v75)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v74);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v15;
        v10 = *v15;
        v9 = v15[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        v2 = *v14;
        v1 = v14[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    v6 = v5 != 0;
    v7 = 256;
    return v7 | v6;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v1)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v2);
  v6 = 0;
  v7 = 0;
  return v7 | v6;
}

unsigned __int8 ***WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(unsigned __int8 ***a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  int v6;

  v4 = *a2;
  if (__ldaxr(*a2))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  *a1 = a2;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34ACA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

unsigned __int8 ***WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(unsigned __int8 ***a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v12 = *((_QWORD *)v3 + 2);
    v8 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v7 = v12 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v6)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    return a1;
LABEL_14:
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = off_1E34ACA48;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_BYTE *)(v10 + 24) = v7;
  v13 = v10;
  WTF::ensureOnMainRunLoop();
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = *v2;
  if (__ldaxr(*v2))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v3);
    goto LABEL_5;
  }
  if (__stxr(1u, v3))
    goto LABEL_4;
LABEL_5:
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 - 1;
  *((_QWORD *)v3 + 1) = v5 - 1;
  if (v5 == 1)
  {
    v12 = *((_QWORD *)v3 + 2);
    v7 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    v8 = v12 == 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
  {
    v11 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v11 = off_1E34ACA48;
    *(_QWORD *)(v11 + 8) = v3;
    *(_QWORD *)(v11 + 16) = v7;
    *(_BYTE *)(v11 + 24) = v8;
    v13 = v11;
    WTF::ensureOnMainRunLoop();
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return a1;
}

IPC::Connection *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)const::{lambda(void)#1}::operator()(a1 + 8, a2);
}

IPC::Connection *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  IPC::Connection *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)a1;
  result = *(IPC::Connection **)(a1 + 8);
  if (result)
  {
    IPC::Connection::~Connection(result);
    result = (IPC::Connection *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 16))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (IPC::Connection *)WTF::fastFree(v4, a2);
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = IPC::Decoder::decode<WTF::String>(result, &v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v6;
    v13 = v7;
    do
    {
      if (*(_QWORD *)v12 != -1)
      {
        if (*(_QWORD *)v12)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v12);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v15 + 8, v16);
          v18 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v17);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v15 = v19;
          *(_BYTE *)(v15 + 8) = 0;
          *(_BYTE *)(v15 + 16) = 0;
          if (*(_BYTE *)(v12 + 16))
          {
            v20 = *(_QWORD *)(v12 + 8);
            *(_QWORD *)(v12 + 8) = 0;
            *(_QWORD *)(v15 + 8) = v20;
            *(_BYTE *)(v15 + 16) = 1;
          }
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12 + 8, v17);
          v21 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v12 == a3)
            v11 = v15;
        }
        else
        {
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12 + 8, v10);
          v14 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      v12 += 24;
      --v13;
    }
    while (v13);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_BYTE *)(v2 + 32);
    do
    {
      *((_QWORD *)v5 - 2) = 0;
      *(v5 - 8) = 0;
      *v5 = 0;
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100)
    v5 = v4 >> 8;
  else
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + (v5 & v3);
  }
  while (*(_QWORD *)(v2 + 24 * v7));
  return v2 + 24 * v7;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v12 = 0;
  if (v7)
  {
    v13 = v6;
    v14 = v7;
    do
    {
      if (*(_QWORD *)v13 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v13, (uint64_t)v10, v11))
        {
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13 + 16, v15);
          v16 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
          v21 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v10);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        else
        {
          v17 = WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v17 + 16, v18);
          v20 = *(WTF::StringImpl **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          v22 = *(WTF::StringImpl **)v17;
          *(_QWORD *)v17 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v19);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v17 = v23;
          v24 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v17 + 8) = v24;
          *(_BYTE *)(v17 + 16) = 0;
          *(_BYTE *)(v17 + 24) = 0;
          if (*(_BYTE *)(v13 + 24))
          {
            v25 = *(_QWORD *)(v13 + 16);
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)(v17 + 16) = v25;
            *(_BYTE *)(v17 + 24) = 1;
          }
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13 + 16, v19);
          v26 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v10);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v13 == a3)
            v12 = v17;
        }
      }
      v13 += 32;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE *v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = (_BYTE *)(v3 + 40);
    do
    {
      *v5 = 0;
      *((_QWORD *)v5 - 3) = 0;
      *((_QWORD *)v5 - 2) = 0;
      *(v5 - 8) = 0;
      v5 += 32;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::PairHash<WTF::String,WTF::String>::hash(a2);
  v7 = 0;
  do
  {
    v8 = v4 & v3;
    v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v2 + 32 * v8), v5, v6);
    v4 = ++v7 + v8;
  }
  while (!v9);
  return v2 + 32 * v8;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
      {
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = *(WTF::StringImpl **)(v4 - 16);
        *(_QWORD *)(v4 - 16) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::taskInfo@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  ipc_space_t *v6;
  mach_port_name_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_msg_type_number_t v14;
  integer_t v15[36];
  uint64_t v16;
  mach_msg_type_number_t v17;
  WTF::MonotonicTime *v18[4];
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];
  mach_port_name_t tn;

  v3 = *(_QWORD *)(this + 136);
  if (v3
    && (v4 = *(_DWORD *)(v3 + 108)) != 0
    && (v5 = this,
        tn = 0,
        v6 = (ipc_space_t *)MEMORY[0x1E0C83DA0],
        this = task_name_for_pid(*MEMORY[0x1E0C83DA0], v4, &tn),
        !(_DWORD)this))
  {
    v7 = tn;
    task_info_outCnt = 12;
    if (task_info(tn, 0x14u, task_info_out, &task_info_outCnt) || (v17 = 8, task_info(tn, 1u, (task_info_t)v18, &v17)))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
    }
    else
    {
      v14 = 38;
      if (task_info(tn, 0x16u, v15, &v14))
      {
        v8 = 0;
        *(_BYTE *)a2 = 0;
      }
      else
      {
        if (*(unsigned __int8 *)(v5 + 384) | task_info_out[11])
          v9 = *(_BYTE *)(v5 + 384);
        else
          v9 = 1;
        WTF::MonotonicTime::fromMachAbsoluteTime(v18[0]);
        v11 = v10;
        WTF::MonotonicTime::fromMachAbsoluteTime(v18[1]);
        v12 = v16;
        *(_DWORD *)a2 = v4;
        *(_BYTE *)(a2 + 4) = v9;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v13;
        *(_QWORD *)(a2 + 24) = v12;
        v8 = 1;
      }
      *(_BYTE *)(a2 + 32) = v8;
    }
    return mach_port_deallocate(*v6, v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return this;
}

void sub_196DE0CC0(_Unwind_Exception *a1)
{
  mach_port_name_t v1;
  ipc_space_t *v2;

  mach_port_deallocate(*v2, v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::AuxiliaryProcessProxy::notifyPreferencesChanged(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[3];

  if (*(_BYTE *)(a1 + 170))
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = (uint64_t *)(a1 + 408);
      *(_DWORD *)v4 += 2;
      v10 = v4;
      v6 = *a3;
      if (*a3)
        *(_DWORD *)v6 += 2;
      v11 = v6;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WTF::String>,std::optional<WTF::String> const&>(v5, &v10, a4, (uint64_t)v12);
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = v10;
      v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      return (WTF::StringImpl *)WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::optional<WTF::String> const&>((uint64_t *)(a1 + 400), a3, a4, (uint64_t)v12);
    }
  }
  else
  {
    v12[0] = a2;
    v12[1] = a3;
    v12[2] = a4;
    return (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferenceDidUpdate>(a1, (uint64_t)v12, 0, 0);
  }
  return result;
}

void sub_196DE0DD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferenceDidUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 4;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::String> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::String> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_196DE0F08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_196DE0F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_196DE1010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS7_I19BENetworkingProcessEENS7_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9RetainPtrI19BEWebContentProcessEENS9_I19BENetworkingProcessEENS9_I18BERenderingProcessEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSB_SD_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::optional<WTF::String> const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl **result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 24 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = v8 + 24 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      *(_BYTE *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (WTF::StringImpl **)v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    result = std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>(v15 + 1, a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        v15 = result;
        v22 = *a1;
        if (*a1)
          LODWORD(v25) = *(_DWORD *)(v22 - 4);
        else
          LODWORD(v25) = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v22 + 24 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 4);
  else
    v21 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v20 + 24 * v21;
  *(_BYTE *)(a4 + 16) = 0;
  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(v8 + 24 * v14 + 8), a3);
}

WTF::StringImpl **std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((_BYTE *)a1 + 8))
      return WTF::String::operator=(a1, a2);
  }
  else if (*((_BYTE *)a1 + 8))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    v2 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v2 += 2;
    *a1 = v2;
    *((_BYTE *)a1 + 8) = 1;
  }
  return a1;
}

WTF::StringImpl **WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WTF::String>,std::optional<WTF::String> const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  WTF **v16;
  int v17;
  WTF::StringImpl **result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::PairHash<WTF::String,WTF::String>::hash(a2) & v9;
  v11 = (WTF **)(v8 + 32 * v10);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v11, v12, v13) & 1) == 0)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (*v11 == (WTF *)-1)
      {
        v16 = v11;
      }
      else if (WTF::PairHash<WTF::String,WTF::String>::equal(v11, a2, v15))
      {
        v25 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        *(_QWORD *)a4 = v11;
        *(_QWORD *)(a4 + 8) = v25 + 32 * v26;
        *(_BYTE *)(a4 + 16) = 0;
        return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(v8 + 32 * v10 + 16), a3);
      }
      v10 = ((_DWORD)v10 + v17) & v9;
      v11 = (WTF **)(v8 + 32 * v10);
      ++v17;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v11, v14, v15));
    if (v16)
    {
      *((_BYTE *)v16 + 24) = 0;
      *v16 = 0;
      v16[1] = 0;
      *((_BYTE *)v16 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = v16;
    }
  }
  WTF::String::operator=(v11, (WTF::StringImpl *)a2);
  WTF::String::operator=(v11 + 1, (WTF::StringImpl *)(a2 + 1));
  result = std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>(v11 + 2, a3);
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_21:
      result = (WTF::StringImpl **)WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(a1, (uint64_t)v11);
      v11 = result;
      v21 = *a1;
      if (*a1)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_21;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v21 + 32 * v24;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::String> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::String> const&>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, *(_QWORD *)(a2 + 16));
}

void IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

uint64_t WebKit::BackgroundFetchState::toDictionary(WebKit::BackgroundFetchState *this)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v13[11];
  _QWORD v14[12];

  v14[11] = *MEMORY[0x1E0C80C00];
  v13[0] = CFSTR("TopOrigin");
  WebCore::SecurityOriginData::toString(this);
  if (v12)
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E351F1B8;
  v14[0] = v2;
  v13[1] = CFSTR("Scope");
  v14[1] = WTF::URL::operator NSURL *();
  v13[2] = CFSTR("WebIdentifier");
  if (*((_QWORD *)this + 9))
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E351F1B8;
  v14[2] = v3;
  v13[3] = CFSTR("Title");
  if (*((_QWORD *)this + 12))
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  v14[3] = v4;
  v13[4] = CFSTR("DownloadTotal");
  v14[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)this + 14));
  v13[5] = CFSTR("Downloaded");
  v14[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)this + 15));
  v13[6] = CFSTR("UploadTotal");
  v14[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)this + 16));
  v13[7] = CFSTR("Uploaded");
  v14[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)this + 17));
  v13[8] = CFSTR("Result");
  WebCore::convertEnumerationToString();
  if (v11)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v14[8] = v5;
  v13[9] = CFSTR("FailureReason");
  WebCore::convertEnumerationToString();
  if (v10)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v14[9] = v6;
  v13[10] = CFSTR("IsPaused");
  v14[10] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)this + 146));
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 11);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v8;
}

void sub_196DE1964(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::filterObjects<NSArray>(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, void *, void *);
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  unsigned int (**v11)(id, void *, void *);

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_msgSend(v3, "count");
    if (v5)
    {
      if (v5 == 1)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4[2](v4, &unk_1E356FC70, v6))
          v7 = (void *)objc_msgSend(v3, "copy");
        else
          v7 = (void *)MEMORY[0x1E0C9AA60];
      }
      else
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = ___ZN6WebKit13filterObjectsI7NSArrayEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke;
        v10[3] = &unk_1E34ACA98;
        v11 = v4;
        objc_msgSend(v3, "indexesOfObjectsPassingTest:", v10);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "objectsAtIndexes:", v8);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        v6 = v11;
      }

    }
    else
    {
      v7 = (void *)MEMORY[0x1E0C9AA60];
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_196DE1B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit13filterObjectsI7NSArrayEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (*(uint64_t (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);

  return v8;
}

void sub_196DE1BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::filterObjects<NSDictionary>(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *, void *);
  void *v12;
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (objc_msgSend(v3, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = MEMORY[0x1E0C809B0];
      v10 = 3221225472;
      v11 = ___ZN6WebKit13filterObjectsI12NSDictionaryEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke;
      v12 = &unk_1E34ACAC0;
      v14 = v4;
      v6 = v5;
      v13 = v6;
      objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &v9);
      v7 = (void *)objc_msgSend(v6, "copy", v9, v10, v11, v12);

    }
    else
    {
      v7 = (void *)MEMORY[0x1E0C9AA70];
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_196DE1CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit13filterObjectsI12NSDictionaryEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_196DE1D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WebKit::mapObjects<NSArray>(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, void *, void *);
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, uint64_t);
  void *v15;
  id v16;
  void (**v17)(id, void *, void *);
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_msgSend(v3, "count");
    if (v5)
    {
      if (v5 == 1)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v4[2](v4, &unk_1E356FC70, v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          v18[0] = v7;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v8 = (void *)MEMORY[0x1E0C9AA60];
        }

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = MEMORY[0x1E0C809B0];
        v13 = 3221225472;
        v14 = ___ZN6WebKit10mapObjectsI7NSArrayEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke;
        v15 = &unk_1E34ACAE8;
        v17 = v4;
        v10 = v9;
        v16 = v10;
        objc_msgSend(v3, "enumerateObjectsUsingBlock:", &v12);
        v8 = (void *)objc_msgSend(v10, "copy", v12, v13, v14, v15);

      }
    }
    else
    {
      v8 = (void *)MEMORY[0x1E0C9AA60];
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_196DE1F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit10mapObjectsI7NSArrayEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v6, v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);

}

void sub_196DE202C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WebKit::mapObjects<NSDictionary>(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *);
  void *v12;
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (objc_msgSend(v3, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = MEMORY[0x1E0C809B0];
      v10 = 3221225472;
      v11 = ___ZN6WebKit10mapObjectsI12NSDictionaryEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke;
      v12 = &unk_1E34ACAC0;
      v14 = v4;
      v6 = v5;
      v13 = v6;
      objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &v9);
      v7 = (void *)objc_msgSend(v6, "copy", v9, v10, v11, v12);

    }
    else
    {
      v7 = (void *)MEMORY[0x1E0C9AA70];
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_196DE2154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZN6WebKit10mapObjectsI12NSDictionaryEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v3, v4);

}

void sub_196DE21F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSString>(void *a1, uint64_t a2, int a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSString>(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!a3 || (v6 = (void *)objc_msgSend(v5, "length")) != 0)
    v6 = v5;
  v7 = v6;

  return v7;
}

void sub_196DE2290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSArray>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v12[5];

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3 && !objc_msgSend(v7, "count"))
    v8 = 0;
  else
    v8 = v7;
  v9 = v8;

  if (a4 && v9)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___ZN6WebKit12objectForKeyI7NSArrayEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke;
    v12[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
    v12[4] = a4;
    WebKit::filterObjects<NSArray>(v9, v12);
    v10 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v10;
  }
  return v9;
}

void sub_196DE2394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12objectForKeyI7NSArrayEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id WebKit::objectForKey<NSDictionary>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v12[5];

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  WTF::dynamic_objc_cast<NSDictionary>(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3 && !objc_msgSend(v7, "count"))
    v8 = 0;
  else
    v8 = v7;
  v9 = v8;

  if (a4 && v9)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___ZN6WebKit12objectForKeyI12NSDictionaryEEPT_PS1_P11objc_objectbP10objc_class_block_invoke;
    v12[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
    v12[4] = a4;
    WebKit::filterObjects<NSDictionary>(v9, v12);
    v10 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v10;
  }
  return v9;
}

void sub_196DE24B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12objectForKeyI12NSDictionaryEEPT_PS1_P11objc_objectbP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

uint64_t WebKit::isValidJSONObject(void *a1, char a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  if (!v3)
    goto LABEL_5;
  if ((a2 & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v4 = 1;
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    goto LABEL_10;
  }
LABEL_4:
  v4 = objc_msgSend(MEMORY[0x1E0CB36D8], "isValidJSONObject:", v3);
LABEL_10:

  return v4;
}

void sub_196DE25BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::parseJSON(void *a1, char a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a1;
  if (objc_msgSend(v5, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v5, 4 * (a2 & 1), a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a2 & 1) == 0)
    {
      objc_opt_class();
      WTF::dynamic_objc_cast<NSDictionary>(v6);
      v7 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v7;
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  if (objc_msgSend(v5, "length"))
  {
    objc_msgSend(v5, "dataUsingEncoding:", 4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::parseJSON(v6, a2, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_196DE2664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DE26F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::parseJSON(uint64_t a1, char a2, uint64_t a3)
{
  WebKit::parseJSON(*(void **)(a1 + 8), a2, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

id WebKit::encodeJSONString(void *a1, char a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = a1;
  objc_opt_class();
  WTF::dynamic_objc_cast<JSValue>(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    if ((a2 & 1) != 0 || (objc_msgSend(v6, "_isDictionary") & 1) != 0)
    {
      objc_msgSend(v7, "_toJSONString");
      a3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a3 = 0;
    }

  }
  else
  {
    WebKit::encodeJSONData(v5, a2, (uint64_t)a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      a3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v8, 4);

    if (!v8)
      a3 = 0;
  }

  return a3;
}

void sub_196DE2808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<JSValue>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_196DE2874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::encodeJSONData(void *a1, char a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a1;
  if (!v5)
    goto LABEL_9;
  objc_opt_class();
  WTF::dynamic_objc_cast<JSValue>(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    if ((a2 & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v5, 4 * (a2 & 1), a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
LABEL_9:
    v9 = 0;
    goto LABEL_12;
  }
  if ((a2 & 1) != 0 || (objc_msgSend(v6, "_isDictionary") & 1) != 0)
  {
    objc_msgSend(v7, "_toJSONString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dataUsingEncoding:", 4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

LABEL_12:
  return v9;
}

void sub_196DE2970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::dictionaryWithLowercaseKeys(WebKit *this, NSDictionary *a2)
{
  WebKit *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = this;
  if (-[WebKit count](v2, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", -[WebKit count](v2, "count"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[WebKit allKeys](v2, "allKeys", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            -[WebKit objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "lowercaseString");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, v10);

          }
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

    v11 = (void *)objc_msgSend(v3, "copy");
  }
  else
  {
    v11 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v11;
}

void sub_196DE2B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::dictionaryWithKeys(WebKit *this, NSDictionary *a2, NSArray *a3)
{
  WebKit *v4;
  NSDictionary *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  WebKit *v11;
  id v12;

  v4 = this;
  v5 = a2;
  if (-[WebKit count](v4, "count") && -[NSDictionary count](v5, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZN6WebKit18dictionaryWithKeysEP12NSDictionaryP7NSArray_block_invoke;
    v10[3] = &unk_1E34ACB30;
    v11 = v4;
    v12 = v6;
    v7 = v6;
    WebKit::filterObjects<NSDictionary>(v11, v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v8;
}

void sub_196DE2C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit18dictionaryWithKeysEP12NSDictionaryP7NSArray_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v5 = objc_msgSend(*(id *)(a1 + 40), "containsObject:", v3);
  else
    v5 = 0;

  return v5;
}

void sub_196DE2D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WebKit *WebKit::mergeDictionaries(WebKit *this, NSDictionary *a2, NSDictionary *a3)
{
  WebKit *v4;
  NSDictionary *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  WebKit *v15;
  NSDictionary *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = this;
  v5 = a2;
  if (-[NSDictionary count](v5, "count"))
  {
    if (-[WebKit count](v4, "count"))
    {
      v6 = (void *)-[WebKit mutableCopy](v4, "mutableCopy");
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      -[NSDictionary allKeys](v5, "allKeys", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v19 != v9)
              objc_enumerationMutation(v7);
            v11 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i);
            -[WebKit objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = v12 == 0;

            if (v13)
            {
              -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v11);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "setObject:forKeyedSubscript:", v14, v11);

            }
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v8);
      }

      v15 = v4;
      v16 = v5;
      v4 = (WebKit *)v6;
    }
    else
    {
      v16 = 0;
      v15 = v4;
      v4 = (WebKit *)v5;
    }
  }
  else
  {
    v15 = 0;
    v16 = v5;
  }

  return v4;
}

void sub_196DE2EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

WebKit *WebKit::mergeDictionariesAndSetValues(WebKit *this, NSDictionary *a2, NSDictionary *a3)
{
  WebKit *v4;
  NSDictionary *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSDictionary *v14;
  WebKit *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = this;
  v5 = a2;
  if (-[NSDictionary count](v5, "count"))
  {
    if (-[WebKit count](v4, "count"))
    {
      v6 = (void *)-[WebKit mutableCopy](v4, "mutableCopy");
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      -[NSDictionary allKeys](v5, "allKeys", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v18;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v18 != v9)
              objc_enumerationMutation(v7);
            v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
            -[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, v11);

          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v8);
      }

      v13 = objc_msgSend(v6, "copy");
      v14 = v5;
      v15 = v4;
      v4 = (WebKit *)v13;
    }
    else
    {
      v14 = 0;
      v15 = v4;
      v4 = (WebKit *)v5;
    }
  }
  else
  {
    v15 = 0;
    v14 = v5;
  }

  return v4;
}

void sub_196DE30CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WebKit::privacyPreservingDescription(WebKit *this, NSError *a2)
{
  WebKit *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;

  v2 = this;
  -[WebKit userInfo](v2, "userInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("privacyPreservingDescription"), 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    goto LABEL_2;
  -[WebKit domain](v2, "domain");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "length")
    && (objc_msgSend(MEMORY[0x1E0CB35C8], "userInfoValueProviderForDomain:", v8),
        v9 = objc_claimAutoreleasedReturnValue(),
        (v10 = (void *)v9) != 0))
  {
    (*(void (**)(uint64_t, WebKit *, const __CFString *))(v9 + 16))(v9, v2, CFSTR("privacyPreservingDescription"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
LABEL_2:
      v5 = (void *)MEMORY[0x1E0CB3940];
      -[WebKit domain](v2, "domain");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "stringWithFormat:", CFSTR("Error Domain=%@ Code=%ld \"%@\""), v6, -[WebKit code](v2, "code"), v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
  }
  else
  {

  }
  v11 = (void *)MEMORY[0x1E0CB35C8];
  -[WebKit domain](v2, "domain");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = -[WebKit code](v2, "code");
  if (v12)
    v14 = (const __CFString *)v12;
  else
    v14 = &stru_1E351F1B8;
  objc_msgSend(v11, "errorWithDomain:code:userInfo:", v14, v13, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "description");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)v12;
LABEL_12:

  return v7;
}

void sub_196DE3294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

WebKit *WebKit::ensureDirectoryExists(WebKit *this, NSURL *a2)
{
  WebKit *v2;
  void *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  char AllDirectories;
  WTF::StringImpl *v7;
  NSObject *v8;
  uint8_t v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = this;
  -[WebKit path](v2, "path");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](v10, v3);
  AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v10, v4);
  v7 = *(WTF::StringImpl **)v10;
  *(_QWORD *)v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }

  if ((AllDirectories & 1) == 0)
  {
    v8 = qword_1ECE710C8;
    if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 138477827;
      *(_QWORD *)&v10[4] = v2;
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Failed to create directory: %{private}@", v10, 0xCu);
    }

    v2 = 0;
  }
  return v2;
}

void sub_196DE3400(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  void *v9;
  void *v10;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

WebKit *WebKit::escapeCharactersInString(WebKit *this, NSString *a2, NSString *a3)
{
  WebKit *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = this;
  v5 = a2;
  if (-[WebKit length](v4, "length") && -[NSString length](v5, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[WebKit rangeOfCharacterFromSet:](v4, "rangeOfCharacterFromSet:", v6);
    v9 = v8;
    if (v8)
    {
      v10 = v7;
      v11 = (void *)-[WebKit mutableCopy](v4, "mutableCopy");
      do
      {
        objc_msgSend(v11, "insertString:atIndex:", CFSTR("\\"), v10);
        v12 = v10 + v9;
        if (v12 + 1 >= (unint64_t)objc_msgSend(v11, "length"))
          break;
        v10 = objc_msgSend(v11, "rangeOfCharacterFromSet:options:range:", v6, 0, v12 + 1, objc_msgSend(v11, "length") + ~v12);
        v9 = v13;
      }
      while (v13);

      v4 = (WebKit *)v11;
    }

  }
  return v4;
}

void sub_196DE355C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WebKit::callAfterRandomDelay(uint64_t *a1)
{
  uint32_t v2;
  double v3;
  double v4;
  int64_t v5;
  dispatch_time_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *aBlock;
  uint64_t v11;

  v2 = arc4random();
  v3 = ((double)v2 / 4294967300.0 * 400.0 / 1000.0 + 0.1) * 1000.0 * 1000.0 * 1000.0;
  v4 = -9.22337204e18;
  if (v3 > -9.22337204e18)
    v4 = ((double)v2 / 4294967300.0 * 400.0 / 1000.0 + 0.1) * 1000.0 * 1000.0 * 1000.0;
  if (v3 >= 9.22337204e18)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = (uint64_t)v4;
  v6 = dispatch_time(0, v5);
  v7 = *a1;
  *a1 = 0;
  v11 = v7;
  WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(&v11, &aBlock);
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = _Block_copy(aBlock);
  dispatch_after(v6, MEMORY[0x1E0C80D38], v9);

}

void sub_196DE368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

id WebKit::toAPI(WebKit *this, const WTF::WallTime *a2)
{
  if (fabs(*(double *)this) == INFINITY)
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  else
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:");
  return (id)objc_claimAutoreleasedReturnValue();
}

double WebKit::toImpl(WebKit *this, NSDate *a2)
{
  WebKit *v2;
  void *v3;
  char v4;
  uint64_t v5;
  double v6;
  double v7;

  v2 = this;
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[WebKit isEqualToDate:](v2, "isEqualToDate:", v3);

    if ((v4 & 1) == 0)
    {
      -[WebKit timeIntervalSince1970](v2, "timeIntervalSince1970");
      v6 = v7;
      goto LABEL_7;
    }
    *(double *)&v5 = INFINITY;
  }
  else
  {
    *(double *)&v5 = NAN;
  }
  v6 = *(double *)&v5;
LABEL_7:

  return v6;
}

void sub_196DE378C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WebKit::toAPI(uint64_t *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  WTF **v5;
  WTF **v6;
  WTF **v7;
  WTF **v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  void *v13;

  v2 = objc_alloc(MEMORY[0x1E0C99E20]);
  if (*a1)
    v3 = *(unsigned int *)(*a1 - 12);
  else
    v3 = 0;
  v4 = (void *)objc_msgSend(v2, "initWithCapacity:", v3);
  v5 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(a1);
  v6 = v5;
  v8 = v7;
  if (*a1)
    v9 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
  else
    v9 = 0;
  if ((WTF **)v9 != v5)
  {
    do
    {
      WTF::URL::operator NSURL *();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

      while (1)
      {
        v6 += 5;
        if (v6 == v8)
          break;
        v11 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v6);
        if (*v6 == (WTF *)-1)
          v12 = 1;
        else
          v12 = v11;
        if (v12 != 1)
          goto LABEL_16;
      }
      v6 = v8;
LABEL_16:
      ;
    }
    while (v6 != (WTF **)v9);
  }
  v13 = (void *)objc_msgSend(v4, "copy");

  return v13;
}

void sub_196DE389C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::toAPI(_QWORD **a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;

  v2 = objc_alloc(MEMORY[0x1E0C99E20]);
  if (*a1)
    v3 = *((unsigned int *)*a1 - 3);
  else
    v3 = 0;
  v4 = (void *)objc_msgSend(v2, "initWithCapacity:", v3);
  v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  v6 = v5;
  v8 = v7;
  if (*a1)
    v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v9 = 0;
  if ((_QWORD *)v9 != v5)
  {
    do
    {
      if (*v6)
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E351F1B8;
      objc_msgSend(v4, "addObject:", v10);

      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_14;
      }
      v6 = v8;
LABEL_14:
      ;
    }
    while (v6 != (_QWORD *)v9);
  }
  v11 = (void *)objc_msgSend(v4, "copy");

  return v11;
}

{
  id v2;
  uint64_t v3;
  void *v4;
  id **v5;
  id **v6;
  id **v7;
  id **v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = objc_alloc(MEMORY[0x1E0C99E20]);
  if (*a1)
    v3 = *((unsigned int *)*a1 - 3);
  else
    v3 = 0;
  v4 = (void *)objc_msgSend(v2, "initWithCapacity:", v3);
  v5 = (id **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a1);
  v6 = v5;
  v8 = v7;
  if (*a1)
    v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v9 = 0;
  if ((id **)v9 != v5)
  {
    do
    {
      WebKit::WebExtension::wrapper(*v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v10);

      while (++v6 != v8)
      {
        if ((unint64_t)*v6 + 1 > 1)
          goto LABEL_13;
      }
      v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (id **)v9);
  }
  v11 = (void *)objc_msgSend(v4, "copy");

  return v11;
}

void sub_196DE39C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::toAPIArray(_QWORD **a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;

  v2 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*a1)
    v3 = *((unsigned int *)*a1 - 3);
  else
    v3 = 0;
  v4 = (void *)objc_msgSend(v2, "initWithCapacity:", v3);
  v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  v6 = v5;
  v8 = v7;
  if (*a1)
    v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v9 = 0;
  if ((_QWORD *)v9 != v5)
  {
    do
    {
      if (*v6)
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E351F1B8;
      objc_msgSend(v4, "addObject:", v10);

      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_14;
      }
      v6 = v8;
LABEL_14:
      ;
    }
    while (v6 != (_QWORD *)v9);
  }
  v11 = (void *)objc_msgSend(v4, "copy");

  return v11;
}

void sub_196DE3AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::toImpl(WebKit *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = this;
  *a2 = 0;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, -[WebKit count](v4, "count"));
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v4;
  v6 = -[WebKit countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_opt_class();
        WTF::dynamic_objc_cast<NSString>(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          MEMORY[0x19AEABCC8](&v14, v10);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v14, v11, (uint64_t)v19);
          v13 = v14;
          v14 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
        }

      }
      v6 = -[WebKit countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v6);
  }

}

void sub_196DE3C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  WTF::StringImpl ***v11;
  void *v12;
  WTF::StringImpl *v14;

  if (*v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v11, v14);

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(uint64_t *a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;

  v5 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
  v5[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
  v4 = *a1;
  *a1 = 0;
  v5[4] = v4;
  *a2 = _Block_copy(v5);

}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

WTF **WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(uint64_t *a1)
{
  WTF **v1;

  v1 = (WTF **)*a1;
  if (!*a1)
    return 0;
  if (*((_DWORD *)v1 - 3))
    return WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::makeConstIterator(a1, v1);
  return &v1[5 * *((unsigned int *)v1 - 1)];
}

WTF **WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::makeConstIterator(uint64_t *a1, WTF **a2)
{
  WTF **v2;
  uint64_t v3;
  unsigned int v4;
  WTF **v5;

  v2 = a2;
  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 4);
  else
    v4 = 0;
  v5 = (WTF **)(v3 + 40 * v4);
  if (v5 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v2) & 1) != 0
         || *v2 == (WTF *)-1)
    {
      v2 += 5;
      if (v2 == v5)
        return v5;
    }
  }
  return v2;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(WTF **a1)
{
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  WTF::URL::URL((WTF::URL *)&v7);
  v4 = WTF::equal(*a1, v7, v2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

void sub_196DE3EBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  result = WTF::fastZeroedMalloc((WTF *)(8 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

uint64_t WebKit::CtapAuthenticator::CtapAuthenticator(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  WebKit::FidoAuthenticator::FidoAuthenticator((WebKit::Authenticator *)a1, a2);
  *(_QWORD *)a1 = off_1E34ACB80;
  fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(a1 + 784, a3);
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 929) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 944);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 960);
  return a1;
}

{
  WebKit::CtapAuthenticator::CtapAuthenticator(a1, a2, a3);
  return a1;
}

uint64_t fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(uint64_t a1, _QWORD *a2)
{
  fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(a1, a2);
  return a1;
}

{
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100]((_QWORD *)a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 3);
  *(_QWORD *)(a1 + 40) = a2[5];
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((_BYTE *)(a1 + 48), (uint64_t)(a2 + 6));
  std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((_BYTE *)(a1 + 72), (uint64_t)(a2 + 9));
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((_BYTE *)(a1 + 112), (uint64_t)(a2 + 14));
  *(_QWORD *)(a1 + 136) = a2[17];
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::makeCredential(WebKit::CtapAuthenticator *this)
{
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  fido::AuthenticatorSupportedOptions *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::ThreadSafeRefCountedBase *v33;
  uint64_t v34;
  int v35;
  uint64_t v36[2];
  uint64_t v37;
  WTF::CStringBuffer *v38;
  uint64_t v39;
  WTF::CStringBuffer *v40;
  uint64_t v41;
  WTF::CStringBuffer *v42;
  os_log_type_t v43;
  os_log_t v44;
  _BYTE v45[32];
  uint64_t v46[2];
  int v47;
  uint64_t v48;
  _BYTE v49[32];
  uint64_t v50[3];
  _BYTE v51[32];
  uint64_t v52[2];
  int v53;
  char v54;
  _BYTE v55[19];
  char v56;
  int v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;
  WTF::CStringBuffer *v61;
  uint64_t v62;
  WTF::CStringBuffer *v63;
  os_log_type_t v64;
  os_log_t oslog;
  WebKit::CtapAuthenticator *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  _QWORD *v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t *v101;
  uint8_t v102[48];
  uint8_t buf[40];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v66 = this;
  oslog = (os_log_t)qword_1ECE71AC8;
  v64 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog;
    v3 = v64;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v62, (uint64_t)this);
    WTF::String::utf8();
    v4 = WTF::CString::data(&v63);
    WebKit::FidoAuthenticator::transportForDebugging(&v60, this);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v61);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5);
    _os_log_impl(&dword_196BCC000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v61);
    v71 = &v60;
    v72 = &v60;
    v81 = &v60;
    v82[1] = &v60;
    v82[0] = 0;
    v101 = &v60;
    v100 = v82;
    v91 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v60);
    if (v91)
      WTF::StringImpl::deref(v91, v6);
    WTF::CString::~CString((WTF::CString *)&v63);
    v70 = &v62;
    v73 = &v62;
    v80 = &v62;
    v83[1] = &v62;
    v83[0] = 0;
    v99 = &v62;
    v98 = v83;
    v90 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v62);
    if (v90)
      WTF::StringImpl::deref(v90, v7);
  }
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v59);
  v8 = WebKit::Authenticator::requestData(this);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v8 + 16);
  v58 = v9;
  v10 = (fido::AuthenticatorSupportedOptions *)fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  v57 = fido::AuthenticatorSupportedOptions::userVerificationAvailability(v10);
  v11 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  v56 = std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](v11) & 1;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v55);
  if ((*((_BYTE *)this + 929) & 1) != 0
    || (v12 = fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials((WebKit::CtapAuthenticator *)((char *)this + 784)),
        (std::optional<unsigned int>::operator BOOL[abi:sn180100](v12) & 1) != 0)
    && (v13 = fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials((WebKit::CtapAuthenticator *)((char *)this + 784)),
        (std::optional<unsigned int>::operator BOOL[abi:sn180100](v13) & 1) == 0))
  {
    v14 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v58 + 128);
    v15 = 0;
    if ((v14 & 1) != 0)
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128);
      v17 = *(_BYTE *)(v16 + 4);
      v15 = 1;
      if ((v17 & 1) == 0)
      {
        std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128);
        v54 = 0;
        v15 = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v18 + 2, &v54);
      }
    }
    if (v15)
    {
      v19 = WebKit::Authenticator::observer(this);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 8);
      v53 = 1;
      goto LABEL_31;
    }
    v56 = 1;
  }
  if (v57
    || (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v58 + 128) & 1) != 0
    && (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128),
        *(_BYTE *)(v21 + 5) == 2)
    || !WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)this + 960))
  {
    v22 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v22))
    {
      WebKit::Authenticator::requestData(this);
      std::optional<fido::PinParameters>::optional[abi:sn180100](v45);
      fido::encodeMakeCredentialRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v46);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v46);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v45);
    }
    else
    {
      WebKit::Authenticator::requestData(this);
      v47 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v48, (WebKit::CtapAuthenticator *)((char *)this + 960));
      std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>((uint64_t)v49, (uint64_t)&v47);
      fido::encodeMakeCredentialRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v50);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v50);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v49);
      fido::PinParameters::~PinParameters((fido::PinParameters *)&v47);
    }
  }
  else
  {
    WebKit::Authenticator::requestData(this);
    std::optional<fido::PinParameters>::optional[abi:sn180100](v51);
    fido::encodeMakeCredentialRequestAsCBOR();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v52);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v52);
    std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v51);
  }
  v44 = (os_log_t)qword_1ECE71AC8;
  v43 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v23 = v44;
    v24 = v43;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v41, (uint64_t)this);
    WTF::String::utf8();
    v25 = WTF::CString::data(&v42);
    WebKit::FidoAuthenticator::transportForDebugging(&v39, this);
    WTF::String::utf8();
    v26 = WTF::CString::data(&v40);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v36, (WTF::ASCIILiteral *)v59);
    v35 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v35);
    WTF::base64EncodeToString((uint64_t)&v37, v36[0], v36[1]);
    WTF::String::utf8();
    v27 = WTF::CString::data(&v38);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v102, (uint64_t)this, v25, v26, v27);
    _os_log_impl(&dword_196BCC000, v23, v24, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential: Sending %s", v102, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v38);
    v69 = &v37;
    v74 = &v37;
    v79 = &v37;
    v84[1] = &v37;
    v84[0] = 0;
    v97 = &v37;
    v96 = v84;
    v89 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v37);
    if (v89)
      WTF::StringImpl::deref(v89, v28);
    WTF::CString::~CString((WTF::CString *)&v40);
    v68 = &v39;
    v75 = &v39;
    v78 = &v39;
    v85[1] = &v39;
    v85[0] = 0;
    v95 = &v39;
    v94 = v85;
    v88 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v39);
    if (v88)
      WTF::StringImpl::deref(v88, v29);
    WTF::CString::~CString((WTF::CString *)&v42);
    v67 = &v41;
    v76 = &v41;
    v77 = &v41;
    v86[1] = &v41;
    v86[0] = 0;
    v93 = &v41;
    v92 = v86;
    v87 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v41);
    if (v87)
      WTF::StringImpl::deref(v87, v30);
  }
  v31 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v33, (uint64_t)this);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void>(&v34, (uint64_t *)&v33);
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v31 + 16))(v31, v59, &v34);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v34);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v33);
  v53 = 0;
LABEL_31:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v20);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v59);
}

uint64_t WebKit::CtapAuthenticator::aaguidForDebugging(WebKit::CtapAuthenticator *this, uint64_t a2)
{
  WTF::ASCIILiteral *v2;
  uint64_t v4;
  _BYTE v5[16];
  uint64_t v6;
  WebKit::CtapAuthenticator *v7;

  v7 = this;
  v6 = a2;
  v2 = (WTF::ASCIILiteral *)fido::AuthenticatorGetInfoResponse::aaguid((fido::AuthenticatorGetInfoResponse *)(a2 + 784));
  std::span<unsigned char const,16ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v4, v2);
  WTF::UUID::UUID(v5, v4);
  return WTF::UUID::toString((WTF::UUID *)v5);
}

uint64_t WTF::CString::data(WTF::CStringBuffer **this)
{
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(this))
    return WTF::CStringBuffer::data(*this);
  else
    return 0;
}

double __os_log_helper_16_2_3_8_0_8_32_8_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 134218498;
  *(_DWORD *)a1 = 134218498;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

void WTF::CString::~CString(WTF::CString *this)
{
  WTF::CString::~CString(this);
}

{
  _QWORD v1[2];
  WTF::RefCountedBase *v2;
  _QWORD *v3;
  WTF::CString *v4;

  v1[1] = this;
  v1[0] = 0;
  v4 = this;
  v3 = v1;
  v2 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v2)
    WTF::RefCounted<WTF::CStringBuffer>::deref(v2);
}

uint64_t WebKit::Authenticator::requestData(WebKit::Authenticator *this)
{
  return (uint64_t)this + 32;
}

uint64_t fido::AuthenticatorGetInfoResponse::options(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 96;
}

uint64_t fido::AuthenticatorSupportedOptions::userVerificationAvailability(fido::AuthenticatorSupportedOptions *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 136;
}

uint64_t std::optional<unsigned int>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1;
}

uint64_t WebKit::Authenticator::observer(WebKit::Authenticator *this)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get((uint64_t *)this + 3);
}

_BYTE *std::optional<fido::PinParameters>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<fido::PinParameters>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::PinParameters,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

fido::PinParameters *std::optional<fido::PinParameters>::~optional(fido::PinParameters *a1)
{
  std::optional<fido::PinParameters>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::PinParameters,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  WTF::FastMalloc *v3;
  int v4;
  const void *v5;
  uint64_t v6;
  void *v7;

  v3 = (WTF::FastMalloc *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v5 = (const void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    v7 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v5, v6, v7);
  }
  return a1;
}

uint64_t std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>(uint64_t a1, uint64_t a2)
{
  std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

void fido::PinParameters::~PinParameters(fido::PinParameters *this)
{
  fido::PinParameters::~PinParameters(this);
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::PinParameters *)((char *)this + 8));
}

uint64_t WTF::base64EncodeToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::as_bytes[abi:sn180100]<unsigned char const,18446744073709551615ul>(a2, a3);
  return WTF::base64EncodeToString();
}

uint64_t *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a1, a2);
  return a1;
}

{
  *a1 = std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&std::ranges::__cpo::data, a2);
  a1[1] = std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&std::ranges::__cpo::size, (uint64_t)a2);
  return a1;
}

_DWORD *WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(_DWORD *a1)
{
  WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(a1);
  return a1;
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_8_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)&result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2080;
  *(_QWORD *)(a1 + 34) = a5;
  return result;
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::makeCredential(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(uint64_t *a1)
{
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueMakeCredentialAfterResponseReceived(_BYTE *a1, WTF::ASCIILiteral *a2)
{
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  uint64_t result;
  uint64_t v44;
  _BYTE v45[28];
  char v46;
  char v47;
  char v48;
  BOOL v49;
  _BYTE v50[2];
  _BYTE v51[78];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55[8];
  uint64_t v56;
  _BYTE v57[31];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[8];
  uint64_t v63;
  _BYTE v64[24];
  int v65;
  int v66;
  uint64_t v67[2];
  uint64_t v68;
  WTF::CStringBuffer *v69;
  uint64_t v70;
  WTF::CStringBuffer *v71;
  uint64_t v72;
  WTF::CStringBuffer *v73;
  os_log_type_t v74;
  os_log_t v75;
  _BYTE v76[16];
  WTF::RefCountedBase *v77;
  uint64_t v78;
  WTF::CStringBuffer *v79;
  uint64_t v80;
  WTF::CStringBuffer *v81;
  os_log_type_t v82;
  os_log_t oslog;
  unsigned __int8 ResponseCode;
  WTF::ASCIILiteral *v85;
  _BYTE *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  WTF::RefCountedBase **v92;
  WTF::RefCountedBase **v93;
  WTF::RefCountedBase **v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  _QWORD *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t *v120;
  _QWORD *v121;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t *v124;
  _QWORD v125[4];
  uint64_t v126;
  WTF::RefCountedBase **v127;
  WTF::RefCountedBase **v128;
  uint8_t v129[48];
  uint8_t buf[40];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v86 = a1;
  v85 = a2;
  ResponseCode = fido::getResponseCode();
  oslog = (os_log_t)qword_1ECE71AC8;
  v82 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog;
    v4 = v82;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v80, (uint64_t)a1);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v81);
    WebKit::FidoAuthenticator::transportForDebugging(&v78, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v79);
    v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, (uint64_t)a1, v5, v6, v7);
    _os_log_impl(&dword_196BCC000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueMakeCredentialAfterResponseReceived: Got error code: %hhu from authenticator.", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v79);
    v91 = &v78;
    v95 = &v78;
    v104 = &v78;
    v105[1] = &v78;
    v105[0] = 0;
    v124 = &v78;
    v123 = v105;
    v114 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v78);
    if (v114)
      WTF::StringImpl::deref(v114, v8);
    WTF::CString::~CString((WTF::CString *)&v81);
    v90 = &v80;
    v96 = &v80;
    v103 = &v80;
    v106[1] = &v80;
    v106[0] = 0;
    v122 = &v80;
    v121 = v106;
    v113 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v80);
    if (v113)
      WTF::StringImpl::deref(v113, v9);
  }
  WebKit::CtapAuthenticator::transports((WebKit::CtapAuthenticator *)v76, (uint64_t)a1);
  v10 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v10 + 16);
  fido::readCTAPMakeCredentialResponse();
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v76);
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v77))
  {
    v75 = (os_log_t)qword_1ECE71AC8;
    v74 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = v75;
      v12 = v74;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v72, (uint64_t)a1);
      WTF::String::utf8();
      v13 = WTF::CString::data(&v73);
      WebKit::FidoAuthenticator::transportForDebugging(&v70, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      v14 = WTF::CString::data(&v71);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v67, v85);
      v66 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v66);
      WTF::base64EncodeToString((uint64_t)&v68, v67[0], v67[1]);
      WTF::String::utf8();
      v15 = WTF::CString::data(&v69);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v129, (uint64_t)a1, v13, v14, v15);
      _os_log_impl(&dword_196BCC000, v11, v12, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential: Failed to parse response %s", v129, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v69);
      v89 = &v68;
      v97 = &v68;
      v102 = &v68;
      v107[1] = &v68;
      v107[0] = 0;
      v120 = &v68;
      v119 = v107;
      v112 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v68);
      if (v112)
        WTF::StringImpl::deref(v112, v16);
      WTF::CString::~CString((WTF::CString *)&v71);
      v88 = &v70;
      v98 = &v70;
      v101 = &v70;
      v108[1] = &v70;
      v108[0] = 0;
      v118 = &v70;
      v117 = v108;
      v111 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v70);
      if (v111)
        WTF::StringImpl::deref(v111, v17);
      WTF::CString::~CString((WTF::CString *)&v73);
      v87 = &v72;
      v99 = &v72;
      v100 = &v72;
      v109[1] = &v72;
      v109[0] = 0;
      v116 = &v72;
      v115 = v109;
      v110 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v72);
      if (v110)
        WTF::StringImpl::deref(v110, v18);
    }
    switch(ResponseCode)
    {
      case 0x3Au:
        WebKit::CtapAuthenticator::makeCredential((WebKit::CtapAuthenticator *)a1);
        v65 = 1;
        break;
      case 0x19u:
        v62[0] = 8;
        v19 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"At least one credential matches an entry of the excludeCredentials list in the authenticator.", (const char *)0x5D);
        v61 = v20;
        v60 = v19;
        WTF::String::String(&v63, v19, v20);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v64, (uint64_t)v62);
        WebKit::Authenticator::receiveRespond(a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v64);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v62);
        v65 = 1;
        break;
      case 0x28u:
        v21 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
        std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v21 + 16);
        v59 = v22;
        std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v22 + 128);
        v24 = *(_BYTE *)(v23 + 4);
        v25 = 1;
        if ((v24 & 1) == 0)
        {
          std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v59 + 128);
          v58 = 0;
          v25 = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v26 + 2, &v58);
        }
        if (v25)
        {
          v27 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 32))(v27, 8);
        }
        else if ((a1[929] & 1) == 0)
        {
          a1[929] = 1;
          WebKit::CtapAuthenticator::makeCredential((WebKit::CtapAuthenticator *)a1);
        }
        v65 = 1;
        break;
      default:
          goto LABEL_32;
        if (!WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)(a1 + 960))
          && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
        {
          v28 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, v29);
        }
        if ((WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode) & 1) != 0)
        {
          v65 = 1;
        }
        else
        {
LABEL_32:
          v55[0] = 24;
          v30 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
          v54 = v31;
          v53 = v30;
          WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v56, v30, v31, ResponseCode);
          std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v57, (uint64_t)v55);
          WebKit::Authenticator::receiveRespond(a1);
          std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v57);
          WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v55);
          v65 = 1;
        }
        break;
    }
  }
  else
  {
    v32 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v32 + 16);
    v52 = v33;
    if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v33 + 144) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v52 + 144);
      if ((*(_BYTE *)(v34 + 8) & 1) != 0)
      {
        v93 = &v77;
        v127 = &v77;
        WebCore::AuthenticatorResponse::extensions(v77);
        v35 = fido::AuthenticatorGetInfoResponse::options((fido::AuthenticatorGetInfoResponse *)(a1 + 784));
        v49 = (std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](v35) & 1) == 0;
        v48 = 0;
        v36 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v52 + 128);
        v37 = 0;
        if ((v36 & 1) != 0)
        {
          std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v52 + 128);
          if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v38 + 2) & 1) == 0
            || (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v52 + 128),
                v47 = 2,
                v40 = std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v39 + 2, &v47), v37 = 1, !v40))
          {
            std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v52 + 128);
            v37 = *(_BYTE *)(v41 + 4);
          }
        }
        v48 = v37 & 1;
        v42 = 0;
        if (v49)
        {
          v42 = 0;
          if ((v48 & 1) != 0)
            v42 = a1[929] ^ 1;
        }
        v46 = v42 & 1;
        std::optional<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,void>(v51, &v46);
        v92 = &v77;
        v128 = &v77;
        WebCore::AuthenticatorResponse::setExtensions();
        WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v50);
      }
    }
    WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v44, &v77);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v45, &v44);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v45);
    WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v44);
    v65 = 0;
  }
  v94 = &v77;
  v125[1] = &v77;
  v125[0] = 0;
  v125[3] = &v77;
  v125[2] = v125;
  result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v77);
  v126 = result;
  if (result)
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v126 + 8));
  return result;
}

uint64_t WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(uint64_t result)
{
  return result;
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_4_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  double result;

  *(_QWORD *)&result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a5;
  return result;
}

unsigned int *WebKit::CtapAuthenticator::transports(WebKit::CtapAuthenticator *this, uint64_t a2)
{
  WTF::ASCIILiteral *v4;
  WebKit::CtapDriver *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::CtapAuthenticator *v12;

  v12 = this;
  v11 = a2;
  v10 = fido::AuthenticatorGetInfoResponse::transports((fido::AuthenticatorGetInfoResponse *)(a2 + 784));
  if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v10) & 1) != 0)
  {
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](v10);
    return (unsigned int *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(this, v4);
  }
  else
  {
    v6 = (WebKit::CtapDriver *)WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a2);
    v7 = WebKit::CtapDriver::transport(v6);
    v8 = &v7;
    v9 = 1;
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)this, (uint64_t)&v7, 1);
  }
}

BOOL WebKit::`anonymous namespace'::isPinError(_BYTE *a1)
{
  return (*a1 - 49) < 4u || *a1 == 54;
}

uint64_t WebKit::`anonymous namespace'::toStatus(_BYTE *a1)
{
  unsigned __int8 v2;

  switch(*a1)
  {
    case '1':
    case '3':
      v2 = 4;
      break;
    case '2':
      v2 = 2;
      break;
    case '4':
      v2 = 3;
      break;
    default:
      v2 = 4;
      break;
  }
  return v2;
}

uint64_t WebKit::CtapAuthenticator::tryRestartPin(WebKit::FidoAuthenticator *a1, _BYTE *a2)
{
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v11;
  WTF::CStringBuffer *v12;
  uint64_t v13;
  WTF::CStringBuffer *v14;
  os_log_type_t v15;
  os_log_t oslog;
  _BYTE *v17;
  WebKit::FidoAuthenticator *v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD v26[2];
  _QWORD v27[2];
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint8_t buf[40];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v17 = a2;
  oslog = (os_log_t)qword_1ECE71AC8;
  v15 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog;
    v4 = v15;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v13, (uint64_t)a1);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v14);
    WebKit::FidoAuthenticator::transportForDebugging(&v11, a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v12);
    v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(*v17);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, (uint64_t)a1, v5, v6, v7);
    _os_log_impl(&dword_196BCC000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryRestartPin: Error code: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v12);
    v21 = &v11;
    v22 = &v11;
    v25 = &v11;
    v26[1] = &v11;
    v26[0] = 0;
    v33 = &v11;
    v32 = v26;
    v29 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v11);
    if (v29)
      WTF::StringImpl::deref(v29, v8);
    WTF::CString::~CString((WTF::CString *)&v14);
    v20 = &v13;
    v23 = &v13;
    v24 = &v13;
    v27[1] = &v13;
    v27[0] = 0;
    v31 = &v13;
    v30 = v27;
    v28 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v13);
    if (v28)
      WTF::StringImpl::deref(v28, v9);
  }
  if (*v17 == 49 || *v17 == 51 || *v17 == 54)
  {
    WebKit::CtapAuthenticator::getRetries(a1);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

BOOL WTF::makeString<WTF::ASCIILiteral,unsigned char>(WTF::String *a1, uint64_t a2, uint64_t a3, char a4)
{
  _BOOL8 result;
  char v6;
  __int128 v7;
  WTF::String *v8;

  v8 = a1;
  *((_QWORD *)&v7 + 1) = a3;
  *(_QWORD *)&v7 = a2;
  v6 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned char>(a1, &v7, &v6);
  result = WTF::operator!(a1);
  if (result)
  {
    __break(0xC471u);
    JUMPOUT(0x196DE58B4);
  }
  return result;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,void>(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v3;

  if ((std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100]((uint64_t)a1) & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    *v3 = *a2;
  }
  else
  {
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>(a1, a2);
  }
}

void WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this)
{
  WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs(this);
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::~optional((WebCore::AuthenticationExtensionsClientOutputs *)((char *)this + 40));
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional((WebCore::AuthenticationExtensionsClientOutputs *)((char *)this + 8));
}

_QWORD *WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(_QWORD *a1, WTF::RefCountedBase **a2)
{
  _QWORD *result;

  result = WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(a1, *a2);
  *a2 = 0;
  return result;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(uint64_t a1, uint64_t *a2)
{
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::getAssertion(WebKit::CtapAuthenticator *this)
{
  uint64_t v2;
  uint64_t v3;
  fido::AuthenticatorSupportedOptions *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  WTF::ThreadSafeRefCountedBase *v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  uint64_t v21;
  WTF::CStringBuffer *v22;
  uint64_t v23;
  WTF::CStringBuffer *v24;
  uint64_t v25;
  WTF::CStringBuffer *v26;
  os_log_type_t v27;
  os_log_t oslog;
  _BYTE v29[32];
  uint64_t v30[2];
  int v31;
  uint64_t v32;
  _BYTE v33[32];
  uint64_t v34[3];
  _BYTE v35[32];
  uint64_t v36[2];
  _BYTE v37[20];
  int v38;
  uint64_t v39;
  _BYTE v40[16];
  WebKit::CtapAuthenticator *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint8_t buf[56];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v41 = this;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v40);
  v2 = WebKit::Authenticator::requestData(this);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v2 + 16);
  v39 = v3;
  v4 = (fido::AuthenticatorSupportedOptions *)fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  v38 = fido::AuthenticatorSupportedOptions::userVerificationAvailability(v4);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v37);
  if (v38
    || *(_BYTE *)(v39 + 48) == 2
    || !WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)this + 960))
  {
    v5 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v5)
      || *(_BYTE *)(v39 + 48) == 2)
    {
      WebKit::Authenticator::requestData(this);
      std::optional<fido::PinParameters>::optional[abi:sn180100](v29);
      fido::encodeGetAssertionRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v30);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v30);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v29);
    }
    else
    {
      WebKit::Authenticator::requestData(this);
      v31 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v32, (WebKit::CtapAuthenticator *)((char *)this + 960));
      std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>((uint64_t)v33, (uint64_t)&v31);
      fido::encodeGetAssertionRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v34);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v34);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v33);
      fido::PinParameters::~PinParameters((fido::PinParameters *)&v31);
    }
  }
  else
  {
    WebKit::Authenticator::requestData(this);
    std::optional<fido::PinParameters>::optional[abi:sn180100](v35);
    fido::encodeGetAssertionRequestAsCBOR();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v36);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v36);
    std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v35);
  }
  oslog = (os_log_t)qword_1ECE71AC8;
  v27 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = oslog;
    v7 = v27;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v25, (uint64_t)this);
    WTF::String::utf8();
    v8 = WTF::CString::data(&v26);
    WebKit::FidoAuthenticator::transportForDebugging(&v23, this);
    WTF::String::utf8();
    v9 = WTF::CString::data(&v24);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v20, (WTF::ASCIILiteral *)v40);
    v19 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v19);
    WTF::base64EncodeToString((uint64_t)&v21, v20[0], v20[1]);
    WTF::String::utf8();
    v10 = WTF::CString::data(&v22);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)this, v8, v9, v10);
    _os_log_impl(&dword_196BCC000, v6, v7, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getAssertion: Sending %s", buf, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v22);
    v44 = &v21;
    v45 = &v21;
    v50 = &v21;
    v51[1] = &v21;
    v51[0] = 0;
    v62 = &v21;
    v61 = v51;
    v56 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v21);
    if (v56)
      WTF::StringImpl::deref(v56, v11);
    WTF::CString::~CString((WTF::CString *)&v24);
    v43 = &v23;
    v46 = &v23;
    v49 = &v23;
    v52[1] = &v23;
    v52[0] = 0;
    v60 = &v23;
    v59 = v52;
    v55 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v23);
    if (v55)
      WTF::StringImpl::deref(v55, v12);
    WTF::CString::~CString((WTF::CString *)&v26);
    v42 = &v25;
    v47 = &v25;
    v48 = &v25;
    v53[1] = &v25;
    v53[0] = 0;
    v58 = &v25;
    v57 = v53;
    v54 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v25);
    if (v54)
      WTF::StringImpl::deref(v54, v13);
  }
  v14 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v17, (uint64_t)this);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void>(&v18, (uint64_t *)&v17);
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v14 + 16))(v14, v40, &v18);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v18);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v17);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v15);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v40);
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getAssertion(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(uint64_t a1, WTF::ASCIILiteral *a2)
{
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t result;
  WTF::ThreadSafeRefCountedBase *v50;
  uint64_t v51;
  int v52;
  uint64_t v53[2];
  uint64_t v54;
  WTF::CStringBuffer *v55;
  uint64_t v56;
  WTF::CStringBuffer *v57;
  uint64_t v58;
  WTF::CStringBuffer *v59;
  os_log_type_t v60;
  os_log_t v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  uint64_t v66;
  WTF::CStringBuffer *v67;
  uint64_t v68;
  WTF::CStringBuffer *v69;
  os_log_type_t v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74[8];
  uint64_t v75;
  _BYTE v76[24];
  uint64_t v77;
  WTF::CStringBuffer *v78;
  uint64_t v79;
  WTF::CStringBuffer *v80;
  os_log_type_t v81;
  os_log_t v82;
  int v83;
  int v84;
  uint64_t v85[2];
  uint64_t v86;
  WTF::CStringBuffer *v87;
  uint64_t v88;
  WTF::CStringBuffer *v89;
  uint64_t v90;
  WTF::CStringBuffer *v91;
  os_log_type_t v92;
  os_log_t v93;
  uint64_t v94;
  WTF::CStringBuffer *v95;
  uint64_t v96;
  WTF::CStringBuffer *v97;
  os_log_type_t v98;
  os_log_t oslog;
  unsigned __int8 ResponseCode;
  WTF::RefCountedBase *v101;
  WTF::ASCIILiteral *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  WTF::RefCountedBase **v116;
  WTF::RefCountedBase **v117;
  WTF::RefCountedBase **v118;
  WTF::RefCountedBase **v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  WTF::RefCountedBase **v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  _QWORD v149[2];
  _QWORD v150[2];
  _QWORD v151[2];
  _QWORD v152[2];
  _QWORD v153[2];
  _QWORD v154[2];
  _QWORD v155[2];
  _QWORD v156[2];
  _QWORD v157[2];
  _QWORD v158[2];
  _QWORD v159[2];
  _QWORD v160[2];
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  _QWORD *v173;
  uint64_t *v174;
  _QWORD *v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t *v180;
  _QWORD *v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t *v184;
  _QWORD *v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t *v188;
  _QWORD *v189;
  uint64_t *v190;
  _QWORD *v191;
  uint64_t *v192;
  _QWORD *v193;
  uint64_t *v194;
  _QWORD *v195;
  uint64_t *v196;
  _QWORD v197[4];
  uint64_t v198;
  WTF::RefCountedBase **v199;
  WTF::RefCountedBase **v200;
  WTF::RefCountedBase **v201;
  WTF::RefCountedBase **v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  char v207;
  uint8_t v208[48];
  uint8_t v209[48];
  uint8_t v210[32];
  uint8_t v211[48];
  uint8_t buf[40];
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v103 = a1;
  v102 = a2;
  fido::readCTAPGetAssertionResponse();
  ResponseCode = fido::getResponseCode();
  oslog = (os_log_t)qword_1ECE71AC8;
  v98 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog;
    v4 = v98;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v96, a1);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v97);
    WebKit::FidoAuthenticator::transportForDebugging(&v94, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v95);
    v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, a1, v5, v6, v7);
    _os_log_impl(&dword_196BCC000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: errorcode: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v95);
    v115 = &v94;
    v125 = &v94;
    v148 = &v94;
    v149[1] = &v94;
    v149[0] = 0;
    v196 = &v94;
    v195 = v149;
    v172 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v94);
    if (v172)
      WTF::StringImpl::deref(v172, v8);
    WTF::CString::~CString((WTF::CString *)&v97);
    v114 = &v96;
    v126 = &v96;
    v147 = &v96;
    v150[1] = &v96;
    v150[0] = 0;
    v194 = &v96;
    v193 = v150;
    v171 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v96);
    if (v171)
      WTF::StringImpl::deref(v171, v9);
  }
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v101))
  {
    v93 = (os_log_t)qword_1ECE71AC8;
    v92 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v93;
      v11 = v92;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v90, a1);
      WTF::String::utf8();
      v12 = WTF::CString::data(&v91);
      WebKit::FidoAuthenticator::transportForDebugging(&v88, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      v13 = WTF::CString::data(&v89);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v85, v102);
      v84 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v84);
      WTF::base64EncodeToString((uint64_t)&v86, v85[0], v85[1]);
      WTF::String::utf8();
      v14 = WTF::CString::data(&v87);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v211, a1, v12, v13, v14);
      _os_log_impl(&dword_196BCC000, v10, v11, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Failed to parse response %s", v211, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v87);
      v113 = &v86;
      v127 = &v86;
      v146 = &v86;
      v151[1] = &v86;
      v151[0] = 0;
      v192 = &v86;
      v191 = v151;
      v170 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v86);
      if (v170)
        WTF::StringImpl::deref(v170, v15);
      WTF::CString::~CString((WTF::CString *)&v89);
      v112 = &v88;
      v128 = &v88;
      v145 = &v88;
      v152[1] = &v88;
      v152[0] = 0;
      v190 = &v88;
      v189 = v152;
      v169 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v88);
      if (v169)
        WTF::StringImpl::deref(v169, v16);
      WTF::CString::~CString((WTF::CString *)&v91);
      v111 = &v90;
      v129 = &v90;
      v144 = &v90;
      v153[1] = &v90;
      v153[0] = 0;
      v188 = &v90;
      v187 = v153;
      v168 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v90);
      if (v168)
        WTF::StringImpl::deref(v168, v17);
    }
    if (ResponseCode == 58)
    {
      WebKit::CtapAuthenticator::getAssertion((WebKit::CtapAuthenticator *)a1);
      v83 = 1;
    }
           || (WebKit::CtapAuthenticator::tryDowngrade((WebKit::CtapAuthenticator *)a1) & 1) == 0)
    {
        goto LABEL_56;
      if (!WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1 + 960)
        && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
      {
        v18 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, v19);
      }
      if ((WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode) & 1) != 0)
      {
        v83 = 1;
      }
      else
      {
LABEL_56:
        if (ResponseCode == 46 && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
        {
          v20 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, 1);
        }
        v82 = (os_log_t)qword_1ECE71AC8;
        v81 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
        {
          v21 = v82;
          v22 = v81;
          WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v79, a1);
          WTF::String::utf8();
          v23 = WTF::CString::data(&v80);
          WebKit::FidoAuthenticator::transportForDebugging(&v77, (WebKit::FidoAuthenticator *)a1);
          WTF::String::utf8();
          v24 = WTF::CString::data(&v78);
          __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v210, a1, v23, v24);
          _os_log_impl(&dword_196BCC000, v21, v22, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: No credentials found.", v210, 0x20u);
          WTF::CString::~CString((WTF::CString *)&v78);
          v110 = &v77;
          v130 = &v77;
          v143 = &v77;
          v154[1] = &v77;
          v154[0] = 0;
          v186 = &v77;
          v185 = v154;
          v167 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v77);
          if (v167)
            WTF::StringImpl::deref(v167, v25);
          WTF::CString::~CString((WTF::CString *)&v80);
          v109 = &v79;
          v131 = &v79;
          v142 = &v79;
          v155[1] = &v79;
          v155[0] = 0;
          v184 = &v79;
          v183 = v155;
          v166 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v79);
          if (v166)
            WTF::StringImpl::deref(v166, v26);
        }
        v74[0] = 24;
        v27 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
        v73 = v28;
        v72 = v27;
        WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v75, v27, v28, ResponseCode);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v76, (uint64_t)v74);
        WebKit::Authenticator::receiveRespond((_QWORD *)a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v76);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v74);
        v83 = 1;
      }
    }
    else
    {
      v83 = 1;
    }
  }
  else
  {
    v71 = (os_log_t)qword_1ECE71AC8;
    v70 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = v71;
      v30 = v70;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v68, a1);
      WTF::String::utf8();
      v31 = WTF::CString::data(&v69);
      WebKit::FidoAuthenticator::transportForDebugging(&v66, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      v32 = WTF::CString::data(&v67);
      v119 = &v101;
      v199 = &v101;
      v33 = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_0((uint64_t)v209, a1, v31, v32, v33);
      _os_log_impl(&dword_196BCC000, v29, v30, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Get %lu credentials back.", v209, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v67);
      v108 = &v66;
      v132 = &v66;
      v141 = &v66;
      v156[1] = &v66;
      v156[0] = 0;
      v182 = &v66;
      v181 = v156;
      v165 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v66);
      if (v165)
        WTF::StringImpl::deref(v165, v34);
      WTF::CString::~CString((WTF::CString *)&v69);
      v107 = &v68;
      v133 = &v68;
      v140 = &v68;
      v157[1] = &v68;
      v157[0] = 0;
      v180 = &v68;
      v179 = v157;
      v164 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v68);
      if (v164)
        WTF::StringImpl::deref(v164, v35);
    }
    v118 = &v101;
    v200 = &v101;
    if ((unint64_t)WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101) > 1)
    {
      v117 = &v101;
      v201 = &v101;
      *(_QWORD *)(a1 + 936) = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101) - 1;
      v116 = &v101;
      v202 = &v101;
      v36 = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101);
      v121 = a1 + 944;
      v120 = v36;
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(a1 + 944, v36);
      WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v63, &v101);
      v123 = a1 + 944;
      v122 = &v63;
      v204 = a1 + 944;
      v203 = &v63;
      v206 = a1 + 944;
      v205 = &v63;
      v37 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1 + 944);
      if (v37 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(a1 + 944))
      {
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((WTF::ASCIILiteral *)(a1 + 944), (unint64_t)v205);
      }
      else
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
        v38 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)(a1 + 944));
        v39 = (uint64_t *)operator new(8, 0, v38);
        WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v39, v205);
        ++*(_DWORD *)(a1 + 956);
      }
      v207 = 1;
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v63);
      fido::encodeEmptyAuthenticatorRequest();
      v61 = (os_log_t)qword_1ECE71AC8;
      v60 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        v40 = v61;
        v41 = v60;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v58, a1);
        WTF::String::utf8();
        v42 = WTF::CString::data(&v59);
        WebKit::FidoAuthenticator::transportForDebugging(&v56, (WebKit::FidoAuthenticator *)a1);
        WTF::String::utf8();
        v43 = WTF::CString::data(&v57);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v53, (WTF::ASCIILiteral *)v62);
        v52 = 0;
        WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v52);
        WTF::base64EncodeToString((uint64_t)&v54, v53[0], v53[1]);
        WTF::String::utf8();
        v44 = WTF::CString::data(&v55);
        __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v208, a1, v42, v43, v44);
        _os_log_impl(&dword_196BCC000, v40, v41, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Sending %s", v208, 0x2Au);
        WTF::CString::~CString((WTF::CString *)&v55);
        v106 = &v54;
        v134 = &v54;
        v139 = &v54;
        v158[1] = &v54;
        v158[0] = 0;
        v178 = &v54;
        v177 = v158;
        v163 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
        if (v163)
          WTF::StringImpl::deref(v163, v45);
        WTF::CString::~CString((WTF::CString *)&v57);
        v105 = &v56;
        v135 = &v56;
        v138 = &v56;
        v159[1] = &v56;
        v159[0] = 0;
        v176 = &v56;
        v175 = v159;
        v162 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v56);
        if (v162)
          WTF::StringImpl::deref(v162, v46);
        WTF::CString::~CString((WTF::CString *)&v59);
        v104 = &v58;
        v136 = &v58;
        v137 = &v58;
        v160[1] = &v58;
        v160[0] = 0;
        v174 = &v58;
        v173 = v160;
        v161 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v58);
        if (v161)
          WTF::StringImpl::deref(v161, v47);
      }
      v48 = WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a1);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v50, a1);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(&v51, (uint64_t *)&v50);
      (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v48 + 16))(v48, v62, &v51);
      WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v51);
      WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v50);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v62);
      v83 = 0;
    }
    else
    {
      WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v64, &v101);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v65, &v64);
      WebKit::Authenticator::receiveRespond((_QWORD *)a1);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v65);
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v64);
      v83 = 1;
    }
  }
  v124 = &v101;
  v197[1] = &v101;
  v197[0] = 0;
  v197[3] = &v101;
  v197[2] = v197;
  result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v101);
  v198 = result;
  if (result)
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v198 + 8));
  return result;
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(WebKit::CtapAuthenticator *this)
{
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::CStringBuffer *v23;
  uint64_t v24;
  WTF::CStringBuffer *v25;
  os_log_type_t v26;
  os_log_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::CStringBuffer *v35;
  uint64_t v36;
  WTF::CStringBuffer *v37;
  os_log_type_t v38;
  os_log_t oslog;
  WebKit::CtapAuthenticator *v40;
  char v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  _QWORD *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint8_t v70[32];
  uint8_t buf[40];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v40 = this;
  oslog = (os_log_t)qword_1ECE71AC8;
  v38 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog;
    v3 = v38;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v36, (uint64_t)this);
    WTF::String::utf8();
    v4 = WTF::CString::data(&v37);
    WebKit::FidoAuthenticator::transportForDebugging(&v34, this);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v35);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5);
    _os_log_impl(&dword_196BCC000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryDowngrade", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v35);
    v45 = &v34;
    v46 = &v34;
    v53 = &v34;
    v54[1] = &v34;
    v54[0] = 0;
    v69 = &v34;
    v68 = v54;
    v61 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v34);
    if (v61)
      WTF::StringImpl::deref(v61, v6);
    WTF::CString::~CString((WTF::CString *)&v37);
    v44 = &v36;
    v47 = &v36;
    v52 = &v36;
    v55[1] = &v36;
    v55[0] = 0;
    v67 = &v36;
    v66 = v55;
    v60 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v36);
    if (v60)
      WTF::StringImpl::deref(v60, v7);
  }
  std::__to_address[abi:sn180100]<char const>();
  v32 = 1;
  v33 = std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find[abi:sn180100](v8, &v32);
  std::__to_address[abi:sn180100]<char const>();
  v31 = std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
  if (std::operator==[abi:sn180100](&v33, &v31))
  {
    v41 = 0;
  }
  else if (WebKit::Authenticator::observer(this))
  {
    v30 = 0;
    v9 = WebKit::Authenticator::requestData(this);
    v29 = &v30;
    v28 = &v30;
    WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>(v9 + 16, (uint64_t *)&v29, (uint64_t *)&v28);
    if ((v30 & 1) != 0)
    {
      v27 = (os_log_t)qword_1ECE71AC8;
      v26 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = v27;
        v11 = v26;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v24, (uint64_t)this);
        WTF::String::utf8();
        v12 = WTF::CString::data(&v25);
        WebKit::FidoAuthenticator::transportForDebugging(&v22, this);
        WTF::String::utf8();
        v13 = WTF::CString::data(&v23);
        __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v70, (uint64_t)this, v12, v13);
        _os_log_impl(&dword_196BCC000, v10, v11, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryDowngrade: Downgrading to U2F.", v70, 0x20u);
        WTF::CString::~CString((WTF::CString *)&v23);
        v43 = &v22;
        v48 = &v22;
        v51 = &v22;
        v56[1] = &v22;
        v56[0] = 0;
        v65 = &v22;
        v64 = v56;
        v59 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v22);
        if (v59)
          WTF::StringImpl::deref(v59, v14);
        WTF::CString::~CString((WTF::CString *)&v25);
        v42 = &v24;
        v49 = &v24;
        v50 = &v24;
        v57[1] = &v24;
        v57[0] = 0;
        v63 = &v24;
        v62 = v57;
        v58 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v24);
        if (v58)
          WTF::StringImpl::deref(v58, v15);
      }
      *((_BYTE *)this + 928) = 1;
      v16 = WebKit::FidoAuthenticator::driver(this);
      WebKit::CtapDriver::setProtocol(v16);
      v17 = WebKit::Authenticator::observer(this);
      WebKit::FidoAuthenticator::releaseDriver((uint64_t)this, &v19);
      WebKit::U2fAuthenticator::create(&v20, (uint64_t)&v19);
      WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(&v21, &v20);
      (*(void (**)(uint64_t, WebKit::CtapAuthenticator *, uint64_t *))(*(_QWORD *)v17 + 24))(v17, this, &v21);
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v21);
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v20);
      std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100]((uint64_t)&v19);
      v41 = 1;
    }
    else
    {
      v41 = 0;
    }
  }
  else
  {
    v41 = 0;
  }
  return v41 & 1;
}

uint64_t WebCore::AuthenticatorAssertionResponse::numberOfCredentials(WebCore::AuthenticatorAssertionResponse *this)
{
  return *((_QWORD *)this + 22);
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_8_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)&result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2048;
  *(_QWORD *)(a1 + 34) = a5;
  return result;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(uint64_t a1, uint64_t *a2)
{
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(uint64_t a1, WTF::ASCIILiteral *a2)
{
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::ASCIILiteral *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t result;
  WTF::ThreadSafeRefCountedBase *v41;
  uint64_t v42;
  int v43;
  uint64_t v44[2];
  uint64_t v45;
  WTF::CStringBuffer *v46;
  uint64_t v47;
  WTF::CStringBuffer *v48;
  uint64_t v49;
  WTF::CStringBuffer *v50;
  os_log_type_t v51;
  os_log_t v52;
  _BYTE v53[23];
  char v54;
  uint64_t v55;
  WTF::ThreadSafeRefCountedBase *v56;
  uint64_t v57;
  _BYTE v58[16];
  uint64_t v59;
  uint64_t v60;
  WTF::CStringBuffer *v61;
  uint64_t v62;
  WTF::CStringBuffer *v63;
  os_log_type_t v64;
  os_log_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char v70[8];
  uint64_t v71;
  _BYTE v72[28];
  int v73;
  uint64_t v74[2];
  uint64_t v75;
  WTF::CStringBuffer *v76;
  uint64_t v77;
  WTF::CStringBuffer *v78;
  uint64_t v79;
  WTF::CStringBuffer *v80;
  os_log_type_t v81;
  os_log_t v82;
  WTF::RefCountedBase *v83;
  uint64_t v84;
  WTF::CStringBuffer *v85;
  uint64_t v86;
  WTF::CStringBuffer *v87;
  os_log_type_t v88;
  os_log_t oslog;
  unsigned __int8 ResponseCode;
  WTF::ASCIILiteral *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  WTF::RefCountedBase **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[2];
  _QWORD v134[2];
  _QWORD v135[2];
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  _QWORD *v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t *v149;
  _QWORD *v150;
  uint64_t *v151;
  _QWORD *v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t *v165;
  _QWORD v166[4];
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  char v172;
  uint8_t v173[48];
  uint8_t v174[48];
  uint8_t v175[48];
  uint8_t buf[40];
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v92 = a1;
  v91 = a2;
  ResponseCode = fido::getResponseCode();
  oslog = (os_log_t)qword_1ECE71AC8;
  v88 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog;
    v4 = v88;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v86, a1);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v87);
    WebKit::FidoAuthenticator::transportForDebugging(&v84, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v85);
    v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, a1, v5, v6, v7);
    _os_log_impl(&dword_196BCC000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: errorcode: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v85);
    v102 = &v84;
    v106 = &v84;
    v125 = &v84;
    v126[1] = &v84;
    v126[0] = 0;
    v165 = &v84;
    v164 = v126;
    v145 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v84);
    if (v145)
      WTF::StringImpl::deref(v145, v8);
    WTF::CString::~CString((WTF::CString *)&v87);
    v101 = &v86;
    v107 = &v86;
    v124 = &v86;
    v127[1] = &v86;
    v127[0] = 0;
    v163 = &v86;
    v162 = v127;
    v144 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v86);
    if (v144)
      WTF::StringImpl::deref(v144, v9);
  }
  fido::readCTAPGetAssertionResponse();
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v83))
  {
    v82 = (os_log_t)qword_1ECE71AC8;
    v81 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v82;
      v11 = v81;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v79, a1);
      WTF::String::utf8();
      v12 = WTF::CString::data(&v80);
      WebKit::FidoAuthenticator::transportForDebugging(&v77, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      v13 = WTF::CString::data(&v78);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v74, v91);
      v73 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v73);
      WTF::base64EncodeToString((uint64_t)&v75, v74[0], v74[1]);
      WTF::String::utf8();
      v14 = WTF::CString::data(&v76);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v175, a1, v12, v13, v14);
      _os_log_impl(&dword_196BCC000, v10, v11, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Unable to parse response: %s", v175, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v76);
      v100 = &v75;
      v108 = &v75;
      v123 = &v75;
      v128[1] = &v75;
      v128[0] = 0;
      v161 = &v75;
      v160 = v128;
      v143 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v75);
      if (v143)
        WTF::StringImpl::deref(v143, v15);
      WTF::CString::~CString((WTF::CString *)&v78);
      v99 = &v77;
      v109 = &v77;
      v122 = &v77;
      v129[1] = &v77;
      v129[0] = 0;
      v159 = &v77;
      v158 = v129;
      v142 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v77);
      if (v142)
        WTF::StringImpl::deref(v142, v16);
      WTF::CString::~CString((WTF::CString *)&v80);
      v98 = &v79;
      v110 = &v79;
      v121 = &v79;
      v130[1] = &v79;
      v130[0] = 0;
      v157 = &v79;
      v156 = v130;
      v141 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v79);
      if (v141)
        WTF::StringImpl::deref(v141, v17);
    }
    v70[0] = 24;
    v18 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    v69 = v19;
    v68 = v18;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v71, v18, v19, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v72, (uint64_t)v70);
    WebKit::Authenticator::receiveRespond((_QWORD *)a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v72);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v70);
    v67 = 1;
  }
  else
  {
    --*(_QWORD *)(a1 + 936);
    WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v66, &v83);
    v104 = a1 + 944;
    v103 = &v66;
    v169 = a1 + 944;
    v168 = &v66;
    v171 = a1 + 944;
    v170 = &v66;
    v20 = (WTF::ASCIILiteral *)(a1 + 944);
    v21 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1 + 944);
    if (v21 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(a1 + 944))
    {
      WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(v20, (unint64_t)v170);
    }
    else
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
      v22 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)v20);
      v23 = (uint64_t *)operator new(8, 0, v22);
      WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v23, v170);
      ++*(_DWORD *)(a1 + 956);
    }
    v172 = 1;
    WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v66);
    v65 = (os_log_t)qword_1ECE71AC8;
    v64 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v24 = v65;
      v25 = v64;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v62, a1);
      WTF::String::utf8();
      v26 = WTF::CString::data(&v63);
      WebKit::FidoAuthenticator::transportForDebugging(&v60, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      v27 = WTF::CString::data(&v61);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_0((uint64_t)v174, a1, v26, v27, *(_QWORD *)(a1 + 936));
      _os_log_impl(&dword_196BCC000, v24, v25, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Remaining responses: %lu", v174, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v61);
      v97 = &v60;
      v111 = &v60;
      v120 = &v60;
      v131[1] = &v60;
      v131[0] = 0;
      v155 = &v60;
      v154 = v131;
      v140 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v60);
      if (v140)
        WTF::StringImpl::deref(v140, v28);
      WTF::CString::~CString((WTF::CString *)&v63);
      v96 = &v62;
      v112 = &v62;
      v119 = &v62;
      v132[1] = &v62;
      v132[0] = 0;
      v153 = &v62;
      v152 = v132;
      v139 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v62);
      if (v139)
        WTF::StringImpl::deref(v139, v29);
    }
    if (*(_QWORD *)(a1 + 936))
    {
      fido::encodeEmptyAuthenticatorRequest();
      v52 = (os_log_t)qword_1ECE71AC8;
      v51 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        v31 = v52;
        v32 = v51;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v49, a1);
        WTF::String::utf8();
        v33 = WTF::CString::data(&v50);
        WebKit::FidoAuthenticator::transportForDebugging(&v47, (WebKit::FidoAuthenticator *)a1);
        WTF::String::utf8();
        v34 = WTF::CString::data(&v48);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v44, (WTF::ASCIILiteral *)v53);
        v43 = 0;
        WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v43);
        WTF::base64EncodeToString((uint64_t)&v45, v44[0], v44[1]);
        WTF::String::utf8();
        v35 = WTF::CString::data(&v46);
        __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v173, a1, v33, v34, v35);
        _os_log_impl(&dword_196BCC000, v31, v32, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Sending %s", v173, 0x2Au);
        WTF::CString::~CString((WTF::CString *)&v46);
        v95 = &v45;
        v113 = &v45;
        v118 = &v45;
        v133[1] = &v45;
        v133[0] = 0;
        v151 = &v45;
        v150 = v133;
        v138 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v45);
        if (v138)
          WTF::StringImpl::deref(v138, v36);
        WTF::CString::~CString((WTF::CString *)&v48);
        v94 = &v47;
        v114 = &v47;
        v117 = &v47;
        v134[1] = &v47;
        v134[0] = 0;
        v149 = &v47;
        v148 = v134;
        v137 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v47);
        if (v137)
          WTF::StringImpl::deref(v137, v37);
        WTF::CString::~CString((WTF::CString *)&v50);
        v93 = &v49;
        v115 = &v49;
        v116 = &v49;
        v135[1] = &v49;
        v135[0] = 0;
        v147 = &v49;
        v146 = v135;
        v136 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v49);
        if (v136)
          WTF::StringImpl::deref(v136, v38);
      }
      v39 = WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a1);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v41, a1);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,void>(&v42, (uint64_t *)&v41);
      (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v39 + 16))(v39, v53, &v42);
      WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v42);
      WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v41);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v53);
      v67 = 0;
    }
    else
    {
      v59 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
      if (v59)
      {
        v30 = v59;
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v58, (WTF::ASCIILiteral *)(a1 + 944));
        v55 = a1;
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v56, a1);
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v54);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::CompletionHandler<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(&v57, &v55);
        (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, v58, 1, &v57);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v57);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v54);
        WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0((uint64_t)&v55);
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v58);
      }
      v67 = 1;
    }
  }
  v105 = &v83;
  v166[1] = &v83;
  v166[0] = 0;
  v166[3] = &v83;
  v166[2] = v166;
  result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v83);
  v167 = result;
  if (result)
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v167 + 8));
  return result;
}

WTF::ASCIILiteral *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  unint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v5 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    v6 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::CompletionHandler<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(_QWORD *a1, _QWORD *a2)
{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::CompletionHandler<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0(uint64_t a1)
{
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)(a1 + 8));
  return a1;
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::getRetries(WebKit::CtapAuthenticator *this)
{
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::ThreadSafeRefCountedBase *v12[2];
  uint64_t v13;
  int v14;
  uint64_t v15[2];
  uint64_t v16;
  WTF::CStringBuffer *v17;
  uint64_t v18;
  WTF::CStringBuffer *v19;
  uint64_t v20;
  WTF::CStringBuffer *v21;
  os_log_type_t v22;
  os_log_t oslog;
  _BYTE v24[16];
  WebKit::CtapAuthenticator *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint8_t buf[56];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v25 = this;
  fido::pin::encodeAsCBOR();
  oslog = (os_log_t)qword_1ECE71AC8;
  v22 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog;
    v3 = v22;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)this);
    WTF::String::utf8();
    v4 = WTF::CString::data(&v21);
    WebKit::FidoAuthenticator::transportForDebugging(&v18, this);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v19);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, (WTF::ASCIILiteral *)v24);
    v14 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
    WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v17);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5, v6);
    _os_log_impl(&dword_196BCC000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getRetries: Sending %s", buf, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v17);
    v28 = &v16;
    v29 = &v16;
    v34 = &v16;
    v35[1] = &v16;
    v35[0] = 0;
    v46 = &v16;
    v45 = v35;
    v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
    if (v40)
      WTF::StringImpl::deref(v40, v7);
    WTF::CString::~CString((WTF::CString *)&v19);
    v27 = &v18;
    v30 = &v18;
    v33 = &v18;
    v36[1] = &v18;
    v36[0] = 0;
    v44 = &v18;
    v43 = v36;
    v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
    if (v39)
      WTF::StringImpl::deref(v39, v8);
    WTF::CString::~CString((WTF::CString *)&v21);
    v26 = &v20;
    v31 = &v20;
    v32 = &v20;
    v37[1] = &v20;
    v37[0] = 0;
    v42 = &v20;
    v41 = v37;
    v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
    if (v38)
      WTF::StringImpl::deref(v38, v9);
  }
  v10 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v12, (uint64_t)this);
  v12[1] = this;
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getRetries(void)::$_0,void>(&v13, (uint64_t *)v12);
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v10 + 16))(v10, v24, &v13);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v13);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)v12);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v24);
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getRetries(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getRetries(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getRetries(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WebKit::FidoAuthenticator *a1, uint64_t a2)
{
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::ThreadSafeRefCountedBase **v22;
  WTF::ThreadSafeRefCountedBase *v23[3];
  uint64_t v24;
  int v25;
  uint64_t v26[2];
  uint64_t v27;
  WTF::CStringBuffer *v28;
  uint64_t v29;
  WTF::CStringBuffer *v30;
  uint64_t v31;
  WTF::CStringBuffer *v32;
  os_log_type_t v33;
  os_log_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  _BYTE v40[31];
  char ResponseCode;
  _QWORD v42[2];
  uint64_t v43;
  WTF::CStringBuffer *v44;
  uint64_t v45;
  WTF::CStringBuffer *v46;
  os_log_type_t v47;
  os_log_t oslog;
  uint64_t v49;
  WebKit::FidoAuthenticator *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  _QWORD *v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint8_t v86[48];
  uint8_t buf[40];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v50 = a1;
  v49 = a2;
  oslog = (os_log_t)qword_1ECE71AC8;
  v47 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog;
    v4 = v47;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v45, (uint64_t)a1);
    WTF::String::utf8();
    v5 = WTF::CString::data(&v46);
    WebKit::FidoAuthenticator::transportForDebugging(&v43, a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v44);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v5, v6);
    _os_log_impl(&dword_196BCC000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v44);
    v55 = &v43;
    v56 = &v43;
    v65 = &v43;
    v66[1] = &v43;
    v66[0] = 0;
    v85 = &v43;
    v84 = v66;
    v75 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v43);
    if (v75)
      WTF::StringImpl::deref(v75, v7);
    WTF::CString::~CString((WTF::CString *)&v46);
    v54 = &v45;
    v57 = &v45;
    v64 = &v45;
    v67[1] = &v45;
    v67[0] = 0;
    v83 = &v45;
    v82 = v67;
    v74 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v45);
    if (v74)
      WTF::StringImpl::deref(v74, v8);
  }
  v9 = fido::pin::RetriesResponse::parse();
  v42[1] = v10;
  v42[0] = v9;
  if ((std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v42) & 1) != 0)
  {
    fido::pin::encodeAsCBOR();
    v34 = (os_log_t)qword_1ECE71AC8;
    v33 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v34;
      v14 = v33;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v31, (uint64_t)a1);
      WTF::String::utf8();
      v15 = WTF::CString::data(&v32);
      WebKit::FidoAuthenticator::transportForDebugging(&v29, a1);
      WTF::String::utf8();
      v16 = WTF::CString::data(&v30);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v26, (WTF::ASCIILiteral *)v35);
      v25 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v25);
      WTF::base64EncodeToString((uint64_t)&v27, v26[0], v26[1]);
      WTF::String::utf8();
      v17 = WTF::CString::data(&v28);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v86, (uint64_t)a1, v15, v16, v17);
      _os_log_impl(&dword_196BCC000, v13, v14, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries: Sending %s", v86, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v28);
      v53 = &v27;
      v58 = &v27;
      v63 = &v27;
      v68[1] = &v27;
      v68[0] = 0;
      v81 = &v27;
      v80 = v68;
      v73 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v27);
      if (v73)
        WTF::StringImpl::deref(v73, v18);
      WTF::CString::~CString((WTF::CString *)&v30);
      v52 = &v29;
      v59 = &v29;
      v62 = &v29;
      v69[1] = &v29;
      v69[0] = 0;
      v79 = &v29;
      v78 = v69;
      v72 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v29);
      if (v72)
        WTF::StringImpl::deref(v72, v19);
      WTF::CString::~CString((WTF::CString *)&v32);
      v51 = &v31;
      v60 = &v31;
      v61 = &v31;
      v70[1] = &v31;
      v70[0] = 0;
      v77 = &v31;
      v76 = v70;
      v71 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v31);
      if (v71)
        WTF::StringImpl::deref(v71, v20);
    }
    v21 = WebKit::FidoAuthenticator::driver(a1);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v23, (uint64_t)a1);
    v23[1] = a1;
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v42);
    v23[2] = *v22;
    WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(&v24, (uint64_t *)v23);
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v21 + 16))(v21, v35, &v24);
    WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v24);
    WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)v23);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v35);
  }
  else
  {
    ResponseCode = fido::getResponseCode();
    v38[0] = 24;
    v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    v37 = v12;
    v36 = v11;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v39, v11, v12, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v40, (uint64_t)v38);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v40);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v38);
  }
}

uint64_t std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a1) & 1;
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

fido::pin::KeyAgreementResponse *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WebKit::FidoAuthenticator *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  WTF::ThreadSafeRefCountedBase *v22[3];
  uint64_t v23;
  uint64_t v24;
  WTF::CStringBuffer *v25;
  uint64_t v26;
  WTF::CStringBuffer *v27;
  os_log_type_t v28;
  os_log_t oslog;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34[8];
  uint64_t v35;
  _BYTE v36[31];
  char ResponseCode;
  _BYTE v38[16];
  uint64_t v39;
  WTF::CStringBuffer *v40;
  uint64_t v41;
  WTF::CStringBuffer *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebKit::FidoAuthenticator *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _QWORD *v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint8_t v76[32];
  uint8_t buf[40];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v47 = a1;
  v46 = a2;
  v45 = a3;
  v44 = qword_1ECE71AC8;
  v43 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = v44;
    v5 = v43;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v41, (uint64_t)a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v42);
    WebKit::FidoAuthenticator::transportForDebugging(&v39, a1);
    WTF::String::utf8();
    v7 = WTF::CString::data(&v40);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v6, v7);
    _os_log_impl(&dword_196BCC000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v40);
    v51 = &v39;
    v52 = &v39;
    v59 = &v39;
    v60[1] = &v39;
    v60[0] = 0;
    v75 = &v39;
    v74 = v60;
    v67 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v39);
    if (v67)
      WTF::StringImpl::deref(v67, v8);
    WTF::CString::~CString((WTF::CString *)&v42);
    v50 = &v41;
    v53 = &v41;
    v58 = &v41;
    v61[1] = &v41;
    v61[0] = 0;
    v73 = &v41;
    v72 = v61;
    v66 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v41);
    if (v66)
      WTF::StringImpl::deref(v66, v9);
  }
  fido::pin::KeyAgreementResponse::parse();
  if ((std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v38) & 1) != 0)
  {
    v30 = WebKit::Authenticator::observer(a1);
    if (v30)
    {
      oslog = (os_log_t)qword_1ECE71AC8;
      v28 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = oslog;
        v13 = v28;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v26, (uint64_t)a1);
        WTF::String::utf8();
        v14 = WTF::CString::data(&v27);
        WebKit::FidoAuthenticator::transportForDebugging(&v24, a1);
        WTF::String::utf8();
        v15 = WTF::CString::data(&v25);
        __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v76, (uint64_t)a1, v14, v15);
        _os_log_impl(&dword_196BCC000, v12, v13, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement: Requesting pin from observer.", v76, 0x20u);
        WTF::CString::~CString((WTF::CString *)&v25);
        v49 = &v24;
        v54 = &v24;
        v57 = &v24;
        v62[1] = &v24;
        v62[0] = 0;
        v71 = &v24;
        v70 = v62;
        v65 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v24);
        if (v65)
          WTF::StringImpl::deref(v65, v16);
        WTF::CString::~CString((WTF::CString *)&v27);
        v48 = &v26;
        v55 = &v26;
        v56 = &v26;
        v63[1] = &v26;
        v63[0] = 0;
        v69 = &v26;
        v68 = v63;
        v64 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v26);
        if (v64)
          WTF::StringImpl::deref(v64, v17);
      }
      v18 = v30;
      v19 = v45;
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v22, (uint64_t)a1);
      v22[1] = a1;
      std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v38);
      fido::pin::KeyAgreementResponse::KeyAgreementResponse();
      WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v21);
      WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(&v23, (uint64_t *)v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 40))(v18, v19, &v23);
      WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v23);
      WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v21);
      WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0((uint64_t *)v22);
    }
    v31 = 0;
  }
  else
  {
    ResponseCode = fido::getResponseCode();
    v34[0] = 24;
    v10 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    v33 = v11;
    v32 = v10;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v35, v10, v11, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v36, (uint64_t)v34);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v36);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v34);
    v31 = 1;
  }
  return std::optional<fido::pin::KeyAgreementResponse>::~optional((fido::pin::KeyAgreementResponse *)v38);
}

_QWORD *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0(uint64_t *a1)
{
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0(a1);
  return a1;
}

{
  fido::pin::KeyAgreementResponse::~KeyAgreementResponse((fido::pin::KeyAgreementResponse *)(a1 + 2));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::optional<fido::pin::KeyAgreementResponse>::~optional(fido::pin::KeyAgreementResponse *a1)
{
  std::optional<fido::pin::KeyAgreementResponse>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_assign_base(a1);
  return a1;
}

void WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WebKit::FidoAuthenticator *a1, fido::pin *a2, uint64_t a3)
{
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t *v24;
  WTF::ThreadSafeRefCountedBase *v25[2];
  uint64_t v26[6];
  uint64_t v27;
  int v28;
  uint64_t v29[2];
  uint64_t v30;
  WTF::CStringBuffer *v31;
  uint64_t v32;
  WTF::CStringBuffer *v33;
  uint64_t v34;
  WTF::CStringBuffer *v35;
  os_log_type_t v36;
  os_log_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  char v41[8];
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[56];
  int v45;
  char v46;
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  char v51[8];
  uint64_t v52;
  _BYTE v53[24];
  uint64_t v54;
  WTF::CStringBuffer *v55;
  uint64_t v56;
  WTF::CStringBuffer *v57;
  os_log_type_t v58;
  os_log_t oslog;
  uint64_t v60;
  fido::pin *v61;
  WebKit::FidoAuthenticator *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  _QWORD *v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t *v97;
  uint8_t v98[48];
  uint8_t buf[40];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v62 = a1;
  v61 = a2;
  v60 = a3;
  oslog = (os_log_t)qword_1ECE71AC8;
  v58 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v58;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v56, (uint64_t)a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v57);
    WebKit::FidoAuthenticator::transportForDebugging(&v54, a1);
    WTF::String::utf8();
    v7 = WTF::CString::data(&v55);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v6, v7);
    _os_log_impl(&dword_196BCC000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v55);
    v67 = &v54;
    v68 = &v54;
    v77 = &v54;
    v78[1] = &v54;
    v78[0] = 0;
    v97 = &v54;
    v96 = v78;
    v87 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
    if (v87)
      WTF::StringImpl::deref(v87, v8);
    WTF::CString::~CString((WTF::CString *)&v57);
    v66 = &v56;
    v69 = &v56;
    v76 = &v56;
    v79[1] = &v56;
    v79[0] = 0;
    v95 = &v56;
    v94 = v79;
    v86 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v56);
    if (v86)
      WTF::StringImpl::deref(v86, v9);
  }
  if (WTF::String::isNull(v61))
  {
    v51[0] = 24;
    v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Pin is null.", (const char *)0xC);
    v50 = v12;
    v49 = v11;
    WTF::String::String(&v52, v11, v12);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v53, (uint64_t)v51);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v53);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v51);
  }
  else
  {
    fido::pin::validateAndConvertToUTF8(v61, v10);
    if ((std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v48) & 1) != 0)
    {
      std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v48);
      fido::pin::TokenRequest::tryCreate();
      if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)v44) & 1) != 0)
      {
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v44);
        fido::pin::encodeAsCBOR();
        v37 = (os_log_t)qword_1ECE71AC8;
        v36 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
        {
          v15 = v37;
          v16 = v36;
          WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v34, (uint64_t)a1);
          WTF::String::utf8();
          v17 = WTF::CString::data(&v35);
          WebKit::FidoAuthenticator::transportForDebugging(&v32, a1);
          WTF::String::utf8();
          v18 = WTF::CString::data(&v33);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v29, (WTF::ASCIILiteral *)v38);
          v28 = 0;
          WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v28);
          WTF::base64EncodeToString((uint64_t)&v30, v29[0], v29[1]);
          WTF::String::utf8();
          v19 = WTF::CString::data(&v31);
          __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v98, (uint64_t)a1, v17, v18, v19);
          _os_log_impl(&dword_196BCC000, v15, v16, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetPinTokenAfterRequestPin: Sending %s", v98, 0x2Au);
          WTF::CString::~CString((WTF::CString *)&v31);
          v65 = &v30;
          v70 = &v30;
          v75 = &v30;
          v80[1] = &v30;
          v80[0] = 0;
          v93 = &v30;
          v92 = v80;
          v85 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v30);
          if (v85)
            WTF::StringImpl::deref(v85, v20);
          WTF::CString::~CString((WTF::CString *)&v33);
          v64 = &v32;
          v71 = &v32;
          v74 = &v32;
          v81[1] = &v32;
          v81[0] = 0;
          v91 = &v32;
          v90 = v81;
          v84 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v32);
          if (v84)
            WTF::StringImpl::deref(v84, v21);
          WTF::CString::~CString((WTF::CString *)&v35);
          v63 = &v34;
          v72 = &v34;
          v73 = &v34;
          v82[1] = &v34;
          v82[0] = 0;
          v89 = &v34;
          v88 = v82;
          v83 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v34);
          if (v83)
            WTF::StringImpl::deref(v83, v22);
        }
        v23 = WebKit::FidoAuthenticator::driver(a1);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v25, (uint64_t)a1);
        v25[1] = a1;
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v44);
        fido::pin::TokenRequest::TokenRequest(v26, v24);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void>(&v27, (uint64_t *)v25);
        (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v23 + 16))(v23, v38, &v27);
        WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v27);
        WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0((uint64_t *)v25);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v38);
        v45 = 0;
      }
      else
      {
        v41[0] = 24;
        v13 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Cannot create a TokenRequest.", (const char *)0x1D);
        v40 = v14;
        v39 = v13;
        WTF::String::String(&v42, v13, v14);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v43, (uint64_t)v41);
        WebKit::Authenticator::receiveRespond(a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v43);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v41);
        v45 = 1;
      }
      std::optional<fido::pin::TokenRequest>::~optional((fido::pin::TokenRequest *)v44);
    }
    else
    {
      v47 = WebKit::Authenticator::observer(a1);
      if (v47)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, 4);
      v46 = 49;
      WebKit::CtapAuthenticator::tryRestartPin(a1, &v46);
      v45 = 1;
    }
    std::optional<WTF::CString>::~optional((WTF::CString *)v48);
  }
}

uint64_t std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t *fido::pin::TokenRequest::TokenRequest(uint64_t *a1, uint64_t *a2)
{
  fido::pin::TokenRequest::TokenRequest(a1, a2);
  return a1;
}

{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, a2);
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100](a1 + 1, a2 + 1);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 4), a2 + 4);
  return a1;
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0(a1);
  return a1;
}

{
  fido::pin::TokenRequest::~TokenRequest((fido::pin::TokenRequest *)(a1 + 2));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

fido::pin::TokenRequest *std::optional<fido::pin::TokenRequest>::~optional(fido::pin::TokenRequest *a1)
{
  std::optional<fido::pin::TokenRequest>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::TokenRequest,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::CString *std::optional<WTF::CString>::~optional(WTF::CString *a1)
{
  std::optional<WTF::CString>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::CString,false>::~__optional_move_assign_base(a1);
  return a1;
}

fido::pin::TokenResponse *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(uint64_t a1, uint64_t a2, fido::pin::TokenRequest *a3)
{
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[4];
  char v18[8];
  uint64_t v19;
  _BYTE v20[28];
  int v21;
  uint64_t v22;
  char ResponseCode;
  _BYTE v24[16];
  uint64_t v25;
  WTF::CStringBuffer *v26;
  uint64_t v27;
  WTF::CStringBuffer *v28;
  os_log_type_t v29;
  os_log_t oslog;
  fido::pin::TokenRequest *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD v40[2];
  _QWORD v41[2];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _QWORD *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint8_t buf[40];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v33 = a1;
  v32 = a2;
  v31 = a3;
  oslog = (os_log_t)qword_1ECE71AC8;
  v29 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v29;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v27, a1);
    WTF::String::utf8();
    v6 = WTF::CString::data(&v28);
    WebKit::FidoAuthenticator::transportForDebugging(&v25, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    v7 = WTF::CString::data(&v26);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, a1, v6, v7);
    _os_log_impl(&dword_196BCC000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v26);
    v35 = &v25;
    v36 = &v25;
    v39 = &v25;
    v40[1] = &v25;
    v40[0] = 0;
    v47 = &v25;
    v46 = v40;
    v43 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v25);
    if (v43)
      WTF::StringImpl::deref(v43, v8);
    WTF::CString::~CString((WTF::CString *)&v28);
    v34 = &v27;
    v37 = &v27;
    v38 = &v27;
    v41[1] = &v27;
    v41[0] = 0;
    v45 = &v27;
    v44 = v41;
    v42 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v27);
    if (v42)
      WTF::StringImpl::deref(v42, v9);
  }
  fido::pin::TokenRequest::sharedKey(v31);
  fido::pin::TokenResponse::parse();
  if ((std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v24) & 1) != 0)
  {
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v24);
    WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
    fido::pin::TokenResponse::pinAuth();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 960), v17);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v17);
    v13 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
    v16 = a1;
    v15 = a1;
    WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>(v13 + 16, &v16, &v15);
    v21 = 0;
  }
  else
  {
    ResponseCode = fido::getResponseCode();
      goto LABEL_12;
    v22 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
    if (v22)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, v10);
    }
    if ((WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode) & 1) != 0)
    {
      v21 = 1;
    }
    else
    {
LABEL_12:
      v18[0] = 24;
      v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
      v17[3] = v12;
      v17[2] = v11;
      WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v19, v11, v12, ResponseCode);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v20, (uint64_t)v18);
      WebKit::Authenticator::receiveRespond((_QWORD *)a1);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v20);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v18);
      v21 = 1;
    }
  }
  return std::optional<fido::pin::TokenResponse>::~optional((fido::pin::TokenResponse *)v24);
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;

  v7 = a1;
  v6[3] = a2;
  v6[2] = a3;
  v3 = WTF::makeVisitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(*a2, *a3);
  v6[1] = v4;
  v6[0] = v3;
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&,void>((uint64_t)v6, v7);
}

fido::pin::TokenResponse *std::optional<fido::pin::TokenResponse>::~optional(fido::pin::TokenResponse *a1)
{
  std::optional<fido::pin::TokenResponse>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::TokenResponse,false>::~__optional_move_assign_base(a1);
  return a1;
}

BOOL std::operator==[abi:sn180100](_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find[abi:sn180100](uint64_t a1, _DWORD *a2)
{
  return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find<fido::ProtocolVersion>(a1, a2);
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]()
{
  return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t v7;

  v7 = a1;
  v6[3] = a2;
  v6[2] = a3;
  v3 = WTF::makeVisitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>(*a2, *a3);
  v6[1] = v4;
  v6[0] = v3;
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>((uint64_t)v6, v7);
}

uint64_t WebKit::CtapDriver::setProtocol(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1;
  return result;
}

_QWORD *WebKit::U2fAuthenticator::create(_QWORD *a1, uint64_t a2)
{
  WTF::RefCountedBase *v3;

  v3 = (WTF::RefCountedBase *)WTF::RefCounted<WebKit::Authenticator>::operator new();
  WebKit::U2fAuthenticator::U2fAuthenticator(v3, a2);
  return WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(a1, v3);
}

uint64_t fido::AuthenticatorGetInfoResponse::transports(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebKit::CtapDriver::transport(WebKit::CtapDriver *this)
{
  return *((unsigned __int8 *)this + 20);
}

unsigned int *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2, a3);
}

{
  WTF::FastMalloc *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned int *v11;
  WTF::FastMalloc *v12;
  unsigned int *v13;
  _BYTE *v14;
  unsigned int *v15;

  v10[0] = a2;
  v10[1] = a3;
  v11 = a1;
  WTF::VectorBuffer<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1);
  v4 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v10);
  v13 = a1;
  v12 = v4;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>((uint64_t)a1, v4);
  std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v10);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v9 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v10);
  v8 = std::initializer_list<WebCore::AuthenticatorTransport>::end[abi:sn180100](v10);
  while (v9 != v8)
  {
    v15 = a1;
    v14 = (_BYTE *)v9;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    v6 = (_BYTE *)operator new(1, 0, v5);
    *v6 = *v14;
    ++a1[3];
    ++v9;
  }
  return v11;
}

uint64_t fido::AuthenticatorGetInfoResponse::aaguid(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 24;
}

uint64_t *std::span<unsigned char const,16ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  std::span<unsigned char const,16ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  return a1;
}

{
  *a1 = std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2);
  if (std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)a2) != 16)
    __break(1u);
  return a1;
}

void *WTF::UUID::UUID(void *a1, uint64_t a2)
{
  WTF::UUID::UUID(a1, a2);
  return a1;
}

{
  const void *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v5);
  memcpy(a1, v3, 0x10uLL);
  return a1;
}

void WebKit::CtapAuthenticator::~CtapAuthenticator(WebKit::CtapAuthenticator *this)
{
  WebKit::CtapAuthenticator::~CtapAuthenticator(this);
}

{
  void *v2;

  WebKit::CtapAuthenticator::~CtapAuthenticator(this);
  WTF::FastMalloc::free(this, v2);
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::CtapAuthenticator *)((char *)this + 960));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::CtapAuthenticator *)((char *)this + 944));
  fido::AuthenticatorGetInfoResponse::~AuthenticatorGetInfoResponse((WebKit::CtapAuthenticator *)((char *)this + 784));
  WebKit::FidoAuthenticator::~FidoAuthenticator(this);
}

_QWORD *std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100](_QWORD *a1, _QWORD *a2)
{
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__tree(a1, a2);
  return a1;
}

_BYTE *std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1, a2);
  return a1;
}

_QWORD *std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__tree(_QWORD *a1, _QWORD *a2)
{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__tree(a1, a2);
  return a1;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
  if (*v2)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    v7 = v6;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    *(_QWORD *)(*(_QWORD *)v8 + 16) = v7;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    v10 = v9;
    std::__to_address[abi:sn180100]<char const>();
    *v11 = v10;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    *v12 = 0;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    *v13 = 0;
  }
  else
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    v4 = v3;
    std::__to_address[abi:sn180100]<char const>();
    *v5 = v4;
  }
  return a1;
}

void std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
}

void std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  std::__to_address[abi:sn180100]<char const>();
}

_BYTE *std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t WTF::CStringBuffer::data(WTF::CStringBuffer *this)
{
  return WTF::CStringBuffer::mutableData(this);
}

uint64_t WTF::CStringBuffer::mutableData(WTF::CStringBuffer *this)
{
  return (uint64_t)this + 16;
}

uint64_t WTF::RefCounted<WTF::CStringBuffer>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result;
  void *v3;

  result = WTF::RefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
    {
      WTF::CStringBuffer::~CStringBuffer(a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

void WTF::CStringBuffer::~CStringBuffer(WTF::CStringBuffer *this)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base((uint64_t)this);
}

_BYTE *std::__optional_move_assign_base<fido::PinParameters,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<fido::PinParameters,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<fido::PinParameters,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<fido::PinParameters,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<fido::PinParameters,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<fido::PinParameters,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<fido::PinParameters,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::__optional_storage_base(a1);
  return a1;
}

fido::PinParameters *std::__optional_move_assign_base<fido::PinParameters,false>::~__optional_move_assign_base(fido::PinParameters *a1)
{
  std::__optional_copy_assign_base<fido::PinParameters,false>::~__optional_copy_assign_base(a1);
  return a1;
}

fido::PinParameters *std::__optional_copy_assign_base<fido::PinParameters,false>::~__optional_copy_assign_base(fido::PinParameters *a1)
{
  std::__optional_move_base<fido::PinParameters,false>::~__optional_move_base(a1);
  return a1;
}

fido::PinParameters *std::__optional_move_base<fido::PinParameters,false>::~__optional_move_base(fido::PinParameters *a1)
{
  std::__optional_copy_base<fido::PinParameters,false>::~__optional_copy_base(a1);
  return a1;
}

fido::PinParameters *std::__optional_copy_base<fido::PinParameters,false>::~__optional_copy_base(fido::PinParameters *a1)
{
  std::__optional_storage_base<fido::PinParameters,false>::~__optional_storage_base(a1);
  return a1;
}

fido::PinParameters *std::__optional_storage_base<fido::PinParameters,false>::~__optional_storage_base(fido::PinParameters *a1)
{
  std::__optional_destruct_base<fido::PinParameters,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

fido::PinParameters *std::__optional_destruct_base<fido::PinParameters,false>::~__optional_destruct_base[abi:sn180100](fido::PinParameters *a1)
{
  if ((*((_BYTE *)a1 + 24) & 1) != 0)
    fido::PinParameters::~PinParameters(a1);
  return a1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__127__optional_copy_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__120__optional_move_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__120__optional_copy_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__123__optional_storage_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  std::__optional_destruct_base<fido::PinParameters,false>::__optional_destruct_base[abi:sn180100]<fido::PinParameters>(a1, a2);
  return a1;
}

uint64_t std::__optional_destruct_base<fido::PinParameters,false>::__optional_destruct_base[abi:sn180100]<fido::PinParameters>(uint64_t a1, uint64_t a2)
{
  fido::PinParameters::PinParameters((_DWORD *)a1, a2);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

_DWORD *fido::PinParameters::PinParameters(_DWORD *a1, uint64_t a2)
{
  fido::PinParameters::PinParameters(a1, a2);
  return a1;
}

{
  *a1 = *(_DWORD *)a2;
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 2), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t std::as_bytes[abi:sn180100]<unsigned char const,18446744073709551615ul>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return std::span<unsigned char const,18446744073709551615ul>::__as_bytes[abi:sn180100]((uint64_t)v3);
}

uint64_t std::span<unsigned char const,18446744073709551615ul>::__as_bytes[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  v3 = std::span<char const,18446744073709551615ul>::size[abi:sn180100](a1);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v5, v2, v3);
  return v5;
}

uint64_t std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WTF::ASCIILiteral::characters(a2);
}

uint64_t std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2);
}

_DWORD *WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t *WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

{
  _QWORD v3[2];
  WTF::FastMalloc *v4;
  _QWORD *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  v6 = a1;
  v5 = v3;
  v4 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v4);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>(_BYTE *a1, _BYTE *a2)
{
  _BYTE *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(a1, a2);
  a1[1] = 1;
  return result;
}

_BYTE *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(_BYTE *a1, _BYTE *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(a1, a2);
}

_BYTE *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(_BYTE *result, _BYTE *a2)
{
  if (!result)
    __break(1u);
  *result = *a2;
  return result;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::~optional(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  if ((*((_BYTE *)a1 + 32) & 1) != 0)
    WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *this)
{
  WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(this);
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)((char *)this + 8));
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::~optional(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
    WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *this)
{
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(this);
}

{
  _QWORD v2[2];
  _QWORD v3[2];
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  _QWORD *v6;
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v7;
  _QWORD *v8;
  char *v9;

  v2[1] = (char *)this + 8;
  v2[0] = 0;
  v9 = (char *)this + 8;
  v8 = v2;
  v5 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v5)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  v3[1] = this;
  v3[0] = 0;
  v7 = this;
  v6 = v3;
  v4 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  if ((*((_BYTE *)a1 + 24) & 1) != 0)
    WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *this)
{
  WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(this);
}

{
  _QWORD v1[2];
  WTF::DeferrableRefCountedBase *v2;
  _QWORD *v3;
  char *v4;

  v1[1] = (char *)this + 8;
  v1[0] = 0;
  v4 = (char *)this + 8;
  v3 = v1;
  v2 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v2)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((uint64_t *)a1, a2);
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2);
  return a1;
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_move_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_assign_base(fido::pin::KeyAgreementResponse *a1)
{
  std::__optional_copy_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_assign_base(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_copy_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_assign_base(fido::pin::KeyAgreementResponse *a1)
{
  std::__optional_move_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_base(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_move_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_base(fido::pin::KeyAgreementResponse *a1)
{
  std::__optional_copy_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_base(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_copy_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_base(fido::pin::KeyAgreementResponse *a1)
{
  std::__optional_storage_base<fido::pin::KeyAgreementResponse,false>::~__optional_storage_base(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_storage_base<fido::pin::KeyAgreementResponse,false>::~__optional_storage_base(fido::pin::KeyAgreementResponse *a1)
{
  std::__optional_destruct_base<fido::pin::KeyAgreementResponse,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_destruct_base<fido::pin::KeyAgreementResponse,false>::~__optional_destruct_base[abi:sn180100](fido::pin::KeyAgreementResponse *a1)
{
  if ((*((_BYTE *)a1 + 8) & 1) != 0)
    fido::pin::KeyAgreementResponse::~KeyAgreementResponse(a1);
  return a1;
}

uint64_t std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 48) & 1;
}

void fido::pin::TokenRequest::~TokenRequest(fido::pin::TokenRequest *this)
{
  fido::pin::TokenRequest::~TokenRequest(this);
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::pin::TokenRequest *)((char *)this + 32));
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100]((uint64_t)this + 8);
  WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref((uint64_t *)this);
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100](uint64_t a1)
{
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100](a1);
  return a1;
}

{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref(uint64_t *a1)
{
  WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v7 = a1;
  v6 = &v2;
  v3 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v8 = v3;
    WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref((WTF::ThreadSafeRefCountedBase *)(v3 + 8));
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(uint64_t a1)
{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(a1);
  return a1;
}

{
  WTF *v2;

  v2 = (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1, v2);
  return a1;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(v2, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
    v6 = v3;
    v4 = v3;
    std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]();
    std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(v4, v5);
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](v6, a2);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]()
{
  uint64_t v0;

  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  return *(_QWORD *)v0;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(a2);
}

void std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]()
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](uint64_t a1, WTF *a2)
{
  return WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(a1, a2);
}

uint64_t std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(uint64_t a1)
{
  if (!a1)
    __break(1u);
  return std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(a1);
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(uint64_t a1)
{
  std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(a1);
  return a1;
}

{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)(a1 + 32));
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)a1);
  return a1;
}

uint64_t WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(uint64_t a1, WTF *a2)
{
  return WTF::fastFree(a2, a2);
}

fido::pin::TokenRequest *std::__optional_move_assign_base<fido::pin::TokenRequest,false>::~__optional_move_assign_base(fido::pin::TokenRequest *a1)
{
  std::__optional_copy_assign_base<fido::pin::TokenRequest,false>::~__optional_copy_assign_base(a1);
  return a1;
}

fido::pin::TokenRequest *std::__optional_copy_assign_base<fido::pin::TokenRequest,false>::~__optional_copy_assign_base(fido::pin::TokenRequest *a1)
{
  std::__optional_move_base<fido::pin::TokenRequest,false>::~__optional_move_base(a1);
  return a1;
}

fido::pin::TokenRequest *std::__optional_move_base<fido::pin::TokenRequest,false>::~__optional_move_base(fido::pin::TokenRequest *a1)
{
  std::__optional_copy_base<fido::pin::TokenRequest,false>::~__optional_copy_base(a1);
  return a1;
}

fido::pin::TokenRequest *std::__optional_copy_base<fido::pin::TokenRequest,false>::~__optional_copy_base(fido::pin::TokenRequest *a1)
{
  std::__optional_storage_base<fido::pin::TokenRequest,false>::~__optional_storage_base(a1);
  return a1;
}

fido::pin::TokenRequest *std::__optional_storage_base<fido::pin::TokenRequest,false>::~__optional_storage_base(fido::pin::TokenRequest *a1)
{
  std::__optional_destruct_base<fido::pin::TokenRequest,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

fido::pin::TokenRequest *std::__optional_destruct_base<fido::pin::TokenRequest,false>::~__optional_destruct_base[abi:sn180100](fido::pin::TokenRequest *a1)
{
  if ((*((_BYTE *)a1 + 48) & 1) != 0)
    fido::pin::TokenRequest::~TokenRequest(a1);
  return a1;
}

WTF::CString *std::__optional_move_assign_base<WTF::CString,false>::~__optional_move_assign_base(WTF::CString *a1)
{
  std::__optional_copy_assign_base<WTF::CString,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WTF::CString *std::__optional_copy_assign_base<WTF::CString,false>::~__optional_copy_assign_base(WTF::CString *a1)
{
  std::__optional_move_base<WTF::CString,false>::~__optional_move_base(a1);
  return a1;
}

WTF::CString *std::__optional_move_base<WTF::CString,false>::~__optional_move_base(WTF::CString *a1)
{
  std::__optional_copy_base<WTF::CString,false>::~__optional_copy_base(a1);
  return a1;
}

WTF::CString *std::__optional_copy_base<WTF::CString,false>::~__optional_copy_base(WTF::CString *a1)
{
  std::__optional_storage_base<WTF::CString,false>::~__optional_storage_base(a1);
  return a1;
}

WTF::CString *std::__optional_storage_base<WTF::CString,false>::~__optional_storage_base(WTF::CString *a1)
{
  std::__optional_destruct_base<WTF::CString,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WTF::CString *std::__optional_destruct_base<WTF::CString,false>::~__optional_destruct_base[abi:sn180100](WTF::CString *a1)
{
  if ((*((_BYTE *)a1 + 8) & 1) != 0)
    WTF::CString::~CString(a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_move_assign_base<fido::pin::TokenResponse,false>::~__optional_move_assign_base(fido::pin::TokenResponse *a1)
{
  std::__optional_copy_assign_base<fido::pin::TokenResponse,false>::~__optional_copy_assign_base(a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_copy_assign_base<fido::pin::TokenResponse,false>::~__optional_copy_assign_base(fido::pin::TokenResponse *a1)
{
  std::__optional_move_base<fido::pin::TokenResponse,false>::~__optional_move_base(a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_move_base<fido::pin::TokenResponse,false>::~__optional_move_base(fido::pin::TokenResponse *a1)
{
  std::__optional_copy_base<fido::pin::TokenResponse,false>::~__optional_copy_base(a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_copy_base<fido::pin::TokenResponse,false>::~__optional_copy_base(fido::pin::TokenResponse *a1)
{
  std::__optional_storage_base<fido::pin::TokenResponse,false>::~__optional_storage_base(a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_storage_base<fido::pin::TokenResponse,false>::~__optional_storage_base(fido::pin::TokenResponse *a1)
{
  std::__optional_destruct_base<fido::pin::TokenResponse,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

fido::pin::TokenResponse *std::__optional_destruct_base<fido::pin::TokenResponse,false>::~__optional_destruct_base[abi:sn180100](fido::pin::TokenResponse *a1)
{
  if ((*((_BYTE *)a1 + 8) & 1) != 0)
    fido::pin::TokenResponse::~TokenResponse(a1);
  return a1;
}

void fido::pin::TokenResponse::~TokenResponse(fido::pin::TokenResponse *this)
{
  fido::pin::TokenResponse::~TokenResponse(this);
}

{
  WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref((uint64_t *)this);
}

_QWORD *WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(_QWORD *a1, WTF::RefCountedBase *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  return WTF::Ref<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>::Ref(a1, (uint64_t)a2);
}

uint64_t WTF::RefCounted<WebKit::Authenticator>::operator new()
{
  return WTF::fastMalloc((WTF *)0x358);
}

_QWORD *WTF::Ref<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>::Ref(_QWORD *a1, uint64_t a2)
{
  WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(a1, a2);
  return a1;
}

uint64_t std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF::ASCIILiteral *a1)
{
  return WTF::ASCIILiteral::characters(a1);
}

uint64_t std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
}

void fido::AuthenticatorGetInfoResponse::~AuthenticatorGetInfoResponse(fido::AuthenticatorGetInfoResponse *this)
{
  fido::AuthenticatorGetInfoResponse::~AuthenticatorGetInfoResponse(this);
}

{
  void *v2;

  std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((fido::AuthenticatorGetInfoResponse *)((char *)this + 112));
  std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)this + 72, v2);
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((fido::AuthenticatorGetInfoResponse *)((char *)this + 48));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::AuthenticatorGetInfoResponse *)((char *)this + 24));
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~set[abi:sn180100]((uint64_t)this);
}

WTF::ASCIILiteral *std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, void *a2)
{
  std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1, a2);
  return a1;
}

WTF::ASCIILiteral *std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~set[abi:sn180100](uint64_t a1)
{
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~set[abi:sn180100](a1);
  return a1;
}

{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~__tree(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  std::__optional_copy_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(WTF::ASCIILiteral *a1)
{
  std::__optional_move_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(WTF::ASCIILiteral *a1)
{
  std::__optional_copy_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(WTF::ASCIILiteral *a1)
{
  std::__optional_storage_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_storage_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(WTF::ASCIILiteral *a1)
{
  std::__optional_destruct_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](WTF::ASCIILiteral *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

uint64_t std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(uint64_t a1, void *a2)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1, a2);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(uint64_t a1, void *a2)
{
  std::__optional_move_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(a1, a2);
  return a1;
}

uint64_t std::__optional_move_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(uint64_t a1, void *a2)
{
  std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(a1, a2);
  return a1;
}

uint64_t std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(uint64_t a1, void *a2)
{
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(uint64_t a1, void *a2)
{
  std::__optional_destruct_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_destruct_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  std::__optional_copy_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1);
  return a1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~__tree(uint64_t a1)
{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~__tree(a1);
  return a1;
}

{
  WTF *v2;

  v2 = (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(a1, v2);
  return a1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(result, *(_QWORD *)a2);
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(v2, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
    v6 = v3;
    v4 = v3;
    std::__to_address[abi:sn180100]<char const>();
    std::allocator_traits<WTF::FastAllocator<std::__tree_node<fido::ProtocolVersion,void *>>>::destroy[abi:sn180100]<fido::ProtocolVersion,void,void>(v4, v5);
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](v6, a2);
  }
  return result;
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<fido::ProtocolVersion,void *>>>::destroy[abi:sn180100]<fido::ProtocolVersion,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:sn180100]<fido::ProtocolVersion,0>(a2);
}

uint64_t std::__destroy_at[abi:sn180100]<fido::ProtocolVersion,0>(uint64_t result)
{
  if (!result)
    __break(1u);
  return result;
}

uint64_t WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, WTF::FastMalloc *a2, int a3)
{
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  *(_DWORD *)(a1 + 12) = a3;
  if (a2)
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::makeCredential(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACBB0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ACBD8;
  return result;
}

uint64_t *WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(a1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACBB0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::makeCredential(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t WebKit::CtapAuthenticator::makeCredential(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result;
  _BYTE *v4;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = (_BYTE *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueMakeCredentialAfterResponseReceived(v4, a2);
  }
  return result;
}

WTF::StringImpl *WTF::tryMakeString<WTF::ASCIILiteral,unsigned char>(_QWORD *a1, _OWORD *a2, char *a3)
{
  unsigned __int8 v5;
  __int128 v6;
  _BYTE v7[16];
  char *v8;
  _OWORD *v9;
  _QWORD *v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v6 = *a2;
  WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter((uint64_t)v7, v6, *((uint64_t *)&v6 + 1));
  WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(&v5, *v8);
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(a1, (WTF *)v7, &v5);
}

BOOL WTF::operator!(WTF::String *a1)
{
  return WTF::String::isNull(a1);
}

WTF::StringImpl *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(_QWORD *a1, WTF *a2, unsigned __int8 *a3)
{
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *result;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned __int8 *v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD v16[2];
  WTF::StringImpl *v17;
  _QWORD *v18;
  uint64_t *v19;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a2);
  v5 = WTF::StringTypeAdapter<unsigned char,void>::length(v12);
  WTF::checkedSum<int,unsigned int,unsigned int>((uint64_t)&v11, v4, v5);
  if (WTF::RecordOverflow::hasOverflowed((WTF::RecordOverflow *)&v11))
  {
    memset(a1, 0, sizeof(_QWORD));
    return (WTF::StringImpl *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1);
  }
  else
  {
    WTF::are8Bit<WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<unsigned char,void> &>(v13, (WTF::RefCountedBase *)v12);
    v10 = 1;
    v7 = WTF::Checked<int,WTF::RecordOverflow>::operator int(&v11);
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(&v9, v7, 1, *(_QWORD *)v13, *((_QWORD *)v13 + 1), *v12);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, &v9);
    v15 = &v9;
    v16[1] = &v9;
    v16[0] = 0;
    v19 = &v9;
    v18 = v16;
    result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v9);
    v17 = result;
    if (result)
      return WTF::StringImpl::deref(v17, v8);
  }
  return result;
}

uint64_t WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)v7);
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::StringTypeAdapter(a1, v4, v5);
  return a1;
}

_BYTE *WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(_BYTE *a1, char a2)
{
  WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(a1, a2);
  return a1;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  _BYTE v6[8];
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>((uint64_t)v6, a2);
  WTF::checkedSum<int,unsigned int>((uint64_t)&v5, v7);
  return WTF::operator+<int,int,WTF::RecordOverflow>(a1, (WTF::RecordOverflow *)v6, (WTF::RecordOverflow *)&v5);
}

uint64_t WTF::StringTypeAdapter<unsigned char,void>::length(unsigned __int8 *a1)
{
  return WTF::lengthOfIntegerAsString<unsigned char>(*a1);
}

BOOL WTF::RecordOverflow::hasOverflowed(WTF::RecordOverflow *this)
{
  return *(_BYTE *)this != 0;
}

void WTF::are8Bit<WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<unsigned char,void> &>(WTF *a1, WTF::RefCountedBase *a2)
{
  WTF::isIntegralOrPointerType(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
}

WTF::StringImpl *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(uint64_t *a1, unsigned int a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  WTF::RefCountedBase *v7;
  WTF::FastCompactMalloc *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::RefCountedBase *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::RefCountedBase *v14;
  WTF::FastCompactMalloc *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::RefCountedBase *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  int v24;
  _DWORD *v25;
  _BYTE *v26;
  char v27;
  unsigned int v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t *v31;
  _DWORD **v32;
  _DWORD **v33;
  _QWORD v34[2];
  _QWORD v35[2];
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  _DWORD **v39;
  _QWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  _DWORD **v50;
  uint64_t *v51;
  _DWORD **v52;
  uint64_t *v53;
  _DWORD **v54;
  uint64_t *v55;
  _DWORD **v56;
  uint64_t *v57;
  uint64_t v58;
  WTF::RefCountedBase *v59;
  uint64_t v60;
  uint64_t *v61;
  WTF::RefCountedBase *v62;
  _DWORD **v63;
  uint64_t v64;
  _DWORD **v65;
  uint64_t v66;
  _DWORD **v67;
  uint64_t v68;
  _DWORD **v69;
  uint64_t v70;
  _DWORD **v71;
  uint64_t v72;
  WTF::RefCountedBase *v73;
  uint64_t v74;
  uint64_t *v75;
  WTF::RefCountedBase *v76;
  _DWORD **v77;
  uint64_t v78;
  _DWORD **v79;
  uint64_t v80;
  _DWORD **v81;
  uint64_t v82;
  _DWORD **v83;
  uint64_t v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD **v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _DWORD **v94;
  uint64_t v95;
  _DWORD **v96;
  _DWORD *v97;
  _DWORD *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;

  v31 = a1;
  *((_QWORD *)&v30 + 1) = a5;
  *(_QWORD *)&v30 = a4;
  v29 = a6;
  v28 = a2;
  v27 = a3;
  if ((a3 & 1) != 0)
  {
    v26 = 0;
    v63 = &v25;
    v62 = (WTF::RefCountedBase *)v28;
    v61 = (uint64_t *)&v26;
    if (v28)
    {
      v7 = v62;
      if ((unint64_t)v7 <= WTF::StringImpl::maxInternalLength<unsigned char>())
      {
        v60 = 0;
        WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v59, v62);
        v8 = (WTF::FastCompactMalloc *)WTF::StringImpl::allocationSize<unsigned char>((WTF::RefCountedBase *)&v59);
        v60 = WTF::FastCompactMalloc::tryMalloc(v8);
        if (v60)
        {
          v9 = WTF::StringImpl::tailPointer<unsigned char>(v60);
          *v61 = v9;
          v92 = &v58;
          v91 = v60;
          v90 = v62;
          WTF::StringImpl::operator new();
          v11 = (WTF::RefCountedBase *)v10;
          WTF::StringImpl::StringImpl(v10, v90);
          WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(&v58, v11);
          WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v25, &v58);
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(&v58);
        }
        else
        {
          *v61 = 0;
          v65 = &v25;
          v64 = 0;
          v71 = &v25;
          v70 = 0;
          v25 = 0;
        }
      }
      else
      {
        *v61 = 0;
        v67 = &v25;
        v66 = 0;
        v69 = &v25;
        v68 = 0;
        v25 = 0;
      }
    }
    else
    {
      *v61 = 0;
      v89 = &v25;
      v88 = MEMORY[0x1E0CBEF70];
      v94 = &v25;
      v93 = MEMORY[0x1E0CBEF70];
      v98 = (_DWORD *)MEMORY[0x1E0CBEF70];
      if (MEMORY[0x1E0CBEF70])
        WTF::StringImpl::ref(v98);
      v25 = v98;
    }
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v25))
    {
      v45 = a1;
      v44 = 0;
      v47 = a1;
      v46 = 0;
      *a1 = 0;
      v24 = 1;
    }
    else
    {
      if (v26)
      {
        v23 = v30;
        v22 = v29;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(v26, v30, *((uint64_t *)&v30 + 1), v29);
      }
      v53 = a1;
      v52 = &v25;
      v55 = a1;
      v54 = &v25;
      *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)&v25);
      v24 = 1;
    }
    v33 = &v25;
    v34[1] = &v25;
    v34[0] = 0;
    v41 = &v25;
    v40 = v34;
    result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v25);
    v37 = result;
    if (result)
      return WTF::StringImpl::deref(v37, v13);
  }
  else
  {
    v21 = 0;
    v77 = &v20;
    v76 = (WTF::RefCountedBase *)v28;
    v75 = &v21;
    if (v28)
    {
      v14 = v76;
      if ((unint64_t)v14 <= WTF::StringImpl::maxInternalLength<char16_t>())
      {
        v74 = 0;
        WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v73, v76);
        v15 = (WTF::FastCompactMalloc *)WTF::StringImpl::allocationSize<char16_t>((WTF::RefCountedBase *)&v73);
        v74 = WTF::FastCompactMalloc::tryMalloc(v15);
        if (v74)
        {
          v16 = WTF::StringImpl::tailPointer<char16_t>(v74);
          *v75 = v16;
          v101 = &v72;
          v100 = v74;
          v99 = v76;
          WTF::StringImpl::operator new();
          v18 = v17;
          WTF::StringImpl::StringImpl(v17, v99);
          WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(&v72, v18);
          WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v20, &v72);
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(&v72);
        }
        else
        {
          *v75 = 0;
          v79 = &v20;
          v78 = 0;
          v85 = &v20;
          v84 = 0;
          v20 = 0;
        }
      }
      else
      {
        *v75 = 0;
        v81 = &v20;
        v80 = 0;
        v83 = &v20;
        v82 = 0;
        v20 = 0;
      }
    }
    else
    {
      *v75 = 0;
      v87 = &v20;
      v86 = MEMORY[0x1E0CBEF70];
      v96 = &v20;
      v95 = MEMORY[0x1E0CBEF70];
      v97 = (_DWORD *)MEMORY[0x1E0CBEF70];
      if (MEMORY[0x1E0CBEF70])
        WTF::StringImpl::ref(v97);
      v20 = v97;
    }
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v20))
    {
      v43 = a1;
      v42 = 0;
      v49 = a1;
      v48 = 0;
      *a1 = 0;
      v24 = 1;
    }
    else
    {
      if (v21)
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(v21, v30, *((uint64_t *)&v30 + 1), v29);
      v51 = a1;
      v50 = &v20;
      v57 = a1;
      v56 = &v20;
      *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)&v20);
      v24 = 1;
    }
    v32 = &v20;
    v35[1] = &v20;
    v35[0] = 0;
    v39 = &v20;
    v38 = v35;
    result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v20);
    v36 = result;
    if (result)
      return WTF::StringImpl::deref(v36, v19);
  }
  return result;
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::operator int(unsigned int *a1)
{
  _BOOL8 hasOverflowed;

  hasOverflowed = WTF::RecordOverflow::hasOverflowed((WTF::RecordOverflow *)a1);
  if (hasOverflowed)
    WTF::RecordOverflow::crash((WTF::RecordOverflow *)hasOverflowed);
  return a1[1];
}

uint64_t WTF::operator+<int,int,WTF::RecordOverflow>(uint64_t a1, WTF::RecordOverflow *this, WTF::RecordOverflow *a3)
{
  BOOL hasOverflowed;
  BOOL v7;
  int v9;
  int v10;
  int v11;
  WTF::RecordOverflow *v12;
  WTF::RecordOverflow *v13;
  uint64_t v14;

  v14 = a1;
  v13 = this;
  v12 = a3;
  hasOverflowed = WTF::RecordOverflow::hasOverflowed(this);
  v7 = 1;
  if (!hasOverflowed)
    v7 = WTF::RecordOverflow::hasOverflowed(a3);
  if (v7)
    return WTF::Checked<int,WTF::RecordOverflow>::Checked(a1);
  v11 = 0;
  v9 = WTF::Checked<int,WTF::RecordOverflow>::operator int((unsigned int *)this);
  v10 = WTF::Checked<int,WTF::RecordOverflow>::operator int((unsigned int *)a3);
  if (((WTF::safeAdd<WTF::RecordOverflow,int,int,int,void>(v9, v10, &v11) ^ 1) & 1) != 0)
    return WTF::Checked<int,WTF::RecordOverflow>::Checked(a1);
  else
    return WTF::Checked<int,WTF::RecordOverflow>::Checked<int>(a1, v11);
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>(uint64_t a1, unsigned int a2)
{
  WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>(a1, a2);
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((_BYTE *)a1);
  if (!WTF::isInBounds<int,unsigned int>(a2))
    WTF::RecordOverflow::overflowed((_BYTE *)a1);
  *(_DWORD *)(a1 + 4) = a2;
  return a1;
}

uint64_t WTF::checkedSum<int,unsigned int>(uint64_t a1, unsigned int a2)
{
  return WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>(a1, a2);
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked(uint64_t a1)
{
  WTF::Checked<int,WTF::RecordOverflow>::Checked(a1);
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((_BYTE *)a1);
  *(_DWORD *)(a1 + 4) = 0;
  WTF::RecordOverflow::overflowed((_BYTE *)a1);
  return a1;
}

uint64_t WTF::safeAdd<WTF::RecordOverflow,int,int,int,void>(int a1, int a2, _DWORD *a3)
{
  return WTF::safeAdd<int,int,int>(a1, a2, a3) & 1;
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked<int>(uint64_t a1, int a2)
{
  WTF::Checked<int,WTF::RecordOverflow>::Checked<int>(a1, a2);
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((_BYTE *)a1);
  WTF::isInBounds<int,int>();
  *(_DWORD *)(a1 + 4) = a2;
  return a1;
}

_BYTE *WTF::RecordOverflow::RecordOverflow(_BYTE *this)
{
  *this = 0;
  return this;
}

_BYTE *WTF::RecordOverflow::overflowed(_BYTE *this)
{
  *this = 1;
  return this;
}

uint64_t WTF::safeAdd<int,int,int>(int a1, int a2, _DWORD *a3)
{
  return WTF::ArithmeticOperations<int,int,int,true,true>::add(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<int,int,int,true,true>::add(int a1, int a2, _DWORD *a3)
{
  char v5;

  if (__OFADD__(a1, a2))
  {
    v5 = 0;
  }
  else
  {
    *a3 = a1 + a2;
    v5 = 1;
  }
  return v5 & 1;
}

void WTF::RecordOverflow::crash(WTF::RecordOverflow *this)
{
  __break(0xC471u);
}

void WTF::isInBounds<int,int>()
{
  WTF::BoundsChecker<int,int,true,true,true>::inBounds();
}

BOOL WTF::isInBounds<int,unsigned int>(unsigned int a1)
{
  return WTF::BoundsChecker<int,unsigned int,true,true,false>::inBounds((WTF *)a1);
}

BOOL WTF::BoundsChecker<int,unsigned int,true,true,false>::inBounds(WTF *a1)
{
  unsigned int v1;

  v1 = a1;
  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  return v1 <= 0x7FFFFFFF;
}

uint64_t WTF::lengthOfIntegerAsString<unsigned char>(unsigned __int8 a1)
{
  return WTF::lengthOfIntegerAsStringImpl<unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1);
}

uint64_t WTF::lengthOfIntegerAsStringImpl<unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1)
{
  unsigned int v2;

  v2 = 0;
  do
  {
    ++v2;
    a1 /= 0xAu;
  }
  while (a1);
  return v2;
}

unint64_t WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<unsigned char>((uint64_t)v8, a1);
  v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)v8);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>>(&a1[v4], a4);
}

unint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v4;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<char16_t>((uint64_t)v8, a1);
  v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)v8);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned char,void>>((_WORD *)(a1 + 2 * v4), a4);
}

uint64_t WTF::StringImpl::maxInternalLength<unsigned char>()
{
  uint64_t v1;
  uint64_t v2;

  v2 = 0x7FFFFFFFLL;
  v1 = std::numeric_limits<unsigned int>::max[abi:sn180100]() - 32;
  return *std::min[abi:sn180100]<unsigned long>(&v2, &v1);
}

uint64_t WTF::FastCompactMalloc::tryMalloc(WTF::FastCompactMalloc *this)
{
  uint64_t v2;
  _QWORD v3[2];
  uint64_t v4;

  v3[1] = this;
  WTF::tryFastCompactMalloc(this);
  v2 = 0;
  if (WTF::TryMallocReturnValue::getValue<void>(v3, &v2))
    v4 = v2;
  else
    v4 = 0;
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union((uint64_t)v3);
  return v4;
}

uint64_t WTF::StringImpl::allocationSize<unsigned char>(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase *v2;
  uint64_t v4;
  _BYTE v5[8];
  _BYTE v6[8];
  WTF::RefCountedBase *v7;

  v7 = a1;
  v2 = (WTF::RefCountedBase *)WTF::StringImpl::tailOffset<unsigned char>();
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v4, a1);
  WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v5, (WTF::RefCountedBase *)&v4, (WTF::RefCountedBase *)1);
  WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v6, v2, (WTF::RefCountedBase *)v5);
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get((WTF::RefCountedBase *)v6);
}

WTF::RefCountedBase **WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(WTF::RefCountedBase **a1, WTF::RefCountedBase *a2)
{
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(a1, a2);
  return a1;
}

{
  WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a2);
  *a1 = a2;
  return a1;
}

uint64_t WTF::StringImpl::tailPointer<unsigned char>(uint64_t a1)
{
  return a1 + WTF::StringImpl::tailOffset<unsigned char>();
}

_QWORD *std::min[abi:sn180100]<unsigned long>(_QWORD *a1, _QWORD *a2)
{
  return std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

_QWORD *std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

BOOL WTF::TryMallocReturnValue::getValue<void>(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return *a2 != 0;
}

WTF::RefCountedBase **WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2, WTF::RefCountedBase *a3)
{
  uint64_t v6;
  WTF::RefCountedBase *v7[4];

  v7[3] = a1;
  v7[2] = a2;
  v7[1] = a3;
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(v7, a2);
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v6, a3);
  return WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(a1, (WTF::RefCountedBase *)v7, (WTF::RefCountedBase *)&v6);
}

uint64_t WTF::StringImpl::tailOffset<unsigned char>()
{
  return WTF::roundUpToMultipleOf<1ul>();
}

WTF::RefCountedBase **WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2, WTF::RefCountedBase *a3)
{
  WTF::RefCountedBase *v5;
  uint64_t v6;
  WTF::RefCountedBase *v7;
  WTF::RefCountedBase *v8;
  WTF::RefCountedBase *v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v6, a2);
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v5, v7);
  return WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(a1, (WTF::RefCountedBase *)&v6, (WTF::RefCountedBase *)&v5);
}

_QWORD *WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(_QWORD *a1, WTF::RefCountedBase *a2)
{
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1, a2);
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  *a1 = *(_QWORD *)a2;
  return a1;
}

WTF::RefCountedBase **WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *this, WTF::RefCountedBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::RefCountedBase *v9[4];

  v9[3] = a1;
  v9[2] = this;
  v9[1] = a3;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a3);
  v9[0] = 0;
  v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(this);
  v7 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a3);
  if (((WTF::safeAdd<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(v6, v7, v9) ^ 1) & 1) != 0)
    WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1);
  return WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>((WTF::RefCountedBase **)a1, v9[0]);
}

void WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(WTF::CrashOnOverflow *a1)
{
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1);
}

{
  *(_QWORD *)a1 = 0;
  WTF::CrashOnOverflow::overflowed(a1);
}

uint64_t sub_196DEDF10()
{
  uint64_t v0;

  return v0;
}

uint64_t WTF::safeAdd<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return WTF::safeAdd<unsigned long,unsigned long,unsigned long>(a1, a2, a3) & 1;
}

void WTF::CrashOnOverflow::overflowed(WTF::CrashOnOverflow *this)
{
  WTF::RecordOverflow::crash(this);
}

uint64_t WTF::safeAdd<unsigned long,unsigned long,unsigned long>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::add(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::add(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char v5;

  if (__CFADD__(a1, a2))
  {
    v5 = 0;
  }
  else
  {
    *a3 = a1 + a2;
    v5 = 1;
  }
  return v5 & 1;
}

uint64_t WTF::roundUpToMultipleOf<1ul>()
{
  return 20;
}

WTF::RefCountedBase **WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *this, WTF::RefCountedBase *a3)
{
  unint64_t v6;
  unint64_t v7;
  WTF::RefCountedBase *v9[4];

  v9[3] = a1;
  v9[2] = this;
  v9[1] = a3;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a3);
  v9[0] = 0;
  v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(this);
  v7 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a3);
  if (((WTF::safeMultiply<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(v6, v7, v9) ^ 1) & 1) != 0)WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1);
  return WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>((WTF::RefCountedBase **)a1, v9[0]);
}

uint64_t WTF::safeMultiply<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  return WTF::safeMultiply<unsigned long,unsigned long,unsigned long>(a1, a2, a3) & 1;
}

uint64_t WTF::safeMultiply<unsigned long,unsigned long,unsigned long>(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  return WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::multiply(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::multiply(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  char v4;

  if (is_mul_ok(a1, a2))
  {
    *a3 = a1 * a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t WTF::StringImpl::StringImpl(uint64_t a1, unsigned int a2)
{
  WTF::StringImpl::StringImpl(a1, a2, 0);
  return a1;
}

uint64_t WTF::StringImpl::StringImpl(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v6[2];
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  v4 = WTF::StringImpl::tailPointer<unsigned char>(a1);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, v4, v8);
  WTF::StringImplShape::StringImplShape(a1, v6[0], v6[1]);
  return a1;
}

uint64_t WTF::StringImplShape::StringImplShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  *(_DWORD *)a1 = 2;
  *(_DWORD *)(a1 + 4) = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v5);
  *(_QWORD *)(a1 + 8) = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v5);
  *(_DWORD *)(a1 + 16) = 4;
  return a1;
}

{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  *(_DWORD *)a1 = 2;
  *(_DWORD *)(a1 + 4) = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v5);
  *(_QWORD *)(a1 + 8) = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v5);
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

_BYTE *WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<unsigned char>(uint64_t a1, _BYTE *a2)
{
  _BYTE *v3;
  size_t v4;
  _QWORD v6[5];
  _QWORD v7[2];

  v6[3] = a1;
  v6[2] = a2;
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, *(_QWORD *)a1, *(unsigned int *)(a1 + 8));
  v7[1] = v6[1];
  v7[0] = v6[0];
  v6[4] = a2;
  v3 = (_BYTE *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  v4 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  return WTF::copyElements<unsigned char>(a2, v3, v4);
}

unint64_t WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>>(_BYTE *a1, unsigned __int8 a2)
{
  unsigned __int8 v3;

  v3 = a2;
  return WTF::StringTypeAdapter<unsigned char,void>::writeTo<unsigned char>(&v3, a1);
}

_BYTE *WTF::copyElements<unsigned char>(_BYTE *result, _BYTE *a2, size_t a3)
{
  if (a3 == 1)
  {
    *result = *a2;
  }
  else if (a3)
  {
    return memcpy(result, a2, a3);
  }
  return result;
}

unint64_t WTF::StringTypeAdapter<unsigned char,void>::writeTo<unsigned char>(unsigned __int8 *a1, _BYTE *a2)
{
  return WTF::writeIntegerToBuffer<unsigned char,unsigned char>(*a1, a2);
}

unint64_t WTF::writeIntegerToBuffer<unsigned char,unsigned char>(unsigned __int8 a1, _BYTE *a2)
{
  return WTF::writeIntegerToBufferImpl<unsigned char,unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1, a2);
}

unint64_t WTF::writeIntegerToBufferImpl<unsigned char,unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1, _BYTE *a2)
{
  unint64_t result;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  char v6[4];
  _BYTE *v7;
  unsigned __int8 v8;

  v8 = a1;
  v7 = a2;
  result = std::end[abi:sn180100]<unsigned char,4ul>((uint64_t)v6);
  v5 = (_BYTE *)result;
  do
  {
    *--v5 = v8 % 0xAu + 48;
    v8 /= 0xAu;
  }
  while (v8);
  while ((unint64_t)v5 < result)
  {
    v3 = v5++;
    LOBYTE(v3) = *v3;
    v4 = v7++;
    *v4 = (_BYTE)v3;
  }
  return result;
}

uint64_t std::end[abi:sn180100]<unsigned char,4ul>(uint64_t a1)
{
  return a1 + 4;
}

uint64_t WTF::StringImpl::maxInternalLength<char16_t>()
{
  unint64_t v1;
  uint64_t v2;

  v2 = 0x7FFFFFFFLL;
  v1 = ((unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() - 32) >> 1;
  return *std::min[abi:sn180100]<unsigned long>(&v2, &v1);
}

uint64_t WTF::StringImpl::allocationSize<char16_t>(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase *v2;
  uint64_t v4;
  _BYTE v5[8];
  _BYTE v6[8];
  WTF::RefCountedBase *v7;

  v7 = a1;
  v2 = (WTF::RefCountedBase *)WTF::StringImpl::tailOffset<char16_t>();
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v4, a1);
  WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v5, (WTF::RefCountedBase *)&v4, (WTF::RefCountedBase *)2);
  WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v6, v2, (WTF::RefCountedBase *)v5);
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get((WTF::RefCountedBase *)v6);
}

uint64_t WTF::StringImpl::tailPointer<char16_t>(uint64_t a1)
{
  return a1 + WTF::StringImpl::tailOffset<char16_t>();
}

uint64_t WTF::StringImpl::tailOffset<char16_t>()
{
  return WTF::roundUpToMultipleOf<2ul>();
}

uint64_t WTF::roundUpToMultipleOf<2ul>()
{
  return 20;
}

WTF::StringImpl *WTF::StringImpl::StringImpl(WTF::StringImpl *this, unsigned int a2)
{
  WTF::StringImpl::StringImpl(this, a2);
  return this;
}

{
  uint64_t v3;
  uint64_t v5[2];
  unsigned int v6;
  WTF::StringImpl *v7;

  v7 = this;
  v6 = a2;
  v3 = WTF::StringImpl::tailPointer<char16_t>((uint64_t)this);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v5, v3, v6);
  WTF::StringImplShape::StringImplShape((uint64_t)this, v5[0], v5[1]);
  return this;
}

char *WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<char16_t>(uint64_t a1, uint64_t a2)
{
  char *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  _QWORD v7[5];
  _QWORD v8[2];

  v7[3] = a1;
  v7[2] = a2;
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v7, *(_QWORD *)a1, *(unsigned int *)(a1 + 8));
  v8[1] = v7[1];
  v8[0] = v7[0];
  v7[4] = a2;
  v3 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(a2);
  v4 = (unsigned __int16 *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v8);
  v5 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v8);
  return WTF::copyElements(v3, v4, v5);
}

unint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned char,void>>(_WORD *a1, unsigned __int8 a2)
{
  unsigned __int8 v3;

  v3 = a2;
  return WTF::StringTypeAdapter<unsigned char,void>::writeTo<char16_t>(&v3, a1);
}

char *WTF::copyElements(char *this, unsigned __int16 *a2, unint64_t a3)
{
  const char *v3;
  int8x16_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned __int16 *v9;
  _WORD *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16x2_t v13;
  char *v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  int8x16_t v21;
  char v22;
  int8x16x2_t v23;
  int8x16x2_t v24;
  int8x16x2_t v25;
  int8x16x2_t v26;

  v17 = (uint64_t)this;
  v15 = &this[2 * a3];
  if (a3 >= 0x40)
  {
    v14 = &this[2 * (a3 & 0x7FFFFFFFFFFFFFC0)];
    v22 = 0;
    v3 = &v22;
    v4 = vld1q_dup_s8(v3);
    v13.val[1] = v4;
    do
    {
      v19 = (int8x16_t *)WTF::bitwise_cast<unsigned char const*,char const*>((uint64_t)a2);
      v13.val[0] = v19[3];
      v12 = v19[2];
      v11 = v19[1];
      a2 += 32;
      v21 = *v19;
      v5 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v17);
      v23.val[0] = v21;
      v23.val[1] = v13.val[1];
      vst2q_s8(v5, v23);
      v18 = v17 + 32;
      v6 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      v24.val[0] = v11;
      v24.val[1] = v13.val[1];
      vst2q_s8(v6, v24);
      v18 += 32;
      v20 = WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      v25.val[0] = v12;
      v7 = (char *)v20;
      v25.val[1] = v13.val[1];
      vst2q_s8(v7, v25);
      v18 += 32;
      this = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      v8 = this;
      v26 = v13;
      vst2q_s8(v8, v26);
      v17 = v18 + 32;
    }
    while ((char *)v17 != v14);
  }
  while ((char *)v17 != v15)
  {
    v9 = a2;
    a2 = (unsigned __int16 *)((char *)a2 + 1);
    v10 = (_WORD *)v17;
    v17 += 2;
    *v10 = *(unsigned __int8 *)v9;
  }
  return this;
}

unint64_t WTF::StringTypeAdapter<unsigned char,void>::writeTo<char16_t>(unsigned __int8 *a1, _WORD *a2)
{
  return WTF::writeIntegerToBuffer<char16_t,unsigned char>(*a1, a2);
}

unint64_t WTF::writeIntegerToBuffer<char16_t,unsigned char>(unsigned __int8 a1, _WORD *a2)
{
  return WTF::writeIntegerToBufferImpl<char16_t,unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1, a2);
}

unint64_t WTF::writeIntegerToBufferImpl<char16_t,unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1, _WORD *a2)
{
  unint64_t result;
  unsigned __int8 *v3;
  _WORD *v4;
  unsigned __int8 *v5;
  char v6[4];
  _WORD *v7;
  unsigned __int8 v8;

  v8 = a1;
  v7 = a2;
  result = std::end[abi:sn180100]<unsigned char,4ul>((uint64_t)v6);
  v5 = (unsigned __int8 *)result;
  do
  {
    *--v5 = v8 % 0xAu + 48;
    v8 /= 0xAu;
  }
  while (v8);
  while ((unint64_t)v5 < result)
  {
    v3 = v5++;
    LOWORD(v3) = *v3;
    v4 = v7++;
    *v4 = (_WORD)v3;
  }
  return result;
}

uint64_t WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::StringTypeAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  *(_QWORD *)a1 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v6);
  v4 = (WTF *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v6);
  WTF::stringLength(v4);
  *(_DWORD *)(a1 + 8) = (_DWORD)v4;
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WTF::stringLength(WTF *this)
{
  WTF *isIntegralOrPointerType;

  if ((unint64_t)this > 0x7FFFFFFF)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(this);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196DEEE48);
  }
}

_BYTE *WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getAssertion(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACC00;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACC00;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::getAssertion(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::getAssertion(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(WTF::ASCIILiteral *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v8;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v3 + 1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
  v5 = (uint64_t *)operator new(8, 0, v4);
  result = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v5, v8);
  ++*((_DWORD *)a1 + 3);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  if (a3 >= WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
    && a3 < WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1))
  {
    v5 = (uint64_t)(a3
                 - WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)) >> 3;
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
         + 8 * v5;
  }
  else
  {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = a1;
  v9[0] = a2;
  v8 = 16;
  v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1);
  v7 = v3
     + ((unint64_t)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1) >> 2)
     + 1;
  v4 = std::max[abi:sn180100]<unsigned long>(&v8, &v7);
  v5 = std::max[abi:sn180100]<unsigned long>(v9, v4);
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *v5) & 1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, unint64_t a2)
{
  void *v3;
  uint64_t v5;
  void *v6;

  if (a2 > WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    v6 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v5 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1, a2);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    v3 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v5, v3);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, (WTF::FastMalloc *)v6);
  }
  return 1;
}

_QWORD *std::max[abi:sn180100]<unsigned long>(_QWORD *a1, _QWORD *a2)
{
  return std::max[abi:sn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

_QWORD *std::max[abi:sn180100]<unsigned long,std::__less<void,void>>(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACC28;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACC28;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t WTF::VectorBuffer<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, unint64_t a2, int a3)
{
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  *(_DWORD *)(a1 + 12) = a3;
  if (a2)
    WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  return a1;
}

uint64_t *WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2, a3);
}

uint64_t *WTF::VectorCopier<false,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t i;

  for (i = (uint64_t)result; i != a2; i += 8)
  {
    v3 = (uint64_t *)operator new(8, 0, a3);
    result = WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(v3, i);
    a3 += 8;
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(uint64_t *a1, uint64_t a2)
{
  WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(a1, a2);
  return a1;
}

{
  uint64_t v4;

  v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2);
  WTF::RefCountedBase::ref((WTF::RefCountedBase *)(v4 + 8));
  *a1 = v4;
  return a1;
}

_QWORD *WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(_QWORD *a1, _QWORD *a2)
{
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::operator new()
{
  return WTF::fastMalloc((WTF *)0x18);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapper(_QWORD *a1, _QWORD *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapperBase(a1);
  *a1 = off_1E34ACC50;
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ACC78;
  return result;
}

_QWORD *WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(_QWORD *a1, _QWORD *a2)
{
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  *a1 = *a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACC50;
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

unint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((WTF::RunLoop *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

unint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(WTF::RunLoop *a1, uint64_t a2)
{
  _QWORD *v3;
  WTF *isMain;
  WTF *isIntegralOrPointerType;
  unint64_t result;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::RunLoop *v13;

  v13 = a1;
  v12 = a2;
  v3 = *(_QWORD **)a1;
  isMain = (WTF *)WTF::RunLoop::isMain(a1);
  if (((isMain ^ 1) & 1) != 0)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196DEFD84);
  }
  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!((_QWORD *)a1 + 1);
  if ((result & 1) == 0)
  {
    v11 = 0;
    v10 = v12;
    result = _ZNK3WTF6VectorINS_3RefIN7WebCore30AuthenticatorAssertionResponseENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEONS0_IhLm0ES9_Lm16ESA_EEENK3__0clEPS3_EUlRT_E_EEmRKSJ_((uint64_t)(v3 + 118), &v10);
    v11 = result;
    if (result != -1)
    {
      v7 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)(v3 + 118), v11);
      WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::copyRef(&v8, v7);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v9, &v8);
      WebKit::Authenticator::receiveRespond(v3);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v9);
      return (unint64_t)WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v8);
    }
  }
  return result;
}

uint64_t _ZNK3WTF6VectorINS_3RefIN7WebCore30AuthenticatorAssertionResponseENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEONS0_IhLm0ES9_Lm16ESA_EEENK3__0clEPS3_EUlRT_E_EEmRKSJ_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t i;

  for (i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    v3 = WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEON3WTF6VectorIhLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEENK3__0clEPN7WebCore30AuthenticatorAssertionResponseEENKUlRT_E_clIKNS1_3RefIS9_NS1_12RawPtrTraitsIS9_EENS1_21DefaultRefDerefTraitsIS9_EEEEEEDaSC_(a2, v3))
    {
      return i;
    }
  }
  return -1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[](uint64_t a1, unint64_t a2)
{
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, a2);
}

_QWORD *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::copyRef(_QWORD *a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(a1, *a2);
}

BOOL _ZZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEON3WTF6VectorIhLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEENK3__0clEPN7WebCore30AuthenticatorAssertionResponseEENKUlRT_E_clIKNS1_3RefIS9_NS1_12RawPtrTraitsIS9_EENS1_21DefaultRefDerefTraitsIS9_EEEEEEDaSC_(_QWORD *a1, uint64_t a2)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2) == *a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(uint64_t a1, unint64_t a2)
{
  WTF::CrashOnOverflow *v4;

  v4 = (WTF::CrashOnOverflow *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
  if (a2 >= (unint64_t)v4)
    WTF::CrashOnOverflow::overflowed(v4);
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + 8 * a2;
}

_QWORD *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(_QWORD *a1, uint64_t a2)
{
  WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(a1, a2);
  return a1;
}

{
  WTF::RefCountedBase::ref((WTF::RefCountedBase *)(a2 + 8));
  *a1 = a2;
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACCA0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACCA0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getRetries(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACCC8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACCC8;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  WebKit::CtapAuthenticator::getRetries(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WebKit::CtapAuthenticator::getRetries(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  WebKit::FidoAuthenticator *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit::FidoAuthenticator *v12;
  int v13;
  uint64_t v14[2];
  uint64_t v15;
  WTF::CStringBuffer *v16;
  uint64_t v17;
  WTF::CStringBuffer *v18;
  uint64_t v19;
  WTF::CStringBuffer *v20;
  os_log_type_t v21;
  os_log_t oslog;
  WTF::ASCIILiteral *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint8_t buf[56];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v24 = a1;
  v23 = a2;
  v3 = (WebKit::FidoAuthenticator *)a1[1];
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    oslog = (os_log_t)qword_1ECE71AC8;
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = oslog;
      v5 = v21;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v19, (uint64_t)v3);
      WTF::String::utf8();
      v6 = WTF::CString::data(&v20);
      WebKit::FidoAuthenticator::transportForDebugging(&v17, v3);
      WTF::String::utf8();
      v7 = WTF::CString::data(&v18);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v14, v23);
      v13 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v13);
      WTF::base64EncodeToString((uint64_t)&v15, v14[0], v14[1]);
      WTF::String::utf8();
      v8 = WTF::CString::data(&v16);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v6, v7, v8);
      _os_log_impl(&dword_196BCC000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getRetries: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v16);
      v27 = &v15;
      v28 = &v15;
      v33 = &v15;
      v34[1] = &v15;
      v34[0] = 0;
      v45 = &v15;
      v44 = v34;
      v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v15);
      if (v39)
        WTF::StringImpl::deref(v39, v9);
      WTF::CString::~CString((WTF::CString *)&v18);
      v26 = &v17;
      v29 = &v17;
      v32 = &v17;
      v35[1] = &v17;
      v35[0] = 0;
      v43 = &v17;
      v42 = v35;
      v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v17);
      if (v38)
        WTF::StringImpl::deref(v38, v10);
      WTF::CString::~CString((WTF::CString *)&v20);
      v25 = &v19;
      v30 = &v19;
      v31 = &v19;
      v36[1] = &v19;
      v36[0] = 0;
      v41 = &v19;
      v40 = v36;
      v37 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v19);
      if (v37)
        WTF::StringImpl::deref(v37, v11);
    }
    v12 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(v12, (uint64_t)v23);
  }
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACCF0;
  WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACCF0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::pin::KeyAgreementResponse *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

fido::pin::KeyAgreementResponse *WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  WebKit::FidoAuthenticator *v3;
  fido::pin::KeyAgreementResponse *result;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit::FidoAuthenticator *v13;
  int v14;
  uint64_t v15[2];
  uint64_t v16;
  WTF::CStringBuffer *v17;
  uint64_t v18;
  WTF::CStringBuffer *v19;
  uint64_t v20;
  WTF::CStringBuffer *v21;
  os_log_type_t v22;
  os_log_t oslog;
  WTF::ASCIILiteral *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint8_t buf[56];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v25 = a1;
  v24 = a2;
  v3 = (WebKit::FidoAuthenticator *)a1[1];
  result = (fido::pin::KeyAgreementResponse *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    oslog = (os_log_t)qword_1ECE71AC8;
    v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog;
      v6 = v22;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)v3);
      WTF::String::utf8();
      v7 = WTF::CString::data(&v21);
      WebKit::FidoAuthenticator::transportForDebugging(&v18, v3);
      WTF::String::utf8();
      v8 = WTF::CString::data(&v19);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, v24);
      v14 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
      WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
      WTF::String::utf8();
      v9 = WTF::CString::data(&v17);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v7, v8, v9);
      _os_log_impl(&dword_196BCC000, v5, v6, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v17);
      v28 = &v16;
      v29 = &v16;
      v34 = &v16;
      v35[1] = &v16;
      v35[0] = 0;
      v46 = &v16;
      v45 = v35;
      v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
      if (v40)
        WTF::StringImpl::deref(v40, v10);
      WTF::CString::~CString((WTF::CString *)&v19);
      v27 = &v18;
      v30 = &v18;
      v33 = &v18;
      v36[1] = &v18;
      v36[0] = 0;
      v44 = &v18;
      v43 = v36;
      v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
      if (v39)
        WTF::StringImpl::deref(v39, v11);
      WTF::CString::~CString((WTF::CString *)&v21);
      v26 = &v20;
      v31 = &v20;
      v32 = &v20;
      v37[1] = &v20;
      v37[0] = 0;
      v42 = &v20;
      v41 = v37;
      v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
      if (v38)
        WTF::StringImpl::deref(v38, v12);
    }
    v13 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(v13, (uint64_t)v24, a1[2]);
  }
  return result;
}

_QWORD *WTF::Function<void ()(WTF::String const&)>::Function<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACD18;
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  fido::pin::KeyAgreementResponse::KeyAgreementResponse();
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACD18;
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::call(uint64_t a1, fido::pin *a2)
{
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::operator()((WTF::RunLoop *)(a1 + 8), a2);
}

void WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::operator()(WTF::RunLoop *a1, fido::pin *a2)
{
  WebKit::FidoAuthenticator *v3;
  WTF *isMain;
  WTF *isIntegralOrPointerType;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit::FidoAuthenticator *v12;
  fido::pin *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::CStringBuffer *v16;
  uint64_t v17;
  WTF::CStringBuffer *v18;
  os_log_type_t v19;
  os_log_t oslog;
  fido::pin *v21;
  WTF::RunLoop *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD v29[2];
  _QWORD v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint8_t buf[40];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v22 = a1;
  v21 = a2;
  v3 = (WebKit::FidoAuthenticator *)*((_QWORD *)a1 + 1);
  isMain = (WTF *)WTF::RunLoop::isMain(a1);
  if (((isMain ^ 1) & 1) != 0)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x196DF1140);
  }
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    oslog = (os_log_t)qword_1ECE71AC8;
    v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog;
      v7 = v19;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v17, (uint64_t)v3);
      WTF::String::utf8();
      v8 = WTF::CString::data(&v18);
      WebKit::FidoAuthenticator::transportForDebugging(&v15, v3);
      WTF::String::utf8();
      v9 = WTF::CString::data(&v16);
      __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)v3, v8, v9);
      _os_log_impl(&dword_196BCC000, v6, v7, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement: Got pin from observer.", buf, 0x20u);
      WTF::CString::~CString((WTF::CString *)&v16);
      v24 = &v15;
      v25 = &v15;
      v28 = &v15;
      v29[1] = &v15;
      v29[0] = 0;
      v36 = &v15;
      v35 = v29;
      v32 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v15);
      if (v32)
        WTF::StringImpl::deref(v32, v10);
      WTF::CString::~CString((WTF::CString *)&v18);
      v23 = &v17;
      v26 = &v17;
      v27 = &v17;
      v30[1] = &v17;
      v30[0] = 0;
      v34 = &v17;
      v33 = v30;
      v31 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v17);
      if (v31)
        WTF::StringImpl::deref(v31, v11);
    }
    v12 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
    v13 = v21;
    v14 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1 + 16);
    WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(v12, v13, v14);
  }
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x48);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACD40;
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  fido::pin::TokenRequest::TokenRequest(a1 + 2, a2 + 2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACD40;
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::pin::TokenResponse *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

fido::pin::TokenResponse *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  WebKit::FidoAuthenticator *v3;
  fido::pin::TokenResponse *result;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];
  uint64_t v16;
  WTF::CStringBuffer *v17;
  uint64_t v18;
  WTF::CStringBuffer *v19;
  uint64_t v20;
  WTF::CStringBuffer *v21;
  os_log_type_t v22;
  os_log_t oslog;
  WTF::ASCIILiteral *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint8_t buf[56];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v25 = a1;
  v24 = a2;
  v3 = (WebKit::FidoAuthenticator *)a1[1];
  result = (fido::pin::TokenResponse *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    oslog = (os_log_t)qword_1ECE71AC8;
    v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog;
      v6 = v22;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)v3);
      WTF::String::utf8();
      v7 = WTF::CString::data(&v21);
      WebKit::FidoAuthenticator::transportForDebugging(&v18, v3);
      WTF::String::utf8();
      v8 = WTF::CString::data(&v19);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, v24);
      v14 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
      WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
      WTF::String::utf8();
      v9 = WTF::CString::data(&v17);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v7, v8, v9);
      _os_log_impl(&dword_196BCC000, v5, v6, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetPinTokenAfterRequestPin: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v17);
      v28 = &v16;
      v29 = &v16;
      v34 = &v16;
      v35[1] = &v16;
      v35[0] = 0;
      v46 = &v16;
      v45 = v35;
      v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
      if (v40)
        WTF::StringImpl::deref(v40, v10);
      WTF::CString::~CString((WTF::CString *)&v19);
      v27 = &v18;
      v30 = &v18;
      v33 = &v18;
      v36[1] = &v18;
      v36[0] = 0;
      v44 = &v18;
      v43 = v36;
      v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
      if (v39)
        WTF::StringImpl::deref(v39, v11);
      WTF::CString::~CString((WTF::CString *)&v21);
      v26 = &v20;
      v31 = &v20;
      v32 = &v20;
      v37[1] = &v20;
      v37[0] = 0;
      v42 = &v20;
      v41 = v37;
      v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
      if (v38)
        WTF::StringImpl::deref(v38, v12);
    }
    v13 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(v13, (uint64_t)v24, (fido::pin::TokenRequest *)(a1 + 2));
  }
  return result;
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&>((uint64_t)v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__impl::PublicKeyCredentialRequestOptions> const&>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__impl::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> const&>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> const&>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WTF::ASCIILiteral *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1);
}

WTF::ASCIILiteral *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1);
}

WTF::ASCIILiteral *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(*(WebKit::CtapAuthenticator ***)a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0::operator()(a1);
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0::operator()(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::makeCredential(*a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1);
}

WTF::ASCIILiteral *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(*(_QWORD *)a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1)
{
  return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_1::operator()((WebKit::CtapAuthenticator **)(a1 + 8));
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_1::operator()(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::getAssertion(*a1);
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find<fido::ProtocolVersion>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  v4 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  v14 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__lower_bound<fido::ProtocolVersion>(a1, a2, v4, v5);
  v13 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
  v6 = std::operator!=[abi:sn180100](&v14, &v13);
  v7 = 0;
  if (v6)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    v9 = v8;
    v10 = v15;
    v11 = (_DWORD *)std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::operator*[abi:sn180100]((uint64_t)&v14);
    v7 = !std::less<fido::ProtocolVersion>::operator()[abi:sn180100](v9, v10, v11);
  }
  if (v7)
    return v14;
  else
    return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__lower_bound<fido::ProtocolVersion>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  while (a3)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    if (std::less<fido::ProtocolVersion>::operator()[abi:sn180100](v4, (_DWORD *)(a3 + 28), a2))
    {
      a3 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      a4 = a3;
      a3 = *(_QWORD *)a3;
    }
  }
  std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](&v9, a4);
  return v9;
}

BOOL std::operator!=[abi:sn180100](_QWORD *a1, _QWORD *a2)
{
  return !std::operator==[abi:sn180100](a1, a2);
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]()
{
  uint64_t v0;
  uint64_t v2;

  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](&v2, v0);
  return v2;
}

BOOL std::less<fido::ProtocolVersion>::operator()[abi:sn180100](uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

uint64_t std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::operator*[abi:sn180100](uint64_t a1)
{
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + 28;
}

_QWORD *std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](_QWORD *a1, uint64_t a2)
{
  std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](a1, a2);
  return a1;
}

_QWORD *std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>((uint64_t)v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  fido *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  fido *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2);
}

uint64_t std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, fido *a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, a2);
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, fido *a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(*(_BYTE ***)a1, a2);
}

uint64_t std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(_BYTE **a1, fido *a2)
{
  return WebKit::CtapAuthenticator::tryDowngrade(void)::$_0::operator()(a1, a2);
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(void)::$_0::operator()(_BYTE **a1, fido *a2)
{
  uint64_t result;

  result = fido::isConvertibleToU2fRegisterCommand(a2, (const PublicKeyCredentialCreationOptions *)a2);
  **a1 = result & 1;
  return result;
}

uint64_t std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, fido *a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

uint64_t std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, fido *a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(*(_QWORD *)a1, a2);
}

uint64_t std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, fido *a2)
{
  return WebKit::CtapAuthenticator::tryDowngrade(void)::$_1::operator()((_BYTE **)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(void)::$_1::operator()(_BYTE **a1, fido *a2)
{
  uint64_t result;

  result = fido::isConvertibleToU2fSignCommand(a2, (const PublicKeyCredentialRequestOptions *)a2);
  **a1 = result & 1;
  return result;
}

uint64_t std::initializer_list<WebCore::AuthenticatorTransport>::end[abi:sn180100](_QWORD *a1)
{
  return *a1 + a1[1];
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF::FastMalloc *a2)
{
  char v3;

  if (a2)
    v3 = WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2) & 1;
  else
    v3 = 1;
  return v3 & 1;
}

void WebKit::CtapCcidDriver::transact(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  _QWORD *v12;
  WTF *v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;

  if (*(_DWORD *)(a1 + 16))
  {
    WebKit::CcidConnection::transact(*(_QWORD *)(a1 + 24), a2, a3);
  }
  else
  {
    v15 = 4224;
    v4 = (WTF *)*a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v18 = v5;
    v16 = 0x10000;
    v17 = v4;
    v6 = *a3;
    *a3 = 0;
    v7 = *(_QWORD *)(a1 + 24);
    apdu::ApduCommand::getEncodedCommand((apdu::ApduCommand *)&v15);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34ACDB8;
    v8[1] = v6;
    v8[2] = a1;
    v12 = v8;
    WebKit::CcidConnection::transact(v7, (uint64_t *)&v13, (uint64_t *)&v12);
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    v10 = v13;
    if (v13)
    {
      v13 = 0;
      v14 = 0;
      WTF::fastFree(v10, v9);
    }
    v11 = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      WTF::fastFree(v11, v9);
    }
  }
}

uint64_t WebKit::CtapCcidDriver::respondAsync(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WTF::RunLoop::main(a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34ACDE0;
  v7[1] = v4;
  v7[2] = v5;
  v7[3] = v6;
  v9 = v7;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

void WebKit::CtapCcidDriver::~CtapCcidDriver(WebKit::CtapCcidDriver *this, void *a2)
{
  WebKit::CcidConnection *v3;

  *(_QWORD *)this = off_1E34ACD88;
  v3 = (WebKit::CcidConnection *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::CcidConnection>::deref(v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::CcidConnection *v3;
  void *v4;

  *(_QWORD *)this = off_1E34ACD88;
  v3 = (WebKit::CcidConnection *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::CcidConnection>::deref(v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

WebKit::CcidConnection *WTF::RefCounted<WebKit::CcidConnection>::deref(WebKit::CcidConnection *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::CcidConnection::~CcidConnection(result);
    return (WebKit::CcidConnection *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34ACDB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34ACDB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1)
{
  WTF::RunLoop *v1;
  void *v2;
  WTF *result;
  char v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  unsigned __int16 v9;
  char v10;

  v1 = (WTF::RunLoop *)(a1 + 8);
  apdu::ApduResponse::createFromMessage();
  if (!v10)
    goto LABEL_6;
  if (v9 != 36864)
  {
    if (v9 == 27904)
    {
      v4 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v5, &v4, (WTF *)1);
      WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v5);
      result = v5;
      if (!v5)
        goto LABEL_9;
      v5 = 0;
      LODWORD(v6) = 0;
LABEL_7:
      result = (WTF *)WTF::fastFree(result, v2);
      goto LABEL_9;
    }
LABEL_6:
    v5 = 0;
    v6 = 0;
    WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v5);
    result = v5;
    if (!v5)
      goto LABEL_9;
    goto LABEL_7;
  }
  result = (WTF *)WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v7);
LABEL_9:
  if (v10)
  {
    result = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      return (WTF *)WTF::fastFree(result, v2);
    }
  }
  return result;
}

uint64_t *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, char *a2, WTF *this)
{
  uint64_t *v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!this)
    return v3;
  v4 = this;
  if (!((unint64_t)this >> 32))
  {
    v6 = WTF::fastMalloc(this);
    *((_DWORD *)v3 + 2) = (_DWORD)v4;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      v8 = *a2++;
      *(_BYTE *)(*v3 + v7) = v8;
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      v4 = (WTF *)((char *)v4 - 1);
    }
    while (v4);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34ACDE0;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34ACDE0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 16);
}

uint64_t WebKit::CtapHidDriverWorker::CtapHidDriverWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((_QWORD *)a1);
  WTF::Function<void ()(WTF::String const&)>::Function((_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a1 + 16) = 0;
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100]((_BYTE *)(a1 + 24));
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100]((_BYTE *)(a1 + 80));
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function((_QWORD *)(a1 + 136));
  v3 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

{
  WebKit::CtapHidDriverWorker::CtapHidDriverWorker(a1, a2);
  return a1;
}

_BYTE *std::optional<fido::FidoHidMessage>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_QWORD *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function(_QWORD *a1)
{
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function(a1);
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

void WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(WebKit::CtapHidDriverWorker *this)
{
  uint64_t v2;

  v2 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::~optional((WebKit::CtapHidDriverWorker *)((char *)this + 80));
  std::optional<fido::FidoHidMessage>::~optional((WebKit::CtapHidDriverWorker *)((char *)this + 24));
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)this + 8);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this);
}

{
  WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(this);
}

fido::FidoHidMessage *std::optional<fido::FidoHidMessage>::~optional(fido::FidoHidMessage *a1)
{
  std::optional<fido::FidoHidMessage>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriverWorker::transact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::HidConnection *v4;
  uint64_t v5;
  fido::FidoHidMessage *v6;
  char v8;
  WTF::ThreadSafeRefCountedBase *v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  *(_BYTE *)(a1 + 16) = 1;
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]<fido::FidoHidMessage,void>(a1 + 24, v13);
  std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a1 + 136);
  v4 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::invalidateCache(v4);
  v5 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](a1 + 24);
  fido::FidoHidMessage::popNextPacket(v6);
  WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v9, a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v8);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(&v10, (uint64_t *)&v9);
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v5 + 40))(v5, v11, &v10);
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v10);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v8);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v9);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v11);
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]<fido::FidoHidMessage,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1) & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    fido::FidoHidMessage::operator=(v3, a2);
  }
  else
  {
    std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(a1, a2);
  }
}

void std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](fido::FidoHidMessage *a1)
{
  if ((*((_BYTE *)a1 + 48) & 1) != 0)
  {
    fido::FidoHidMessage::~FidoHidMessage(a1);
    *((_BYTE *)a1 + 48) = 0;
  }
}

void WebKit::HidConnection::invalidateCache(WebKit::HidConnection *this)
{
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::clear((WebKit::HidConnection *)((char *)this + 32));
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2)
{
  WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

{
  WTF::ThreadSafeRefCountedBase *v5;

  v5 = (WTF::ThreadSafeRefCountedBase *)WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::CtapHidDriverWorker>(a2);
  if (v5)
    WTF::ThreadSafeRefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::CtapHidDriverWorker::write(uint64_t *result, unsigned __int8 a2)
{
  uint64_t *v2;
  fido::FidoHidMessage *v3;
  WebKit::HidConnection *v4;
  uint64_t v5;
  fido::FidoHidMessage *v6;
  char v7;
  WTF::ThreadSafeRefCountedBase *v8;
  uint64_t v9;
  _BYTE v10[16];
  WTF::ThreadSafeRefCountedBase *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;

  v14 = result;
  v13 = a2;
  v2 = result;
  if (*((_BYTE *)result + 16) == 1)
  {
    if (v13 << 31 >> 31 == -1)
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(result + 3));
      if (fido::FidoHidMessage::numPackets(v3))
      {
        v5 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(v2 + 3));
        fido::FidoHidMessage::popNextPacket(v6);
        WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v8, (uint64_t)v2);
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v7);
        WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(&v9, (uint64_t *)&v8);
        (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v5 + 40))(v5, v10, &v9);
        WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v9);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v7);
        WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v8);
        return (uint64_t *)WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v10);
      }
      else
      {
        *((_BYTE *)v2 + 16) = 2;
        v4 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v11, (uint64_t)v2);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapHidDriverWorker::write(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function::HidConnection::DataSent)::$_0,void>(&v12, (uint64_t *)&v11);
        WebKit::HidConnection::registerDataReceivedCallback(v4);
        WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v12);
        return WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v11);
      }
    }
    else
    {
      std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(result + 10));
      return (uint64_t *)WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)v2);
    }
  }
  return result;
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100](fido::FidoHidMessage *a1)
{
  std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](a1);
}

uint64_t WebKit::CtapHidDriverWorker::returnMessage(WebKit::CtapHidDriverWorker *this)
{
  _BYTE v3[56];
  _QWORD v4[2];

  v4[1] = this;
  WTF::Function<void ()(WTF::String const&)>::Function(v4, (uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100](v3, (uint64_t)this + 80);
  WebKit::CtapHidDriverWorker::reset(this);
  WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)v4, (uint64_t)v3);
  std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v3);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)v4);
}

_QWORD *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapHidDriverWorker::write(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function::HidConnection::DataSent)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapHidDriverWorker::write(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function::HidConnection::DataSent)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void WebKit::CtapHidDriverWorker::read(_BYTE *a1, uint64_t a2)
{
  fido::FidoHidMessage *v3;
  int v4;
  fido::FidoHidMessage *v5;
  fido::FidoHidMessage *v6;
  fido::FidoHidMessage *v7;
  _BYTE v8[56];
  uint64_t v9;
  _BYTE *v10;

  v10 = a1;
  v9 = a2;
  if (a1[16] == 2)
  {
    if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)(a1 + 80)) & 1) != 0)
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
      if ((fido::FidoHidMessage::addContinuationPacket() & 1) == 0)
      {
        std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
        WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)a1);
        return;
      }
    }
    else
    {
      fido::FidoHidMessage::createFromSerializedData();
      std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80), (uint64_t)v8);
      std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v8);
      if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)(a1 + 80)) & 1) == 0
        || (std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80)),
            v4 = fido::FidoHidMessage::channelId(v3),
            std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 24)),
            v4 != fido::FidoHidMessage::channelId(v5)))
      {
LABEL_11:
        std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
        return;
      }
    }
    std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
    if ((fido::FidoHidMessage::messageComplete(v6) & 1) == 0)
      return;
    std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
    if ((char)fido::FidoHidMessage::cmd(v7) == 59)
      goto LABEL_11;
    WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)a1);
  }
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100](fido::FidoHidMessage *a1, uint64_t a2)
{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t fido::FidoHidMessage::channelId(fido::FidoHidMessage *this)
{
  return *(unsigned int *)this;
}

uint64_t fido::FidoHidMessage::cmd(fido::FidoHidMessage *this)
{
  return *((unsigned __int8 *)this + 4);
}

_BYTE *std::optional<fido::FidoHidMessage>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

void WebKit::CtapHidDriverWorker::reset(WebKit::CtapHidDriverWorker *this)
{
  WebKit::HidConnection *v2;

  v2 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::unregisterDataReceivedCallback(v2);
  WTF::Function<void ()(WTF::String const&)>::operator=((uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((WebKit::CtapHidDriverWorker *)((char *)this + 80));
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((WebKit::CtapHidDriverWorker *)((char *)this + 24));
  *((_BYTE *)this + 16) = 0;
}

WTF::ASCIILiteral *WebKit::CtapHidDriverWorker::cancel(WebKit::CtapHidDriverWorker *a1, fido::FidoHidMessage *a2)
{
  WebKit::HidConnection *v2;
  uint64_t v3;
  _BYTE v5[16];
  fido::FidoHidMessage *v6;
  WebKit::CtapHidDriverWorker *v7;

  v7 = a1;
  v6 = a2;
  WebKit::CtapHidDriverWorker::reset(a1);
  v2 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::invalidateCache(v2);
  v3 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  fido::FidoHidMessage::popNextPacket(v6);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 32))(v3, v5);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v5);
}

uint64_t WebKit::CtapHidDriver::CtapHidDriver(uint64_t a1, uint64_t a2)
{
  WebKit::CtapDriver::CtapDriver(a1);
  *(_QWORD *)a1 = off_1E34ACE08;
  WTF::makeUniqueRef<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>((WebKit::CtapHidDriverWorker *)(a1 + 24), a2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = -1;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 40);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function((_QWORD *)(a1 + 56));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(a1 + 64));
  return a1;
}

{
  WebKit::CtapHidDriver::CtapHidDriver(a1, a2);
  return a1;
}

uint64_t WebKit::CtapDriver::CtapDriver(uint64_t a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E34ACE38;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

_QWORD *WTF::makeUniqueRef<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapHidDriverWorker *a1, uint64_t a2)
{
  return WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(a1, a2);
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (WTF::FastMalloc *)8);
  return a1;
}

fido::FidoHidMessage *WebKit::CtapHidDriver::transact(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::ThreadSafeRefCountedBase *v8;
  uint64_t v9;
  _BYTE v10[60];
  int v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = -1;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 40), v15);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=(a1 + 56);
  v13 = 2;
  for (i = 0; i < v13; ++i)
  {
    v11 = WTF::weakRandomNumber<unsigned int>();
    *(_DWORD *)(WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(a1 + 64)) + 4 * i) = v11;
  }
  fido::FidoHidMessage::create();
  v4 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v10);
  v6 = v5;
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v8, a1);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>(&v9, (uint64_t *)&v8);
  WebKit::CtapHidDriverWorker::transact(v4, v6, (uint64_t)&v9);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v9);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v8);
  return std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v10);
}

uint64_t WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](a1);
  return a1;
}

_QWORD *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterChannelAllocated(WTF::ASCIILiteral *result, uint64_t a2)
{
  uint64_t v2;
  fido::FidoHidMessage *v3;
  const void *v4;
  const void *v5;
  size_t v6;
  WTF::RunLoop *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ThreadSafeRefCountedBase *v13;
  uint64_t v14;
  _BYTE v15[56];
  unint64_t v16;
  int v17;
  WTF::ThreadSafeRefCountedBase *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  _BYTE v23[16];
  uint64_t v24;
  WTF::ASCIILiteral *v25;

  v25 = result;
  v24 = a2;
  v2 = (uint64_t)result;
  if (*((_BYTE *)result + 32) == 1)
  {
    if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](v24) & 1) != 0)
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](v24);
      fido::FidoHidMessage::getMessagePayload(v3);
      v4 = (const void *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)v22);
      v5 = (const void *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(v2 + 64));
      v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v2 + 64);
      v7 = (WTF::RunLoop *)memcmp(v4, v5, v6);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v2 + 32) = 0;
        WTF::RunLoop::main(v7);
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v18, v2);
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v19, (uint64_t *)(v2 + 40));
        WTF::Function<void ()(WTF::String const&)>::Function(&v20, v2 + 56);
        WTF::Function<void ()(void)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>(&v21, (uint64_t *)&v18);
        WTF::RunLoop::dispatch();
        WTF::Function<void ()(void)>::~Function((uint64_t)&v21);
        WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0((uint64_t *)&v18);
        v17 = 1;
      }
      else
      {
        *(_BYTE *)(v2 + 32) = 2;
        v16 = 9;
        *(_DWORD *)(v2 + 36) = *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, 8uLL) << 24;
        v8 = v16++;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v8) << 16;
        v9 = v16++;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v9) << 8;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v16);
        WebKit::CtapDriver::protocol((WebKit::CtapDriver *)v2);
        fido::FidoHidMessage::create();
        v10 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v15);
        v12 = v11;
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v13, v2);
        WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &)::$_1,void>(&v14, (uint64_t *)&v13);
        WebKit::CtapHidDriverWorker::transact(v10, v12, (uint64_t)&v14);
        WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v14);
        WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v13);
        std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v15);
        v17 = 0;
      }
      return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v22);
    }
    else
    {
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v23);
      WebKit::CtapHidDriver::returnResponse((WebKit::CtapHidDriver *)v2, (uint64_t)v23);
      return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v23);
    }
  }
  return result;
}

uint64_t WebKit::CtapHidDriver::returnResponse(WebKit::CtapHidDriver *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::CtapHidDriver *v6;

  v6 = a1;
  v5 = a2;
  WTF::Function<void ()(WTF::String const&)>::Function(&v4, (uint64_t)a1 + 56);
  WebKit::CtapHidDriver::reset(a1);
  WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)&v4, v5);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v4);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>,std::optional<fido::FidoHidMessage> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)(a1 + 3));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 1));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[](uint64_t a1, unint64_t a2)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, a2);
}

uint64_t WebKit::CtapDriver::protocol(WebKit::CtapDriver *this)
{
  return *((unsigned int *)this + 4);
}

_QWORD *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &)::$_1,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &)::$_1,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>,std::optional<fido::FidoHidMessage> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterResponseReceived(WTF::ASCIILiteral *result, uint64_t a2)
{
  WebKit::CtapHidDriver *v2;
  fido::FidoHidMessage *v3;
  _BYTE v4[16];
  uint64_t v5;
  WTF::ASCIILiteral *v6;

  v6 = result;
  v5 = a2;
  v2 = result;
  if (*((_BYTE *)result + 32) == 2)
  {
    if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](v5) & 1) != 0)
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](v5);
      fido::FidoHidMessage::getMessagePayload(v3);
    }
    else
    {
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4);
    }
    WebKit::CtapHidDriver::returnResponse(v2, (uint64_t)v4);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
  }
  return result;
}

uint64_t WebKit::CtapHidDriver::reset(WebKit::CtapHidDriver *this)
{
  uint64_t result;

  result = WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)this + 56);
  *((_DWORD *)this + 9) = -1;
  *((_BYTE *)this + 32) = 0;
  return result;
}

_BYTE *WebKit::CtapHidDriver::cancel(_BYTE *this)
{
  WebKit::CtapHidDriver *v1;
  WebKit::CtapHidDriverWorker *v2;
  fido::FidoHidMessage *v3;
  _BYTE v4[16];
  _BYTE v5[56];
  _BYTE *v6;

  v6 = this;
  v1 = (WebKit::CtapHidDriver *)this;
  if (this[32])
  {
    this = (_BYTE *)WebKit::CtapDriver::protocol((WebKit::CtapDriver *)this);
    if (!(_DWORD)this)
    {
      if (*((_BYTE *)v1 + 32) == 2)
      {
        WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4);
        fido::FidoHidMessage::create();
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
        v2 = (WebKit::CtapHidDriverWorker *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v5);
        WebKit::CtapHidDriverWorker::cancel(v2, v3);
        std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v5);
      }
      return (_BYTE *)WebKit::CtapHidDriver::reset(v1);
    }
  }
  return this;
}

void WebKit::CtapHidDriver::~CtapHidDriver(unsigned int **this)
{
  WebKit::CtapHidDriver::~CtapHidDriver(this);
}

{
  void *v2;

  WebKit::CtapHidDriver::~CtapHidDriver(this);
  WTF::FastMalloc::free((WTF::FastMalloc *)this, v2);
}

{
  void *v2;

  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(this + 8));
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)(this + 7));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(this + 5));
  WTF::UniqueRef<WebKit::CtapHidDriverWorker>::~UniqueRef((uint64_t)(this + 3));
  WebKit::CtapDriver::~CtapDriver(this, v2);
}

_BYTE *std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<fido::FidoHidMessage,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<fido::FidoHidMessage,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<fido::FidoHidMessage,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<fido::FidoHidMessage,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<fido::FidoHidMessage,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<fido::FidoHidMessage,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[48] = 0;
  return result;
}

fido::FidoHidMessage *std::__optional_move_assign_base<fido::FidoHidMessage,false>::~__optional_move_assign_base(fido::FidoHidMessage *a1)
{
  std::__optional_copy_assign_base<fido::FidoHidMessage,false>::~__optional_copy_assign_base(a1);
  return a1;
}

fido::FidoHidMessage *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::~__optional_copy_assign_base(fido::FidoHidMessage *a1)
{
  std::__optional_move_base<fido::FidoHidMessage,false>::~__optional_move_base(a1);
  return a1;
}

fido::FidoHidMessage *std::__optional_move_base<fido::FidoHidMessage,false>::~__optional_move_base(fido::FidoHidMessage *a1)
{
  std::__optional_copy_base<fido::FidoHidMessage,false>::~__optional_copy_base(a1);
  return a1;
}

fido::FidoHidMessage *std::__optional_copy_base<fido::FidoHidMessage,false>::~__optional_copy_base(fido::FidoHidMessage *a1)
{
  std::__optional_storage_base<fido::FidoHidMessage,false>::~__optional_storage_base(a1);
  return a1;
}

fido::FidoHidMessage *std::__optional_storage_base<fido::FidoHidMessage,false>::~__optional_storage_base(fido::FidoHidMessage *a1)
{
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

fido::FidoHidMessage *std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100](fido::FidoHidMessage *a1)
{
  if ((*((_BYTE *)a1 + 48) & 1) != 0)
    fido::FidoHidMessage::~FidoHidMessage(a1);
  return a1;
}

void fido::FidoHidMessage::~FidoHidMessage(fido::FidoHidMessage *this)
{
  fido::FidoHidMessage::~FidoHidMessage(this);
}

{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::~Deque((fido::FidoHidMessage *)((char *)this + 8));
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::~Deque(WTF::RefCountedBase *a1)
{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::~Deque(a1);
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::destroyAll(a1);
  WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1 + 16);
  return a1;
}

uint64_t WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::destroyAll(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1 > a1[1])
  {
    v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    v6 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v5, v6 + 8 * a1[1]);
    v7 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2)) + 8 * *a1;
    v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v7, v8 + 8 * v9);
  }
  else
  {
    v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2)) + 8 * *a1;
    v3 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v2, v3 + 8 * a1[1]);
  }
}

uint64_t WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(a1);
  return a1;
}

uint64_t WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(uint64_t a1, uint64_t a2)
{
  return WTF::VectorDestructor<true,std::unique_ptr<fido::FidoHidPacket>>::destruct(a1, a2);
}

uint64_t WTF::VectorDestructor<true,std::unique_ptr<fido::FidoHidPacket>>::destruct(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = result; i != a2; i += 8)
    result = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](i);
  return result;
}

uint64_t *WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1);
  return a1;
}

{
  _QWORD v4[2];
  WTF::FastMalloc *v5;
  _QWORD *v6;
  uint64_t *v7;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  v4[1] = a1;
  v4[0] = 0;
  v7 = a1;
  v6 = v4;
  v5 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5)
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  return a1;
}

void fido::FidoHidMessage::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
}

uint64_t std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(a1, a2);
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::swap(a1, a2);
}

void WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::swap(uint64_t *a1, uint64_t *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)a2);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)a1);
  std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1, a2);
  std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1 + 1, a2 + 1);
  WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::swap((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)a2);
}

int *WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::swap(uint64_t a1, uint64_t a2)
{
  std::swap[abi:sn180100]<JSC::ArrayBufferView *>((uint64_t *)a1, (uint64_t *)a2);
  return std::swap[abi:sn180100]<unsigned int>((int *)(a1 + 8), (int *)(a2 + 8));
}

int *std::swap[abi:sn180100]<unsigned int>(int *result, int *a2)
{
  int v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  fido::FidoHidMessage::FidoHidMessage(a1, a2);
  return a1;
}

uint64_t fido::FidoHidMessage::FidoHidMessage(uint64_t a1, uint64_t a2)
{
  fido::FidoHidMessage::FidoHidMessage(a1, a2);
  return a1;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque((WTF::RefCountedBase *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(WTF::RefCountedBase *a1, uint64_t *a2)
{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(a1);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::swap((uint64_t *)a1, a2);
  return a1;
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(WTF::RefCountedBase *a1)
{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(a1);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return a1;
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::clear(WTF::RefCountedBase *a1)
{
  WTF::FastMalloc *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(a1);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1 + 16, v2);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WTF::ASCIILiteral *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(_QWORD *a1)
{
  WTF::ASCIILiteral *v2;
  uint64_t v3;
  WTF::ASCIILiteral *v5;
  uint64_t v6;
  WTF::ASCIILiteral *v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1 > a1[1])
  {
    v5 = (WTF::ASCIILiteral *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    v6 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v5, (WTF::ASCIILiteral *)(v6 + 16 * a1[1]));
    v7 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2))
                             + 16 * *a1);
    v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v7, (WTF::ASCIILiteral *)(v8 + 16 * v9));
  }
  else
  {
    v2 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2))
                             + 16 * *a1);
    v3 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v2, (WTF::ASCIILiteral *)(v3 + 16 * a1[1]));
  }
}

WTF::ASCIILiteral *WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return WTF::VectorDestructor<true,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(a1, a2);
}

WTF::ASCIILiteral *WTF::VectorDestructor<true,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF::ASCIILiteral *result, WTF::ASCIILiteral *a2)
{
  WTF::ASCIILiteral *i;

  for (i = result; i != a2; i = (WTF::ASCIILiteral *)((char *)i + 16))
    result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(i);
  return result;
}

void std::__optional_move_assign_base<fido::FidoHidMessage,false>::operator=[abi:sn180100](fido::FidoHidMessage *a1, uint64_t a2)
{
  std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>(a1, a2);
}

void std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>(fido::FidoHidMessage *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 48) & 1;
  if (v3 == (std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 48) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      fido::FidoHidMessage::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 48) & 1) != 0)
  {
    std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>((uint64_t)a1, v5);
  }
}

_BYTE *std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<fido::FidoHidMessage,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<fido::FidoHidMessage,false>::__construct_from[abi:sn180100]<std::__optional_move_base<fido::FidoHidMessage,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<fido::FidoHidMessage,false>::__construct_from[abi:sn180100]<std::__optional_move_base<fido::FidoHidMessage,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(a1, v4);
  }
  return result;
}

void WebKit::CtapDriver::~CtapDriver(WebKit::CtapDriver *this)
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2;

  v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t WTF::UniqueRef<WebKit::CtapHidDriverWorker>::~UniqueRef(uint64_t a1)
{
  WTF::UniqueRef<WebKit::CtapHidDriverWorker>::~UniqueRef(a1);
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriverWorker>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

void WebKit::CtapDriver::~CtapDriver(unsigned int **this, void *a2)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(this + 1, a2);
}

uint64_t std::unique_ptr<WebKit::CtapHidDriverWorker>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<WebKit::CtapHidDriverWorker>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriverWorker>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WebKit::CtapHidDriverWorker>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WebKit::CtapHidDriverWorker **v2;
  _QWORD *v3;
  uint64_t v4;
  WebKit::CtapHidDriverWorker *v5;

  std::to_address[abi:sn180100]<char const>();
  v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::CtapHidDriverWorker>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::CtapHidDriverWorker>::operator()[abi:sn180100](uint64_t a1, WebKit::CtapHidDriverWorker *a2)
{
  void *v3;
  uint64_t result;

  if (a2)
  {
    WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(a2);
    return WTF::FastMalloc::free(a2, v3);
  }
  return result;
}

unsigned int **WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(unsigned int **a1, void *a2)
{
  WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1, a2);
  return a1;
}

unsigned int **WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a1, a2);
  return a1;
}

uint64_t WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::CtapHidDriverWorker>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

_QWORD *WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new()
{
  return WTF::fastMalloc((WTF *)0x10);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(a1);
  *a1 = off_1E34ACE68;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ACE90;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACE68;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::call(uint64_t a1, char a2)
{
  return WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

void WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t *WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()(uint64_t *a1, char a2)
{
  uint64_t *result;
  uint64_t *v4;

  result = (uint64_t *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = (uint64_t *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriverWorker::write(v4, a2 & 1);
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACEB8;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACEB8;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  _BYTE *v3;

  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    v3 = (_BYTE *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::CtapHidDriverWorker::read(v3, a2);
  }
}

_QWORD *WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(a1);
  *a1 = off_1E34ACEE0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACEE0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::call(uint64_t a1, char a2)
{
  return WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapHidDriverWorker *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = WebKit::CtapHidDriverWorker::operator new(a1);
  WebKit::CtapHidDriverWorker::CtapHidDriverWorker(v3, a2);
  return WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(a1, v3);
}

uint64_t WebKit::CtapHidDriverWorker::operator new(WebKit::CtapHidDriverWorker *this)
{
  return WTF::fastMalloc((WTF *)0x90);
}

_QWORD *WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(_QWORD *a1, uint64_t a2)
{
  WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(a1, a2);
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, a2);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::FastMalloc *a2)
{
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, a2, (int)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACF08;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ACF30;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACF08;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ASCIILiteral *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  WTF::ASCIILiteral *result;
  WTF::ASCIILiteral *v4;

  result = (WTF::ASCIILiteral *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = (WTF::ASCIILiteral *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::continueAfterChannelAllocated(v4, a2);
  }
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>,std::optional<fido::FidoHidMessage> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34ACF58;
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), a2 + 1);
  WTF::Function<void ()(WTF::String const&)>::Function(a1 + 3, (uint64_t)(a2 + 3));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACF58;
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::FidoHidMessage *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

fido::FidoHidMessage *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::operator()(uint64_t *a1)
{
  fido::FidoHidMessage *result;
  uint64_t v3;

  result = (fido::FidoHidMessage *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::transact(v3, a1 + 1, (uint64_t)(a1 + 3));
  }
  return result;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(uint64_t a1, unint64_t a2)
{
  WTF::CrashOnOverflow *v4;

  v4 = (WTF::CrashOnOverflow *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
  if (a2 >= (unint64_t)v4)
    WTF::CrashOnOverflow::overflowed(v4);
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + a2;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>,std::optional<fido::FidoHidMessage> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(a1);
  *a1 = off_1E34ACF80;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34ACF80;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ASCIILiteral *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1::operator()((uint64_t *)(a1 + 8), a2);
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  WTF::ASCIILiteral *result;
  WTF::ASCIILiteral *v4;

  result = (WTF::ASCIILiteral *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v4 = (WTF::ASCIILiteral *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::continueAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t ___ZN6WebKit23DeviceManagementLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement", 2);
  WebKit::DeviceManagementLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initDMFWebsitePolicyMonitor(WebKit *this)
{
  if (qword_1ECE71FE8 != -1)
    dispatch_once(&qword_1ECE71FE8, &__block_literal_global_6);
  return qword_1ECE71FF0;
}

uint64_t ___ZN6WebKitL27initDMFWebsitePolicyMonitorEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit23DeviceManagementLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (_MergedGlobals_45 != -1)
    dispatch_once(&_MergedGlobals_45, block);
  result = (uint64_t)objc_getClass("DMFWebsitePolicyMonitor");
  qword_1ECE71FF0 = result;
  if (result)
  {
    WebKit::getDMFWebsitePolicyMonitorClass = WebKit::DMFWebsitePolicyMonitorFunction;
  }
  else
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::DMFWebsitePolicyMonitorFunction(WebKit *this)
{
  return qword_1ECE71FF0;
}

void WebKit::DownloadProxy::didReceiveMessage(WebKit::DownloadProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  const void *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  CFTypeRef v39;
  CFTypeRef v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  CFTypeRef v55;
  CFTypeRef v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  WTF::StringImpl *v82;
  int v83;
  __int16 v84;
  const void *v85;
  char v86;
  char v87;
  char v88;
  char v89;
  __int128 v90;
  char v91;
  WTF::StringImpl *v92[2];
  __int128 v93;
  __int128 v94;
  WTF::StringImpl *v95;
  int v96;
  __int16 v97;
  CFTypeRef v98;
  char v99;
  WTF *v100[2];
  char v101;
  CFTypeRef v102;
  WTF::StringImpl *v103;
  char v104;
  CFTypeRef v105;
  WTF::StringImpl *v106;
  char v107;
  CFTypeRef cf[2];
  uint64_t v109;
  CFTypeRef v110;
  char v111;
  __int128 v112;
  char v113;
  char v114;

  CFRetain(*((CFTypeRef *)this + 1));
  switch(*((_WORD *)a3 + 25))
  {
    case 8:
      IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, &v79);
      if (v89)
      {
        IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v112);
        v8 = BYTE8(v112);
        if (BYTE8(v112))
        {
          if (!v89)
            goto LABEL_111;
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v92, (uint64_t)&v79);
          v106 = (WTF::StringImpl *)v112;
          v8 = 1;
        }
        else
        {
          LOBYTE(v92[0]) = 0;
        }
        v107 = v8;
      }
      else
      {
        LOBYTE(v92[0]) = 0;
        v107 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v79, v6);
      if (v107
        || (v73 = *(_QWORD *)a3,
            v74 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v75 = *((_QWORD *)a3 + 3)) != 0)
        && v74
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73), v107))
      {
        v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v48)
        {
          *(_QWORD *)&v79 = v47;
          a3 = (IPC::Decoder *)((char *)&v79 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v79 + 1, a2);
          v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v49 = off_1E34ACFF0;
          v49[1] = v79;
          v50 = *((_QWORD *)&v79 + 1);
          *((_QWORD *)&v79 + 1) = 0;
          v49[2] = v50;
          *(_QWORD *)&v112 = v49;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79 + 1);
          if (!v107)
            goto LABEL_111;
          WebKit::DownloadProxy::decideDestinationWithSuggestedFilename((uint64_t)this, (WebCore::ResourceResponseBase *)v92, &v106, (uint64_t *)&v112);
          v51 = v112;
          *(_QWORD *)&v112 = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
        }
        if (v107)
        {
          v52 = v106;
          v106 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v48);
            else
              *(_DWORD *)v52 -= 2;
          }
          v56 = v105;
          v105 = 0;
          if (v56)
            CFRelease(v56);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v92, v48);
        }
      }
      goto LABEL_110;
    case 9:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v92);
      if (LOBYTE(v92[1]))
      {
        (*(void (**)(_QWORD, WebKit::DownloadProxy *, WTF::StringImpl **))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6), this, v92);
        if (LOBYTE(v92[1]))
          goto LABEL_106;
      }
      goto LABEL_110;
    case 0xA:
      IPC::Decoder::decode<WebCore::ResourceError>((uint64_t *)a3, (uint64_t)&v79);
      if (!v87
        || (IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)&v112),
            !v113))
      {
        LOBYTE(v92[0]) = 0;
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v14);
        goto LABEL_49;
      }
      if (!v87)
        goto LABEL_111;
      v15 = v79;
      v79 = 0uLL;
      *(_OWORD *)v92 = v15;
      v93 = v80;
      v94 = v81;
      LODWORD(v80) = v80 & 0xFFFFFFFE;
      v95 = v82;
      v96 = v83;
      v97 = v84;
      v16 = v85;
      v82 = 0;
      v85 = 0;
      v98 = v16;
      v99 = v86;
      *(_OWORD *)v100 = v112;
      v101 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v14);
      WebKit::DownloadProxy::didFail((uint64_t)this, (uint64_t)v92, v100[0], v100[1]);
      if (v101)
      {
        v18 = v98;
        v98 = 0;
        if (v18)
          CFRelease(v18);
        v19 = v95;
        v95 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v17);
          else
            *(_DWORD *)v19 -= 2;
        }
        v57 = v92[1];
        v92[1] = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v17);
          else
            *(_DWORD *)v57 -= 2;
        }
LABEL_106:
        v58 = v92[0];
        v92[0] = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v17);
          else
            *(_DWORD *)v58 -= 2;
        }
      }
      goto LABEL_110;
    case 0xB:
      (*(void (**)(_QWORD, WebKit::DownloadProxy *))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6), this);
      WebKit::DownloadProxyMap::downloadFinished(*((_QWORD *)this + 4), (uint64_t)this);
      goto LABEL_110;
    case 0xC:
      IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t *)a3, (uint64_t)&v79);
      v10 = v91;
      if (!v91)
        goto LABEL_56;
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)v9)
      {
        if (!v91)
          goto LABEL_111;
        v12 = v11;
        WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)v92, (uint64_t)&v79);
        v13 = v90;
        v90 = 0uLL;
        *(_OWORD *)cf = v13;
        v109 = v12;
        v10 = 1;
      }
      else
      {
        v10 = 0;
LABEL_56:
        LOBYTE(v92[0]) = 0;
      }
      LOBYTE(v110) = v10;
      std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)&v79, v9);
      if ((_BYTE)v110
        || (v67 = *(_QWORD *)a3,
            v68 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v69 = *((_QWORD *)a3 + 3)) != 0)
        && v68
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v67), (_BYTE)v110))
      {
        WebKit::DownloadProxy::didReceiveAuthenticationChallenge((uint64_t)this, (uint64_t)v92, v109);
        if ((_BYTE)v110)
        {
          v39 = cf[1];
          cf[1] = 0;
          if (v39)
            CFRelease(v39);
          v40 = cf[0];
          cf[0] = 0;
          if (v40)
            CFRelease(v40);
          WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v92, v38);
        }
      }
      goto LABEL_110;
    case 0xD:
      v7 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v23 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v7 < v23 || v7 - v23 <= 7)
      {
        v63 = 0;
        v64 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v65 = *((_QWORD *)a3 + 3);
        if (v65)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
            v64 = *(_QWORD *)a3;
            v63 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v63 = 0;
            v64 = 0;
          }
        }
        goto LABEL_118;
      }
      v25 = (uint64_t *)(v22 + v23);
      *((_QWORD *)a3 + 2) = v25 + 1;
      if (!v22)
      {
        v63 = v7;
        v64 = 0;
LABEL_118:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v66 = *((_QWORD *)a3 + 3);
        if (v66 && v63)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v63);
        goto LABEL_49;
      }
      v26 = (((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8) - v22;
      if (v7 < v26 || v7 - v26 <= 7)
        goto LABEL_112;
      v28 = *v25;
      v29 = (uint64_t *)(v22 + v26);
      *((_QWORD *)a3 + 2) = v29 + 1;
      v30 = (((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) - v22;
      if (v7 < v30 || v7 - v30 <= 7)
        goto LABEL_112;
      v32 = *v29;
      v33 = *(_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 2) = (((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      (*(void (**)(_QWORD, WebKit::DownloadProxy *, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), this, v28, v32, v33);
      goto LABEL_110;
    case 0xE:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)&v79);
      if (v88)
      {
        IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v112);
        v34 = BYTE8(v112);
        if (BYTE8(v112))
        {
          if (!v88)
            goto LABEL_111;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v92, (uint64_t)&v79);
          v103 = (WTF::StringImpl *)v112;
          v34 = 1;
        }
        else
        {
          LOBYTE(v92[0]) = 0;
        }
        v104 = v34;
      }
      else
      {
        LOBYTE(v92[0]) = 0;
        v104 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v79);
      if (!v104)
      {
        v76 = *(_QWORD *)a3;
        v77 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v78 = *((_QWORD *)a3 + 3);
        if (!v78)
          goto LABEL_110;
        if (!v77)
          goto LABEL_110;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76);
        if (!v104)
          goto LABEL_110;
      }
      WebKit::DownloadProxy::didStart(this, (const WebCore::ResourceRequest *)v92, (const WTF::String *)&v103);
      if (!v104)
        goto LABEL_110;
      v54 = v103;
      v103 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      goto LABEL_94;
    case 0xF:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)&v112);
      if (v114)
      {
        IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, &v79);
        v21 = v89;
        if (v89)
        {
          if (!v114)
            goto LABEL_111;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v92, (uint64_t)&v112);
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v103, (uint64_t)&v79);
          v21 = 1;
        }
        else
        {
          LOBYTE(v92[0]) = 0;
        }
        v111 = v21;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v79, v20);
      }
      else
      {
        LOBYTE(v92[0]) = 0;
        v111 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v112);
      if (!v111)
      {
        v70 = *(_QWORD *)a3;
        v71 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v72 = *((_QWORD *)a3 + 3);
        if (!v72)
          goto LABEL_110;
        if (!v71)
          goto LABEL_110;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v70);
        if (!v111)
          goto LABEL_110;
      }
      v41 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v42)
        goto LABEL_71;
      *(_QWORD *)&v79 = v41;
      a3 = (IPC::Decoder *)((char *)&v79 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v79 + 1, a2);
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v43 = off_1E34ACFC8;
      v43[1] = v79;
      v44 = *((_QWORD *)&v79 + 1);
      *((_QWORD *)&v79 + 1) = 0;
      v43[2] = v44;
      *(_QWORD *)&v112 = v43;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79 + 1);
      if (!v111)
      {
LABEL_111:
        __break(1u);
LABEL_112:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v59 = *((_QWORD *)a3 + 3);
        if (v59)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
            v60 = *(_QWORD *)a3;
            v61 = *((_QWORD *)a3 + 1);
            v62 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v62)
            {
              if (v61)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60);
            }
          }
        }
LABEL_49:
        v35 = *(_QWORD *)a3;
        v36 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v37 = *((_QWORD *)a3 + 3);
        if (v37 && v36)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
        goto LABEL_110;
      }
      WebKit::DownloadProxy::willSendRequest((uint64_t)this, (uint64_t)v92, (uint64_t)&v103, (uint64_t *)&v112);
      v45 = v112;
      *(_QWORD *)&v112 = 0;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
LABEL_71:
      if (v111)
      {
        v46 = v110;
        v110 = 0;
        if (v46)
          CFRelease(v46);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v103, v42);
LABEL_94:
        v55 = v102;
        v102 = 0;
        if (v55)
          CFRelease(v55);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v92);
      }
LABEL_110:
      CFRelease(*((CFTypeRef *)this + 1));
      return;
    default:
      goto LABEL_110;
  }
}

void `non-virtual thunk to'WebKit::DownloadProxy::didReceiveMessage(WebKit::DownloadProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::DownloadProxy::didReceiveMessage((WebKit::DownloadProxy *)((char *)this - 16), a2, a3);
}

uint64_t std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  return a1;
}

double WTF::URL::URL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  return result;
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  const void *v2;

  if (*((_BYTE *)this + 200))
  {
    v2 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

WebCore::AuthenticationChallengeBase *std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationChallengeBase *this, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;

  if (*((_BYTE *)this + 432))
  {
    v3 = (const void *)*((_QWORD *)this + 53);
    *((_QWORD *)this + 53) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = 0;
    if (v4)
      CFRelease(v4);
    WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(this, a2);
  }
  return this;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(WebCore::AdditionalNetworkLoadMetricsForWebInspector *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::~AdditionalNetworkLoadMetricsForWebInspector(result);
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::AdditionalNetworkLoadMetricsForWebInspector::~AdditionalNetworkLoadMetricsForWebInspector(WebCore::AdditionalNetworkLoadMetricsForWebInspector *this)
{
  WTF::ASCIILiteral *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)((char *)this + 40);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::AdditionalNetworkLoadMetricsForWebInspector *)((char *)this + 56));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
}

__n128 std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v3 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v3 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v3 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v3 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v3 + 92) = v9;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v3 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v3 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v3 + 108) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v3 + 112) = v11;
  *(_BYTE *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v3 + 120) = v12;
    *(_BYTE *)(v3 + 128) = 1;
  }
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 152) = v14;
  *(_OWORD *)(v3 + 136) = v13;
  result = *(__n128 *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v3 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v3 + 216) = v17;
  *(_OWORD *)(v3 + 200) = v16;
  *(__n128 *)(v3 + 184) = result;
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(v3 + 240) = v18;
  *(_BYTE *)(v3 + 248) = *(_BYTE *)(a2 + 248);
  return result;
}

WebCore::ResourceResponseBase *std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  const void *v3;

  if (*((_BYTE *)this + 256))
  {
    v3 = (const void *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34ACFC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34ACFC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2827;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34ACFF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34ACFF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_EE4callESD_SG_SH_(uint64_t a1, uint64_t *a2, const char ***a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2826;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode((IPC::Encoder *)v9, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a4;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(const void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void IPC::handleMessage<Messages::DrawingArea::SetColorSpace,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::DestinationColorSpace>)>(uint64_t *a1, uint64_t a2)
{
  void (*v4)(uint64_t, CFTypeRef *);
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  CFTypeRef v10;
  CFTypeRef cf;
  char v12;
  char v13;

  IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>(a1, (uint64_t)&cf);
  if (v13)
  {
    if (v12)
    {
      v4 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a2 + 424);
      v5 = 1;
    }
    else
    {
      v5 = 0;
      v4 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a2 + 424);
      LOBYTE(cf) = 0;
    }
    v12 = v5;
    v4(a2, &cf);
    if (v12)
    {
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
    }
  }
  else
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
  }
}

unint64_t IPC::handleMessage<Messages::DrawingArea::SetViewExposedRect,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::FloatRect>)>(unint64_t *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t (*v4)(uint64_t, __int128 *);
  __int128 v5;
  int v6;
  char v7;
  __int128 v8;
  int v9;

  result = IPC::Decoder::decode<std::tuple<std::optional<WebCore::FloatRect>>>(a1, (uint64_t)&v5);
  if (v7)
  {
    v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 120);
    v8 = v5;
    v9 = v6;
    return v4(a2, &v8);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidStart,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::MonotonicTime)>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  _QWORD v5[2];
  double v6[2];
  char v7;

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>>(v5, a1);
  if (v7)
    (*(void (**)(uint64_t, _QWORD, _QWORD, double *, double))(*(_QWORD *)a2 + 136))(a2, v5[0], v5[1], v6, v6[1]);
  return std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidEnd,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  _QWORD v5[2];
  _BYTE v6[16];

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>(v5, a1);
  if (v6[8])
    (*(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)a2 + 144))(a2, v5[0], v5[1], v6);
  return std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

unint64_t IPC::handleMessage<Messages::DrawingArea::AdjustTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint)>(unint64_t *a1, uint64_t a2)
{
  unint64_t result;
  double v4;
  float v5;
  float v6;
  char v7;

  result = IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>((uint64_t)&v4, a1);
  if (v7)
    return (*(uint64_t (**)(uint64_t, double, float, float))(*(_QWORD *)a2 + 440))(a2, v4, v5, v6);
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::DrawingArea::CommitTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  double v13;
  float v14;
  float v15;
  char v16;

  result = IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>((uint64_t)&v13, a2);
  if (v16)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34AD040;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      (*(void (**)(uint64_t, _QWORD **, double, float, float))(*(_QWORD *)a3 + 448))(a3, &v12, v13, v14, v15);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34AD018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<float>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
      return *v5 | 0x100000000;
    v8 = v1;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    return 0;
  }
  return v6;
}

unint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::FloatRect>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  __int128 v8;
  int v9;
  char v10;

  result = IPC::Decoder::decode<std::optional<WebCore::FloatRect>>(a1, &v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(_DWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 20) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 20) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, (uint64_t)v5);
  *a1 = 0;
  a1[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WTF::String>(a2, &v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>((uint64_t)a1, a2, a3, &v8);
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v6);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  char v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
  if (!v8)
  {
    v10 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a3 + 16) && *((_BYTE *)a4 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v9 = *a4;
    *a4 = 0;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = result;
    v10 = 1;
LABEL_5:
    *(_BYTE *)(a1 + 32) = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::MonotonicTime>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  _BYTE v5[24];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)a1, a2, (uint64_t)v5);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::String>(a2, &v9);
  v7 = v10;
  if (!v10)
  {
    *(_BYTE *)a1 = 0;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v8 = v9;
    v9 = 0;
    *(_QWORD *)(a1 + 16) = v8;
    v7 = 1;
LABEL_4:
    *(_BYTE *)(a1 + 24) = v7;
    return (_QWORD *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v6);
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a2[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (v11)
      {
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = result;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      goto LABEL_13;
    }
    v12 = v4;
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (!v14)
      goto LABEL_14;
    if (v4)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
LABEL_13:
      v13 = *a2;
      v12 = a2[1];
      goto LABEL_14;
    }
    v12 = 0;
    v13 = 0;
  }
LABEL_14:
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v12)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34AD040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34AD040;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2828;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::DrawingAreaProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x10:
      this = IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t *)a3, (uint64_t)&v4);
      if (v6)
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 328))(v3, v4, &v5);
      break;
    case 0x11:
      this = (uint64_t)IPC::handleMessage<Messages::DrawingAreaProxy::DispatchPresentationCallbacksAfterFlushingLayers,WebKit::DrawingAreaProxy,WebKit::DrawingAreaProxy,void ()(IPC::Connection &,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>((uint64_t)a2, (uint64_t *)a3, this, (uint64_t (*)(_QWORD *, uint64_t, WTF **))0xD0, 1);
      break;
    case 0x12:
      this = IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t *)a3, (uint64_t)&v4);
      if (v6)
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 312))(v3, v4, &v5);
      break;
    case 0x13:
      this = IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t *)a3, (uint64_t)&v4);
      if (v6)
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 320))(v3, v4, &v5);
      break;
    default:
      return this;
  }
  return this;
}

WTF *IPC::handleMessage<Messages::DrawingAreaProxy::DispatchPresentationCallbacksAfterFlushingLayers,WebKit::DrawingAreaProxy,WebKit::DrawingAreaProxy,void ()(IPC::Connection &,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, WTF **), uint64_t a5)
{
  WTF *result;
  _QWORD *v10;
  void *v11;
  WTF *v12;
  int v13;
  char v14;

  result = IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v12);
  if (v14)
  {
    v10 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *, uint64_t, WTF **))(*v10 + a4);
    result = (WTF *)a4(v10, a1, &v12);
    if (v14)
    {
      result = v12;
      if (v12)
      {
        v12 = 0;
        v13 = 0;
        return (WTF *)WTF::fastFree(result, v11);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned long long,WebKit::LayerTreeContext>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,WebKit::LayerTreeContext>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      result = IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(a1);
      if (v11)
      {
        *(_QWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = result;
        v12 = 1;
        goto LABEL_9;
      }
      goto LABEL_13;
    }
    v13 = v4;
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (!v15)
      goto LABEL_14;
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v5, v4);
LABEL_13:
      v14 = *a1;
      v13 = a1[1];
      goto LABEL_14;
    }
    v13 = 0;
    v14 = 0;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v13)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  v12 = 0;
  *(_BYTE *)a2 = 0;
LABEL_9:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  char v5;
  _QWORD v6[2];
  char v7;

  result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)a3 = v6[0];
    *(_QWORD *)(a3 + 8) = v6[1];
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  WTF *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  WTF *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  WTF *v26;
  uint64_t v27;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v20 = v5;
    v21 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v20)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v26 = 0;
  v27 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v24 = v18;
      v25 = a2;
      if (!(_BYTE)a2)
        break;
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        v16 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((_QWORD *)v26 + HIDWORD(v27)) = *v16;
      }
      else
      {
        *((_QWORD *)v26 + HIDWORD(v27)) = v18;
      }
      v17 = ++HIDWORD(v27);
      if (!--v10)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v26, v17);
        *(_QWORD *)a3 = v26;
        v23 = v27;
        v26 = 0;
        v27 = 0;
        *(_QWORD *)(a3 + 8) = v23;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v13 = 0;
      v15 = 0;
      v14 = 0;
LABEL_17:
      v26 = 0;
      *(_QWORD *)a3 = v14;
      HIDWORD(v27) = 0;
      *(_DWORD *)(a3 + 8) = v15;
      *(_DWORD *)(a3 + 12) = v13;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v27) = v10;
    v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v24 = v11;
      v25 = a2;
      if (!(_BYTE)a2)
        break;
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        v12 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((_QWORD *)v26 + HIDWORD(v27)) = *v12;
      }
      else
      {
        *((_QWORD *)v26 + HIDWORD(v27)) = v11;
      }
      v13 = ++HIDWORD(v27);
      if (!--v10)
      {
        v14 = v26;
        v15 = v27;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_25:
  result = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 8 * v5;
      v9 = v4;
      do
      {
        v10 = *(_QWORD *)v9;
        v9 = (WTF *)((char *)v9 + 8);
        *v6++ = v10;
        v8 -= 8;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4 && (WTF *)result != v5)
      {
        v6 = 8 * v4;
        v7 = v5;
        do
        {
          v8 = *(_QWORD *)v7;
          v7 = (WTF *)((char *)v7 + 8);
          *(_QWORD *)result = v8;
          result += 8;
          v6 -= 8;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WebKit::EndowmentStateTracker::isApplicationForeground(WebKit::EndowmentStateTracker *this)
{
  int v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int)this;
  v12 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", this);
  if (v2)
  {
    v7 = 0;
    v3 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v2, &v7);
    if (!v3)
    {
      v4 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        v9 = v1;
        v10 = 2114;
        v11 = v7;
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "endowmentsForPid: Failed to get RBSProcessHandle for process with PID %d, error: %{public}@", buf, 0x12u);
      }
    }
  }
  else
  {
    v5 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v1;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "handleForPID: Failed to construct RBSProcessIdentifier from PID %d", buf, 8u);
    }
    v3 = 0;
  }
  return objc_msgSend((id)WebKit::endowmentsForHandle(v3), "containsObject:", CFSTR("com.apple.frontboard.visibility"));
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v4, 0);
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int **result;
  unsigned int **v23;
  unsigned int **v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      if (*v13)
      {
        if (*v13 != (unsigned int *)-1)
        {
          v14 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(a1, (_QWORD *)(v6 + 8 * v11));
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            do
            {
              v18 = __ldaxr(v15);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v15));
            if (!v19)
            {
              atomic_store(1u, v15);
              v23 = v14;
              WTF::fastFree((WTF *)v15, v10);
              v14 = v23;
            }
          }
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
          {
            do
            {
              v20 = __ldaxr(v17);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v17));
            if (!v21)
            {
              atomic_store(1u, v17);
              v24 = v14;
              WTF::fastFree((WTF *)v17, v10);
              v14 = v24;
            }
          }
          if (v13 == a3)
            v12 = v14;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t v30;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (uint64_t *)*a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t **)(v6 + 8 * v16);
    v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = (uint64_t *)*a2;
        v17 = v9;
      }
      *a2 = 0;
      result = *v17;
      *v17 = v10;
      if (result)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)result);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)result));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)result);
          v29 = v17;
          result = (uint64_t *)WTF::fastFree((WTF *)result, v17);
          v17 = v29;
        }
      }
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_18;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_18:
        v25 = v21 + 8 * v24;
        v26 = 1;
        goto LABEL_19;
      }
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v4, (unsigned int **)v17);
      v17 = (uint64_t **)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_18;
    }
    if (v18 != (uint64_t *)-1)
      break;
    v9 = (uint64_t **)(v6 + 8 * v16);
LABEL_8:
    v14 = i + v16;
  }
  if (v18 != v10)
    goto LABEL_8;
  if ((v7 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v25 = v6 + 8 * v30;
LABEL_19:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  uint64_t *v12;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v9 = __ldaxr(v2);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v2));
    if (!v10)
    {
      atomic_store(1u, v2);
      v11 = a2;
      v12 = result;
      WTF::fastFree((WTF *)v2, a2);
      a2 = v11;
      result = v12;
    }
  }
  *a2 = (unsigned int *)-1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *result;
  if (*result)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, v7 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 8 * v7);
    if (!v9)
      break;
    if (v9 != -1 && v9 == *a2)
      return v2 + 8 * v7;
    v7 = (v7 + i) & v3;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

_QWORD *IPC::Decoder::decode<WebKit::WebWheelEvent>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::RectEdges<BOOL>>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  result = IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::decode(a1);
  if (!BYTE4(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34AD068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34AD068;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSQ_EE4callEbSQ_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2831;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 24))
  {
    IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::encode((IPC::Encoder *)a1, (_QWORD *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = IPC::Decoder::decode<unsigned int>(a2);
  v7 = result;
  if ((result & 0xFF00000000) != 0)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>((uint64_t)a1, a2, a3, (uint64_t)&v7);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  char v9;

  result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (!v8)
  {
    v9 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a3 + 8) && *(_BYTE *)(a4 + 4))
  {
    *(_QWORD *)a1 = *(_QWORD *)a3;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)a4;
    *(_QWORD *)(a1 + 12) = result;
    v9 = 1;
LABEL_5:
    *(_BYTE *)(a1 + 24) = v9;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::ExtensionProcess::invalidate(WebKit::ExtensionProcess *this)
{
  uint64_t v1;
  WebKit::ExtensionProcess *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebKit::ExtensionProcess *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::ExtensionProcess::makeLibXPCConnection(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebKit::ExtensionProcess *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit16ExtensionProcess10invalidateEvE3__0JEEEEEJRKNS0_6__implIJNS6_9RetainPtrI19BEWebContentProcessEENSE_I19BENetworkingProcessEENSE_I18BERenderingProcessEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebKit::ExtensionProcess::makeLibXPCConnection@<X0>(WebKit::ExtensionProcess *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD *v6;

  v4 = 0;
  v5[0] = a2;
  *a2 = 0;
  v5[1] = &v4;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **, WebKit::ExtensionProcess *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit16ExtensionProcess20makeLibXPCConnectionEvE3__0JEEEEEJRKNS0_6__implIJNS6_9RetainPtrI19BEWebContentProcessEENSE_I19BENetworkingProcessEENSE_I18BERenderingProcessEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6, this);
  }
  return result;
}

void sub_196DF8DC4(_Unwind_Exception *exception_object)
{
  id *v1;

  if (*v1)

  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ExtensionProcess::grantCapability@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[4];
  _QWORD *v8;

  v6 = 0;
  v7[0] = a4;
  *a4 = 0;
  v7[1] = a2;
  v7[2] = &v6;
  v7[3] = a3;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit16ExtensionProcess15grantCapabilityERKNS6_9RetainPtrI19BEProcessCapabilityEEONS6_8BlockPtrIFvvEEEE3__0JEEEEEJRKNS0_6__implIJNSA_I19BEWebContentProcessEENSA_I19BENetworkingProcessEENSA_I18BERenderingProcessEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v8, a1);
  }
  return result;
}

void sub_196DF8E4C(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ExtensionProcess::createVisibilityPropagationInteraction@<X0>(WebKit::ExtensionProcess *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[2];
  _QWORD *v5;

  *a2 = 0;
  v4[0] = a2;
  v4[1] = a2;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v5 = v4;
    return ((uint64_t (*)(_QWORD **, WebKit::ExtensionProcess *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit16ExtensionProcess38createVisibilityPropagationInteractionEvE3__0JZNKS9_38createVisibilityPropagationInteractionEvE3__1ZNKS9_38createVisibilityPropagationInteractionEvE3__2EEEEEJRKNS0_6__implIJNS6_9RetainPtrI19BEWebContentProcessEENSG_I19BENetworkingProcessEENSG_I18BERenderingProcessEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v5, this);
  }
  return result;
}

void sub_196DF8EC8(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::invalidate(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(uint64_t a1, id *a2)
{
  return objc_msgSend(*a2, "invalidate");
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::invalidate(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(uint64_t a1, id *a2)
{
  return objc_msgSend(*a2, "invalidate");
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::invalidate(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(uint64_t a1, id *a2)
{
  return objc_msgSend(*a2, "invalidate");
}

void **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::makeLibXPCConnection(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(void ****a1, id *a2)
{
  return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(**a1, (void *)objc_msgSend(*a2, "makeLibXPCConnectionError:", (*a1)[1]));
}

void **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::makeLibXPCConnection(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(void ****a1, id *a2)
{
  return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(**a1, (void *)objc_msgSend(*a2, "makeLibXPCConnectionError:", (*a1)[1]));
}

void **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::makeLibXPCConnection(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(void ****a1, id *a2)
{
  return WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(**a1, (void *)objc_msgSend(*a2, "makeLibXPCConnectionError:", (*a1)[1]));
}

void **WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=(void **a1, void *a2)
{
  id v4;
  void *v5;

  if (a2)
    v4 = a2;
  v5 = *a1;
  *a1 = a2;
  if (v5)

  return a1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::grantCapability(WTF::RetainPtr<BEProcessCapability> const&,WTF::BlockPtr<void ()(void)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>> const&>(uint64_t *a1, id *a2)
{
  uint64_t v3;
  char v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  const void **v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void **v18;
  const void *v19;

  v3 = *a1;
  v4 = objc_opt_respondsToSelector();
  v5 = *a2;
  v6 = *(uint64_t **)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *v6;
  if ((v4 & 1) != 0)
  {
    v9 = *(uint64_t **)(v3 + 24);
    v10 = *v9;
    *v9 = 0;
    v11 = malloc_type_malloc(0x28uLL, 0x10E004086F20DB1uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
    v11[4] = v10;
    _Block_release(0);
    v12 = (const void *)objc_msgSend(v5, "grantCapability:error:invalidationHandler:", v8, v7, v11);
    v13 = v12;
    v14 = *(const void ***)v3;
    if (v12)
      CFRetain(v12);
    v15 = *v14;
    *v14 = v13;
    if (v15)
      CFRelease(v15);
    _Block_release(v11);
  }
  else
  {
    v16 = (const void *)objc_msgSend(*a2, "grantCapability:error:", *v6, *(_QWORD *)(v3 + 16));
    v17 = v16;
    v18 = *(const void ***)v3;
    if (v16)
      CFRetain(v16);
    v19 = *v18;
    *v18 = v17;
    if (v19)
      CFRelease(v19);
  }
}

void sub_196DF910C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::grantCapability(WTF::RetainPtr<BEProcessCapability> const&,WTF::BlockPtr<void ()(void)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>> const&>(uint64_t *a1, id *a2)
{
  uint64_t v3;
  char v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  const void **v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void **v18;
  const void *v19;

  v3 = *a1;
  v4 = objc_opt_respondsToSelector();
  v5 = *a2;
  v6 = *(uint64_t **)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *v6;
  if ((v4 & 1) != 0)
  {
    v9 = *(uint64_t **)(v3 + 24);
    v10 = *v9;
    *v9 = 0;
    v11 = malloc_type_malloc(0x28uLL, 0x10E004086F20DB1uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
    v11[4] = v10;
    _Block_release(0);
    v12 = (const void *)objc_msgSend(v5, "grantCapability:error:invalidationHandler:", v8, v7, v11);
    v13 = v12;
    v14 = *(const void ***)v3;
    if (v12)
      CFRetain(v12);
    v15 = *v14;
    *v14 = v13;
    if (v15)
      CFRelease(v15);
    _Block_release(v11);
  }
  else
  {
    v16 = (const void *)objc_msgSend(*a2, "grantCapability:error:", *v6, *(_QWORD *)(v3 + 16));
    v17 = v16;
    v18 = *(const void ***)v3;
    if (v16)
      CFRetain(v16);
    v19 = *v18;
    *v18 = v17;
    if (v19)
      CFRelease(v19);
  }
}

void sub_196DF9270(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::grantCapability(WTF::RetainPtr<BEProcessCapability> const&,WTF::BlockPtr<void ()(void)> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>> const&>(uint64_t *a1, id *a2)
{
  uint64_t v3;
  char v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  const void **v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void **v18;
  const void *v19;

  v3 = *a1;
  v4 = objc_opt_respondsToSelector();
  v5 = *a2;
  v6 = *(uint64_t **)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *v6;
  if ((v4 & 1) != 0)
  {
    v9 = *(uint64_t **)(v3 + 24);
    v10 = *v9;
    *v9 = 0;
    v11 = malloc_type_malloc(0x28uLL, 0x10E004086F20DB1uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::descriptor;
    v11[4] = v10;
    _Block_release(0);
    v12 = (const void *)objc_msgSend(v5, "grantCapability:error:invalidationHandler:", v8, v7, v11);
    v13 = v12;
    v14 = *(const void ***)v3;
    if (v12)
      CFRetain(v12);
    v15 = *v14;
    *v14 = v13;
    if (v15)
      CFRelease(v15);
    _Block_release(v11);
  }
  else
  {
    v16 = (const void *)objc_msgSend(*a2, "grantCapability:error:", *v6, *(_QWORD *)(v3 + 16));
    v17 = v16;
    v18 = *(const void ***)v3;
    if (v16)
      CFRetain(v16);
    v19 = *v18;
    *v18 = v17;
    if (v19)
      CFRelease(v19);
  }
}

void sub_196DF93D4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::BlockPtr<void ()(void)>>(WTF::BlockPtr<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_0,WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_1,WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(const void ****a1, CFTypeRef *a2)
{
  const void ***v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void **v6;
  const void *v7;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = (const void *)objc_msgSend(v3, "createVisibilityPropagationInteraction");
  v5 = v4;
  v6 = *v2;
  if (v4)
    CFRetain(v4);
  v7 = *v6;
  *v6 = v5;
  if (v7)
    CFRelease(v7);
  if (v3)
    CFRelease(v3);
}

void sub_196DF9480(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_0,WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_1,WebKit::ExtensionProcess::createVisibilityPropagationInteraction(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<BEWebContentProcess>,std::__variant_detail::_Trait<BENetworkingProcess>,std::__variant_detail::_Trait<BERenderingProcess>> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void **v6;
  const void *v7;

  v2 = *a1;
  v3 = (void *)*a2;
  if (*a2)
    CFRetain(*a2);
  v4 = (const void *)objc_msgSend(v3, "createVisibilityPropagationInteraction");
  v5 = v4;
  v6 = *(const void ***)(v2 + 8);
  if (v4)
    CFRetain(v4);
  v7 = *v6;
  *v6 = v5;
  if (v7)
    CFRelease(v7);
  if (v3)
    CFRelease(v3);
}

void sub_196DF9514(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

double WebKit::FullscreenTouchSecheuristicParameters::iosParameters@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1978CE340;
  *(_OWORD *)(a1 + 16) = xmmword_1978CE350;
  result = 0.1;
  *(_OWORD *)(a1 + 32) = xmmword_1978CE360;
  *(_QWORD *)(a1 + 48) = 0x3FB999999999999ALL;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[5];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v9;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v31;
  char *v32;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      v2 = *result;
      v3 = v29;
    }
  }
  v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t result;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_11;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v18 = *a1;
      v19 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v20 = a1[3];
      if (v20)
      {
        if (v19)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v12 = v11;
    if (!v11)
    {
      v21 = *a1;
      v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23)
      {
        if (v22)
        {
          v24 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
          v12 = 0;
          result = v24;
        }
      }
    }
    v13 = *a1;
    if (!*a1)
      break;
    if (v6 && v9 && v12)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v7;
      LOBYTE(v13) = 1;
      *(_QWORD *)(a2 + 16) = result;
      goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (!v17)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
  }
  *(_BYTE *)a2 = 0;
LABEL_9:
  *(_BYTE *)(a2 + 24) = v13;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathArcTo,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[4];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathArcTo,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v27;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v2 + v3)
  {
    v27 = (unint64_t)v26 - v2 + 4;
    if ((unint64_t)v26 - v2 > 0xFFFFFFFFFFFFFFFBLL || v27 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v26 = a2[4];
      result[2] = v27;
    }
  }
  return result;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<float const&>(_QWORD *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (v5)
  {
    v7 = v6 + v2;
    v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v7) = *a2;
      result[2] = v8;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathArc,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = v2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LOBYTE(v2) = *((_BYTE *)v2 + 20);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathArc,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = *(_DWORD *)(a2 + 12);
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = *(_DWORD *)(a2 + 16);
      result[2] = v29;
      v3 = v29;
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v3) = *(_BYTE *)(a2 + 20);
    result[2] = v3 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PathArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v17;
  int v18;
  int v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_29;
  while (1)
  {
    v7 = a1[1];
    v8 = *a1;
    v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v7 >= v9 && v7 - v9 > 3)
    {
      v11 = (int *)(v8 + v9);
      a1[2] = (unint64_t)(v11 + 1);
      if (v8)
      {
        v12 = 0;
        v13 = *v11;
        v14 = v8;
        goto LABEL_9;
      }
      v31 = v7;
      v32 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v8);
          v32 = *a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v31)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
      v13 = 0;
      v14 = *a1;
      v7 = a1[1];
      v12 = 1;
      v8 = *a1;
    }
    else
    {
      v14 = 0;
      v7 = 0;
      v8 = 0;
      v13 = 0;
      v12 = 1;
    }
LABEL_9:
    v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v8;
    if (v7 >= v15 && v7 - v15 > 3)
    {
      v17 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (unint64_t)(v17 + 1);
      if (v8)
      {
        v18 = 0;
        v19 = *v17;
        goto LABEL_16;
      }
      v35 = v7;
    }
    else
    {
      v35 = 0;
      v14 = 0;
      *a1 = 0;
      a1[1] = 0;
      v36 = a1[3];
      if (v36)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v8);
          v14 = *a1;
          v35 = a1[1];
        }
        else
        {
          v35 = 0;
          v14 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v19 = 0;
    v37 = a1[3];
    if (v37 && v35)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v14, v35);
      v14 = *a1;
      v7 = a1[1];
      v18 = 1;
      v8 = *a1;
    }
    else
    {
      v14 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 1;
    }
LABEL_16:
    v20 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v8;
    if (v7 < v20 || v7 - v20 <= 3)
    {
      v22 = 0;
      v14 = 0;
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v8);
          v14 = *a1;
          v22 = a1[1];
        }
        else
        {
          v22 = 0;
          v14 = 0;
        }
      }
    }
    else
    {
      v21 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (unint64_t)(v21 + 1);
      v22 = v7;
      if (v8)
      {
        v23 = 0;
        v24 = *v21;
        goto LABEL_20;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v24 = 0;
    v39 = a1[3];
    if (v39 && v22)
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v14, v22);
    v23 = 1;
LABEL_20:
    result = IPC::Decoder::decode<WebCore::RotationDirection>(a1);
    v26 = *a1;
    if (!*a1)
      break;
    if (v6 && !v12 && !v18 && !v23 && (unsigned __int16)result > 0xFFu)
    {
      *(_QWORD *)a2 = v4;
      *(_DWORD *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 12) = v19;
      *(_DWORD *)(a2 + 16) = v24;
      LOBYTE(v26) = 1;
      *(_BYTE *)(a2 + 20) = result;
      goto LABEL_27;
    }
    __break(1u);
LABEL_29:
    v27 = *a1;
    v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
      v30 = v28 == 0;
    else
      v30 = 1;
    if (!v30)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
  }
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 24) = v26;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::RotationDirection>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v17 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        a1 = v17;
        v2 = *v17;
        v1 = v17[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    v7 = 256;
    return v7 | v6;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (!v6)
  {
LABEL_9:
    v7 = 0;
    return v7 | v6;
  }
  v16 = a1;
  if (!v1)
  {
LABEL_14:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
  LODWORD(v6) = 0;
  v13 = *v16;
  v14 = v16[1];
  v15 = v16[3];
  *v16 = 0;
  v16[1] = 0;
  v7 = 0;
  if (v15 && v14)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
    goto LABEL_14;
  }
  return v7 | v6;
}

uint64_t IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BYTE v9[21];
  char v10;

  result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)v9);
  if (v10)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = *(_OWORD *)v9;
      *(_QWORD *)(a2 + 13) = *(_QWORD *)&v9[13];
      v5 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    v5 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v6 = *a1;
  v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_10;
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathEllipse,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = v2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = v2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = v2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  LOBYTE(v2) = *((_BYTE *)v2 + 28);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathEllipse,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v31;
  char *v32;
  _DWORD *v33;
  char *v34;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = *(_DWORD *)(a2 + 12);
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = *(_DWORD *)(a2 + 16);
      result[2] = v29;
      v2 = *result;
      v3 = v29;
    }
  }
  v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v31 = *(_DWORD *)(a2 + 20);
      result[2] = (uint64_t)(v32 + 4);
      v2 = *result;
      v3 = (unint64_t)(v32 + 4);
    }
  }
  v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v33 = *(_DWORD *)(a2 + 24);
      result[2] = (uint64_t)(v34 + 4);
      v3 = (unint64_t)(v34 + 4);
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v3) = *(_BYTE *)(a2 + 28);
    result[2] = v3 + 1;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13 && v12 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v8;
  if (!v8)
  {
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v16)
      {
        v19 = result;
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
        v9 = 0;
        result = v19;
      }
    }
  }
  if (*a1)
  {
    if (v6 && v9)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = result;
      v10 = 1;
LABEL_7:
      *(_BYTE *)(a2 + 16) = v10;
      return result;
    }
  }
  else
  {
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result
      || !v18
      || (result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0), !*a1))
    {
      v10 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathRoundedRect,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2);
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathRoundedRect,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t v5;

  result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (_DWORD *)a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 48);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PathRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  _OWORD v11[3];
  char v12;

  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v11);
  if (!v12)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
    result = IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>((uint64_t *)a1);
    if (!*a1)
      goto LABEL_13;
    goto LABEL_12;
  }
  result = IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>((uint64_t *)a1);
  if (!*a1)
  {
LABEL_13:
    v6 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  if ((unsigned __int16)result < 0x100u)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_BYTE *)(a2 + 48) = result;
  v6 = 1;
LABEL_5:
  *(_BYTE *)(a2 + 52) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v21;
  unint64_t v22;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v2 + v3)
  {
    v22 = (unint64_t)v21 - v2 + 4;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFFBLL || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v21 = a2[3];
      result[2] = v22;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = a2[6];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = a2[7];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v11;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  _DWORD *v35;
  char *v36;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      v2 = *result;
      v3 = v29;
    }
  }
  v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
      v2 = *result;
      v3 = (unint64_t)(v32 + 4);
    }
  }
  v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v33 = a2[6];
      result[2] = (uint64_t)(v34 + 4);
      v2 = *result;
      v3 = (unint64_t)(v34 + 4);
    }
  }
  v35 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v2 + v3)
  {
    v36 = (char *)v35 - v2;
    if ((unint64_t)v35 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v35 = a2[7];
      result[2] = (uint64_t)(v36 + 4);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t result;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_13;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v21 = *a1;
      v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23)
      {
        if (v22)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
      }
    }
    v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v12 = v11;
    if (!v11)
    {
      v24 = *a1;
      v25 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (v26)
      {
        if (v25)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v15 = v14;
    if (!v14)
    {
      v27 = *a1;
      v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v28)
        {
          v30 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
          v15 = 0;
          result = v30;
        }
      }
    }
    v16 = *a1;
    if (!*a1)
      break;
    if (v6 && v9 && v12 && v15)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v7;
      LOBYTE(v16) = 1;
      *(_QWORD *)(a2 + 16) = v10;
      *(_QWORD *)(a2 + 24) = result;
      goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    v17 = *a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (!v20)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  }
  *(_BYTE *)a2 = 0;
LABEL_11:
  *(_BYTE *)(a2 + 32) = v16;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathDataArc,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  v10 = a2[6];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v10;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataArc,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v31;
  char *v32;
  _DWORD *v33;
  char *v34;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    v23 = v21 - v2;
    v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      v2 = *result;
      v3 = v24;
    }
  }
  v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    v28 = v26 - v2;
    v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      v2 = *result;
      v3 = v29;
    }
  }
  v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
      v2 = *result;
      v3 = (unint64_t)(v32 + 4);
    }
  }
  v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v33 = a2[6];
      result[2] = (uint64_t)(v34 + 4);
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;

  v4 = a2[13];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::Encoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, a2, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 52);
  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, (_DWORD *)a2, v2);
}

uint64_t IPC::ArgumentCoder<WebCore::PathSegment,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[56];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v11 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v4);
        v10 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
    }
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_17;
    goto LABEL_11;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v11 = v4;
    v10 = 0;
    goto LABEL_10;
  }
  v8 = *v7;
  if (v8 >= 0x10)
    goto LABEL_11;
  result = (uint64_t)IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>(a1, v8, (uint64_t)v17);
  if (!v18)
    goto LABEL_12;
  while (*a1)
  {
    if (v18)
    {
      result = WebCore::PathSegment::PathSegment();
      *(_OWORD *)a2 = v13;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a2 + 48) = v16;
      *(_BYTE *)(a2 + 56) = 1;
      return result;
    }
    __break(1u);
LABEL_17:
    if (v11)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v10);
LABEL_11:
    v17[0] = 0;
    v18 = 0;
LABEL_12:
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v11)
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v10);
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

char *IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  v4 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 5);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  int *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;

  IPC::Decoder::decode<WTF::String>(a1, &v34);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v32);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (int *)((char *)v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v10 = 0;
      v11 = *v9;
      v12 = v11 & 0xFFFFFF00;
      v13 = v11;
      v14 = (uint64_t)v6;
      goto LABEL_8;
    }
    v14 = v5;
    v23 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    v14 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v23 = 0;
      }
    }
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
    {
      v14 = 0;
LABEL_30:
      v5 = 0;
      v6 = 0;
      v12 = 0;
      v13 = 0;
      v10 = 1;
      goto LABEL_8;
    }
    if (!v14)
      goto LABEL_30;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23, v14);
    v12 = 0;
    v13 = 0;
    v14 = *a1;
    v5 = a1[1];
    v10 = 1;
    v6 = (WTF::StringImpl *)*a1;
LABEL_8:
    v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v6;
    if (v5 < v15 || v5 - v15 <= 3)
      break;
    v17 = (unsigned int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v17 + 1);
    v18 = v5;
    if (!v6)
      goto LABEL_32;
    v19 = 0;
    v20 = (unint64_t)*v17 << 32;
LABEL_15:
    if (v35)
    {
      v21 = v34;
      v34 = 0;
      if (v33)
      {
        v22 = v32;
        v32 = 0;
        if (!v10 && !v19)
        {
          *(_QWORD *)a2 = v21;
          *(_QWORD *)(a2 + 8) = v22;
          *(_QWORD *)(a2 + 16) = v20 | v13 | v12;
          *(_BYTE *)(a2 + 24) = 1;
          goto LABEL_20;
        }
      }
    }
    __break(1u);
  }
  v18 = 0;
  v14 = 0;
  *a1 = 0;
  a1[1] = 0;
  v25 = a1[3];
  if (v25)
  {
    v29 = v13;
    v31 = v10;
    v27 = v12;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      v14 = *a1;
      v18 = a1[1];
    }
    else
    {
      v18 = 0;
      v14 = 0;
    }
    v12 = v27;
    v13 = v29;
    v10 = v31;
  }
LABEL_32:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v18)
    {
      v28 = v13;
      v30 = v10;
      v26 = v12;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v14, v18);
      v12 = v26;
      v13 = v28;
      v10 = v30;
      if (*a1)
      {
        v20 = 0;
        v19 = 1;
        goto LABEL_15;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v33)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_20:
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196DFB5A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 1));
  IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(a1, (_DWORD *)v2 + 6);
  LOBYTE(v2) = *((_BYTE *)v2 + 168);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t v5;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(a1, a2 + 24);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 168);
    a1[2] = v5 + 1;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __n128 v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  int v11;
  BOOL i;
  WTF::StringImpl *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  _OWORD v35[9];
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;

  IPC::Decoder::decode<WTF::String>(a1, &v40);
  IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>(a1, v4, (uint64_t)&v37);
  IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>(a1, (uint64_t)v35);
  v6 = a1[1];
  v7 = (char *)*a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
    goto LABEL_19;
  v9 = &v7[v8];
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v20 = v6;
    v21 = 0;
    goto LABEL_20;
  }
  v10 = *v9;
  if (v10 > 1)
    goto LABEL_21;
  v11 = 0;
  for (i = v10 != 0; ; i = 0)
  {
    if (v41)
    {
      v13 = v40;
      v40 = 0;
      if (v39)
      {
        v14 = v37;
        v5.n128_u64[0] = v38;
        v37 = 0;
        v38 = 0;
        if (v36)
        {
          v31 = v35[6];
          v32 = v35[7];
          v33 = v35[8];
          v27 = v35[2];
          v28 = v35[3];
          v29 = v35[4];
          v30 = v35[5];
          v25 = v35[0];
          v26 = v35[1];
          if (!v11)
          {
            *(_QWORD *)(a2 + 16) = v5.n128_u64[0];
            v15 = v32;
            *(_OWORD *)(a2 + 120) = v31;
            *(_OWORD *)(a2 + 136) = v15;
            *(_OWORD *)(a2 + 152) = v33;
            v16 = v28;
            *(_OWORD *)(a2 + 56) = v27;
            *(_OWORD *)(a2 + 72) = v16;
            v17 = v30;
            *(_OWORD *)(a2 + 88) = v29;
            *(_OWORD *)(a2 + 104) = v17;
            v18 = v26;
            *(_OWORD *)(a2 + 24) = v25;
            v34 = i;
            v24[0] = 0;
            *(_QWORD *)a2 = v13;
            *(_QWORD *)(a2 + 8) = v14;
            v24[1] = 0;
            *(_OWORD *)(a2 + 40) = v18;
            *(_BYTE *)(a2 + 168) = v34;
            *(_BYTE *)(a2 + 176) = 1;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v7);
            result = 0;
            goto LABEL_10;
          }
        }
      }
    }
    __break(1u);
LABEL_19:
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v22 + 16))(v22, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_20:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v23 + 16))(v23, v21, v20, v5);
        v7 = (char *)*a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v6)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *, __n128))(*(_QWORD *)result + 16))(result, v7, v5);
    if (!*a1)
      break;
    v11 = 1;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 176) = 0;
LABEL_10:
  if (v39)
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
  if (v41)
  {
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196DFB93C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 - 56))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 72, a2);
  if (*(_BYTE *)(v2 - 40))
  {
    v4 = *(WTF::StringImpl **)(v2 - 48);
    *(_QWORD *)(v2 - 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedFeatures,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::decode((uint64_t)a1, a2);
  if (!*(_BYTE *)(a2 + 144))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 3);
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 45);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<WebCore::PlatformAudioTrackConfiguration,void>::encode(a1, (uint64_t)(a2 + 6));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *result;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  int *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  _QWORD v73[2];
  char v74;
  WTF::StringImpl *v75;
  char v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79[2];

  v4 = (WTF::StringImpl *)a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if ((unint64_t)v4 >= v6 && (unint64_t)v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v43 = v4;
      v44 = 0;
      goto LABEL_64;
    }
    v72 = 0;
    v69 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v43 = 0;
    v44 = 0;
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (v45)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl *))(*(_QWORD *)v45 + 16))(v45, v5, v4);
        v44 = *a1;
        v43 = (WTF::StringImpl *)a1[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
    }
LABEL_64:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
    v69 = 0;
    v72 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::String>(a1, &v77);
    IPC::Decoder::decode<WTF::String>(a1, &v75);
    IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v73);
    v9 = a1[1];
    v10 = *a1;
    v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v9 >= v11 && v9 - v11 > 3)
    {
      v13 = (int *)(v10 + v11);
      v14 = v10 + v11 + 4;
      a1[2] = v14;
      if (v10)
      {
        v71 = 0;
        v68 = *v13;
        goto LABEL_15;
      }
      v47 = v9;
      v48 = 0;
    }
    else
    {
      v47 = 0;
      v48 = 0;
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
          v48 = *a1;
          v47 = a1[1];
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (!v50)
    {
      v68 = 0;
      v47 = 0;
LABEL_69:
      v10 = 0;
      v71 = 1;
LABEL_70:
      *a1 = 0;
      a1[1] = 0;
      v51 = a1[3];
      if (v51 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v10, v47);
        v17 = 0;
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v17 = 0;
      }
      goto LABEL_72;
    }
    if (!v47)
    {
      v68 = 0;
      goto LABEL_69;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48, v47);
    v68 = 0;
    v10 = *a1;
    v9 = a1[1];
    v71 = 1;
    v14 = a1[2];
LABEL_15:
    v15 = v14 - v10;
    if (v9 <= v15)
    {
      v47 = 0;
      v67 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v67 && v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v10 = *a1;
        v47 = a1[1];
      }
      else
      {
        v10 = 0;
      }
      goto LABEL_70;
    }
    v16 = (unsigned __int8 *)(v10 + v15);
    a1[2] = (uint64_t)(v16 + 1);
    if (!v10)
    {
      v47 = v9;
      goto LABEL_70;
    }
    v17 = *v16;
    if (v17 < 2)
    {
      v70 = 0;
      v18 = 1;
      goto LABEL_19;
    }
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (!v52)
    {
      v10 = 0;
      v19 = 0;
      v9 = 0;
      goto LABEL_74;
    }
    if (!v9)
    {
      v10 = 0;
      v19 = 0;
LABEL_74:
      v70 = 1;
LABEL_75:
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v10);
          v54 = *a1;
          v9 = a1[1];
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
        v9 = 0;
      }
LABEL_77:
      *a1 = 0;
      a1[1] = 0;
      v55 = a1[3];
      if (v55)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v54);
          v10 = *a1;
          v9 = a1[1];
        }
        else
        {
          v10 = 0;
        }
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      goto LABEL_79;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v10);
    v18 = 0;
    v10 = *a1;
    v9 = a1[1];
    v70 = 1;
LABEL_19:
    if (v17)
      v19 = v18;
    else
      v19 = 0;
    if (v9 <= a1[2] - v10)
      goto LABEL_75;
    v20 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v20 + 1);
    if (!v10)
    {
      v54 = 0;
      goto LABEL_77;
    }
    v21 = *v20;
    if (v21 < 7)
    {
      v22 = v21 | 0x100;
      goto LABEL_26;
    }
LABEL_79:
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56 && v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v10);
    v22 = 0;
LABEL_26:
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, v79);
    v24 = a1[1];
    v25 = (WTF::StringImpl *)*a1;
    v26 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v24 < v26 || v24 - v26 <= 3)
    {
      v32 = 0;
      v57 = 0;
      *a1 = 0;
      a1[1] = 0;
      v58 = a1[3];
      if (v58)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
          v57 = *a1;
          v32 = a1[1];
        }
        else
        {
          v32 = 0;
          v57 = 0;
        }
      }
    }
    else
    {
      v27 = (int *)((char *)v25 + v26);
      a1[2] = (uint64_t)(v27 + 1);
      if (v25)
      {
        v28 = 0;
        v29 = *v27;
        v30 = v29 & 0xFFFFFF00;
        v31 = v29;
        v32 = (uint64_t)v25;
        goto LABEL_30;
      }
      v32 = v24;
      v57 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      if (v32)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v57, v32);
        v30 = 0;
        v31 = 0;
        v32 = *a1;
        v24 = a1[1];
        v28 = 1;
        v25 = (WTF::StringImpl *)*a1;
        goto LABEL_30;
      }
    }
    else
    {
      v32 = 0;
    }
    v24 = 0;
    v25 = 0;
    v30 = 0;
    v31 = 0;
    v28 = 1;
LABEL_30:
    v33 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v25;
    if (v24 < v33 || v24 - v33 <= 3)
    {
      v59 = 0;
      v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      v60 = a1[3];
      if (v60)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
          v32 = *a1;
          v59 = a1[1];
        }
        else
        {
          v59 = 0;
          v32 = 0;
        }
      }
    }
    else
    {
      v34 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v34 + 1);
      if (v25)
      {
        v35 = 0;
        v36 = *v34 & 0xFFFFFF00;
        v37 = *v34;
        goto LABEL_34;
      }
      v59 = v24;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v59)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v32, v59);
      v36 = 0;
      v37 = 0;
      v25 = (WTF::StringImpl *)*a1;
      v24 = a1[1];
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v36 = 0;
      v37 = 0;
    }
    v35 = 1;
LABEL_34:
    v38 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v25;
    if (v24 < v38 || v24 - v38 <= 7)
    {
      v61 = 0;
      v62 = 0;
      *a1 = 0;
      a1[1] = 0;
      v63 = a1[3];
      if (v63)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
          v62 = *a1;
          v61 = a1[1];
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
      }
    }
    else
    {
      v39 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v39 + 1);
      if (v25)
      {
        v40 = 0;
        v5 = *v39;
LABEL_38:
        v4 = (WTF::StringImpl *)LOBYTE(v79[1]);
        if (!LOBYTE(v79[1]))
          goto LABEL_62;
        v4 = v79[0];
        v79[0] = 0;
        if (v28 || v35 || v40)
          goto LABEL_62;
        goto LABEL_42;
      }
      v61 = v24;
      v62 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v64 = a1[3];
    if (v64)
    {
      if (v61)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
        if (*a1)
        {
          v5 = 0;
          v40 = 1;
          goto LABEL_38;
        }
      }
    }
    if (LOBYTE(v79[1]))
    {
      v65 = v79[0];
      v79[0] = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v25);
        else
          *(_DWORD *)v65 -= 2;
      }
    }
    v25 = (WTF::StringImpl *)*a1;
    v66 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v66)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v25);
    v5 = *a1;
    if (!*a1)
      break;
    v4 = 0;
    v40 = 1;
LABEL_42:
    if (!v72)
    {
      if (v78)
      {
        v41 = v77;
        v77 = 0;
        if (v76)
        {
          v42 = v75;
          v75 = 0;
          if (v74)
          {
            v79[0] = (WTF::StringImpl *)v73[0];
            *(WTF::StringImpl **)((char *)v79 + 5) = *(WTF::StringImpl **)((char *)v73 + 5);
            if (!v71 && !v70 && v22 > 0xFF && !v40)
            {
              *(_DWORD *)(a2 + 56) = v31 | v30;
              *(_DWORD *)(a2 + 60) = v37 | v36;
              *(_QWORD *)(a2 + 64) = v5;
              *(_QWORD *)a2 = v69;
              *(_QWORD *)(a2 + 8) = v41;
              *(_QWORD *)(a2 + 16) = v42;
              *(_OWORD *)(a2 + 24) = *(_OWORD *)v79;
              *(_DWORD *)(a2 + 40) = v68;
              *(_WORD *)(a2 + 44) = v19 | ((_WORD)v22 << 8);
              *(_QWORD *)(a2 + 48) = v4;
              *(_BYTE *)(a2 + 72) = 1;
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_62:
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
LABEL_51:
  if (v76)
  {
    result = v75;
    v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v78)
  {
    result = v77;
    v77 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196DFC2A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22)
{
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

int64_t IPC::Decoder::decode<WTF::MediaTime>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::MediaTime,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
  IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 4));
  return IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
}

uint64_t IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  char v28;

  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v27);
  IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v24, a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v21, a1);
  result = (uint64_t)IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v18, a1);
  if (*a1)
  {
    if (v28)
    {
      *(_QWORD *)&v14 = v27[0];
      *(_QWORD *)((char *)&v14 + 5) = *(_QWORD *)((char *)v27 + 5);
      if (v26)
      {
        v6 = v24;
        v7 = v25;
        v24 = 0;
        v25 = 0;
        if (v23)
        {
          v8 = v21;
          v9 = v22;
          v21 = 0;
          v22 = 0;
          if (v20)
          {
            v10 = v18;
            v18 = 0;
            *(_OWORD *)a2 = v14;
            v15[0] = 0;
            *(_QWORD *)(a2 + 16) = v6;
            v15[1] = 0;
            *(_QWORD *)(a2 + 24) = v7;
            v16[0] = 0;
            *(_QWORD *)(a2 + 32) = v8;
            v16[1] = 0;
            *(_QWORD *)(a2 + 40) = v9;
            v17[0] = 0;
            *(_QWORD *)(a2 + 48) = v10;
            v17[1] = 0;
            v11 = v19;
            v19 = 0;
            *(_QWORD *)(a2 + 56) = v11;
            *(_BYTE *)(a2 + 64) = 1;
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v12);
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v13);
LABEL_7:
            result = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
            goto LABEL_8;
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  if (v20)
    goto LABEL_7;
LABEL_8:
  if (v23)
    result = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v5);
  if (v26)
    return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v5);
  return result;
}

void sub_196DFC55C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a22)
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, a2);
  if (*(_BYTE *)(v22 - 64))
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 80, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF *v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  char v34;
  WTF *v35;
  uint64_t v36;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v5, v4);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_25;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v16 = v4;
    v17 = 0;
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_47:
    v27 = *a2;
    v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v28)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v27);
    }
    return result;
  }
  v9 = *v8;
  v35 = 0;
  v36 = 0;
  if (v9 >= 0xAAAA)
  {
    do
    {
      result = IPC::Decoder::decode<WebKit::InitializationSegmentInfo::TrackInformation>((uint64_t)&v30, a2);
      if (!v34)
        goto LABEL_46;
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        result = (WTF::StringImpl *)WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::InitializationSegmentInfo::TrackInformation>((unsigned int *)&v35, (unint64_t)&v30);
      }
      else
      {
        v20 = (char *)v35 + 24 * HIDWORD(v36);
        v21 = v30;
        v30 = 0;
        *(_QWORD *)v20 = v21;
        LOWORD(v21) = v31;
        v20[10] = v32;
        *((_WORD *)v20 + 4) = (_WORD)v21;
        *((_QWORD *)v20 + 2) = v33;
        ++HIDWORD(v36);
      }
      if (v34)
      {
        result = v30;
        v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
      }
      --v9;
    }
    while (v9);
    v22 = HIDWORD(v36);
    v23 = v35;
    if (v36 > HIDWORD(v36))
    {
      v24 = v35;
      if (HIDWORD(v36))
      {
        if (HIDWORD(v36) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v25 = 24 * HIDWORD(v36);
        v26 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v36)));
        LODWORD(v36) = v25 / 0x18;
        v35 = v26;
        v24 = v23;
        if (v26 != v23)
        {
          WTF::VectorMover<false,WebKit::InitializationSegmentInfo::TrackInformation>::move(v23, (WTF::StringImpl *)((char *)v23 + 24 * v22), (uint64_t)v26);
          v24 = v35;
        }
      }
      if (v23)
      {
        if (v24 == v23)
        {
          v35 = 0;
          LODWORD(v36) = 0;
        }
        WTF::fastFree(v23, a2);
        v23 = v35;
      }
      else
      {
        v23 = v24;
      }
    }
    *(_QWORD *)a1 = v23;
    v29 = v36;
    v35 = 0;
    v36 = 0;
    *(_QWORD *)(a1 + 8) = v29;
    goto LABEL_23;
  }
  if (v9)
  {
    LODWORD(v36) = 24 * (int)v9 / 0x18u;
    v35 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::InitializationSegmentInfo::TrackInformation>((uint64_t)&v30, a2);
      if (!v34)
        break;
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::InitializationSegmentInfo::TrackInformation>((unsigned int *)&v35, (unint64_t)&v30);
      }
      else
      {
        v10 = (char *)v35 + 24 * HIDWORD(v36);
        v11 = v30;
        v30 = 0;
        *(_QWORD *)v10 = v11;
        LOWORD(v11) = v31;
        v10[10] = v32;
        *((_WORD *)v10 + 4) = (_WORD)v11;
        *((_QWORD *)v10 + 2) = v33;
        ++HIDWORD(v36);
      }
      if (v34)
      {
        v12 = v30;
        v30 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      if (!--v9)
      {
        v13 = v35;
        v14 = v36;
        goto LABEL_22;
      }
    }
LABEL_46:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
    goto LABEL_47;
  }
  v13 = 0;
  v14 = 0;
LABEL_22:
  v35 = 0;
  v36 = 0;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
LABEL_23:
  *(_BYTE *)(a1 + 16) = 1;
  return (WTF::StringImpl *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
}

void sub_196DFC928(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::MediaDescriptionInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 10);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 3);
  IPC::VectorArgumentCoder<false,WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v2 + 4);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 6));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 9));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 12));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 15));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 18));
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(a1, (_DWORD *)v2 + 42);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 23));
  IPC::VectorArgumentCoder<false,WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 25));
  v4 = *((_DWORD *)v2 + 60);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t)(v2 + 27), v4);
  v5 = *((_DWORD *)v2 + 62);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((_DWORD *)v2 + 63);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_DWORD *)v2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *((_DWORD *)v2 + 65);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = v2[33];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 272);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 273);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 274);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 275);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 276);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v2) = *((_BYTE *)v2 + 277);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  void *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  char v52;
  char v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  char v59;
  char v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  char v66;
  char v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  char v73;
  char v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  char v80;
  char v81;
  unint64_t v82;
  char *v83;
  unsigned int v84;
  BOOL v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  int v99;
  char v100;
  int v101;
  int v102;
  char v103;
  unint64_t v104;
  void *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  char v136;
  unint64_t v137;
  int v138;
  int v139;
  uint64_t *v140;
  char v141;
  unint64_t v142;
  int v143;
  int v144;
  uint64_t *v145;
  char v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  uint64_t *v153;
  char v154;
  unint64_t v155;
  int v156;
  uint64_t *v157;
  char v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t *v163;
  char v164;
  unint64_t v165;
  int v166;
  int v167;
  uint64_t *v168;
  char v169;
  unint64_t v170;
  char v171;
  char v172;
  int v173;
  int v174;
  uint64_t *v175;
  char v176;
  unint64_t v177;
  char v178;
  int v179;
  int v180;
  uint64_t *v181;
  char v182;
  unint64_t v183;
  char v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t *v189;
  char v190;
  unint64_t v191;
  int v192;
  int v193;
  int v194;
  uint64_t *v195;
  char v196;
  unint64_t v197;
  int v198;
  char v199;
  int v200;
  int v201;
  uint64_t *v202;
  char v203;
  unint64_t v204;
  int v205;
  uint64_t *v206;
  char v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  char v211;
  int v212;
  int v213;
  uint64_t *v214;
  char v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  char v219;
  int v220;
  int v221;
  uint64_t *v222;
  char v223;
  unint64_t v224;
  uint64_t v225;
  int v226;
  char v227;
  int v228;
  int v229;
  uint64_t *v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  char v234;
  int v235;
  int v236;
  uint64_t *v237;
  char v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  int v242;
  int v243;
  uint64_t *v244;
  char v245;
  unint64_t v246;
  uint64_t v247;
  BOOL v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  char v262;
  char v263;
  char v264;
  char v265;
  int v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  int v272;
  char v273;
  char v274;
  char v275;
  int v276;
  int v277;
  char v278;
  char v279;
  char v280;
  char v281;
  char v282;
  char v283;
  char v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  char v301;
  int v302;
  char v303;
  char v304;
  char v305;
  int v306;
  char v307;
  char v308;
  char v309;
  char v310;
  char v311;
  char v312;
  char v313;
  WTF::StringImpl *v315;
  unint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  __int128 v321;
  char v322;
  WTF *v323;
  uint64_t v324;
  char v325;
  char v326;
  WTF *v327;
  uint64_t v328;
  char v329;
  char v330;
  WTF *v331;
  uint64_t v332;
  char v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  char v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  WTF::StringImpl *v346;
  char v347;
  WTF::StringImpl *v348;
  char v349;
  WTF::StringImpl *v350;
  char v351;
  WTF::StringImpl *v352;
  char v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  WTF *v366;
  uint64_t v367;
  char v368;
  WTF *v369;
  uint64_t v370;
  char v371;
  WTF *v372;
  uint64_t v373;
  char v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  WTF::StringImpl *v378;
  unint64_t v379;
  _QWORD v380[7];
  char v381;
  char v382;
  char v383;
  char v384;
  char v385;
  BOOL v386;
  WTF::StringImpl *v387;
  uint64_t v388;
  int v389;
  char v390;
  uint64_t v391;

  v2 = a1;
  v391 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v352);
  IPC::Decoder::decode<WTF::String>(v2, &v350);
  IPC::Decoder::decode<WTF::String>(v2, &v348);
  IPC::Decoder::decode<WTF::String>(v2, &v346);
  IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v343, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v339, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v335, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v331, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v327, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v323, v2);
  IPC::Decoder::decode<WebCore::LayoutRect>(v2, (uint64_t)&v321);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v3, (uint64_t)&v318);
  v4 = v2[1];
  v5 = (char *)*v2;
  v6 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v19 = 0;
    v20 = 0;
    *v2 = 0;
    v2[1] = 0;
    v21 = v2[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *v2;
        v19 = v2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
  }
  else
  {
    v7 = (unint64_t *)&v5[v6];
    v2[2] = (uint64_t)(v7 + 1);
    if (v5)
    {
      v8 = *v7;
      v387 = 0;
      v388 = 0;
      if (v8 < 0x6666)
      {
        if (v8)
        {
          v9 = WTF::fastMalloc((WTF *)(40 * v8));
          LODWORD(v388) = 40 * (int)v8 / 0x28u;
          v387 = (WTF::StringImpl *)v9;
          do
          {
            IPC::Decoder::decode<WebCore::PlatformTextTrackData>((uint64_t)&v354, v2);
            if (!(_BYTE)v359)
              goto LABEL_33;
            if (HIDWORD(v388) == (_DWORD)v388)
            {
              WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTextTrackData>((unsigned int *)&v387, (unint64_t)&v354);
            }
            else
            {
              v11 = (char *)v387 + 40 * HIDWORD(v388);
              v12 = (uint64_t)v354;
              v354 = 0;
              *(_QWORD *)v11 = v12;
              v13 = v355;
              v355 = 0;
              *((_QWORD *)v11 + 1) = v13;
              v14 = v356;
              v356 = 0;
              *((_QWORD *)v11 + 2) = v14;
              v15 = v357;
              v11[32] = v358;
              *((_QWORD *)v11 + 3) = v15;
              ++HIDWORD(v388);
            }
            std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
            --v8;
          }
          while (v8);
          v16 = v387;
          v18 = v388;
          v17 = HIDWORD(v388);
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v16 = 0;
        }
        v387 = 0;
        v315 = v16;
LABEL_15:
        v388 = 0;
        v316 = __PAIR64__(v17, v18);
        v317 = 1;
        WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v387, v5);
        goto LABEL_35;
      }
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTextTrackData>((uint64_t)&v354, v2);
        if (!(_BYTE)v359)
          break;
        if (HIDWORD(v388) == (_DWORD)v388)
        {
          WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTextTrackData>((unsigned int *)&v387, (unint64_t)&v354);
        }
        else
        {
          v23 = (char *)v387 + 40 * HIDWORD(v388);
          v24 = (uint64_t)v354;
          v354 = 0;
          *(_QWORD *)v23 = v24;
          v25 = v355;
          v355 = 0;
          *((_QWORD *)v23 + 1) = v25;
          v26 = v356;
          v356 = 0;
          *((_QWORD *)v23 + 2) = v26;
          v27 = v357;
          v23[32] = v358;
          *((_QWORD *)v23 + 3) = v27;
          ++HIDWORD(v388);
        }
        std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
        if (!--v8)
        {
          v28 = HIDWORD(v388);
          v29 = v387;
          if (v388 > HIDWORD(v388))
          {
            v30 = v387;
            if (HIDWORD(v388))
            {
              if (HIDWORD(v388) >= 0x6666667)
              {
                __break(0xC471u);
                JUMPOUT(0x196DFE0E0);
              }
              v31 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v388)));
              LODWORD(v388) = 40 * v28 / 0x28;
              v387 = (WTF::StringImpl *)v31;
              v30 = v29;
              if ((WTF::StringImpl *)v31 != v29)
              {
                WTF::VectorMover<false,WebCore::PlatformTextTrackData>::move(v29, (WTF::StringImpl *)((char *)v29 + 40 * v28), v31);
                v30 = v387;
              }
            }
            if (v29)
            {
              if (v30 == v29)
              {
                v387 = 0;
                LODWORD(v388) = 0;
              }
              WTF::fastFree(v29, v5);
              v29 = v387;
            }
            else
            {
              v29 = v30;
            }
          }
          v387 = 0;
          v315 = v29;
          v18 = v388;
          v17 = HIDWORD(v388);
          goto LABEL_15;
        }
      }
LABEL_33:
      LOBYTE(v315) = 0;
      v317 = 0;
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
      WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v387, v32);
      goto LABEL_34;
    }
    v19 = v4;
    v20 = 0;
  }
  *v2 = 0;
  v2[1] = 0;
  v22 = v2[3];
  if (v22 && v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
  LOBYTE(v315) = 0;
  v317 = 0;
LABEL_34:
  v33 = (char *)*v2;
  v34 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v35 = v2[3];
  if (v35)
    goto LABEL_162;
  while (1)
  {
LABEL_35:
    IPC::Decoder::decode<WebCore::SecurityOriginData>(v2, &v387);
    v36 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    v38 = v37;
    if (!v37)
    {
      v110 = *v2;
      v111 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v112 = v2[3];
      if (v112)
      {
        if (v111)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v110);
      }
    }
    v39 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
    v41 = v40;
    v34 = v2[1];
    v33 = (char *)*v2;
    v42 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v34 < v42 || v34 - v42 <= 7)
    {
      v113 = 0;
      v114 = 0;
      *v2 = 0;
      v2[1] = 0;
      v115 = v2[3];
      if (v115)
      {
        v184 = v41;
        v185 = v39;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 16))(v115);
          v114 = *v2;
          v113 = v2[1];
        }
        else
        {
          v113 = 0;
          v114 = 0;
        }
        v39 = v185;
        v41 = v184;
      }
    }
    else
    {
      v43 = (uint64_t **)&v33[v42];
      v44 = (uint64_t)&v33[v42 + 8];
      v2[2] = v44;
      if (v33)
      {
        v45 = 0;
        v46 = *v43;
        goto LABEL_40;
      }
      v113 = v34;
      v114 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v116 = v2[3];
    if (!v116)
    {
      v46 = 0;
      v113 = 0;
      v33 = 0;
      v45 = 1;
      goto LABEL_170;
    }
    v148 = v41;
    v149 = v39;
    if (!v113)
    {
      v46 = 0;
      v33 = 0;
      v45 = 1;
LABEL_170:
      *v2 = 0;
      v2[1] = 0;
      v117 = v2[3];
      if (v117)
      {
        v156 = v45;
        v157 = v46;
        v158 = v41;
        v159 = v39;
        if (v113)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v117 + 16))(v117, v33, v113);
          v50 = 0;
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
          v50 = 0;
        }
        v39 = v159;
        v41 = v158;
        v46 = v157;
        v45 = v156;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v50 = 0;
      }
      goto LABEL_172;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v114, v113);
    v46 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v45 = 1;
    v44 = v2[2];
    v39 = v149;
    v41 = v148;
LABEL_40:
    v47 = v44 - (_QWORD)v33;
    if (v34 <= v47)
    {
      v205 = v45;
      v206 = v46;
      v207 = v41;
      v208 = v39;
      v113 = 0;
      v209 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v209 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v209 + 16))(v209);
        v33 = (char *)*v2;
        v113 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v208;
      v41 = v207;
      v46 = v206;
      v45 = v205;
      goto LABEL_170;
    }
    v48 = &v33[v47];
    v49 = (uint64_t)&v33[v47 + 1];
    v2[2] = v49;
    if (!v33)
    {
      v113 = v34;
      goto LABEL_170;
    }
    v50 = *v48;
    if (v50 < 2)
    {
      v51 = 0;
      v52 = 1;
      goto LABEL_44;
    }
LABEL_172:
    *v2 = 0;
    v2[1] = 0;
    v118 = v2[3];
    if (!v118)
    {
      v53 = 0;
      v119 = 0;
      v33 = 0;
      v51 = 1;
      goto LABEL_174;
    }
    v134 = v45;
    v135 = v46;
    v136 = v41;
    v137 = v39;
    if (!v34)
    {
      v53 = 0;
      v119 = 0;
      v33 = 0;
      v51 = 1;
LABEL_174:
      *v2 = 0;
      v2[1] = 0;
      v120 = v2[3];
      if (v120)
      {
        v271 = v53;
        v166 = v51;
        v167 = v45;
        v168 = v46;
        v169 = v41;
        v170 = v39;
        if (v119)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v120 + 16))(v120, v33, v119);
          v57 = 0;
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
          v57 = 0;
        }
        v39 = v170;
        v41 = v169;
        v46 = v168;
        v45 = v167;
        v51 = v166;
        v53 = v271;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v57 = 0;
      }
      goto LABEL_176;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v118 + 16))(v118, v33);
    v52 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v51 = 1;
    v49 = v2[2];
    v39 = v137;
    v41 = v136;
    v46 = v135;
    v45 = v134;
LABEL_44:
    if (v50)
      v53 = v52;
    else
      v53 = 0;
    v54 = v49 - (_QWORD)v33;
    if (v34 <= v54)
    {
      v241 = v53;
      v242 = v51;
      v243 = v45;
      v244 = v46;
      v245 = v41;
      v246 = v39;
      v119 = 0;
      v247 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v247 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v247 + 16))(v247);
        v33 = (char *)*v2;
        v119 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v246;
      v41 = v245;
      v46 = v244;
      v45 = v243;
      v51 = v242;
      v53 = v241;
      goto LABEL_174;
    }
    v55 = &v33[v54];
    v56 = (uint64_t)&v33[v54 + 1];
    v2[2] = v56;
    if (!v33)
    {
      v119 = v34;
      goto LABEL_174;
    }
    v57 = *v55;
    if (v57 < 2)
    {
      v58 = 0;
      v59 = 1;
      goto LABEL_51;
    }
LABEL_176:
    *v2 = 0;
    v2[1] = 0;
    v121 = v2[3];
    if (!v121)
    {
      v60 = 0;
      v122 = 0;
      v33 = 0;
      v58 = 1;
      goto LABEL_178;
    }
    v267 = v53;
    v138 = v51;
    v139 = v45;
    v140 = v46;
    v141 = v41;
    v142 = v39;
    if (!v34)
    {
      v60 = 0;
      v122 = 0;
      v33 = 0;
      v58 = 1;
LABEL_178:
      *v2 = 0;
      v2[1] = 0;
      v123 = v2[3];
      if (v123)
      {
        v178 = v60;
        v254 = v58;
        v273 = v53;
        v179 = v51;
        v180 = v45;
        v181 = v46;
        v182 = v41;
        v183 = v39;
        if (v122)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v123 + 16))(v123, v33, v122);
          v64 = 0;
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
          v64 = 0;
        }
        v39 = v183;
        v41 = v182;
        v46 = v181;
        v45 = v180;
        v51 = v179;
        v53 = v273;
        v58 = v254;
        v60 = v178;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v64 = 0;
      }
      goto LABEL_180;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v121 + 16))(v121, v33);
    v59 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v56 = v2[2];
    v39 = v142;
    v58 = 1;
    v41 = v141;
    v46 = v140;
    v45 = v139;
    v51 = v138;
    v53 = v267;
LABEL_51:
    if (v57)
      v60 = v59;
    else
      v60 = 0;
    v61 = v56 - (_QWORD)v33;
    if (v34 <= v61)
    {
      v313 = v60;
      v261 = v58;
      v234 = v53;
      v235 = v51;
      v236 = v45;
      v237 = v46;
      v238 = v41;
      v239 = v39;
      v122 = 0;
      v240 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v240 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 16))(v240);
        v33 = (char *)*v2;
        v122 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v239;
      v41 = v238;
      v46 = v237;
      v45 = v236;
      v51 = v235;
      v53 = v234;
      v58 = v261;
      v60 = v313;
      goto LABEL_178;
    }
    v62 = &v33[v61];
    v63 = (uint64_t)&v33[v61 + 1];
    v2[2] = v63;
    if (!v33)
    {
      v122 = v34;
      goto LABEL_178;
    }
    v64 = *v62;
    if (v64 < 2)
    {
      v65 = 0;
      v66 = 1;
      goto LABEL_58;
    }
LABEL_180:
    *v2 = 0;
    v2[1] = 0;
    v124 = v2[3];
    if (!v124)
    {
      v67 = 0;
      v125 = 0;
      v33 = 0;
      v65 = 1;
      goto LABEL_182;
    }
    v303 = v60;
    v250 = v58;
    v268 = v53;
    v143 = v51;
    v144 = v45;
    v145 = v46;
    v146 = v41;
    v147 = v39;
    if (!v34)
    {
      v67 = 0;
      v125 = 0;
      v33 = 0;
      v65 = 1;
LABEL_182:
      *v2 = 0;
      v2[1] = 0;
      v126 = v2[3];
      if (v126)
      {
        v296 = v67;
        v307 = v60;
        v186 = v65;
        v255 = v58;
        v274 = v53;
        v187 = v51;
        v188 = v45;
        v189 = v46;
        v190 = v41;
        v191 = v39;
        if (v125)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v126 + 16))(v126, v33, v125);
          v71 = 0;
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
          v71 = 0;
        }
        v39 = v191;
        v41 = v190;
        v46 = v189;
        v45 = v188;
        v51 = v187;
        v53 = v274;
        v58 = v255;
        v67 = v296;
        v60 = v307;
        v65 = v186;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v71 = 0;
      }
      goto LABEL_184;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v124 + 16))(v124, v33);
    v66 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v65 = 1;
    v63 = v2[2];
    v39 = v147;
    v41 = v146;
    v46 = v145;
    v45 = v144;
    v51 = v143;
    v53 = v268;
    v58 = v250;
    v60 = v303;
LABEL_58:
    if (v64)
      v67 = v66;
    else
      v67 = 0;
    v68 = v63 - (_QWORD)v33;
    if (v34 <= v68)
    {
      v301 = v67;
      v312 = v60;
      v226 = v65;
      v260 = v58;
      v227 = v53;
      v228 = v51;
      v229 = v45;
      v230 = v46;
      v231 = v41;
      v232 = v39;
      v125 = 0;
      v233 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v233 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v233 + 16))(v233);
        v33 = (char *)*v2;
        v125 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v232;
      v41 = v231;
      v46 = v230;
      v45 = v229;
      v51 = v228;
      v53 = v227;
      v58 = v260;
      v67 = v301;
      v60 = v312;
      v65 = v226;
      goto LABEL_182;
    }
    v69 = &v33[v68];
    v70 = (uint64_t)&v33[v68 + 1];
    v2[2] = v70;
    if (!v33)
    {
      v125 = v34;
      goto LABEL_182;
    }
    v71 = *v69;
    if (v71 < 2)
    {
      v72 = 0;
      v73 = 1;
      goto LABEL_65;
    }
LABEL_184:
    *v2 = 0;
    v2[1] = 0;
    v127 = v2[3];
    if (!v127)
    {
      v74 = 0;
      v128 = 0;
      v33 = 0;
      v72 = 1;
      goto LABEL_186;
    }
    v293 = v67;
    v304 = v60;
    v150 = v65;
    v251 = v58;
    v269 = v53;
    v151 = v51;
    v152 = v45;
    v153 = v46;
    v154 = v41;
    v155 = v39;
    if (!v34)
    {
      v74 = 0;
      v128 = 0;
      v33 = 0;
      v72 = 1;
LABEL_186:
      *v2 = 0;
      v2[1] = 0;
      v129 = v2[3];
      if (v129)
      {
        v281 = v74;
        v288 = v72;
        v297 = v67;
        v308 = v60;
        v192 = v65;
        v256 = v58;
        v275 = v53;
        v193 = v51;
        v194 = v45;
        v195 = v46;
        v196 = v41;
        v197 = v39;
        if (v128)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v129 + 16))(v129, v33, v128);
          v78 = 0;
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
          v78 = 0;
        }
        v39 = v197;
        v41 = v196;
        v46 = v195;
        v45 = v194;
        v51 = v193;
        v53 = v275;
        v74 = v281;
        v58 = v256;
        v67 = v297;
        v60 = v308;
        v65 = v192;
        v72 = v288;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v78 = 0;
      }
      goto LABEL_188;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v127 + 16))(v127, v33);
    v73 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v70 = v2[2];
    v39 = v155;
    v72 = 1;
    v41 = v154;
    v46 = v153;
    v45 = v152;
    v51 = v151;
    v53 = v269;
    v58 = v251;
    v67 = v293;
    v60 = v304;
    v65 = v150;
LABEL_65:
    if (v71)
      v74 = v73;
    else
      v74 = 0;
    v75 = v70 - (_QWORD)v33;
    if (v34 <= v75)
    {
      v284 = v74;
      v291 = v72;
      v300 = v67;
      v311 = v60;
      v218 = v65;
      v259 = v58;
      v219 = v53;
      v220 = v51;
      v221 = v45;
      v222 = v46;
      v223 = v41;
      v224 = v39;
      v128 = 0;
      v225 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v225 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v225 + 16))(v225);
        v33 = (char *)*v2;
        v128 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v224;
      v41 = v223;
      v46 = v222;
      v45 = v221;
      v51 = v220;
      v53 = v219;
      v58 = v259;
      v67 = v300;
      v60 = v311;
      v65 = v218;
      v74 = v284;
      v72 = v291;
      goto LABEL_186;
    }
    v76 = &v33[v75];
    v77 = (uint64_t)&v33[v75 + 1];
    v2[2] = v77;
    if (!v33)
    {
      v128 = v34;
      goto LABEL_186;
    }
    v78 = *v76;
    if (v78 < 2)
    {
      v79 = 0;
      v80 = 1;
      goto LABEL_72;
    }
LABEL_188:
    *v2 = 0;
    v2[1] = 0;
    v130 = v2[3];
    if (!v130)
    {
      v81 = 0;
      v131 = 0;
      v33 = 0;
      v79 = 1;
      goto LABEL_190;
    }
    v279 = v74;
    v286 = v72;
    v294 = v67;
    v305 = v60;
    v160 = v65;
    v252 = v58;
    v270 = v53;
    v161 = v51;
    v162 = v45;
    v163 = v46;
    v164 = v41;
    v165 = v39;
    if (!v34)
    {
      v81 = 0;
      v131 = 0;
      v33 = 0;
      v79 = 1;
LABEL_190:
      *v2 = 0;
      v2[1] = 0;
      v132 = v2[3];
      if (v132)
      {
        v264 = v81;
        v276 = v79;
        v282 = v74;
        v289 = v72;
        v298 = v67;
        v309 = v60;
        v198 = v65;
        v257 = v58;
        v199 = v53;
        v200 = v51;
        v201 = v45;
        v202 = v46;
        v203 = v41;
        v204 = v39;
        if (v131)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v132 + 16))(v132, v33, v131);
          v33 = (char *)*v2;
          v34 = v2[1];
        }
        else
        {
          v34 = 0;
          v33 = 0;
        }
        v39 = v204;
        v41 = v203;
        v46 = v202;
        v45 = v201;
        v51 = v200;
        v53 = v199;
        v58 = v257;
        v81 = v264;
        v67 = v298;
        v60 = v309;
        v65 = v198;
        v74 = v282;
        v72 = v289;
        v79 = v276;
      }
      else
      {
        v34 = 0;
        v33 = 0;
      }
      goto LABEL_192;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v130 + 16))(v130, v33);
    v80 = 0;
    v33 = (char *)*v2;
    v34 = v2[1];
    v77 = v2[2];
    v39 = v165;
    v79 = 1;
    v41 = v164;
    v46 = v163;
    v45 = v162;
    v51 = v161;
    v53 = v270;
    v74 = v279;
    v58 = v252;
    v67 = v294;
    v60 = v305;
    v65 = v160;
    v72 = v286;
LABEL_72:
    if (v78)
      v81 = v80;
    else
      v81 = 0;
    v82 = v77 - (_QWORD)v33;
    if (v34 <= v82)
    {
      v265 = v81;
      v277 = v79;
      v283 = v74;
      v290 = v72;
      v299 = v67;
      v310 = v60;
      v210 = v65;
      v258 = v58;
      v211 = v53;
      v212 = v51;
      v213 = v45;
      v214 = v46;
      v215 = v41;
      v216 = v39;
      v131 = 0;
      v217 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v217 && v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v217 + 16))(v217);
        v33 = (char *)*v2;
        v131 = v2[1];
      }
      else
      {
        v33 = 0;
      }
      v39 = v216;
      v41 = v215;
      v46 = v214;
      v45 = v213;
      v51 = v212;
      v53 = v211;
      v58 = v258;
      v81 = v265;
      v67 = v299;
      v60 = v310;
      v65 = v210;
      v74 = v283;
      v72 = v290;
      v79 = v277;
      goto LABEL_190;
    }
    v83 = &v33[v82];
    v2[2] = (uint64_t)(v83 + 1);
    if (!v33)
    {
      v131 = v34;
      goto LABEL_190;
    }
    v84 = *v83;
    if (v84 <= 1)
    {
      v35 = 0;
      v85 = v84 != 0;
      goto LABEL_79;
    }
LABEL_192:
    *v2 = 0;
    v2[1] = 0;
    v133 = v2[3];
    if (!v133)
      break;
    if (!v34)
      break;
    v263 = v81;
    v272 = v79;
    v280 = v74;
    v287 = v72;
    v295 = v67;
    v306 = v65;
    v171 = v60;
    v253 = v58;
    v172 = v53;
    v173 = v51;
    v174 = v45;
    v175 = v46;
    v176 = v41;
    v177 = v39;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v133 + 16))(v133, v33);
    v39 = v177;
    v58 = v253;
    v81 = v263;
    v67 = v295;
    v65 = v306;
    v74 = v280;
    v72 = v287;
    v79 = v272;
    if (!*v2)
      break;
    v41 = v176;
    v46 = v175;
    v45 = v174;
    v51 = v173;
    v53 = v172;
    v60 = v171;
    v85 = 0;
    v35 = 1;
LABEL_79:
    if (v353)
    {
      v86 = v352;
      v352 = 0;
      v354 = v86;
      if (v351)
      {
        v87 = v350;
        v350 = 0;
        v355 = v87;
        if (v349)
        {
          v88 = v348;
          v348 = 0;
          v356 = v88;
          if (v347)
          {
            v89 = v346;
            v346 = 0;
            v357 = v89;
            if (v345)
            {
              v358 = v343;
              v90 = v344;
              v343 = 0;
              v344 = 0;
              v359 = v90;
              if (v342)
              {
                LOBYTE(v360) = 0;
                v362 = 0;
                if (v341)
                {
                  v360 = v339;
                  v91 = v340;
                  v339 = 0;
                  v340 = 0;
                  v361 = v91;
                  v362 = 1;
                }
                if (v338)
                {
                  LOBYTE(v363) = 0;
                  v365 = 0;
                  if (v337)
                  {
                    v363 = v335;
                    v92 = v336;
                    v335 = 0;
                    v336 = 0;
                    v364 = v92;
                    v365 = 1;
                  }
                  if (v334)
                  {
                    LOBYTE(v366) = 0;
                    v368 = 0;
                    if (v333)
                    {
                      v366 = v331;
                      v93 = v332;
                      v331 = 0;
                      v332 = 0;
                      v367 = v93;
                      v368 = 1;
                    }
                    if (v330)
                    {
                      LOBYTE(v369) = 0;
                      v371 = 0;
                      if (v329)
                      {
                        v369 = v327;
                        v94 = v328;
                        v327 = 0;
                        v328 = 0;
                        v370 = v94;
                        v371 = 1;
                      }
                      if (v326)
                      {
                        LOBYTE(v372) = 0;
                        v374 = 0;
                        if (v325)
                        {
                          v372 = v323;
                          v95 = v324;
                          v323 = 0;
                          v324 = 0;
                          v373 = v95;
                          v374 = 1;
                        }
                        if (v322)
                        {
                          v375 = v321;
                          if (v320)
                          {
                            v376 = v318;
                            v96 = v319;
                            v318 = 0;
                            v319 = 0;
                            v377 = v96;
                            if (v317)
                            {
                              v378 = v315;
                              v97 = v316;
                              v315 = 0;
                              v316 = 0;
                              v379 = v97;
                              if (v390)
                              {
                                v248 = v85;
                                v249 = v35;
                                v262 = v81;
                                v266 = v79;
                                v278 = v74;
                                v285 = v72;
                                v292 = v67;
                                v302 = v65;
                                v98 = v60;
                                v99 = v58;
                                v100 = v53;
                                v101 = v51;
                                v102 = v45;
                                v2 = v46;
                                v103 = v41;
                                v104 = v39;
                                v35 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v380, (uint64_t)&v387);
                                if (v38)
                                {
                                  v380[4] = v36;
                                  if (v103)
                                  {
                                    v380[5] = v104;
                                    if (!v102)
                                    {
                                      v380[6] = v2;
                                      if (!v101)
                                      {
                                        v381 = v100;
                                        if (!v99)
                                        {
                                          v382 = v98;
                                          if (!v302)
                                          {
                                            v383 = v292;
                                            if (!v285)
                                            {
                                              v384 = v278;
                                              if (!v266)
                                              {
                                                v385 = v262;
                                                if (!v249)
                                                {
                                                  v386 = v248;
                                                  *(_BYTE *)(WebKit::RemoteMediaPlayerProxyConfiguration::RemoteMediaPlayerProxyConfiguration((uint64_t)a2, (uint64_t *)&v354)+ 280) = 1;
                                                  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)&v354, v105);
                                                  goto LABEL_113;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_162:
    if (v34)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v35 + 16))(v35, v33);
  }
  *a2 = 0;
  a2[280] = 0;
LABEL_113:
  if (v390 && v389 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v389])(&v354, &v387);
  if (v317)
    WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v315, v33);
  if (v320)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v318, v33);
  if (v326 && v325 && v323)
    WTF::fastFree(v323, v33);
  if (v330 && v329 && v327)
    WTF::fastFree(v327, v33);
  if (v334 && v333 && v331)
    WTF::fastFree(v331, v33);
  if (v338 && v337)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v335, v33);
  if (v342 && v341)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v339, v33);
  if (v345)
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v343, v33);
  if (v347)
  {
    v106 = v346;
    v346 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v106 -= 2;
    }
  }
  if (v349)
  {
    v107 = v348;
    v348 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v107 -= 2;
    }
  }
  if (v351)
  {
    v108 = v350;
    v350 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v108 -= 2;
    }
  }
  if (v353)
  {
    v109 = v352;
    v352 = 0;
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v109 -= 2;
    }
  }
}

void sub_196DFE114(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,uint64_t a30,char a31,int a32,__int16 a33,WTF *a34,uint64_t a35,char a36,int a37,__int16 a38,WTF *a39,uint64_t a40,char a41,int a42,__int16 a43,int a44,__int16 a45,uint64_t a46,char a47,int a48,__int16 a49,int a50,__int16 a51,uint64_t a52,char a53,int a54,__int16 a55,int a56,__int16 a57,uint64_t a58,char a59,WTF::StringImpl *a60,char a61,WTF::StringImpl *a62,char a63)
{
  WTF::StringImpl *a64;
  char a65;
  WTF::StringImpl *a66;
  char a67;
  WTF::StringImpl *a68;
  uint64_t v68;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  if (*(_BYTE *)(v68 - 104))
  {
    v70 = *(unsigned int *)(v68 - 112);
    if ((_DWORD)v70 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v70])(&a68, v68 - 136);
  }
  if (a21)
    WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  if (a25)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  if ((_BYTE)a33 && a31 && a29)
    WTF::fastFree(a29, a2);
  if ((_BYTE)a38 && a36 && a34)
    WTF::fastFree(a34, a2);
  if ((_BYTE)a43 && a41 && a39)
    WTF::fastFree(a39, a2);
  if ((_BYTE)a49 && a47)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a45, a2);
  if ((_BYTE)a55 && a53)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a51, a2);
  if (a59)
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a57, a2);
  if (a61)
  {
    v71 = a60;
    a60 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  if (a63)
  {
    v72 = a62;
    a62 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v72 -= 2;
    }
  }
  if (a65)
  {
    v73 = a64;
    a64 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v73 -= 2;
    }
  }
  if (a67)
  {
    v74 = a66;
    a66 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v31 = 0;
    v32 = 0;
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v5, v4);
        v32 = *a2;
        v31 = a2[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
LABEL_40:
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34 && v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_35:
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v30)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29);
    }
    return result;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v31 = v4;
    v32 = 0;
    goto LABEL_40;
  }
  v9 = *v8;
  v39 = 0;
  v40 = 0;
  if (v9 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ContentType>(a2, (uint64_t)&v36);
      if (!v38)
      {
LABEL_34:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
        goto LABEL_35;
      }
      if (HIDWORD(v40) != (_DWORD)v40)
        break;
      v21 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v36);
      v22 = HIDWORD(v40) + 1;
      v23 = v39 + 16 * HIDWORD(v40);
      v24 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)v23 = v24;
      *(_BYTE *)(v23 + 8) = *(_BYTE *)(v21 + 8);
      HIDWORD(v40) = v22;
      if (v38)
        goto LABEL_28;
LABEL_32:
      if (!--v9)
      {
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v39, HIDWORD(v40));
        *(_QWORD *)a1 = v39;
        v35 = v40;
        v39 = 0;
        v40 = 0;
        *(_QWORD *)(a1 + 8) = v35;
        goto LABEL_23;
      }
    }
    v25 = HIDWORD(v40) + 1;
    v26 = v39 + 16 * HIDWORD(v40);
    v27 = v36;
    v36 = 0;
    *(_QWORD *)v26 = v27;
    *(_BYTE *)(v26 + 8) = v37;
    HIDWORD(v40) = v25;
LABEL_28:
    v28 = v36;
    v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v28 -= 2;
    }
    goto LABEL_32;
  }
  if (v9)
  {
    LODWORD(v40) = v9;
    v39 = WTF::fastMalloc((WTF *)(16 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ContentType>(a2, (uint64_t)&v36);
      if (!v38)
        goto LABEL_34;
      if (HIDWORD(v40) != (_DWORD)v40)
        break;
      v10 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v36);
      v11 = HIDWORD(v40) + 1;
      v12 = v39 + 16 * HIDWORD(v40);
      v13 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v12 = v13;
      *(_BYTE *)(v12 + 8) = *(_BYTE *)(v10 + 8);
      HIDWORD(v40) = v11;
      if (v38)
        goto LABEL_15;
LABEL_19:
      if (!--v9)
      {
        v18 = v39;
        v19 = v40;
        goto LABEL_22;
      }
    }
    v14 = HIDWORD(v40) + 1;
    v15 = v39 + 16 * HIDWORD(v40);
    v16 = v36;
    v36 = 0;
    *(_QWORD *)v15 = v16;
    *(_BYTE *)(v15 + 8) = v37;
    HIDWORD(v40) = v14;
LABEL_15:
    v17 = v36;
    v36 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v17 -= 2;
    }
    goto LABEL_19;
  }
  v18 = 0;
  v19 = 0;
LABEL_22:
  v39 = 0;
  v40 = 0;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v19;
LABEL_23:
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
}

void sub_196DFE78C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

_BYTE *IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = result;
  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_9;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_9:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v5);
    goto LABEL_11;
  }
  if (!v9)
  {
    *result = 0;
    result[16] = 0;
    result[24] = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v19);
  if (v21)
  {
    *(_QWORD *)v3 = v19;
    v11 = v20;
    v19 = 0;
    v20 = 0;
    *((_QWORD *)v3 + 1) = v11;
    v3[16] = 1;
    result = (_BYTE *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    v3[24] = 1;
    return result;
  }
LABEL_11:
  *v3 = 0;
  v3[24] = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v18)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unint64_t result, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  int v16;
  WTF *v17;
  int v18;
  char v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  uint64_t v37;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v27 = 0;
    v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *a2;
        v27 = a2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
  }
  else
  {
    v8 = (unsigned __int8 *)(v5 + v7);
    v9 = v5 + v7 + 1;
    a2[2] = v9;
    if (v5)
    {
      v10 = *v8;
      if (v10 >= 2)
        goto LABEL_32;
      if (v10)
      {
        v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
        if (v6 < v11 || v6 - v11 <= 7)
        {
          *a2 = 0;
          a2[1] = 0;
          v31 = a2[3];
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            v32 = *a2;
            v33 = a2[1];
            v34 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v34)
            {
              if (v33)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
            }
          }
          goto LABEL_31;
        }
        v13 = (unint64_t *)(v5 + v11);
        v14 = *v13;
        a2[2] = (uint64_t)(v13 + 1);
        v36 = 0;
        v37 = 0;
        if (v14 >= 0x40000)
        {
          while (1)
          {
            v22 = IPC::Decoder::decode<WebCore::FourCC>(a2);
            v35 = v22;
            if (!HIDWORD(v22))
              goto LABEL_29;
            if (HIDWORD(v37) == (_DWORD)v37)
            {
              v20 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v35);
              *((_DWORD *)v36 + HIDWORD(v37)) = *v20;
            }
            else
            {
              *((_DWORD *)v36 + HIDWORD(v37)) = v22;
            }
            v21 = ++HIDWORD(v37);
            if (!--v14)
            {
              result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, v21);
              v17 = v36;
              v18 = v37;
              v16 = HIDWORD(v37);
              goto LABEL_21;
            }
          }
        }
        if (v14)
        {
          LODWORD(v37) = v14;
          v36 = (WTF *)WTF::fastMalloc((WTF *)(4 * v14));
          while (1)
          {
            result = IPC::Decoder::decode<WebCore::FourCC>(a2);
            v35 = result;
            if (!HIDWORD(result))
              break;
            if (HIDWORD(v37) == (_DWORD)v37)
            {
              result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v35);
              *((_DWORD *)v36 + HIDWORD(v37)) = *(_DWORD *)result;
            }
            else
            {
              *((_DWORD *)v36 + HIDWORD(v37)) = result;
            }
            v16 = ++HIDWORD(v37);
            if (!--v14)
            {
              v17 = v36;
              v18 = v37;
              goto LABEL_21;
            }
          }
LABEL_29:
          v23 = v36;
          if (v36)
          {
            v36 = 0;
            LODWORD(v37) = 0;
            WTF::fastFree(v23, v15);
          }
          goto LABEL_31;
        }
        v16 = 0;
        v18 = 0;
        v17 = 0;
LABEL_21:
        *(_QWORD *)v3 = v17;
        v19 = 1;
        *(_DWORD *)(v3 + 8) = v18;
        *(_DWORD *)(v3 + 12) = v16;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)result = 0;
      }
      *(_BYTE *)(v3 + 16) = v19;
      *(_BYTE *)(v3 + 24) = 1;
      return result;
    }
    v27 = v6;
    v28 = 0;
  }
  v6 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  v30 = a2[3];
  if (v30)
  {
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
LABEL_31:
      v5 = *a2;
      v6 = a2[1];
      goto LABEL_32;
    }
    v6 = 0;
    v5 = 0;
  }
LABEL_32:
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24 && v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v5);
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 24) = 0;
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

void sub_196DFEC40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::LayoutRect>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::LayoutRect,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 3);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v2 + 4);
  LODWORD(v4) = *((_DWORD *)v2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 52);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 53);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 54);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 55);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 59);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  char v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  char v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  char v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  char v44;
  unsigned int v45;
  uint64_t result;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  char v87;
  char v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  __int128 v264;
  _QWORD v265[2];
  unsigned __int8 v266;
  uint64_t *v267;
  unsigned __int8 v268;
  uint64_t v269;
  unsigned __int8 v270;
  uint64_t v271;
  unsigned __int8 v272;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v48 = v4;
    v49 = 0;
  }
  else
  {
    v48 = 0;
    v49 = 0;
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v50 + 16))(v50, v5, v4);
        v49 = *v2;
        v48 = v2[1];
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v51 = v2[3];
  if (v51 && v48)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
  v10 = 0;
  v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>(v2, &v271);
  IPC::Decoder::decode<WTF::String>(v2, &v269);
  IPC::Decoder::decode<WTF::String>(v2, &v267);
  IPC::Decoder::decode<WTF::MediaTime>(v2, (uint64_t)v265);
  v11 = v2[1];
  v12 = *v2;
  v13 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v11 >= v13 && v11 - v13 > 3)
  {
    v15 = (int *)(v12 + v13);
    v2[2] = (uint64_t)(v15 + 1);
    if (v12)
    {
      v16 = 0;
      v17 = *v15;
      goto LABEL_15;
    }
    v52 = v11;
    v53 = 0;
  }
  else
  {
    v52 = 0;
    v53 = 0;
    *v2 = 0;
    v2[1] = 0;
    v54 = v2[3];
    if (v54)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        v53 = *v2;
        v52 = v2[1];
      }
      else
      {
        v52 = 0;
        v53 = 0;
      }
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v55 = v2[3];
  if (!v55 || !v52)
  {
    v12 = 0;
    v17 = 0;
    v11 = 0;
    v16 = 1;
    goto LABEL_88;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53, v52);
  v17 = 0;
  v12 = *v2;
  v11 = v2[1];
  v16 = 1;
LABEL_15:
  if (v11 <= v2[2] - v12)
  {
LABEL_88:
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (result)
      goto LABEL_168;
    v56 = 0;
    v11 = 0;
    goto LABEL_90;
  }
  v18 = (unsigned __int8 *)v2[2];
  v2[2] = (uint64_t)(v18 + 1);
  if (!v12)
  {
    v56 = 0;
    goto LABEL_90;
  }
  v19 = *v18;
  if (v19 >= 3)
    goto LABEL_92;
  v20 = v19 | 0x100;
LABEL_19:
  if (v11 <= v2[2] - v12)
  {
    while (1)
    {
      *v2 = 0;
      v2[1] = 0;
      v59 = v2[3];
      if (v59)
      {
        v206 = v20;
        v230 = v17;
        v254 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v12);
          v60 = *v2;
          v11 = v2[1];
        }
        else
        {
          v60 = 0;
        }
        v17 = v230;
        v16 = v254;
        v20 = v206;
      }
      else
      {
        v60 = 0;
        v11 = 0;
      }
LABEL_96:
      *v2 = 0;
      v2[1] = 0;
      v61 = v2[3];
      if (v61)
      {
        v199 = v20;
        v222 = v17;
        v246 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v60);
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v12 = 0;
        }
        v17 = v222;
        v16 = v246;
        v20 = v199;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
LABEL_98:
      *v2 = 0;
      v2[1] = 0;
      v62 = v2[3];
      if (v62)
      {
        v195 = v20;
        v217 = v17;
        v241 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v12);
          v23 = 0;
          v12 = *v2;
          v11 = v2[1];
          v17 = v217;
          v16 = v241;
          v20 = v195;
          goto LABEL_23;
        }
        v12 = 0;
        v23 = 0;
      }
      else
      {
        v12 = 0;
        v23 = 0;
        v11 = 0;
      }
LABEL_100:
      *v2 = 0;
      v2[1] = 0;
      v63 = v2[3];
      if (v63)
      {
        v187 = v23;
        v208 = v20;
        v232 = v17;
        v256 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v12);
          v64 = *v2;
          v11 = v2[1];
        }
        else
        {
          v64 = 0;
        }
        v17 = v232;
        v16 = v256;
        v23 = v187;
        v20 = v208;
      }
      else
      {
        v64 = 0;
        v11 = 0;
      }
LABEL_102:
      *v2 = 0;
      v2[1] = 0;
      v65 = v2[3];
      if (v65)
      {
        v181 = v23;
        v201 = v20;
        v224 = v17;
        v248 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v64);
          v26 = 0;
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v12 = 0;
          v26 = 0;
        }
        v17 = v224;
        v16 = v248;
        v23 = v181;
        v20 = v201;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v26 = 0;
      }
LABEL_104:
      *v2 = 0;
      v2[1] = 0;
      v66 = v2[3];
      if (v66)
      {
        v161 = v26;
        v177 = v23;
        v196 = v20;
        v218 = v17;
        v242 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v12);
          v28 = 0;
          v12 = *v2;
          v11 = v2[1];
          v27 = 1;
          v25 = (unsigned __int8 *)v2[2];
          v17 = v218;
          v16 = v242;
          v23 = v177;
          v20 = v196;
          v26 = v161;
          goto LABEL_27;
        }
        v28 = 0;
        v30 = 0;
        v12 = 0;
        v27 = 1;
      }
      else
      {
        v28 = 0;
        v30 = 0;
        v12 = 0;
        v27 = 1;
      }
LABEL_106:
      *v2 = 0;
      v2[1] = 0;
      v67 = v2[3];
      if (v67)
      {
        v150 = v27;
        v166 = v28;
        v183 = v23;
        v203 = v20;
        v226 = v17;
        v250 = v16;
        if (v30)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v12, v30);
          LODWORD(v30) = 0;
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v17 = v226;
        v16 = v250;
        v23 = v183;
        v20 = v203;
        v27 = v150;
        v28 = v166;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v30) = 0;
      }
LABEL_108:
      *v2 = 0;
      v2[1] = 0;
      v68 = v2[3];
      if (v68)
      {
        v133 = v30;
        v146 = v27;
        v162 = v28;
        v178 = v23;
        v197 = v20;
        v219 = v17;
        v243 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v12);
          v32 = 0;
          v12 = *v2;
          v11 = v2[1];
          v31 = 1;
          v29 = (unsigned __int8 *)v2[2];
          v17 = v219;
          v16 = v243;
          v23 = v178;
          v20 = v197;
          v27 = v146;
          v28 = v162;
          LODWORD(v30) = v133;
          goto LABEL_33;
        }
        v32 = 0;
        v34 = 0;
        v12 = 0;
        v31 = 1;
      }
      else
      {
        v32 = 0;
        v34 = 0;
        v12 = 0;
        v31 = 1;
      }
LABEL_110:
      *v2 = 0;
      v2[1] = 0;
      v69 = v2[3];
      if (v69)
      {
        v125 = v31;
        v138 = v32;
        v152 = v27;
        v168 = v28;
        v185 = v23;
        v205 = v20;
        v229 = v17;
        v253 = v16;
        if (v34)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v12, v34);
          LODWORD(v34) = 0;
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v17 = v229;
        v16 = v253;
        v23 = v185;
        v20 = v205;
        v27 = v152;
        v28 = v168;
        v31 = v125;
        v32 = v138;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v34) = 0;
      }
LABEL_112:
      *v2 = 0;
      v2[1] = 0;
      v70 = v2[3];
      if (v70)
      {
        v111 = v34;
        v121 = v31;
        v134 = v32;
        v147 = v27;
        v163 = v28;
        v179 = v23;
        v198 = v20;
        v221 = v17;
        v245 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v12);
          v36 = 0;
          v12 = *v2;
          v11 = v2[1];
          v35 = 1;
          v33 = (unsigned __int8 *)v2[2];
          v17 = v221;
          v16 = v245;
          v23 = v179;
          v20 = v198;
          v27 = v147;
          v28 = v163;
          v31 = v121;
          v32 = v134;
          LODWORD(v34) = v111;
          goto LABEL_39;
        }
        v36 = 0;
        v37 = 0;
        v12 = 0;
        v35 = 1;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v12 = 0;
        v35 = 1;
      }
LABEL_114:
      *v2 = 0;
      v2[1] = 0;
      v71 = v2[3];
      if (v71)
      {
        v105 = v35;
        v115 = v36;
        v126 = v31;
        v139 = v32;
        v153 = v27;
        v169 = v28;
        v186 = v23;
        v207 = v20;
        v231 = v17;
        v255 = v16;
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v71 + 16))(v71, v12, v37);
          LODWORD(v37) = 0;
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v17 = v231;
        v16 = v255;
        v23 = v186;
        v20 = v207;
        v27 = v153;
        v28 = v169;
        v31 = v126;
        v32 = v139;
        v35 = v105;
        v36 = v115;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v37) = 0;
      }
LABEL_116:
      *v2 = 0;
      v2[1] = 0;
      v72 = v2[3];
      if (v72)
      {
        v95 = (int)v37;
        v102 = v35;
        v112 = v36;
        v122 = v31;
        v135 = v32;
        v148 = v27;
        v164 = v28;
        v180 = v23;
        v200 = v20;
        v223 = v17;
        v247 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v12);
          v40 = 0;
          v12 = *v2;
          v11 = v2[1];
          v39 = 1;
          v38 = (unsigned __int8 *)v2[2];
          v17 = v223;
          v16 = v247;
          v23 = v180;
          v20 = v200;
          v27 = v148;
          v28 = v164;
          v31 = v122;
          v32 = v135;
          v35 = v102;
          v36 = v112;
          LODWORD(v37) = v95;
          goto LABEL_45;
        }
        v40 = 0;
        v41 = 0;
        v12 = 0;
        v39 = 1;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v12 = 0;
        v39 = 1;
      }
LABEL_118:
      *v2 = 0;
      v2[1] = 0;
      v73 = v2[3];
      if (v73)
      {
        v91 = v39;
        v98 = v40;
        v106 = v35;
        v116 = v36;
        v127 = v31;
        v140 = v32;
        v154 = v27;
        v170 = v28;
        v188 = v23;
        v209 = v20;
        v233 = v17;
        v257 = v16;
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v73 + 16))(v73, v12, v41);
          LODWORD(v41) = 0;
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v17 = v233;
        v16 = v257;
        v23 = v188;
        v20 = v209;
        v27 = v154;
        v28 = v170;
        v31 = v127;
        v32 = v140;
        v35 = v106;
        v36 = v116;
        v39 = v91;
        v40 = v98;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        LODWORD(v41) = 0;
      }
LABEL_120:
      *v2 = 0;
      v2[1] = 0;
      v74 = v2[3];
      if (v74)
      {
        v85 = (int)v41;
        v89 = v39;
        v96 = v40;
        v103 = v35;
        v113 = v36;
        v123 = v31;
        v136 = v32;
        v149 = v27;
        v165 = v28;
        v182 = v23;
        v202 = v20;
        v225 = v17;
        v249 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v12);
          v44 = 0;
          v12 = *v2;
          v11 = v2[1];
          v43 = 1;
          v42 = (unsigned __int8 *)v2[2];
          v17 = v225;
          v16 = v249;
          v23 = v182;
          v20 = v202;
          v27 = v149;
          v28 = v165;
          v31 = v123;
          v32 = v136;
          v35 = v103;
          v36 = v113;
          v39 = v89;
          v40 = v96;
          LODWORD(v41) = v85;
          goto LABEL_51;
        }
        v44 = 0;
        v75 = 0;
        v12 = 0;
        v43 = 1;
      }
      else
      {
        v44 = 0;
        v75 = 0;
        v12 = 0;
        v43 = 1;
      }
LABEL_122:
      *v2 = 0;
      v2[1] = 0;
      v76 = v2[3];
      if (v76)
      {
        v83 = v43;
        v87 = v44;
        v92 = v39;
        v99 = v40;
        v107 = v35;
        v117 = v36;
        v128 = v31;
        v141 = v32;
        v155 = v27;
        v171 = v28;
        v189 = v23;
        v210 = v20;
        v234 = v17;
        v258 = v16;
        if (v75)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v12, v75);
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
        v17 = v234;
        v16 = v258;
        v23 = v189;
        v20 = v210;
        v27 = v155;
        v28 = v171;
        v31 = v128;
        v32 = v141;
        v35 = v107;
        v36 = v117;
        v39 = v92;
        v40 = v99;
        v43 = v83;
        v44 = v87;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
LABEL_124:
      *v2 = 0;
      v2[1] = 0;
      result = v2[3];
      if (!result)
        break;
      if (!v11)
        break;
      v82 = v43;
      v86 = v44;
      v90 = v39;
      v97 = v40;
      v104 = v35;
      v114 = v36;
      v124 = v31;
      v137 = v32;
      v151 = v27;
      v167 = v28;
      v184 = v23;
      v204 = v20;
      v227 = v17;
      v251 = v16;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
      v17 = v227;
      v16 = v251;
      v23 = v184;
      v20 = v204;
      v27 = v151;
      v28 = v167;
      v31 = v124;
      v32 = v137;
      v35 = v104;
      v36 = v114;
      v39 = v90;
      v40 = v97;
      v43 = v82;
      v44 = v86;
      if (!*v2)
        break;
      v47 = 0;
      result = 1;
      if (!v9)
        goto LABEL_57;
LABEL_167:
      __break(1u);
LABEL_168:
      v228 = v17;
      v252 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
        v56 = *v2;
        v11 = v2[1];
      }
      else
      {
        v56 = 0;
      }
      v17 = v228;
      v16 = v252;
LABEL_90:
      *v2 = 0;
      v2[1] = 0;
      v57 = v2[3];
      if (v57)
      {
        v220 = v17;
        v244 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v56);
          v12 = *v2;
          v11 = v2[1];
        }
        else
        {
          v12 = 0;
        }
        v17 = v220;
        v16 = v244;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
LABEL_92:
      *v2 = 0;
      v2[1] = 0;
      v58 = v2[3];
      if (v58)
      {
        v216 = v17;
        v240 = v16;
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v12);
          v20 = 0;
          v12 = *v2;
          v11 = v2[1];
          v17 = v216;
          v16 = v240;
          goto LABEL_19;
        }
        v12 = 0;
        v20 = 0;
      }
      else
      {
        v12 = 0;
        v20 = 0;
        v11 = 0;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    if (v268)
    {
      result = (uint64_t)v267;
      v267 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v21 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v21 + 1);
    if (!v12)
    {
      v60 = 0;
      goto LABEL_96;
    }
    v22 = *v21;
    if (v22 >= 7)
      goto LABEL_98;
    v23 = v22 | 0x100;
LABEL_23:
    if (v11 <= v2[2] - v12)
      goto LABEL_100;
    v24 = (unsigned __int8 *)v2[2];
    v25 = v24 + 1;
    v2[2] = (uint64_t)(v24 + 1);
    if (!v12)
    {
      v64 = 0;
      goto LABEL_102;
    }
    v26 = *v24;
    if (v26 >= 2)
      goto LABEL_104;
    v27 = 0;
    v28 = 1;
LABEL_27:
    if (!v26)
      v28 = 0;
    if (v11 <= (unint64_t)&v25[-v12])
    {
      v160 = v27;
      v176 = v28;
      v194 = v23;
      v215 = v20;
      v239 = v17;
      v263 = v16;
      v30 = 0;
      v81 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v81 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
        v12 = *v2;
        v30 = v2[1];
      }
      else
      {
        v12 = 0;
      }
      v17 = v239;
      v16 = v263;
      v23 = v194;
      v20 = v215;
      v27 = v160;
      v28 = v176;
      goto LABEL_106;
    }
    v29 = v25 + 1;
    v2[2] = (uint64_t)(v25 + 1);
    if (!v12)
    {
      v30 = v11;
      goto LABEL_106;
    }
    LODWORD(v30) = *v25;
    if (v30 >= 2)
      goto LABEL_108;
    v31 = 0;
    v32 = 1;
LABEL_33:
    if (!(_DWORD)v30)
      v32 = 0;
    if (v11 <= (unint64_t)&v29[-v12])
    {
      v132 = v31;
      v145 = v32;
      v159 = v27;
      v175 = v28;
      v193 = v23;
      v214 = v20;
      v238 = v17;
      v262 = v16;
      v34 = 0;
      v80 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v80 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
        v12 = *v2;
        v34 = v2[1];
      }
      else
      {
        v12 = 0;
      }
      v17 = v238;
      v16 = v262;
      v23 = v193;
      v20 = v214;
      v27 = v159;
      v28 = v175;
      v31 = v132;
      v32 = v145;
      goto LABEL_110;
    }
    v33 = v29 + 1;
    v2[2] = (uint64_t)(v29 + 1);
    if (!v12)
    {
      v34 = v11;
      goto LABEL_110;
    }
    LODWORD(v34) = *v29;
    if (v34 >= 2)
      goto LABEL_112;
    v35 = 0;
    v36 = 1;
LABEL_39:
    if (!(_DWORD)v34)
      v36 = 0;
    if (v11 <= (unint64_t)&v33[-v12])
    {
      v110 = v35;
      v120 = v36;
      v131 = v31;
      v144 = v32;
      v158 = v27;
      v174 = v28;
      v192 = v23;
      v213 = v20;
      v237 = v17;
      v261 = v16;
      v37 = 0;
      v79 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v79 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
        v12 = *v2;
        v37 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v12 = 0;
      }
      v17 = v237;
      v16 = v261;
      v23 = v192;
      v20 = v213;
      v27 = v158;
      v28 = v174;
      v31 = v131;
      v32 = v144;
      v35 = v110;
      v36 = v120;
      goto LABEL_114;
    }
    v37 = v33;
    v38 = v33 + 1;
    v2[2] = (uint64_t)v38;
    if (!v12)
    {
      v37 = (unsigned __int8 *)v11;
      goto LABEL_114;
    }
    LODWORD(v37) = *v37;
    if (v37 >= 2)
      goto LABEL_116;
    v39 = 0;
    v40 = 1;
LABEL_45:
    if (!(_DWORD)v37)
      v40 = 0;
    if (v11 <= (unint64_t)&v38[-v12])
    {
      v94 = v39;
      v101 = v40;
      v109 = v35;
      v119 = v36;
      v130 = v31;
      v143 = v32;
      v157 = v27;
      v173 = v28;
      v191 = v23;
      v212 = v20;
      v236 = v17;
      v260 = v16;
      v41 = 0;
      v78 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v78 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v12 = *v2;
        v41 = (unsigned __int8 *)v2[1];
      }
      else
      {
        v12 = 0;
      }
      v17 = v236;
      v16 = v260;
      v23 = v191;
      v20 = v212;
      v27 = v157;
      v28 = v173;
      v31 = v130;
      v32 = v143;
      v35 = v109;
      v36 = v119;
      v39 = v94;
      v40 = v101;
      goto LABEL_118;
    }
    v41 = v38;
    v42 = v38 + 1;
    v2[2] = (uint64_t)v42;
    if (!v12)
    {
      v41 = (unsigned __int8 *)v11;
      goto LABEL_118;
    }
    LODWORD(v41) = *v41;
    if (v41 >= 2)
      goto LABEL_120;
    v43 = 0;
    v44 = 1;
LABEL_51:
    if (!(_DWORD)v41)
      v44 = 0;
    if (v11 <= (unint64_t)&v42[-v12])
    {
      v84 = v43;
      v88 = v44;
      v93 = v39;
      v100 = v40;
      v108 = v35;
      v118 = v36;
      v129 = v31;
      v142 = v32;
      v156 = v27;
      v172 = v28;
      v190 = v23;
      v211 = v20;
      v235 = v17;
      v259 = v16;
      v75 = 0;
      v77 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v77 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
        v12 = *v2;
        v75 = v2[1];
      }
      else
      {
        v12 = 0;
      }
      v17 = v235;
      v16 = v259;
      v23 = v190;
      v20 = v211;
      v27 = v156;
      v28 = v172;
      v31 = v129;
      v32 = v142;
      v35 = v108;
      v36 = v118;
      v39 = v93;
      v40 = v100;
      v43 = v84;
      v44 = v88;
      goto LABEL_122;
    }
    v2[2] = (uint64_t)(v42 + 1);
    if (!v12)
    {
      v75 = v11;
      goto LABEL_122;
    }
    v45 = *v42;
    if (v45 > 1)
      goto LABEL_124;
    result = 0;
    v47 = v45 != 0;
    if (v9)
      goto LABEL_167;
LABEL_57:
    v12 = v272;
    if (!v272)
      goto LABEL_167;
    v12 = v271;
    v271 = 0;
    v11 = v270;
    if (!v270)
      goto LABEL_167;
    v11 = v269;
    v269 = 0;
    v2 = (uint64_t *)v268;
    if (!v268)
      goto LABEL_167;
    v2 = v267;
    v267 = 0;
    v9 = v266;
    if (!v266)
      goto LABEL_167;
    *(_QWORD *)&v264 = v265[0];
    v9 = *(_DWORD *)((char *)v265 + 5);
    *(_QWORD *)((char *)&v264 + 5) = *(_QWORD *)((char *)v265 + 5);
    if (v16 || v20 <= 0xFF || v23 <= 0xFF || v27 || v31 || v35 || v39 || v43 || (_DWORD)result)
      goto LABEL_167;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v2;
    *(_OWORD *)(a2 + 32) = v264;
    *(_DWORD *)(a2 + 48) = v17;
    *(_BYTE *)(a2 + 52) = v20;
    *(_BYTE *)(a2 + 53) = v23;
    *(_BYTE *)(a2 + 54) = v28;
    *(_BYTE *)(a2 + 55) = v32;
    *(_BYTE *)(a2 + 56) = v36;
    *(_BYTE *)(a2 + 57) = v40;
    *(_BYTE *)(a2 + 58) = v44;
    *(_BYTE *)(a2 + 59) = v47;
    *(_BYTE *)(a2 + 64) = 1;
  }
  if (v270)
  {
    result = v269;
    v269 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v272)
  {
    result = v271;
    v271 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196DFFC40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(v2 - 72))
  {
    v4 = *(WTF::StringImpl **)(v2 - 80);
    *(_QWORD *)(v2 - 80) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  if (*(_BYTE *)(v2 - 56))
  {
    v5 = *(WTF::StringImpl **)(v2 - 64);
    *(_QWORD *)(v2 - 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (*(_BYTE *)(v2 - 40))
  {
    v6 = *(WTF::StringImpl **)(v2 - 48);
    *(_QWORD *)(v2 - 48) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 3);
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 44);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 45);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<WebCore::PlatformVideoTrackConfiguration,void>::encode(a1, (uint64_t)(a2 + 6));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  __int16 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *result;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  _QWORD v89[2];
  char v90;
  WTF::StringImpl *v91;
  char v92;
  WTF::StringImpl *v93;
  char v94;
  __int128 v95;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v49 = v4;
      v50 = 0;
      goto LABEL_69;
    }
    v88 = 0;
    v85 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v49 = 0;
    v50 = 0;
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v5, v4);
        v50 = *a1;
        v49 = a1[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
    }
LABEL_69:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52 && v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50);
    v85 = 0;
    v88 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::String>(a1, &v93);
    IPC::Decoder::decode<WTF::String>(a1, &v91);
    IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v89);
    v9 = a1[1];
    v10 = *a1;
    v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v9 >= v11 && v9 - v11 > 3)
    {
      v13 = (int *)(v10 + v11);
      v14 = v10 + v11 + 4;
      a1[2] = v14;
      if (v10)
      {
        v87 = 0;
        v84 = *v13;
        goto LABEL_15;
      }
      v53 = v9;
      v54 = 0;
    }
    else
    {
      v53 = 0;
      v54 = 0;
      *a1 = 0;
      a1[1] = 0;
      v55 = a1[3];
      if (v55)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
          v54 = *a1;
          v53 = a1[1];
        }
        else
        {
          v53 = 0;
          v54 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (!v56)
    {
      v84 = 0;
      v53 = 0;
LABEL_74:
      v10 = 0;
      v87 = 1;
LABEL_75:
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (v57 && v53)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v10, v53);
        v17 = 0;
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v17 = 0;
      }
      goto LABEL_77;
    }
    if (!v53)
    {
      v84 = 0;
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54, v53);
    v84 = 0;
    v10 = *a1;
    v9 = a1[1];
    v87 = 1;
    v14 = a1[2];
LABEL_15:
    v15 = v14 - v10;
    if (v9 <= v15)
    {
      v53 = 0;
      v78 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v78 && v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v10 = *a1;
        v53 = a1[1];
      }
      else
      {
        v10 = 0;
      }
      goto LABEL_75;
    }
    v16 = (unsigned __int8 *)(v10 + v15);
    a1[2] = (uint64_t)(v16 + 1);
    if (!v10)
    {
      v53 = v9;
      goto LABEL_75;
    }
    v17 = *v16;
    if (v17 < 2)
    {
      v86 = 0;
      v18 = 1;
      goto LABEL_19;
    }
LABEL_77:
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (!v58)
    {
      v10 = 0;
      v83 = 0;
      v9 = 0;
      goto LABEL_79;
    }
    if (!v9)
    {
      v10 = 0;
      v83 = 0;
LABEL_79:
      v86 = 1;
LABEL_80:
      *a1 = 0;
      a1[1] = 0;
      v59 = a1[3];
      if (v59)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v10);
          v60 = *a1;
          v9 = a1[1];
        }
        else
        {
          v60 = 0;
        }
      }
      else
      {
        v60 = 0;
        v9 = 0;
      }
LABEL_82:
      *a1 = 0;
      a1[1] = 0;
      v61 = a1[3];
      if (v61)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v60);
          v10 = *a1;
          v9 = a1[1];
        }
        else
        {
          v10 = 0;
        }
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      goto LABEL_84;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v10);
    v18 = 0;
    v10 = *a1;
    v9 = a1[1];
    v86 = 1;
LABEL_19:
    if (!v17)
      v18 = 0;
    v83 = v18;
    if (v9 <= a1[2] - v10)
      goto LABEL_80;
    v19 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v19 + 1);
    if (!v10)
    {
      v60 = 0;
      goto LABEL_82;
    }
    v20 = *v19;
    if (v20 < 7)
    {
      v21 = v20 | 0x100;
      goto LABEL_25;
    }
LABEL_84:
    *a1 = 0;
    a1[1] = 0;
    v62 = a1[3];
    if (v62 && v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v10);
    v21 = 0;
LABEL_25:
    IPC::Decoder::decode<WTF::String>(a1, &v95);
    v22 = a1[1];
    v23 = *a1;
    v24 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v22 < v24 || v22 - v24 <= 3)
    {
      v28 = 0;
      v63 = 0;
      *a1 = 0;
      a1[1] = 0;
      v64 = a1[3];
      if (v64)
      {
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
          v63 = *a1;
          v28 = a1[1];
        }
        else
        {
          v28 = 0;
          v63 = 0;
        }
      }
    }
    else
    {
      v25 = (int *)(v23 + v24);
      a1[2] = (uint64_t)(v25 + 1);
      if (v23)
      {
        v26 = 0;
        v27 = *v25;
        LODWORD(v82) = v27;
        HIDWORD(v82) = v27 & 0xFFFFFF00;
        v28 = v23;
        goto LABEL_29;
      }
      v28 = v22;
      v63 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v28);
        v82 = 0;
        v28 = *a1;
        v22 = a1[1];
        v26 = 1;
        v23 = *a1;
        goto LABEL_29;
      }
    }
    else
    {
      v28 = 0;
    }
    v22 = 0;
    v23 = 0;
    v82 = 0;
    v26 = 1;
LABEL_29:
    v29 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v23;
    if (v22 < v29 || v22 - v29 <= 3)
    {
      v31 = 0;
      v28 = 0;
      *a1 = 0;
      a1[1] = 0;
      v66 = a1[3];
      if (v66)
      {
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
          v28 = *a1;
          v31 = a1[1];
        }
        else
        {
          v31 = 0;
          v28 = 0;
        }
      }
    }
    else
    {
      v30 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v30 + 1);
      v31 = v22;
      if (v23)
      {
        v32 = 0;
        v33 = *v30 & 0xFFFFFF00;
        v34 = *v30;
        goto LABEL_33;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67 && v31)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v28, v31);
    v33 = 0;
    v34 = 0;
    v32 = 1;
LABEL_33:
    result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>(a1);
    v37 = result;
    v38 = a1[1];
    v39 = *a1;
    v40 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v38 < v40 || v38 - v40 <= 7)
    {
      v68 = 0;
      v69 = 0;
      *a1 = 0;
      a1[1] = 0;
      v70 = a1[3];
      if (v70)
      {
        v77 = v36;
        if (v38)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v39);
          v69 = *a1;
          v68 = a1[1];
        }
        else
        {
          v68 = 0;
          v69 = 0;
        }
        v36 = v77;
      }
    }
    else
    {
      v41 = (uint64_t *)(v39 + v40);
      a1[2] = (uint64_t)(v41 + 1);
      if (v39)
      {
        v42 = 0;
        v43 = *v41;
        goto LABEL_37;
      }
      v68 = v38;
      v69 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      v79 = v36;
      if (v68)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v69, v68);
        v43 = 0;
        v39 = *a1;
        v38 = a1[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v43 = 0;
      }
      v42 = 1;
      v36 = v79;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      v43 = 0;
      v42 = 1;
    }
LABEL_37:
    v44 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v39;
    if (v38 < v44 || v38 - v44 <= 7)
    {
      v71 = 0;
      v72 = 0;
      *a1 = 0;
      a1[1] = 0;
      v73 = a1[3];
      if (v73)
      {
        v81 = v36;
        if (v38)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v39);
          v72 = *a1;
          v71 = a1[1];
        }
        else
        {
          v71 = 0;
          v72 = 0;
        }
        v36 = v81;
      }
    }
    else
    {
      v45 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v45 + 1);
      if (v39)
      {
        v46 = 0;
        v5 = *v45;
LABEL_41:
        v4 = BYTE8(v95);
        if (!BYTE8(v95))
          goto LABEL_67;
        v4 = v95;
        *(_QWORD *)&v95 = 0;
        if (v26 || v32 || !(_BYTE)v36 || v42 || v46)
          goto LABEL_67;
        goto LABEL_47;
      }
      v71 = v38;
      v72 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v74 = a1[3];
    if (v74)
    {
      if (v71)
      {
        v80 = v36;
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72, v71);
        v36 = v80;
        if (*a1)
        {
          v5 = 0;
          v46 = 1;
          goto LABEL_41;
        }
      }
    }
    if (BYTE8(v95))
    {
      v75 = (WTF::StringImpl *)v95;
      *(_QWORD *)&v95 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v36);
        else
          *(_DWORD *)v75 -= 2;
      }
    }
    v36 = (WTF::StringImpl *)*a1;
    v76 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v76)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v36);
    v5 = *a1;
    if (!*a1)
      break;
    v4 = 0;
    v46 = 1;
LABEL_47:
    if (!v88)
    {
      if (v94)
      {
        v47 = v93;
        v93 = 0;
        if (v92)
        {
          v48 = v91;
          v91 = 0;
          if (v90)
          {
            *(_QWORD *)&v95 = v89[0];
            *(_QWORD *)((char *)&v95 + 5) = *(_QWORD *)((char *)v89 + 5);
            if (!v87 && !v86 && v21 > 0xFF && !v46)
            {
              *(_DWORD *)(a2 + 56) = v82 | HIDWORD(v82);
              *(_DWORD *)(a2 + 60) = v34 | v33;
              *(_QWORD *)(a2 + 64) = v37;
              *(_QWORD *)(a2 + 72) = v43;
              *(_QWORD *)(a2 + 80) = v5;
              *(_QWORD *)a2 = v85;
              *(_QWORD *)(a2 + 8) = v47;
              *(_QWORD *)(a2 + 16) = v48;
              *(_OWORD *)(a2 + 24) = v95;
              *(_DWORD *)(a2 + 40) = v84;
              *(_WORD *)(a2 + 44) = v83 | ((_WORD)v21 << 8);
              *(_QWORD *)(a2 + 48) = v4;
              *(_BYTE *)(a2 + 88) = 1;
              goto LABEL_56;
            }
          }
        }
      }
    }
LABEL_67:
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 88) = 0;
LABEL_56:
  if (v92)
  {
    result = v91;
    v91 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v94)
  {
    result = v93;
    v93 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E00670(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22)
{
  uint64_t v22;
  WTF::StringImpl *v24;

  if (*(_BYTE *)(v22 - 88))
  {
    v24 = *(WTF::StringImpl **)(v22 - 96);
    *(_QWORD *)(v22 - 96) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(WebCore::CrossOriginEmbedderPolicy *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

WTF *IPC::ArgumentCoder<WebKit::ITPThirdPartyData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  unsigned int v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  unint64_t v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  __int128 v46;
  char v47;
  WTF *v48;
  uint64_t v49;

  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v43);
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v6, v5);
        v26 = *a1;
        v25 = a1[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_37;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v25 = v5;
    v26 = 0;
LABEL_37:
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28 && v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    LOBYTE(v40) = 0;
LABEL_59:
    v20 = (void *)*a1;
    v39 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      goto LABEL_63;
    while (*a1)
    {
      if (!v44)
        goto LABEL_65;
      v43 = 0;
      __break(1u);
LABEL_63:
      if (v39)
        result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v20);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    goto LABEL_30;
  }
  v10 = *v9;
  v48 = 0;
  v49 = 0;
  if (v10 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyDataForSpecificFirstParty>((uint64_t)&v45, a1);
      if (!v47)
        goto LABEL_58;
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        v29 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v45);
        v30 = (char *)v48 + 24 * HIDWORD(v49);
        v31 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)v30 = v31;
        v32 = *(_OWORD *)(v29 + 8);
      }
      else
      {
        v30 = (char *)v48 + 24 * HIDWORD(v49);
        v33 = v45;
        v45 = 0;
        *(_QWORD *)v30 = v33;
        v32 = v46;
      }
      *(_OWORD *)(v30 + 8) = v32;
      ++HIDWORD(v49);
      if (v47)
      {
        v34 = v45;
        v45 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v4);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      --v10;
    }
    while (v10);
    v35 = HIDWORD(v49);
    result = v48;
    if (v49 > HIDWORD(v49))
    {
      v36 = v48;
      if (HIDWORD(v49))
      {
        if (HIDWORD(v49) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v37 = v48;
        v38 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
        LODWORD(v49) = 24 * v35 / 0x18;
        v48 = (WTF *)v38;
        result = v37;
        v36 = v37;
        if ((WTF::StringImpl *)v38 != v37)
        {
          WTF::VectorMover<false,WebKit::ITPThirdPartyDataForSpecificFirstParty>::move(v37, (WTF::StringImpl *)((char *)v37 + 24 * v35), v38);
          v36 = v48;
          result = v37;
        }
      }
      if (result)
      {
        if (v36 == result)
        {
          v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(result, v4);
        result = v48;
      }
      else
      {
        result = v36;
      }
    }
    v40 = result;
    v19 = v49;
    LODWORD(v10) = HIDWORD(v49);
    v48 = 0;
    v49 = 0;
    goto LABEL_23;
  }
  if (v10)
  {
    v11 = WTF::fastMalloc((WTF *)(24 * v10));
    LODWORD(v49) = 24 * (int)v10 / 0x18u;
    v48 = (WTF *)v11;
    while (1)
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyDataForSpecificFirstParty>((uint64_t)&v45, a1);
      if (!v47)
        break;
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        v12 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v45);
        v13 = (char *)v48 + 24 * HIDWORD(v49);
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v13 = v14;
        v15 = *(_OWORD *)(v12 + 8);
      }
      else
      {
        v13 = (char *)v48 + 24 * HIDWORD(v49);
        v16 = v45;
        v45 = 0;
        *(_QWORD *)v13 = v16;
        v15 = v46;
      }
      *(_OWORD *)(v13 + 8) = v15;
      ++HIDWORD(v49);
      if (v47)
      {
        v17 = v45;
        v45 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v4);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
      if (!--v10)
      {
        v18 = v48;
        v19 = v49;
        LODWORD(v10) = HIDWORD(v49);
        goto LABEL_22;
      }
    }
LABEL_58:
    LOBYTE(v40) = 0;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
    goto LABEL_59;
  }
  v19 = 0;
  v18 = 0;
LABEL_22:
  v48 = 0;
  v49 = 0;
  v40 = v18;
LABEL_23:
  v41 = __PAIR64__(v10, v19);
  v42 = 1;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
  if (*a1)
  {
    if (v44)
    {
      v21 = v43;
      v43 = 0;
      v22 = v40;
      v40 = 0;
      v41 = 0;
      v45 = 0;
      *(_QWORD *)&v46 = 0;
      *(_QWORD *)a2 = v21;
      *(_QWORD *)(a2 + 8) = v22;
      *((_QWORD *)&v46 + 1) = 0;
      *(_DWORD *)(a2 + 16) = v19;
      *(_DWORD *)(a2 + 20) = v10;
      *(_BYTE *)(a2 + 24) = 1;
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v20);
      v23 = v45;
      v45 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v23 -= 2;
      }
      goto LABEL_29;
    }
LABEL_65:
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_29:
  result = (WTF *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v20);
LABEL_30:
  if (v44)
  {
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E00D24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RegistrableDomain::~RegistrableDomain(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

char *IPC::ArgumentCoder<WebKit::ITPThirdPartyDataForSpecificFirstParty,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t *IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v11 >= v2 + v3)
  {
    v12 = (unint64_t)v11 - v2 + 8;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    v10 = (uint64_t *)(v7 + v8);
    a1[2] = (uint64_t)(v10 + 1);
    if (v7)
    {
      if (!v5)
        goto LABEL_15;
      v11 = *v10;
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v11;
      v12 = 1;
      goto LABEL_9;
    }
    v13 = v6;
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_16;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v13)
      break;
    result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v14);
    v7 = *a1;
    if (!*a1)
      break;
LABEL_15:
    __break(1u);
LABEL_16:
    if (v6)
    {
      (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7, v6);
      v14 = *a1;
      v13 = a1[1];
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v12 = 0;
  *(_BYTE *)a2 = 0;
LABEL_9:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

char *IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

unint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned __int8 v15;

  result = IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v14);
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (uint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v6 = v15;
      if (!v15)
        goto LABEL_16;
      v10 = *v9;
      *(_OWORD *)a2 = v14;
      *(_QWORD *)(a2 + 16) = v10;
      v11 = 1;
      goto LABEL_9;
    }
    v12 = v5;
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_17;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
      break;
    if (!v12)
      break;
    result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    if (!*a1)
      break;
    v6 = v15;
LABEL_16:
    __break(1u);
LABEL_17:
    if (v5)
    {
      (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6, v5);
      v13 = *a1;
      v12 = a1[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v11 = 0;
  *(_BYTE *)a2 = 0;
LABEL_9:
  *(_BYTE *)(a2 + 24) = v11;
  return result;
}

unint64_t IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *result;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v3;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

unint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  __int128 v6;
  char v7;

  result = IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v6);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E012B4(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 24))
  {
    if (*((_BYTE *)v1 + 16))
      WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::optional<std::optional<IPC::SharedBufferReference::SerializableBuffer>>::~optional(_BYTE *a1)
{
  if (a1[40] && a1[32] && a1[24])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  return a1;
}

void IPC::ArgumentCoder<IPC::SharedFileHandle,void>::encode(uint64_t a1, IPC::SharedFileHandle *this)
{
  int v3;

  IPC::SharedFileHandle::toMachSendRight(this, &v3);
  IPC::Encoder::addAttachment(a1, (unint64_t)&v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(IPC::Encoder *a1, unint64_t a2)
{
  uint64_t v4;

  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  return a1;
}

void IPC::Decoder::decode<IPC::ConnectionHandle>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<IPC::ConnectionHandle,void>::decode(a1, a2);
  if (!a2[4])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E013F0(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 4))
    WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::SharedMemoryHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E01460(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 16))
    WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;

  v4 = *(WTF::StringImpl **)(a2 + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
  v17 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v17);
  v6 = v17;
  v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 26);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 27);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(WTF::StringImpl **)(a2 + 32);
  if (v11)
    *(_DWORD *)v11 += 2;
  v17 = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v17);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)(a2 + 40);
  if (v14)
    *(_DWORD *)v14 += 2;
  v17 = v14;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::deviceName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::hasActiveRoute(WebKit::MediaPlaybackTargetContextSerialized *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::supportsRemoteVideoPlayback(WebKit::MediaPlaybackTargetContextSerialized *this)
{
  return *((unsigned __int8 *)this + 25);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  char v51;
  WTF::StringImpl *v52;
  char v53;

  IPC::Decoder::decode<WTF::String>(a1, &v52);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_51;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v31 = v4;
    v32 = 0;
    goto LABEL_52;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (!v35 || !v4)
    {
      v12 = 0;
      v36 = 0;
      v5 = 0;
      v10 = 1;
LABEL_56:
      *a1 = 0;
      a1[1] = 0;
      v37 = a1[3];
      if (v37 && v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v5, v36);
        v15 = 0;
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v15 = 0;
      }
      goto LABEL_58;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v5);
    v11 = 0;
    v5 = *a1;
    v4 = a1[1];
    v10 = 1;
    v8 = a1[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v5;
    if (v4 <= v13)
    {
      v36 = 0;
      v47 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v47 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        v5 = *a1;
        v36 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_56;
    }
    v14 = (unsigned __int8 *)(v5 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v5)
    {
      v36 = v4;
      goto LABEL_56;
    }
    v15 = *v14;
    if (v15 < 2)
    {
      v16 = 0;
      v17 = 1;
      goto LABEL_12;
    }
LABEL_58:
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (!v38)
    {
      v5 = 0;
      v18 = 0;
      v4 = 0;
      goto LABEL_60;
    }
    if (!v4)
    {
      v5 = 0;
      v18 = 0;
LABEL_60:
      v16 = 1;
LABEL_61:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v5);
          v40 = *a1;
          v4 = a1[1];
        }
        else
        {
          v40 = 0;
        }
      }
      else
      {
        v40 = 0;
        v4 = 0;
      }
LABEL_63:
      *a1 = 0;
      a1[1] = 0;
      v41 = a1[3];
      if (v41)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v40);
          v5 = *a1;
          v4 = a1[1];
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
      goto LABEL_65;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v5);
    v17 = 0;
    v5 = *a1;
    v4 = a1[1];
    v16 = 1;
LABEL_12:
    if (v15)
      v18 = v17;
    else
      v18 = 0;
    if (v4 <= a1[2] - v5)
      goto LABEL_61;
    v19 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v19 + 1);
    if (!v5)
    {
      v40 = 0;
      goto LABEL_63;
    }
    v20 = *v19;
    if (v20 < 3)
    {
      v21 = v20 | 0x100;
      goto LABEL_19;
    }
LABEL_65:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (!v42)
    {
      v5 = 0;
      v21 = 0;
      v4 = 0;
      goto LABEL_67;
    }
    if (!v4)
    {
      v5 = 0;
      v21 = 0;
LABEL_67:
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v5);
          v44 = *a1;
          v4 = a1[1];
        }
        else
        {
          v44 = 0;
        }
      }
      else
      {
        v44 = 0;
        v4 = 0;
      }
      goto LABEL_69;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v5);
    v21 = 0;
    v5 = *a1;
    v4 = a1[1];
LABEL_19:
    if (v4 <= a1[2] - v5)
      goto LABEL_67;
    v22 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v22 + 1);
    if (!v5)
    {
      v44 = 0;
LABEL_69:
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v44);
          v5 = *a1;
          v4 = a1[1];
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
      goto LABEL_71;
    }
    v23 = *v22;
    if (v23 < 3)
    {
      v24 = v23 | 0x100;
      goto LABEL_23;
    }
LABEL_71:
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v5);
    v24 = 0;
LABEL_23:
    IPC::Decoder::decode<WTF::String>(a1, &v50);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v48);
    if (!*a1)
      break;
    if (v53 && !v10 && !v16 && v21 > 0xFF && v24 > 0xFF && v51 && v49)
    {
      v27 = v52;
      v52 = 0;
      if (v18)
        v28 = 256;
      else
        v28 = 0;
      v29 = v50;
      v50 = 0;
      v30 = v48;
      v48 = 0;
      *(_BYTE *)(a2 + 8) = 2;
      *(_QWORD *)a2 = off_1E34AE7F0;
      *(_QWORD *)(a2 + 16) = v27;
      *(_DWORD *)(a2 + 24) = (v28 | v12) & 0xFF00FFFF | (v21 << 16) | (v24 << 24);
      *(_QWORD *)(a2 + 32) = v29;
      *(_QWORD *)(a2 + 40) = v30;
      *(_BYTE *)(a2 + 48) = 1;
      goto LABEL_35;
    }
    __break(1u);
LABEL_51:
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
LABEL_52:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v31)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
      v9 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (!v49)
    goto LABEL_39;
LABEL_35:
  result = v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_39:
  if (v51)
  {
    result = v50;
    v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v53)
  {
    result = v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E01B34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlaybackTargetContextSerialized::~MediaPlaybackTargetContextSerialized(WebKit::MediaPlaybackTargetContextSerialized *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void API::Data::create(WTF *this@<X1>, const void *a2@<X0>, WebKit **a3@<X8>)
{
  void *v6;
  WebKit *v7;

  if (this)
  {
    v6 = (void *)WTF::fastMalloc(this);
    memcpy(v6, a2, (size_t)this);
  }
  else
  {
    v6 = 0;
  }
  v7 = (WebKit *)API::Object::newObject(0x30uLL, 8);
  *(_QWORD *)v7 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v7);
  *(_QWORD *)v7 = &off_1E34AE750;
  *((_QWORD *)v7 + 2) = v6;
  *((_QWORD *)v7 + 3) = this;
  *((_QWORD *)v7 + 4) = API::Data::create(std::span<unsigned char const,18446744073709551615ul>)::{lambda(unsigned char *,void const*)#1}::__invoke;
  *((_QWORD *)v7 + 5) = 0;
  *a3 = v7;
}

void IPC::ArgumentCoder<API::Dictionary,void>::decode(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v9;
  WTF::StringImpl *v10;
  _BOOL4 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebKit *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  char v24;
  WTF::StringImpl *v25;
  char v26;
  uint64_t v27;

  v5 = a2[1];
  v6 = *a2;
  v7 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (int *)(v6 + v7);
    a2[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v2 = *v9;
      v27 = 0;
      if (v2)
        goto LABEL_8;
      v14 = 0;
LABEL_27:
      v15 = (WebKit *)API::Object::newObject(0x18uLL, 9);
      *(_QWORD *)v15 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v15);
      *(_QWORD *)v15 = &off_1E34CC280;
      *((_QWORD *)v15 + 2) = v14;
      *(_QWORD *)a1 = v15;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v18 = v5;
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v6, v5);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
LABEL_32:
  v10 = (WTF::StringImpl *)*a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (v17 && v16)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v17 + 16))(v17, v10);
  if (*a2)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    v11 = 1;
    while (1)
    {
      if (v26)
      {
        v13 = v25;
        v25 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v10);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      if (v11)
      {
LABEL_30:
        if (v27)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v10);
        goto LABEL_32;
      }
      if (!--v2)
        break;
LABEL_8:
      IPC::Decoder::decode<WTF::String>(a2, &v25);
      if (!v26)
        goto LABEL_30;
      IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v23, a2);
      if (!v24)
        goto LABEL_35;
      if (!v26)
        goto LABEL_34;
      v11 = 1;
      if ((unint64_t)v25 + 1 >= 2)
      {
        WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v27, &v25, &v23, (uint64_t)v22);
        if (v22[16])
          v11 = 0;
      }
      if (v24)
      {
        v12 = v23;
        v23 = 0;
        if (v12)
          CFRelease(*(CFTypeRef *)(v12 + 8));
      }
    }
    v14 = v27;
    if (*a2)
      goto LABEL_27;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    if (v14)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v10);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void sub_196E01F1C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, ...)
{
  uint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a7);
  if (a7 && a6)
    CFRelease(*(CFTypeRef *)(a6 + 8));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  v10 = *(_QWORD *)(v7 - 40);
  if (v10)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
  _Unwind_Resume(a1);
}

void sub_196E01F60()
{
  JUMPOUT(0x196E01F4CLL);
}

uint64_t API::Error::create(API::Error *this, const WebCore::ResourceError *a2)
{
  WebKit *v4;
  uint64_t result;

  v4 = (WebKit *)API::Object::newObject(0x60uLL, 10);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD190;
  result = WebCore::ResourceError::ResourceError((uint64_t)v4 + 16, (uint64_t)a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_196E01FCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<API::Rect,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;

  v4 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[5];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

void API::Boolean::create(API::Boolean *this@<X0>, WebKit **a2@<X8>)
{
  char v2;
  WebKit *v4;

  v2 = (char)this;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 32);
  *((_BYTE *)v4 + 16) = v2;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD258;
  *a2 = v4;
}

void API::Double::create(double a1@<D0>, double **a2@<X8>)
{
  double *v5;

  v5 = (double *)API::Object::newObject(0x18uLL, 33);
  v5[2] = a1;
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(_QWORD *)v5 = &off_1E34AE778;
  *a2 = v5;
}

void IPC::ArgumentCoder<API::UInt64,void>::decode(uint64_t a1, _QWORD *a2)
{
  API::UInt64 *v4;
  char v5;
  WebKit *v6;

  v4 = (API::UInt64 *)IPC::Decoder::decode<unsigned long long>(a2);
  if (*a2)
  {
    if (v5)
    {
      API::UInt64::create(v4, &v6);
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void API::UInt64::create(API::UInt64 *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v4;

  v4 = (WebKit *)API::Object::newObject(0x18uLL, 34);
  *((_QWORD *)v4 + 2) = this;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD280;
  *a2 = v4;
}

IPC::Encoder *IPC::Encoder::operator<<<API::Point const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return a1;
}

void IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<API::Data,void>::decode(a1, a2);
  if (!*(_BYTE *)(a1 + 8))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Double,WTF::RawPtrTraits<API::Double>,WTF::DefaultRefDerefTraits<API::Double>>>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  WebKit *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = a2[1];
  v4 = *a2;
  v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (!v4)
      goto LABEL_21;
    v8 = *v7;
    v9 = (WebKit *)API::Object::newObject(0x18uLL, 33);
    *((_QWORD *)v9 + 2) = v8;
    *(_QWORD *)v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v9);
    *(_QWORD *)v9 = &off_1E34AE778;
    *(_QWORD *)a1 = v9;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      v15 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v4, v3);
        a2 = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    while (1)
    {
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (!v13)
      {
        v10 = 0;
        goto LABEL_12;
      }
      v14 = a2;
      if (!v10)
        goto LABEL_12;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      if (!*v14)
        break;
      __break(1u);
LABEL_21:
      v10 = v3;
      v11 = v4;
    }
    a2 = v14;
    v10 = v14[1];
    v13 = v14[3];
LABEL_12:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *a2 = 0;
    a2[1] = 0;
    if (v13)
    {
      if (v10)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    }
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Error,WTF::RawPtrTraits<API::Error>,WTF::DefaultRefDerefTraits<API::Error>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE v11[88];

  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v11);
  if (*a2)
  {
    if (v11[80])
    {
      API::Error::create((API::Error *)&v10, (const WebCore::ResourceError *)v11);
      *(_QWORD *)a1 = v10;
      *(_BYTE *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = a2[3];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
  }
}

void sub_196E024AC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::FrameHandle,WTF::RawPtrTraits<API::FrameHandle>,WTF::DefaultRefDerefTraits<API::FrameHandle>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v18);
  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a2;
        v13 = a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_8;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
    goto LABEL_22;
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_9;
  if (v19)
  {
    v9 = v8 != 0;
    v11 = v18[0];
    v10 = v18[1];
    v12 = API::Object::newObject(0x28uLL, 11);
    *(_QWORD *)v12 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v12);
    *(_QWORD *)v12 = &off_1E34AD1B8;
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v10;
    *(_BYTE *)(v12 + 32) = v9;
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    do
    {
      __break(1u);
LABEL_22:
      v13 = v4;
      v14 = v5;
LABEL_8:
      v4 = 0;
      v5 = 0;
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v13)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
          v5 = *a2;
          v4 = a2[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
        }
      }
LABEL_9:
      *a2 = 0;
      a2[1] = 0;
      v17 = a2[3];
      if (!v17)
      {
        v4 = 0;
        goto LABEL_11;
      }
      if (!v4)
        goto LABEL_11;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v5);
      v5 = *a2;
    }
    while (*a2);
    v4 = a2[1];
    v17 = a2[3];
LABEL_11:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *a2 = 0;
    a2[1] = 0;
    if (v17)
    {
      if (v4)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    }
  }
}

void IPC::Decoder::decode<WTF::Ref<WebKit::WebImage,WTF::RawPtrTraits<WebKit::WebImage>,WTF::DefaultRefDerefTraits<WebKit::WebImage>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  const void *v11;
  const void *v12;
  const void *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WebKit *v29;
  int v30;
  const void *v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  char v35;
  WebKit *v36;
  int v37;
  const void *v38;
  __int16 v39;
  _BYTE v40[64];
  char v41;
  _BYTE v42[64];
  char v43;
  WebKit *v44;
  int v45;
  const void *v46;
  __int16 v47;
  char v48;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
    goto LABEL_26;
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    v16 = v6;
    v17 = 0;
    goto LABEL_27;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_28;
  if (v9)
  {
    IPC::Decoder::decode<WebCore::ImageBufferParameters>(a2, (uint64_t)&v44);
    if (v48)
    {
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)a2, v42);
      v10 = v43;
      if (v43)
      {
        if (!v48)
          goto LABEL_25;
        v36 = v44;
        v37 = v45;
        v11 = v46;
        v46 = 0;
        v38 = v11;
        v39 = v47;
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v40, (uint64_t)v42);
        v10 = 1;
      }
      else
      {
        LOBYTE(v36) = 0;
      }
      v41 = v10;
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v42);
      if (v48)
      {
        v12 = v46;
        v46 = 0;
        if (v12)
          CFRelease(v12);
      }
    }
    else
    {
      LOBYTE(v36) = 0;
      v41 = 0;
    }
    if (v41
      || (v26 = *a2, v27 = a2[1], *a2 = 0, a2[1] = 0, (v28 = a2[3]) != 0)
      && v27
      && ((*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26), v41))
    {
      v29 = v36;
      v30 = v37;
      v13 = v38;
      v38 = 0;
      v31 = v13;
      v32 = v39;
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v33, (uint64_t)v40);
      v14 = 1;
      v34 = 1;
    }
    else
    {
      v14 = 0;
      LOBYTE(v29) = 0;
    }
    v35 = v14;
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
    if (!v35)
      goto LABEL_30;
  }
  else
  {
    LOBYTE(v36) = 0;
    v41 = 0;
    LOBYTE(v29) = 0;
    v34 = 0;
    v35 = 1;
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
  }
  while (1)
  {
    v15 = *a2;
    if (!*a2)
      break;
    if (v35)
    {
      WebKit::WebImage::create((uint64_t *)&v29, &v36);
      *(_QWORD *)a1 = v36;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_27:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_28:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v6)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
    LOBYTE(v29) = 0;
    v35 = 0;
LABEL_30:
    v21 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v6)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v21);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
LABEL_21:
  if (v35)
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
  if (!v15)
  {
    v23 = *a2;
    v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    }
  }
}

void sub_196E02990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,CFTypeRef cf)
{
  std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::PageHandle,WTF::RawPtrTraits<API::PageHandle>,WTF::DefaultRefDerefTraits<API::PageHandle>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6 = v5;
  v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v9 = a2[1];
  v10 = *a2;
  v11 = a2[2] - *a2;
  if (v9 <= v11)
    goto LABEL_11;
  v12 = (unsigned __int8 *)(v10 + v11);
  a2[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v16 = v9;
    v17 = 0;
    goto LABEL_12;
  }
  v13 = *v12;
  if (v13 > 1)
    goto LABEL_13;
  v10 = 0;
  for (i = v13 != 0; ; i = 0)
  {
    if (v6 && (_BYTE)v7 && !(_DWORD)v10)
    {
      v15 = API::Object::newObject(0x28uLL, 13);
      *(_QWORD *)v15 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v15);
      *(_QWORD *)v15 = &off_1E34AD2D0;
      *(_QWORD *)(v15 + 16) = v4;
      *(_QWORD *)(v15 + 24) = v8;
      *(_BYTE *)(v15 + 32) = i;
      *(_QWORD *)a1 = v15;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_11:
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      v22 = v7;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v10);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v7 = v22;
    }
LABEL_12:
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      v21 = v7;
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v10 = *a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v7 = v21;
    }
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v23 = v7;
    if (!v9)
      goto LABEL_15;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v10);
    if (!*a2)
      break;
    v10 = 1;
    v7 = v23;
  }
  v9 = a2[1];
  v20 = a2[3];
LABEL_15:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v20)
  {
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Point,WTF::RawPtrTraits<API::Point>,WTF::DefaultRefDerefTraits<API::Point>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  WebKit *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = a1;
  v3 = a2[1];
  v4 = *a2;
  v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    v15 = v3;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    a1 = a2[3];
    if (a1)
      goto LABEL_33;
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    v9 = 0;
    a1 = a2[3];
    if (!a1)
    {
      v3 = 0;
      v4 = 0;
LABEL_20:
      v8 = 1;
      goto LABEL_8;
    }
    v23 = a2;
    if (v15)
    {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 16))(a1, v16, v15);
      a2 = v23;
      v4 = *v23;
      v3 = v23[1];
      goto LABEL_20;
    }
    v3 = 0;
    v4 = 0;
    v8 = 1;
LABEL_8:
    v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = v12 + 1;
      if (v4)
      {
        if (!v8)
        {
          v13 = *v12;
          v14 = (WebKit *)API::Object::newObject(0x20uLL, 36);
          *(_QWORD *)v14 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v14);
          *(_QWORD *)v14 = &off_1E34AD208;
          *((_QWORD *)v14 + 2) = v9;
          *((_QWORD *)v14 + 3) = v13;
          *(_QWORD *)v2 = v14;
          *(_BYTE *)(v2 + 8) = 1;
          return;
        }
        goto LABEL_32;
      }
      v17 = v3;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      v19 = a2[3];
      if (v19)
      {
        v25 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v4);
          a2 = v25;
          v18 = *v25;
          v17 = v25[1];
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20)
    {
      v21 = 0;
      goto LABEL_24;
    }
    v24 = a2;
    if (!v17)
      break;
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
    v4 = *v24;
    if (!*v24)
    {
      a2 = v24;
      v21 = v24[1];
      v20 = v24[3];
      goto LABEL_24;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    v22 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
      a2 = v22;
      v16 = *v22;
      v15 = v22[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  v21 = 0;
LABEL_24:
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v20)
  {
    if (v21)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Rect,WTF::RawPtrTraits<API::Rect>,WTF::DefaultRefDerefTraits<API::Rect>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WebKit *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;

  v3 = a2[1];
  v4 = *a2;
  v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    a2[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    goto LABEL_67;
  }
  v23 = 0;
  v24 = 0;
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (v25)
  {
    v40 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v4);
      a2 = v40;
      v24 = *v40;
      v23 = v40[1];
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (!v26)
    {
      v3 = 0;
      v4 = 0;
      v9 = 0;
LABEL_31:
      v8 = 1;
      goto LABEL_8;
    }
    v47 = a2;
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
      v9 = 0;
      a2 = v47;
      v4 = *v47;
      v3 = v47[1];
      goto LABEL_31;
    }
    v3 = 0;
    v4 = 0;
    v9 = 0;
    v8 = 1;
LABEL_8:
    v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v12 + 1);
      if (v4)
      {
        v13 = 0;
        v14 = *v12;
        goto LABEL_15;
      }
      v27 = v3;
      v28 = 0;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      *a2 = 0;
      a2[1] = 0;
      v29 = a2[3];
      if (v29)
      {
        v51 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v4);
          a2 = v51;
          v28 = *v51;
          v27 = v51[1];
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v14 = 0;
    v30 = a2[3];
    if (v30)
    {
      v48 = a2;
      if (!v27)
      {
        v3 = 0;
        v4 = 0;
        v13 = 1;
        goto LABEL_15;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
      a2 = v48;
      v4 = *v48;
      v3 = v48[1];
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    v13 = 1;
LABEL_15:
    v15 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      v31 = 0;
      v32 = 0;
      *a2 = 0;
      a2[1] = 0;
      v33 = a2[3];
      if (v33)
      {
        v45 = v13;
        v52 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v4);
          a2 = v52;
          v32 = *v52;
          v31 = v52[1];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        v13 = v45;
      }
    }
    else
    {
      v16 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v16 + 1);
      if (v4)
      {
        v17 = 0;
        v18 = *v16;
        goto LABEL_19;
      }
      v31 = v3;
      v32 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v18 = 0;
    v34 = a2[3];
    if (v34)
    {
      v43 = v13;
      v49 = a2;
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
        a2 = v49;
        v4 = *v49;
        v3 = v49[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
      v17 = 1;
      v13 = v43;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v17 = 1;
    }
LABEL_19:
    v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v19 || v3 - v19 <= 7)
    {
      v35 = 0;
      v36 = 0;
      *a2 = 0;
      a2[1] = 0;
      v37 = a2[3];
      if (v37)
      {
        v42 = v17;
        v46 = v13;
        v53 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v4);
          a2 = v53;
          v36 = *v53;
          v35 = v53[1];
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v17 = v42;
        v13 = v46;
      }
    }
    else
    {
      v20 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (uint64_t)(v20 + 1);
      if (v4)
      {
        v4 = 0;
        v21 = *v20;
        if (v8)
          goto LABEL_66;
LABEL_23:
        if (!v13 && !v17 && !(_DWORD)v4)
        {
          v22 = (WebKit *)API::Object::newObject(0x30uLL, 38);
          *(_QWORD *)v22 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v22);
          *(_QWORD *)v22 = &off_1E34AD230;
          *((_QWORD *)v22 + 2) = v9;
          *((_QWORD *)v22 + 3) = v14;
          *((_QWORD *)v22 + 4) = v18;
          *((_QWORD *)v22 + 5) = v21;
          *(_QWORD *)a1 = v22;
          *(_BYTE *)(a1 + 8) = 1;
          return;
        }
        goto LABEL_66;
      }
      v35 = v3;
      v36 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (!v38)
    {
      v39 = 0;
      goto LABEL_42;
    }
    v41 = v17;
    v44 = v13;
    v50 = a2;
    if (!v35)
      break;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
    if (!*v50)
    {
      a2 = v50;
      v39 = v50[1];
      v38 = v50[3];
      goto LABEL_42;
    }
    v4 = 1;
    v21 = 0;
    v17 = v41;
    v13 = v44;
    if (!v8)
      goto LABEL_23;
LABEL_66:
    __break(1u);
LABEL_67:
    v23 = v3;
    v24 = v4;
  }
  v39 = 0;
LABEL_42:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v38 && v39)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 16))(v38, 0);
}

uint64_t IPC::Decoder::decode<WTF::Ref<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char *v9[2];
  char v10;

  result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v9);
  if (*a2)
  {
    if (v10)
    {
      result = API::SerializedScriptValue::createFromWireBytes(v9[0], (WTF *)v9[1], &v8);
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<API::Size,WTF::RawPtrTraits<API::Size>,WTF::DefaultRefDerefTraits<API::Size>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  WebKit *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = a1;
  v3 = a2[1];
  v4 = *a2;
  v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      v8 = 0;
      v9 = *v7;
      goto LABEL_8;
    }
    v15 = v3;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    a1 = a2[3];
    if (a1)
      goto LABEL_33;
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    v9 = 0;
    a1 = a2[3];
    if (!a1)
    {
      v3 = 0;
      v4 = 0;
LABEL_20:
      v8 = 1;
      goto LABEL_8;
    }
    v23 = a2;
    if (v15)
    {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 16))(a1, v16, v15);
      a2 = v23;
      v4 = *v23;
      v3 = v23[1];
      goto LABEL_20;
    }
    v3 = 0;
    v4 = 0;
    v8 = 1;
LABEL_8:
    v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = v12 + 1;
      if (v4)
      {
        if (!v8)
        {
          v13 = *v12;
          v14 = (WebKit *)API::Object::newObject(0x20uLL, 37);
          *(_QWORD *)v14 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v14);
          *(_QWORD *)v14 = &off_1E34AD1E0;
          *((_QWORD *)v14 + 2) = v9;
          *((_QWORD *)v14 + 3) = v13;
          *(_QWORD *)v2 = v14;
          *(_BYTE *)(v2 + 8) = 1;
          return;
        }
        goto LABEL_32;
      }
      v17 = v3;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      v19 = a2[3];
      if (v19)
      {
        v25 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v4);
          a2 = v25;
          v18 = *v25;
          v17 = v25[1];
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20)
    {
      v21 = 0;
      goto LABEL_24;
    }
    v24 = a2;
    if (!v17)
      break;
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
    v4 = *v24;
    if (!*v24)
    {
      a2 = v24;
      v21 = v24[1];
      v20 = v24[3];
      goto LABEL_24;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    v22 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
      a2 = v22;
      v16 = *v22;
      v15 = v22[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  v21 = 0;
LABEL_24:
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v20)
  {
    if (v21)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::URL,WTF::RawPtrTraits<API::URL>,WTF::DefaultRefDerefTraits<API::URL>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit *v10;
  WTF::StringImpl *v11;
  char v12;

  IPC::Decoder::decode<WTF::String>(a2, &v11);
  v5 = *a2;
  if (*a2)
  {
    if (!v12)
    {
      __break(1u);
      return;
    }
    API::URL::create((API::URL *)&v11, &v10);
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  if (v12)
  {
    v6 = v11;
    v11 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        if (v5)
          return;
        goto LABEL_11;
      }
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v5)
    return;
LABEL_11:
  v7 = *a2;
  v8 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = a2[3];
  if (v9)
  {
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
  }
}

void sub_196E03708(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<API::URLRequest,WTF::RawPtrTraits<API::URLRequest>,WTF::DefaultRefDerefTraits<API::URLRequest>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  CFTypeRef *v8;
  _BYTE v9[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v9);
  if (*a2)
  {
    if (v9[200])
    {
      API::URLRequest::create((API::URLRequest *)v9, &v8);
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E037F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)va);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::URLResponse,WTF::RawPtrTraits<API::URLResponse>,WTF::DefaultRefDerefTraits<API::URLResponse>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  API::URLResponse *v10;
  _BYTE v11[264];

  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v11);
  if (*a2)
  {
    if (v11[256])
    {
      API::URLResponse::create((API::URLResponse *)v11, &v10);
      *(_QWORD *)a1 = v10;
      *(_BYTE *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v11, v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v11, v4);
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = a2[3];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
  }
}

void sub_196E038C4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::UInt64,WTF::RawPtrTraits<API::UInt64>,WTF::DefaultRefDerefTraits<API::UInt64>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<API::UInt64,void>::decode(a1, a2);
  if (!*(_BYTE *)(a1 + 8))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Int64,WTF::RawPtrTraits<API::Int64>,WTF::DefaultRefDerefTraits<API::Int64>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WebKit *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = IPC::Decoder::decode<long long>(a2);
  if (*a2)
  {
    if (v5)
    {
      v6 = v4;
      v7 = (WebKit *)API::Object::newObject(0x18uLL, 35);
      *((_QWORD *)v7 + 2) = v6;
      *(_QWORD *)v7 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v7);
      *(_QWORD *)v7 = &off_1E34AD2A8;
      *(_QWORD *)a1 = v7;
      *(_BYTE *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Ref<API::UserContentURLPattern,WTF::RawPtrTraits<API::UserContentURLPattern>,WTF::DefaultRefDerefTraits<API::UserContentURLPattern>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  API::UserContentURLPattern *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v11);
  v6 = *a2;
  if (*a2)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    v7 = (API::UserContentURLPattern *)API::Object::newObject(0x38uLL, 27);
    result = API::UserContentURLPattern::UserContentURLPattern(v7, (const WTF::String *)&v11);
    *(_QWORD *)a1 = v7;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = v8;
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6)
          return result;
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6)
    return result;
LABEL_11:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v10)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

void sub_196E03AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  void *v10;
  WTF::StringImpl *v12;

  operator delete(v10);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void API::URL::create(API::URL *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v5;
  _DWORD *v6;

  v5 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)v5 = &off_1E34AD320;
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v6 += 2;
  *((_QWORD *)v5 + 2) = v6;
  *((_QWORD *)v5 + 3) = 0;
  *a2 = v5;
}

CFTypeRef *API::URLRequest::create@<X0>(API::URLRequest *this@<X0>, CFTypeRef **a2@<X8>)
{
  CFTypeRef *v5;
  CFTypeRef *result;

  v5 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  *v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *v5 = &off_1E34CC2D0;
  result = WebCore::ResourceRequest::ResourceRequest(v5 + 2, this);
  *a2 = v5;
  return result;
}

API::URLResponse *API::URLResponse::create@<X0>(API::URLResponse *this@<X0>, API::URLResponse **a2@<X8>)
{
  API::URLResponse *v5;
  API::URLResponse *result;

  v5 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
  result = API::URLResponse::URLResponse(v5, this);
  *a2 = v5;
  return result;
}

void sub_196E03C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = v2[2];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 72));
  IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode(a1, v2 + 80);
  v5 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LOBYTE(v8) = *(_BYTE *)(v2 + 144);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *(_BYTE *)(v2 + 145);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = *(_BYTE *)(v2 + 146);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 Failure;
  WTF::StringImpl *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  char v72;
  char v73;
  _BYTE v74[24];
  int v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  WTF::StringImpl *v79;
  _QWORD v80[2];
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  _BYTE v90[24];
  int v91;
  char v92;
  uint64_t v93;

  v2 = a1;
  v93 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v90);
  IPC::Decoder::decode<WTF::URL>(v2, &v69);
  IPC::Decoder::decode<WTF::String>(v2, &v67);
  IPC::Decoder::decode<WebCore::BackgroundFetchOptions>(v2, v4, (uint64_t)&v62);
  v5 = v2[1];
  v6 = *v2;
  v7 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (uint64_t *)(v6 + v7);
    v2[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      v38 = v5;
      v39 = 0;
      goto LABEL_65;
    }
    v61 = 0;
    v60 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    v38 = 0;
    v39 = 0;
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (v40)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        v39 = *v2;
        v38 = v2[1];
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
LABEL_65:
    *v2 = 0;
    v2[1] = 0;
    v41 = v2[3];
    if (v41 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
      v60 = 0;
      v6 = *v2;
      v5 = v2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v60 = 0;
    }
    v61 = 1;
LABEL_8:
    v10 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v10 || v5 - v10 <= 7)
    {
      v42 = 0;
      v43 = 0;
      *v2 = 0;
      v2[1] = 0;
      v44 = v2[3];
      if (v44)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
          v43 = *v2;
          v42 = v2[1];
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
      }
    }
    else
    {
      v11 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v11 + 1);
      if (v6)
      {
        v12 = 0;
        v59 = *v11;
        goto LABEL_12;
      }
      v42 = v5;
      v43 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v45 = v2[3];
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
      v59 = 0;
      v6 = *v2;
      v5 = v2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v59 = 0;
    }
    v12 = 1;
LABEL_12:
    v13 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v13 || v5 - v13 <= 7)
    {
      v46 = 0;
      v47 = 0;
      *v2 = 0;
      v2[1] = 0;
      v48 = v2[3];
      if (v48)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
          v47 = *v2;
          v46 = v2[1];
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
      }
    }
    else
    {
      v14 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v14 + 1);
      if (v6)
      {
        v15 = 0;
        v16 = *v14;
        goto LABEL_16;
      }
      v46 = v5;
      v47 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v49 = v2[3];
    if (v49 && v46)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47, v46);
      v16 = 0;
      v6 = *v2;
      v5 = v2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v16 = 0;
    }
    v15 = 1;
LABEL_16:
    v17 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v17 || v5 - v17 <= 7)
    {
      v50 = 0;
      v51 = 0;
      *v2 = 0;
      v2[1] = 0;
      v52 = v2[3];
      if (v52)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
          v51 = *v2;
          v50 = v2[1];
        }
        else
        {
          v50 = 0;
          v51 = 0;
        }
      }
    }
    else
    {
      v18 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v18 + 1);
      if (v6)
      {
        v19 = 0;
        v20 = *v18;
        goto LABEL_20;
      }
      v50 = v5;
      v51 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v53 = v2[3];
    if (v53 && v50)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
    v20 = 0;
    v19 = 1;
LABEL_20:
    v21 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(v2);
    Failure = IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>(v2);
    v5 = v2[1];
    v23 = (WTF::StringImpl *)*v2;
    v24 = v2[2] - *v2;
    if (v5 <= v24)
    {
      v54 = 0;
      v55 = 0;
      *v2 = 0;
      v2[1] = 0;
      v56 = v2[3];
      if (v56)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
          v55 = *v2;
          v54 = v2[1];
        }
        else
        {
          v54 = 0;
          v55 = 0;
        }
      }
      goto LABEL_80;
    }
    v25 = (unsigned __int8 *)v23 + v24;
    v2[2] = (uint64_t)(v25 + 1);
    if (!v23)
    {
      v54 = v5;
      v55 = 0;
LABEL_80:
      v5 = 0;
      v23 = 0;
      *v2 = 0;
      v2[1] = 0;
      v57 = v2[3];
      if (v57)
      {
        if (v54)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
          v23 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v23 = 0;
        }
      }
      goto LABEL_81;
    }
    v26 = a2;
    v27 = *v25;
    if (v27 <= 1)
    {
      v2 = 0;
      a2 = v27 != 0;
      goto LABEL_24;
    }
LABEL_81:
    *v2 = 0;
    v2[1] = 0;
    v58 = v2[3];
    if (!v58
      || !v5
      || (v26 = a2, (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v58 + 16))(v58, v23), !*v2))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 152) = 0;
      goto LABEL_49;
    }
    a2 = 0;
    v2 = (uint64_t *)1;
LABEL_24:
    if (v92)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v74, (uint64_t)v90);
      if (v72)
      {
        v28 = v69;
        v69 = 0;
        v76 = v28;
        v77 = v70;
        v78 = v71;
        LODWORD(v70) = v70 & 0xFFFFFFFE;
        if (v68)
        {
          v29 = v67;
          v67 = 0;
          v79 = v29;
          if (v66)
          {
            v80[0] = v62;
            v30 = v63;
            v62 = 0;
            v63 = 0;
            v80[1] = v30;
            v31 = v64;
            v64 = 0;
            v81 = v31;
            v82 = v65;
            if (!v61)
            {
              v83 = v60;
              if (!v12)
              {
                v84 = v59;
                if (!v15)
                {
                  v85 = v16;
                  if (!v19)
                  {
                    v86 = v20;
                    if (v21 > 0xFFu)
                    {
                      v87 = v21;
                      if (Failure > 0xFFu)
                      {
                        v88 = Failure;
                        if (!(_DWORD)v2)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  v89 = a2;
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>(v26, (uint64_t)v74);
  v33 = v81;
  v81 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, v32);
  v34 = v79;
  v79 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v23);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v76;
  v76 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v23);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (v75 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v75])(&v73, v74);
LABEL_49:
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v23);
  if (v68)
  {
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v72)
  {
    result = v69;
    v69 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v92)
  {
    if (v91 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v91])(v74, v90);
  }
  return result;
}

void sub_196E044A0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{
  uint64_t v43;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, a2);
  if (a19)
  {
    v46 = a18;
    a18 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  if (a25)
  {
    v47 = a20;
    a20 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v45);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  if (*(_BYTE *)(v43 - 104))
  {
    v48 = *(unsigned int *)(v43 - 112);
    if ((_DWORD)v48 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v48])(&a31, v43 - 136);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WebCore::BackgroundFetchOptions>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 32))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196E04668(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 6)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::DataDetectionResult,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = objc_opt_class();
  v9[1] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFE8])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v6, v9, 2);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v6);
  IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, a1);
  v5 = (unint64_t)v6;
  if (v6)
    goto LABEL_10;
  while (*a1)
  {
    v5 = v8;
    if (v8)
    {
      *(_QWORD *)a2 = cf;
      *(_BYTE *)(a2 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_10:
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v8)
  {
    if (cf)
      CFRelease(cf);
  }
}

void sub_196E04888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  LOBYTE(v2) = v2[4];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::decode(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  char v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  char v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  char v57;
  char v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  uint64_t *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;

  v1 = result[1];
  v2 = *result;
  v3 = result[2] - *result;
  if (v1 <= v3)
  {
    v37 = 0;
    v38 = 0;
    *result = 0;
    result[1] = 0;
    v39 = result[3];
    if (v39)
    {
      v147 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        result = v147;
        v38 = *v147;
        v37 = v147[1];
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
    }
    goto LABEL_38;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    v37 = v1;
    v38 = 0;
LABEL_38:
    *result = 0;
    result[1] = 0;
    v40 = result[3];
    if (v40)
    {
      v146 = result;
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v40 + 16))(v40, v38, v37);
        v6 = 0;
        result = v146;
        v2 = *v146;
        v1 = v146[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
    goto LABEL_40;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
LABEL_40:
  *result = 0;
  result[1] = 0;
  v41 = result[3];
  if (!v41)
  {
    v8 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_42;
  }
  v132 = v6;
  v145 = result;
  if (!v1)
  {
    v8 = 0;
    v41 = 0;
    v2 = 0;
    v7 = 1;
LABEL_42:
    *result = 0;
    result[1] = 0;
    v42 = result[3];
    if (v42)
    {
      v119 = v8;
      v131 = v7;
      v144 = result;
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v2, v41);
        v12 = 0;
        result = v144;
        v2 = *v144;
        v1 = v144[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v12 = 0;
      }
      v8 = v119;
      v7 = v131;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v12 = 0;
    }
    goto LABEL_44;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v2);
  v8 = 0;
  result = v145;
  v2 = *v145;
  v1 = v145[1];
  v7 = 1;
  v5 = v145[2];
  v6 = v132;
LABEL_5:
  if (!v6)
    v8 = 0;
  v9 = v5 - v2;
  if (v1 <= v9)
  {
    v120 = v8;
    v133 = v7;
    v41 = 0;
    v51 = result[3];
    *result = 0;
    result[1] = 0;
    v148 = result;
    if (v51 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
      result = v148;
      v2 = *v148;
      v41 = v148[1];
    }
    else
    {
      v2 = 0;
    }
    v8 = v120;
    v7 = v133;
    goto LABEL_42;
  }
  v10 = (unsigned __int8 *)(v2 + v9);
  v11 = v2 + v9 + 1;
  result[2] = v11;
  if (!v2)
  {
    v41 = v1;
    goto LABEL_42;
  }
  v12 = *v10;
  if (v12 < 2)
  {
    v13 = 0;
    v14 = 1;
    goto LABEL_11;
  }
LABEL_44:
  *result = 0;
  result[1] = 0;
  v43 = result[3];
  if (!v43)
  {
    v14 = 0;
    v2 = 0;
    v13 = 1;
    goto LABEL_46;
  }
  v108 = v12;
  v118 = v8;
  v130 = v7;
  v143 = result;
  if (!v1)
  {
    v14 = 0;
    v43 = 0;
    v2 = 0;
    v13 = 1;
LABEL_46:
    *result = 0;
    result[1] = 0;
    v44 = result[3];
    if (v44)
    {
      v89 = v13;
      v98 = v14;
      v107 = v12;
      v117 = v8;
      v129 = v7;
      v142 = result;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v2, v43);
        v18 = 0;
        result = v142;
        v2 = *v142;
        v1 = v142[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v18 = 0;
      }
      v8 = v117;
      v7 = v129;
      v14 = v98;
      v12 = v107;
      v13 = v89;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v18 = 0;
    }
    goto LABEL_48;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v2);
  v14 = 0;
  result = v143;
  v2 = *v143;
  v1 = v143[1];
  v13 = 1;
  v11 = v143[2];
  v8 = v118;
  v7 = v130;
  v12 = v108;
LABEL_11:
  v15 = v11 - v2;
  if (v1 <= v15)
  {
    v90 = v13;
    v99 = v14;
    v109 = v12;
    v121 = v8;
    v134 = v7;
    v43 = 0;
    v52 = result[3];
    *result = 0;
    result[1] = 0;
    v149 = result;
    if (v52 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
      result = v149;
      v2 = *v149;
      v43 = v149[1];
    }
    else
    {
      v2 = 0;
    }
    v8 = v121;
    v7 = v134;
    v14 = v99;
    v12 = v109;
    v13 = v90;
    goto LABEL_46;
  }
  v16 = (unsigned __int8 *)(v2 + v15);
  v17 = v2 + v15 + 1;
  result[2] = v17;
  if (!v2)
  {
    v43 = v1;
    goto LABEL_46;
  }
  v18 = *v16;
  if (v18 < 2)
  {
    v19 = 0;
    v20 = 1;
    goto LABEL_15;
  }
LABEL_48:
  *result = 0;
  result[1] = 0;
  v45 = result[3];
  if (!v45)
  {
    v20 = 0;
    v2 = 0;
    v19 = 1;
    goto LABEL_50;
  }
  v81 = v18;
  v88 = v13;
  v97 = v14;
  v106 = v12;
  v116 = v8;
  v128 = v7;
  v141 = result;
  if (!v1)
  {
    v20 = 0;
    v45 = 0;
    v2 = 0;
    v19 = 1;
LABEL_50:
    *result = 0;
    result[1] = 0;
    v46 = result[3];
    if (v46)
    {
      v68 = v19;
      v74 = v20;
      v80 = v18;
      v87 = v13;
      v96 = v14;
      v105 = v12;
      v115 = v8;
      v127 = v7;
      v140 = result;
      if (v45)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v2, v45);
        v23 = 0;
        result = v140;
        v2 = *v140;
        v1 = v140[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v23 = 0;
      }
      v8 = v115;
      v7 = v127;
      v14 = v96;
      v12 = v105;
      v13 = v87;
      v20 = v74;
      v18 = v80;
      v19 = v68;
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v23 = 0;
    }
    goto LABEL_52;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v2);
  v20 = 0;
  result = v141;
  v2 = *v141;
  v1 = v141[1];
  v19 = 1;
  v17 = v141[2];
  v8 = v116;
  v7 = v128;
  v14 = v97;
  v12 = v106;
  v13 = v88;
  v18 = v81;
LABEL_15:
  v21 = v17 - v2;
  if (v1 <= v21)
  {
    v69 = v19;
    v75 = v20;
    v82 = v18;
    v91 = v13;
    v100 = v14;
    v110 = v12;
    v122 = v8;
    v135 = v7;
    v45 = 0;
    v53 = result[3];
    *result = 0;
    result[1] = 0;
    v150 = result;
    if (v53 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
      result = v150;
      v2 = *v150;
      v45 = v150[1];
    }
    else
    {
      v2 = 0;
    }
    v8 = v122;
    v7 = v135;
    v14 = v100;
    v12 = v110;
    v13 = v91;
    v20 = v75;
    v18 = v82;
    v19 = v69;
    goto LABEL_50;
  }
  v22 = (unsigned __int8 *)(v2 + v21);
  result[2] = v22 + 1;
  if (!v2)
  {
    v45 = v1;
    goto LABEL_50;
  }
  v23 = *v22;
  if (v23 < 2)
  {
    v24 = 0;
    v25 = 1;
    goto LABEL_19;
  }
LABEL_52:
  *result = 0;
  result[1] = 0;
  v47 = result[3];
  if (!v47)
  {
    v2 = 0;
    v25 = 0;
    v1 = 0;
    v24 = 1;
    goto LABEL_54;
  }
  v62 = v23;
  v66 = v19;
  v72 = v20;
  v78 = v18;
  v85 = v13;
  v94 = v14;
  v103 = v12;
  v113 = v8;
  v125 = v7;
  v138 = result;
  if (!v1)
  {
    v2 = 0;
    v25 = 0;
    v24 = 1;
LABEL_54:
    *result = 0;
    result[1] = 0;
    v48 = result[3];
    if (v48)
    {
      v56 = v24;
      v59 = v25;
      v63 = v23;
      v67 = v19;
      v73 = v20;
      v79 = v18;
      v86 = v13;
      v95 = v14;
      v104 = v12;
      v114 = v8;
      v126 = v7;
      v139 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v2);
        result = v139;
        v49 = *v139;
        v1 = v139[1];
      }
      else
      {
        v49 = 0;
      }
      v8 = v114;
      v7 = v126;
      v14 = v95;
      v12 = v104;
      v13 = v86;
      v20 = v73;
      v18 = v79;
      v23 = v63;
      v19 = v67;
      v24 = v56;
      v25 = v59;
    }
    else
    {
      v49 = 0;
      v1 = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v2);
  v25 = 0;
  result = v138;
  v2 = *v138;
  v1 = v138[1];
  v24 = 1;
  v8 = v113;
  v7 = v125;
  v14 = v94;
  v12 = v103;
  v13 = v85;
  v20 = v72;
  v18 = v78;
  v23 = v62;
  v19 = v66;
LABEL_19:
  if (v1 <= result[2] - v2)
    goto LABEL_54;
  v26 = (unsigned __int8 *)result[2];
  result[2] = v26 + 1;
  if (!v2)
  {
    v49 = 0;
LABEL_56:
    *result = 0;
    result[1] = 0;
    v50 = result[3];
    if (v50)
    {
      v55 = v24;
      v58 = v25;
      v61 = v23;
      v65 = v19;
      v71 = v20;
      v77 = v18;
      v84 = v13;
      v93 = v14;
      v102 = v12;
      v112 = v8;
      v124 = v7;
      v137 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v49);
        result = v137;
        v2 = *v137;
        v1 = v137[1];
      }
      else
      {
        v2 = 0;
      }
      v8 = v112;
      v7 = v124;
      v14 = v93;
      v12 = v102;
      v13 = v84;
      v20 = v71;
      v18 = v77;
      v23 = v61;
      v19 = v65;
      v24 = v55;
      v25 = v58;
    }
    else
    {
      v2 = 0;
      v1 = 0;
    }
LABEL_58:
    *result = 0;
    result[1] = 0;
    v28 = result[3];
    if (!v28)
    {
      v8 = 0;
      v29 = 0;
      goto LABEL_29;
    }
    v54 = v24;
    v57 = v25;
    v60 = v23;
    v64 = v19;
    v70 = v20;
    v76 = v18;
    v83 = v13;
    v92 = v14;
    v101 = v12;
    v111 = v8;
    v123 = v7;
    v136 = result;
    if (v1)
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v2);
      v28 = *v136;
      if (*v136)
      {
        v12 = v101;
        v8 = v111;
        v13 = v83;
        v14 = v92;
        v20 = v70;
        v18 = v76;
        v23 = v60;
        v19 = v64;
        v24 = v54;
        v25 = v57;
        LODWORD(v28) = v123;
        if (!v123)
          goto LABEL_24;
LABEL_123:
        __break(1u);
        return result;
      }
    }
    else
    {
      LOBYTE(v28) = 0;
    }
    v8 = 0;
    v29 = 0;
    v14 = v92;
    v12 = v101;
    v20 = v70;
    v18 = v76;
    v25 = v57;
    v23 = v60;
    goto LABEL_29;
  }
  v27 = *v26;
  if (v27 > 1)
    goto LABEL_58;
  if ((v7 & 1) != 0)
    goto LABEL_123;
  LODWORD(v28) = v27 | 0x100;
LABEL_24:
  if (v13 || v19 || v24 || v28 <= 0xFF)
    goto LABEL_123;
  v29 = 1;
LABEL_29:
  v30 = v12 != 0;
  v31 = ((unint64_t)v28 << 32) | (v29 << 40);
  v32 = 0x1000000;
  if ((v25 & (v23 != 0)) == 0)
    v32 = 0;
  v33 = v31 | v32;
  v34 = 0x10000;
  if ((v20 & (v18 != 0)) == 0)
    v34 = 0;
  v35 = (v14 & v30) == 0;
  v36 = 256;
  if (v35)
    v36 = 0;
  return (_QWORD *)(v33 | v34 | v36 | v8);
}

char *IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>,void>::encode<IPC::Encoder,API::Dictionary>(a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo> const&>(a1, (uint64_t **)(a2 + 16));
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  WTF *v11;
  char v12;
  uint64_t v13;
  char v14;
  _DWORD *v15;
  char v16;

  IPC::Decoder::decode<WTF::String>(a1, &v15);
  IPC::Decoder::decode<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>>(&v13, a1);
  IPC::Decoder::decode<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>>(&v11, a1);
  if (!*a1)
    goto LABEL_14;
  if (!v16 || !v14 || !v12)
  {
    __break(1u);
LABEL_14:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    goto LABEL_6;
  }
  WebKit::RemoteObjectInvocation::RemoteObjectInvocation(&v9, &v15, &v13, (uint64_t *)&v11);
  v5 = v9;
  v9 = 0uLL;
  *(_OWORD *)a2 = v5;
  v6 = v10;
  v10 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = 1;
  WebKit::RemoteObjectInvocation::~RemoteObjectInvocation((WebKit::RemoteObjectInvocation *)&v9);
LABEL_6:
  if (v12)
  {
    v4 = v11;
    v11 = 0;
    if (v4)
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&v11, v4);
  }
  if (v14)
  {
    v7 = v13;
    v13 = 0;
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v4);
}

void sub_196E052B8(_Unwind_Exception *a1, WTF *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v18;

  if (a14)
  {
    a2 = a13;
    a13 = 0;
    if (a2)
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&a13, a2);
  }
  if (a16)
  {
    v18 = a15;
    a15 = 0;
    if (v18)
      CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 - 32, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>,void>::decode<IPC::Decoder,API::Dictionary>(a1, a2);
  if (!a1[8])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::Decoder::decode<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void WebKit::RemoteObjectInvocation::~RemoteObjectInvocation(WebKit::RemoteObjectInvocation *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v4 = (WTF *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
}

char *IPC::ArgumentCoder<WebKit::RevealItem,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RevealItem,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  __int128 v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;

  IPC::Decoder::decode<WTF::String>(a1, &v10);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::RevealItemRange>(a1, (uint64_t)&v8);
  if (!*a1)
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    if (!v11)
      return result;
    goto LABEL_7;
  }
  if (!v11 || !v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = v8;
  v7 = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)a2 = v7;
  *(_OWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
LABEL_7:
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196E05544(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WebKit::RevealItemRange>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

void IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  IPC::Decoder **v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16[8];
  uint64_t v17;
  unsigned __int8 v18;

  v2 = a1;
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v16);
  v4 = *((_QWORD *)v2 + 1);
  v5 = *(_QWORD *)v2;
  v6 = ((*((_QWORD *)v2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)v2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (IPC::Decoder **)(v5 + v6);
    *((_QWORD *)v2 + 2) = v8 + 1;
    if (!v5)
    {
      v10 = v4;
      v11 = 0;
      goto LABEL_16;
    }
    v9 = 0;
    v2 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v10 = 0;
    v11 = 0;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    v12 = *((_QWORD *)v2 + 3);
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v4);
        v11 = *(_QWORD *)v2;
        v10 = *((_QWORD *)v2 + 1);
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
LABEL_16:
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    v13 = *((_QWORD *)v2 + 3);
    if (!v13)
      break;
    if (!v10)
      break;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    if (!*(_QWORD *)v2)
      break;
    v2 = 0;
    v9 = 1;
LABEL_8:
    v5 = v18;
    if (v18)
    {
      WTF::MachSendRight::MachSendRight();
      v5 = v17;
      *(_QWORD *)&v15 = v17;
      if (!v9)
      {
        *((_QWORD *)&v15 + 1) = v2;
        WTF::MachSendRight::MachSendRight();
        *(_OWORD *)(a2 + 8) = v15;
        *(_BYTE *)(a2 + 24) = 1;
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_11:
  if (v18)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v16);
}

void sub_196E05784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FontPlatformSerializedTraits,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 5));
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 7));
}

_BYTE *IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_12;
  }
  if (!v9)
  {
    *result = 0;
    result[8] = 0;
    goto LABEL_8;
  }
  result = (_BYTE *)IPC::Decoder::decode<WTF::RetainPtr<__CFNumber const*>>((uint64_t)&v17, a2);
  if (v18)
  {
    *(_QWORD *)v3 = v17;
    v3[8] = 1;
LABEL_8:
    v3[16] = 1;
    return result;
  }
LABEL_12:
  *v3 = 0;
  v3[16] = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v16)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FontPlatformSerializedAttributes,void>::decode(_BYTE *a1, uint64_t *a2)
{
  const void **v2;
  unint64_t v3;
  int v4;
  char *v5;
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  WTF *v38;
  int v39;
  _QWORD *v40;
  CFTypeRef v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  void *v44;
  int v45;
  _QWORD *v46;
  CFTypeRef v47;
  WTF::StringImpl *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  const void **v64;
  int v65;
  char *v66;
  CFTypeRef v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  void *v70;
  int v71;
  char *v72;
  CFTypeRef v73;
  WTF::StringImpl *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  int v98;
  int v99;
  WTF::StringImpl *v100;
  BOOL v101;
  char *v102;
  const void **v103;
  const void *v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  unsigned int v109;
  int v110;
  const void *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  CFTypeRef v114;
  CFTypeRef v115;
  CFTypeRef v116;
  CFTypeRef v117;
  CFTypeRef v118;
  CFTypeRef v119;
  CFTypeRef v120;
  CFTypeRef v121;
  CFTypeRef v122;
  const void **v123;
  uint64_t v124;
  const void **v125;
  uint64_t v126;
  int v127;
  const void **v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  WTF *v191;
  uint64_t v192;
  const void **v193;
  const void **v194;
  int v195;
  const void **v196;
  unsigned int v197;
  CFTypeRef v198;
  const void **v199;
  CFTypeRef v200;
  char v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  _BYTE *v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  CFTypeRef cf;
  int v213;
  CFTypeRef v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  const void **v217;
  char v218;
  CFTypeRef v219;
  char v220;
  CFTypeRef v221;
  char v222;
  CFTypeRef v223;
  char v224;
  CFTypeRef v225;
  char v226;
  CFTypeRef v227;
  char v228;
  CFTypeRef v229;
  char v230;
  CFTypeRef v231;
  char v232;
  CFTypeRef v233;
  char v234;
  CFTypeRef v235;
  char v236;
  CFTypeRef v237;
  char v238;
  _QWORD v239[2];
  char v240;
  const void **v241;
  uint64_t v242;
  char v243;
  char v244[24];
  WTF::StringImpl *v245;
  unint64_t v246;
  char v247;
  CFTypeRef v248;
  char v249;
  const void **v250;
  char v251;
  CFTypeRef v252;
  char v253;
  char v254;
  char *v255;
  char v256;
  const void **v257;
  char v258;
  WTF *v259;
  uint64_t v260;
  char v261;
  char v262;
  const void **v263;
  uint64_t v264;
  char v265;
  char v266;
  const void **v267;
  uint64_t v268;
  char v269;
  char v270;
  CFTypeRef v271;
  char v272;
  char v273;
  CFTypeRef v274;
  char v275;
  char v276;
  CFTypeRef v277;
  char v278;
  char v279;
  CFTypeRef v280;
  char v281;
  char v282;
  CFTypeRef v283;
  char v284;
  char v285;
  CFTypeRef v286;
  char v287;
  char v288;
  CFTypeRef v289;
  char v290;
  char v291;
  CFTypeRef v292;
  char v293;
  char v294;
  CFTypeRef v295;
  char v296;
  char v297;
  WTF::StringImpl *v298;
  char v299;
  WTF::StringImpl *v300;
  char v301;
  void *v302;
  char v303;
  CFTypeRef v304;
  unsigned __int8 v305;
  char v306;
  void *v307;
  int v308;
  char v309;
  const void **v310;
  uint64_t v311;
  char v312;
  WTF::StringImpl *v313;
  char v314;

  v6 = a2;
  IPC::Decoder::decode<WTF::String>(a2, &v302);
  IPC::Decoder::decode<WTF::String>(v6, &v300);
  IPC::Decoder::decode<WTF::String>(v6, &v298);
  v8 = v6[1];
  v9 = *v6;
  v10 = v6[2] - *v6;
  v205 = a1;
  if (v8 <= v10)
  {
    v15 = 0;
    v16 = 0;
    *v6 = 0;
    v6[1] = 0;
    v17 = v6[3];
    if (v17)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *v6;
        v15 = v6[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_9;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  v6[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v15 = v8;
    v16 = 0;
LABEL_9:
    v8 = 0;
    v9 = 0;
    *v6 = 0;
    v6[1] = 0;
    v18 = v6[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        v9 = *v6;
        v8 = v6[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_10;
  }
  v12 = *v11;
  if (v12 >= 2)
  {
LABEL_10:
    *v6 = 0;
    v6[1] = 0;
    v19 = v6[3];
    if (v19 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v9);
    goto LABEL_11;
  }
  if (v12)
  {
    IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(v6, (uint64_t)&v214);
    if ((_BYTE)v215)
    {
      v4 = 0;
      v13 = 0;
      v14 = (const void **)v214;
      goto LABEL_13;
    }
LABEL_11:
    v20 = (WTF::StringImpl *)*v6;
    v21 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v22 = (_BYTE *)v6[3];
    if (v22)
      goto LABEL_331;
    goto LABEL_12;
  }
  v14 = 0;
  v13 = 0;
  v4 = 1;
  while (1)
  {
LABEL_13:
    v23 = v6[1];
    v24 = *v6;
    v25 = v6[2] - *v6;
    if (v23 <= v25)
    {
      v134 = 0;
      v135 = 0;
      *v6 = 0;
      v6[1] = 0;
      v136 = v6[3];
      if (v136)
      {
        v3 = v13;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
          v135 = *v6;
          v134 = v6[1];
        }
        else
        {
          v134 = 0;
          v135 = 0;
        }
      }
      goto LABEL_342;
    }
    v26 = (unsigned __int8 *)(v24 + v25);
    v6[2] = (uint64_t)(v26 + 1);
    if (!v24)
    {
      v134 = v23;
      v135 = 0;
LABEL_342:
      v23 = 0;
      v24 = 0;
      *v6 = 0;
      v6[1] = 0;
      v137 = v6[3];
      if (v137)
      {
        v3 = v13;
        if (v134)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v135, v134);
          v24 = *v6;
          v23 = v6[1];
        }
        else
        {
          v23 = 0;
          v24 = 0;
        }
      }
LABEL_343:
      *v6 = 0;
      v6[1] = 0;
      v138 = v6[3];
      if (v138 && v23)
        goto LABEL_345;
      goto LABEL_376;
    }
    v27 = *v26;
    if (v27 >= 2)
      goto LABEL_343;
    if (!v27)
    {
      v213 = 0;
      v28 = 0;
      v211 = 1;
      goto LABEL_20;
    }
    IPC::ArgumentCoder<WTF::RetainPtr<__CFBoolean const*>,void>::decode(v6, &v214);
    if ((_BYTE)v215)
    {
      v213 = 0;
      v211 = 0;
      v28 = (unint64_t)v214;
      goto LABEL_20;
    }
    v24 = *v6;
    v166 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v138 = v6[3];
    if (v138 && v166)
LABEL_345:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v24);
LABEL_376:
    v167 = *v6;
    v168 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v169 = v6[3];
    if (!v169)
      goto LABEL_377;
    v3 = v13;
    if (v168)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v169 + 16))(v169, v167);
LABEL_377:
      v28 = 0;
      v213 = 1;
      goto LABEL_20;
    }
    v28 = 0;
    v213 = 1;
LABEL_20:
    cf = (CFTypeRef)v28;
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v295, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v292, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v289, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v286, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v283, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v280, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v277, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v274, v6);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v271, v6);
    v29 = v6[1];
    v30 = (char *)*v6;
    v31 = v6[2] - *v6;
    if (v29 <= v31)
    {
      v139 = 0;
      v140 = 0;
      *v6 = 0;
      v6[1] = 0;
      v141 = v6[3];
      if (v141)
      {
        v3 = v13;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v141 + 16))(v141);
          v140 = *v6;
          v139 = v6[1];
        }
        else
        {
          v139 = 0;
          v140 = 0;
        }
      }
      goto LABEL_347;
    }
    v32 = &v30[v31];
    v33 = (uint64_t)&v30[v31 + 1];
    v6[2] = v33;
    if (!v30)
    {
      v139 = v29;
      v140 = 0;
LABEL_347:
      v29 = 0;
      v30 = 0;
      *v6 = 0;
      v6[1] = 0;
      v142 = v6[3];
      if (v142)
      {
        v3 = v13;
        if (v139)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v142 + 16))(v142, v140, v139);
          v30 = (char *)*v6;
          v29 = v6[1];
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
      }
      goto LABEL_348;
    }
    v34 = *v32;
    if (v34 < 2)
    {
      if (!v34)
      {
        LOBYTE(v267) = 0;
        v269 = 0;
        v270 = 1;
        goto LABEL_47;
      }
      v35 = ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v30;
      if (v29 >= v35 && v29 - v35 > 7)
      {
        v36 = (unint64_t *)&v30[v35];
        v37 = *v36;
        v6[2] = (uint64_t)(v36 + 1);
        v260 = 0;
        v259 = 0;
        if (v37 >= 0x10000)
        {
          do
          {
            IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v214, v6);
            if (!(_BYTE)v216)
              goto LABEL_44;
            if (HIDWORD(v260) == (_DWORD)v260)
            {
              WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v259, (unint64_t)&v214);
            }
            else
            {
              v45 = HIDWORD(v260) + 1;
              v46 = (_QWORD *)((char *)v259 + 16 * HIDWORD(v260));
              v47 = v214;
              v214 = 0;
              *v46 = v47;
              v48 = v215;
              v215 = 0;
              v46[1] = v48;
              HIDWORD(v260) = v45;
            }
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
            --v37;
          }
          while (v37);
          v189 = HIDWORD(v260);
          v2 = (const void **)v259;
          if (v260 > HIDWORD(v260))
          {
            v190 = v259;
            if (HIDWORD(v260))
            {
              if (HIDWORD(v260) >> 28)
                goto LABEL_490;
              v191 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v260)));
              LODWORD(v260) = v189;
              v259 = v191;
              v190 = (WTF *)v2;
              if (v191 != (WTF *)v2)
              {
                WTF::VectorMover<false,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>::move(v2, &v2[2 * v189], v191);
                v190 = v259;
              }
            }
            v3 = v13;
            if (v2)
            {
              if (v190 == (WTF *)v2)
              {
                v259 = 0;
                LODWORD(v260) = 0;
              }
              WTF::fastFree((WTF *)v2, v30);
              v2 = (const void **)v259;
            }
            else
            {
              v2 = (const void **)v190;
            }
          }
          v259 = 0;
          v208 = v260;
        }
        else
        {
          if (v37)
          {
            v38 = (WTF *)WTF::fastMalloc((WTF *)(16 * v37));
            LODWORD(v260) = v37;
            v259 = v38;
            while (1)
            {
              IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v214, v6);
              if (!(_BYTE)v216)
                break;
              if (HIDWORD(v260) == (_DWORD)v260)
              {
                WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v259, (unint64_t)&v214);
              }
              else
              {
                v39 = HIDWORD(v260) + 1;
                v40 = (_QWORD *)((char *)v259 + 16 * HIDWORD(v260));
                v41 = v214;
                v214 = 0;
                *v40 = v41;
                v42 = v215;
                v215 = 0;
                v40[1] = v42;
                HIDWORD(v260) = v39;
              }
              std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
              if (!--v37)
              {
                v2 = (const void **)v259;
                v43 = v260;
                goto LABEL_37;
              }
            }
LABEL_44:
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
            WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v259, v49);
LABEL_45:
            v30 = (char *)*v6;
            v50 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v51 = v6[3];
            if (v51 && v50)
              goto LABEL_338;
            goto LABEL_46;
          }
          v2 = 0;
          v43 = 0;
LABEL_37:
          v208 = v43;
          v259 = 0;
        }
        v260 = 0;
        v265 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v259, v30);
        v263 = 0;
        v267 = v2;
        v264 = 0;
        v268 = v208;
        v269 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v263, v44);
        v270 = 1;
        goto LABEL_47;
      }
      *v6 = 0;
      v6[1] = 0;
      v170 = v6[3];
      if (v170)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v170 + 16))(v170);
        v171 = *v6;
        v172 = v6[1];
        v173 = v6[3];
        *v6 = 0;
        v6[1] = 0;
        if (v173)
        {
          if (v172)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v171);
        }
      }
      goto LABEL_45;
    }
LABEL_348:
    *v6 = 0;
    v6[1] = 0;
    v51 = v6[3];
    if (v51 && v29)
LABEL_338:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v51 + 16))(v51, v30);
LABEL_46:
    LOBYTE(v267) = 0;
    v270 = 0;
    v52 = *v6;
    v53 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v54 = v6[3];
    if (v54 && v53)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52);
LABEL_47:
    v55 = v6[1];
    v56 = (char *)*v6;
    v57 = v6[2] - *v6;
    if (v55 <= v57)
    {
      v143 = 0;
      v144 = 0;
      *v6 = 0;
      v6[1] = 0;
      v145 = v6[3];
      if (v145)
      {
        v3 = v13;
        if (v55)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v145 + 16))(v145);
          v144 = *v6;
          v143 = v6[1];
        }
        else
        {
          v143 = 0;
          v144 = 0;
        }
      }
      goto LABEL_352;
    }
    v58 = &v56[v57];
    v59 = (uint64_t)&v56[v57 + 1];
    v6[2] = v59;
    if (!v56)
    {
      v143 = v55;
      v144 = 0;
LABEL_352:
      v55 = 0;
      v56 = 0;
      *v6 = 0;
      v6[1] = 0;
      v146 = v6[3];
      if (v146)
      {
        v3 = v13;
        if (v143)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v144, v143);
          v56 = (char *)*v6;
          v55 = v6[1];
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
      }
      goto LABEL_353;
    }
    v60 = *v58;
    if (v60 < 2)
    {
      if (!v60)
      {
        LOBYTE(v263) = 0;
        v265 = 0;
        v266 = 1;
        goto LABEL_74;
      }
      v61 = ((v59 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v56;
      if (v55 >= v61 && v55 - v61 > 7)
      {
        v62 = (unint64_t *)&v56[v61];
        v63 = *v62;
        v6[2] = (uint64_t)(v62 + 1);
        v310 = 0;
        v311 = 0;
        if (v63 >= 0x10000)
        {
          do
          {
            IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v214, v6);
            if (!(_BYTE)v216)
              goto LABEL_71;
            if (HIDWORD(v311) == (_DWORD)v311)
            {
              WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v310, (unint64_t)&v214);
            }
            else
            {
              v71 = HIDWORD(v311) + 1;
              v72 = (char *)&v310[2 * HIDWORD(v311)];
              v73 = v214;
              v214 = 0;
              *(_QWORD *)v72 = v73;
              v74 = v215;
              v215 = 0;
              *((_QWORD *)v72 + 1) = v74;
              HIDWORD(v311) = v71;
            }
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
            --v63;
          }
          while (v63);
          v192 = HIDWORD(v311);
          v2 = v310;
          if (v311 > HIDWORD(v311))
          {
            v193 = v310;
            if (HIDWORD(v311))
            {
              if (HIDWORD(v311) >> 28)
              {
LABEL_490:
                __break(0xC471u);
                JUMPOUT(0x196E075C8);
              }
              v194 = (const void **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v311)));
              LODWORD(v311) = v192;
              v310 = v194;
              v193 = v2;
              if (v194 != v2)
              {
                WTF::VectorMover<false,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>::move(v2, &v2[2 * v192], v194);
                v193 = v310;
              }
            }
            v3 = v13;
            if (v2)
            {
              if (v193 == v2)
              {
                v310 = 0;
                LODWORD(v311) = 0;
              }
              WTF::fastFree((WTF *)v2, v56);
              v2 = v310;
            }
            else
            {
              v2 = v193;
            }
          }
          v310 = 0;
          v209 = v311;
        }
        else
        {
          if (v63)
          {
            v64 = (const void **)WTF::fastMalloc((WTF *)(16 * v63));
            LODWORD(v311) = v63;
            v310 = v64;
            while (1)
            {
              IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v214, v6);
              if (!(_BYTE)v216)
                break;
              if (HIDWORD(v311) == (_DWORD)v311)
              {
                WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v310, (unint64_t)&v214);
              }
              else
              {
                v65 = HIDWORD(v311) + 1;
                v66 = (char *)&v310[2 * HIDWORD(v311)];
                v67 = v214;
                v214 = 0;
                *(_QWORD *)v66 = v67;
                v68 = v215;
                v215 = 0;
                *((_QWORD *)v66 + 1) = v68;
                HIDWORD(v311) = v65;
              }
              std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
              if (!--v63)
              {
                v2 = v310;
                v69 = v311;
                goto LABEL_64;
              }
            }
LABEL_71:
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214);
            WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v310, v75);
LABEL_72:
            v56 = (char *)*v6;
            v76 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v77 = v6[3];
            if (v77 && v76)
              goto LABEL_340;
            goto LABEL_73;
          }
          v2 = 0;
          v69 = 0;
LABEL_64:
          v209 = v69;
          v310 = 0;
        }
        v311 = 0;
        v261 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v310, v56);
        v259 = 0;
        v263 = v2;
        v260 = 0;
        v264 = v209;
        v265 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v259, v70);
        v266 = 1;
        goto LABEL_74;
      }
      *v6 = 0;
      v6[1] = 0;
      v174 = v6[3];
      if (v174)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
        v175 = *v6;
        v176 = v6[1];
        v177 = v6[3];
        *v6 = 0;
        v6[1] = 0;
        if (v177)
        {
          if (v176)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v177 + 16))(v177, v175);
        }
      }
      goto LABEL_72;
    }
LABEL_353:
    *v6 = 0;
    v6[1] = 0;
    v77 = v6[3];
    if (v77 && v55)
LABEL_340:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v77 + 16))(v77, v56);
LABEL_73:
    LOBYTE(v263) = 0;
    v266 = 0;
    v78 = *v6;
    v79 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v80 = v6[3];
    if (v80 && v79)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 16))(v80, v78);
LABEL_74:
    v81 = v6[1];
    v82 = *v6;
    v83 = v6[2] - *v6;
    if (v81 <= v83)
    {
      v147 = 0;
      v148 = 0;
      *v6 = 0;
      v6[1] = 0;
      v149 = v6[3];
      if (v149)
      {
        v3 = v13;
        if (v81)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v149 + 16))(v149);
          v148 = *v6;
          v147 = v6[1];
        }
        else
        {
          v147 = 0;
          v148 = 0;
        }
      }
LABEL_357:
      v81 = 0;
      v82 = 0;
      *v6 = 0;
      v6[1] = 0;
      v150 = v6[3];
      if (v150)
      {
        v3 = v13;
        if (v147)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v150 + 16))(v150, v148, v147);
          v82 = *v6;
          v81 = v6[1];
        }
        else
        {
          v81 = 0;
          v82 = 0;
        }
      }
LABEL_358:
      *v6 = 0;
      v6[1] = 0;
      v151 = v6[3];
      if (v151 && v81)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v82);
LABEL_392:
      LOBYTE(v259) = 0;
      v262 = 0;
      goto LABEL_105;
    }
    v84 = (unsigned __int8 *)(v82 + v83);
    v6[2] = (uint64_t)(v84 + 1);
    if (!v82)
    {
      v147 = v81;
      v148 = 0;
      goto LABEL_357;
    }
    if (*v84 >= 2u)
      goto LABEL_358;
    if (!*v84)
    {
      LOBYTE(v214) = 0;
      LOBYTE(v216) = 0;
      std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100](&v259, (uint64_t)&v214);
      v262 = 1;
      if ((_BYTE)v216 && (_DWORD)v215 != -1)
        ((void (*)(const void ***, CFTypeRef *))off_1E34AD360[v215])(&v310, &v214);
      goto LABEL_105;
    }
    if (v81 <= (unint64_t)&v84[-v82 + 1])
    {
      *v6 = 0;
      v6[1] = 0;
      v178 = v6[3];
      if (v178)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v178 + 16))(v178);
        v179 = *v6;
        v180 = v6[1];
        v181 = v6[3];
        *v6 = 0;
        v6[1] = 0;
        if (v181)
        {
          if (v180)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v181 + 16))(v181, v179);
        }
      }
LABEL_80:
      LOBYTE(v214) = 0;
      LOBYTE(v216) = 0;
LABEL_81:
      v86 = *v6;
      v21 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v87 = v6[3];
      if (v87 && v21)
      {
        v22 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v86);
        v88 = *v6;
        if (*v6)
          goto LABEL_330;
      }
      else
      {
        LODWORD(v88) = 0;
      }
      goto LABEL_83;
    }
    v6[2] = (uint64_t)(v84 + 2);
    v85 = v84[1];
    if (v85 >= 2)
      goto LABEL_80;
    if (v85)
    {
      IPC::Decoder::decode<WTF::String>(v6, &v307);
      v89 = v308;
      if ((_BYTE)v308)
      {
        v214 = v307;
        v89 = 1;
        LODWORD(v215) = 1;
        goto LABEL_94;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::RetainPtr<__CFNumber const*>>((uint64_t)&v307, v6);
      v89 = v308;
      if ((_BYTE)v308)
      {
        v214 = v307;
        LODWORD(v215) = 0;
        v89 = 1;
        goto LABEL_94;
      }
    }
    LOBYTE(v214) = 0;
LABEL_94:
    LOBYTE(v216) = v89;
    if (!v89)
      goto LABEL_81;
    if (*v6)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v307, (uint64_t)&v214);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v310, (uint64_t)&v307);
      v312 = 1;
      if (v308 != -1)
        ((void (*)(CFTypeRef *, void **))off_1E34AD360[v308])(&v304, &v307);
      if (!(_BYTE)v216)
        goto LABEL_101;
LABEL_99:
      if ((_DWORD)v215 != -1)
        ((void (*)(void **, CFTypeRef *, uint64_t))off_1E34AD360[v215])(&v307, &v214, v21);
      goto LABEL_101;
    }
    LODWORD(v88) = 1;
LABEL_83:
    LOBYTE(v310) = 0;
    v312 = 0;
    if ((_DWORD)v88)
      goto LABEL_99;
LABEL_101:
    if (!v312)
    {
      v182 = *v6;
      v183 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v184 = v6[3];
      if (!v184)
        goto LABEL_392;
      if (!v183)
        goto LABEL_392;
      v3 = v13;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v184 + 16))(v184, v182);
      if (!v312)
        goto LABEL_392;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v259, (uint64_t)&v310);
    v261 = 1;
    v262 = 1;
    if (v312 && (_DWORD)v311 != -1)
      ((void (*)(CFTypeRef *, const void ***))off_1E34AD360[v311])(&v214, &v310);
LABEL_105:
    v90 = v6[1];
    if (!v262)
    {
      v152 = *v6;
      *v6 = 0;
      v6[1] = 0;
      v153 = v6[3];
      if (!v153 || !v90)
      {
        v90 = 0;
        v91 = *v6;
LABEL_363:
        v154 = 0;
        v155 = 0;
        *v6 = 0;
        v6[1] = 0;
        v156 = v6[3];
        if (v156)
        {
          v3 = v13;
          if (v90)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v91);
            v155 = *v6;
            v154 = v6[1];
          }
          else
          {
            v154 = 0;
            v155 = 0;
          }
        }
LABEL_364:
        v90 = 0;
        v91 = 0;
        *v6 = 0;
        v6[1] = 0;
        v157 = v6[3];
        if (v157)
        {
          v3 = v13;
          if (v154)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, v155, v154);
            v91 = *v6;
            v90 = v6[1];
          }
          else
          {
            v90 = 0;
            v91 = 0;
          }
        }
        goto LABEL_365;
      }
      v3 = v13;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v152);
      v90 = v6[1];
    }
    v91 = *v6;
    v92 = v6[2] - *v6;
    if (v90 <= v92)
      goto LABEL_363;
    v93 = (unsigned __int8 *)(v91 + v92);
    v6[2] = (uint64_t)(v93 + 1);
    if (!v91)
    {
      v154 = v90;
      v155 = 0;
      goto LABEL_364;
    }
    v94 = *v93;
    if (v94 < 2)
    {
      if (!v94)
      {
        v2 = v14;
        v210 = 0;
        v206 = 1;
        v207 = 0;
        goto LABEL_164;
      }
      IPC::Decoder::decode<WTF::String>(v6, &v313);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v214, v6);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v310, v6);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v307, v6);
      v22 = IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v304, v6);
      v95 = *v6;
      v197 = v13;
      v196 = v14;
      v195 = v4;
      if (*v6)
      {
        if (!v314)
          goto LABEL_330;
        v210 = v313;
        v313 = 0;
        if (!(_BYTE)v216)
          goto LABEL_330;
        v28 = v215;
        if ((_BYTE)v215)
        {
          v3 = (unint64_t)v214;
          v214 = 0;
        }
        else
        {
          v3 = 0;
        }
        if (!v312)
          goto LABEL_330;
        LODWORD(v14) = v311;
        if ((_BYTE)v311)
        {
          v5 = (char *)v310;
          v310 = 0;
        }
        else
        {
          v5 = 0;
        }
        if (!v309)
          goto LABEL_330;
        v96 = v308;
        if ((_BYTE)v308)
        {
          v2 = (const void **)v307;
          v307 = 0;
        }
        else
        {
          v2 = 0;
        }
        if (!v306)
          goto LABEL_330;
        if (!v305)
        {
          v13 = 0;
          v99 = 1;
          goto LABEL_134;
        }
        v97 = 0;
        v13 = (uint64_t)v304;
        v304 = 0;
        v98 = 1;
      }
      else
      {
        v96 = 0;
        LODWORD(v14) = 0;
        v28 = 0;
        v210 = 0;
        v98 = v305;
        v97 = v306 == 0;
      }
      v99 = 0;
      if (!v97 && v98)
      {
        if (v304)
          CFRelease(v304);
        v99 = 0;
      }
LABEL_134:
      if (v309 && (_BYTE)v308 && v307)
        CFRelease(v307);
      if (v312 && (_BYTE)v311 && v310)
        CFRelease(v310);
      if ((_BYTE)v216 && (_BYTE)v215 && v214)
        CFRelease(v214);
      if (v314)
      {
        v100 = v313;
        v313 = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
          {
            WTF::StringImpl::destroy(v100, v20);
            if (v95)
            {
LABEL_151:
              v206 = 0;
              v207 = 0;
              v101 = (_DWORD)v28 != 0;
              if ((_DWORD)v28)
                v28 = v3;
              else
                v28 = 0;
              v203 = (_DWORD)v14 != 0;
              v204 = v101;
              if ((_DWORD)v14)
                v102 = v5;
              else
                v102 = 0;
              if (v96)
                v103 = v2;
              else
                v103 = 0;
              v199 = v103;
              v200 = v102;
              v201 = v99 ^ 1;
              v202 = v96 != 0;
              if (v99)
                v104 = 0;
              else
                v104 = (const void *)v13;
              v198 = v104;
              v2 = v196;
              v13 = v197;
              v4 = v195;
              goto LABEL_164;
            }
LABEL_324:
            v91 = *v6;
            v90 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v133 = v6[3];
            v14 = v196;
            v13 = v197;
            v4 = v195;
            if (v133)
              goto LABEL_421;
            goto LABEL_366;
          }
          *(_DWORD *)v100 -= 2;
        }
      }
      if (v95)
        goto LABEL_151;
      goto LABEL_324;
    }
LABEL_365:
    *v6 = 0;
    v6[1] = 0;
    v133 = v6[3];
    if (v133)
    {
LABEL_421:
      if (v90)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v91);
    }
LABEL_366:
    v2 = v14;
    v158 = *v6;
    v159 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v160 = v6[3];
    if (v160)
    {
      v3 = v13;
      if (v159)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v158);
      v210 = 0;
      v207 = 1;
    }
    else
    {
      v210 = 0;
      v207 = 1;
    }
LABEL_164:
    v105 = v6[1];
    v106 = (char *)*v6;
    v107 = v6[2] - *v6;
    if (v105 <= v107)
    {
      v161 = 0;
      v162 = 0;
      *v6 = 0;
      v6[1] = 0;
      v163 = v6[3];
      if (v163)
      {
        v3 = v13;
        if (v105)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
          v162 = *v6;
          v161 = v6[1];
        }
        else
        {
          v161 = 0;
          v162 = 0;
        }
      }
      goto LABEL_369;
    }
    v108 = &v106[v107];
    v6[2] = (uint64_t)(v108 + 1);
    if (!v106)
    {
      v161 = v105;
      v162 = 0;
LABEL_369:
      v105 = 0;
      v106 = 0;
      *v6 = 0;
      v6[1] = 0;
      v164 = v6[3];
      if (v164)
      {
        v3 = v13;
        if (v161)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v162, v161);
          v106 = (char *)*v6;
          v105 = v6[1];
        }
        else
        {
          v105 = 0;
          v106 = 0;
        }
      }
LABEL_370:
      *v6 = 0;
      v6[1] = 0;
      v165 = v6[3];
      if (v165 && v105)
        goto LABEL_372;
      goto LABEL_394;
    }
    v109 = *v108;
    if (v109 >= 2)
      goto LABEL_370;
    if (!v109)
    {
      v110 = 0;
      v5 = 0;
      LODWORD(v14) = 1;
      goto LABEL_171;
    }
    IPC::ArgumentCoder<WTF::RetainPtr<__CFArray const*>,void>::decode(v6, v106, (uint64_t)&v214);
    if ((_BYTE)v215)
    {
      v110 = 0;
      LODWORD(v14) = 0;
      v5 = (char *)v214;
      goto LABEL_171;
    }
    v106 = (char *)*v6;
    v185 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v165 = v6[3];
    if (v165 && v185)
LABEL_372:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v165 + 16))(v165, v106);
LABEL_394:
    v186 = *v6;
    v187 = v6[1];
    *v6 = 0;
    v6[1] = 0;
    v188 = v6[3];
    if (!v188)
      goto LABEL_395;
    v3 = v13;
    if (v187)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, v186);
LABEL_395:
      v5 = 0;
      v110 = 1;
      goto LABEL_171;
    }
    v5 = 0;
    v110 = 1;
LABEL_171:
    v22 = IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v310, v6);
    if (!*v6)
      break;
    if (v303)
    {
      v111 = v302;
      v302 = 0;
      v214 = v111;
      if (v301)
      {
        v112 = v300;
        v300 = 0;
        v215 = v112;
        if (v299)
        {
          v113 = v298;
          v298 = 0;
          v216 = v113;
          if (!(_DWORD)v13)
          {
            LOBYTE(v217) = 0;
            v218 = 0;
            if ((v4 & 1) == 0)
            {
              v217 = v2;
              v218 = 1;
              v2 = 0;
            }
            if (!v213)
            {
              LOBYTE(v219) = 0;
              v220 = 0;
              if ((v211 & 1) == 0)
              {
                v219 = cf;
                v220 = 1;
                cf = 0;
              }
              if (v297)
              {
                LOBYTE(v221) = 0;
                v222 = 0;
                if (v296)
                {
                  v114 = v295;
                  v295 = 0;
                  v221 = v114;
                  v222 = 1;
                }
                if (v294)
                {
                  LOBYTE(v223) = 0;
                  v224 = 0;
                  if (v293)
                  {
                    v115 = v292;
                    v292 = 0;
                    v223 = v115;
                    v224 = 1;
                  }
                  if (v291)
                  {
                    LOBYTE(v225) = 0;
                    v226 = 0;
                    if (v290)
                    {
                      v116 = v289;
                      v289 = 0;
                      v225 = v116;
                      v226 = 1;
                    }
                    if (v288)
                    {
                      LOBYTE(v227) = 0;
                      v228 = 0;
                      if (v287)
                      {
                        v117 = v286;
                        v286 = 0;
                        v227 = v117;
                        v228 = 1;
                      }
                      if (v285)
                      {
                        LOBYTE(v229) = 0;
                        v230 = 0;
                        if (v284)
                        {
                          v118 = v283;
                          v283 = 0;
                          v229 = v118;
                          v230 = 1;
                        }
                        if (v282)
                        {
                          LOBYTE(v231) = 0;
                          v232 = 0;
                          if (v281)
                          {
                            v119 = v280;
                            v280 = 0;
                            v231 = v119;
                            v232 = 1;
                          }
                          if (v279)
                          {
                            LOBYTE(v233) = 0;
                            v234 = 0;
                            if (v278)
                            {
                              v120 = v277;
                              v277 = 0;
                              v233 = v120;
                              v234 = 1;
                            }
                            if (v276)
                            {
                              LOBYTE(v235) = 0;
                              v236 = 0;
                              if (v275)
                              {
                                v121 = v274;
                                v274 = 0;
                                v235 = v121;
                                v236 = 1;
                              }
                              if (v273)
                              {
                                LOBYTE(v237) = 0;
                                v238 = 0;
                                if (v272)
                                {
                                  v122 = v271;
                                  v271 = 0;
                                  v237 = v122;
                                  v238 = 1;
                                }
                                if (v270)
                                {
                                  LOBYTE(v239[0]) = 0;
                                  v240 = 0;
                                  if (v269)
                                  {
                                    v123 = v267;
                                    v267 = 0;
                                    v239[0] = v123;
                                    v124 = v268;
                                    v268 = 0;
                                    v239[1] = v124;
                                    v240 = 1;
                                  }
                                  if (v266)
                                  {
                                    LOBYTE(v241) = 0;
                                    v243 = 0;
                                    if (v265)
                                    {
                                      v125 = v263;
                                      v263 = 0;
                                      v241 = v125;
                                      v126 = v264;
                                      v264 = 0;
                                      v242 = v126;
                                      v243 = 1;
                                    }
                                    if (v262)
                                    {
                                      v6 = v239;
                                      v22 = std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100](v244, (uint64_t)&v259);
                                      if (!v207)
                                      {
                                        LOBYTE(v245) = 0;
                                        v254 = 0;
                                        if ((v206 & 1) == 0)
                                        {
                                          v245 = v210;
                                          LOBYTE(v246) = 0;
                                          v247 = 0;
                                          if (v204)
                                          {
                                            v246 = v28;
                                            v247 = 1;
                                            v28 = 0;
                                          }
                                          LOBYTE(v248) = 0;
                                          v249 = 0;
                                          if (v203)
                                          {
                                            v248 = v200;
                                            v249 = 1;
                                            v200 = 0;
                                          }
                                          LOBYTE(v250) = 0;
                                          v251 = 0;
                                          if (v202)
                                          {
                                            v250 = v199;
                                            v251 = 1;
                                            v199 = 0;
                                          }
                                          LOBYTE(v252) = 0;
                                          v253 = 0;
                                          if (v201)
                                          {
                                            v252 = v198;
                                            v253 = 1;
                                            v198 = 0;
                                          }
                                          v210 = 0;
                                          v254 = 1;
                                        }
                                        if (!v110)
                                        {
                                          LOBYTE(v255) = 0;
                                          v256 = 0;
                                          if ((v14 & 1) == 0)
                                          {
                                            v255 = v5;
                                            v256 = 1;
                                            v5 = 0;
                                          }
                                          if (v312)
                                          {
                                            LOBYTE(v257) = 0;
                                            v258 = 0;
                                            v127 = v311;
                                            if ((_BYTE)v311)
                                            {
                                              v128 = v310;
                                              v310 = 0;
                                              v257 = v128;
                                              v258 = 1;
                                            }
                                            *(_BYTE *)(WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes((uint64_t)v205, (uint64_t *)&v214)+ 384) = 1;
                                            WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)&v214, v129);
                                            goto LABEL_233;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_330:
    __break(1u);
LABEL_331:
    if (v21)
      (*(void (**)(_BYTE *, WTF::StringImpl *))(*(_QWORD *)v22 + 16))(v22, v20);
LABEL_12:
    v14 = 0;
    v13 = 1;
  }
  *v205 = 0;
  v205[384] = 0;
  v127 = v311;
  if (!v312)
    goto LABEL_236;
LABEL_233:
  if (v127 && v310)
    CFRelease(v310);
LABEL_236:
  if (((v110 | v14) & 1) == 0 && v5)
    CFRelease(v5);
  if (((v207 | v206) & 1) == 0)
  {
    if (v201 && v198)
      CFRelease(v198);
    if (v202 && v199)
      CFRelease(v199);
    if (v203 && v200)
      CFRelease(v200);
    if (v204 && v28)
    {
      CFRelease((CFTypeRef)v28);
      if (v210)
        goto LABEL_252;
    }
    else if (v210)
    {
LABEL_252:
      if (*(_DWORD *)v210 == 2)
        WTF::StringImpl::destroy(v210, v20);
      else
        *(_DWORD *)v210 -= 2;
    }
  }
  if (v262 && v261 && (_DWORD)v260 != -1)
    ((void (*)(CFTypeRef *, WTF **))off_1E34AD360[v260])(&v214, &v259);
  if (v266 && v265)
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v263, v20);
  if (v270 && v269)
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v267, v20);
  if (v273 && v272 && v271)
    CFRelease(v271);
  if (v276 && v275 && v274)
    CFRelease(v274);
  if (v279 && v278 && v277)
    CFRelease(v277);
  if (v282 && v281 && v280)
    CFRelease(v280);
  if (v285 && v284 && v283)
    CFRelease(v283);
  if (v288 && v287 && v286)
    CFRelease(v286);
  if (v291 && v290 && v289)
    CFRelease(v289);
  if (v294 && v293 && v292)
    CFRelease(v292);
  if (v297 && v296 && v295)
    CFRelease(v295);
  if (((v213 | v211) & 1) == 0 && cf)
    CFRelease(cf);
  if (((v4 | v13) & 1) == 0 && v2)
    CFRelease(v2);
  if (v299)
  {
    v130 = v298;
    v298 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
        WTF::StringImpl::destroy(v130, v20);
      else
        *(_DWORD *)v130 -= 2;
    }
  }
  if (v301)
  {
    v131 = v300;
    v300 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2)
        WTF::StringImpl::destroy(v131, v20);
      else
        *(_DWORD *)v131 -= 2;
    }
  }
  if (v303)
  {
    v132 = (WTF::StringImpl *)v302;
    v302 = 0;
    if (v132)
    {
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy(v132, v20);
      else
        *(_DWORD *)v132 -= 2;
    }
  }
}

void sub_196E075D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,int a23,int a24,CFTypeRef cf,int a26,int a27,CFTypeRef a28)
{
  const void *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  const void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  if (*(_BYTE *)(v31 - 112))
  {
    v33 = *(unsigned int *)(v31 - 120);
    if ((_DWORD)v33 != -1)
      ((void (*)(CFTypeRef *, uint64_t))off_1E34AD360[v33])(&a28, v31 - 128);
  }
  if (LOBYTE(STACK[0x240]) && LOBYTE(STACK[0x238]))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x228], a2);
  if (LOBYTE(STACK[0x260]) && LOBYTE(STACK[0x258]))
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x248], a2);
  if (LOBYTE(STACK[0x278]) && LOBYTE(STACK[0x270]) && STACK[0x268])
    CFRelease((CFTypeRef)STACK[0x268]);
  if (LOBYTE(STACK[0x290]) && LOBYTE(STACK[0x288]) && STACK[0x280])
    CFRelease((CFTypeRef)STACK[0x280]);
  if (LOBYTE(STACK[0x2A8]) && LOBYTE(STACK[0x2A0]) && STACK[0x298])
    CFRelease((CFTypeRef)STACK[0x298]);
  if (LOBYTE(STACK[0x2C0]) && LOBYTE(STACK[0x2B8]) && STACK[0x2B0])
    CFRelease((CFTypeRef)STACK[0x2B0]);
  if (LOBYTE(STACK[0x2D8]) && LOBYTE(STACK[0x2D0]) && STACK[0x2C8])
    CFRelease((CFTypeRef)STACK[0x2C8]);
  if (LOBYTE(STACK[0x2F0]) && LOBYTE(STACK[0x2E8]) && STACK[0x2E0])
    CFRelease((CFTypeRef)STACK[0x2E0]);
  if (LOBYTE(STACK[0x308]) && LOBYTE(STACK[0x300]) && STACK[0x2F8])
    CFRelease((CFTypeRef)STACK[0x2F8]);
  if (LOBYTE(STACK[0x320]) && LOBYTE(STACK[0x318]) && STACK[0x310])
    CFRelease((CFTypeRef)STACK[0x310]);
  if (*(_BYTE *)(v31 - 232))
  {
    if (*(_BYTE *)(v31 - 240))
    {
      v34 = *(const void **)(v31 - 248);
      if (v34)
        CFRelease(v34);
    }
  }
  if (((a27 | a24) & 1) == 0 && cf)
    CFRelease(cf);
  if (((v30 | v29) & 1) == 0 && v28)
    CFRelease(v28);
  if (*(_BYTE *)(v31 - 216))
  {
    v35 = *(WTF::StringImpl **)(v31 - 224);
    *(_QWORD *)(v31 - 224) = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (*(_BYTE *)(v31 - 200))
  {
    v36 = *(WTF::StringImpl **)(v31 - 208);
    *(_QWORD *)(v31 - 208) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_BYTE *)(v31 - 184))
  {
    v37 = *(WTF::StringImpl **)(v31 - 192);
    *(_QWORD *)(v31 - 192) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[48];
  char v23;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_13:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_14;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_21;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebCore::FontPlatformSerializedAttributes,void>::decode(v22, a2);
    if (!v23)
    {
      v19 = *a2;
      v20 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19), !v23))
      {
LABEL_21:
        *a1 = 0;
        a1[392] = 0;
        goto LABEL_10;
      }
    }
    WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes((uint64_t)a1, v22);
    a1[384] = 1;
  }
  else
  {
    LOBYTE(v22[0]) = 0;
    v23 = 0;
    std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v22);
  }
  a1[392] = 1;
  if (v23)
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v22, v10);
LABEL_10:
  if (!a1[392])
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v17)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    }
  }
}

void sub_196E08058(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a58)
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)&a10, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  v4 = *(_QWORD *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  WTF *v20;
  uint64_t v21;
  char v22;

  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v20);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v18);
  v5 = a1[1];
  v6 = (WTF::StringImpl *)*a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (uint64_t *)((char *)v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v10 = *v9;
      if ((unint64_t)(v10 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_19;
      v11 = 0;
      goto LABEL_9;
    }
    v15 = v5;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_32;
  }
  while (1)
  {
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v15)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v16, v15);
        v6 = (WTF::StringImpl *)*a1;
        if (*a1)
          goto LABEL_31;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_19:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      break;
    if (!v5)
      break;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v6);
    if (!*a1)
      break;
    v10 = 0;
    v11 = 1;
LABEL_9:
    if (v22)
    {
      v12 = v20;
      v13 = v21;
      v20 = 0;
      v21 = 0;
      if (v19)
      {
        v14 = v18;
        v18 = 0;
        if (!v11)
        {
          *(_QWORD *)a2 = v12;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = v14;
          *(_QWORD *)(a2 + 24) = v10;
          *(_BYTE *)(a2 + 32) = 1;
          goto LABEL_13;
        }
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    if (v5)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
      v16 = *a1;
      v15 = a1[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_13:
  if (v22)
  {
    result = v20;
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_196E082B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF *a12, int a13, int a14, char a15)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (a12)
      WTF::fastFree(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  void *v4;
  char v5;
  char *result;
  WTF *v7;
  unsigned int v8;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  WebCore::ContentFilterUnblockHandler::webFilterEvaluatorData((WebCore::ContentFilterUnblockHandler *)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v7, v8);
  if (v7)
    WTF::fastFree(v7, v4);
  v5 = *(_BYTE *)(a2 + 88);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v5;
  return result;
}

void sub_196E08394(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  __n128 v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  char v23;
  WTF::StringImpl *v24[5];
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v26);
  IPC::Decoder::decode<WTF::URL>(a1, v24);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v21);
  v4 = a1[1];
  v5 = (WTF::StringImpl *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_42;
  v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v17 = v4;
    v18 = 0;
    goto LABEL_43;
  }
  v8 = *v7;
  if (v8 > 1)
    goto LABEL_44;
  v9 = 0;
  v10 = v8 != 0;
  while (!v27 || !v25 || !v23 || v9)
  {
    __break(1u);
LABEL_42:
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a1;
        v17 = a1[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_43:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v5 = (WTF::StringImpl *)*a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result
      || !v4
      || (result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5), !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 96) = 0;
      goto LABEL_27;
    }
    v10 = 0;
    v9 = 1;
  }
  MEMORY[0x19AEB3210](&v28, &v26, v24, &v21, v10);
  v11 = v28;
  v28 = 0;
  *(_QWORD *)a2 = v11;
  v12.n128_f64[0] = WTF::URL::URL(a2 + 8, (uint64_t *)&v29);
  if (v31)
  {
    if (v31 == v30)
    {
      *(_QWORD *)(a2 + 72) = a2 + 48;
      (*(void (**)(double))(v30[0] + 24))(v12.n128_f64[0]);
      v13 = v31;
    }
    else
    {
      v13 = 0;
      *(_QWORD *)(a2 + 72) = v31;
      v31 = 0;
    }
  }
  else
  {
    v13 = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  *(_QWORD *)(a2 + 80) = v32;
  *(_BYTE *)(a2 + 88) = v33;
  *(_BYTE *)(a2 + 96) = 1;
  v32 = 0;
  if (v13 == v30)
  {
    v14 = 4;
    v13 = v30;
    goto LABEL_18;
  }
  if (v13)
  {
    v14 = 5;
LABEL_18:
    (*(void (**)(__n128))(*v13 + 8 * v14))(v12);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v5);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_27:
  if (v23)
  {
    result = v21;
    if (v21)
    {
      v21 = 0;
      v22 = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
  if (v25)
  {
    result = v24[0];
    v24[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v27)
  {
    result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E086C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef cf)
{
  if (a12 && a9)
    WTF::fastFree(a9, a2);
  if (a18 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::AttributedString>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::AttributedString,void>::decode(a1, a2);
  if (!a2[40])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196E08870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    MEMORY[0x19AEAEECC](v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>> const&>(a1, (uint64_t)(a2 + 3));
}

void IPC::ArgumentCoder<WebCore::AttributedString,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  WTF *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  WTF *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  WTF::StringImpl *v54;
  char v55;

  IPC::Decoder::decode<WTF::String>(a1, &v54);
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v6, v5);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_23;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v16 = v5;
    v17 = 0;
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    LOBYTE(v51) = 0;
    v53 = 0;
    goto LABEL_43;
  }
  v10 = *v9;
  v48 = 0;
  v49 = 0;
  if (v10 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v45, a1);
      if (!v47)
        goto LABEL_42;
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v48, (unint64_t)&v45);
      }
      else
      {
        v20 = (char *)v48 + 24 * HIDWORD(v49);
        *(_OWORD *)v20 = v45;
        *((_QWORD *)v20 + 2) = 0;
        v21 = v46;
        v46 = 0;
        *((_QWORD *)v20 + 2) = v21;
        ++HIDWORD(v49);
      }
      if (v47 && v46)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v4);
      --v10;
    }
    while (v10);
    v22 = HIDWORD(v49);
    v23 = v48;
    if (v49 > HIDWORD(v49))
    {
      v24 = (uint64_t)v48;
      if (HIDWORD(v49))
      {
        v44 = v48;
        if (HIDWORD(v49) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          goto LABEL_101;
        }
        v25 = 24 * HIDWORD(v49);
        v26 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
        LODWORD(v49) = v25 / 0x18;
        v48 = (WTF *)v26;
        v23 = v44;
        v24 = (uint64_t)v44;
        if ((WTF *)v26 != v44)
        {
          WTF::VectorMover<false,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>::move((uint64_t)v44, (WTF *)((char *)v44 + 24 * v22), v26);
          v23 = v44;
          v24 = (uint64_t)v48;
        }
      }
      if (v23)
      {
        if ((WTF *)v24 == v23)
        {
          v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(v23, v4);
        v23 = v48;
      }
      else
      {
        v23 = (WTF *)v24;
      }
    }
    v51 = (uint64_t)v23;
    v43 = v49;
    v48 = 0;
    v49 = 0;
    v52 = v43;
    goto LABEL_21;
  }
  if (!v10)
  {
    v13 = 0;
    v14 = 0;
LABEL_20:
    v48 = 0;
    v49 = 0;
    v51 = v13;
    v52 = v14;
LABEL_21:
    v53 = 1;
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
    goto LABEL_44;
  }
  LODWORD(v49) = 24 * (int)v10 / 0x18u;
  v48 = (WTF *)WTF::fastMalloc((WTF *)(24 * v10));
  while (1)
  {
    IPC::Decoder::decode<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v45, a1);
    if (!v47)
      break;
    if (HIDWORD(v49) == (_DWORD)v49)
    {
      WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v48, (unint64_t)&v45);
    }
    else
    {
      v11 = (char *)v48 + 24 * HIDWORD(v49);
      *(_OWORD *)v11 = v45;
      *((_QWORD *)v11 + 2) = 0;
      v12 = v46;
      v46 = 0;
      *((_QWORD *)v11 + 2) = v12;
      ++HIDWORD(v49);
    }
    if (v47 && v46)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v4);
    if (!--v10)
    {
      v13 = (uint64_t)v48;
      v14 = v49;
      goto LABEL_20;
    }
  }
LABEL_42:
  LOBYTE(v51) = 0;
  v53 = 0;
  WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
LABEL_43:
  v15 = (WTF::StringImpl *)*a1;
  v27 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v28 = a1[3];
  if (v28 && v27)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v28 + 16))(v28, v15);
LABEL_44:
  if (!*a1)
    goto LABEL_54;
  if (!v55 || !v53)
    goto LABEL_101;
  if ((WebCore::AttributedString::rangesAreSafe() & 1) == 0)
  {
LABEL_54:
    *a2 = 0;
    a2[40] = 0;
    goto LABEL_71;
  }
  v29 = a1[1];
  v15 = (WTF::StringImpl *)*a1;
  v30 = a1[2] - *a1;
  if (v29 <= v30)
  {
    v35 = 0;
    v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *a1;
        v35 = a1[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
    goto LABEL_59;
  }
  v31 = (unsigned __int8 *)v15 + v30;
  a1[2] = (uint64_t)(v31 + 1);
  if (!v15)
  {
    v35 = v29;
    v36 = 0;
LABEL_59:
    v29 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
        v15 = (WTF::StringImpl *)*a1;
        v29 = a1[1];
      }
      else
      {
        v29 = 0;
        v15 = 0;
      }
    }
    goto LABEL_60;
  }
  v32 = *v31;
  if (v32 >= 2)
  {
LABEL_60:
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v29)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v15);
    goto LABEL_61;
  }
  if (!v32)
  {
    v33 = 0;
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v34 = 1;
    v50 = 1;
    goto LABEL_63;
  }
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>(&v45, a1);
  if (BYTE8(v45))
  {
    v33 = 0;
    v48 = (WTF *)v45;
    v32 = 1;
    LOBYTE(v49) = 1;
    v50 = 1;
    v34 = 1;
    goto LABEL_63;
  }
LABEL_61:
  LOBYTE(v48) = 0;
  v50 = 0;
  v15 = (WTF::StringImpl *)*a1;
  v40 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v41 = a1[3];
  if (v41 && v40)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v41 + 16))(v41, v15);
  v32 = 0;
  v34 = 0;
  v33 = 1;
LABEL_63:
  if (!*a1)
  {
    *a2 = 0;
    a2[40] = 0;
    if (v34)
      goto LABEL_68;
    goto LABEL_71;
  }
  if (!v55 || !v53 || v33)
  {
LABEL_101:
    __break(1u);
    return;
  }
  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  a2[40] = 1;
  MEMORY[0x19AEAEECC](&v45);
  v32 = v49;
  if (v50)
  {
LABEL_68:
    if (v32 && v48)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v48, v15);
  }
LABEL_71:
  if (v53)
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v15);
  if (v55)
  {
    v42 = v54;
    v54 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v15);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
}

void sub_196E08E50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;

  if (*(_BYTE *)(v26 - 40))
  {
    v28 = *(WTF::StringImpl **)(v26 - 48);
    *(_QWORD *)(v26 - 48) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a1, &v13);
  v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  v9 = v8;
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (*a1)
  {
    if (v14)
    {
      v12 = v13;
      v13 = 0;
      if (v6)
      {
        if (v9 && (_BYTE)v11)
        {
          *(_QWORD *)a2 = v12;
          *(_QWORD *)(a2 + 8) = v4 & 0xFFFFFFFFFFLL;
          *(_DWORD *)(a2 + 16) = v7;
          *(_BYTE *)(a2 + 20) = BYTE4(v7);
          *(_DWORD *)(a2 + 24) = (_DWORD)result;
          *(_BYTE *)(a2 + 28) = BYTE4(result);
          *(_BYTE *)(a2 + 32) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E0904C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::encode(IPC::Encoder *a1, WebCore::PaymentSessionError *this)
{
  NSError *cf;

  WebCore::PaymentSessionError::platformError(this);
  IPC::encodeObjectDirectly<NSError>(a1, cf);
  if (cf)
    CFRelease(cf);
}

void sub_196E090DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unint64_t v5;
  CFTypeRef v6;
  _QWORD *v7;
  CFTypeRef cf;
  unsigned __int8 v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = objc_opt_class();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, v10, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v7);
  IPC::decodeRequiringAllowedClasses<NSError,NSError*>((uint64_t)&cf, a1);
  v5 = (unint64_t)v7;
  if (v7)
    goto LABEL_11;
  while (*a1)
  {
    v5 = v9;
    if (v9)
    {
      WebCore::PaymentSessionError::PaymentSessionError();
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 1;
      goto LABEL_5;
    }
    __break(1u);
LABEL_11:
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
LABEL_5:
  if (v9)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_196E091F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  __int16 v7;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(a1, (char *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(a1, (WebCore::PaymentContact *)(a2 + 32));
  IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(a1, (char *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(a1, (WebCore::PaymentContact *)(a2 + 56));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 72);
  IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(a1, (char *)(a2 + 88));
  v4 = *(_BYTE *)(a2 + 93);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2 + 128);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 208));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 216);
  v5 = *(_BYTE *)(a2 + 232);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration((WebCore::PaymentInstallmentConfiguration *)(a2 + 240));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayInstallmentConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayInstallmentConfiguration> const&>(a1, v6);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 344));
  v7 = *(_WORD *)(a2 + 346);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)&v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 352));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 360);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 568);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 688);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 712);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 848);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 880));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 888));
}

void IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::decode(uint64_t *a1@<X0>, WebCore::ApplePaySessionPaymentRequest *a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  char v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  unint64_t *v71;
  WTF::StringImpl *v72;
  int v73;
  BOOL *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  BOOL *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int8 *v152;
  unsigned int v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned __int8 *v171;
  unsigned int v172;
  int v173;
  __int16 v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int8 *v179;
  unsigned int v180;
  int v181;
  __int16 v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  void *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  char v249;
  int v250;
  unsigned int v251;
  char v252;
  int v253;
  unsigned int v254;
  char v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  char v265;
  int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  int v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  BOOL v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  WebCore::ApplePaySessionPaymentRequest *v294;
  char v295;
  int v296;
  int v297;
  int v298;
  BOOL v299;
  char v300;
  char v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  uint64_t v308;
  uint64_t v309;
  CFTypeRef v310;
  uint64_t v311;
  uint64_t v312;
  CFTypeRef v313;
  unint64_t v314;
  uint64_t v315;
  int v316;
  char v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  __int16 v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  uint64_t v332;
  BOOL v333;
  char v334;
  __int128 v335;
  __int128 v336;
  char v337;
  __int128 v338;
  WTF::StringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  char v342;
  char v343;
  __int16 v344;
  __int16 v345;
  uint64_t *v346;
  uint64_t v347;
  char v348[120];
  WTF::StringImpl *v349;
  uint64_t v350;
  char v351;
  char v352[136];
  WTF::StringImpl *v353;
  uint64_t v354;
  char v355;
  char v356;
  __int16 v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  char v361;
  char v362;
  char v363;
  BOOL v364[8];
  __int128 v365;
  __int128 v366;
  WTF::StringImpl *v367;
  __int128 v368;
  WTF::StringImpl *v369;
  unint64_t v370;
  uint64_t v371;
  char v372;
  char v373;
  char v374;
  WTF::StringImpl *v375;
  uint64_t v376;
  char v377;
  char v378;
  WTF::StringImpl *v379;
  uint64_t v380;
  char v381;
  char v382;
  char v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  char v387;
  __int128 v388;
  WTF::StringImpl *v389;
  unint64_t v390;
  uint64_t v391;
  char v392;
  char v393;
  char v394;
  char v395;
  char v396[8];
  __int128 v397;
  __int128 v398;
  char v399;
  __int128 v400;
  WTF::StringImpl *v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  char v405;
  char v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  WTF::StringImpl *v410;
  char v411;
  char v412[8];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  uint64_t v417;
  __int16 v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  char v425;
  unint64_t v426;
  uint64_t v427;
  char v428;
  char v429[8];
  CFTypeRef v430;
  char v431;
  char v432[8];
  CFTypeRef v433;
  char v434;
  WTF::StringImpl *v435;
  char v436;
  WTF::StringImpl *v437;
  char v438;
  WTF::StringImpl *v439;
  char v440;
  WTF::StringImpl *v441;
  char v442;
  WTF::StringImpl *v443;
  char v444;
  WTF::StringImpl *v445;
  char v446;
  WTF::StringImpl *v447;
  char v448;

  v2 = a1;
  IPC::Decoder::decode<WTF::String>(a1, &v437);
  IPC::Decoder::decode<WTF::String>(v2, &v435);
  v304 = IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(v2);
  IPC::Decoder::decode<WebCore::PaymentContact>(v2, (uint64_t)v432);
  v303 = IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(v2);
  IPC::Decoder::decode<WebCore::PaymentContact>(v2, (uint64_t)v429);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v4, (uint64_t)&v426);
  v5 = v2[1];
  v6 = (WTF::StringImpl *)*v2;
  v7 = v2[2] - *v2;
  v294 = a2;
  if (v5 <= v7)
  {
    v87 = 0;
    v88 = 0;
    *v2 = 0;
    v2[1] = 0;
    v89 = v2[3];
    if (v89)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 16))(v89);
        v88 = *v2;
        v87 = v2[1];
      }
      else
      {
        v87 = 0;
        v88 = 0;
      }
    }
    goto LABEL_98;
  }
  v8 = (unsigned __int8 *)v6 + v7;
  v9 = (uint64_t)v6 + v7 + 1;
  v2[2] = v9;
  if (!v6)
    goto LABEL_522;
  v10 = *v8;
  if (v10 < 2)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v91 = v2[3];
    if (!v91 || !v5)
    {
      v13 = 0;
      v92 = 0;
      v6 = 0;
      v11 = 1;
      goto LABEL_102;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v91 + 16))(v91, v6);
    v12 = 0;
    v6 = (WTF::StringImpl *)*v2;
    v5 = v2[1];
    v11 = 1;
    v9 = v2[2];
LABEL_5:
    if (v10)
      v13 = v12;
    else
      v13 = 0;
    v14 = v9 - (_QWORD)v6;
    if (v5 <= v14)
    {
      v262 = v11;
      v263 = v13;
      v92 = 0;
      v264 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v5 && v264)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v264 + 16))(v264);
        v6 = (WTF::StringImpl *)*v2;
        v92 = v2[1];
      }
      else
      {
        v6 = 0;
      }
      v13 = v263;
      v11 = v262;
      goto LABEL_102;
    }
    v15 = (unsigned __int8 *)v6 + v14;
    v16 = (uint64_t)v6 + v14 + 1;
    v2[2] = v16;
    if (!v6)
    {
      v92 = v5;
LABEL_102:
      *v2 = 0;
      v2[1] = 0;
      v93 = v2[3];
      if (v93)
      {
        v260 = v11;
        v261 = v13;
        if (v92)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v93 + 16))(v93, v6, v92);
          v17 = 0;
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v17 = 0;
        }
        v13 = v261;
        v11 = v260;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v17 = 0;
      }
      goto LABEL_104;
    }
    v17 = (WTF::StringImpl *)*v15;
    if (v17 < 2)
    {
      v18 = 0;
      v19 = 1;
      goto LABEL_12;
    }
LABEL_104:
    *v2 = 0;
    v2[1] = 0;
    v94 = v2[3];
    if (!v94)
    {
      v19 = 0;
      v95 = 0;
      v6 = 0;
      v18 = 1;
      goto LABEL_106;
    }
    v258 = v11;
    v259 = v13;
    if (!v5)
    {
      v19 = 0;
      v95 = 0;
      v6 = 0;
      v18 = 1;
LABEL_106:
      *v2 = 0;
      v2[1] = 0;
      v96 = v2[3];
      if (v96)
      {
        v255 = v19;
        v256 = v11;
        v257 = v13;
        if (v95)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v96 + 16))(v96, v6, v95);
          v23 = 0;
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v23 = 0;
        }
        v13 = v257;
        v11 = v256;
        v19 = v255;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v23 = 0;
      }
      goto LABEL_108;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v94 + 16))(v94, v6);
    v19 = 0;
    v6 = (WTF::StringImpl *)*v2;
    v5 = v2[1];
    v18 = 1;
    v16 = v2[2];
    v13 = v259;
    v11 = v258;
LABEL_12:
    v20 = v16 - (_QWORD)v6;
    if (v5 <= v20)
    {
      v265 = v19;
      v266 = v11;
      v267 = v13;
      v95 = 0;
      v268 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v5 && v268)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v268 + 16))(v268);
        v6 = (WTF::StringImpl *)*v2;
        v95 = v2[1];
      }
      else
      {
        v6 = 0;
      }
      v13 = v267;
      v11 = v266;
      v19 = v265;
      goto LABEL_106;
    }
    v21 = (unsigned __int8 *)v6 + v20;
    v22 = (uint64_t)v6 + v20 + 1;
    v2[2] = v22;
    if (!v6)
    {
      v95 = v5;
      goto LABEL_106;
    }
    v23 = *v21;
    if (v23 < 2)
    {
      v24 = 0;
      v25 = 1;
      goto LABEL_16;
    }
LABEL_108:
    *v2 = 0;
    v2[1] = 0;
    v97 = v2[3];
    if (!v97)
    {
      v25 = 0;
      v98 = 0;
      v6 = 0;
      v24 = 1;
      goto LABEL_110;
    }
    v252 = v19;
    v253 = v11;
    v254 = v13;
    if (!v5)
    {
      v25 = 0;
      v98 = 0;
      v6 = 0;
      v24 = 1;
      goto LABEL_441;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v97 + 16))(v97, v6);
    v25 = 0;
    v6 = (WTF::StringImpl *)*v2;
    v5 = v2[1];
    v24 = 1;
    v22 = v2[2];
    v13 = v254;
    v11 = v253;
    v19 = v252;
LABEL_16:
    v26 = v22 - (_QWORD)v6;
    if (v5 <= v26)
    {
      v252 = v19;
      v253 = v11;
      v254 = v13;
      v98 = 0;
      v269 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v5 && v269)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v269 + 16))(v269);
        v6 = (WTF::StringImpl *)*v2;
        v98 = v2[1];
      }
      else
      {
        v6 = 0;
      }
LABEL_441:
      v13 = v254;
      v11 = v253;
      v19 = v252;
LABEL_110:
      *v2 = 0;
      v2[1] = 0;
      v99 = v2[3];
      if (v99)
      {
        v249 = v19;
        v250 = v11;
        v251 = v13;
        if (v98)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v99 + 16))(v99, v6, v98);
          LODWORD(v29) = 0;
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
          LODWORD(v29) = 0;
        }
        v13 = v251;
        v11 = v250;
        v19 = v249;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        LODWORD(v29) = 0;
      }
      goto LABEL_112;
    }
    v27 = (unsigned __int8 *)v6 + v26;
    v28 = (uint64_t)v6 + v26 + 1;
    v2[2] = v28;
    if (!v6)
    {
      v98 = v5;
      goto LABEL_110;
    }
    LODWORD(v29) = *v27;
    if (v29 < 2)
    {
      v30 = 0;
      v31 = 1;
      goto LABEL_20;
    }
LABEL_112:
    *v2 = 0;
    v2[1] = 0;
    v100 = v2[3];
    if (!v100)
    {
      v31 = 0;
      v101 = 0;
      v6 = 0;
      v30 = 1;
      goto LABEL_114;
    }
    v298 = v11;
    v302 = v19;
    v248 = v13;
    if (!v5)
    {
      v31 = 0;
      v101 = 0;
      v6 = 0;
      v30 = 1;
      goto LABEL_445;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v100 + 16))(v100, v6);
    v31 = 0;
    v6 = (WTF::StringImpl *)*v2;
    v5 = v2[1];
    v30 = 1;
    v28 = v2[2];
    v13 = v248;
    v11 = v298;
    v19 = v302;
LABEL_20:
    v32 = v28 - (_QWORD)v6;
    if (v5 <= v32)
    {
      v298 = v11;
      v302 = v19;
      v248 = v13;
      v101 = 0;
      v270 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v5 && v270)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v270 + 16))(v270);
        v6 = (WTF::StringImpl *)*v2;
        v101 = v2[1];
      }
      else
      {
        v6 = 0;
      }
LABEL_445:
      v13 = v248;
      v11 = v298;
      v19 = v302;
LABEL_114:
      *v2 = 0;
      v2[1] = 0;
      v102 = v2[3];
      if (v102)
      {
        v297 = v11;
        v301 = v19;
        v293 = v13;
        if (v101)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v102 + 16))(v102, v6, v101);
          v34 = 0;
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v34 = 0;
        }
        v13 = v293;
        v11 = v297;
        v19 = v301;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v34 = 0;
      }
LABEL_116:
      *v2 = 0;
      v2[1] = 0;
      v103 = v2[3];
      if (!v103)
      {
        v6 = 0;
        v39 = 0;
        v36 = 0;
        v13 = 0;
        v38 = 0;
        v37 = 1;
        goto LABEL_29;
      }
      v296 = v11;
      v300 = v19;
      v292 = v13;
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v103 + 16))(v103, v6);
        v39 = *v2;
        if (*v2)
        {
          v13 = v292;
          v36 = v296;
          v19 = v300;
          if (v296)
            goto LABEL_521;
          v35 = 1;
          v6 = (WTF::StringImpl *)*v2;
          if (v18)
            goto LABEL_521;
          goto LABEL_25;
        }
        v6 = 0;
      }
      else
      {
        v6 = 0;
        v39 = 0;
      }
      v36 = 0;
      v13 = 0;
      v38 = 0;
      v37 = 1;
      v19 = v300;
      goto LABEL_29;
    }
    v33 = (unsigned __int8 *)v6 + v32;
    v2[2] = (uint64_t)(v33 + 1);
    if (!v6)
    {
      v101 = v5;
      goto LABEL_114;
    }
    v34 = *v33;
    if (v34 > 1)
      goto LABEL_116;
    if ((v11 & 1) != 0)
      goto LABEL_521;
    v35 = 0;
    v36 = 1;
    if (v18)
      goto LABEL_521;
LABEL_25:
    if (v24 || v30 || v35)
      goto LABEL_521;
    v37 = 0;
    v38 = 1;
    v39 = (uint64_t)v6;
LABEL_29:
    v40 = (v36 & (v34 != 0)) == 0;
    v41 = 0x100000000;
    if (v40)
      v41 = 0;
    v42 = v41 & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v38 & 1) << 40);
    v43 = 0x1000000;
    if ((v31 & ((_DWORD)v29 != 0)) == 0)
      v43 = 0;
    v44 = 0x10000;
    if ((v25 & (v23 != 0)) == 0)
      v44 = 0;
    v45 = v42 | v44 | v43;
    v46 = 256;
    if ((v19 & ((_DWORD)v17 != 0)) == 0)
      v46 = 0;
    v47 = v45 | v46 | v13;
    v48 = v2[1];
    if ((*(_QWORD *)&v38 & 0xFFFFFFLL) == 0)
    {
      *v2 = 0;
      v2[1] = 0;
      v104 = v2[3];
      if (!v104 || !v48)
      {
        v6 = 0;
        v48 = 0;
LABEL_120:
        *v2 = 0;
        v2[1] = 0;
        v105 = v2[3];
        if (v105)
        {
          if (v48)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v105 + 16))(v105, v6);
            v106 = *v2;
            v48 = v2[1];
          }
          else
          {
            v106 = 0;
          }
        }
        else
        {
          v106 = 0;
          v48 = 0;
        }
LABEL_122:
        *v2 = 0;
        v2[1] = 0;
        v107 = v2[3];
        if (v107)
        {
          if (v48)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v106);
            v6 = (WTF::StringImpl *)*v2;
            v48 = v2[1];
          }
          else
          {
            v6 = 0;
          }
        }
        else
        {
          v6 = 0;
          v48 = 0;
        }
        goto LABEL_124;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v39);
      v6 = (WTF::StringImpl *)*v2;
      v48 = v2[1];
    }
    if (v48 <= v2[2] - (uint64_t)v6)
      goto LABEL_120;
    v49 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v49 + 1);
    if (!v6)
    {
      v106 = 0;
      goto LABEL_122;
    }
    v291 = *v49;
    if (v291 < 4)
    {
      v50 = 0;
      goto LABEL_43;
    }
LABEL_124:
    *v2 = 0;
    v2[1] = 0;
    v108 = v2[3];
    if (v108 && v48)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v108 + 16))(v108, v6);
    LOBYTE(v291) = 0;
    v50 = 1;
LABEL_43:
    IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v423, v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v420, v2);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v412, v2);
    IPC::Decoder::decode<WTF::String>(v2, &v410);
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v51, (uint64_t)&v407);
    v5 = v2[1];
    v52 = *v2;
    v53 = v2[2] - *v2;
    if (v5 <= v53)
    {
      v109 = 0;
      v110 = 0;
      *v2 = 0;
      v2[1] = 0;
      v111 = v2[3];
      if (v111)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
          v110 = *v2;
          v109 = v2[1];
        }
        else
        {
          v109 = 0;
          v110 = 0;
        }
      }
      goto LABEL_127;
    }
    v54 = (unsigned __int8 *)(v52 + v53);
    v2[2] = (uint64_t)(v54 + 1);
    if (!v52)
    {
      v109 = v5;
      v110 = 0;
LABEL_127:
      v5 = 0;
      v52 = 0;
      *v2 = 0;
      v2[1] = 0;
      v112 = v2[3];
      if (v112)
      {
        if (v109)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v112 + 16))(v112, v110, v109);
          v52 = *v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v52 = 0;
        }
      }
      goto LABEL_128;
    }
    v55 = *v54;
    if (v55 < 2)
    {
      v56 = 0;
      v290 = v55 != 0;
      goto LABEL_47;
    }
LABEL_128:
    v113 = 0;
    *v2 = 0;
    v2[1] = 0;
    v114 = v2[3];
    if (v114)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v52);
        v113 = v2[1];
      }
      else
      {
        v113 = 0;
      }
    }
    v115 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v116 = v2[3];
    if (!v116 || !v113)
    {
      v290 = 0;
      v5 = 0;
      v6 = (WTF::StringImpl *)*v2;
      LODWORD(v56) = 1;
LABEL_131:
      *v2 = 0;
      v2[1] = 0;
      v117 = v2[3];
      if (v117)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v117 + 16))(v117, v6);
          v118 = *v2;
          v5 = v2[1];
        }
        else
        {
          v118 = 0;
        }
      }
      else
      {
        v118 = 0;
        v5 = 0;
      }
      goto LABEL_133;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v115, v113);
    v290 = 0;
    v5 = v2[1];
    v56 = 1;
LABEL_47:
    v6 = (WTF::StringImpl *)*v2;
    v57 = v2[2] - *v2;
    if (v5 <= v57)
      goto LABEL_131;
    v58 = (unsigned __int8 *)v6 + v57;
    v2[2] = (uint64_t)(v58 + 1);
    if (!v6)
    {
      v118 = 0;
LABEL_133:
      *v2 = 0;
      v2[1] = 0;
      v119 = v2[3];
      if (v119)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 16))(v119, v118);
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v6 = 0;
        }
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
LABEL_135:
      *v2 = 0;
      v2[1] = 0;
      v120 = v2[3];
      if (v120 && v5)
        goto LABEL_137;
      goto LABEL_393;
    }
    if (*v58 >= 2u)
      goto LABEL_135;
    if (!*v58)
    {
      LOBYTE(v305) = 0;
      LOBYTE(v319) = 0;
      LOBYTE(v320) = 1;
      goto LABEL_241;
    }
    if (v5 <= v58 + 1 - (unsigned __int8 *)v6)
    {
      v121 = 0;
      v122 = 0;
      *v2 = 0;
      v2[1] = 0;
      v123 = v2[3];
      if (v123)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 16))(v123);
        v121 = 0;
        v274 = *v2;
        v275 = v2[1];
        v276 = v2[3];
        *v2 = 0;
        v2[1] = 0;
        v122 = 0;
        if (v276)
        {
          if (v275)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v276 + 16))(v276, v274);
            v122 = *v2;
            v121 = v2[1];
          }
        }
      }
    }
    else
    {
      v2[2] = (uint64_t)(v58 + 2);
      v59 = v58[1];
      if (v59 < 2)
      {
        v60 = 0;
        v299 = v59 != 0;
        goto LABEL_54;
      }
      v121 = v5;
      v122 = (uint64_t)v6;
    }
    *v2 = 0;
    v2[1] = 0;
    v124 = v2[3];
    if (v124 && v121)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v124 + 16))(v124, v122, v121);
      v299 = 0;
      v271 = v2[3];
      v272 = *v2;
      v273 = v2[1];
      v60 = 1;
      *v2 = 0;
      v2[1] = 0;
      if (v271 && v273)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v271 + 16))(v271, v272);
        v299 = 0;
      }
    }
    else
    {
      v299 = 0;
      v60 = 1;
    }
LABEL_54:
    IPC::Decoder::decode<WTF::String>(v2, &v375);
    IPC::Decoder::decode<WTF::String>(v2, &v447);
    IPC::Decoder::decode<WTF::String>(v2, &v445);
    IPC::Decoder::decode<WTF::String>(v2, &v443);
    v61 = v2[1];
    v62 = *v2;
    v63 = v2[2] - *v2;
    if (v61 <= v63)
    {
      v125 = 0;
      v126 = 0;
      *v2 = 0;
      v2[1] = 0;
      v127 = v2[3];
      if (v127)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v127 + 16))(v127);
          v126 = *v2;
          v125 = v2[1];
        }
        else
        {
          v125 = 0;
          v126 = 0;
        }
      }
      goto LABEL_142;
    }
    v64 = (unsigned __int8 *)(v62 + v63);
    v2[2] = (uint64_t)(v64 + 1);
    if (!v62)
    {
      v125 = v61;
      v126 = 0;
LABEL_142:
      *v2 = 0;
      v2[1] = 0;
      v128 = v2[3];
      if (v128 && v125)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v126, v125);
        v65 = 0;
        v62 = *v2;
        v61 = v2[1];
      }
      else
      {
        v61 = 0;
        v62 = 0;
        v65 = 0;
      }
      goto LABEL_144;
    }
    v65 = *v64;
    if (v65 < 2)
    {
      v66 = 0;
      v67 = 1;
      goto LABEL_58;
    }
LABEL_144:
    *v2 = 0;
    v2[1] = 0;
    v129 = v2[3];
    if (v129 && v61)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v62);
    v67 = 0;
    v66 = 1;
LABEL_58:
    if (!v65)
      v67 = 0;
    v295 = v67;
    IPC::Decoder::decode<WTF::String>(v2, &v441);
    IPC::Decoder::decode<WTF::String>(v2, &v439);
    v68 = v2[1];
    v69 = (WTF::StringImpl *)*v2;
    v70 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v68 < v70 || v68 - v70 <= 7)
    {
      v130 = 0;
      v131 = 0;
      *v2 = 0;
      v2[1] = 0;
      v132 = v2[3];
      if (v132)
      {
        if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
          v131 = *v2;
          v130 = v2[1];
        }
        else
        {
          v130 = 0;
          v131 = 0;
        }
      }
LABEL_147:
      *v2 = 0;
      v2[1] = 0;
      v133 = v2[3];
      if (v133 && v130)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v131);
      LOBYTE(v379) = 0;
      v381 = 0;
LABEL_186:
      v148 = *v2;
      v149 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v150 = v2[3];
      if (v150 && v149)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v148);
      goto LABEL_187;
    }
    v71 = (unint64_t *)((char *)v69 + v70);
    v2[2] = (uint64_t)(v71 + 1);
    if (!v69)
    {
      v130 = v68;
      v131 = 0;
      goto LABEL_147;
    }
    v29 = *v71;
    v360 = 0;
    v359 = 0;
    if (v29 >= 0x5555)
    {
      v65 = 48;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplePayInstallmentItem>((uint64_t)v364, v2);
        if (!(_BYTE)v368)
        {
LABEL_185:
          LOBYTE(v379) = 0;
          v381 = 0;
          WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v359, v69);
          goto LABEL_186;
        }
        if (HIDWORD(v360) != (_DWORD)v360)
          break;
        WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayInstallmentItem>((unsigned int *)&v359, (unint64_t)v364);
        if ((_BYTE)v368)
          goto LABEL_155;
LABEL_175:
        if (!--v29)
        {
          v65 = HIDWORD(v360);
          v17 = v359;
          if (v360 > HIDWORD(v360))
          {
            v146 = v359;
            if (HIDWORD(v360))
            {
              if (HIDWORD(v360) >= 0x5555556)
              {
                __break(0xC471u);
                JUMPOUT(0x196E0B474);
              }
              LODWORD(v29) = 48 * HIDWORD(v360);
              v147 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v360)));
              LODWORD(v360) = v29 / 0x30;
              v359 = v147;
              v146 = v17;
              if (v147 != v17)
              {
                WTF::VectorMover<false,WebCore::ApplePayInstallmentItem>::move(v17, (WTF::StringImpl *)((char *)v17 + 48 * v65), (uint64_t)v147);
                v146 = v359;
              }
            }
            if (v17)
            {
              if (v146 == v17)
              {
                v359 = 0;
                LODWORD(v360) = 0;
              }
              WTF::fastFree(v17, v69);
              v17 = v359;
            }
            else
            {
              v17 = v146;
            }
          }
          v359 = 0;
          v379 = v17;
          v247 = v360;
          v360 = 0;
          v380 = v247;
          goto LABEL_96;
        }
      }
      v134 = HIDWORD(v360) + 1;
      v135 = (BOOL *)v359 + 48 * HIDWORD(v360);
      *v135 = v364[0];
      v136 = v365;
      *(_QWORD *)&v365 = 0;
      *((_QWORD *)v135 + 1) = v136;
      v137 = *((_QWORD *)&v365 + 1);
      *((_QWORD *)&v365 + 1) = 0;
      *((_QWORD *)v135 + 2) = v137;
      v138 = v366;
      *(_QWORD *)&v366 = 0;
      *((_QWORD *)v135 + 3) = v138;
      v139 = *((_QWORD *)&v366 + 1);
      *((_QWORD *)&v366 + 1) = 0;
      *((_QWORD *)v135 + 4) = v139;
      v140 = v367;
      v367 = 0;
      *((_QWORD *)v135 + 5) = v140;
      HIDWORD(v360) = v134;
LABEL_155:
      v141 = v367;
      v367 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
          WTF::StringImpl::destroy(v141, v69);
        else
          *(_DWORD *)v141 -= 2;
      }
      v142 = (WTF::StringImpl *)*((_QWORD *)&v366 + 1);
      *((_QWORD *)&v366 + 1) = 0;
      if (v142)
      {
        if (*(_DWORD *)v142 == 2)
          WTF::StringImpl::destroy(v142, v69);
        else
          *(_DWORD *)v142 -= 2;
      }
      v143 = (WTF::StringImpl *)v366;
      *(_QWORD *)&v366 = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
          WTF::StringImpl::destroy(v143, v69);
        else
          *(_DWORD *)v143 -= 2;
      }
      v144 = (WTF::StringImpl *)*((_QWORD *)&v365 + 1);
      *((_QWORD *)&v365 + 1) = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
          WTF::StringImpl::destroy(v144, v69);
        else
          *(_DWORD *)v144 -= 2;
      }
      v145 = (WTF::StringImpl *)v365;
      *(_QWORD *)&v365 = 0;
      if (v145)
      {
        if (*(_DWORD *)v145 == 2)
          WTF::StringImpl::destroy(v145, v69);
        else
          *(_DWORD *)v145 -= 2;
      }
      goto LABEL_175;
    }
    if (v29)
    {
      v17 = (WTF::StringImpl *)(48 * v29);
      v72 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * v29));
      LODWORD(v360) = 48 * (int)v29 / 0x30u;
      v359 = v72;
      v65 = 48;
      while (1)
      {
        IPC::Decoder::decode<WebCore::ApplePayInstallmentItem>((uint64_t)v364, v2);
        if (!(_BYTE)v368)
          goto LABEL_185;
        if (HIDWORD(v360) != (_DWORD)v360)
          break;
        WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayInstallmentItem>((unsigned int *)&v359, (unint64_t)v364);
        if ((_BYTE)v368)
          goto LABEL_71;
LABEL_91:
        if (!--v29)
        {
          v85 = v359;
          v86 = v360;
          goto LABEL_95;
        }
      }
      v73 = HIDWORD(v360) + 1;
      v74 = (BOOL *)v359 + 48 * HIDWORD(v360);
      *v74 = v364[0];
      v75 = v365;
      *(_QWORD *)&v365 = 0;
      *((_QWORD *)v74 + 1) = v75;
      v76 = *((_QWORD *)&v365 + 1);
      *((_QWORD *)&v365 + 1) = 0;
      *((_QWORD *)v74 + 2) = v76;
      v77 = v366;
      *(_QWORD *)&v366 = 0;
      *((_QWORD *)v74 + 3) = v77;
      v78 = *((_QWORD *)&v366 + 1);
      *((_QWORD *)&v366 + 1) = 0;
      *((_QWORD *)v74 + 4) = v78;
      v79 = v367;
      v367 = 0;
      *((_QWORD *)v74 + 5) = v79;
      HIDWORD(v360) = v73;
LABEL_71:
      v80 = v367;
      v367 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v69);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = (WTF::StringImpl *)*((_QWORD *)&v366 + 1);
      *((_QWORD *)&v366 + 1) = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v69);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = (WTF::StringImpl *)v366;
      *(_QWORD *)&v366 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v69);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = (WTF::StringImpl *)*((_QWORD *)&v365 + 1);
      *((_QWORD *)&v365 + 1) = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v69);
        else
          *(_DWORD *)v83 -= 2;
      }
      v84 = (WTF::StringImpl *)v365;
      *(_QWORD *)&v365 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v69);
        else
          *(_DWORD *)v84 -= 2;
      }
      goto LABEL_91;
    }
    v85 = 0;
    v86 = 0;
LABEL_95:
    v359 = 0;
    v379 = v85;
    v360 = 0;
    v380 = v86;
LABEL_96:
    v381 = 1;
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v359, v69);
LABEL_187:
    IPC::Decoder::decode<WTF::String>(v2, &v359);
    v5 = v2[1];
    v6 = (WTF::StringImpl *)*v2;
    v151 = v2[2] - *v2;
    v289 = v47;
    v287 = v50;
    v288 = v37;
    v286 = v56;
    if (v5 <= v151)
    {
      v224 = 0;
      v225 = 0;
      *v2 = 0;
      v2[1] = 0;
      v226 = v2[3];
      if (v226)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v226 + 16))(v226);
          v225 = *v2;
          v224 = v2[1];
        }
        else
        {
          v224 = 0;
          v225 = 0;
        }
      }
      goto LABEL_379;
    }
    v152 = (unsigned __int8 *)v6 + v151;
    v2[2] = (uint64_t)(v152 + 1);
    if (!v6)
    {
      v224 = v5;
      v225 = 0;
LABEL_379:
      v5 = 0;
      v6 = 0;
      *v2 = 0;
      v2[1] = 0;
      v227 = v2[3];
      if (v227)
      {
        if (v224)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v227 + 16))(v227, v225, v224);
          v6 = (WTF::StringImpl *)*v2;
          v5 = v2[1];
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
      goto LABEL_380;
    }
    LODWORD(v29) = *v152;
    if (v29 <= 3)
    {
      v153 = v29 | 0x100;
      if ((_DWORD)v60)
        goto LABEL_521;
      goto LABEL_191;
    }
LABEL_380:
    *v2 = 0;
    v2[1] = 0;
    v228 = v2[3];
    if (!v228 || !v5 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v228 + 16))(v228, v6), !*v2))
    {
      v299 = 0;
      LOBYTE(v384) = 0;
      v393 = 0;
      v285 = 1;
      goto LABEL_202;
    }
    LOBYTE(v29) = 0;
    v153 = 0;
    if ((_DWORD)v60)
      goto LABEL_521;
LABEL_191:
    v364[0] = v299;
    if (!(_BYTE)v376)
      goto LABEL_521;
    v154 = v375;
    v375 = 0;
    *(_QWORD *)&v365 = v154;
    if (!v448)
      goto LABEL_521;
    v155 = v447;
    v447 = 0;
    *((_QWORD *)&v365 + 1) = v155;
    if (!v446)
      goto LABEL_521;
    v60 = (uint64_t)v445;
    v445 = 0;
    *(_QWORD *)&v366 = v60;
    if (!v444)
      goto LABEL_521;
    v56 = (uint64_t)v443;
    v443 = 0;
    *((_QWORD *)&v366 + 1) = v56;
    if ((_DWORD)v66)
      goto LABEL_521;
    LOBYTE(v367) = v295;
    if (!v442)
      goto LABEL_521;
    v66 = (uint64_t)v441;
    v441 = 0;
    *(_QWORD *)&v368 = v66;
    if (!v440)
      goto LABEL_521;
    v47 = (uint64_t)v439;
    v439 = 0;
    *((_QWORD *)&v368 + 1) = v47;
    if (!v381)
      goto LABEL_521;
    v17 = v379;
    v379 = 0;
    v369 = v17;
    v37 = v380;
    v65 = HIDWORD(v380);
    v380 = 0;
    v370 = __PAIR64__(v65, v37);
    if (!(_BYTE)v360)
      goto LABEL_521;
    v50 = (uint64_t)v359;
    v359 = 0;
    v371 = v50;
    if (v153 <= 0xFF)
      goto LABEL_521;
    v372 = v29;
    LOBYTE(v384) = v299;
    v365 = 0u;
    v283 = v155;
    v284 = v154;
    *(_QWORD *)&v385 = v154;
    *((_QWORD *)&v385 + 1) = v155;
    v366 = 0u;
    *(_QWORD *)&v386 = v60;
    *((_QWORD *)&v386 + 1) = v56;
    v387 = v295;
    v368 = 0u;
    *(_QWORD *)&v388 = v66;
    *((_QWORD *)&v388 + 1) = v47;
    v369 = 0;
    v389 = v17;
    v370 = 0;
    v390 = __PAIR64__(v65, v37);
    v371 = 0;
    v391 = v50;
    v392 = v29;
    v393 = 1;
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v364, v6);
    v285 = 0;
LABEL_202:
    if ((_BYTE)v360)
    {
      v156 = v359;
      v359 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
          WTF::StringImpl::destroy(v156, v6);
        else
          *(_DWORD *)v156 -= 2;
      }
    }
    if (v381)
      WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v379, v6);
    if (v440)
    {
      v157 = v439;
      v439 = 0;
      if (v157)
      {
        if (*(_DWORD *)v157 == 2)
          WTF::StringImpl::destroy(v157, v6);
        else
          *(_DWORD *)v157 -= 2;
      }
    }
    if (v442)
    {
      v158 = v441;
      v441 = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
          WTF::StringImpl::destroy(v158, v6);
        else
          *(_DWORD *)v158 -= 2;
      }
    }
    if (v444)
    {
      v159 = v443;
      v443 = 0;
      if (v159)
      {
        if (*(_DWORD *)v159 == 2)
          WTF::StringImpl::destroy(v159, v6);
        else
          *(_DWORD *)v159 -= 2;
      }
    }
    if (v446)
    {
      v160 = v445;
      v445 = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2)
          WTF::StringImpl::destroy(v160, v6);
        else
          *(_DWORD *)v160 -= 2;
      }
    }
    if (v448)
    {
      v161 = v447;
      v447 = 0;
      if (v161)
      {
        if (*(_DWORD *)v161 == 2)
          WTF::StringImpl::destroy(v161, v6);
        else
          *(_DWORD *)v161 -= 2;
      }
    }
    if ((_BYTE)v376)
    {
      v162 = v375;
      v375 = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 2)
          WTF::StringImpl::destroy(v162, v6);
        else
          *(_DWORD *)v162 -= 2;
      }
    }
    if (!v285)
    {
      LOBYTE(v305) = v299;
      v385 = 0u;
      v306 = v284;
      v307 = v283;
      v386 = 0u;
      v308 = v60;
      v309 = v56;
      LOBYTE(v310) = v295;
      v388 = 0u;
      v311 = v66;
      v312 = v47;
      v389 = 0;
      v313 = v17;
      v390 = 0;
      v314 = __PAIR64__(v65, v37);
      v391 = 0;
      v315 = v50;
      LOBYTE(v316) = v29;
      LOBYTE(v319) = 1;
      LOBYTE(v320) = 1;
      WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v384, v6);
      v47 = v289;
      LODWORD(v50) = v287;
      v37 = v288;
      LODWORD(v56) = v286;
      goto LABEL_241;
    }
    v6 = (WTF::StringImpl *)*v2;
    v245 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v120 = v2[3];
    v47 = v289;
    LODWORD(v50) = v287;
    v37 = v288;
    LODWORD(v56) = v286;
    if (v120 && v245)
LABEL_137:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v120 + 16))(v120, v6);
LABEL_393:
    LOBYTE(v305) = 0;
    LOBYTE(v320) = 0;
    v6 = (WTF::StringImpl *)*v2;
    v5 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v246 = v2[3];
    if (v246 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v246 + 16))(v246, v6);
LABEL_241:
    if (*v2)
    {
      if (!(_BYTE)v320)
        goto LABEL_521;
      WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration();
      v396[0] = 0;
      v405 = 0;
      if (v393)
      {
        v396[0] = v384;
        v163 = v385;
        v385 = 0u;
        v164 = v386;
        v386 = 0u;
        v397 = v163;
        v398 = v164;
        v399 = v387;
        v165 = v388;
        v388 = 0u;
        v400 = v165;
        v166 = v389;
        v389 = 0;
        v401 = v166;
        *(_QWORD *)&v165 = v390;
        v390 = 0;
        v402 = v165;
        v167 = v391;
        v391 = 0;
        v403 = v167;
        v404 = v392;
        v405 = 1;
        v406 = 1;
        WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v384, v6);
      }
      else
      {
        v406 = 1;
      }
    }
    else
    {
      v396[0] = 0;
      v406 = 0;
    }
    if ((_BYTE)v320 && (_BYTE)v319)
      WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v305, v6);
    v168 = v2[1];
    if (!v406)
    {
      v212 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v213 = v2[3];
      if (!v213 || !v168)
      {
        v168 = 0;
        v169 = *v2;
LABEL_369:
        v214 = 0;
        v215 = 0;
        *v2 = 0;
        v2[1] = 0;
        v216 = v2[3];
        if (v216)
        {
          if (v168)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(v216, v169);
            v215 = *v2;
            v214 = v2[1];
          }
          else
          {
            v214 = 0;
            v215 = 0;
          }
        }
        goto LABEL_370;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v213 + 16))(v213, v212);
      v168 = v2[1];
    }
    v169 = *v2;
    v170 = v2[2] - *v2;
    if (v168 <= v170)
      goto LABEL_369;
    v171 = (unsigned __int8 *)(v169 + v170);
    v2[2] = (uint64_t)(v171 + 1);
    if (!v169)
    {
      v214 = v168;
      v215 = 0;
LABEL_370:
      v168 = 0;
      v169 = 0;
      *v2 = 0;
      v2[1] = 0;
      v217 = v2[3];
      if (v217)
      {
        if (v214)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v217 + 16))(v217, v215, v214);
          v169 = *v2;
          v168 = v2[1];
        }
        else
        {
          v168 = 0;
          v169 = 0;
        }
      }
LABEL_371:
      *v2 = 0;
      v2[1] = 0;
      v218 = v2[3];
      if (v218 && v168)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v169);
      v174 = 0;
      goto LABEL_385;
    }
    if (*v171 >= 2u)
      goto LABEL_371;
    if (!*v171)
    {
      v174 = 0;
      v173 = 0;
      goto LABEL_258;
    }
    if (v168 <= (unint64_t)&v171[-v169 + 1])
    {
      v229 = 0;
      v230 = 0;
      *v2 = 0;
      v2[1] = 0;
      v231 = v2[3];
      if (v231)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v231 + 16))(v231);
        v229 = 0;
        v277 = *v2;
        v278 = v2[1];
        v279 = v2[3];
        *v2 = 0;
        v2[1] = 0;
        v230 = 0;
        if (v279)
        {
          if (v278)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v279 + 16))(v279, v277);
            v230 = *v2;
            v229 = v2[1];
          }
        }
      }
    }
    else
    {
      v2[2] = (uint64_t)(v171 + 2);
      v172 = v171[1];
      if (v172 < 3)
      {
        v173 = 0;
        v174 = v172 | 0x100;
        goto LABEL_258;
      }
      v229 = v168;
      v230 = v169;
    }
    *v2 = 0;
    v2[1] = 0;
    v232 = v2[3];
    if (v232 && v229)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v232 + 16))(v232, v230, v229);
    v174 = 256;
LABEL_385:
    v233 = *v2;
    v234 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v235 = v2[3];
    if (v235 && v234)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v235 + 16))(v235, v233);
    v173 = 1;
LABEL_258:
    v175 = IPC::Decoder::decode<std::optional<BOOL>>(v2);
    IPC::Decoder::decode<WTF::String>(v2, &v447);
    IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)&v384, v2);
    IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)&v379, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v375, v2);
    IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v364, v2);
    IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)&v359, (char **)v2);
    v176 = v2[1];
    v177 = *v2;
    v178 = v2[2] - *v2;
    if (v176 <= v178)
    {
      v219 = 0;
      v220 = 0;
      *v2 = 0;
      v2[1] = 0;
      v221 = v2[3];
      if (v221)
      {
        if (v176)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
          v220 = *v2;
          v219 = v2[1];
        }
        else
        {
          v219 = 0;
          v220 = 0;
        }
      }
      goto LABEL_374;
    }
    v179 = (unsigned __int8 *)(v177 + v178);
    v2[2] = (uint64_t)(v179 + 1);
    if (!v177)
    {
      v219 = v176;
      v220 = 0;
LABEL_374:
      v176 = 0;
      v177 = 0;
      *v2 = 0;
      v2[1] = 0;
      v222 = v2[3];
      if (v222)
      {
        if (v219)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v222 + 16))(v222, v220, v219);
          v177 = *v2;
          v176 = v2[1];
        }
        else
        {
          v176 = 0;
          v177 = 0;
        }
      }
LABEL_375:
      *v2 = 0;
      v2[1] = 0;
      v223 = v2[3];
      if (v223 && v176)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v223 + 16))(v223, v177);
      v182 = 0;
      goto LABEL_390;
    }
    if (*v179 >= 2u)
      goto LABEL_375;
    if (!*v179)
    {
      v182 = 0;
      v181 = 0;
      goto LABEL_266;
    }
    if (v176 <= (unint64_t)&v179[-v177 + 1])
    {
      v236 = v56;
      v237 = v50;
      v238 = 0;
      v239 = 0;
      *v2 = 0;
      v2[1] = 0;
      v240 = v2[3];
      if (v240)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 16))(v240);
        v238 = 0;
        v280 = *v2;
        v281 = v2[1];
        v282 = v2[3];
        *v2 = 0;
        v2[1] = 0;
        v239 = 0;
        if (v282)
        {
          if (v281)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v282 + 16))(v282, v280);
            v239 = *v2;
            v238 = v2[1];
          }
        }
      }
    }
    else
    {
      v2[2] = (uint64_t)(v179 + 2);
      v180 = v179[1];
      if (v180 < 3)
      {
        v181 = 0;
        v182 = v180 | 0x100;
        goto LABEL_266;
      }
      v236 = v56;
      v237 = v50;
      v238 = v176;
      v239 = v177;
    }
    *v2 = 0;
    v2[1] = 0;
    v241 = v2[3];
    if (v241 && v238)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v241 + 16))(v241, v239, v238);
    v182 = 256;
    LODWORD(v50) = v237;
    LODWORD(v56) = v236;
LABEL_390:
    v242 = *v2;
    v243 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v244 = v2[3];
    if (v244 && v243)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v244 + 16))(v244, v242);
    v181 = 1;
LABEL_266:
    IPC::Decoder::decode<WTF::String>(v2, &v445);
    if (!*v2)
    {
      *(_BYTE *)v294 = 0;
      *((_BYTE *)v294 + 896) = 0;
      goto LABEL_306;
    }
    if (v438)
    {
      if (v436)
      {
        if (BYTE5(v304))
        {
          if (v434)
          {
            if (BYTE5(v303))
            {
              if (v431)
              {
                if (v428)
                {
                  if (!v37 && !(_DWORD)v50)
                  {
                    if (v425)
                    {
                      if (v422)
                      {
                        if (v419)
                        {
                          if (v411)
                          {
                            v183 = v410;
                            v410 = 0;
                            if (v409)
                            {
                              if (!(_DWORD)v56)
                              {
                                if (v406)
                                {
                                  if (!v173 && (v175 & 0xFF0000) != 0)
                                  {
                                    if (v448)
                                    {
                                      v2 = (uint64_t *)v447;
                                      v447 = 0;
                                      if (v395)
                                      {
                                        if (v383 && v378 && v374 && v363 && !v181 && v446)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_521:
    __break(1u);
LABEL_522:
    v87 = v5;
    v88 = (uint64_t)v6;
LABEL_98:
    *v2 = 0;
    v2[1] = 0;
    v90 = v2[3];
    if (v90 && v87)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v88, v87);
      v10 = 0;
      v6 = (WTF::StringImpl *)*v2;
      v5 = v2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v10 = 0;
    }
  }
  v305 = 0;
  v184 = v437;
  v437 = 0;
  v185 = v435;
  v435 = 0;
  v306 = v184;
  v307 = v185;
  LODWORD(v308) = v304;
  BYTE4(v308) = BYTE4(v304);
  v186 = MEMORY[0x1E0DD8F88] + 16;
  v309 = MEMORY[0x1E0DD8F88] + 16;
  v310 = v433;
  if (v433)
    CFRetain(v433);
  LODWORD(v311) = v303;
  BYTE4(v311) = BYTE4(v303);
  v312 = v186;
  v313 = v430;
  if (v430)
    CFRetain(v430);
  v187 = v426;
  v426 = 0;
  v314 = v187;
  v188 = v427;
  v427 = 0;
  v315 = v188;
  v316 = v47;
  v317 = BYTE4(v47);
  v318 = v291;
  v189 = v423;
  v423 = 0;
  v319 = v189;
  v190 = v424;
  v424 = 0;
  v320 = v190;
  v191 = v420;
  v420 = 0;
  v321 = v191;
  v192 = v421;
  v421 = 0;
  v322 = v192;
  v323 = v412[0];
  v193 = v413;
  v413 = 0uLL;
  v324 = v193;
  v326 = v415;
  v325 = v414;
  v194 = v417;
  v417 = 0;
  v327 = v416;
  v328 = v194;
  v329 = v418;
  v195 = v407;
  v407 = 0;
  v330 = v183;
  v331 = v195;
  *(_QWORD *)&v193 = v408;
  v408 = 0;
  v332 = v193;
  v333 = v290;
  v334 = 0;
  v343 = 0;
  if (v405)
  {
    v196 = v398;
    v335 = v397;
    v334 = v396[0];
    v397 = 0uLL;
    v398 = 0uLL;
    v336 = v196;
    v337 = v399;
    v197 = v400;
    v400 = 0uLL;
    v338 = v197;
    v198 = v401;
    v401 = 0;
    v339 = v198;
    v199 = v402;
    v402 = 0;
    v340 = v199;
    v200 = v403;
    v403 = 0;
    v341 = v200;
    v342 = v404;
    v343 = 1;
  }
  v344 = v174;
  v345 = v175;
  v346 = v2;
  std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v347, &v384);
  std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v348, (uint64_t)&v379);
  LOBYTE(v349) = 0;
  v351 = 0;
  if (v377)
  {
    v201 = v375;
    v375 = 0;
    v349 = v201;
    v202 = v376;
    v376 = 0;
    v350 = v202;
    v351 = 1;
  }
  std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v352, (uint64_t)v364);
  LOBYTE(v353) = 0;
  v356 = 0;
  if (v362)
  {
    v355 = 0;
    if (v361)
    {
      v203 = v359;
      v359 = 0;
      v353 = v203;
      v204 = v360;
      v360 = 0;
      v354 = v204;
      v355 = 1;
    }
    v356 = 1;
  }
  v357 = v182;
  v205 = v445;
  v445 = 0;
  v358 = v205;
  WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest(v294, (const WebCore::ApplePaySessionPaymentRequest *)&v305);
  *((_BYTE *)v294 + 896) = 1;
  MEMORY[0x19AEB36F0](&v305);
LABEL_306:
  if (v446)
  {
    v206 = v445;
    v445 = 0;
    if (v206)
    {
      if (*(_DWORD *)v206 == 2)
        WTF::StringImpl::destroy(v206, v6);
      else
        *(_DWORD *)v206 -= 2;
    }
  }
  if (v363 && v362 && v361 && v359)
    WTF::fastFree(v359, v6);
  if (v374 && v373)
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v364, v6);
  if (v378 && v377)
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v375, v6);
  if (v383 && v382)
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v379, v6);
  if (v395 && v394)
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v384, v6);
  if (v448)
  {
    v207 = v447;
    v447 = 0;
    if (v207)
    {
      if (*(_DWORD *)v207 == 2)
        WTF::StringImpl::destroy(v207, v6);
      else
        *(_DWORD *)v207 -= 2;
    }
  }
  if (v406 && v405)
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v396, v6);
  if (v409)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v407, v6);
  if (v411)
  {
    v208 = v410;
    v410 = 0;
    if (v208)
    {
      if (*(_DWORD *)v208 == 2)
        WTF::StringImpl::destroy(v208, v6);
      else
        *(_DWORD *)v208 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v412, v6);
  if (v422)
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v420, v209);
  if (v425)
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v423, v209);
  if (v428)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v426, v209);
  if (v431)
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v429);
  if (v434)
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v432);
  if (v436)
  {
    v210 = v435;
    v435 = 0;
    if (v210)
    {
      if (*(_DWORD *)v210 == 2)
        WTF::StringImpl::destroy(v210, (WTF::StringImpl *)v209);
      else
        *(_DWORD *)v210 -= 2;
    }
  }
  if (v438)
  {
    v211 = v437;
    v437 = 0;
    if (v211)
    {
      if (*(_DWORD *)v211 == 2)
        WTF::StringImpl::destroy(v211, (WTF::StringImpl *)v209);
      else
        *(_DWORD *)v211 -= 2;
    }
  }
}

void sub_196E0B498(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (LOBYTE(STACK[0x668]) && LOBYTE(STACK[0x660]))
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&STACK[0x600], a2);
  if (LOBYTE(STACK[0x680]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x670], a2);
  if (LOBYTE(STACK[0x690]))
  {
    v4 = (WTF::StringImpl *)STACK[0x688];
    STACK[0x688] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x698], a2);
  if (LOBYTE(STACK[0x700]))
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x6F0], v5);
  if (LOBYTE(STACK[0x718]))
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x708], v5);
  if (LOBYTE(STACK[0x730]))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x720], v5);
  if (*(_BYTE *)(v2 - 232))
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)(v2 - 248));
  if (*(_BYTE *)(v2 - 208))
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)(v2 - 224));
  if (*(_BYTE *)(v2 - 192))
  {
    v6 = *(WTF::StringImpl **)(v2 - 200);
    *(_QWORD *)(v2 - 200) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  if (*(_BYTE *)(v2 - 176))
  {
    v7 = *(WTF::StringImpl **)(v2 - 184);
    *(_QWORD *)(v2 - 184) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  char v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v44 = 0;
    v45 = 0;
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46)
    {
      v155 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
        a1 = v155;
        v45 = *v155;
        v44 = v155[1];
      }
      else
      {
        v44 = 0;
        v45 = 0;
      }
    }
    goto LABEL_40;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
    goto LABEL_109;
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (!v48)
    {
      v8 = 0;
      v2 = 0;
      v7 = 1;
      goto LABEL_44;
    }
    v139 = v6;
    v153 = a1;
    if (!v1)
    {
      v8 = 0;
      v48 = 0;
      v2 = 0;
      v7 = 1;
LABEL_44:
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49)
      {
        v126 = v8;
        v138 = v7;
        v152 = a1;
        if (v48)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v2, v48);
          v12 = 0;
          a1 = v152;
          v2 = *v152;
          v1 = v152[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          v12 = 0;
        }
        v8 = v126;
        v7 = v138;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v12 = 0;
      }
      goto LABEL_46;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v2);
    v8 = 0;
    a1 = v153;
    v2 = *v153;
    v1 = v153[1];
    v7 = 1;
    v5 = v153[2];
    v6 = v139;
LABEL_5:
    if (!v6)
      v8 = 0;
    v9 = v5 - v2;
    if (v1 <= v9)
    {
      v127 = v8;
      v140 = v7;
      v48 = 0;
      v57 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v156 = a1;
      if (v1 && v57)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        a1 = v156;
        v2 = *v156;
        v48 = v156[1];
      }
      else
      {
        v2 = 0;
      }
      v8 = v127;
      v7 = v140;
      goto LABEL_44;
    }
    v10 = (unsigned __int8 *)(v2 + v9);
    v11 = v2 + v9 + 1;
    a1[2] = v11;
    if (!v2)
    {
      v48 = v1;
      goto LABEL_44;
    }
    v12 = *v10;
    if (v12 < 2)
    {
      v13 = 0;
      v14 = 1;
      goto LABEL_11;
    }
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (!v50)
    {
      v14 = 0;
      v2 = 0;
      v13 = 1;
      goto LABEL_48;
    }
    v125 = v8;
    v137 = v7;
    v115 = v12;
    v151 = a1;
    if (!v1)
    {
      v14 = 0;
      v50 = 0;
      v2 = 0;
      v13 = 1;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      v51 = a1[3];
      if (v51)
      {
        v96 = v13;
        v105 = v14;
        v124 = v8;
        v136 = v7;
        v114 = v12;
        v150 = a1;
        if (v50)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v2, v50);
          v18 = 0;
          a1 = v150;
          v2 = *v150;
          v1 = v150[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          v18 = 0;
        }
        v12 = v114;
        v8 = v124;
        v7 = v136;
        v13 = v96;
        v14 = v105;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v18 = 0;
      }
      goto LABEL_50;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v2);
    v14 = 0;
    a1 = v151;
    v2 = *v151;
    v1 = v151[1];
    v13 = 1;
    v11 = v151[2];
    v12 = v115;
    v8 = v125;
    v7 = v137;
LABEL_11:
    v15 = v11 - v2;
    if (v1 <= v15)
    {
      v97 = v13;
      v106 = v14;
      v128 = v8;
      v141 = v7;
      v116 = v12;
      v50 = 0;
      v58 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v157 = a1;
      if (v1 && v58)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        a1 = v157;
        v2 = *v157;
        v50 = v157[1];
      }
      else
      {
        v2 = 0;
      }
      v12 = v116;
      v8 = v128;
      v7 = v141;
      v13 = v97;
      v14 = v106;
      goto LABEL_48;
    }
    v16 = (unsigned __int8 *)(v2 + v15);
    v17 = v2 + v15 + 1;
    a1[2] = v17;
    if (!v2)
    {
      v50 = v1;
      goto LABEL_48;
    }
    v18 = *v16;
    if (v18 < 2)
    {
      v19 = 0;
      v20 = 1;
      goto LABEL_15;
    }
LABEL_50:
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (!v52)
    {
      v20 = 0;
      v2 = 0;
      v19 = 1;
      goto LABEL_52;
    }
    v88 = v18;
    v95 = v13;
    v104 = v14;
    v123 = v8;
    v135 = v7;
    v113 = v12;
    v149 = a1;
    if (!v1)
    {
      v20 = 0;
      v52 = 0;
      v2 = 0;
      v19 = 1;
LABEL_52:
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53)
      {
        v75 = v19;
        v81 = v20;
        v87 = v18;
        v94 = v13;
        v103 = v14;
        v122 = v8;
        v134 = v7;
        v112 = v12;
        v148 = a1;
        if (v52)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v2, v52);
          v24 = 0;
          a1 = v148;
          v2 = *v148;
          v1 = v148[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          v24 = 0;
        }
        v12 = v112;
        v8 = v122;
        v7 = v134;
        v13 = v94;
        v14 = v103;
        v20 = v81;
        v18 = v87;
        v19 = v75;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v24 = 0;
      }
      goto LABEL_54;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v2);
    v20 = 0;
    a1 = v149;
    v2 = *v149;
    v1 = v149[1];
    v19 = 1;
    v17 = v149[2];
    v12 = v113;
    v8 = v123;
    v7 = v135;
    v13 = v95;
    v14 = v104;
    v18 = v88;
LABEL_15:
    v21 = v17 - v2;
    if (v1 <= v21)
    {
      v76 = v19;
      v82 = v20;
      v89 = v18;
      v98 = v13;
      v107 = v14;
      v129 = v8;
      v142 = v7;
      v117 = v12;
      v52 = 0;
      v59 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v158 = a1;
      if (v1 && v59)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
        a1 = v158;
        v2 = *v158;
        v52 = v158[1];
      }
      else
      {
        v2 = 0;
      }
      v12 = v117;
      v8 = v129;
      v7 = v142;
      v13 = v98;
      v14 = v107;
      v20 = v82;
      v18 = v89;
      v19 = v76;
      goto LABEL_52;
    }
    v22 = (unsigned __int8 *)(v2 + v21);
    v23 = v2 + v21 + 1;
    a1[2] = v23;
    if (!v2)
    {
      v52 = v1;
      goto LABEL_52;
    }
    v24 = *v22;
    if (v24 < 2)
    {
      v25 = 0;
      v26 = 1;
      goto LABEL_19;
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v54 = a1[3];
    if (!v54)
    {
      v26 = 0;
      v2 = 0;
      v25 = 1;
      goto LABEL_56;
    }
    v70 = v24;
    v74 = v19;
    v80 = v20;
    v86 = v18;
    v93 = v13;
    v102 = v14;
    v121 = v8;
    v133 = v7;
    v111 = v12;
    v147 = a1;
    if (!v1)
    {
      v26 = 0;
      v54 = 0;
      v2 = 0;
      v25 = 1;
LABEL_56:
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        v63 = v25;
        v66 = v26;
        v69 = v24;
        v73 = v19;
        v79 = v20;
        v85 = v18;
        v92 = v13;
        v101 = v14;
        v120 = v8;
        v132 = v7;
        v110 = v12;
        v146 = a1;
        if (v54)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v2, v54);
          LODWORD(v29) = 0;
          a1 = v146;
          v2 = *v146;
          v1 = v146[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          LODWORD(v29) = 0;
        }
        v12 = v110;
        v8 = v120;
        v7 = v132;
        v13 = v92;
        v14 = v101;
        v20 = v79;
        v18 = v85;
        v24 = v69;
        v19 = v73;
        v25 = v63;
        v26 = v66;
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      goto LABEL_58;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v2);
    v26 = 0;
    a1 = v147;
    v2 = *v147;
    v1 = v147[1];
    v25 = 1;
    v23 = v147[2];
    v12 = v111;
    v8 = v121;
    v7 = v133;
    v13 = v93;
    v14 = v102;
    v20 = v80;
    v18 = v86;
    v24 = v70;
    v19 = v74;
LABEL_19:
    v27 = v23 - v2;
    if (v1 <= v27)
    {
      v64 = v25;
      v67 = v26;
      v71 = v24;
      v77 = v19;
      v83 = v20;
      v90 = v18;
      v99 = v13;
      v108 = v14;
      v130 = v8;
      v143 = v7;
      v118 = v12;
      v54 = 0;
      v60 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v159 = a1;
      if (v1 && v60)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
        a1 = v159;
        v2 = *v159;
        v54 = v159[1];
      }
      else
      {
        v2 = 0;
      }
      v12 = v118;
      v8 = v130;
      v7 = v143;
      v13 = v99;
      v14 = v108;
      v20 = v83;
      v18 = v90;
      v24 = v71;
      v19 = v77;
      v25 = v64;
      v26 = v67;
      goto LABEL_56;
    }
    v28 = (unsigned __int8 *)(v2 + v27);
    a1[2] = v28 + 1;
    if (!v2)
    {
      v54 = v1;
      goto LABEL_56;
    }
    LODWORD(v29) = *v28;
    if (v29 <= 1)
    {
      if ((v7 & 1) != 0)
        goto LABEL_108;
      v30 = 0;
      LOBYTE(v31) = 1;
      if (v13)
        goto LABEL_108;
LABEL_24:
      if (!v19 && !v25 && !v30)
      {
        v32 = 1;
        goto LABEL_28;
      }
      goto LABEL_108;
    }
LABEL_58:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31)
    {
      v2 = 0;
      v8 = 0;
      v32 = 0;
      goto LABEL_28;
    }
    v61 = v29;
    v62 = v25;
    v65 = v26;
    v68 = v24;
    v72 = v19;
    v78 = v20;
    v84 = v18;
    v91 = v13;
    v100 = v14;
    v119 = v8;
    v131 = v7;
    v109 = v12;
    v145 = a1;
    if (!v1)
      break;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v2);
    v2 = *v145;
    if (!*v145)
      goto LABEL_65;
    a1 = v145;
    v12 = v109;
    v8 = v119;
    v14 = v100;
    v20 = v78;
    v18 = v84;
    v24 = v68;
    v19 = v72;
    v25 = v62;
    v26 = v65;
    LODWORD(v29) = v61;
    LOBYTE(v31) = v131;
    if (!v131)
    {
      v30 = 1;
      if (!v91)
        goto LABEL_24;
    }
LABEL_108:
    __break(1u);
LABEL_109:
    v44 = v1;
    v45 = v2;
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47)
    {
      v154 = a1;
      if (v44)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
        v6 = 0;
        a1 = v154;
        v2 = *v154;
        v1 = v154[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
  }
  v2 = 0;
LABEL_65:
  LOBYTE(v31) = 0;
  v8 = 0;
  v32 = 0;
  a1 = v145;
  v14 = v100;
  v12 = v109;
  v20 = v78;
  v18 = v84;
  v26 = v65;
  v24 = v68;
  LODWORD(v29) = v61;
LABEL_28:
  v33 = v18 != 0;
  v34 = v12 != 0;
  v35 = (v31 & ((_DWORD)v29 != 0)) == 0;
  v36 = 0x100000000;
  if (v35)
    v36 = 0;
  v37 = v36 & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v32 & 1) << 40);
  v38 = 0x1000000;
  if ((v26 & (v24 != 0)) == 0)
    v38 = 0;
  v39 = 0x10000;
  if ((v20 & v33) == 0)
    v39 = 0;
  v40 = v37 | v38 | v39;
  v41 = 256;
  if ((v14 & v34) == 0)
    v41 = 0;
  v42 = v40 | v41 | v8;
  if ((*(_QWORD *)&v32 & 0xFFFFFFLL) == 0)
  {
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = a1[3];
    if (v56)
    {
      if (v55)
      {
        v144 = v42;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v2);
        return v144;
      }
    }
  }
  return v42;
}

void IPC::Decoder::decode<WebCore::PaymentContact>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::PaymentContact,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[21];
  char v52;
  uint64_t v53;
  uint64_t v54;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v5, v4);
        v25 = *a2;
        v24 = a2[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v24 = v4;
    v25 = 0;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27 && v24)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_37:
    v42 = *a2;
    v43 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v43)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v42);
    }
    return result;
  }
  v9 = *v8;
  v53 = 0;
  v54 = 0;
  if (v9 >= 0x2762)
  {
    do
    {
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>(a2, (uint64_t)&v44);
      if (!v52)
        goto LABEL_36;
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayShippingMethod>((unsigned int *)&v53, (unint64_t)&v44);
      }
      else
      {
        v28 = HIDWORD(v54) + 1;
        v29 = v53 + 104 * HIDWORD(v54);
        v30 = v44;
        v44 = 0;
        *(_QWORD *)v29 = v30;
        v31 = v45;
        v45 = 0;
        *(_QWORD *)(v29 + 8) = v31;
        v32 = v46;
        v46 = 0;
        *(_QWORD *)(v29 + 16) = v32;
        v33 = v47;
        v47 = 0;
        *(_QWORD *)(v29 + 24) = v33;
        v34 = v49;
        v35 = v50;
        v36 = *(_OWORD *)v51;
        *(_QWORD *)(v29 + 93) = *(_QWORD *)&v51[13];
        *(_OWORD *)(v29 + 64) = v35;
        *(_OWORD *)(v29 + 80) = v36;
        *(_OWORD *)(v29 + 48) = v34;
        *(_OWORD *)(v29 + 32) = v48;
        HIDWORD(v54) = v28;
      }
      result = std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      --v9;
    }
    while (v9);
    v37 = HIDWORD(v54);
    v38 = (WTF::StringImpl *)v53;
    if (v54 > HIDWORD(v54))
    {
      v39 = (WTF::StringImpl *)v53;
      if (HIDWORD(v54))
      {
        if (HIDWORD(v54) >= 0x2762763)
        {
          __break(0xC471u);
          return result;
        }
        v40 = WTF::fastMalloc((WTF *)(104 * HIDWORD(v54)));
        LODWORD(v54) = 104 * v37 / 0x68;
        v53 = v40;
        v39 = v38;
        if ((WTF::StringImpl *)v40 != v38)
        {
          WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v38, (WTF::StringImpl *)((char *)v38 + 104 * v37), v40);
          v39 = (WTF::StringImpl *)v53;
        }
      }
      if (v38)
      {
        if (v39 == v38)
        {
          v53 = 0;
          LODWORD(v54) = 0;
        }
        WTF::fastFree(v38, a2);
        v38 = (WTF::StringImpl *)v53;
      }
      else
      {
        v38 = v39;
      }
    }
    v53 = 0;
    *(_QWORD *)a1 = v38;
    v22 = v54;
    v21 = HIDWORD(v54);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v54) = 104 * (int)v9 / 0x68u;
    v53 = WTF::fastMalloc((WTF *)(104 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>(a2, (uint64_t)&v44);
      if (!v52)
        break;
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayShippingMethod>((unsigned int *)&v53, (unint64_t)&v44);
      }
      else
      {
        v11 = HIDWORD(v54) + 1;
        v12 = v53 + 104 * HIDWORD(v54);
        v13 = v44;
        v44 = 0;
        *(_QWORD *)v12 = v13;
        v14 = v45;
        v45 = 0;
        *(_QWORD *)(v12 + 8) = v14;
        v15 = v46;
        v46 = 0;
        *(_QWORD *)(v12 + 16) = v15;
        v16 = v47;
        v47 = 0;
        *(_QWORD *)(v12 + 24) = v16;
        v17 = v49;
        v18 = v50;
        v19 = *(_OWORD *)v51;
        *(_QWORD *)(v12 + 93) = *(_QWORD *)&v51[13];
        *(_OWORD *)(v12 + 64) = v18;
        *(_OWORD *)(v12 + 80) = v19;
        *(_OWORD *)(v12 + 48) = v17;
        *(_OWORD *)(v12 + 32) = v48;
        HIDWORD(v54) = v11;
      }
      std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      if (!--v9)
      {
        v20 = v53;
        v22 = v54;
        v21 = HIDWORD(v54);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v41);
    goto LABEL_37;
  }
  v21 = 0;
  v22 = 0;
  v20 = 0;
LABEL_17:
  v53 = 0;
  *(_QWORD *)a1 = v20;
LABEL_18:
  v54 = 0;
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 12) = v21;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, a2);
}

void sub_196E0C858(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v5, v4);
        v22 = *a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v21 = v4;
    v22 = 0;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v21)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_37:
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v37)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v36);
    }
    return result;
  }
  v9 = *v8;
  v47 = 0;
  v48 = 0;
  if (v9 >= 0x3333)
  {
    do
    {
      IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v38, a2);
      if (!v46)
        goto LABEL_36;
      if (HIDWORD(v48) == (_DWORD)v48)
      {
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayLineItem>((unsigned int *)&v47, (unint64_t)v38);
      }
      else
      {
        v25 = v47 + 80 * HIDWORD(v48);
        *(_BYTE *)v25 = v38[0];
        v26 = v39;
        v39 = 0;
        *(_QWORD *)(v25 + 8) = v26;
        v27 = v40;
        v40 = 0;
        *(_QWORD *)(v25 + 16) = v27;
        v28 = v43;
        v29 = v41;
        *(_OWORD *)(v25 + 40) = v42;
        *(_QWORD *)(v25 + 56) = v28;
        *(_OWORD *)(v25 + 24) = v29;
        v30 = v44;
        v44 = 0;
        *(_QWORD *)(v25 + 64) = v30;
        *(_WORD *)(v25 + 72) = v45;
        ++HIDWORD(v48);
      }
      result = std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
      --v9;
    }
    while (v9);
    v31 = HIDWORD(v48);
    v32 = (WTF::StringImpl *)v47;
    if (v48 > HIDWORD(v48))
    {
      v33 = (WTF::StringImpl *)v47;
      if (HIDWORD(v48))
      {
        if (HIDWORD(v48) >= 0x3333334)
        {
          __break(0xC471u);
          return result;
        }
        v34 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v48)));
        LODWORD(v48) = 80 * v31 / 0x50;
        v47 = v34;
        v33 = v32;
        if ((WTF::StringImpl *)v34 != v32)
        {
          WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v32, (WTF::StringImpl *)((char *)v32 + 80 * v31), v34);
          v33 = (WTF::StringImpl *)v47;
        }
      }
      if (v32)
      {
        if (v33 == v32)
        {
          v47 = 0;
          LODWORD(v48) = 0;
        }
        WTF::fastFree(v32, a2);
        v32 = (WTF::StringImpl *)v47;
      }
      else
      {
        v32 = v33;
      }
    }
    v47 = 0;
    *(_QWORD *)a1 = v32;
    v19 = v48;
    v18 = HIDWORD(v48);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v48) = 80 * (int)v9 / 0x50u;
    v47 = WTF::fastMalloc((WTF *)(80 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v38, a2);
      if (!v46)
        break;
      if (HIDWORD(v48) == (_DWORD)v48)
      {
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayLineItem>((unsigned int *)&v47, (unint64_t)v38);
      }
      else
      {
        v11 = v47 + 80 * HIDWORD(v48);
        *(_BYTE *)v11 = v38[0];
        v12 = v39;
        v39 = 0;
        *(_QWORD *)(v11 + 8) = v12;
        v13 = v40;
        v40 = 0;
        *(_QWORD *)(v11 + 16) = v13;
        v14 = v43;
        v15 = v41;
        *(_OWORD *)(v11 + 40) = v42;
        *(_QWORD *)(v11 + 56) = v14;
        *(_OWORD *)(v11 + 24) = v15;
        v16 = v44;
        v44 = 0;
        *(_QWORD *)(v11 + 64) = v16;
        *(_WORD *)(v11 + 72) = v45;
        ++HIDWORD(v48);
      }
      std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
      if (!--v9)
      {
        v17 = v47;
        v19 = v48;
        v18 = HIDWORD(v48);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v35);
    goto LABEL_37;
  }
  v18 = 0;
  v19 = 0;
  v17 = 0;
LABEL_17:
  v47 = 0;
  *(_QWORD *)a1 = v17;
LABEL_18:
  v48 = 0;
  *(_DWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 12) = v18;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
}

void sub_196E0CC2C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 64, v5);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ApplePayLineItem>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int *v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  WTF::StringImpl *result;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  int v79;
  char v80;
  int v81;
  unsigned int v82;
  WTF::StringImpl *v83;
  char v84;
  WTF::StringImpl *v85;
  char v86;
  WTF::StringImpl *v87;
  char v88;

  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
    goto LABEL_59;
  v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v46 = v6;
    v47 = 0;
    goto LABEL_60;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_61;
  v81 = 0;
  v78 = v9 != 0;
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v87);
    IPC::Decoder::decode<WTF::String>(a2, &v85);
    v10 = a2[1];
    v11 = *a2;
    v12 = a2[2] - *a2;
    if (v10 <= v12)
    {
      v51 = 0;
      v52 = 0;
      *a2 = 0;
      a2[1] = 0;
      v53 = a2[3];
      if (v53)
      {
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          v52 = *a2;
          v51 = a2[1];
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
      }
      goto LABEL_64;
    }
    v13 = (unsigned __int8 *)(v11 + v12);
    a2[2] = (uint64_t)(v13 + 1);
    if (!v11)
    {
      v51 = v10;
      v52 = 0;
LABEL_64:
      v10 = 0;
      v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      v54 = a2[3];
      if (v54)
      {
        if (v51)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
          v11 = *a2;
          v10 = a2[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
      }
      goto LABEL_65;
    }
    v14 = *v13;
    if (v14 < 4)
    {
      v82 = v14 | 0x100;
      goto LABEL_9;
    }
LABEL_65:
    *a2 = 0;
    a2[1] = 0;
    v55 = a2[3];
    if (v55 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v11);
    v82 = 0;
LABEL_9:
    v15 = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
    v80 = v16;
    v77 = v15;
    v17 = a2[1];
    v18 = *a2;
    v19 = a2[2] - *a2;
    if (v17 <= v19)
    {
      v56 = 0;
      v57 = 0;
      *a2 = 0;
      a2[1] = 0;
      v58 = a2[3];
      if (v58)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
          v57 = *a2;
          v56 = a2[1];
        }
        else
        {
          v56 = 0;
          v57 = 0;
        }
      }
      goto LABEL_68;
    }
    v20 = (unsigned __int8 *)(v18 + v19);
    a2[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      v56 = v17;
      v57 = 0;
LABEL_68:
      v17 = 0;
      v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      v59 = a2[3];
      if (v59)
      {
        if (v56)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57, v56);
          v18 = *a2;
          v17 = a2[1];
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
      }
      goto LABEL_69;
    }
    v21 = *v20;
    if (v21 < 5)
    {
      v22 = v21 | 0x100;
      goto LABEL_13;
    }
LABEL_69:
    *a2 = 0;
    a2[1] = 0;
    v60 = a2[3];
    if (v60)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v18);
        v22 = 0;
        v18 = *a2;
        v17 = a2[1];
        goto LABEL_13;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
    v22 = 0;
LABEL_13:
    v23 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v18;
    if (v17 < v23 || v17 - v23 <= 3)
    {
      v61 = 0;
      v62 = 0;
      *a2 = 0;
      a2[1] = 0;
      v63 = a2[3];
      if (v63)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
          v62 = *a2;
          v61 = a2[1];
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
      }
    }
    else
    {
      v24 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (uint64_t)(v24 + 1);
      if (v18)
      {
        v79 = 0;
        v25 = *v24;
        LODWORD(v76) = v25;
        HIDWORD(v76) = v25 & 0xFFFFFF00;
        goto LABEL_17;
      }
      v61 = v17;
      v62 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v64 = a2[3];
    if (v64 && v61)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
    v76 = 0;
    v79 = 1;
LABEL_17:
    v75 = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
    v27 = v26;
    v28 = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
    v30 = v29;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v83);
    v6 = a2[1];
    v5 = (WTF::StringImpl *)*a2;
    v32 = a2[2] - *a2;
    if (v6 <= v32)
    {
      v65 = 0;
      v66 = 0;
      *a2 = 0;
      a2[1] = 0;
      v67 = a2[3];
      if (v67)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
          v66 = *a2;
          v65 = a2[1];
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
      }
      goto LABEL_76;
    }
    v33 = (unsigned __int8 *)v5 + v32;
    a2[2] = (uint64_t)(v33 + 1);
    if (!v5)
    {
      v65 = v6;
      v66 = 0;
LABEL_76:
      v6 = 0;
      v5 = 0;
      *a2 = 0;
      a2[1] = 0;
      v68 = a2[3];
      if (v68)
      {
        if (v65)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
          v5 = (WTF::StringImpl *)*a2;
          v6 = a2[1];
        }
        else
        {
          v6 = 0;
          v5 = 0;
        }
      }
      goto LABEL_77;
    }
    if (*v33 < 2u)
    {
      if (!*v33)
      {
        v37 = 0;
        v38 = 0;
        v36 = 0x10000;
        goto LABEL_29;
      }
      if (v6 <= v33 + 1 - (unsigned __int8 *)v5)
      {
        v35 = 0;
        v69 = 0;
        *a2 = 0;
        a2[1] = 0;
        v70 = a2[3];
        if (v70)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
          v35 = 0;
          v5 = (WTF::StringImpl *)*a2;
          v6 = a2[1];
          v74 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          v69 = 0;
          if (v74)
          {
            if (v6)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v74 + 16))(v74, v5);
              v69 = *a2;
              v35 = a2[1];
            }
          }
        }
      }
      else
      {
        a2[2] = (uint64_t)(v33 + 2);
        v34 = v33[1];
        if (v34 < 2)
        {
          LODWORD(v35) = v34 | 0x100;
          goto LABEL_24;
        }
        v35 = v6;
        v69 = (uint64_t)v5;
      }
      *a2 = 0;
      a2[1] = 0;
      result = (WTF::StringImpl *)a2[3];
      if (result)
      {
        if (!v35)
          goto LABEL_24;
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v69, v35);
      }
      LODWORD(v35) = 0;
LABEL_24:
      v36 = (v35 > 0xFF) << 16;
      if (v35 >= 0x100)
        v37 = v35;
      else
        v37 = 0;
      v38 = 256;
      goto LABEL_29;
    }
LABEL_77:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result && v6)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v5);
    v36 = 0;
    v37 = 0;
    v38 = 0;
LABEL_29:
    if (!HIWORD(v36))
    {
      v5 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = (WTF::StringImpl *)a2[3];
      if (result)
      {
        if (v6)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
      }
    }
    v39 = *a2;
    if (!*a2)
      break;
    if (!v81)
    {
      if (v88)
      {
        v40 = v87;
        v87 = 0;
        if (v86)
        {
          v41 = v85;
          v85 = 0;
          if (v82 > 0xFF)
          {
            if (v80)
            {
              if (v22 > 0xFF && !v79)
              {
                if (v27)
                {
                  if (v30)
                  {
                    if (v84)
                    {
                      v42 = v37 | v36 | v38;
                      v43 = v83;
                      v83 = 0;
                      if (HIWORD(v42))
                      {
                        *(_BYTE *)a1 = v78;
                        *(_QWORD *)(a1 + 8) = v40;
                        *(_QWORD *)(a1 + 16) = v41;
                        *(_BYTE *)(a1 + 24) = v82;
                        *(_QWORD *)(a1 + 32) = v77;
                        *(_BYTE *)(a1 + 40) = v22;
                        *(_DWORD *)(a1 + 44) = v76 | HIDWORD(v76);
                        *(_QWORD *)(a1 + 48) = v75;
                        *(_QWORD *)(a1 + 56) = v28;
                        *(_QWORD *)(a1 + 64) = v43;
                        *(_WORD *)(a1 + 72) = v42;
                        *(_BYTE *)(a1 + 80) = 1;
                        goto LABEL_43;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_59:
    v46 = 0;
    v47 = 0;
    *a2 = 0;
    a2[1] = 0;
    v48 = a2[3];
    if (v48)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v48 + 16))(v48, v5);
        v47 = *a2;
        v46 = a2[1];
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
    }
LABEL_60:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v49 = a2[3];
    if (v49)
    {
      if (v46)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v47, v46);
        v5 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_61:
    *a2 = 0;
    a2[1] = 0;
    v50 = a2[3];
    if (v50 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v50 + 16))(v50, v5);
      v78 = 0;
      v71 = a2[3];
      v72 = *a2;
      v73 = a2[1];
      v81 = 1;
      *a2 = 0;
      a2[1] = 0;
      if (v71 && v73)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v72);
        goto LABEL_62;
      }
    }
    else
    {
LABEL_62:
      v78 = 0;
      v81 = 1;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (v84)
  {
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_43:
  if (v86)
  {
    result = v85;
    v85 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v88 && (result = v87, v87 = 0, result))
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_52;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    if (!v39)
    {
LABEL_55:
      v44 = *a2;
      v45 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = (WTF::StringImpl *)a2[3];
      if (result)
      {
        if (v45)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v44);
      }
    }
  }
  else
  {
LABEL_52:
    if (!v39)
      goto LABEL_55;
  }
  return result;
}

void sub_196E0D428(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20)
{
  uint64_t v20;

  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v20, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  __int16 v4;
  char v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  __int128 v87;
  _BYTE v88[40];
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  unsigned __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF::StringImpl *v105;
  char v106;
  WTF::StringImpl *v107;
  char v108;
  char v109[8];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  char v116;
  char v117;
  char v118[8];
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  char v126;
  WTF::StringImpl *v127;
  char v128;

  v9 = a2[2];
  v10 = *a2;
  v11 = a2[1];
  v12 = v9 - v10;
  if (v11 > v12)
  {
    v13 = (unsigned __int8 *)(v10 + v12);
    a2[2] = (uint64_t)(v13 + 1);
    if (!v10)
    {
      v44 = v11;
      v45 = 0;
      goto LABEL_63;
    }
    v14 = *v13;
    if (v14 >= 2)
      goto LABEL_64;
    if (!v14)
    {
      LOBYTE(v64) = 0;
      v85 = 0;
      std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100](a1, &v64);
      *(_BYTE *)(a1 + 208) = 1;
      if (!v85)
        goto LABEL_57;
      goto LABEL_56;
    }
    IPC::Decoder::decode<WTF::String>(a2, &v127);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v118, a2);
    v15 = (WTF::StringImpl *)v109;
    v16 = a2[1];
    v17 = (WTF::StringImpl *)*a2;
    v18 = a2[2] - *a2;
    if (v16 <= v18)
    {
      v52 = 0;
      v53 = 0;
      *a2 = 0;
      a2[1] = 0;
      v54 = a2[3];
      if (v54)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
          v53 = *a2;
          v52 = a2[1];
        }
        else
        {
          v52 = 0;
          v53 = 0;
        }
      }
    }
    else
    {
      v19 = (unsigned __int8 *)v17 + v18;
      a2[2] = (uint64_t)(v19 + 1);
      if (v17)
      {
        v20 = *v19;
        if (v20 < 2)
        {
          if (!v20)
          {
            LOBYTE(v86) = 0;
            LOBYTE(v91) = 0;
            v109[0] = 0;
            v116 = 0;
            goto LABEL_14;
          }
          IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)&v86, a2);
          if ((_BYTE)v91)
          {
            v21 = v87;
            v87 = 0uLL;
            v110 = v21;
            v111 = *(_OWORD *)v88;
            v112 = *(_OWORD *)&v88[16];
            v22 = v89;
            v89 = 0;
            v113 = *(_QWORD *)&v88[32];
            v114 = v22;
            v115 = v90;
            v116 = 1;
            v109[0] = v86;
LABEL_14:
            v117 = 1;
            std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v17);
LABEL_17:
            IPC::Decoder::decode<WTF::String>(a2, &v107);
            IPC::Decoder::decode<WTF::String>(a2, &v105);
            IPC::Decoder::decode<WTF::String>(a2, &v103);
            v32 = *a2;
            if (!*a2)
            {
              v37 = 0;
              LOBYTE(v64) = 0;
              v85 = 0;
LABEL_31:
              if (v104)
              {
                v38 = v103;
                v103 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, v27);
                  else
                    *(_DWORD *)v38 -= 2;
                }
              }
              if (v106)
              {
                v39 = v105;
                v105 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, v27);
                  else
                    *(_DWORD *)v39 -= 2;
                }
              }
              if (v108)
              {
                v40 = v107;
                v107 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v27);
                  else
                    *(_DWORD *)v40 -= 2;
                }
              }
              if (v117)
                std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109, v27);
              std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v27);
              if (!v128 || (v41 = v127, v127 = 0, !v41))
              {
LABEL_52:
                if (v32)
                {
LABEL_53:
                  *(_QWORD *)a1 = v64;
                  *(_BYTE *)(a1 + 8) = v5;
                  v64 = 0;
                  v66 = 0;
                  v67 = 0;
                  *(_QWORD *)(a1 + 16) = v62;
                  *(_QWORD *)(a1 + 24) = v63;
                  v42 = v69;
                  *(_OWORD *)(a1 + 32) = v68;
                  *(_OWORD *)(a1 + 48) = v42;
                  v71 = 0;
                  *(_QWORD *)(a1 + 64) = v70;
                  *(_QWORD *)(a1 + 72) = v61;
                  *(_WORD *)(a1 + 80) = v4;
                  *(_BYTE *)(a1 + 88) = 0;
                  *(_BYTE *)(a1 + 168) = 0;
                  if (v37)
                  {
                    *(_BYTE *)(a1 + 88) = v6;
                    v74 = 0;
                    v75 = 0;
                    *(_QWORD *)(a1 + 96) = v60;
                    *(_QWORD *)(a1 + 104) = v59;
                    v43 = v77;
                    *(_OWORD *)(a1 + 112) = v76;
                    *(_OWORD *)(a1 + 128) = v43;
                    v79 = 0;
                    *(_QWORD *)(a1 + 144) = v78;
                    *(_QWORD *)(a1 + 152) = v58;
                    *(_WORD *)(a1 + 160) = v57;
                    *(_BYTE *)(a1 + 168) = 1;
                  }
                  v82 = 0;
                  v83 = 0;
                  *(_QWORD *)(a1 + 176) = v15;
                  *(_QWORD *)(a1 + 184) = v2;
                  v84 = 0;
                  *(_QWORD *)(a1 + 192) = v3;
                  *(_BYTE *)(a1 + 200) = 1;
                  *(_BYTE *)(a1 + 208) = 1;
LABEL_56:
                  WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v64, v23);
                  goto LABEL_57;
                }
                goto LABEL_60;
              }
              if (*(_DWORD *)v41 != 2)
              {
                *(_DWORD *)v41 -= 2;
                goto LABEL_52;
              }
              WTF::StringImpl::destroy(v41, v23);
              if (v32)
                goto LABEL_53;
LABEL_60:
              v10 = *a2;
              v11 = a2[1];
              goto LABEL_64;
            }
            if (v128)
            {
              v33 = (uint64_t)v127;
              v127 = 0;
              if (v126)
              {
                v5 = v118[0];
                LOBYTE(v87) = v118[0];
                v35 = v119;
                v34 = v120;
                v119 = 0;
                v120 = 0;
                *(_OWORD *)&v88[8] = v121;
                *(_OWORD *)&v88[24] = v122;
                v36 = v124;
                v89 = v123;
                v124 = 0;
                v4 = v125;
                v91 = v125;
                if (v117)
                {
                  v92 = 0;
                  v99 = 0;
                  if (v116)
                  {
                    v6 = v109[0];
                    v92 = v109[0];
                    v29 = *((_QWORD *)&v110 + 1);
                    v28 = v110;
                    v110 = 0uLL;
                    v93 = __PAIR128__(v29, v28);
                    v94 = v111;
                    v95 = v112;
                    v30 = v114;
                    v114 = 0;
                    v96 = v113;
                    v97 = v30;
                    v31 = v115;
                    v98 = v115;
                    v99 = 1;
                  }
                  else
                  {
                    v6 = 0;
                  }
                  if (v108)
                  {
                    v15 = v107;
                    v107 = 0;
                    if (v106)
                    {
                      v2 = v105;
                      v105 = 0;
                      if (v104)
                      {
                        v3 = v103;
                        v103 = 0;
                        v63 = v34;
                        v64 = v33;
                        v65 = v118[0];
                        v86 = 0;
                        *((_QWORD *)&v87 + 1) = 0;
                        *(_QWORD *)v88 = 0;
                        v66 = v35;
                        v67 = v34;
                        v68 = v121;
                        v69 = v122;
                        v90 = 0;
                        v70 = v123;
                        v71 = v36;
                        v72 = v125;
                        v73 = 0;
                        v81 = 0;
                        v61 = v36;
                        v62 = v35;
                        v59 = v29;
                        v60 = v28;
                        v58 = v30;
                        v57 = v31;
                        if (v116)
                        {
                          v73 = v6;
                          v93 = 0uLL;
                          v74 = v28;
                          v75 = v29;
                          v76 = v94;
                          v77 = v95;
                          v97 = 0;
                          v78 = v96;
                          v79 = v30;
                          v80 = v31;
                          v37 = 1;
                          v81 = 1;
                        }
                        else
                        {
                          v6 = 0;
                          v37 = 0;
                        }
                        v100 = 0;
                        v101 = 0;
                        v82 = v15;
                        v83 = v2;
                        v102 = 0;
                        v84 = v3;
                        v85 = 1;
                        WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v86, v27);
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
            __break(1u);
            goto LABEL_62;
          }
          v109[0] = 0;
          v117 = 0;
          std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v17);
LABEL_16:
          v24 = *a2;
          v25 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          v26 = a2[3];
          if (v26 && v25)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
          goto LABEL_17;
        }
LABEL_73:
        *a2 = 0;
        a2[1] = 0;
        v56 = a2[3];
        if (v56 && v16)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v56 + 16))(v56, v17);
        v109[0] = 0;
        v117 = 0;
        goto LABEL_16;
      }
      v52 = v16;
      v53 = 0;
    }
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v55 = a2[3];
    if (v55)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53, v52);
        v17 = (WTF::StringImpl *)*a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_73;
  }
LABEL_62:
  v44 = 0;
  v45 = 0;
  *a2 = 0;
  a2[1] = 0;
  v46 = a2[3];
  if (v46)
  {
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
      v45 = *a2;
      v44 = a2[1];
    }
    else
    {
      v44 = 0;
      v45 = 0;
    }
  }
LABEL_63:
  v11 = 0;
  v10 = 0;
  *a2 = 0;
  a2[1] = 0;
  v47 = a2[3];
  if (v47)
  {
    if (v44)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
      goto LABEL_60;
    }
    v11 = 0;
    v10 = 0;
  }
LABEL_64:
  *a2 = 0;
  a2[1] = 0;
  v48 = a2[3];
  if (v48 && v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v10);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 208) = 0;
LABEL_57:
  if (!*(_BYTE *)(a1 + 208))
  {
    v49 = *a2;
    v50 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v51 = a2[3];
    if (v51)
    {
      if (v50)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
    }
  }
}

void sub_196E0DB98(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ApplePayRecurringPaymentRequest *v2;

  if (*((_BYTE *)v2 + 208))
  {
    if (*((_BYTE *)v2 + 200))
      WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(v2, a2);
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  char v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  char v62;
  char v63[8];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  WTF::StringImpl *v72;
  char v73;

  v12 = a2[2];
  v13 = *a2;
  v14 = a2[1];
  v15 = v12 - v13;
  if (v14 > v15)
  {
    v16 = (unsigned __int8 *)(v13 + v15);
    a2[2] = (uint64_t)(v16 + 1);
    if (!v13)
    {
      v27 = v14;
      v28 = 0;
      goto LABEL_41;
    }
    v17 = *v16;
    if (v17 >= 2)
      goto LABEL_45;
    if (!v17)
    {
      LOBYTE(v36) = 0;
      v46 = 0;
      std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100]((_BYTE *)a1, (uint64_t)&v36);
      *(_BYTE *)(a1 + 120) = 1;
      if (!v46)
        goto LABEL_37;
      goto LABEL_36;
    }
    IPC::Decoder::decode<WTF::String>(a2, &v72);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v63, a2);
    IPC::Decoder::decode<WTF::String>(a2, &v61);
    IPC::Decoder::decode<WTF::String>(a2, &v59);
    IPC::Decoder::decode<WTF::String>(a2, &v57);
    v35 = *a2;
    if (!*a2)
    {
      LOBYTE(v36) = 0;
      v46 = 0;
      goto LABEL_12;
    }
    if (v73)
    {
      v19 = v72;
      v72 = 0;
      if (v71)
      {
        v7 = v63[0];
        v48 = v63[0];
        v4 = v64;
        v3 = v65;
        v64 = 0;
        v65 = 0;
        v50 = v66;
        v51 = v67;
        v6 = v69;
        v52 = v68;
        v69 = 0;
        v5 = v70;
        v54 = v70;
        if (v62)
        {
          v8 = v61;
          v61 = 0;
          if (v60)
          {
            v9 = v59;
            v59 = 0;
            if (v58)
            {
              v2 = v57;
              v56 = 0;
              v57 = 0;
              v36 = v19;
              v37 = v63[0];
              v49 = 0u;
              *(_QWORD *)&v38 = v4;
              *((_QWORD *)&v38 + 1) = v3;
              v39 = v66;
              v40 = v67;
              v47 = 0;
              v53 = 0;
              v41 = v68;
              v42 = v6;
              v43 = v70;
              v55 = 0u;
              *(_QWORD *)&v44 = v8;
              *((_QWORD *)&v44 + 1) = v9;
              v45 = v2;
              v46 = 1;
              WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v47, v18);
LABEL_12:
              if (v58)
              {
                v20 = v57;
                v57 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v18);
                  else
                    *(_DWORD *)v20 -= 2;
                }
              }
              if (v60)
              {
                v22 = v59;
                v59 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v18);
                  else
                    *(_DWORD *)v22 -= 2;
                }
              }
              if (v62)
              {
                v23 = v61;
                v61 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, v18);
                  else
                    *(_DWORD *)v23 -= 2;
                }
              }
              std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v18);
              if (v73)
              {
                v24 = v72;
                v72 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, v21);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              if (v35)
              {
                v25 = v36;
                v36 = 0;
                *(_QWORD *)a1 = v25;
                *(_BYTE *)(a1 + 8) = v7;
                v38 = 0u;
                *(_QWORD *)(a1 + 16) = v4;
                *(_QWORD *)(a1 + 24) = v3;
                v26 = v40;
                *(_OWORD *)(a1 + 32) = v39;
                *(_OWORD *)(a1 + 48) = v26;
                v42 = 0;
                *(_QWORD *)(a1 + 64) = v41;
                *(_QWORD *)(a1 + 72) = v6;
                *(_WORD *)(a1 + 80) = v5;
                v44 = 0u;
                *(_QWORD *)(a1 + 88) = v8;
                *(_QWORD *)(a1 + 96) = v9;
                v45 = 0;
                *(_QWORD *)(a1 + 104) = v2;
                *(_BYTE *)(a1 + 112) = 1;
                *(_BYTE *)(a1 + 120) = 1;
LABEL_36:
                WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v36, v21);
                goto LABEL_37;
              }
              goto LABEL_44;
            }
          }
        }
      }
    }
    __break(1u);
  }
  v27 = 0;
  v28 = 0;
  *a2 = 0;
  a2[1] = 0;
  v29 = a2[3];
  if (v29)
  {
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v28 = *a2;
      v27 = a2[1];
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
  }
LABEL_41:
  v14 = 0;
  v13 = 0;
  *a2 = 0;
  a2[1] = 0;
  v30 = a2[3];
  if (!v30)
    goto LABEL_45;
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
LABEL_44:
    v13 = *a2;
    v14 = a2[1];
    goto LABEL_45;
  }
  v14 = 0;
  v13 = 0;
LABEL_45:
  *a2 = 0;
  a2[1] = 0;
  v31 = a2[3];
  if (v31 && v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v13);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 120) = 0;
LABEL_37:
  if (!*(_BYTE *)(a1 + 120))
  {
    v32 = *a2;
    v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      if (v33)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
    }
  }
}

void sub_196E0E048(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  WebCore::ApplePayAutomaticReloadPaymentRequest *v24;

  if (*((_BYTE *)v24 + 120))
  {
    if (*((_BYTE *)v24 + 112))
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(v24, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;

  v3 = result;
  v4 = a2[2];
  v5 = (WTF::StringImpl *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v30 = 0;
    v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a2;
        v30 = a2[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_45;
  }
  v8 = (unsigned __int8 *)v5 + v7;
  v9 = (uint64_t)v5 + v7 + 1;
  a2[2] = v9;
  if (!v5)
  {
    v30 = v6;
    v31 = 0;
LABEL_45:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (!v33)
      goto LABEL_89;
    if (!v30)
    {
      v6 = 0;
      v5 = 0;
LABEL_89:
      *a2 = 0;
      a2[1] = 0;
      v52 = a2[3];
      if (v52 && v6)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v52 + 16))(v52, v5);
      *(_BYTE *)v3 = 0;
      *((_BYTE *)v3 + 24) = 0;
      v53 = *a2;
      v54 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = (WTF::StringImpl *)a2[3];
      if (result)
      {
        if (v54)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v53);
      }
      return result;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
LABEL_88:
    v5 = (WTF::StringImpl *)*a2;
    v6 = a2[1];
    goto LABEL_89;
  }
  v10 = *v8;
  if (v10 >= 2)
    goto LABEL_89;
  if (!v10)
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
    *((_BYTE *)result + 24) = 1;
    return result;
  }
  v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v6 < v11 || v6 - v11 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
      v35 = *a2;
      v36 = a2[1];
      v37 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v37)
      {
        if (v36)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      }
    }
    goto LABEL_88;
  }
  v13 = (unint64_t *)((char *)v5 + v11);
  v14 = *v13;
  a2[2] = (uint64_t)(v13 + 1);
  v64 = 0;
  v65 = 0;
  if (v14 < 0x6666)
  {
    if (!v14)
    {
      v27 = 0;
      v28 = 0;
LABEL_43:
      v55 = v28;
      v64 = 0;
      v65 = 0;
      v57 = 1;
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v5);
      v56[0] = 0;
      v56[1] = 0;
      *(_QWORD *)v3 = v27;
      *((_QWORD *)v3 + 1) = v55;
      *((_BYTE *)v3 + 16) = 1;
      result = (WTF::StringImpl *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v29);
      *((_BYTE *)v3 + 24) = 1;
      return result;
    }
    LODWORD(v65) = 40 * (int)v14 / 0x28u;
    v64 = WTF::fastMalloc((WTF *)(40 * v14));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayPaymentTokenContext>((uint64_t)&v58, a2);
      if (!v63)
        goto LABEL_87;
      if (HIDWORD(v65) != (_DWORD)v65)
        break;
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayPaymentTokenContext>((unsigned int *)&v64, (unint64_t)&v58);
      if (v63)
        goto LABEL_18;
LABEL_38:
      if (!--v14)
        goto LABEL_39;
    }
    v15 = HIDWORD(v65) + 1;
    v16 = (WTF::StringImpl **)(v64 + 40 * HIDWORD(v65));
    v17 = v58;
    v58 = 0;
    *v16 = v17;
    v18 = v59;
    v59 = 0;
    v16[1] = v18;
    v19 = v60;
    v60 = 0;
    v16[2] = v19;
    v20 = v61;
    v61 = 0;
    v16[3] = v20;
    v21 = v62;
    v62 = 0;
    v16[4] = v21;
    HIDWORD(v65) = v15;
LABEL_18:
    v22 = v62;
    v62 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v5);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v61;
    v61 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v5);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v60;
    v60 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v5);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v59;
    v59 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v5);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v58;
    v58 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v5);
      else
        *(_DWORD *)v26 -= 2;
    }
    goto LABEL_38;
  }
  do
  {
    IPC::Decoder::decode<WebCore::ApplePayPaymentTokenContext>((uint64_t)&v58, a2);
    if (!v63)
    {
LABEL_87:
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v5);
      goto LABEL_88;
    }
    if (HIDWORD(v65) == (_DWORD)v65)
    {
      result = (WTF::StringImpl *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayPaymentTokenContext>((unsigned int *)&v64, (unint64_t)&v58);
      if (!v63)
        goto LABEL_77;
    }
    else
    {
      v38 = HIDWORD(v65) + 1;
      v39 = (WTF::StringImpl **)(v64 + 40 * HIDWORD(v65));
      v40 = v58;
      v58 = 0;
      *v39 = v40;
      v41 = v59;
      v59 = 0;
      v39[1] = v41;
      v42 = v60;
      v60 = 0;
      v39[2] = v42;
      v43 = v61;
      v61 = 0;
      v39[3] = v43;
      v44 = v62;
      v62 = 0;
      v39[4] = v44;
      HIDWORD(v65) = v38;
    }
    v45 = v62;
    v62 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v5);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v61;
    v61 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v5);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v60;
    v60 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v5);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = v59;
    v59 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v5);
      else
        *(_DWORD *)v48 -= 2;
    }
    result = v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_77:
    --v14;
  }
  while (v14);
  v49 = HIDWORD(v65);
  v27 = (WTF *)v64;
  if (v65 <= HIDWORD(v65))
  {
LABEL_40:
    v28 = v65;
    goto LABEL_43;
  }
  v50 = (WTF *)v64;
  if (!HIDWORD(v65))
  {
LABEL_83:
    if (v27)
    {
      if (v50 == v27)
      {
        v64 = 0;
        LODWORD(v65) = 0;
      }
      WTF::fastFree(v27, v5);
LABEL_39:
      v27 = (WTF *)v64;
    }
    else
    {
      v27 = v50;
    }
    goto LABEL_40;
  }
  if (HIDWORD(v65) < 0x6666667)
  {
    v51 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v65)));
    LODWORD(v65) = 40 * v49 / 0x28;
    v64 = (uint64_t)v51;
    v50 = v27;
    if (v51 != v27)
    {
      WTF::VectorMover<false,WebCore::ApplePayPaymentTokenContext>::move(v27, (WTF *)((char *)v27 + 40 * v49), v51);
      v50 = (WTF *)v64;
    }
    goto LABEL_83;
  }
  __break(0xC471u);
  return result;
}

void sub_196E0E6A0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, char a20)
{
  uint64_t v20;

  if (a20)
  {
    if (a19)
    {
      if (*(_DWORD *)a19 == 2)
        WTF::StringImpl::destroy(a19, a2);
      else
        *(_DWORD *)a19 -= 2;
    }
    if (a18)
    {
      if (*(_DWORD *)a18 == 2)
        WTF::StringImpl::destroy(a18, a2);
      else
        *(_DWORD *)a18 -= 2;
    }
    if (a17)
    {
      if (*(_DWORD *)a17 == 2)
        WTF::StringImpl::destroy(a17, a2);
      else
        *(_DWORD *)a17 -= 2;
    }
    if (a16)
    {
      if (*(_DWORD *)a16 == 2)
        WTF::StringImpl::destroy(a16, a2);
      else
        *(_DWORD *)a16 -= 2;
    }
    if (a15)
    {
      if (*(_DWORD *)a15 == 2)
        WTF::StringImpl::destroy(a15, a2);
      else
        *(_DWORD *)a15 -= 2;
    }
  }
  WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 - 48, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  WTF::StringImpl *v65;
  char v66;
  WTF::StringImpl *v67;
  char v68;
  WTF::StringImpl *v69;
  char v70;
  WTF::StringImpl *v71;
  char v72;
  char v73[8];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  WTF::StringImpl *v82;
  char v83;

  v10 = a2[2];
  v11 = *a2;
  v12 = a2[1];
  v13 = v10 - v11;
  if (v12 > v13)
  {
    v14 = (unsigned __int8 *)(v11 + v13);
    a2[2] = (uint64_t)(v14 + 1);
    if (!v11)
    {
      v31 = v12;
      v32 = 0;
      goto LABEL_48;
    }
    v15 = *v14;
    if (v15 >= 2)
      goto LABEL_52;
    if (!v15)
    {
      LOBYTE(v42) = 0;
      v53 = 0;
      std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100]((_BYTE *)a1, (uint64_t)&v42);
      *(_BYTE *)(a1 + 136) = 1;
      if (!v53)
        goto LABEL_44;
      goto LABEL_43;
    }
    IPC::Decoder::decode<WTF::String>(a2, &v82);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v73, a2);
    v16 = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
    v18 = v17;
    IPC::Decoder::decode<WTF::String>(a2, &v71);
    IPC::Decoder::decode<WTF::String>(a2, &v69);
    IPC::Decoder::decode<WTF::String>(a2, &v67);
    IPC::Decoder::decode<WTF::String>(a2, &v65);
    v41 = *a2;
    if (!*a2)
    {
      LOBYTE(v42) = 0;
      v53 = 0;
      goto LABEL_14;
    }
    if (v83)
    {
      v20 = v82;
      v82 = 0;
      if (v81)
      {
        v7 = v73[0];
        v55 = v73[0];
        v22 = v74;
        v21 = v75;
        v74 = 0;
        v75 = 0;
        v57 = v76;
        v58 = v77;
        v5 = v79;
        v59 = v78;
        v79 = 0;
        v6 = v80;
        v61 = v80;
        if ((_BYTE)v18)
        {
          v62 = v16;
          if (v72)
          {
            v18 = v71;
            v71 = 0;
            if (v70)
            {
              v2 = v69;
              v69 = 0;
              if (v68)
              {
                v3 = v67;
                v67 = 0;
                if (v66)
                {
                  v4 = v65;
                  v65 = 0;
                  v42 = v20;
                  v43 = v73[0];
                  v56 = 0u;
                  v39 = v22;
                  v40 = v21;
                  *(_QWORD *)&v44 = v22;
                  *((_QWORD *)&v44 + 1) = v21;
                  v45 = v76;
                  v46 = v77;
                  v54 = 0;
                  v60 = 0;
                  v47 = v78;
                  v48 = v5;
                  v49 = v80;
                  v50 = v16;
                  *(_QWORD *)&v51 = v18;
                  *((_QWORD *)&v51 + 1) = v2;
                  *(_QWORD *)&v52 = v3;
                  v63 = 0u;
                  v64 = 0u;
                  *((_QWORD *)&v52 + 1) = v4;
                  v53 = 1;
                  WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v54, v19);
LABEL_14:
                  if (v66)
                  {
                    v23 = v65;
                    v65 = 0;
                    if (v23)
                    {
                      if (*(_DWORD *)v23 == 2)
                        WTF::StringImpl::destroy(v23, v19);
                      else
                        *(_DWORD *)v23 -= 2;
                    }
                  }
                  if (v68)
                  {
                    v25 = v67;
                    v67 = 0;
                    if (v25)
                    {
                      if (*(_DWORD *)v25 == 2)
                        WTF::StringImpl::destroy(v25, v19);
                      else
                        *(_DWORD *)v25 -= 2;
                    }
                  }
                  if (v70)
                  {
                    v26 = v69;
                    v69 = 0;
                    if (v26)
                    {
                      if (*(_DWORD *)v26 == 2)
                        WTF::StringImpl::destroy(v26, v19);
                      else
                        *(_DWORD *)v26 -= 2;
                    }
                  }
                  if (v72)
                  {
                    v27 = v71;
                    v71 = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2)
                        WTF::StringImpl::destroy(v27, v19);
                      else
                        *(_DWORD *)v27 -= 2;
                    }
                  }
                  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v73, v19);
                  if (v83)
                  {
                    v28 = v82;
                    v82 = 0;
                    if (v28)
                    {
                      if (*(_DWORD *)v28 == 2)
                        WTF::StringImpl::destroy(v28, v24);
                      else
                        *(_DWORD *)v28 -= 2;
                    }
                  }
                  if (v41)
                  {
                    v29 = v42;
                    v42 = 0;
                    *(_QWORD *)a1 = v29;
                    *(_BYTE *)(a1 + 8) = v7;
                    v44 = 0u;
                    *(_QWORD *)(a1 + 16) = v39;
                    *(_QWORD *)(a1 + 24) = v40;
                    v30 = v46;
                    *(_OWORD *)(a1 + 32) = v45;
                    *(_OWORD *)(a1 + 48) = v30;
                    v48 = 0;
                    *(_QWORD *)(a1 + 64) = v47;
                    *(_QWORD *)(a1 + 72) = v5;
                    *(_WORD *)(a1 + 80) = v6;
                    *(_QWORD *)(a1 + 88) = v16;
                    *(_QWORD *)(a1 + 96) = v18;
                    *(_QWORD *)(a1 + 104) = v2;
                    *(_QWORD *)(a1 + 112) = v3;
                    v51 = 0u;
                    v52 = 0u;
                    *(_QWORD *)(a1 + 120) = v4;
                    *(_BYTE *)(a1 + 128) = 1;
                    *(_BYTE *)(a1 + 136) = 1;
LABEL_43:
                    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v42, v24);
                    goto LABEL_44;
                  }
                  goto LABEL_51;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  v31 = 0;
  v32 = 0;
  *a2 = 0;
  a2[1] = 0;
  v33 = a2[3];
  if (v33)
  {
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v32 = *a2;
      v31 = a2[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
  }
LABEL_48:
  v12 = 0;
  v11 = 0;
  *a2 = 0;
  a2[1] = 0;
  v34 = a2[3];
  if (!v34)
    goto LABEL_52;
  if (v31)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
LABEL_51:
    v11 = *a2;
    v12 = a2[1];
    goto LABEL_52;
  }
  v12 = 0;
  v11 = 0;
LABEL_52:
  *a2 = 0;
  a2[1] = 0;
  v35 = a2[3];
  if (v35 && v12)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v11);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 136) = 0;
LABEL_44:
  if (!*(_BYTE *)(a1 + 136))
  {
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38)
    {
      if (v37)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
    }
  }
}

void sub_196E0EBC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  WebCore::ApplePayDeferredPaymentRequest *v28;

  if (*((_BYTE *)v28 + 136))
  {
    if (*((_BYTE *)v28 + 128))
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(v28, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_196E0ECD4()
{
  JUMPOUT(0x196E0ECA0);
}

WTF *IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>(WTF *result, char **a2)
{
  uint64_t v2;
  WTF *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  char v16;
  int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  WTF *v40;
  uint64_t v41;

  v4 = result;
  v5 = a2[2];
  v6 = *a2;
  v7 = (unint64_t)a2[1];
  v8 = v5 - v6;
  if (v7 <= v8)
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v7)
      {
        (*(void (**)(char *))(*(_QWORD *)v20 + 16))(v20);
        v19 = *a2;
        v18 = (unint64_t)a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_27;
  }
  v9 = (unsigned __int8 *)&v6[v8];
  a2[2] = (char *)(v9 + 1);
  if (!v6)
  {
    v18 = v7;
    v19 = 0;
LABEL_27:
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        v6 = *a2;
        v7 = (unint64_t)a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    goto LABEL_67;
  }
  v10 = *v9;
  if (v10 >= 2)
  {
LABEL_67:
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33 && v7)
      (*(void (**)(char *, char *))(*(_QWORD *)v33 + 16))(v33, v6);
    *(_BYTE *)v4 = 0;
    *((_BYTE *)v4 + 32) = 0;
    v34 = *a2;
    v35 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result && v35)
      return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v34);
    return result;
  }
  if (*v9)
  {
    if (v7 <= v9 + 1 - (unsigned __int8 *)v6)
    {
      v9 = 0;
      v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      v23 = a2[3];
      if (v23)
      {
        (*(void (**)(char *))(*(_QWORD *)v23 + 16))(v23);
        v9 = 0;
        v36 = *a2;
        v37 = a2[1];
        v38 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v22 = 0;
        if (v38)
        {
          if (v37)
          {
            (*(void (**)(char *, char *))(*(_QWORD *)v38 + 16))(v38, v36);
            v22 = *a2;
            v9 = (unsigned __int8 *)a2[1];
          }
        }
      }
    }
    else
    {
      v11 = v9 + 2;
      a2[2] = (char *)(v9 + 2);
      LODWORD(v9) = v9[1];
      if (v9 < 2)
      {
        if (!(_DWORD)v9)
        {
          v17 = 0;
          v15 = 0;
          v10 = 1;
          goto LABEL_52;
        }
        v9 = (unsigned __int8 *)(((unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v6);
        if (v7 >= (unint64_t)v9 && v7 - (unint64_t)v9 > 7)
        {
          v13 = (WTF **)((unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFF8);
          v14 = *v13;
          a2[2] = (char *)(v13 + 1);
          v40 = 0;
          v41 = 0;
          if ((unint64_t)v14 >= 0x100000)
          {
            v15 = 0;
            LODWORD(v2) = 0;
            while (1)
            {
              result = (WTF *)IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
              v39 = (__int16)result;
              LODWORD(v9) = (unsigned __int16)result;
              if ((unsigned __int16)result < 0x100u)
                break;
              if ((_DWORD)v2 == (_DWORD)v41)
              {
                result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v2 + 1), (unint64_t)&v39);
                LODWORD(v2) = HIDWORD(v41);
                v15 = v40;
                *((_BYTE *)v40 + HIDWORD(v41)) = *(_BYTE *)result;
              }
              else
              {
                *((_BYTE *)v15 + v2) = (_BYTE)result;
              }
              v2 = (v2 + 1);
              HIDWORD(v41) = v2;
              v14 = (WTF *)((char *)v14 - 1);
              if (!v14)
              {
                if (v41 <= v2)
                  goto LABEL_73;
                if ((_DWORD)v2)
                {
                  LODWORD(v41) = v2;
                  result = (WTF *)WTF::fastRealloc(v15, (void *)v2);
                  v40 = result;
                  goto LABEL_73;
                }
                goto LABEL_72;
              }
            }
            v15 = v40;
            if (!v40)
              goto LABEL_49;
          }
          else
          {
            if (!v14)
            {
              LODWORD(v9) = 0;
              v15 = 0;
              LODWORD(v2) = 0;
              goto LABEL_25;
            }
            v15 = (WTF *)WTF::fastMalloc(v14);
            LODWORD(v2) = 0;
            LODWORD(v41) = (_DWORD)v14;
            v40 = v15;
            while (1)
            {
              result = (WTF *)IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
              v39 = (__int16)result;
              if ((unsigned __int16)result < 0x100u)
                break;
              if ((_DWORD)v2 == (_DWORD)v41)
              {
                result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v2 + 1), (unint64_t)&v39);
                LODWORD(v2) = HIDWORD(v41);
                v15 = v40;
                *((_BYTE *)v40 + HIDWORD(v41)) = *(_BYTE *)result;
              }
              else
              {
                *((_BYTE *)v15 + v2) = (_BYTE)result;
              }
              LODWORD(v2) = v2 + 1;
              HIDWORD(v41) = v2;
              v14 = (WTF *)((char *)v14 - 1);
              if (!v14)
              {
                LODWORD(v9) = v41;
                goto LABEL_25;
              }
            }
          }
          v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree(v15, v6);
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
          v25 = a2[3];
          if (v25)
          {
            (*(void (**)(char *))(*(_QWORD *)v25 + 16))(v25);
            v26 = *a2;
            v27 = a2[1];
            v28 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v28)
            {
              if (v27)
                (*(void (**)(char *, char *))(*(_QWORD *)v28 + 16))(v28, v26);
            }
          }
        }
LABEL_49:
        v29 = *a2;
        v30 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v31 = a2[3];
        if (v31 && v30)
          (*(void (**)(char *, char *))(*(_QWORD *)v31 + 16))(v31, v29);
        goto LABEL_50;
      }
      v9 = (unsigned __int8 *)v7;
      v22 = v6;
    }
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v9)
      (*(void (**)(char *, char *, unsigned __int8 *))(*(_QWORD *)v24 + 16))(v24, v22, v9);
LABEL_50:
    v6 = *a2;
    v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result && v32)
      result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v6);
    v15 = 0;
    v17 = 1;
LABEL_52:
    while (*a2)
    {
      if (!v17)
      {
        if ((v10 & 1) != 0)
        {
          *(_BYTE *)v4 = 0;
          *((_BYTE *)v4 + 16) = 0;
          v16 = 1;
        }
        else
        {
          *(_QWORD *)v4 = v15;
          *((_DWORD *)v4 + 2) = (_DWORD)v9;
          *((_DWORD *)v4 + 3) = v2;
          v16 = 1;
          *((_BYTE *)v4 + 16) = 1;
        }
        goto LABEL_57;
      }
      __break(1u);
LABEL_72:
      v40 = 0;
      LODWORD(v41) = 0;
      result = (WTF *)WTF::fastFree(v15, v6);
LABEL_73:
      v15 = v40;
      LODWORD(v9) = v41;
      LODWORD(v2) = HIDWORD(v41);
LABEL_25:
      v17 = 0;
      v10 = 0;
    }
    v6 = 0;
    if (((v17 | v10) & 1) == 0 && v15)
    {
      WTF::fastFree(v15, 0);
      v6 = *a2;
    }
    v7 = (unint64_t)a2[1];
    goto LABEL_67;
  }
  v16 = 0;
  *(_BYTE *)result = 0;
LABEL_57:
  *((_BYTE *)v4 + 24) = v16;
  *((_BYTE *)v4 + 32) = 1;
  return result;
}

void sub_196E0F15C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentMethod,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  CFTypeRef v6;
  _QWORD *v7[2];
  CFTypeRef v8;
  char v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    v10[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFF0])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)v7, v10, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, v7);
    IPC::decodeRequiringAllowedClasses<PKPaymentMethod,PKPaymentMethod*>(a1, (uint64_t)&v8);
    if (v7[0])
      WTF::fastFree((WTF *)(v7[0] - 2), v4);
    if (*a1 && v9)
    {
      WebCore::PaymentMethod::PaymentMethod();
      v5 = v7[1];
      *(_QWORD *)a2 = MEMORY[0x1E0DD8F80] + 16;
      *(_QWORD *)(a2 + 8) = v5;
      if (v5)
        CFRetain(v5);
      *(_BYTE *)(a2 + 16) = 1;
      WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)v7);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
    if (v9)
    {
      v6 = v8;
      v8 = 0;
      if (v6)
        CFRelease(v6);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_196E0F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  CFTypeRef v13;

  WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)&a9);
  if (a12)
  {
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::Payment,void>::encode(IPC::Encoder *a1, WebCore::Payment *this)
{
  objc_object *cf;

  WebCore::Payment::pkPayment(this);
  IPC::encodeObjectDirectly<PKPayment>(a1, cf);
  if (cf)
    CFRelease(cf);
}

void sub_196E0F348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::Payment,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  int v5;
  CFTypeRef v6;
  int v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  _QWORD *v11;
  CFTypeRef v12;
  char v13;
  CFTypeRef cf;
  CFTypeRef v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    v16[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDF40])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, v16, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v11);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPayment>(a1, (uint64_t)&cf);
    v5 = v15;
    if ((_BYTE)v15)
    {
      v6 = cf;
      v12 = cf;
      if (cf)
      {
        CFRetain(cf);
        v7 = 1;
        v13 = 1;
        CFRelease(v6);
      }
      else
      {
        v7 = 1;
        v13 = 1;
      }
    }
    else
    {
      v7 = 0;
      LOBYTE(v12) = 0;
      v13 = 0;
    }
    v8 = v11;
    if (v11)
      goto LABEL_20;
    while (1)
    {
      v8 = (_QWORD *)*a1;
      if (!*a1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        if (!v7)
          return;
        goto LABEL_14;
      }
      if (v5)
        break;
      __break(1u);
LABEL_20:
      WTF::fastFree((WTF *)(v8 - 2), v4);
    }
    WebCore::Payment::Payment();
    v9 = v15;
    *(_QWORD *)a2 = MEMORY[0x1E0DD8FF8] + 16;
    *(_QWORD *)(a2 + 8) = v9;
    if (v9)
      CFRetain(v9);
    *(_BYTE *)(a2 + 16) = 1;
    WebCore::Payment::~Payment((WebCore::Payment *)&cf);
    if (v13)
    {
LABEL_14:
      v10 = v12;
      v12 = 0;
      if (v10)
        CFRelease(v10);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_196E0F4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;
  void *v18;

  CFRelease(v16);
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), v18);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(IPC::Encoder *a1, WebCore::PaymentContact *this)
{
  PKContact *cf;

  WebCore::PaymentContact::pkContact(this);
  IPC::encodeObjectDirectly<PKContact>(a1, cf);
  if (cf)
    CFRelease(cf);
}

void sub_196E0F59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentContact,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  CFTypeRef v7;
  _QWORD *v8[2];
  CFTypeRef v9;
  unsigned __int8 v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    v11[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDF38])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)v8, v11, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, v8);
    IPC::decodeRequiringAllowedClasses<PKContact,PKContact*>(a1, (uint64_t)&v9);
    v5 = (unint64_t)v8[0];
    if (v8[0])
      goto LABEL_15;
    while (1)
    {
      if (!*a1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_8;
      }
      v5 = v10;
      if (v10)
        break;
      __break(1u);
LABEL_15:
      WTF::fastFree((WTF *)(v5 - 16), v4);
    }
    WebCore::PaymentContact::PaymentContact();
    v6 = v8[1];
    *(_QWORD *)a2 = MEMORY[0x1E0DD8F88] + 16;
    *(_QWORD *)(a2 + 8) = v6;
    if (v6)
      CFRetain(v6);
    *(_BYTE *)(a2 + 16) = 1;
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v8);
LABEL_8:
    if (v10)
    {
      v7 = v9;
      v9 = 0;
      if (v7)
        CFRelease(v7);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_196E0F6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  CFTypeRef v13;

  WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)&a9);
  if (a12)
  {
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::encode(IPC::Encoder *this, CFTypeRef *a2)
{
  objc_object *v3;

  v3 = (objc_object *)*a2;
  if (*a2)
    CFRetain(*a2);
  IPC::encodeObjectDirectly<PKPaymentMerchantSession>(this, v3);
  if (v3)
    CFRelease(v3);
}

void sub_196E0F788(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unint64_t v5;
  CFTypeRef v6;
  _QWORD *v7;
  CFTypeRef cf;
  unsigned __int8 v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    v10[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCE120])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, v10, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v7);
    IPC::decodeRequiringAllowedClasses<PKPaymentMerchantSession,PKPaymentMerchantSession*>(a1, (uint64_t)&cf);
    v5 = (unint64_t)v7;
    if (v7)
      goto LABEL_12;
    while (*a1)
    {
      v5 = v9;
      if (v9)
      {
        *(_QWORD *)a2 = cf;
        *(_BYTE *)(a2 + 8) = 1;
        return;
      }
      __break(1u);
LABEL_12:
      WTF::fastFree((WTF *)(v5 - 16), v4);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (v9)
    {
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_196E0F8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 3);
  LOBYTE(v2) = v2[32];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int i;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_27;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v20 = v4;
    v21 = 0;
    goto LABEL_28;
  }
  v8 = *v7;
  if (v8 >= 5)
    goto LABEL_29;
  for (i = v8 | 0x100; ; i = 0)
  {
    IPC::Decoder::decode<WTF::String>(a1, &v33);
    IPC::Decoder::decode<WTF::String>(a1, &v31);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v29);
    v4 = a1[1];
    v11 = (WTF::StringImpl *)*a1;
    v12 = a1[2] - *a1;
    if (v4 <= v12)
      break;
    v13 = (unsigned __int8 *)v11 + v12;
    a1[2] = (uint64_t)(v13 + 1);
    if (!v11)
    {
      v25 = v4;
      v26 = 0;
      goto LABEL_32;
    }
    v14 = *v13;
    if (v14 > 1)
      goto LABEL_33;
    v15 = 0;
    v16 = v14 != 0;
LABEL_9:
    if (i > 0xFF)
    {
      if (v34)
      {
        v17 = v33;
        v33 = 0;
        if (v32)
        {
          v18 = v31;
          v31 = 0;
          if (v30)
          {
            v19 = v29;
            v29 = 0;
            if (!v15)
            {
              *(_BYTE *)a2 = i;
              *(_QWORD *)(a2 + 8) = v17;
              *(_QWORD *)(a2 + 16) = v18;
              *(_QWORD *)(a2 + 24) = v19;
              *(_BYTE *)(a2 + 32) = v16;
              *(_BYTE *)(a2 + 40) = 1;
              goto LABEL_15;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_27:
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_28:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v5);
  }
  v25 = 0;
  v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  v27 = a1[3];
  if (v27)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      v26 = *a1;
      v25 = a1[1];
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
  }
LABEL_32:
  v4 = 0;
  v11 = 0;
  *a1 = 0;
  a1[1] = 0;
  v28 = a1[3];
  if (v28)
  {
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
      v11 = (WTF::StringImpl *)*a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v11 = 0;
    }
  }
LABEL_33:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v4)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v11);
      if (*a1)
      {
        v16 = 0;
        v15 = 1;
        goto LABEL_9;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_15:
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v34)
  {
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E0FC50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::SetCTM,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _OWORD v10[3];
  char v11;

  result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v10[2];
      v6 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 48) = v6;
      return result;
    }
LABEL_10:
    v6 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v7 = *a1;
  v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (_QWORD *)a1[3];
  if (result)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_10;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v7);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v5;

  v5 = *a2;
  IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, (int *)&v5);
  v5 = a2[1];
  return IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float>>(a1, (int *)&v5);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v3 = result;
  v15 = *a2;
  v5 = result[1];
  v4 = result[2];
  if ((v15 & 0xFF00000000) != 0)
  {
    if (v4 >= v5)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v4) = 1;
      result[2] = v4 + 1;
    }
    result = IPC::StreamConnectionEncoder::operator<<<int const&>(result, &v15);
    v4 = v3[2];
  }
  else if (v4 >= v5)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4++) = 0;
    result[2] = v4;
  }
  v6 = v3[1];
  if (!*((_BYTE *)a2 + 12))
  {
    if (v4 < v6)
    {
      *(_BYTE *)(*v3 + v4) = 0;
      v3[2] = v4 + 1;
      return result;
    }
    goto LABEL_21;
  }
  v7 = *((_DWORD *)a2 + 2);
  if (v4 >= v6)
  {
    v3[1] = 0;
  }
  else
  {
    *(_BYTE *)(*v3 + v4++) = 1;
    v3[2] = v4;
  }
  v8 = *v3 + v4;
  v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (v10)
  {
    v12 = v11 + v4;
    v13 = v12 + 4;
    if (v12 <= 0xFFFFFFFFFFFFFFFBLL && v13 <= v3[1])
    {
      *(_DWORD *)(*v3 + v12) = v7;
      v3[2] = v13;
      return result;
    }
LABEL_21:
    v3[1] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::decode<IPC::Decoder>(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_9;
  while (1)
  {
    result = IPC::ArgumentCoder<std::optional<float>,void>::decode<IPC::Decoder>(a1);
    v9 = v8;
    if (!v8)
    {
      v15 = *a1;
      v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          v18 = result;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
          v9 = 0;
          result = v18;
        }
      }
    }
    v10 = *a1;
    if (!*a1)
      break;
    if (v6 && v9)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  *(_BYTE *)a2 = 0;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<float>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::optional<float>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;

  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  v4 = *(_DWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v4;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 16);
      a1[2] = v11;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  void *__src;
  int v11;
  unsigned int v12;
  char v13;

  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &__src);
  result = IPC::Decoder::decode<float>(a1);
  v6 = *a1;
  if (!*a1)
    goto LABEL_14;
  LOBYTE(v6) = v13;
  if (!v13 || (v7 = result, (result & 0xFF00000000) == 0))
  {
    __break(1u);
LABEL_14:
    *(_BYTE *)a2 = 0;
    goto LABEL_7;
  }
  v8 = v12;
  if (v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    result = (uint64_t)memcpy(v9, __src, 8 * v12);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 12) = v8;
  LOBYTE(v6) = 1;
  *(_DWORD *)(a2 + 16) = v7;
LABEL_7:
  *(_BYTE *)(a2 + 24) = v6;
  if (v13)
  {
    result = (uint64_t)__src;
    if (__src)
    {
      __src = 0;
      v11 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_196E101D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<true,double,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E10258(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _OWORD v10[3];
  char v11;

  result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v10[2];
      v6 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 48) = v6;
      return result;
    }
LABEL_10:
    v6 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v7 = *a1;
  v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_10;
  result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v6;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v6 = *(_OWORD *)(a2 + 1);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v6);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v11;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (v5)
  {
    v7 = v6 + v2;
    v8 = v7 + 8;
    if (v7 > 0xFFFFFFFFFFFFFFF7 || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v7) = *(_QWORD *)a2;
      a1[2] = v8;
    }
  }
  v11 = *(_OWORD *)(a2 + 8);
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v11);
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t result;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v17 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v26 + 16))(v26);
        v16 = *a1;
        v17 = a1[1];
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
    }
LABEL_26:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_34;
    goto LABEL_27;
  }
  v8 = (uint64_t *)(v5 + v6);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    v17 = v4;
    v16 = 0;
    goto LABEL_26;
  }
  v9 = *v8;
  if ((unint64_t)(*v8 - 1) < 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = 0;
    goto LABEL_9;
  }
  while (1)
  {
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v4)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v5);
    v9 = 0;
    v10 = 1;
LABEL_9:
    v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v13 = v12;
    if (!v12)
    {
      v19 = *a1;
      v20 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v21 = a1[3];
      if (v21)
      {
        if (v20)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v16 = v15;
    if (!v15)
    {
      v22 = *a1;
      v23 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (v24)
      {
        if (v23)
        {
          v28 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
          v16 = 0;
          result = v28;
        }
      }
    }
    v17 = *a1;
    if (!*a1)
      break;
    if (v13 && v16 && !v10)
    {
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v11;
      v18 = 1;
      *(_QWORD *)(a2 + 16) = result;
      goto LABEL_16;
    }
LABEL_33:
    while (1)
    {
      __break(1u);
LABEL_34:
      if (!v17)
        break;
      result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16, v17);
      v5 = *a1;
      if (!*a1)
      {
        v4 = a1[1];
        goto LABEL_27;
      }
    }
    v4 = 0;
    v5 = 0;
  }
  v25 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v25)
    {
      result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      v17 = *a1;
      if (*a1)
        goto LABEL_33;
    }
  }
  v18 = 0;
  *(_BYTE *)a2 = 0;
LABEL_16:
  *(_BYTE *)(a2 + 24) = v18;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipOutToPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _BYTE v10[8];
  _BYTE v11[56];
  int v12;
  _BYTE v13[8];
  _BYTE v14[56];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v7 != 0)
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  if (*a1)
  {
    if (!v16)
      __break(1u);
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
  }
  return result;
}

void sub_196E10730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  if (a33)
  {
    v35 = *(unsigned int *)(v33 + 64);
    if ((_DWORD)v35 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::encode(uint64_t *a1, WebCore::Path *a2)
{
  uint64_t result;
  unint64_t v5;

  result = IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, a2);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *((_BYTE *)a2 + 72);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  _BYTE v12[8];
  _BYTE v13[56];
  int v14;
  BOOL v15;
  _BYTE v16[8];
  _BYTE v17[56];
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v16);
  if (!v19)
    goto LABEL_12;
  while (1)
  {
    result = IPC::Decoder::decode<WebCore::RotationDirection>(a1);
    if (!*a1)
    {
      *a3 = 0;
      a3[80] = 0;
      goto LABEL_7;
    }
    if (v19)
    {
      v6 = result;
      if ((unsigned __int16)result > 0xFFu)
        break;
    }
    __break(1u);
LABEL_12:
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
  }
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v13, (uint64_t)v17);
  v15 = v6 != 0;
  result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v13);
  a3[72] = v15;
  a3[80] = 1;
  if (v14 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v11, v13);
LABEL_7:
  if (v19)
  {
    if (v18 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v18])(v12, v17);
  }
  return result;
}

void sub_196E10980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  if (a32)
  {
    v34 = *(unsigned int *)(v32 + 64);
    if ((_DWORD)v34 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v34])(&a13, &a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode(IPC::Encoder *a1, __int128 *a2)
{
  void *v4;
  __int128 v6;

  v6 = *a2;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t *)&v6);
  v6 = a2[1];
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v6);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v6, *((_QWORD *)a2 + 4));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((char *)a1, v6);
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v6, v4);
}

void sub_196E10A64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode(uint64_t *a1, __int128 *a2)
{
  void *v4;
  __int128 v6;

  v6 = *a2;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v6);
  v6 = a2[1];
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v6);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v6, *((_QWORD *)a2 + 4));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode(a1, v6);
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v6, v4);
}

void sub_196E10AE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *result;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;

  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v33);
  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v6 = v5;
  if (!v5)
    goto LABEL_16;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
    v9 = v8;
    if (!v8)
    {
      v19 = *a1;
      v20 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v21 = a1[3];
      if (v21)
      {
        if (v20)
        {
          v24 = v7;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
          v9 = 0;
          v7 = v24;
        }
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_15;
      v30 = v4;
      v31 = v7;
      v32 = 1;
    }
    else
    {
      LOBYTE(v30) = 0;
      v32 = 0;
      v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23 && v22)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
    }
    result = IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>(a1, (uint64_t)&v28);
    if (!*a1)
      break;
    if (v34 && v10 && v29)
    {
      WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer();
      *(_OWORD *)a2 = v25;
      *(_OWORD *)(a2 + 16) = v26;
      v13 = v27;
      v27 = 0;
      *(_QWORD *)(a2 + 32) = v13;
      *(_BYTE *)(a2 + 40) = 1;
      result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v27, v14);
      goto LABEL_12;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_12:
  if (v29)
    return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v28, v12);
  return result;
}

void sub_196E10C90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, char a17, char a18)
{
  if ((_BYTE)a16)
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&a15, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Filter,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  const WebCore::PositionedGlyphs *v3;
  uint64_t v4;
  void *v5;
  _BYTE v6[48];

  v3 = (const WebCore::PositionedGlyphs *)(a2 + 1);
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  WebCore::PositionedGlyphs::PositionedGlyphs((WebCore::PositionedGlyphs *)v6, v3);
  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, (uint64_t)v6);
  WebCore::PositionedGlyphs::~PositionedGlyphs((WebCore::PositionedGlyphs *)v6, v5);
}

void sub_196E10DC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::PositionedGlyphs::~PositionedGlyphs((WebCore::PositionedGlyphs *)&a9, a2);
  _Unwind_Resume(a1);
}

void WebCore::PositionedGlyphs::~PositionedGlyphs(WebCore::PositionedGlyphs *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawDecomposedGlyphs,void>::encode(_QWORD *a1, uint64_t *a2)
{
  uint64_t v5;

  v5 = *a2;
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, &v5);
  v5 = a2[1];
  return IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, &v5);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  char *result;

  IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>();
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v5;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::encode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  char *v25;
  unint64_t *v27;
  uint64_t v28;
  __int128 v29;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
      if ((_DWORD)v4)
        goto LABEL_9;
LABEL_77:
      *(_QWORD *)&v29 = a2[2];
      return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v29);
    }
    *(_QWORD *)(*a1 + v10) = v4;
    a1[2] = v11;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if (!(_DWORD)v4)
    goto LABEL_77;
LABEL_9:
  v13 = *a2;
  v14 = 360 * v4;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v13 + 352);
    v16 = a1[2];
    if (v16 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v16++) = v15;
      a1[2] = v16;
    }
    if (v15 != 2)
      break;
    if (*(_DWORD *)(v13 + 352) != 2)
      goto LABEL_78;
    IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::encode(a1, (__int16 *)(v13 + 8));
LABEL_28:
    v13 += 360;
    v14 -= 360;
    if (!v14)
      goto LABEL_77;
  }
  if (v15 == 1)
  {
    if (*(_DWORD *)(v13 + 352) != 1)
      goto LABEL_78;
    goto LABEL_41;
  }
  if (v15)
  {
    if (v15 == 20)
    {
      if (*(_DWORD *)(v13 + 352) != 20)
        goto LABEL_78;
      v17 = *a1;
      v18 = *a1 + v16;
      v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      v8 = v19 >= v18;
      v20 = v19 - v18;
      if (v8)
      {
        v21 = v20 + v16;
        v22 = v20 + v16 + 8;
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_QWORD *)(v17 + v21) = *(_QWORD *)(v13 + 8);
          a1[2] = v22;
          v17 = *a1;
          v16 = v22;
        }
      }
      v24 = (_QWORD *)((v17 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v24 >= v17 + v16)
      {
        v25 = (char *)v24 - v17;
        if ((unint64_t)v24 - v17 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v25 + 8) > a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *v24 = *(_QWORD *)(v13 + 16);
          a1[2] = (uint64_t)(v25 + 8);
        }
      }
    }
    else
    {
      switch(v15)
      {
        case 3:
          if (*(_DWORD *)(v13 + 352) != 3)
            goto LABEL_78;
          goto LABEL_53;
        case 4:
          if (*(_DWORD *)(v13 + 352) != 4)
            goto LABEL_78;
          goto LABEL_28;
        case 5:
          if (*(_DWORD *)(v13 + 352) != 5)
            goto LABEL_78;
          goto LABEL_53;
        case 6:
          if (*(_DWORD *)(v13 + 352) != 6)
            goto LABEL_78;
          goto LABEL_55;
        case 7:
          if (*(_DWORD *)(v13 + 352) != 7)
            goto LABEL_78;
LABEL_53:
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, (_DWORD *)(v13 + 8));
          break;
        case 8:
          if (*(_DWORD *)(v13 + 352) != 8)
            goto LABEL_78;
LABEL_55:
          IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (_DWORD *)(v13 + 8));
          break;
        case 9:
          if (*(_DWORD *)(v13 + 352) != 9)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)(v13 + 8));
          break;
        case 10:
          if (*(_DWORD *)(v13 + 352) != 10)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::encode(a1, (WebCore::Path *)(v13 + 8));
          break;
        case 11:
          if (*(_DWORD *)(v13 + 352) != 11)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode(a1, v13 + 8);
          break;
        case 12:
          if (*(_DWORD *)(v13 + 352) != 12)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (_QWORD *)(v13 + 8));
          break;
        case 13:
          if (*(_DWORD *)(v13 + 352) != 13)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode((WTF::StringImpl *)a1, v13 + 8);
          break;
        case 14:
          if (*(_DWORD *)(v13 + 352) != 14)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode(a1, (__int128 *)(v13 + 8));
          break;
        case 15:
          if (*(_DWORD *)(v13 + 352) != 15)
            goto LABEL_78;
          v29 = *(_OWORD *)(v13 + 8);
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v29);
          break;
        case 16:
          if (*(_DWORD *)(v13 + 352) != 16)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode(a1, (__int128 *)(v13 + 8));
          break;
        case 17:
          if (*(_DWORD *)(v13 + 352) != 17)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode(a1, (_DWORD *)(v13 + 8));
          break;
        case 18:
          if (*(_DWORD *)(v13 + 352) != 18)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode(a1, (_DWORD *)(v13 + 8));
          break;
        case 19:
          if (*(_DWORD *)(v13 + 352) != 19)
            goto LABEL_78;
          IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(a1, (_QWORD *)(v13 + 8));
          break;
        default:
          IPC::ArgumentCoder<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul>(a1);
          goto LABEL_28;
      }
    }
    goto LABEL_28;
  }
  if (!*(_DWORD *)(v13 + 352))
  {
LABEL_41:
    IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(v13 + 8));
    goto LABEL_28;
  }
LABEL_78:
  v27 = (unint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return (uint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::decode(v27, v28);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];
  char v24;

  IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(v23);
  if (!v24)
    goto LABEL_11;
  while (1)
  {
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v5;
    if (!(_BYTE)v5)
    {
      v14 = *a1;
      v13 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v15 = a1[3];
      if (v15)
      {
        if (v13)
        {
          v16 = v5;
          v17 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
          v6 = 0;
          v5 = v16;
          result = v17;
        }
      }
    }
    v21 = result;
    v22 = (int)v5;
    if (!*a1)
      break;
    if (v24 && v6)
    {
      WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems();
      *(_QWORD *)a2 = v18;
      v7 = v19;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v20;
      *(_BYTE *)(a2 + 24) = 1;
      result = WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8);
      goto LABEL_7;
    }
    __break(1u);
LABEL_11:
    v9 = *a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_7:
  if (v24)
    return WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v5);
  return result;
}

void sub_196E113D0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 24))
    WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  __int128 v7;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v7 = *(_OWORD *)(a2 + 1);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v7);
  v7 = *(_OWORD *)(a2 + 3);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v7);
  v5 = *((_WORD *)a2 + 20);
  BYTE2(v7) = *((_BYTE *)a2 + 42);
  LOWORD(v7) = v5;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, (unsigned __int8 *)&v7);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int16 v12;
  __int128 v14;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v9) = *(_QWORD *)a2;
      a1[2] = v10;
    }
  }
  v14 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v14);
  v14 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v14);
  v12 = *(_WORD *)(a2 + 40);
  BYTE2(v14) = *(_BYTE *)(a2 + 42);
  LOWORD(v14) = v12;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, &v14);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unint64_t v53;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      if ((unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_41;
      v10 = 0;
      goto LABEL_9;
    }
    v39 = v4;
    v40 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_63;
  }
  while (1)
  {
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v39)
      {
        result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v40, v39);
        v5 = *a1;
        if (*a1)
          goto LABEL_62;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v4)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v5);
    v9 = 0;
    v10 = 1;
LABEL_9:
    v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v13 = v12;
    if (!v12)
    {
      v32 = *a1;
      v33 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v34 = a1[3];
      if (v34)
      {
        if (v33)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v15 = result;
    v17 = v16;
    if (!v16)
    {
      v35 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result)
      {
        if (v4)
        {
          v36 = v15;
          result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v35);
          v15 = v36;
        }
      }
    }
    v52 = v15;
    v53 = *a1;
    if (*a1)
    {
      if (!v13 || !v17)
        goto LABEL_62;
      v18 = v11 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v11) = 0;
      v18 = 0;
      v37 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v37)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v38 + 16))(v38, 0);
        LOBYTE(v11) = 0;
        v18 = 0;
      }
    }
    v51 = v11;
    v19 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v21 = v20;
    if (!v20)
    {
      v43 = *a1;
      v44 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v44)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v22 = result;
    v24 = v23;
    if (!v23)
    {
      v46 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result)
      {
        if (v4)
          result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v46);
      }
    }
    v25 = *a1;
    v50 = v22;
    if (*a1)
    {
      if (!v21 || !v24)
        goto LABEL_62;
      v26 = v9;
      v27 = v19 & 0xFFFFFFFFFFFFFF00;
      v28 = v19;
    }
    else
    {
      v26 = v9;
      v28 = 0;
      v27 = 0;
      v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v48 = a1[3];
      if (v48)
      {
        if (v47)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, 0);
        v28 = 0;
        v27 = 0;
      }
    }
    result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
    v29 = result;
    v30 = BYTE3(result);
    if (!BYTE3(result))
    {
      v49 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result)
      {
        if (v4)
          result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v49);
      }
    }
    v31 = *a1;
    if (!*a1)
      break;
    if (!v10 && v53 && v25 && v30)
    {
      *(_QWORD *)a2 = v26;
      *(_QWORD *)(a2 + 8) = v18 | v51;
      *(_QWORD *)(a2 + 16) = v52;
      *(_QWORD *)(a2 + 24) = v27 | v28;
      *(_QWORD *)(a2 + 32) = v50;
      *(_WORD *)(a2 + 40) = v29;
      LOBYTE(v31) = 1;
      *(_BYTE *)(a2 + 42) = BYTE2(v29);
      goto LABEL_28;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v40 = *a1;
      v39 = a1[1];
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
LABEL_28:
  *(_BYTE *)(a2 + 48) = v31;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawNativeImage,void>::encode(IPC::Encoder *a1, int *a2)
{
  uint64_t v4;
  __int16 v5;
  __int16 v7;
  char v8;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2 + 6);
  v5 = *((_WORD *)a2 + 20);
  v8 = *((_BYTE *)a2 + 42);
  v7 = v5;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, (unsigned __int8 *)&v7);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawNativeImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  _DWORD *v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  int v38;
  _DWORD *v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  __int16 v43;
  __int16 v45;
  char v46;

  v2 = *a1;
  v3 = a1[2];
  v4 = *a1 + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v8) = *(_QWORD *)a2;
      a1[2] = v9;
      v2 = *a1;
      v3 = v9;
    }
  }
  v11 = *(_DWORD *)(a2 + 12);
  v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v2 + v3);
  if (v12 >= v2 + v3)
  {
    v14 = v12 - v2;
    v15 = v13 + v3 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v14) = *(_DWORD *)(a2 + 8);
      a1[2] = v15;
      v2 = *a1;
      v3 = v15;
    }
  }
  v17 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 - (v2 + v3);
  if (v17 >= v2 + v3)
  {
    v19 = v17 - v2;
    v20 = v18 + v3 + 4;
    if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v19) = v11;
      a1[2] = v20;
      v2 = *a1;
      v3 = v20;
    }
  }
  v22 = *(_DWORD *)(a2 + 20);
  v23 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v2 + v3);
  if (v23 >= v2 + v3)
  {
    v25 = v23 - v2;
    v26 = v24 + v3 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v25) = *(_DWORD *)(a2 + 16);
      a1[2] = v26;
      v2 = *a1;
      v3 = v26;
    }
  }
  v28 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 - (v2 + v3);
  if (v28 >= v2 + v3)
  {
    v30 = v28 - v2;
    v31 = v29 + v3 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v30) = v22;
      a1[2] = v31;
      v2 = *a1;
      v3 = v31;
    }
  }
  v33 = *(_DWORD *)(a2 + 28);
  v34 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v34 >= v2 + v3)
  {
    v35 = (char *)v34 - v2;
    if ((unint64_t)v34 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v34 = *(_DWORD *)(a2 + 24);
      a1[2] = (uint64_t)(v35 + 4);
      v2 = *a1;
      v3 = (unint64_t)(v35 + 4);
    }
  }
  v36 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v36 >= v2 + v3)
  {
    v37 = (char *)v36 - v2;
    if ((unint64_t)v36 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v37 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v36 = v33;
      a1[2] = (uint64_t)(v37 + 4);
      v2 = *a1;
      v3 = (unint64_t)(v37 + 4);
    }
  }
  v38 = *(_DWORD *)(a2 + 36);
  v39 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v39 >= v2 + v3)
  {
    v40 = (char *)v39 - v2;
    if ((unint64_t)v39 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v39 = *(_DWORD *)(a2 + 32);
      a1[2] = (uint64_t)(v40 + 4);
      v2 = *a1;
      v3 = (unint64_t)(v40 + 4);
    }
  }
  v41 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v2 + v3)
  {
    v42 = (char *)v41 - v2;
    if ((unint64_t)v41 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v41 = v38;
      a1[2] = (uint64_t)(v42 + 4);
    }
  }
  v43 = *(_WORD *)(a2 + 40);
  v46 = *(_BYTE *)(a2 + 42);
  v45 = v43;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, &v45);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawSystemImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v27;

  result = IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(a1, *(WebCore::ARKitBadgeSystemImage **)a2);
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *a1;
  v7 = a1[2];
  v8 = *a1 + v7;
  v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (v10)
  {
    v12 = v11 + v7;
    v13 = v11 + v7 + 4;
    if (v12 > 0xFFFFFFFFFFFFFFFBLL || v13 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v12) = *(_DWORD *)(a2 + 8);
      a1[2] = v13;
      v6 = *a1;
      v7 = v13;
    }
  }
  v15 = (v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v16 = v15 - (v6 + v7);
  if (v15 >= v6 + v7)
  {
    v17 = v15 - v6;
    v18 = v16 + v7 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v17) = v5;
      a1[2] = v18;
      v6 = *a1;
      v7 = v18;
    }
  }
  v20 = *(_DWORD *)(a2 + 20);
  v21 = (v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v6 + v7);
  if (v21 >= v6 + v7)
  {
    v23 = v21 - v6;
    v24 = v22 + v7 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v23) = *(_DWORD *)(a2 + 16);
      a1[2] = v24;
      v6 = *a1;
      v7 = v24;
    }
  }
  v26 = (_DWORD *)((v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v6 + v7)
  {
    v27 = (unint64_t)v26 - v6 + 4;
    if ((unint64_t)v26 - v6 > 0xFFFFFFFFFFFFFFFBLL || v27 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v26 = v20;
      a1[2] = v27;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawSystemImage,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  char v20;

  IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>(a1, &v19);
  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      if (v12)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    }
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v8;
  if (!v8)
  {
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v15)
      {
        v18 = result;
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
        v9 = 0;
        result = v18;
      }
    }
  }
  if (*a1)
  {
    if (v6 && v9 && v20)
    {
      v10 = v19;
      ++v19[2];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v4;
      *(_QWORD *)(a2 + 16) = result;
      *(_BYTE *)(a2 + 24) = 1;
      v19 = 0;
LABEL_8:
      if (v10[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      --v10[2];
      return result;
    }
LABEL_24:
    __break(1u);
    return result;
  }
  v17 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v17)
    {
      result = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
      if (*a1)
        goto LABEL_24;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v20)
  {
    v10 = v19;
    v19 = 0;
    if (v10)
      goto LABEL_8;
  }
  return result;
}

void sub_196E11E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, char a12)
{
  if (a12 && a11)
  {
    if (a11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[2];
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SystemImage,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *a2;
  v3 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v5);
  v5 = a2[1];
  return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(v3, &v5);
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_9;
  while (1)
  {
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v15 = *a1;
      v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          v18 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
          v9 = 0;
          result = v18;
        }
      }
    }
    v10 = *a1;
    if (!*a1)
      break;
    if (v6 && v9)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  *(_BYTE *)a2 = 0;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  __int128 v11;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v11 = *(_OWORD *)(a2 + 1);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v11);
  v11 = *(_OWORD *)(a2 + 3);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v11);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, a2 + 5);
  v5 = *((_DWORD *)a2 + 22);
  v6 = *((_DWORD *)a2 + 23);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_DWORD *)a2 + 24);
  v8 = *((_DWORD *)a2 + 25);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *((_WORD *)a2 + 52);
  BYTE2(v11) = *((_BYTE *)a2 + 106);
  LOWORD(v11) = v9;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, (unsigned __int8 *)&v11);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  __int16 v14;
  __int128 v16;

  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v9) = *(_QWORD *)a2;
      a1[2] = v10;
    }
  }
  v16 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v16);
  v16 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v16);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (_QWORD *)(a2 + 40));
  *(_QWORD *)&v16 = *(_QWORD *)(a2 + 88);
  v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v16);
  *(_QWORD *)&v16 = *(_QWORD *)(a2 + 96);
  v13 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(v12, &v16);
  v14 = *(_WORD *)(a2 + 104);
  BYTE2(v16) = *(_BYTE *)(a2 + 106);
  LOWORD(v16) = v14;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(v13, &v16);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int8 v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[48];
  unsigned __int8 v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  char v72;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (_QWORD *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      if ((unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_45;
      v9 = 0;
      goto LABEL_9;
    }
    v37 = v4;
    v38 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      goto LABEL_72;
  }
  while (1)
  {
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v37)
      {
        result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v38, v37);
        v5 = *a1;
        if (*a1)
          goto LABEL_71;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_45:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v4)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v40 + 16))(v40, v5);
    v9 = 1;
LABEL_9:
    v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v12 = v11;
    if (!v11)
    {
      v29 = *a1;
      v30 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v31 = a1[3];
      if (v31)
      {
        if (v30)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v15 = v14;
    if (!v14)
    {
      v32 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33)
      {
        if (v4)
        {
          v34 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(a1[3], v32);
          result = v34;
        }
      }
    }
    v16 = *a1;
    if (*a1)
    {
      if (!v12 || !v15)
        goto LABEL_71;
      v70 = v10;
      v71 = result;
      v72 = 1;
    }
    else
    {
      LOBYTE(v70) = 0;
      v72 = 0;
      v35 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v36 = a1[3];
      if (v36 && v35)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v36 + 16))(v36, 0);
    }
    v17 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v19 = v18;
    if (!v18)
    {
      v41 = *a1;
      v42 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43)
      {
        if (v42)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
      }
    }
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v21 = v20;
    if (!v20)
    {
      v44 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v4)
        {
          v46 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v45 + 16))(a1[3], v44);
          result = v46;
        }
      }
    }
    v22 = *a1;
    if (*a1)
    {
      if (!v19 || !v21)
        goto LABEL_71;
      v67 = v17;
      v68 = result;
      v69 = 1;
    }
    else
    {
      LOBYTE(v67) = 0;
      v69 = 0;
      v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v48 = a1[3];
      if (v48 && v47)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, 0);
    }
    IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v65);
    v23 = v66;
    if (!v66)
    {
      v49 = *a1;
      v50 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v51 = a1[3];
      if (v51)
      {
        if (v50)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
      }
    }
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v25 = v24;
    if (!v24)
    {
      v52 = *a1;
      v53 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54)
      {
        if (v53)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v54 + 16))(v54, v52);
      }
    }
    IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v27 = v26;
    result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
    v28 = BYTE3(result);
    if (!BYTE3(result))
    {
      v55 = *a1;
      v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v56 = a1[3];
      if (v56)
      {
        if (v4)
        {
          v57 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v56 + 16))(v56, v55);
          v28 = 0;
          result = v57;
        }
      }
    }
    if (!*a1)
      break;
    if (!v9 && v16 && v22 && v23 && v25 && v27 && v28)
    {
      result = WebCore::DisplayList::DrawPattern::DrawPattern();
      *(_OWORD *)(a2 + 64) = v62;
      *(_OWORD *)(a2 + 80) = v63;
      *(_OWORD *)(a2 + 96) = v64;
      *(_OWORD *)a2 = v58;
      *(_OWORD *)(a2 + 16) = v59;
      *(_OWORD *)(a2 + 32) = v60;
      *(_OWORD *)(a2 + 48) = v61;
      *(_BYTE *)(a2 + 112) = 1;
      return result;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v38 = *a1;
      v37 = a1[1];
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 112) = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::encode(_QWORD *result, __int16 *a2)
{
  unint64_t v2;
  __int16 v3;

  v2 = result[2];
  if (v2 >= result[1] || (v3 = *a2, *(_BYTE *)(*result + v2) = *a2, result[2] = v2 + 1, v2 + 1 >= result[1]))
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2 + 1) = HIBYTE(v3);
    result[2] = v2 + 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::decode(uint64_t *a1)
{
  uint64_t result;
  __int16 v3;
  uint64_t v4;

  result = IPC::Decoder::decode<WebCore::CompositeMode>(a1);
  v4 = *a1;
  if (!*a1)
  {
    LOBYTE(result) = 0;
    return (unsigned __int16)(result | (unsigned __int16)(v3 << 8)) | ((_DWORD)v4 << 16);
  }
  if ((result & 0xFF0000) != 0)
  {
    v3 = result >> 8;
    LODWORD(v4) = 1;
    return (unsigned __int16)(result | (unsigned __int16)(v3 << 8)) | ((_DWORD)v4 << 16);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::CompositeMode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::encode(IPC::Encoder *a1, __int128 *a2)
{
  int v4;
  char *result;
  __int128 v6;

  v6 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v6);
  v4 = *((_DWORD *)a2 + 4);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v4;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::encode(uint64_t *a1, __int128 *a2)
{
  uint64_t *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;

  v13 = *a2;
  result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v13);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *((_DWORD *)a2 + 4);
      a1[2] = v11;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v13 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v8 = result;
  v10 = v9;
  if (!v9)
  {
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v17)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
        v10 = 0;
      }
    }
  }
  if (!*a1)
  {
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    result = IPC::Decoder::decode<float>(a1);
    if (!*a1)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!v6 || !v10)
    goto LABEL_20;
  result = IPC::Decoder::decode<float>(a1);
  if (!*a1)
  {
LABEL_21:
    v11 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_9;
  }
  if ((result & 0xFF00000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v8;
  v11 = 1;
  *(_DWORD *)(a2 + 16) = result;
LABEL_9:
  *(_BYTE *)(a2 + 20) = v11;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *((const void **)v2 + 2), v2[7]);
  v8 = v2[8];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  v9 = *((_BYTE *)v2 + 36);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_BYTE *)v2 + 37);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  LOBYTE(v2) = *((_BYTE *)v2 + 38);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  unint64_t v14;
  _QWORD *result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)a2;
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v13 = *(_DWORD *)(a2 + 4);
      a1[2] = v14;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)(a2 + 8));
  result = IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  v17 = a1[2];
  v18 = *a1 + v17;
  v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v19 >= v18;
  v20 = v19 - v18;
  if (v8)
  {
    v21 = v20 + v17;
    v22 = v20 + v17 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v21) = *(_DWORD *)(a2 + 32);
      a1[2] = v22;
      v17 = v22;
    }
  }
  if (v17 >= a1[1]
    || (*(_BYTE *)(*a1 + v17) = *(_BYTE *)(a2 + 36), a1[2] = v17 + 1, v17 + 1 >= a1[1])
    || (*(_BYTE *)(*a1 + v17 + 1) = *(_BYTE *)(a2 + 37), a1[2] = v17 + 2, v17 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v17 + 2) = *(_BYTE *)(a2 + 38);
    a1[2] = v17 + 3;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[7];
  WTF *v60;
  int v61;
  char v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  v7 = v5;
  if (!(_BYTE)v5)
    goto LABEL_27;
  while (1)
  {
    v65 = result;
    v66 = v6;
    v8 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    v6 = v9;
    v63 = v8;
    v64 = v9;
    IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, &v60);
    result = IPC::Decoder::decode<float>(a1);
    v10 = a1[1];
    v11 = (char *)*a1;
    v12 = a1[2] - *a1;
    if (v10 <= v12)
    {
      v25 = 0;
      v26 = 0;
      *a1 = 0;
      a1[1] = 0;
      v27 = a1[3];
      if (v27)
      {
        v53 = result;
        if (v10)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v27 + 16))(v27);
          v26 = *a1;
          v25 = a1[1];
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        result = v53;
      }
      goto LABEL_33;
    }
    v13 = &v11[v12];
    v14 = (uint64_t)&v11[v12 + 1];
    a1[2] = v14;
    if (!v11)
    {
      v25 = v10;
      v26 = 0;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28)
      {
        v50 = result;
        if (v25)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
          v11 = (char *)*a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        result = v50;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_35;
    }
    if (*v13 < 2u)
    {
      v15 = 0;
      goto LABEL_6;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (!v29)
    {
      v11 = 0;
      v15 = 1;
      goto LABEL_37;
    }
    v47 = result;
    if (!v10)
    {
      v29 = 0;
      v11 = 0;
      v15 = 1;
LABEL_37:
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30)
      {
        v42 = v15;
        v51 = result;
        if (v29)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v30 + 16))(v30, v11, v29);
          v11 = (char *)*a1;
          v10 = a1[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        result = v51;
        v15 = v42;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      goto LABEL_39;
    }
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v29 + 16))(v29, v11);
    v11 = (char *)*a1;
    v10 = a1[1];
    v15 = 1;
    v14 = a1[2];
    result = v47;
LABEL_6:
    v16 = v14 - (_QWORD)v11;
    if (v10 <= v16)
    {
      v45 = v15;
      v55 = result;
      v29 = 0;
      v36 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v36 && v10)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v36 + 16))(v36);
        v11 = (char *)*a1;
        v29 = a1[1];
      }
      else
      {
        v11 = 0;
      }
      result = v55;
      v15 = v45;
      goto LABEL_37;
    }
    v17 = &v11[v16];
    a1[2] = (unint64_t)(v17 + 1);
    if (!v11)
    {
      v29 = v10;
      goto LABEL_37;
    }
    if (*v17 < 2u)
    {
      v18 = 0;
      goto LABEL_10;
    }
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31)
    {
      v11 = 0;
      v10 = 0;
      v18 = 1;
      goto LABEL_41;
    }
    v40 = v15;
    v48 = result;
    if (!v10)
      break;
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v31 + 16))(v31, v11);
    v11 = (char *)*a1;
    v10 = a1[1];
    v18 = 1;
    result = v48;
    v15 = v40;
LABEL_10:
    if (v10 <= a1[2] - (unint64_t)v11)
      goto LABEL_41;
    v19 = (unsigned __int8 *)a1[2];
    a1[2] = (unint64_t)(v19 + 1);
    if (!v11)
    {
      v33 = 0;
      goto LABEL_43;
    }
    if (*v19 >= 6u)
      goto LABEL_45;
    v20 = 0;
LABEL_14:
    if (v7 && (_BYTE)v6 && v62 && (result & 0xFF00000000) != 0 && !v15 && !v18 && !v20)
    {
      result = WebCore::DisplayList::DrawLinesForText::DrawLinesForText();
      *(_OWORD *)a2 = v56;
      *(_QWORD *)(a2 + 16) = v57;
      *(_QWORD *)(a2 + 24) = v58;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)v59;
      *(_DWORD *)(a2 + 35) = *(_DWORD *)&v59[3];
      *(_BYTE *)(a2 + 40) = 1;
      goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    v21 = *a1;
    v22 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
      v24 = v22 == 0;
    else
      v24 = 1;
    if (!v24)
    {
      v46 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
      result = v46;
    }
  }
  v11 = 0;
  v18 = 1;
LABEL_41:
  *a1 = 0;
  a1[1] = 0;
  v32 = a1[3];
  if (v32)
  {
    v39 = v18;
    v44 = v15;
    v54 = result;
    if (v10)
    {
      (*(void (**)(unint64_t, char *))(*(_QWORD *)v32 + 16))(v32, v11);
      v33 = *a1;
      v10 = a1[1];
    }
    else
    {
      v33 = 0;
    }
    result = v54;
    v15 = v44;
    v18 = v39;
  }
  else
  {
    v33 = 0;
    v10 = 0;
  }
LABEL_43:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34)
  {
    v38 = v18;
    v43 = v15;
    v52 = result;
    if (v10)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
      v11 = (char *)*a1;
      v10 = a1[1];
    }
    else
    {
      v11 = 0;
    }
    result = v52;
    v15 = v43;
    v18 = v38;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
LABEL_45:
  *a1 = 0;
  a1[1] = 0;
  v35 = a1[3];
  if (v35)
  {
    if (v10)
    {
      v37 = v18;
      v41 = v15;
      v49 = result;
      (*(void (**)(unint64_t, char *))(*(_QWORD *)v35 + 16))(v35, v11);
      result = v49;
      v15 = v41;
      v18 = v37;
      if (*a1)
      {
        v20 = 1;
        goto LABEL_14;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_22:
  if (v62)
  {
    result = (uint64_t)v60;
    if (v60)
    {
      v60 = 0;
      v61 = 0;
      return WTF::fastFree((WTF *)result, v11);
    }
  }
  return result;
}

void sub_196E130DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,char a21)
{
  if (a21)
  {
    if (a18)
      WTF::fastFree(a18, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawEllipse,void>::encode(uint64_t *a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v3);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _BYTE v10[8];
  _BYTE v11[56];
  int v12;
  _BYTE v13[8];
  _BYTE v14[56];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v7 != 0)
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  if (*a1)
  {
    if (!v16)
      __break(1u);
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
  }
  return result;
}

void sub_196E1327C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  if (a33)
  {
    v35 = *(unsigned int *)(v33 + 64);
    if ((_DWORD)v35 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  int v4;

  IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)a2);
  v4 = a2[18];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 20));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::encode(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)a2);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = a2[18];
      a1[2] = v10;
    }
  }
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 20));
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  Color v18;
  unsigned __int8 v19;
  char v20;
  char v21[8];
  _BYTE v22[56];
  int v23;
  int v24;
  uint64_t v25;
  char v26[8];
  _BYTE v27[56];
  int v28;
  unsigned __int8 v29;
  uint64_t v30;

  v3 = (uint64_t *)a1;
  v30 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v26);
  if (!v29)
  {
    v12 = *v3;
    v13 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v14 = v3[3];
    if (v14 && v13 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  v5 = IPC::Decoder::decode<float>(v3);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v3, &v18);
  if (!v19)
  {
    v6 = (void *)*v3;
    v16 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v17 = v3[3];
    if (v17)
    {
      if (v16)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v17 + 16))(v17, v6);
    }
  }
  if (!*v3)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 88) = 0;
    goto LABEL_10;
  }
  v7 = v29;
  if (!v29 || (v5 & 0xFF00000000) == 0 || (v7 = v19) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v3 = (uint64_t *)v22;
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v22, (uint64_t)v27);
  v24 = v5;
  WebCore::Color::Color((WebCore::Color *)&v25, &v18);
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](a3 + 8, (uint64_t)v22);
  *(_DWORD *)(a3 + 72) = v24;
  WebCore::Color::Color();
  *(_BYTE *)(a3 + 88) = 1;
  v7 = v25;
  if ((v25 & 0x8000000000000) != 0)
  {
LABEL_15:
    v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  if (v23 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v23])(&v20, v3);
LABEL_10:
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v6);
  if (v29)
  {
    if (v28 != -1)
      return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v28])(v21, v27);
  }
  return result;
}

void sub_196E135D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,char a34)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  if (a34)
  {
    if (a32 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a32])(&a13, &a25);
  }
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  int v4;
  int v5;

  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  v4 = a2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[5];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::encode(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  unint64_t v14;

  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = a2[4];
      a1[2] = v11;
      v4 = *a1;
      v5 = v11;
    }
  }
  v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v13 = a2[5];
      a1[2] = v14;
    }
  }
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
}

WTF *IPC::ArgumentCoder<WebCore::DisplayList::DrawFocusRingRects,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF *result;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  Color v22;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  unsigned __int8 v28;
  WTF *v29;
  uint64_t v30;
  unsigned __int8 v31;

  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v29);
  v5 = IPC::Decoder::decode<float>(a1);
  v6 = IPC::Decoder::decode<float>(a1);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, v27);
  if (!v28)
  {
    v7 = (void *)*a1;
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v20)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v21 + 16))(v21, v7);
    }
  }
  if (!*a1)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    goto LABEL_11;
  }
  v8 = v31;
  if (!v31 || (v5 & 0xFF00000000) == 0 || (v6 & 0xFF00000000) == 0 || (v8 = v28) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  WebCore::Color::Color();
  v23 = v29;
  v9 = v30;
  v29 = 0;
  v30 = 0;
  v24 = v9;
  v25 = __PAIR64__(v6, v5);
  WebCore::Color::Color((WebCore::Color *)&v26, &v22);
  *(_QWORD *)a3 = v23;
  v10 = v24;
  v23 = 0;
  v24 = 0;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v25;
  WebCore::Color::Color();
  *(_BYTE *)(a3 + 32) = 1;
  v8 = v26;
  if ((v26 & 0x8000000000000) != 0)
  {
LABEL_16:
    v14 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v7);
    }
  }
  v11 = v23;
  if (v23)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v11, v7);
  }
  if ((v22.m_colorAndFlags & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v22.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v7);
    }
  }
LABEL_11:
  result = (WTF *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v7);
  if (v31)
  {
    result = v29;
    if (v29)
    {
      v29 = 0;
      LODWORD(v30) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

void sub_196E139AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, int a18, char a19)
{
  void *v20;
  WTF *v21;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  if (a19)
  {
    v21 = a16;
    if (a16)
    {
      a16 = 0;
      a17 = 0;
      WTF::fastFree(v21, v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRect,void>::encode(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *result;
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *(_DWORD *)a2;
      result[2] = v10;
      v3 = *result;
      v4 = v10;
    }
  }
  v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    v14 = v12 - v3;
    v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      v3 = *result;
      v4 = v15;
    }
  }
  v17 = *(_DWORD *)(a2 + 12);
  v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    v20 = v18 - v3;
    v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v20) = *(_DWORD *)(a2 + 8);
      result[2] = v21;
      v3 = *result;
      v4 = v21;
    }
  }
  v23 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v3 + v4);
  if (v23 >= v3 + v4)
  {
    v25 = v23 - v3;
    v26 = v24 + v4 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v25) = v17;
      result[2] = v26;
      v4 = v26;
    }
  }
  if (v4 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4) = *(_BYTE *)(a2 + 16);
    result[2] = v4 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v13 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v8 = result;
  v10 = v9;
  if (!v9)
  {
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v17)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
        v10 = 0;
      }
    }
  }
  if (!*a1)
  {
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    result = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
    if (!*a1)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!v6 || !v10)
    goto LABEL_20;
  result = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
  if (!*a1)
  {
LABEL_21:
    v11 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_9;
  }
  if ((unsigned __int16)result < 0x100u)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = result != 0;
  v11 = 1;
LABEL_9:
  *(_BYTE *)(a2 + 20) = v11;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::encode(IPC::Encoder *a1, __int128 *a2)
{
  WebCore::Color *v3;
  __int128 v5;

  v3 = (WebCore::Color *)(a2 + 1);
  v5 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v5);
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v3);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::encode(uint64_t *a1, __int128 *a2)
{
  WebCore::Color *v3;
  __int128 v5;

  v3 = (WebCore::Color *)(a2 + 1);
  v5 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v5);
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v3);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithColor,void>::decode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  Color v28;
  unsigned __int8 v29;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18 && v17 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
  }
  v8 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v20)
      {
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v21 + 16))(v21, v7);
        v9 = 0;
      }
    }
  }
  v10 = *a1;
  if (*a1)
  {
    if (!v6 || !v9)
      goto LABEL_13;
    v11 = v4 & 0xFFFFFFFFFFFFFF00;
    v4 = v4;
  }
  else
  {
    v4 = 0;
    v11 = 0;
    v22 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v22)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
      v4 = 0;
      v11 = 0;
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v28);
  if (!v29)
  {
    v7 = (void *)*a1;
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v25 + 16))(v25, v7);
    }
  }
  v9 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    a2[24] = 0;
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
  }
  if (v10)
  {
    v9 = v29;
    if (v29)
    {
      *(_QWORD *)&v26 = v11 | v4;
      *((_QWORD *)&v26 + 1) = v8;
      WebCore::Color::Color((WebCore::Color *)&v27, &v28);
      *(_OWORD *)a2 = v26;
      WebCore::Color::Color();
      a2[24] = 1;
      v9 = v27;
      if ((v27 & 0x8000000000000) == 0)
        return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
      goto LABEL_14;
    }
  }
LABEL_13:
  __break(1u);
LABEL_14:
  v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v7);
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
}

void sub_196E13F58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_QWORD *IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Gradient,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *((_QWORD *)v2 + 2));
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (uint64_t *)v2 + 3);
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  unint64_t v26;
  uint64_t *result;
  unint64_t v29;

  v4 = *(_DWORD *)(a2 + 4);
  v5 = *a1;
  v6 = a1[2];
  v7 = *a1 + v6;
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v11 = v10 + v6;
    v12 = v10 + v6 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v11) = *(_DWORD *)a2;
      a1[2] = v12;
      v5 = *a1;
      v6 = v12;
    }
  }
  v14 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v5 + v6);
  if (v14 >= v5 + v6)
  {
    v16 = v14 - v5;
    v17 = v15 + v6 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v16) = v4;
      a1[2] = v17;
      v5 = *a1;
      v6 = v17;
    }
  }
  v19 = *(_DWORD *)(a2 + 12);
  v20 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 - (v5 + v6);
  if (v20 >= v5 + v6)
  {
    v22 = v20 - v5;
    v23 = v21 + v6 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v22) = *(_DWORD *)(a2 + 8);
      a1[2] = v23;
      v5 = *a1;
      v6 = v23;
    }
  }
  v25 = (_DWORD *)((v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v5 + v6)
  {
    v26 = (unint64_t)v25 - v5 + 4;
    if ((unint64_t)v25 - v5 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v25 = v19;
      a1[2] = v26;
    }
  }
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *(_QWORD *)(a2 + 16));
  result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (_QWORD *)(a2 + 24));
  v29 = a1[2];
  if (v29 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v29) = *(_BYTE *)(a2 + 72);
    a1[2] = v29 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *result;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  _BYTE v34[48];
  unsigned __int8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_18;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v19 = *a1;
      v20 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v21 = a1[3];
      if (v21)
      {
        if (v20)
        {
          v27 = v7;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
          v9 = 0;
          v7 = v27;
        }
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_17;
      v38 = v4;
      v39 = v7;
      v40 = 1;
    }
    else
    {
      LOBYTE(v38) = 0;
      v40 = 0;
      v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23 && v22)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
    }
    IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(a1, (uint64_t)&v36);
    IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v34);
    v4 = v35;
    if (!v35)
    {
      v24 = *a1;
      v25 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (v26)
      {
        if (v25)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
      }
    }
    result = (uint64_t *)IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a1);
    if (!*a1)
      break;
    if (v10 && v37 && (_DWORD)v4 && (unsigned __int16)result > 0xFFu)
    {
      WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform();
      *(_OWORD *)a2 = v28;
      v13 = v29;
      v29 = 0;
      *(_QWORD *)(a2 + 16) = v13;
      *(_OWORD *)(a2 + 24) = v30;
      *(_OWORD *)(a2 + 40) = v31;
      *(_OWORD *)(a2 + 56) = v32;
      *(_BYTE *)(a2 + 72) = v33;
      *(_BYTE *)(a2 + 80) = 1;
      result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v29, v14);
      goto LABEL_14;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
LABEL_14:
  if (v37)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v36, v12);
  return result;
}

void sub_196E143C8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 80))
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)(v2 - 88), a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::encode(IPC::Encoder *a1, _OWORD *a2)
{
  _BYTE *v2;
  char v4;
  char *result;
  __int128 v6;

  v2 = a2;
  v6 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v6);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 16));
  v4 = v2[24];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[25];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::encode(uint64_t *a1, __int128 *a2)
{
  WebCore::Color *v4;
  uint64_t *result;
  unint64_t v6;
  __int128 v7;

  v4 = (WebCore::Color *)(a2 + 1);
  v7 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v7);
  result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, v4);
  v6 = a1[2];
  if (v6 >= a1[1] || (*(_BYTE *)(*a1 + v6) = *((_BYTE *)a2 + 24), a1[2] = v6 + 1, v6 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v6 + 1) = *((_BYTE *)a2 + 25);
    a1[2] = v6 + 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillCompositedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  Color v46;
  char v47;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v25 = *a1;
    v26 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v26 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
  }
  v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v10 = v7;
  v12 = v11;
  if (!v11)
  {
    v29 = *a1;
    v30 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      if (v30)
        v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v29);
    }
  }
  v13 = *a1;
  if (!*a1)
  {
    LOBYTE(v4) = 0;
    v6 = 0;
    v31 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v31)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v32 + 16))(v32, 0);
      LOBYTE(v4) = 0;
      v6 = 0;
    }
LABEL_7:
    v7 = (uint64_t)IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v46);
    if (!v47)
    {
      v33 = *a1;
      v34 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v7 = a1[3];
      if (v7)
      {
        if (v34)
          v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v33);
      }
    }
    v14 = a1[1];
    v15 = (char *)*a1;
    v16 = a1[2] - *a1;
    if (v14 <= v16)
    {
      v8 = 0;
      v9 = 0;
      *a1 = 0;
      a1[1] = 0;
      v35 = a1[3];
      if (v35)
      {
        if (v14)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v35 + 16))(v35);
          v9 = *a1;
          v8 = a1[1];
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
      }
    }
    else
    {
      v17 = &v15[v16];
      a1[2] = (unint64_t)(v17 + 1);
      if (v15)
      {
        v18 = *v17;
        if (v18 >= 0xE)
          goto LABEL_42;
        v9 = 0;
        goto LABEL_12;
      }
      v8 = v14;
      v9 = 0;
    }
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      goto LABEL_57;
    goto LABEL_42;
  }
  if (v6 && v12)
  {
    v6 = v4 & 0xFFFFFFFFFFFFFF00;
    goto LABEL_7;
  }
  do
  {
    do
    {
      while (1)
      {
        __break(1u);
LABEL_57:
        if (v8)
        {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9, v8);
          v15 = (char *)*a1;
          v14 = a1[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
LABEL_42:
        *a1 = 0;
        a1[1] = 0;
        v36 = a1[3];
        if (!v36)
        {
          v15 = 0;
          LOBYTE(v18) = 0;
          v14 = 0;
LABEL_44:
          v9 = 1;
LABEL_45:
          *a1 = 0;
          a1[1] = 0;
          v37 = a1[3];
          if (v37)
          {
            v42 = v9;
            if (v14)
            {
              (*(void (**)(unint64_t, char *))(*(_QWORD *)v37 + 16))(v37, v15);
              v38 = *a1;
              v14 = a1[1];
            }
            else
            {
              v38 = 0;
            }
            v9 = v42;
          }
          else
          {
            v38 = 0;
            v14 = 0;
          }
          goto LABEL_47;
        }
        if (!v14)
        {
          v15 = 0;
          LOBYTE(v18) = 0;
          goto LABEL_44;
        }
        v7 = (*(uint64_t (**)(unint64_t, char *))(*(_QWORD *)v36 + 16))(v36, v15);
        LOBYTE(v18) = 0;
        v15 = (char *)*a1;
        v14 = a1[1];
        v9 = 1;
LABEL_12:
        if (v14 <= a1[2] - (unint64_t)v15)
          goto LABEL_45;
        v19 = (unsigned __int8 *)a1[2];
        a1[2] = (unint64_t)(v19 + 1);
        if (!v15)
          break;
        LODWORD(v20) = *v19;
        if ((v20 - 1) >= 0x12)
          goto LABEL_49;
        v8 = 0;
        if (v13)
          goto LABEL_16;
      }
      v38 = 0;
LABEL_47:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39)
      {
        v41 = v9;
        if (v14)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v38);
          v15 = (char *)*a1;
          v14 = a1[1];
        }
        else
        {
          v15 = 0;
        }
        v9 = v41;
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
LABEL_49:
      *a1 = 0;
      a1[1] = 0;
      v40 = a1[3];
      if (!v40
        || !v14
        || (v20 = v9, v7 = (*(uint64_t (**)(unint64_t, char *))(*(_QWORD *)v40 + 16))(v40, v15), !*a1))
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v15);
      }
      v9 = v20;
      LOBYTE(v20) = 0;
      v8 = 1;
    }
    while (!v13);
LABEL_16:
    ;
  }
  while (!v47 || (_DWORD)v9 || (_DWORD)v8);
  *(_QWORD *)&v43 = v6 | v4;
  *((_QWORD *)&v43 + 1) = v10;
  WebCore::Color::Color((WebCore::Color *)&v44, &v46);
  LOBYTE(v45) = v18;
  HIBYTE(v45) = v20;
  *(_OWORD *)a2 = v43;
  WebCore::Color::Color();
  *(_WORD *)(a2 + 24) = v45;
  *(_BYTE *)(a2 + 32) = 1;
  if ((v44 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v15);
    }
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v15);
}

void sub_196E148CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::encode(IPC::Encoder *a1, int *a2)
{
  int *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v2 + 12));
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t v5;

  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (_DWORD *)a2);
  result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 48));
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = *(_BYTE *)(a2 + 56);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  Color v30;
  unsigned __int8 v31;
  _OWORD v32[3];
  unsigned __int8 v33;

  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v32);
  v4 = v33;
  if (!v33)
  {
    v17 = *a1;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  }
  v5 = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v30);
  if (!v31)
  {
    v21 = *a1;
    v22 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = (unsigned int *)a1[3];
    if (v5)
    {
      if (v22)
        v5 = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(_QWORD *)v5 + 16))(v5, v21);
    }
  }
  v6 = a1[1];
  v7 = (char *)*a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v12 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v23 + 16))(v23);
        v10 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
    }
LABEL_24:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v5 = (unsigned int *)a1[3];
    if (v5)
      goto LABEL_31;
    goto LABEL_25;
  }
  v9 = &v7[v8];
  v10 = (unint64_t)(v9 + 1);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v7)
  {
    v12 = v6;
    v10 = 0;
    goto LABEL_24;
  }
  v11 = *v9;
  if ((v11 - 1) >= 0x12)
    goto LABEL_25;
  v12 = 0;
  if (!v4)
    goto LABEL_30;
LABEL_7:
  v10 = v31;
  if (!v31 || (_DWORD)v12)
  {
LABEL_30:
    while (1)
    {
      __break(1u);
LABEL_31:
      if (v12)
      {
        (*(void (**)(unsigned int *, unint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v10, v12);
        v7 = (char *)*a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
LABEL_25:
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24)
        break;
      if (!v6)
        break;
      v5 = (unsigned int *)(*(uint64_t (**)(unint64_t, char *))(*(_QWORD *)v24 + 16))(v24, v7);
      if (!*a1)
        break;
      LOBYTE(v11) = 0;
      v12 = 1;
      if (v4)
        goto LABEL_7;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
  }
  else
  {
    v25 = v32[0];
    v26 = v32[1];
    v27 = v32[2];
    WebCore::Color::Color((WebCore::Color *)&v28, &v30);
    v29 = v11;
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v26;
    *(_OWORD *)(a2 + 32) = v27;
    WebCore::Color::Color();
    *(_BYTE *)(a2 + 56) = v29;
    *(_BYTE *)(a2 + 64) = 1;
    if ((v28 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v7);
}

void sub_196E14BFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2 + 4);
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::encode(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  unint64_t v26;

  v4 = a2[1];
  v5 = *a1;
  v6 = a1[2];
  v7 = *a1 + v6;
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v11 = v10 + v6;
    v12 = v10 + v6 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v11) = *a2;
      a1[2] = v12;
      v5 = *a1;
      v6 = v12;
    }
  }
  v14 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v5 + v6);
  if (v14 >= v5 + v6)
  {
    v16 = v14 - v5;
    v17 = v15 + v6 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v16) = v4;
      a1[2] = v17;
      v5 = *a1;
      v6 = v17;
    }
  }
  v19 = a2[3];
  v20 = (v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 - (v5 + v6);
  if (v20 >= v5 + v6)
  {
    v22 = v20 - v5;
    v23 = v21 + v6 + 4;
    if (v22 > 0xFFFFFFFFFFFFFFFBLL || v23 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v5 + v22) = a2[2];
      a1[2] = v23;
      v5 = *a1;
      v6 = v23;
    }
  }
  v25 = (_DWORD *)((v5 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v25 >= v5 + v6)
  {
    v26 = (unint64_t)v25 - v5 + 4;
    if ((unint64_t)v25 - v5 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *v25 = v19;
      a1[2] = v26;
    }
  }
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, a2 + 4);
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithRoundedHole,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  Color v36;
  unsigned __int8 v37;
  _OWORD v38[3];
  unsigned __int8 v39;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v18 = *a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v19 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
  }
  v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v10 = v7;
  if (!(_BYTE)v7)
  {
    v7 = (void *)*a1;
    v22 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v22)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v23 + 16))(v23, v7);
    }
  }
  v11 = *a1;
  if (*a1)
  {
    if (!v6 || !v10)
      goto LABEL_15;
    v12 = v4 & 0xFFFFFFFFFFFFFF00;
    v4 = v4;
  }
  else
  {
    v4 = 0;
    v12 = 0;
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v24)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0);
      v4 = 0;
      v12 = 0;
    }
  }
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v38);
  v13 = v39;
  if (!v39)
  {
    v26 = *a1;
    v27 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v27)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v36);
  if (!v37)
  {
    v7 = (void *)*a1;
    v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      if (v29)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v30 + 16))(v30, v7);
    }
  }
  v8 = *a1;
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v7);
  }
  if (v11)
  {
    if (v13)
    {
      v8 = v37;
      if (v37)
      {
        *(_QWORD *)&v31 = v12 | v4;
        *((_QWORD *)&v31 + 1) = v9;
        v32 = v38[0];
        v33 = v38[1];
        v34 = v38[2];
        WebCore::Color::Color((WebCore::Color *)&v35, &v36);
        *(_OWORD *)a2 = v31;
        *(_OWORD *)(a2 + 16) = v32;
        *(_OWORD *)(a2 + 32) = v33;
        *(_OWORD *)(a2 + 48) = v34;
        WebCore::Color::Color();
        *(_BYTE *)(a2 + 72) = 1;
        v8 = v35;
        if ((v35 & 0x8000000000000) == 0)
          return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v7);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  __break(1u);
LABEL_16:
  v15 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v7);
  }
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v7);
}

void sub_196E14FFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)&v9);
  if (v11)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = v9;
      *(_QWORD *)(a2 + 16) = v10;
      v5 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    v5 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v6 = *a1;
  v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_10;
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillClosedArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;

  result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)&v11);
  if (v14)
  {
    if (!*a1)
      goto LABEL_6;
    LOBYTE(v5) = v11;
    *(_OWORD *)(a2 + 1) = v12;
    *(_DWORD *)(a2 + 17) = v13;
    v6 = 1;
  }
  else
  {
    v8 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
        if (*a1)
          goto LABEL_14;
      }
    }
LABEL_6:
    while (1)
    {
      v10 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (!result || !v10)
        break;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v5 = *a1;
      if (!*a1)
        goto LABEL_8;
LABEL_14:
      __break(1u);
    }
    LOBYTE(v5) = 0;
LABEL_8:
    v6 = 0;
  }
  *(_BYTE *)a2 = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PathClosedArc>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[21];
  char v10;

  result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)v9);
  if (v10)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = *(_OWORD *)v9;
      *(_QWORD *)(a2 + 13) = *(_QWORD *)&v9[13];
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
  }
  else
  {
    v6 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
        if (*a1)
          __break(1u);
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillQuadCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  result = IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode(a1, (uint64_t)&v9);
  if (v11)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = v9;
      *(_QWORD *)(a2 + 16) = v10;
      v5 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    v5 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v6 = *a1;
  v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_10;
  result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillBezierCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _OWORD v10[2];
  char v11;

  result = IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      v6 = 1;
LABEL_4:
      *(_BYTE *)(a2 + 32) = v6;
      return result;
    }
LABEL_10:
    v6 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v7 = *a1;
  v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_10;
  result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
  if (!*a1)
    goto LABEL_10;
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillPathSegment,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _OWORD v10[3];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = IPC::ArgumentCoder<WebCore::PathSegment,void>::decode(a1, (uint64_t)v10);
  if (!v12)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
      if (*a1)
        __break(1u);
    }
    goto LABEL_10;
  }
  if (!*a1)
  {
LABEL_10:
    v6 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  v5 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v10[2];
  *(_QWORD *)(a2 + 48) = v11;
  v6 = 1;
LABEL_4:
  *(_BYTE *)(a2 + 56) = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::FillPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _BYTE v10[8];
  _BYTE v11[56];
  int v12;
  _BYTE v13[8];
  _BYTE v14[56];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v7 != 0)
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  if (*a1)
  {
    if (!v16)
      __break(1u);
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
  }
  return result;
}

void sub_196E155A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  if (a33)
  {
    v35 = *(unsigned int *)(v33 + 64);
    if ((_DWORD)v35 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::PaintFrameForMedia,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v28;
  unint64_t v29;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v2 + v8) = *(_QWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = *(_DWORD *)(a2 + 12);
  v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v2 + v3);
  if (v12 >= v2 + v3)
  {
    v14 = v12 - v2;
    v15 = v13 + v3 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v14) = *(_DWORD *)(a2 + 8);
      result[2] = v15;
      v2 = *result;
      v3 = v15;
    }
  }
  v17 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 - (v2 + v3);
  if (v17 >= v2 + v3)
  {
    v19 = v17 - v2;
    v20 = v18 + v3 + 4;
    if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v19) = v11;
      result[2] = v20;
      v2 = *result;
      v3 = v20;
    }
  }
  v22 = *(_DWORD *)(a2 + 20);
  v23 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 - (v2 + v3);
  if (v23 >= v2 + v3)
  {
    v25 = v23 - v2;
    v26 = v24 + v3 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v25) = *(_DWORD *)(a2 + 16);
      result[2] = v26;
      v2 = *result;
      v3 = v26;
    }
  }
  v28 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v28 >= v2 + v3)
  {
    v29 = (unint64_t)v28 - v2 + 4;
    if ((unint64_t)v28 - v2 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v28 = v22;
      result[2] = v29;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::PaintFrameForMedia,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5 = v4;
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v7 = v6;
  if (!v6)
  {
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13 && v12 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
  v10 = v9;
  if (!v9)
  {
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v16)
      {
        v19 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
        v10 = 0;
        result = v19;
      }
    }
  }
  if (!*a1)
  {
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result
      || !v18
      || (result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0), !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return result;
    }
    goto LABEL_21;
  }
  if (!v7 || !v10 || !v5)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  result = WebCore::DisplayList::PaintFrameForMedia::PaintFrameForMedia();
  *(_OWORD *)a2 = v20;
  *(_QWORD *)(a2 + 16) = v21;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::StrokeRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v13 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v8 = result;
  v10 = v9;
  if (!v9)
  {
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v17)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
        v10 = 0;
      }
    }
  }
  if (!*a1)
  {
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    result = IPC::Decoder::decode<float>(a1);
    if (!*a1)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!v6 || !v10)
    goto LABEL_20;
  result = IPC::Decoder::decode<float>(a1);
  if (!*a1)
  {
LABEL_21:
    v11 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_9;
  }
  if ((result & 0xFF00000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v8;
  v11 = 1;
  *(_DWORD *)(a2 + 16) = result;
LABEL_9:
  *(_BYTE *)(a2 + 20) = v11;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::StrokePath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _BYTE v10[8];
  _BYTE v11[56];
  int v12;
  _BYTE v13[8];
  _BYTE v14[56];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v7 != 0)
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  if (*a1)
  {
    if (!v16)
      __break(1u);
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
  }
  return result;
}

void sub_196E15B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  if (a33)
  {
    v35 = *(unsigned int *)(v33 + 64);
    if ((_DWORD)v35 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  int v6;
  _OWORD v8[3];

  v4 = *(_DWORD **)a2;
  v4[2] = *(_DWORD *)(*(_QWORD *)a2 + 8) + 1;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  v5 = *(_OWORD *)(a2 + 24);
  v8[0] = *(_OWORD *)(a2 + 8);
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (int *)v8);
  v6 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  return IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(a1, (int *)(a2 + 64));
}

void sub_196E15CB8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD v15[3];

  v4 = *(_DWORD **)a2;
  v4[2] = *(_DWORD *)(*(_QWORD *)a2 + 8) + 1;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  v5 = *(_OWORD *)(a2 + 24);
  v15[0] = *(_OWORD *)(a2 + 8);
  v15[1] = v5;
  v15[2] = *(_OWORD *)(a2 + 40);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)a1, v15);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *(_QWORD *)a1 + v6;
  v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v11 = v10 + v6;
    v12 = v11 + 4;
    if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > *((_QWORD *)a1 + 1))
    {
      *((_QWORD *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a1 + v11) = *(_DWORD *)(a2 + 56);
      *((_QWORD *)a1 + 2) = v12;
    }
  }
  return IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode((uint64_t *)a1, (_DWORD *)(a2 + 64));
}

void sub_196E15DC4(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::DisplayList::DrawControlPart,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  _BYTE v28[7];
  uint64_t v29;
  __int128 v30;
  _BYTE v31[48];
  unsigned __int8 v32;
  _BYTE v33[48];
  unsigned __int8 v34;
  _DWORD *v35;
  unsigned __int8 v36;

  IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>(a1, &v35, a3, a4, a5);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a1, (uint64_t)v33);
  if (!v34)
  {
    v18 = *a1;
    v19 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v19)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    }
  }
  v7 = IPC::Decoder::decode<float>(a1);
  IPC::Decoder::decode<WebCore::ControlStyle>(a1, (uint64_t)v31);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
    goto LABEL_13;
  }
  v9 = v36;
  if (!v36 || (v9 = v34) == 0 || (v7 & 0xFF00000000) == 0 || (v9 = v32) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  WebCore::DisplayList::DrawControlPart::DrawControlPart();
  v10 = v21;
  v21 = 0;
  *(_QWORD *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v22;
  *(_OWORD *)(a2 + 24) = v23;
  *(_DWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v26;
  *(_DWORD *)(a2 + 72) = v27;
  *(_OWORD *)(a2 + 40) = v24;
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a2 + 96) = v30;
  *(_BYTE *)(a2 + 112) = 1;
  v9 = v29;
  if ((v29 & 0x8000000000000) != 0)
  {
LABEL_20:
    v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
  }
  if ((*(_QWORD *)v28 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(*(_QWORD *)v28 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v8);
    }
  }
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
LABEL_13:
  result = (_DWORD *)std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v8);
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void sub_196E16004(_Unwind_Exception *a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  _DWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  va_list va;

  va_start(va, a16);
  if ((*v17 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  v23 = *v16;
  *v16 = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  if ((a14 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  if ((a13 & 0x8000000000000) != 0)
  {
    v27 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  if (a3)
  {
    if (a3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
    else
      --a3[2];
  }
  std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (*(_BYTE *)(v18 - 40))
  {
    v30 = *(_DWORD **)(v18 - 48);
    *(_QWORD *)(v18 - 48) = 0;
    if (v30)
    {
      if (v30[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
      else
        --v30[2];
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = IPC::ArgumentCoder<WebCore::ControlPart,void>::decode((uint64_t)a1, a2, a3, a4, a5);
  if (!a2[8])
  {
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

void sub_196E161A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::optional<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>::~optional(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::ControlStyle>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ControlStyle,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E1620C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>::~optional(uint64_t a1)
{
  _DWORD *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
    {
      if (v2[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      else
        --v2[2];
    }
  }
  return a1;
}

char *IPC::ArgumentCoder<WebKit::DocumentEditingContext::TextRectAndRange,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (uint64_t *)(v3 + v4);
    a2[2] = (unint64_t)(v6 + 1);
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      v9 = v3;
      goto LABEL_8;
    }
    goto LABEL_36;
  }
  v9 = 0;
  v14 = 0;
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15)
  {
    v26 = a2;
    v22 = result;
    if (v2)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v3);
      a2 = v26;
      v14 = *v26;
      v9 = v26[1];
      result = v22;
    }
    else
    {
      v9 = 0;
      v14 = 0;
    }
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    v3 = a2[3];
    if (v3)
    {
      v24 = a2;
      v20 = result;
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v14, v9);
        v8 = 0;
        a2 = v24;
        v9 = *v24;
        v2 = v24[1];
        v7 = 1;
        v3 = *v24;
        result = v20;
      }
      else
      {
        v2 = 0;
        v3 = 0;
        v8 = 0;
        v7 = 1;
      }
    }
    else
    {
      v9 = 0;
      v2 = 0;
      v8 = 0;
      v7 = 1;
    }
LABEL_8:
    v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v10 || v2 - v10 <= 7)
    {
      v16 = 0;
      v17 = 0;
      *a2 = 0;
      a2[1] = 0;
      v18 = a2[3];
      if (v18)
      {
        v27 = a2;
        v23 = result;
        if (v2)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v3);
          a2 = v27;
          v17 = *v27;
          v16 = v27[1];
          result = v23;
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
      }
      goto LABEL_22;
    }
    v12 = (_QWORD *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (unint64_t)(v12 + 1);
    if (v3)
      break;
    v16 = v2;
    v17 = 0;
LABEL_22:
    v2 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (!v19)
      goto LABEL_23;
    v25 = a2;
    v21 = result;
    if (!v16)
    {
      v2 = 0;
      v9 = 0;
      goto LABEL_23;
    }
    result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
    v9 = *v25;
    if (!*v25)
    {
      a2 = v25;
      v2 = v25[1];
      result = v21;
      goto LABEL_23;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    v9 = v2;
    v14 = v3;
  }
  if (v7)
    goto LABEL_35;
  v13 = *v12;
  if (!__CFADD__(v8, *v12))
  {
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 8) = v13;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
LABEL_23:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v2)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 32);
}

unint64_t *IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int16 v9;
  char v10;
  char v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD v39[5];
  char v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_19;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v23 = v4;
    v24 = 0;
    goto LABEL_20;
  }
  v8 = *v7 | 0x100;
  while (1)
  {
    v9 = IPC::Decoder::decode<WebCore::TextGranularity>(a1);
    v38 = IPC::Decoder::decode<long long>(a1);
    v11 = v10;
    v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
    v14 = v13;
    if (!v13)
    {
      v27 = *a1;
      v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v29 = a1[3];
      if (v29)
      {
        if (v28)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
      }
    }
    v15 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
    v17 = v16;
    if (!v16)
    {
      v30 = *a1;
      v31 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v32 = a1[3];
      if (v32)
      {
        if (v31)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
      }
    }
    v18 = *a1;
    if (!*a1)
      break;
    if (v14 && v17)
    {
      v19 = v12 & 0xFFFFFFFFFFFFFF00;
      v12 = v12;
      goto LABEL_10;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v5, v4);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26 && v23)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
      v8 = 0;
      v35 = *a1;
      v36 = a1[1];
      v37 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v37 && v36)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
        goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v8 = 0;
    }
  }
  v12 = 0;
  v19 = 0;
  v33 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34)
  {
    if (v33)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, 0);
    v12 = 0;
    v19 = 0;
  }
LABEL_10:
  result = IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)a1, (uint64_t)v39);
  v5 = *a1;
  if (*a1)
  {
    if (v8 > 0xFF)
    {
      v5 = v9;
      if (v9 > 0xFFu)
      {
        if (v11)
        {
          if (v18)
          {
            v5 = v41;
            if (v41)
            {
              v21 = v39[3];
              *(_OWORD *)(a2 + 64) = v39[2];
              *(_OWORD *)(a2 + 80) = v21;
              *(_OWORD *)(a2 + 96) = v39[4];
              *(_BYTE *)(a2 + 112) = v40;
              v22 = v39[1];
              *(_OWORD *)(a2 + 32) = v39[0];
              *(_OWORD *)(a2 + 48) = v22;
              *(_BYTE *)a2 = v8;
              *(_BYTE *)(a2 + 1) = v9;
              *(_QWORD *)(a2 + 8) = v38;
              *(_QWORD *)(a2 + 16) = v19 | v12;
              LOBYTE(v5) = 1;
              *(_QWORD *)(a2 + 24) = v15;
              goto LABEL_17;
            }
          }
        }
      }
    }
    goto LABEL_18;
  }
  *(_BYTE *)a2 = 0;
LABEL_17:
  *(_BYTE *)(a2 + 128) = v5;
  return result;
}

unint64_t *IPC::Decoder::decode<std::optional<WebCore::ElementContext>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 5);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 10);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 15);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 20);
  v4 = a2[25];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[26];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::VectorArgumentCoder<false,WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 27));
  return IPC::VectorArgumentCoder<false,WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 29));
}

unint64_t IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  unint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  _OWORD *v14;
  WTF *v15;
  _OWORD *v16;
  __int128 v17;
  int i;
  int v19;
  _OWORD *v20;
  WTF *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unint64_t result;
  unint64_t v29;
  WTF *v30;
  int v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  unsigned __int8 v51;
  _BYTE v52[40];
  uint64_t v53;
  _BYTE v54[40];
  _BYTE v55[56];
  WTF *v56;
  int v57;
  int v58;
  WTF *v59;
  int v60;
  int v61;
  __int128 v62;
  unsigned __int8 v63;
  _BYTE v64[40];
  unsigned __int8 v65;
  _BYTE v66[40];
  unsigned __int8 v67;
  _BYTE v68[40];
  unsigned __int8 v69;
  _BYTE v70[40];
  unsigned __int8 v71;
  _BYTE v72[40];
  unsigned __int8 v73;
  WTF *v74;
  uint64_t v75;

  v5 = a1;
  IPC::Decoder::decode<WebCore::AttributedString>(a1, v72);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v70);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v68);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v66);
  IPC::Decoder::decode<WebCore::AttributedString>(v5, v64);
  IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v62, (unint64_t *)v5);
  v7 = IPC::Decoder::decode<unsigned long long>(v5);
  if (!v9)
    goto LABEL_20;
  v10 = v7;
  v74 = 0;
  v75 = 0;
  if (v7 >= 0x8000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::DocumentEditingContext::TextRectAndRange>((uint64_t)&v49, (unint64_t *)v5);
      v8 = v51;
      if (!v51)
        break;
      v19 = HIDWORD(v75);
      if (HIDWORD(v75) == (_DWORD)v75)
      {
        v20 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v75) + 1, (unint64_t)&v49);
        v19 = HIDWORD(v75);
        v21 = v74;
        v22 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        v23 = v20[1];
        *v22 = *v20;
      }
      else
      {
        v21 = v74;
        v22 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        v23 = v50;
        *v22 = v49;
      }
      v22[1] = v23;
      v24 = (v19 + 1);
      HIDWORD(v75) = v19 + 1;
      if (!--v10)
      {
        if (v75 <= v24)
        {
          v48 = v75;
          v15 = v21;
          goto LABEL_102;
        }
        if (v19 == -1)
          goto LABEL_100;
        v48 = v19 + 1;
        if (v24 >> 27)
          goto LABEL_106;
        v2 = (int)a2;
        v41 = 32 * v24;
        v42 = WTF::fastMalloc((WTF *)(32 * v24));
        v15 = (WTF *)v42;
        LODWORD(v75) = v48;
        v74 = (WTF *)v42;
        if ((WTF *)v42 == v21)
        {
LABEL_100:
          v74 = 0;
          LODWORD(v75) = 0;
        }
        else
        {
          v43 = 0;
          do
          {
            v44 = (_OWORD *)(v42 + v43);
            v45 = *(_OWORD *)((char *)v21 + v43 + 16);
            *v44 = *(_OWORD *)((char *)v21 + v43);
            v44[1] = v45;
            v43 += 32;
          }
          while (v41 != v43);
          if (!v21)
          {
LABEL_102:
            v4 = HIDWORD(v75);
            goto LABEL_12;
          }
        }
        WTF::fastFree(v21, v12);
        v15 = v74;
        v48 = v75;
        goto LABEL_102;
      }
    }
LABEL_18:
    v25 = v74;
    if (v74)
    {
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v25, v12);
    }
LABEL_20:
    v26 = (void *)*v5;
    v27 = v5[1];
    *v5 = 0;
    v5[1] = 0;
    result = v5[3];
    if (result)
      goto LABEL_50;
    goto LABEL_21;
  }
  if (v7)
  {
    v11 = WTF::fastMalloc((WTF *)(32 * v7));
    LODWORD(v75) = v10;
    v74 = (WTF *)v11;
    do
    {
      IPC::Decoder::decode<WebKit::DocumentEditingContext::TextRectAndRange>((uint64_t)&v49, (unint64_t *)v5);
      v8 = v51;
      if (!v51)
        goto LABEL_18;
      v13 = HIDWORD(v75);
      if (HIDWORD(v75) == (_DWORD)v75)
      {
        v14 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v75) + 1, (unint64_t)&v49);
        v13 = HIDWORD(v75);
        v15 = v74;
        v16 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        v17 = v14[1];
        *v16 = *v14;
      }
      else
      {
        v15 = v74;
        v16 = (_OWORD *)((char *)v74 + 32 * HIDWORD(v75));
        v17 = v50;
        *v16 = v49;
      }
      v16[1] = v17;
      v4 = v13 + 1;
      HIDWORD(v75) = v13 + 1;
      --v10;
    }
    while (v10);
    v48 = v75;
  }
  else
  {
    v4 = 0;
    v48 = 0;
    v15 = 0;
  }
LABEL_12:
  for (i = 0; ; i = 1)
  {
    result = IPC::Decoder::decode<unsigned long long>(v5);
    if ((_BYTE)v26)
      break;
LABEL_68:
    v26 = (void *)*v5;
    v39 = v5[1];
    *v5 = 0;
    v5[1] = 0;
    result = v5[3];
    if (!result
      || !v39
      || (result = (*(uint64_t (**)(unint64_t, void *))(*(_QWORD *)result + 16))(result, v26), !*v5))
    {
LABEL_69:
      *a2 = 0;
      a2[248] = 0;
      goto LABEL_70;
    }
    v47 = i;
    v32 = (uint64_t)a2;
    v30 = 0;
    v46 = 1;
LABEL_36:
    v8 = v73;
    if (v73)
    {
      v5 = (uint64_t *)&v49;
      result = WebCore::AttributedString::AttributedString();
      v8 = v71;
      if (v71)
      {
        v5 = (uint64_t *)v52;
        result = WebCore::AttributedString::AttributedString();
        v8 = v69;
        if (v69)
        {
          result = WebCore::AttributedString::AttributedString();
          v8 = v67;
          if (v67)
          {
            a2 = v54;
            result = WebCore::AttributedString::AttributedString();
            v8 = v65;
            if (v65)
            {
              result = WebCore::AttributedString::AttributedString();
              v8 = v63;
              if (v63)
              {
                *(_OWORD *)&v55[40] = v62;
                v8 = v47;
                if (!v47)
                {
                  v56 = v15;
                  v57 = v48;
                  v58 = v4;
                  v8 = v46;
                  if (!v46)
                  {
                    v59 = v30;
                    v60 = v2;
                    v61 = v3;
                    WebKit::DocumentEditingContext::DocumentEditingContext(v32, (uint64_t)&v49);
                    *(_BYTE *)(v32 + 248) = 1;
                    v34 = v59;
                    if (v59)
                    {
                      v59 = 0;
                      v60 = 0;
                      WTF::fastFree(v34, v33);
                    }
                    v35 = v56;
                    if (v56)
                    {
                      v56 = 0;
                      v57 = 0;
                      WTF::fastFree(v35, v33);
                    }
                    MEMORY[0x19AEAEECC](v55);
                    MEMORY[0x19AEAEECC](v54);
                    MEMORY[0x19AEAEECC](&v53);
                    MEMORY[0x19AEAEECC](v52);
                    result = MEMORY[0x19AEAEECC](&v49);
                    goto LABEL_75;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_50:
    if (v27)
      (*(void (**)(unint64_t, void *))(*(_QWORD *)result + 16))(result, v26);
LABEL_21:
    v15 = 0;
    v48 = v8;
  }
  v29 = result;
  v74 = 0;
  v75 = 0;
  if (result >= 0x10000)
  {
    v36 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      result = IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v49, (unint64_t *)v5);
      if (!(_BYTE)v50)
        break;
      if ((_DWORD)v3 == (_DWORD)v75)
      {
        result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v49);
        v37 = HIDWORD(v75);
        v36 = v74;
        *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
      }
      else
      {
        *((_OWORD *)v36 + v3) = v49;
        v37 = HIDWORD(v75);
      }
      v3 = (v37 + 1);
      HIDWORD(v75) = v37 + 1;
      if (!--v29)
      {
        v2 = v75;
        if (v75 <= v3)
          goto LABEL_105;
        if (v37 == -1)
          goto LABEL_103;
        if (!(v3 >> 28))
        {
          result = WTF::fastMalloc((WTF *)(16 * v3));
          LODWORD(v75) = v3;
          v74 = (WTF *)result;
          if ((WTF *)result != v36)
          {
            v38 = 0;
            do
            {
              *(_OWORD *)(result + v38) = *(_OWORD *)((char *)v36 + v38);
              v38 += 16;
            }
            while (16 * v3 != v38);
            v2 = v3;
            if (!v36)
            {
LABEL_105:
              v30 = v74;
              goto LABEL_32;
            }
LABEL_104:
            result = WTF::fastFree(v36, v26);
            v2 = v75;
            LODWORD(v3) = HIDWORD(v75);
            goto LABEL_105;
          }
LABEL_103:
          v74 = 0;
          LODWORD(v75) = 0;
          goto LABEL_104;
        }
LABEL_106:
        __break(0xC471u);
        JUMPOUT(0x196E16FF0);
      }
    }
    v30 = v74;
    if (v74)
    {
LABEL_67:
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v30, v26);
    }
    goto LABEL_68;
  }
  if (!result)
  {
    if (!*v5)
      goto LABEL_69;
    v46 = 0;
    v47 = i;
    v32 = (uint64_t)a2;
    v30 = 0;
    v2 = 0;
    LODWORD(v3) = 0;
    goto LABEL_36;
  }
  v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
  LODWORD(v3) = 0;
  LODWORD(v75) = v29;
  v74 = v30;
  do
  {
    result = IPC::Decoder::decode<WebKit::DocumentEditingContext::Range>((uint64_t)&v49, (unint64_t *)v5);
    if (!(_BYTE)v50)
      goto LABEL_67;
    if ((_DWORD)v3 == (_DWORD)v75)
    {
      result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v49);
      v31 = HIDWORD(v75);
      v30 = v74;
      *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
    }
    else
    {
      *((_OWORD *)v30 + v3) = v49;
      v31 = HIDWORD(v75);
    }
    LODWORD(v3) = v31 + 1;
    HIDWORD(v75) = v31 + 1;
    --v29;
  }
  while (v29);
  v2 = v75;
LABEL_32:
  if (*v5)
  {
    v46 = 0;
    v47 = i;
    v32 = (uint64_t)a2;
    goto LABEL_36;
  }
  *a2 = 0;
  a2[248] = 0;
  if (v30)
    result = WTF::fastFree(v30, v26);
LABEL_70:
  if (v15)
    v40 = i;
  else
    v40 = 1;
  if ((v40 & 1) == 0)
    result = WTF::fastFree(v15, v26);
LABEL_75:
  if (v65)
    result = MEMORY[0x19AEAEECC](v64);
  if (v67)
    result = MEMORY[0x19AEAEECC](v66);
  if (v69)
    result = MEMORY[0x19AEAEECC](v68);
  if (v71)
    result = MEMORY[0x19AEAEECC](v70);
  if (v73)
    return MEMORY[0x19AEAEECC](v72);
  return result;
}

void sub_196E16FFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF *a40,int a41,WTF *a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  WTF *v61;
  char v62;
  uint64_t v63;
  WTF *v65;
  char v66;

  v65 = *(WTF **)(v63 - 104);
  if (v65)
    WTF::fastFree(v65, a2);
  v66 = v62;
  if (!v61)
    v66 = 1;
  if ((v66 & 1) == 0)
    WTF::fastFree(v61, a2);
  if (a52)
    MEMORY[0x19AEAEECC](&a47);
  if (a61)
    MEMORY[0x19AEAEECC](&a54);
  if (*(_BYTE *)(v63 - 208))
    MEMORY[0x19AEAEECC](v63 - 248);
  if (*(_BYTE *)(v63 - 160))
    MEMORY[0x19AEAEECC](v63 - 200);
  if (*(_BYTE *)(v63 - 112))
    MEMORY[0x19AEAEECC](v63 - 152);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebKit::EditingRange,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    v8 = v2;
    v15 = 0;
  }
  else
  {
    v8 = 0;
    v15 = 0;
    *result = 0;
    result[1] = 0;
    v12 = (_QWORD *)result[3];
    if (v12)
      goto LABEL_30;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (!v16)
    {
      v2 = 0;
      v3 = 0;
      v8 = 0;
LABEL_21:
      v7 = 1;
      goto LABEL_8;
    }
    v22 = result;
    v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v15, v8);
      v8 = 0;
      result = v22;
      a2 = v25;
      v3 = *v22;
      v2 = v22[1];
      goto LABEL_21;
    }
    v2 = 0;
    v3 = 0;
    v7 = 1;
LABEL_8:
    v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
      break;
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (v19)
    {
      v24 = result;
      v28 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        result = v24;
        a2 = v28;
        v18 = *v24;
        v17 = v24[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_23:
    *result = 0;
    result[1] = 0;
    v20 = result[3];
    if (!v20
      || !v17
      || (v21 = result,
          v26 = a2,
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(result[3], v18, v17), a2 = v26, !*v21))
    {
      v14 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_17;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    v23 = result;
    v27 = a2;
    if (v2)
    {
      (*(void (**)(_QWORD *))(*v12 + 16))(v12);
      result = v23;
      a2 = v27;
      v15 = *v23;
      v8 = v23[1];
    }
    else
    {
      v8 = 0;
      v15 = 0;
    }
  }
  v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    v17 = v2;
    v18 = 0;
    goto LABEL_23;
  }
  if (v7)
    goto LABEL_29;
  v13 = *v11;
  if (__CFADD__(v8, v13))
  {
    __break(0xC471u);
    JUMPOUT(0x196E1736CLL);
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = 1;
LABEL_17:
  *(_BYTE *)(a2 + 16) = v14;
  return result;
}

char *IPC::ArgumentCoder<WebKit::EditorState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 10);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 11);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 12);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 13);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 14);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 15);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 17);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 18);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::EditorState::PostLayoutData>,void>::encode<IPC::Encoder,std::optional<WebKit::EditorState::PostLayoutData> const&>(a1, (uint64_t)(a2 + 4));
  return IPC::ArgumentCoder<std::optional<WebKit::EditorState::VisualData>,void>::encode<IPC::Encoder,std::optional<WebKit::EditorState::VisualData> const&>(a1, (uint64_t)(a2 + 44));
}

void IPC::ArgumentCoder<WebKit::EditorState,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  char v15;
  char v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  char v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  unsigned __int16 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int v89;
  char v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned int v93;
  char v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  unint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  unint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned int v114;
  char v115;
  unint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned int v119;
  char v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  char v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unsigned int v130;
  char v131;
  unint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unsigned int v135;
  char v136;
  unint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  char v141;
  unint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned int v145;
  char v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  char v150;
  char v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int8 *v155;
  unsigned int v156;
  void *v157;
  char v158;
  void *v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  char v167;
  char v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  char v174;
  char v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  void *v185;
  void *v186;
  WTF *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  unsigned int v237;
  uint64_t v238;
  WTF *v239;
  uint64_t v240;
  WTF *v241;
  WTF *v242;
  int v243;
  WTF *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  WTF *v247;
  WTF *v248;
  void *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  WTF *v252;
  WTF *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  int v372;
  char v373;
  int v374;
  char v375;
  int v376;
  char v377;
  int v378;
  char v379;
  int v380;
  char v381;
  int v382;
  char v383;
  int v384;
  char v385;
  int v386;
  char v387;
  int v388;
  char v389;
  int v390;
  char v391;
  int v392;
  char v393;
  int v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  char v398;
  int v399;
  char v400;
  int v401;
  unsigned __int16 v402;
  unsigned int v403;
  unsigned int v404;
  uint64_t v405;
  int v406;
  unsigned int v407;
  char v408;
  char v409;
  int v410;
  int v411;
  char v412;
  int v413;
  char v414;
  int v415;
  char v416;
  int v417;
  char v418;
  int v419;
  char v420;
  char v421;
  int v422;
  int v423;
  char v424;
  int v425;
  _OWORD v426[5];
  char v427;
  char v428;
  __int128 v429;
  char v430;
  __int128 v431;
  char v432;
  WTF *v433;
  WTF *v434;
  char v435;
  WTF *v436;
  uint64_t v437;
  char v438;
  __int128 v439;
  char v440;
  WTF::StringImpl *v441[2];
  char v442;
  __int128 v443;
  char v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  WTF *v448;
  uint64_t v449;
  WTF *v450;
  WTF *v451;
  __int128 v452;
  __int128 v453;
  unsigned __int8 v454;
  char v455;
  char v456;
  _OWORD v457[3];
  WTF::StringImpl *v458;
  uint64_t v459;
  WTF *v460;
  WTF *v461;
  __int128 v462;
  __int128 v463;
  char v464;
  _BYTE v465[304];
  char v466;
  char v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  WTF::StringImpl *v471;
  uint64_t v472;
  WTF *v473;
  WTF *v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  char v482;
  _BYTE v483[96];
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  char v489;
  char v490;
  uint64_t v491;

  v2 = a1;
  v491 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      if (*v8 == -1)
        goto LABEL_253;
      v10 = 1;
      goto LABEL_9;
    }
    v190 = v4;
    v191 = 0;
  }
  else
  {
    v190 = 0;
    v191 = 0;
    *a1 = 0;
    a1[1] = 0;
    v160 = a1[3];
    if (v160)
      goto LABEL_517;
  }
  while (1)
  {
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v192 = v2[3];
    if (v192)
    {
      if (v190)
      {
        v160 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v192 + 16))(v192, v191, v190);
        if (*v2)
          goto LABEL_516;
        v5 = 0;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_253:
    v193 = 0;
    v10 = 0;
    v9 = 0;
    v194 = 0;
    *v2 = 0;
    v2[1] = 0;
    v195 = v2[3];
    if (!v195)
      goto LABEL_254;
    if (!v4)
    {
      v193 = 0;
      v10 = 0;
      v9 = 0;
      v194 = 0;
LABEL_254:
      *v2 = 0;
      v2[1] = 0;
      v196 = v2[3];
      if (v196 && v194)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v196 + 16))(v196, v193, v194);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
      goto LABEL_256;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v195 + 16))(v195, v5, v4, 0);
    v9 = 0;
    v10 = 0;
    v5 = *v2;
    v4 = v2[1];
LABEL_9:
    if (v4 <= v2[2] - v5)
    {
      v193 = v5;
      v194 = v4;
      goto LABEL_254;
    }
    v11 = (unsigned __int8 *)v2[2];
    v12 = v11 + 1;
    v2[2] = (uint64_t)(v11 + 1);
    if (v5)
    {
      v13 = *v11;
      if (v13 < 2)
      {
        v14 = 0;
        v15 = 1;
        goto LABEL_13;
      }
      goto LABEL_259;
    }
LABEL_256:
    *v2 = 0;
    v2[1] = 0;
    v197 = v2[3];
    if (!v197)
    {
      v4 = 0;
LABEL_258:
      v5 = 0;
      v13 = 0;
      goto LABEL_259;
    }
    if (!v4)
      goto LABEL_258;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 16))(v197, v5);
    v13 = 0;
    v5 = *v2;
    v4 = v2[1];
LABEL_259:
    *v2 = 0;
    v2[1] = 0;
    v198 = v2[3];
    if (!v198 || !v4)
    {
      v16 = 0;
      v199 = 0;
      v5 = 0;
      v14 = 1;
LABEL_261:
      *v2 = 0;
      v2[1] = 0;
      v200 = v2[3];
      if (v200 && v199)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v200 + 16))(v200, v5, v199);
        v20 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v20 = 0;
      }
      goto LABEL_263;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v198 + 16))(v198, v5);
    v15 = 0;
    v5 = *v2;
    v4 = v2[1];
    v14 = 1;
    v12 = (unsigned __int8 *)v2[2];
LABEL_13:
    if (v13)
      v16 = v15;
    else
      v16 = 0;
    v17 = (unint64_t)&v12[-v5];
    if (v4 <= v17)
    {
      v199 = 0;
      v352 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v352 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v352 + 16))(v352);
        v5 = *v2;
        v199 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_261;
    }
    v18 = (unsigned __int8 *)(v5 + v17);
    v19 = v5 + v17 + 1;
    v2[2] = v19;
    if (!v5)
    {
      v199 = v4;
      goto LABEL_261;
    }
    v20 = *v18;
    if (v20 < 2)
    {
      v21 = 0;
      v22 = 1;
      goto LABEL_20;
    }
LABEL_263:
    *v2 = 0;
    v2[1] = 0;
    v201 = v2[3];
    if (!v201 || !v4)
    {
      v23 = 0;
      v202 = 0;
      v5 = 0;
      v21 = 1;
LABEL_265:
      *v2 = 0;
      v2[1] = 0;
      v203 = v2[3];
      if (v203 && v202)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v203 + 16))(v203, v5, v202);
        v27 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v27 = 0;
      }
      goto LABEL_267;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v201 + 16))(v201, v5);
    v22 = 0;
    v5 = *v2;
    v4 = v2[1];
    v21 = 1;
    v19 = v2[2];
LABEL_20:
    if (v20)
      v23 = v22;
    else
      v23 = 0;
    v24 = v19 - v5;
    if (v4 <= v24)
    {
      v202 = 0;
      v351 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v351 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v351 + 16))(v351);
        v5 = *v2;
        v202 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_265;
    }
    v25 = (unsigned __int8 *)(v5 + v24);
    v26 = v5 + v24 + 1;
    v2[2] = v26;
    if (!v5)
    {
      v202 = v4;
      goto LABEL_265;
    }
    v27 = *v25;
    if (v27 < 2)
    {
      v425 = 0;
      v28 = 1;
      goto LABEL_27;
    }
LABEL_267:
    *v2 = 0;
    v2[1] = 0;
    v204 = v2[3];
    if (!v204 || !v4)
    {
      v205 = 0;
      v5 = 0;
      v424 = 0;
      v425 = 1;
LABEL_269:
      *v2 = 0;
      v2[1] = 0;
      v206 = v2[3];
      if (v206 && v205)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v206 + 16))(v206, v5, v205);
        v32 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v32 = 0;
      }
      goto LABEL_271;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v5);
    v28 = 0;
    v5 = *v2;
    v4 = v2[1];
    v425 = 1;
    v26 = v2[2];
LABEL_27:
    if (!v27)
      v28 = 0;
    v424 = v28;
    v29 = v26 - v5;
    if (v4 <= v29)
    {
      v205 = 0;
      v350 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v350 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v350 + 16))(v350);
        v5 = *v2;
        v205 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_269;
    }
    v30 = (unsigned __int8 *)(v5 + v29);
    v31 = v5 + v29 + 1;
    v2[2] = v31;
    if (!v5)
    {
      v205 = v4;
      goto LABEL_269;
    }
    v32 = *v30;
    if (v32 < 2)
    {
      v423 = 0;
      v33 = 1;
      goto LABEL_33;
    }
LABEL_271:
    *v2 = 0;
    v2[1] = 0;
    v207 = v2[3];
    if (!v207 || !v4)
    {
      v421 = 0;
      v208 = 0;
      v5 = 0;
      v423 = 1;
LABEL_273:
      *v2 = 0;
      v2[1] = 0;
      v209 = v2[3];
      if (v209 && v208)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v209 + 16))(v209, v5, v208);
        v37 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v37 = 0;
      }
      goto LABEL_275;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, v5);
    v33 = 0;
    v5 = *v2;
    v4 = v2[1];
    v423 = 1;
    v31 = v2[2];
LABEL_33:
    if (!v32)
      v33 = 0;
    v421 = v33;
    v34 = v31 - v5;
    if (v4 <= v34)
    {
      v208 = 0;
      v349 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v349 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v349 + 16))(v349);
        v5 = *v2;
        v208 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_273;
    }
    v35 = (unsigned __int8 *)(v5 + v34);
    v36 = v5 + v34 + 1;
    v2[2] = v36;
    if (!v5)
    {
      v208 = v4;
      goto LABEL_273;
    }
    v37 = *v35;
    if (v37 < 2)
    {
      v422 = 0;
      v38 = 1;
      goto LABEL_39;
    }
LABEL_275:
    *v2 = 0;
    v2[1] = 0;
    v210 = v2[3];
    if (!v210 || !v4)
    {
      v420 = 0;
      v211 = 0;
      v5 = 0;
      v422 = 1;
LABEL_277:
      *v2 = 0;
      v2[1] = 0;
      v212 = v2[3];
      if (v212 && v211)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v212 + 16))(v212, v5, v211);
        v42 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v42 = 0;
      }
      goto LABEL_279;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v210 + 16))(v210, v5);
    v38 = 0;
    v5 = *v2;
    v4 = v2[1];
    v422 = 1;
    v36 = v2[2];
LABEL_39:
    if (!v37)
      v38 = 0;
    v420 = v38;
    v39 = v36 - v5;
    if (v4 <= v39)
    {
      v211 = 0;
      v348 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v348 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v348 + 16))(v348);
        v5 = *v2;
        v211 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_277;
    }
    v40 = (unsigned __int8 *)(v5 + v39);
    v41 = v5 + v39 + 1;
    v2[2] = v41;
    if (!v5)
    {
      v211 = v4;
      goto LABEL_277;
    }
    v42 = *v40;
    if (v42 < 2)
    {
      v419 = 0;
      v43 = 1;
      goto LABEL_45;
    }
LABEL_279:
    *v2 = 0;
    v2[1] = 0;
    v213 = v2[3];
    if (!v213 || !v4)
    {
      v214 = 0;
      v5 = 0;
      v418 = 0;
      v419 = 1;
LABEL_281:
      *v2 = 0;
      v2[1] = 0;
      v215 = v2[3];
      if (v215 && v214)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v215 + 16))(v215, v5, v214);
        v47 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v47 = 0;
      }
      goto LABEL_283;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v213 + 16))(v213, v5);
    v43 = 0;
    v5 = *v2;
    v4 = v2[1];
    v419 = 1;
    v41 = v2[2];
LABEL_45:
    if (!v42)
      v43 = 0;
    v418 = v43;
    v44 = v41 - v5;
    if (v4 <= v44)
    {
      v214 = 0;
      v347 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v347 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v347 + 16))(v347);
        v5 = *v2;
        v214 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_281;
    }
    v45 = (unsigned __int8 *)(v5 + v44);
    v46 = v5 + v44 + 1;
    v2[2] = v46;
    if (!v5)
    {
      v214 = v4;
      goto LABEL_281;
    }
    v47 = *v45;
    if (v47 < 2)
    {
      v417 = 0;
      v48 = 1;
      goto LABEL_51;
    }
LABEL_283:
    *v2 = 0;
    v2[1] = 0;
    v216 = v2[3];
    if (!v216 || !v4)
    {
      v217 = 0;
      v5 = 0;
      v416 = 0;
      v417 = 1;
LABEL_285:
      *v2 = 0;
      v2[1] = 0;
      v218 = v2[3];
      if (v218 && v217)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v218 + 16))(v218, v5, v217);
        v52 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v52 = 0;
      }
      goto LABEL_287;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(v216, v5);
    v48 = 0;
    v5 = *v2;
    v4 = v2[1];
    v417 = 1;
    v46 = v2[2];
LABEL_51:
    if (!v47)
      v48 = 0;
    v416 = v48;
    v49 = v46 - v5;
    if (v4 <= v49)
    {
      v217 = 0;
      v346 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v346 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v346 + 16))(v346);
        v5 = *v2;
        v217 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_285;
    }
    v50 = (unsigned __int8 *)(v5 + v49);
    v51 = v5 + v49 + 1;
    v2[2] = v51;
    if (!v5)
    {
      v217 = v4;
      goto LABEL_285;
    }
    v52 = *v50;
    if (v52 < 2)
    {
      v415 = 0;
      v53 = 1;
      goto LABEL_57;
    }
LABEL_287:
    *v2 = 0;
    v2[1] = 0;
    v219 = v2[3];
    if (!v219 || !v4)
    {
      v220 = 0;
      v5 = 0;
      v414 = 0;
      v415 = 1;
LABEL_289:
      *v2 = 0;
      v2[1] = 0;
      v221 = v2[3];
      if (v221 && v220)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v221 + 16))(v221, v5, v220);
        v57 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v57 = 0;
      }
      goto LABEL_291;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v219 + 16))(v219, v5);
    v53 = 0;
    v5 = *v2;
    v4 = v2[1];
    v415 = 1;
    v51 = v2[2];
LABEL_57:
    if (!v52)
      v53 = 0;
    v414 = v53;
    v54 = v51 - v5;
    if (v4 <= v54)
    {
      v220 = 0;
      v345 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v345 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v345 + 16))(v345);
        v5 = *v2;
        v220 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_289;
    }
    v55 = (unsigned __int8 *)(v5 + v54);
    v56 = v5 + v54 + 1;
    v2[2] = v56;
    if (!v5)
    {
      v220 = v4;
      goto LABEL_289;
    }
    v57 = *v55;
    if (v57 < 2)
    {
      v413 = 0;
      v58 = 1;
      goto LABEL_63;
    }
LABEL_291:
    *v2 = 0;
    v2[1] = 0;
    v222 = v2[3];
    if (!v222 || !v4)
    {
      v223 = 0;
      v5 = 0;
      v412 = 0;
      v413 = 1;
LABEL_293:
      *v2 = 0;
      v2[1] = 0;
      v224 = v2[3];
      if (v224 && v223)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v224 + 16))(v224, v5, v223);
        v62 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v62 = 0;
      }
      goto LABEL_295;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v5);
    v58 = 0;
    v5 = *v2;
    v4 = v2[1];
    v413 = 1;
    v56 = v2[2];
LABEL_63:
    if (!v57)
      v58 = 0;
    v412 = v58;
    v59 = v56 - v5;
    if (v4 <= v59)
    {
      v223 = 0;
      v344 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v344 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v344 + 16))(v344);
        v5 = *v2;
        v223 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_293;
    }
    v60 = (unsigned __int8 *)(v5 + v59);
    v61 = v5 + v59 + 1;
    v2[2] = v61;
    if (!v5)
    {
      v223 = v4;
      goto LABEL_293;
    }
    v62 = *v60;
    if (v62 < 2)
    {
      v411 = 0;
      v63 = 1;
      goto LABEL_69;
    }
LABEL_295:
    *v2 = 0;
    v2[1] = 0;
    v225 = v2[3];
    if (!v225 || !v4)
    {
      v409 = 0;
      v226 = 0;
      v5 = 0;
      v411 = 1;
LABEL_297:
      *v2 = 0;
      v2[1] = 0;
      v227 = v2[3];
      if (v227 && v226)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v227 + 16))(v227, v5, v226);
        v66 = 0;
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v66 = 0;
      }
      goto LABEL_299;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v225 + 16))(v225, v5);
    v63 = 0;
    v5 = *v2;
    v4 = v2[1];
    v411 = 1;
    v61 = v2[2];
LABEL_69:
    if (!v62)
      v63 = 0;
    v409 = v63;
    v64 = v61 - v5;
    if (v4 <= v64)
    {
      v226 = 0;
      v343 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v343 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v343 + 16))(v343);
        v5 = *v2;
        v226 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_297;
    }
    v65 = (unsigned __int8 *)(v5 + v64);
    v2[2] = (uint64_t)(v65 + 1);
    if (!v5)
    {
      v226 = v4;
      goto LABEL_297;
    }
    v66 = *v65;
    if (v66 < 2)
    {
      v410 = 0;
      v67 = 1;
      goto LABEL_75;
    }
LABEL_299:
    *v2 = 0;
    v2[1] = 0;
    v228 = v2[3];
    if (!v228 || !v4)
    {
      v5 = 0;
      v408 = 0;
      v4 = 0;
      v410 = 1;
LABEL_301:
      *v2 = 0;
      v2[1] = 0;
      v229 = v2[3];
      if (v229)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v229 + 16))(v229, v5);
          v230 = *v2;
          v4 = v2[1];
        }
        else
        {
          v230 = 0;
        }
      }
      else
      {
        v230 = 0;
        v4 = 0;
      }
LABEL_303:
      *v2 = 0;
      v2[1] = 0;
      v231 = v2[3];
      if (v231)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v231 + 16))(v231, v230);
          v5 = *v2;
          v4 = v2[1];
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
LABEL_305:
      *v2 = 0;
      v2[1] = 0;
      v232 = v2[3];
      if (v232 && v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v232 + 16))(v232, v5);
LABEL_306:
      v465[0] = 0;
      v467 = 0;
      goto LABEL_307;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, v5);
    v67 = 0;
    v5 = *v2;
    v4 = v2[1];
    v410 = 1;
LABEL_75:
    if (!v66)
      v67 = 0;
    v408 = v67;
    if (v4 <= v2[2] - v5)
      goto LABEL_301;
    v68 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v68 + 1);
    if (!v5)
    {
      v230 = 0;
      goto LABEL_303;
    }
    if (*v68 >= 2u)
      goto LABEL_305;
    if (!*v68)
    {
      LOBYTE(v445) = 0;
      v455 = 0;
      std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100](v465, (uint64_t)&v445);
      goto LABEL_249;
    }
    v375 = v10;
    v373 = v16;
    v374 = v14;
    v371 = v23;
    v372 = v21;
    if (v4 <= (unint64_t)&v68[-v5 + 1])
    {
      v265 = 0;
      v266 = 0;
      *v2 = 0;
      v2[1] = 0;
      v267 = v2[3];
      if (v267)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v267 + 16))(v267);
        v265 = 0;
        v353 = *v2;
        v354 = v2[1];
        v355 = v2[3];
        *v2 = 0;
        v2[1] = 0;
        v266 = 0;
        if (v355)
        {
          if (v354)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v355 + 16))(v355, v353);
            v266 = *v2;
            v265 = v2[1];
          }
        }
      }
    }
    else
    {
      v2[2] = (uint64_t)(v68 + 2);
      v69 = v68[1];
      if (v69 < 0x10)
      {
        v407 = v69 | 0x100;
        goto LABEL_84;
      }
      v265 = v4;
      v266 = v5;
    }
    *v2 = 0;
    v2[1] = 0;
    v268 = v2[3];
    if (v268 && v265)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v268 + 16))(v268, v266, v265);
      v407 = 0;
      v5 = *v2;
      v4 = v2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v407 = 0;
    }
LABEL_84:
    v70 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 < v70 || v4 - v70 <= 7)
    {
      v275 = 0;
      v276 = 0;
      *v2 = 0;
      v2[1] = 0;
      v277 = v2[3];
      if (v277)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v277 + 16))(v277);
          v276 = *v2;
          v275 = v2[1];
        }
        else
        {
          v275 = 0;
          v276 = 0;
        }
      }
    }
    else
    {
      v71 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v72 = v71 + 1;
      v2[2] = (uint64_t)(v71 + 1);
      if (v5)
      {
        v406 = 0;
        v405 = *v71;
        goto LABEL_88;
      }
      v275 = v4;
      v276 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v278 = v2[3];
    if (!v278)
    {
      v405 = 0;
      v275 = 0;
LABEL_436:
      v5 = 0;
      v406 = 1;
LABEL_437:
      *v2 = 0;
      v2[1] = 0;
      v279 = v2[3];
      if (v279 && v275)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v279 + 16))(v279, v5, v275);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
      goto LABEL_439;
    }
    if (!v275)
    {
      v405 = 0;
      goto LABEL_436;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v278 + 16))(v278, v276, v275);
    v405 = 0;
    v5 = *v2;
    v4 = v2[1];
    v406 = 1;
    v72 = (_QWORD *)v2[2];
LABEL_88:
    v73 = (unint64_t)v72 - v5;
    if (v4 <= v73)
    {
      v275 = 0;
      v359 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v4 && v359)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v359 + 16))(v359);
        v5 = *v2;
        v275 = v2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_437;
    }
    v74 = (unsigned __int8 *)(v5 + v73);
    v2[2] = (uint64_t)(v74 + 1);
    if (!v5)
    {
      v275 = v4;
      goto LABEL_437;
    }
    v75 = *v74;
    if (v75 < 5)
    {
      v76 = v75 | 0x100;
      goto LABEL_92;
    }
LABEL_439:
    *v2 = 0;
    v2[1] = 0;
    v280 = v2[3];
    if (v280 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v280 + 16))(v280, v5);
    v76 = 0;
LABEL_92:
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v433);
    v77 = v2[1];
    v404 = v76;
    if (!(_BYTE)v434)
    {
      v269 = 0;
      v270 = 0;
      v271 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v272 = v2[3];
      if (!v272)
        goto LABEL_430;
      if (!v77)
      {
        v269 = 0;
        v270 = 0;
LABEL_430:
        v77 = 0;
        v78 = 0;
        *v2 = 0;
        v2[1] = 0;
        v273 = v2[3];
        if (v273)
        {
          if (v269)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v273 + 16))(v273, v270, v269);
            v78 = *v2;
            v77 = v2[1];
          }
          else
          {
            v77 = 0;
            v78 = 0;
          }
        }
        goto LABEL_431;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v272 + 16))(v272, v271);
      v77 = v2[1];
    }
    v78 = *v2;
    v79 = v2[2] - *v2;
    if (v77 <= v79)
    {
      v269 = 0;
      v356 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      v270 = 0;
      if (v77 && v356)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v356 + 16))(v356);
        v270 = *v2;
        v269 = v2[1];
      }
      goto LABEL_430;
    }
    v80 = (unsigned __int8 *)(v78 + v79);
    v2[2] = (uint64_t)(v80 + 1);
    if (!v78)
    {
      v269 = v77;
      v270 = 0;
      goto LABEL_430;
    }
    v81 = *v80;
    if (v81 < 3)
    {
      v82 = v81 | 0x100;
      goto LABEL_97;
    }
LABEL_431:
    *v2 = 0;
    v2[1] = 0;
    v274 = v2[3];
    if (v274 && v77)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v274 + 16))(v274, v78);
    v82 = 0;
LABEL_97:
    v83 = IPC::Decoder::decode<WebKit::CacheModel>(v2);
    v84 = v2[1];
    v85 = *v2;
    v86 = v2[2] - *v2;
    v402 = v83;
    v403 = v82;
    if (v84 <= v86)
    {
      v281 = 0;
      v282 = 0;
      *v2 = 0;
      v2[1] = 0;
      v283 = v2[3];
      if (v283)
      {
        if (v84)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v283 + 16))(v283);
          v282 = *v2;
          v281 = v2[1];
        }
        else
        {
          v281 = 0;
          v282 = 0;
        }
      }
      goto LABEL_442;
    }
    v87 = (unsigned __int8 *)(v85 + v86);
    v88 = v85 + v86 + 1;
    v2[2] = v88;
    if (!v85)
    {
      v281 = v84;
      v282 = 0;
LABEL_442:
      *v2 = 0;
      v2[1] = 0;
      v284 = v2[3];
      if (v284 && v281)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, v282, v281);
        v89 = 0;
        v85 = *v2;
        v84 = v2[1];
      }
      else
      {
        v84 = 0;
        v85 = 0;
        v89 = 0;
      }
      goto LABEL_444;
    }
    v89 = *v87;
    if (v89 < 2)
    {
      v401 = 0;
      v90 = 1;
      goto LABEL_101;
    }
LABEL_444:
    *v2 = 0;
    v2[1] = 0;
    v285 = v2[3];
    if (!v285 || !v84)
    {
      v286 = 0;
      v85 = 0;
      v400 = 0;
      v401 = 1;
LABEL_446:
      *v2 = 0;
      v2[1] = 0;
      v287 = v2[3];
      if (v287 && v286)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v287 + 16))(v287, v85, v286);
        v93 = 0;
        v85 = *v2;
        v84 = v2[1];
      }
      else
      {
        v84 = 0;
        v85 = 0;
        v93 = 0;
      }
      goto LABEL_448;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v285 + 16))(v285, v85);
    v90 = 0;
    v85 = *v2;
    v84 = v2[1];
    v401 = 1;
    v88 = v2[2];
LABEL_101:
    if (!v89)
      v90 = 0;
    v400 = v90;
    v91 = v88 - v85;
    if (v84 <= v91)
    {
      v286 = 0;
      v360 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v84 && v360)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v360 + 16))(v360);
        v85 = *v2;
        v286 = v2[1];
      }
      else
      {
        v85 = 0;
      }
      goto LABEL_446;
    }
    v92 = (unsigned __int8 *)(v85 + v91);
    v2[2] = (uint64_t)(v92 + 1);
    if (!v85)
    {
      v286 = v84;
      goto LABEL_446;
    }
    v93 = *v92;
    if (v93 < 2)
    {
      v399 = 0;
      v94 = 1;
      goto LABEL_107;
    }
LABEL_448:
    *v2 = 0;
    v2[1] = 0;
    v288 = v2[3];
    if (v288 && v84)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v288 + 16))(v288, v85);
    v94 = 0;
    v399 = 1;
LABEL_107:
    if (v93)
      v95 = v94;
    else
      v95 = 0;
    IPC::Decoder::decode<WTF::String>(v2, &v443);
    IPC::Decoder::decode<WTF::String>(v2, v441);
    v96 = IPC::Decoder::decode<char32_t>(v2);
    v97 = IPC::Decoder::decode<char32_t>(v2);
    v98 = IPC::Decoder::decode<char32_t>(v2);
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, (uint64_t)&v436);
    v99 = v2[1];
    v100 = *v2;
    v101 = v2[2] - *v2;
    v396 = v97;
    v397 = v96;
    v395 = v98;
    v398 = v95;
    if (v99 <= v101)
    {
      v289 = 0;
      v290 = 0;
      *v2 = 0;
      v2[1] = 0;
      v291 = v2[3];
      if (v291)
      {
        if (v99)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v291 + 16))(v291);
          v290 = *v2;
          v289 = v2[1];
        }
        else
        {
          v289 = 0;
          v290 = 0;
        }
      }
      goto LABEL_451;
    }
    v102 = (unsigned __int8 *)(v100 + v101);
    v103 = v100 + v101 + 1;
    v2[2] = v103;
    if (!v100)
    {
      v289 = v99;
      v290 = 0;
LABEL_451:
      *v2 = 0;
      v2[1] = 0;
      v292 = v2[3];
      if (v292 && v289)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v292 + 16))(v292, v290, v289);
        v104 = 0;
        v100 = *v2;
        v99 = v2[1];
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v104 = 0;
      }
      goto LABEL_453;
    }
    v104 = *v102;
    if (v104 < 2)
    {
      v394 = 0;
      v105 = 1;
      goto LABEL_114;
    }
LABEL_453:
    *v2 = 0;
    v2[1] = 0;
    v293 = v2[3];
    if (!v293 || !v99)
    {
      v294 = 0;
      v100 = 0;
      v393 = 0;
      v394 = 1;
LABEL_455:
      *v2 = 0;
      v2[1] = 0;
      v295 = v2[3];
      if (v295 && v294)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v295 + 16))(v295, v100, v294);
        v109 = 0;
        v100 = *v2;
        v99 = v2[1];
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v109 = 0;
      }
      goto LABEL_457;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v293 + 16))(v293, v100);
    v105 = 0;
    v100 = *v2;
    v99 = v2[1];
    v394 = 1;
    v103 = v2[2];
LABEL_114:
    if (!v104)
      v105 = 0;
    v393 = v105;
    v106 = v103 - v100;
    if (v99 <= v106)
    {
      v294 = 0;
      v364 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v99 && v364)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v364 + 16))(v364);
        v100 = *v2;
        v294 = v2[1];
      }
      else
      {
        v100 = 0;
      }
      goto LABEL_455;
    }
    v107 = (unsigned __int8 *)(v100 + v106);
    v108 = v100 + v106 + 1;
    v2[2] = v108;
    if (!v100)
    {
      v294 = v99;
      goto LABEL_455;
    }
    v109 = *v107;
    if (v109 < 2)
    {
      v392 = 0;
      v110 = 1;
      goto LABEL_120;
    }
LABEL_457:
    *v2 = 0;
    v2[1] = 0;
    v296 = v2[3];
    if (!v296 || !v99)
    {
      v297 = 0;
      v100 = 0;
      v391 = 0;
      v392 = 1;
LABEL_459:
      *v2 = 0;
      v2[1] = 0;
      v298 = v2[3];
      if (v298 && v297)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v298 + 16))(v298, v100, v297);
        v114 = 0;
        v100 = *v2;
        v99 = v2[1];
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v114 = 0;
      }
      goto LABEL_461;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v296 + 16))(v296, v100);
    v110 = 0;
    v100 = *v2;
    v99 = v2[1];
    v392 = 1;
    v108 = v2[2];
LABEL_120:
    if (!v109)
      v110 = 0;
    v391 = v110;
    v111 = v108 - v100;
    if (v99 <= v111)
    {
      v297 = 0;
      v363 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v99 && v363)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v363 + 16))(v363);
        v100 = *v2;
        v297 = v2[1];
      }
      else
      {
        v100 = 0;
      }
      goto LABEL_459;
    }
    v112 = (unsigned __int8 *)(v100 + v111);
    v113 = v100 + v111 + 1;
    v2[2] = v113;
    if (!v100)
    {
      v297 = v99;
      goto LABEL_459;
    }
    v114 = *v112;
    if (v114 < 2)
    {
      v390 = 0;
      v115 = 1;
      goto LABEL_126;
    }
LABEL_461:
    *v2 = 0;
    v2[1] = 0;
    v299 = v2[3];
    if (!v299 || !v99)
    {
      v300 = 0;
      v100 = 0;
      v389 = 0;
      v390 = 1;
LABEL_463:
      *v2 = 0;
      v2[1] = 0;
      v301 = v2[3];
      if (v301 && v300)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v100, v300);
        v119 = 0;
        v100 = *v2;
        v99 = v2[1];
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v119 = 0;
      }
      goto LABEL_465;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v299 + 16))(v299, v100);
    v115 = 0;
    v100 = *v2;
    v99 = v2[1];
    v390 = 1;
    v113 = v2[2];
LABEL_126:
    if (!v114)
      v115 = 0;
    v389 = v115;
    v116 = v113 - v100;
    if (v99 <= v116)
    {
      v300 = 0;
      v362 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v99 && v362)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v362 + 16))(v362);
        v100 = *v2;
        v300 = v2[1];
      }
      else
      {
        v100 = 0;
      }
      goto LABEL_463;
    }
    v117 = (unsigned __int8 *)(v100 + v116);
    v118 = v100 + v116 + 1;
    v2[2] = v118;
    if (!v100)
    {
      v300 = v99;
      goto LABEL_463;
    }
    v119 = *v117;
    if (v119 < 2)
    {
      v388 = 0;
      v120 = 1;
      goto LABEL_132;
    }
LABEL_465:
    *v2 = 0;
    v2[1] = 0;
    v302 = v2[3];
    if (!v302 || !v99)
    {
      v303 = 0;
      v100 = 0;
      v387 = 0;
      v388 = 1;
LABEL_467:
      *v2 = 0;
      v2[1] = 0;
      v304 = v2[3];
      if (v304 && v303)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v304 + 16))(v304, v100, v303);
        v123 = 0;
        v100 = *v2;
        v99 = v2[1];
      }
      else
      {
        v99 = 0;
        v100 = 0;
        v123 = 0;
      }
      goto LABEL_469;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v302 + 16))(v302, v100);
    v120 = 0;
    v100 = *v2;
    v99 = v2[1];
    v388 = 1;
    v118 = v2[2];
LABEL_132:
    if (!v119)
      v120 = 0;
    v387 = v120;
    v121 = v118 - v100;
    if (v99 <= v121)
    {
      v303 = 0;
      v361 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v99 && v361)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v361 + 16))(v361);
        v100 = *v2;
        v303 = v2[1];
      }
      else
      {
        v100 = 0;
      }
      goto LABEL_467;
    }
    v122 = (unsigned __int8 *)(v100 + v121);
    v2[2] = (uint64_t)(v122 + 1);
    if (!v100)
    {
      v303 = v99;
      goto LABEL_467;
    }
    v123 = *v122;
    if (v123 < 2)
    {
      v386 = 0;
      v124 = 1;
      goto LABEL_138;
    }
LABEL_469:
    *v2 = 0;
    v2[1] = 0;
    v305 = v2[3];
    if (v305 && v99)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v305 + 16))(v305, v100);
    v124 = 0;
    v386 = 1;
LABEL_138:
    if (!v123)
      v124 = 0;
    v385 = v124;
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v439);
    v125 = v2[1];
    if (!BYTE8(v439))
    {
      v306 = 0;
      v307 = 0;
      v308 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v309 = v2[3];
      if (!v309)
        goto LABEL_472;
      if (!v125)
      {
        v306 = 0;
        v307 = 0;
        goto LABEL_472;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v309 + 16))(v309, v308);
      v125 = v2[1];
    }
    v126 = *v2;
    v127 = v2[2] - *v2;
    if (v125 <= v127)
    {
      v306 = 0;
      v357 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      v307 = 0;
      if (v125 && v357)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v357 + 16))(v357);
        v307 = *v2;
        v306 = v2[1];
      }
      goto LABEL_472;
    }
    v128 = (unsigned __int8 *)(v126 + v127);
    v129 = v126 + v127 + 1;
    v2[2] = v129;
    if (!v126)
    {
      v306 = v125;
      v307 = 0;
LABEL_472:
      *v2 = 0;
      v2[1] = 0;
      v310 = v2[3];
      if (v310 && v306)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v310 + 16))(v310, v307, v306);
        v130 = 0;
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v130 = 0;
      }
      goto LABEL_474;
    }
    v130 = *v128;
    if (v130 < 2)
    {
      v384 = 0;
      v131 = 1;
      goto LABEL_145;
    }
LABEL_474:
    *v2 = 0;
    v2[1] = 0;
    v311 = v2[3];
    if (!v311 || !v125)
    {
      v312 = 0;
      v126 = 0;
      v383 = 0;
      v384 = 1;
LABEL_476:
      *v2 = 0;
      v2[1] = 0;
      v313 = v2[3];
      if (v313 && v312)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v313 + 16))(v313, v126, v312);
        v135 = 0;
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v135 = 0;
      }
      goto LABEL_478;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v311 + 16))(v311, v126);
    v131 = 0;
    v126 = *v2;
    v125 = v2[1];
    v384 = 1;
    v129 = v2[2];
LABEL_145:
    if (!v130)
      v131 = 0;
    v383 = v131;
    v132 = v129 - v126;
    if (v125 <= v132)
    {
      v312 = 0;
      v368 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v125 && v368)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v368 + 16))(v368);
        v126 = *v2;
        v312 = v2[1];
      }
      else
      {
        v126 = 0;
      }
      goto LABEL_476;
    }
    v133 = (unsigned __int8 *)(v126 + v132);
    v134 = v126 + v132 + 1;
    v2[2] = v134;
    if (!v126)
    {
      v312 = v125;
      goto LABEL_476;
    }
    v135 = *v133;
    if (v135 < 2)
    {
      v382 = 0;
      v136 = 1;
      goto LABEL_151;
    }
LABEL_478:
    *v2 = 0;
    v2[1] = 0;
    v314 = v2[3];
    if (!v314 || !v125)
    {
      v315 = 0;
      v126 = 0;
      v381 = 0;
      v382 = 1;
LABEL_480:
      *v2 = 0;
      v2[1] = 0;
      v316 = v2[3];
      if (v316 && v315)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v316 + 16))(v316, v126, v315);
        v140 = 0;
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v140 = 0;
      }
      goto LABEL_482;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v314 + 16))(v314, v126);
    v136 = 0;
    v126 = *v2;
    v125 = v2[1];
    v382 = 1;
    v134 = v2[2];
LABEL_151:
    if (!v135)
      v136 = 0;
    v381 = v136;
    v137 = v134 - v126;
    if (v125 <= v137)
    {
      v315 = 0;
      v367 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v125 && v367)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v367 + 16))(v367);
        v126 = *v2;
        v315 = v2[1];
      }
      else
      {
        v126 = 0;
      }
      goto LABEL_480;
    }
    v138 = (unsigned __int8 *)(v126 + v137);
    v139 = v126 + v137 + 1;
    v2[2] = v139;
    if (!v126)
    {
      v315 = v125;
      goto LABEL_480;
    }
    v140 = *v138;
    if (v140 < 2)
    {
      v380 = 0;
      v141 = 1;
      goto LABEL_157;
    }
LABEL_482:
    *v2 = 0;
    v2[1] = 0;
    v317 = v2[3];
    if (!v317 || !v125)
    {
      v318 = 0;
      v126 = 0;
      v379 = 0;
      v380 = 1;
LABEL_484:
      *v2 = 0;
      v2[1] = 0;
      v319 = v2[3];
      if (v319 && v318)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v126, v318);
        v145 = 0;
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v145 = 0;
      }
      goto LABEL_486;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, v126);
    v141 = 0;
    v126 = *v2;
    v125 = v2[1];
    v380 = 1;
    v139 = v2[2];
LABEL_157:
    if (!v140)
      v141 = 0;
    v379 = v141;
    v142 = v139 - v126;
    if (v125 <= v142)
    {
      v318 = 0;
      v366 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v125 && v366)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v366 + 16))(v366);
        v126 = *v2;
        v318 = v2[1];
      }
      else
      {
        v126 = 0;
      }
      goto LABEL_484;
    }
    v143 = (unsigned __int8 *)(v126 + v142);
    v144 = v126 + v142 + 1;
    v2[2] = v144;
    if (!v126)
    {
      v318 = v125;
      goto LABEL_484;
    }
    v145 = *v143;
    if (v145 < 2)
    {
      v378 = 0;
      v146 = 1;
      goto LABEL_163;
    }
LABEL_486:
    *v2 = 0;
    v2[1] = 0;
    v320 = v2[3];
    if (!v320 || !v125)
    {
      v321 = 0;
      v126 = 0;
      v377 = 0;
      v378 = 1;
LABEL_488:
      *v2 = 0;
      v2[1] = 0;
      v322 = v2[3];
      if (v322 && v321)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v322 + 16))(v322, v126, v321);
        v149 = 0;
        v126 = *v2;
        v125 = v2[1];
      }
      else
      {
        v125 = 0;
        v126 = 0;
        v149 = 0;
      }
      goto LABEL_490;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v320 + 16))(v320, v126);
    v146 = 0;
    v126 = *v2;
    v125 = v2[1];
    v378 = 1;
    v144 = v2[2];
LABEL_163:
    if (!v145)
      v146 = 0;
    v377 = v146;
    v147 = v144 - v126;
    if (v125 <= v147)
    {
      v321 = 0;
      v365 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v125 && v365)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v365 + 16))(v365);
        v126 = *v2;
        v321 = v2[1];
      }
      else
      {
        v126 = 0;
      }
      goto LABEL_488;
    }
    v148 = (unsigned __int8 *)(v126 + v147);
    v2[2] = (uint64_t)(v148 + 1);
    if (!v126)
    {
      v321 = v125;
      goto LABEL_488;
    }
    v149 = *v148;
    if (v149 < 2)
    {
      v376 = 0;
      v150 = 1;
      goto LABEL_169;
    }
LABEL_490:
    *v2 = 0;
    v2[1] = 0;
    v323 = v2[3];
    if (v323 && v125)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v323 + 16))(v323, v126);
    v150 = 0;
    v376 = 1;
LABEL_169:
    if (v149)
      v151 = v150;
    else
      v151 = 0;
    IPC::Decoder::decode<std::optional<WebCore::ElementContext>>((unint64_t *)v2, (uint64_t)&v484);
    v152 = v2[1];
    v153 = *v2;
    v154 = v2[2] - *v2;
    if (v152 <= v154)
    {
      v324 = 0;
      v325 = 0;
      *v2 = 0;
      v2[1] = 0;
      v326 = v2[3];
      if (v326)
      {
        if (v152)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v326 + 16))(v326);
          v325 = *v2;
          v324 = v2[1];
        }
        else
        {
          v324 = 0;
          v325 = 0;
        }
      }
      goto LABEL_493;
    }
    v155 = (unsigned __int8 *)(v153 + v154);
    v2[2] = (uint64_t)(v155 + 1);
    if (!v153)
    {
      v324 = v152;
      v325 = 0;
LABEL_493:
      v152 = 0;
      v153 = 0;
      *v2 = 0;
      v2[1] = 0;
      v327 = v2[3];
      if (v327)
      {
        if (v324)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v327 + 16))(v327, v325, v324);
          v153 = *v2;
          v152 = v2[1];
        }
        else
        {
          v152 = 0;
          v153 = 0;
        }
      }
      goto LABEL_494;
    }
    v156 = *v155;
    if (v156 < 2)
    {
      if (v156)
      {
        IPC::Decoder::decode<WebCore::FontAttributes>(v2, &v468);
        v158 = v475;
        if ((_BYTE)v475)
        {
          WebCore::FontAttributes::FontAttributes((uint64_t)v426, (uint64_t *)&v468);
          v158 = 1;
          v427 = 1;
        }
        else
        {
          LOBYTE(v426[0]) = 0;
        }
      }
      else
      {
        LOBYTE(v468) = 0;
        LOBYTE(v475) = 0;
        std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100](v426, (uint64_t)&v468);
        v158 = 1;
      }
      v428 = v158;
      v160 = std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v468, v157);
      goto LABEL_182;
    }
LABEL_494:
    *v2 = 0;
    v2[1] = 0;
    v160 = v2[3];
    if (v160 && v152)
      v160 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v153);
    LOBYTE(v426[0]) = 0;
    v428 = 0;
LABEL_182:
    v4 = v2[1];
    if (!v428)
    {
      v328 = 0;
      v329 = 0;
      v330 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v331 = v2[3];
      if (!v331)
        goto LABEL_497;
      if (!v4)
      {
        v328 = 0;
        v329 = 0;
        goto LABEL_497;
      }
      v160 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v331 + 16))(v331, v330);
      v4 = v2[1];
    }
    v161 = (char *)*v2;
    v162 = v2[2] - *v2;
    if (v4 <= v162)
    {
      v328 = 0;
      v358 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      v329 = 0;
      if (v4 && v358)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v358 + 16))(v358);
        v329 = *v2;
        v328 = v2[1];
      }
      goto LABEL_497;
    }
    v163 = &v161[v162];
    v164 = (uint64_t)&v161[v162 + 1];
    v2[2] = v164;
    if (!v161)
    {
      v328 = v4;
      v329 = 0;
LABEL_497:
      *v2 = 0;
      v2[1] = 0;
      v332 = v2[3];
      if (v332 && v328)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v332 + 16))(v332, v329, v328);
        v165 = 0;
        v161 = (char *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v161 = 0;
        v165 = 0;
      }
      goto LABEL_499;
    }
    v165 = *v163;
    if (v165 < 2)
    {
      v166 = 0;
      v167 = 1;
      goto LABEL_187;
    }
LABEL_499:
    *v2 = 0;
    v2[1] = 0;
    v333 = v2[3];
    if (!v333 || !v4)
    {
      v168 = 0;
      v334 = 0;
      v161 = 0;
      v166 = 1;
LABEL_501:
      *v2 = 0;
      v2[1] = 0;
      v335 = v2[3];
      if (v335 && v334)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v335 + 16))(v335, v161, v334);
        v172 = 0;
        v161 = (char *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v161 = 0;
        v172 = 0;
      }
      goto LABEL_503;
    }
    v160 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v333 + 16))(v333, v161);
    v167 = 0;
    v161 = (char *)*v2;
    v4 = v2[1];
    v166 = 1;
    v164 = v2[2];
LABEL_187:
    if (v165)
      v168 = v167;
    else
      v168 = 0;
    v169 = v164 - (_QWORD)v161;
    if (v4 <= v169)
    {
      v334 = 0;
      v370 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v4 && v370)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v370 + 16))(v370);
        v161 = (char *)*v2;
        v334 = v2[1];
      }
      else
      {
        v161 = 0;
      }
      goto LABEL_501;
    }
    v170 = &v161[v169];
    v171 = (uint64_t)&v161[v169 + 1];
    v2[2] = v171;
    if (!v161)
    {
      v334 = v4;
      goto LABEL_501;
    }
    v172 = *v170;
    if (v172 < 2)
    {
      v173 = 0;
      v174 = 1;
      goto LABEL_194;
    }
LABEL_503:
    *v2 = 0;
    v2[1] = 0;
    v336 = v2[3];
    if (!v336 || !v4)
    {
      v175 = 0;
      v337 = 0;
      v161 = 0;
      v173 = 1;
LABEL_505:
      *v2 = 0;
      v2[1] = 0;
      v338 = v2[3];
      if (v338 && v337)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v338 + 16))(v338, v161, v337);
        v161 = (char *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v161 = 0;
      }
      goto LABEL_507;
    }
    v160 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v336 + 16))(v336, v161);
    v174 = 0;
    v161 = (char *)*v2;
    v4 = v2[1];
    v173 = 1;
    v171 = v2[2];
LABEL_194:
    if (v172)
      v175 = v174;
    else
      v175 = 0;
    v176 = v171 - (_QWORD)v161;
    if (v4 <= v176)
    {
      v337 = 0;
      v369 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v4 && v369)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v369 + 16))(v369);
        v161 = (char *)*v2;
        v337 = v2[1];
      }
      else
      {
        v161 = 0;
      }
      goto LABEL_505;
    }
    v177 = &v161[v176];
    v2[2] = (uint64_t)(v177 + 1);
    if (!v161)
    {
      v337 = v4;
      goto LABEL_505;
    }
    v178 = v9;
    v179 = a2;
    v180 = *v177;
    if (v180 <= 1)
    {
      v181 = 0;
      a2 = v180 != 0;
      goto LABEL_201;
    }
LABEL_507:
    *v2 = 0;
    v2[1] = 0;
    v339 = v2[3];
    if (v339)
    {
      if (v4)
      {
        v178 = v9;
        v179 = a2;
        v160 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v339 + 16))(v339, v161);
        if (*v2)
        {
          a2 = 0;
          v181 = 1;
LABEL_201:
          if (v407 <= 0xFF)
            goto LABEL_516;
          LOBYTE(v468) = v407;
          if (v406)
            goto LABEL_516;
          *((_QWORD *)&v468 + 1) = v405;
          if (v404 <= 0xFF)
            goto LABEL_516;
          LOBYTE(v469) = v404;
          if (!(_BYTE)v434)
            goto LABEL_516;
          v160 = WebCore::Color::Color();
          if (v403 <= 0xFF)
            goto LABEL_516;
          LOBYTE(v470) = v403;
          if (v402 <= 0xFFu)
            goto LABEL_516;
          BYTE1(v470) = v402;
          if (v401)
            goto LABEL_516;
          BYTE2(v470) = v400;
          if (v399)
            goto LABEL_516;
          BYTE3(v470) = v398;
          if (!BYTE8(v443))
            goto LABEL_516;
          v182 = v443;
          *(_QWORD *)&v443 = 0;
          *((_QWORD *)&v470 + 1) = v182;
          if (!LOBYTE(v441[1]))
            goto LABEL_516;
          v183 = v441[0];
          v441[0] = 0;
          v471 = v183;
          if (!HIDWORD(v397))
            goto LABEL_516;
          LODWORD(v472) = v397;
          if (!HIDWORD(v396))
            goto LABEL_516;
          HIDWORD(v472) = v396;
          if (!HIDWORD(v395))
            goto LABEL_516;
          LODWORD(v473) = v395;
          if (!v438)
            goto LABEL_516;
          v474 = v436;
          v184 = v437;
          v436 = 0;
          v437 = 0;
          *(_QWORD *)&v475 = v184;
          if (v394)
            goto LABEL_516;
          BYTE8(v475) = v393;
          if (v392)
            goto LABEL_516;
          BYTE9(v475) = v391;
          if (v390)
            goto LABEL_516;
          BYTE10(v475) = v389;
          if (v388)
            goto LABEL_516;
          BYTE11(v475) = v387;
          if (v386)
            goto LABEL_516;
          BYTE12(v475) = v385;
          if (!BYTE8(v439))
            goto LABEL_516;
          v160 = WebCore::Color::Color();
          if (v384)
            goto LABEL_516;
          BYTE8(v476) = v383;
          if (v382)
            goto LABEL_516;
          BYTE9(v476) = v381;
          if (v380)
            goto LABEL_516;
          BYTE10(v476) = v379;
          if (v378)
            goto LABEL_516;
          BYTE11(v476) = v377;
          if (v376)
            goto LABEL_516;
          BYTE12(v476) = v151;
          if (!v490)
            goto LABEL_516;
          v479 = v486;
          v480 = v487;
          v481 = v488;
          v482 = v489;
          v477 = v484;
          v478 = v485;
          if (!v428)
            goto LABEL_516;
          v160 = (uint64_t)std::__optional_move_base<WebCore::FontAttributes,false>::__optional_move_base[abi:sn180100](v483, (uint64_t)v426);
          if (v166)
            goto LABEL_516;
          v483[88] = v168;
          if (v173)
            goto LABEL_516;
          v483[89] = v175;
          if (v181)
            goto LABEL_516;
          v483[90] = a2;
          WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)&v445, &v468);
          v455 = 1;
          WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v468, v185);
          a2 = v179;
          v9 = v178;
          goto LABEL_232;
        }
      }
    }
    LOBYTE(v445) = 0;
    v455 = 0;
LABEL_232:
    v10 = v375;
    v16 = v373;
    v14 = v374;
    v23 = v371;
    v21 = v372;
    if (v428)
      std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v426, v161);
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v439, v161);
    if (v438)
    {
      v187 = v436;
      if (v436)
      {
        v436 = 0;
        LODWORD(v437) = 0;
        WTF::fastFree(v187, v186);
      }
    }
    if (LOBYTE(v441[1]))
    {
      v188 = v441[0];
      v441[0] = 0;
      if (v188)
      {
        if (*(_DWORD *)v188 == 2)
          WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v186);
        else
          *(_DWORD *)v188 -= 2;
      }
    }
    if (BYTE8(v443))
    {
      v189 = (WTF::StringImpl *)v443;
      *(_QWORD *)&v443 = 0;
      if (v189)
      {
        if (*(_DWORD *)v189 == 2)
          WTF::StringImpl::destroy(v189, (WTF::StringImpl *)v186);
        else
          *(_DWORD *)v189 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v433, v186);
    if (!v455)
    {
      v340 = *v2;
      v341 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v342 = v2[3];
      if (!v342)
        goto LABEL_306;
      if (!v341)
        goto LABEL_306;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v342 + 16))(v342, v340);
      v10 = v375;
      v16 = v373;
      v14 = v374;
      v23 = v371;
      v21 = v372;
      if (!v455)
        goto LABEL_306;
    }
    WebKit::EditorState::PostLayoutData::PostLayoutData((uint64_t)v465, &v445);
    v466 = 1;
LABEL_249:
    v467 = 1;
    if (v455)
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v445, v159);
LABEL_307:
    v233 = v2[1];
    if (!v467)
    {
      v255 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v256 = v2[3];
      if (!v256 || !v233)
      {
        v233 = 0;
        v234 = (char *)*v2;
LABEL_414:
        v257 = 0;
        v258 = 0;
        *v2 = 0;
        v2[1] = 0;
        v259 = v2[3];
        if (v259)
        {
          if (v233)
          {
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v259 + 16))(v259, v234);
            v258 = *v2;
            v257 = v2[1];
          }
          else
          {
            v257 = 0;
            v258 = 0;
          }
        }
        goto LABEL_415;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v256 + 16))(v256, v255);
      v233 = v2[1];
    }
    v234 = (char *)*v2;
    v235 = v2[2] - *v2;
    if (v233 <= v235)
      goto LABEL_414;
    v236 = &v234[v235];
    v2[2] = (uint64_t)(v236 + 1);
    if (!v234)
    {
      v257 = v233;
      v258 = 0;
LABEL_415:
      v233 = 0;
      v234 = 0;
      *v2 = 0;
      v2[1] = 0;
      v260 = v2[3];
      if (v260)
      {
        if (v257)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v260 + 16))(v260, v258, v257);
          v234 = (char *)*v2;
          v233 = v2[1];
        }
        else
        {
          v233 = 0;
          v234 = 0;
        }
      }
LABEL_416:
      *v2 = 0;
      v2[1] = 0;
      v261 = v2[3];
      if (v261 && v233)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v261 + 16))(v261, v234);
      LOBYTE(v468) = 0;
      BYTE8(v477) = 0;
      goto LABEL_330;
    }
    v237 = *v236;
    if (v237 >= 2)
      goto LABEL_416;
    if (!v237)
    {
      LOBYTE(v445) = 0;
      v454 = 0;
      LOBYTE(v468) = 0;
      LOBYTE(v477) = 0;
      goto LABEL_328;
    }
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v443);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)v441);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v439);
    IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v436);
    IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v433);
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v431);
    v160 = IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v2, (uint64_t)&v429);
    v238 = *v2;
    if (*v2)
    {
      if (!v444)
        goto LABEL_516;
      v484 = v443;
      if (!v442)
        goto LABEL_516;
      v485 = *(_OWORD *)v441;
      if (!v440)
        goto LABEL_516;
      v486 = v439;
      if (!v438)
        goto LABEL_516;
      v239 = v436;
      v240 = v437;
      v436 = 0;
      v437 = 0;
      if (!v435)
        goto LABEL_516;
      v241 = v433;
      v242 = v434;
      v433 = 0;
      v434 = 0;
      if (!v432)
        goto LABEL_516;
      v426[0] = v431;
      if (!v430)
        goto LABEL_516;
      v445 = v484;
      v446 = v485;
      v447 = v486;
      v448 = v239;
      v449 = v240;
      v450 = v241;
      v451 = v242;
      v452 = v426[0];
      v453 = v429;
      v243 = 1;
      v454 = 1;
    }
    else
    {
      LOBYTE(v445) = 0;
      v454 = 0;
      if (v435)
      {
        v262 = v433;
        if (v433)
        {
          v433 = 0;
          LODWORD(v434) = 0;
          WTF::fastFree(v262, v234);
        }
      }
      v243 = 0;
    }
    if (v438)
    {
      v244 = v436;
      if (v436)
      {
        v436 = 0;
        LODWORD(v437) = 0;
        WTF::fastFree(v244, v234);
      }
    }
    if (!v238)
    {
      v234 = (char *)*v2;
      v263 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v264 = v2[3];
      if (v264)
      {
        if (v263)
        {
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v264 + 16))(v264, v234);
          v243 = v454;
        }
      }
    }
    if (v243)
    {
      v468 = v445;
      v469 = v446;
      v470 = v447;
      v245 = v448;
      v448 = 0;
      v471 = v245;
      v246 = v449;
      v449 = 0;
      v472 = v246;
      v247 = v450;
      v450 = 0;
      v473 = v247;
      v248 = v451;
      v451 = 0;
      v474 = v248;
      v476 = v453;
      v475 = v452;
      LOBYTE(v477) = 1;
LABEL_328:
      BYTE8(v477) = 1;
      v160 = std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v445, v234);
      goto LABEL_331;
    }
    LOBYTE(v468) = 0;
    BYTE8(v477) = 0;
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v445, v234);
LABEL_330:
    v249 = (void *)*v2;
    v4 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v160 = v2[3];
    if (v160 && v4)
      v160 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v160 + 16))(v160, v249);
LABEL_331:
    if (!*v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 480) = 0;
      goto LABEL_350;
    }
    if (v10)
    {
      *(_QWORD *)&v445 = v9;
      if (!v14)
      {
        BYTE8(v445) = v16;
        if (!v21)
        {
          BYTE9(v445) = v23;
          if (!v425)
          {
            BYTE10(v445) = v424;
            if (!v423)
            {
              BYTE11(v445) = v421;
              if (!v422)
              {
                BYTE12(v445) = v420;
                if (!v419)
                {
                  BYTE13(v445) = v418;
                  if (!v417)
                  {
                    BYTE14(v445) = v416;
                    if (!v415)
                    {
                      HIBYTE(v445) = v414;
                      if (!v413)
                      {
                        LOBYTE(v446) = v412;
                        if (!v411)
                        {
                          BYTE1(v446) = v409;
                          if (!v410)
                          {
                            BYTE2(v446) = v408;
                            if (v467)
                            {
                              v2 = (uint64_t *)&v447;
                              v160 = (uint64_t)std::__optional_move_base<WebKit::EditorState::PostLayoutData,false>::__optional_move_base[abi:sn180100](&v447, (uint64_t)v465);
                              if (BYTE8(v477))
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_516:
    __break(1u);
LABEL_517:
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 16))(v160);
      v191 = *v2;
      v190 = v2[1];
    }
    else
    {
      v190 = 0;
      v191 = 0;
    }
  }
  LOBYTE(v457[0]) = 0;
  v464 = 0;
  if ((_BYTE)v477)
  {
    v457[0] = v468;
    v457[1] = v469;
    v457[2] = v470;
    v250 = v471;
    v471 = 0;
    v458 = v250;
    v251 = v472;
    v472 = 0;
    v459 = v251;
    v252 = v473;
    v473 = 0;
    v460 = v252;
    v253 = v474;
    v474 = 0;
    v461 = v253;
    v462 = v475;
    v463 = v476;
    v464 = 1;
  }
  std::__optional_destruct_base<WebKit::EditorState,false>::__optional_destruct_base[abi:sn180100]<WebKit::EditorState>(a2, &v445);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v457, v254);
  if (v456)
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v447, v249);
LABEL_350:
  if (BYTE8(v477))
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v468, v249);
  if (v467)
  {
    if (v466)
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v465, v249);
  }
}

void sub_196E19E3C(_Unwind_Exception *a1, void *a2)
{
  if (LOBYTE(STACK[0x330]))
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&STACK[0x200], a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::EditorState::PostLayoutData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  char *result;
  _QWORD *v11;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 24));
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 34);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 35);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  LODWORD(v5) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 72);
  LOBYTE(v5) = *(_BYTE *)(a2 + 88);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 89);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 90);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 91);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 92);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 96));
  LOBYTE(v5) = *(_BYTE *)(a2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 105);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 106);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 107);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 108);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(a1, a2 + 112);
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 288);
  v6 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!(_DWORD)v5)
  {
    *v6 = 0;
    goto LABEL_5;
  }
  *v6 = 1;
  if (*(_BYTE *)(a2 + 288))
  {
    IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode(a1, (uint64_t *)(a2 + 208));
LABEL_5:
    v7 = *(_BYTE *)(a2 + 296);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
    v8 = *(_BYTE *)(a2 + 297);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
    v9 = *(_BYTE *)(a2 + 298);
    result = IPC::Encoder::grow(a1, 1uLL, 1);
    *result = v9;
    return result;
  }
  v11 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)IPC::Decoder::decode<char32_t>(v11);
}

unint64_t IPC::Decoder::decode<char32_t>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = v2 + v3;
    a1[2] = v5 + 4;
    if (!v2)
    {
      v7 = 0;
      LODWORD(v5) = 0;
LABEL_9:
      v6 = 0;
      goto LABEL_10;
    }
    LODWORD(v5) = *(_DWORD *)v5;
    v6 = v5 & 0xFFFFFF00;
    LODWORD(v5) = v5;
    v7 = 0x100000000;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (!v5)
    {
      v7 = 0;
      goto LABEL_9;
    }
    v14 = a1;
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v7 = 0;
    LODWORD(v5) = 0;
    v6 = 0;
    a1 = v14;
  }
LABEL_10:
  v8 = v7 | v6 | v5;
  if (!HIDWORD(v7))
  {
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return v8;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E1A530(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::EditorState::VisualData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 4);
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 10);
  return IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, a2 + 12);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E1A614(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[3];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a1, &v13);
  v4 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v9 = v8;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  if (*a1)
  {
    if (v14)
    {
      v12 = v13;
      v13 = 0;
      if (v6)
      {
        if (v9 && (_BYTE)v11)
        {
          *(_QWORD *)a2 = v12;
          *(_QWORD *)(a2 + 8) = v4;
          *(_QWORD *)(a2 + 16) = v7;
          *(_QWORD *)(a2 + 24) = result;
          *(_BYTE *)(a2 + 32) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E1A794(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a1, &v13);
  IPC::Decoder::decode<WTF::String>(a1, &v11);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (*a1)
  {
    if (v14)
    {
      v6 = v13;
      v13 = 0;
      if (v12)
      {
        v7 = v11;
        v11 = 0;
        if (v10)
        {
          v8 = v9;
          *(_QWORD *)a2 = v6;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v8;
          *(_BYTE *)(a2 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_6:
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E1A8F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 6);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)a2 + 7);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits> const&>(a1, (_QWORD **)a2 + 8);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(a2[9] + 16), *(_QWORD *)(a2[9] + 24));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(a2[10] + 16), *(_QWORD *)(a2[10] + 24));
  v5 = a2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a2 + 96);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v4;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2 + 13);
  IPC::VectorArgumentCoder<false,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 15));
  return IPC::VectorArgumentCoder<false,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 17));
}

void IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  char v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  __int128 v30;
  __int128 v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[25];
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF *v58[2];
  unsigned __int8 v59;
  WTF *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  char v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  WTF::StringImpl **v70;
  unsigned __int8 v71;
  WTF::StringImpl **v72;
  unsigned __int8 v73;
  WTF::StringImpl *v74;
  unsigned __int8 v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  unsigned __int8 v79;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::URL>(a1, &v76);
  IPC::Decoder::decode<WTF::String>(a1, &v74);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v72);
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v70);
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v68, a1);
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)&v66, a1);
  v7 = a1[1];
  v8 = *a1;
  v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v7 >= v9 && v7 - v9 > 7)
  {
    v11 = (uint64_t *)(v8 + v9);
    v12 = v8 + v9 + 8;
    a1[2] = v12;
    if (v8)
    {
      v13 = 0;
      v14 = *v11;
      goto LABEL_8;
    }
    v39 = v7;
    v40 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v40 = *a1;
        v39 = a1[1];
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v42 = a1[3];
  if (!v42)
  {
    v14 = 0;
    v39 = 0;
LABEL_61:
    v8 = 0;
    v13 = 1;
LABEL_62:
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43 && v39)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v8, v39);
      v17 = 0;
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v17 = 0;
    }
    goto LABEL_64;
  }
  if (!v39)
  {
    v14 = 0;
    goto LABEL_61;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
  v14 = 0;
  v8 = *a1;
  v7 = a1[1];
  v13 = 1;
  v12 = a1[2];
LABEL_8:
  v15 = v12 - v8;
  if (v7 <= v15)
  {
    v39 = 0;
    v45 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v45 && v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      v8 = *a1;
      v39 = a1[1];
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_62;
  }
  v16 = (unsigned __int8 *)(v8 + v15);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v8)
  {
    v39 = v7;
    goto LABEL_62;
  }
  v17 = *v16;
  if (v17 < 2)
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
LABEL_64:
  *a1 = 0;
  a1[1] = 0;
  v44 = a1[3];
  if (v44 && v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v8);
  v19 = 0;
  v18 = 1;
LABEL_12:
  if (v17)
    v20 = v19;
  else
    v20 = 0;
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v63);
  IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v60, a1);
  IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v58, a1);
  v22 = *a1;
  if (*a1)
  {
    if (!v6)
      goto LABEL_56;
    v46 = v4;
    v22 = v79;
    if (!v79)
      goto LABEL_56;
    v23 = (uint64_t)v76;
    v76 = 0;
    v47 = v23;
    v48 = v77;
    v49 = v78;
    LODWORD(v77) = v77 & 0xFFFFFFFE;
    v22 = v75;
    if (!v75)
      goto LABEL_56;
    v24 = v74;
    v74 = 0;
    *(_QWORD *)&v50 = v24;
    v22 = v73;
    if (!v73)
      goto LABEL_56;
    v25 = v72;
    v72 = 0;
    *((_QWORD *)&v50 + 1) = v25;
    v22 = v71;
    if (!v71)
      goto LABEL_56;
    v26 = v70;
    v70 = 0;
    *(_QWORD *)&v51 = v26;
    v22 = v69;
    if (!v69)
      goto LABEL_56;
    v27 = v68;
    v68 = 0;
    *((_QWORD *)&v51 + 1) = v27;
    v22 = v67;
    if (!v67)
      goto LABEL_56;
    v22 = v66;
    v66 = 0;
    v52 = v22;
    if (v13)
      goto LABEL_56;
    *(_QWORD *)v53 = v14;
    if (v18)
      goto LABEL_56;
    v53[8] = v20;
    v22 = v65;
    if (!v65)
      goto LABEL_56;
    *(_QWORD *)&v53[16] = v63;
    v53[24] = v64;
    v22 = v62;
    if (!v62 || (v54 = v60, v28 = v61, v60 = 0, v61 = 0, v55 = v28, (v22 = v59) == 0))
    {
LABEL_56:
      __break(1u);
LABEL_57:
      CFRelease(*(CFTypeRef *)(v22 + 8));
      goto LABEL_36;
    }
    v29 = v58[0];
    v58[0] = 0;
    v56 = v29;
    v57 = v58[1];
    *(_QWORD *)a2 = v4;
    WTF::URL::URL(a2 + 8, &v47);
    v30 = v50;
    v31 = v51;
    v50 = 0u;
    v51 = 0u;
    v32 = v54;
    *(_QWORD *)(a2 + 80) = v52;
    *(_OWORD *)(a2 + 48) = v30;
    *(_OWORD *)(a2 + 64) = v31;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)v53;
    *(_OWORD *)(a2 + 97) = *(_OWORD *)&v53[9];
    v52 = 0;
    v54 = 0;
    *(_QWORD *)(a2 + 120) = v32;
    v33 = v55;
    v55 = 0;
    *(_QWORD *)(a2 + 128) = v33;
    v34 = v56;
    v56 = 0;
    *(_QWORD *)(a2 + 136) = v34;
    v35 = v57;
    v57 = 0;
    *(_QWORD *)(a2 + 144) = v35;
    *(_BYTE *)(a2 + 152) = 1;
    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)&v46, v36);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (!v59)
      goto LABEL_31;
  }
  if (v58[0])
    WTF::fastFree(v58[0], v21);
LABEL_31:
  if (v62 && v60)
    WTF::fastFree(v60, v21);
  if (v67)
  {
    v22 = v66;
    if (v66)
      goto LABEL_57;
  }
LABEL_36:
  if (v69 && v68)
    CFRelease(*(CFTypeRef *)(v68 + 8));
  if (v71 && v70)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v70, (WTF::StringImpl *)v21);
  if (v73 && v72)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v72, (WTF::StringImpl *)v21);
  if (v75)
  {
    v37 = v74;
    v74 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (v79)
  {
    v38 = v76;
    v76 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
}

void sub_196E1AF28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  if (*(_BYTE *)(v33 - 200))
  {
    v35 = *(_QWORD *)(v33 - 208);
    if (v35)
      CFRelease(*(CFTypeRef *)(v35 + 8));
  }
  if (*(_BYTE *)(v33 - 184))
  {
    v36 = *(_QWORD *)(v33 - 192);
    if (v36)
      CFRelease(*(CFTypeRef *)(v36 + 8));
  }
  if (*(_BYTE *)(v33 - 168))
  {
    v37 = *(WTF::StringImpl ***)(v33 - 176);
    if (v37)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v37, a2);
  }
  if (*(_BYTE *)(v33 - 152))
  {
    v38 = *(WTF::StringImpl ***)(v33 - 160);
    if (v38)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, a2);
  }
  if (*(_BYTE *)(v33 - 136))
  {
    v39 = *(WTF::StringImpl **)(v33 - 144);
    *(_QWORD *)(v33 - 144) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  if (*(_BYTE *)(v33 - 88))
  {
    v40 = *(WTF::StringImpl **)(v33 - 128);
    *(_QWORD *)(v33 - 128) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, a2);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>@<X0>(WTF::StringImpl *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    result = (WTF::StringImpl *)*((_QWORD *)a1 + 3);
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196E1B098(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *result;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  WTF *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_12:
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    return result;
  }
  v6 = v4;
  v44 = 0;
  v45 = 0;
  if (v4 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, &v40);
      if (!v43)
        goto LABEL_33;
      v20 = HIDWORD(v45);
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        v21 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)&v40);
        v22 = HIDWORD(v45);
        result = (WTF *)v44;
        v23 = v44 + 40 * HIDWORD(v45);
        v24 = *(_OWORD *)v21;
        v25 = *(_OWORD *)(v21 + 16);
        *(_QWORD *)(v23 + 32) = *(_QWORD *)(v21 + 32);
        *(_OWORD *)v23 = v24;
        *(_OWORD *)(v23 + 16) = v25;
        v20 = v22;
      }
      else
      {
        result = (WTF *)v44;
        v26 = v44 + 40 * HIDWORD(v45);
        v27 = v40;
        v28 = v41;
        *(_QWORD *)(v26 + 32) = v42;
        *(_OWORD *)v26 = v27;
        *(_OWORD *)(v26 + 16) = v28;
      }
      v29 = (v20 + 1);
      HIDWORD(v45) = v29;
      --v6;
    }
    while (v6);
    v30 = v45;
    if (v45 <= v29)
    {
      v33 = (uint64_t)result;
    }
    else
    {
      if (!(_DWORD)v29)
        goto LABEL_39;
      v39 = result;
      if (v29 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      v31 = v29;
      v32 = 40 * v29;
      v33 = WTF::fastMalloc((WTF *)(40 * v29));
      v30 = v32 / 0x28;
      LODWORD(v45) = v32 / 0x28;
      v44 = v33;
      result = v39;
      if ((WTF *)v33 == v39)
      {
LABEL_39:
        v44 = 0;
        LODWORD(v45) = 0;
      }
      else
      {
        v34 = 0;
        do
        {
          v35 = v33 + v34;
          v36 = *(_OWORD *)((char *)v39 + v34);
          v37 = *(_OWORD *)((char *)v39 + v34 + 16);
          *(_QWORD *)(v35 + 32) = *(_QWORD *)((char *)v39 + v34 + 32);
          *(_OWORD *)v35 = v36;
          *(_OWORD *)(v35 + 16) = v37;
          v34 += 40;
        }
        while (40 * v31 != v34);
        if (!v39)
          goto LABEL_41;
      }
      WTF::fastFree(result, v5);
      v33 = v44;
      v30 = v45;
    }
LABEL_41:
    v19 = 0;
    *(_QWORD *)a1 = v33;
    v38 = HIDWORD(v45);
    v44 = 0;
    v45 = 0;
    *(_DWORD *)(a1 + 8) = v30;
    *(_DWORD *)(a1 + 12) = v38;
    goto LABEL_19;
  }
  if (v4)
  {
    LODWORD(v45) = 40 * (int)v4 / 0x28u;
    v44 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, &v40);
      if (!v43)
        break;
      v7 = HIDWORD(v45);
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        v8 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)&v40);
        v7 = HIDWORD(v45);
        v9 = v44;
        v10 = v44 + 40 * HIDWORD(v45);
        v11 = *(_OWORD *)v8;
        v12 = *(_OWORD *)(v8 + 16);
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(v8 + 32);
      }
      else
      {
        v9 = v44;
        v10 = v44 + 40 * HIDWORD(v45);
        v11 = v40;
        v12 = v41;
        *(_QWORD *)(v10 + 32) = v42;
      }
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      v13 = v7 + 1;
      HIDWORD(v45) = v13;
      if (!--v6)
      {
        v14 = v45;
        goto LABEL_18;
      }
    }
LABEL_33:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v19 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v9 = 0;
LABEL_18:
    v19 = 0;
    v44 = 0;
    *(_QWORD *)a1 = v9;
    HIDWORD(v45) = 0;
    *(_DWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 12) = v13;
LABEL_19:
    *(_BYTE *)(a1 + 16) = 1;
  }
  result = (WTF *)v44;
  if (v44)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v19)
    goto LABEL_12;
  return result;
}

void sub_196E1B3F4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)(v2 - 48);
  if (v4)
  {
    *(_QWORD *)(v2 - 48) = 0;
    *(_DWORD *)(v2 - 40) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebExtensionControllerParameters,void>::decode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int16 v7;
  unint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6 = v5;
  v7 = IPC::Decoder::decode<BOOL>(a2);
  result = IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v13, a2);
  if (*a2)
  {
    if (v6 && v7 > 0xFFu && v15)
    {
      v10 = v13;
      v13 = 0;
      *(_QWORD *)a1 = v4;
      *(_BYTE *)(a1 + 8) = v7;
      v12[0] = 0;
      *(_QWORD *)(a1 + 16) = v10;
      v12[1] = 0;
      v11 = v14;
      v14 = 0;
      *(_QWORD *)(a1 + 24) = v11;
      *(_BYTE *)(a1 + 32) = 1;
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
      return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (v15)
    return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::WebExtensionCookieParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7[17];
  uint64_t v8[17];
  char v9;
  uint64_t v10;
  char v11;
  char v12;

  IPC::Decoder::decode<std::optional<PAL::SessionID>>(a1, &v10);
  IPC::Decoder::decode<WebCore::Cookie>(a1, v8);
  if (*a1)
  {
    if (v12)
    {
      *(_QWORD *)&v6 = v10;
      BYTE8(v6) = v11;
      if (v9)
      {
        WebCore::Cookie::Cookie((uint64_t)v7, v8);
        *(_OWORD *)a2 = v6;
        WebCore::Cookie::Cookie(a2 + 16, v7);
        *(_BYTE *)(a2 + 152) = 1;
        WebCore::Cookie::~Cookie((WebCore::Cookie *)v7, v5);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 152) = 0;
LABEL_5:
  if (v9)
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v8, v4);
}

void sub_196E1B69C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  WebCore::Cookie *v45;
  void *v47;

  WebCore::Cookie::~Cookie(v45, a2);
  if (a45)
    WebCore::Cookie::~Cookie((WebCore::Cookie *)&a28, v47);
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::optional<PAL::SessionID>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 48));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 50));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;
  char v16;
  WTF::StringImpl *v17;
  unsigned __int8 v18;
  char v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  char v22;

  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v20);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v17);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v14);
  v4 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*a1)
    goto LABEL_53;
  if (!v22)
    goto LABEL_52;
  v7 = v21;
  if (v21)
  {
    v8 = v20;
    v20 = 0;
  }
  else
  {
    v8 = 0;
  }
  if (!v19
    || ((v9 = v18) == 0 ? (v10 = 0) : (v10 = v17, v17 = 0),
        !v16
     || ((v11 = v15) == 0 ? (v12 = 0) : (v12 = v14, v14 = 0), (v4 & 0xFF0000) == 0 || (result & 0xFF0000) == 0)))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_33;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v7)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
    v8 = 0;
  }
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v9)
  {
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    v10 = 0;
  }
  v13 = (unsigned __int16)v4 | ((unsigned __int16)result << 16);
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v11)
  {
    *(_QWORD *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_DWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 56) = 1;
  if (!v9 || !v10)
  {
LABEL_26:
    if (!v7)
      goto LABEL_33;
    goto LABEL_27;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_26;
  }
  result = WTF::StringImpl::destroy(v10, v6);
  if (!v7)
    goto LABEL_33;
LABEL_27:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      result = WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_33:
  if (v16)
  {
    if (v15)
    {
      result = (uint64_t)v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v19)
  {
    if (v18)
    {
      result = (uint64_t)v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v22)
  {
    if (v21)
    {
      result = (uint64_t)v20;
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E1B9A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, WTF::StringImpl *a16, char a17, int a18, __int16 a19, char a20,char a21,WTF::StringImpl *a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  BOOL v28;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if ((_BYTE)a19 && a17 && a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if ((_BYTE)a25)
    v28 = a23 == 0;
  else
    v28 = 1;
  if (!v28 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  char v4;
  char *result;

  v2 = (unsigned __int8 *)a2;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>,void>::encode<IPC::Encoder,std::optional<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>> const&>(a1, v2 + 16);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 32));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(v2 + 56));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(v2 + 80));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(v2 + 96));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, (uint64_t)(v2 + 112));
  v4 = v2[128];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = v2[129];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  WTF *v29;
  WTF *v30;
  unint64_t v31;
  void *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  WTF *v56;
  uint64_t v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WTF *v72[2];
  WTF *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  WTF *v78;
  unint64_t v79;
  char v80;
  WTF::StringImpl *v81;
  char v82;
  WTF::StringImpl *v83;
  char v84;
  WTF::StringImpl *v85;
  char v86;
  __int16 v87;
  WTF::StringImpl *v88;
  unsigned __int8 v89;
  char v90;
  WTF::StringImpl *v91;
  unsigned __int8 v92;
  char v93;
  WTF::StringImpl *v94;
  void *v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  WTF *v101;
  unsigned __int8 v102;
  unsigned __int8 v103;

  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v101);
  v8 = a1[1];
  v9 = *a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_9;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v14 = v8;
    v15 = 0;
LABEL_9:
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v9 = *a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_10;
  }
  v12 = *v11;
  if (v12 >= 2)
  {
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v9);
    goto LABEL_11;
  }
  if (!v12)
  {
    v13 = 0;
    v71 = 0;
    v3 = 1;
    goto LABEL_13;
  }
  IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>((uint64_t)v72, a1);
  if (LOBYTE(v72[1]))
  {
    v3 = 0;
    v71 = 0;
    v13 = v72[0];
    goto LABEL_13;
  }
LABEL_11:
  v19 = *a1;
  v20 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v21 = a1[3];
  if (v21 && v20)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  v13 = 0;
  v71 = 1;
LABEL_13:
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v97, a1);
  v22 = a1[1];
  v23 = *a1;
  v24 = a1[2] - *a1;
  if (v22 <= v24)
  {
    v67 = 0;
    v68 = 0;
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
        v68 = *a1;
        v67 = a1[1];
      }
      else
      {
        v67 = 0;
        v68 = 0;
      }
    }
LABEL_132:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v70 = a1[3];
    if (v70)
    {
      if (v67)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v68, v67);
LABEL_37:
        v23 = *a1;
        v22 = a1[1];
        goto LABEL_38;
      }
      v22 = 0;
      v23 = 0;
    }
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v23);
    v40 = *a1;
    v41 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42 && v41)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
    v29 = 0;
    v34 = 1;
    goto LABEL_41;
  }
  v25 = (unsigned __int8 *)(v23 + v24);
  a1[2] = (uint64_t)(v25 + 1);
  if (!v23)
  {
    v67 = v22;
    v68 = 0;
    goto LABEL_132;
  }
  v26 = *v25;
  if (v26 >= 2)
    goto LABEL_38;
  if (!v26)
  {
    v34 = 0;
    v29 = 0;
    v4 = 1;
    goto LABEL_41;
  }
  v27 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v28)
    goto LABEL_37;
  v29 = (WTF *)v27;
  v72[0] = 0;
  v72[1] = 0;
  if (v27 >= 0x20000)
  {
    while (1)
    {
      v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v94 = (WTF::StringImpl *)v37;
      v95 = v32;
      if (!(_BYTE)v32)
        goto LABEL_35;
      if (HIDWORD(v72[1]) == LODWORD(v72[1]))
      {
        v35 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, HIDWORD(v72[1]) + 1, (unint64_t)&v94);
        *((_QWORD *)v72[0] + HIDWORD(v72[1])) = *v35;
      }
      else
      {
        *((_QWORD *)v72[0] + HIDWORD(v72[1])) = v37;
      }
      v36 = ++HIDWORD(v72[1]);
      v29 = (WTF *)((char *)v29 - 1);
      if (!v29)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v72, v36);
        v29 = v72[0];
        v2 = v72[1];
        v5 = HIDWORD(v72[1]);
        goto LABEL_29;
      }
    }
  }
  if (v27)
  {
    v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v27));
    LODWORD(v72[1]) = (_DWORD)v29;
    v72[0] = v30;
    while (1)
    {
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v94 = (WTF::StringImpl *)v31;
      v95 = v32;
      if (!(_BYTE)v32)
        break;
      if (HIDWORD(v72[1]) == LODWORD(v72[1]))
      {
        v33 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, HIDWORD(v72[1]) + 1, (unint64_t)&v94);
        *((_QWORD *)v72[0] + HIDWORD(v72[1])) = *v33;
      }
      else
      {
        *((_QWORD *)v72[0] + HIDWORD(v72[1])) = v31;
      }
      v5 = ++HIDWORD(v72[1]);
      v29 = (WTF *)((char *)v29 - 1);
      if (!v29)
      {
        v29 = v72[0];
        v2 = v72[1];
        goto LABEL_29;
      }
    }
LABEL_35:
    v38 = v72[0];
    if (v72[0])
    {
      v72[0] = 0;
      LODWORD(v72[1]) = 0;
      WTF::fastFree(v38, v32);
    }
    goto LABEL_37;
  }
  v5 = 0;
  v2 = 0;
LABEL_29:
  v34 = 0;
  v4 = 0;
LABEL_41:
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v94);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v91);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v88);
  v43 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a1);
  v44 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 136) = 0;
    v47 = v71;
    goto LABEL_95;
  }
  v46 = v103;
  v47 = v71;
  if (!v103)
    goto LABEL_123;
  v72[0] = v101;
  v46 = v102;
  LOBYTE(v72[1]) = v102;
  if (v71)
    goto LABEL_123;
  LOBYTE(v73) = 0;
  v74 = 0;
  if ((v3 & 1) == 0)
  {
    v73 = v13;
    v74 = 1;
    v13 = 0;
  }
  v46 = v100;
  if (!v100)
    goto LABEL_123;
  LOBYTE(v75) = 0;
  v77 = 0;
  v48 = v99;
  if (v99)
  {
    v75 = v97;
    v49 = v98;
    v97 = 0;
    v98 = 0;
    v76 = v49;
    v46 = 1;
    v77 = 1;
  }
  if (v34)
    goto LABEL_123;
  LOBYTE(v78) = 0;
  v80 = 0;
  if ((v4 & 1) == 0)
  {
    v78 = v29;
    v79 = __PAIR64__(v5, v2);
    v80 = 1;
    v29 = 0;
  }
  v46 = v96;
  if (!v96)
    goto LABEL_123;
  LOBYTE(v81) = 0;
  v82 = 0;
  v50 = v95;
  if ((_BYTE)v95)
  {
    v51 = v94;
    v94 = 0;
    v81 = v51;
    v46 = 1;
    v82 = 1;
  }
  else
  {
    v46 = 0;
  }
  if (!v93)
    goto LABEL_123;
  LOBYTE(v83) = 0;
  v84 = 0;
  v52 = v92;
  if (v92)
  {
    v53 = v91;
    v91 = 0;
    v83 = v53;
    v84 = 1;
  }
  if (!v90)
    goto LABEL_123;
  LOBYTE(v85) = 0;
  v86 = 0;
  v54 = v89;
  if (v89)
  {
    v55 = v88;
    v88 = 0;
    v85 = v55;
    v86 = 1;
  }
  if (v43 <= 0xFFu || (LOBYTE(v87) = v43, v44 <= 0xFFu))
  {
LABEL_123:
    __break(1u);
LABEL_124:
    CFRelease(*(CFTypeRef *)(v46 + 8));
    goto LABEL_95;
  }
  HIBYTE(v87) = v44;
  *(_OWORD *)a2 = *(_OWORD *)v72;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if ((v3 & 1) == 0)
  {
    v56 = v73;
    v73 = 0;
    *(_QWORD *)(a2 + 16) = v56;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v48)
  {
    *(_QWORD *)(a2 + 32) = v75;
    v57 = v76;
    v75 = 0;
    v76 = 0;
    *(_QWORD *)(a2 + 40) = v57;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if ((v4 & 1) == 0)
  {
    *(_QWORD *)(a2 + 56) = v78;
    v58 = v79;
    v78 = 0;
    v79 = 0;
    *(_QWORD *)(a2 + 64) = v58;
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (v50)
  {
    v59 = v81;
    v81 = 0;
    *(_QWORD *)(a2 + 80) = v59;
    *(_BYTE *)(a2 + 88) = 1;
  }
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v52)
  {
    v60 = v83;
    v83 = 0;
    *(_QWORD *)(a2 + 96) = v60;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  if (v54)
  {
    *(_QWORD *)(a2 + 112) = v85;
    *(_BYTE *)(a2 + 120) = 1;
    *(_WORD *)(a2 + 128) = v87;
    *(_BYTE *)(a2 + 136) = 1;
    v85 = 0;
    if (!v52)
    {
LABEL_81:
      if (!(_DWORD)v46)
        goto LABEL_88;
      goto LABEL_82;
    }
  }
  else
  {
    *(_WORD *)(a2 + 128) = v87;
    *(_BYTE *)(a2 + 136) = 1;
    if (!v52)
      goto LABEL_81;
  }
  v61 = v83;
  v83 = 0;
  if (!v61)
    goto LABEL_81;
  if (*(_DWORD *)v61 != 2)
  {
    *(_DWORD *)v61 -= 2;
    goto LABEL_81;
  }
  WTF::StringImpl::destroy(v61, v45);
  if (!v82)
    goto LABEL_88;
LABEL_82:
  v62 = v81;
  v81 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v45);
    else
      *(_DWORD *)v62 -= 2;
  }
LABEL_88:
  if (v80)
  {
    v63 = v78;
    if (v78)
    {
      v78 = 0;
      LODWORD(v79) = 0;
      WTF::fastFree(v63, v45);
    }
  }
  if (v77)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v45);
  if (v74)
  {
    v46 = (uint64_t)v73;
    v73 = 0;
    if (v46)
      goto LABEL_124;
  }
LABEL_95:
  if (v90)
  {
    if (v89)
    {
      v64 = v88;
      v88 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v45);
        else
          *(_DWORD *)v64 -= 2;
      }
    }
  }
  if (v93)
  {
    if (v92)
    {
      v65 = v91;
      v91 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v45);
        else
          *(_DWORD *)v65 -= 2;
      }
    }
  }
  if (v96)
  {
    if ((_BYTE)v95)
    {
      v66 = v94;
      v94 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v45);
        else
          *(_DWORD *)v66 -= 2;
      }
    }
  }
  if (((v34 | v4) & 1) == 0 && v29)
    WTF::fastFree(v29, v45);
  if (v100 && v99)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v45);
  if (((v3 | v47) & 1) == 0)
  {
    if (v13)
      CFRelease(*((CFTypeRef *)v13 + 1));
  }
}

void sub_196E1C308(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, WTF *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,char a30,int a31,__int16 a32,char a33,char a34,WTF::StringImpl *a35,char a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  int v41;
  uint64_t v42;

  if (a12)
    WTF::fastFree(a12, a2);
  if (*(_BYTE *)(v42 - 120) && *(_BYTE *)(v42 - 128))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v42 - 144, a2);
  if (((v41 | a11) & 1) == 0)
  {
    if (v40)
      CFRelease(*(CFTypeRef *)(v40 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionContentWorldType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 16);
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionResultParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  char v11;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  char v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  char v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v12);
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v9);
  if (!*a1)
    goto LABEL_34;
  if (!v17
    || ((v6 = v16) == 0 ? (result = 0) : (result = v15, v15 = 0),
        !v14 || ((v7 = v13) == 0 ? (v8 = 0) : (v8 = v12, v12 = 0), !v11)))
  {
    __break(1u);
LABEL_34:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    goto LABEL_20;
  }
  *(_QWORD *)&v18 = v9;
  BYTE8(v18) = v10;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (v6)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = 1;
    result = 0;
  }
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v7)
  {
    *(_QWORD *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_OWORD *)(a2 + 32) = v18;
  *(_BYTE *)(a2 + 48) = 1;
  if (v6 && result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_20:
  if (v14)
  {
    if (v13)
    {
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (v17)
  {
    if (v16)
    {
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E1C6EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if ((_BYTE)a16 && a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if ((_BYTE)a22 && a20 && a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 88);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 112));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 114));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 116));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 118));
}

uint64_t IPC::ArgumentCoder<WebKit::WebExtensionRegisteredScriptParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  WTF::StringImpl *v82;
  __int16 v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  char v98;
  WTF::StringImpl *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;

  v2 = (unint64_t)a1;
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v105, a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v101, (uint64_t *)v2);
  IPC::Decoder::decode<WTF::String>((uint64_t *)v2, &v99);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(WTF::StringImpl **)v2;
  v6 = *(_QWORD *)(v2 + 16) - *(_QWORD *)v2;
  if (v4 <= v6)
    goto LABEL_90;
  v7 = (unsigned __int8 *)v5 + v6;
  *(_QWORD *)(v2 + 16) = v7 + 1;
  if (!v5)
  {
    v50 = v4;
    v51 = 0;
    goto LABEL_91;
  }
  if (*v7 >= 2u)
    goto LABEL_92;
  if (!*v7)
  {
    v11 = 0;
    i = 0;
    v10 = 0x10000;
    goto LABEL_13;
  }
  if (v4 <= v7 + 1 - (unsigned __int8 *)v5)
  {
    v9 = 0;
    v67 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v68 = *(_QWORD *)(v2 + 24);
    if (v68)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
      v9 = 0;
      v70 = *(_QWORD *)v2;
      v71 = *(_QWORD *)(v2 + 8);
      v72 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v67 = 0;
      if (v72)
      {
        if (v71)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v70);
          v67 = *(_QWORD *)v2;
          v9 = *(_QWORD *)(v2 + 8);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v7 + 2;
    v8 = v7[1];
    if (v8 < 3)
    {
      LODWORD(v9) = v8 | 0x100;
      goto LABEL_8;
    }
    v9 = v4;
    v67 = (uint64_t)v5;
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v69 = *(_QWORD *)(v2 + 24);
  if (v69)
  {
    if (!v9)
      goto LABEL_8;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v69 + 16))(v69, v67, v9);
  }
  LODWORD(v9) = 0;
LABEL_8:
  v10 = (v9 > 0xFF) << 16;
  if (v9 >= 0x100)
    v11 = v9;
  else
    v11 = 0;
  for (i = 256; ; i = 0)
  {
LABEL_13:
    if (!HIWORD(v10))
    {
      v55 = *(_QWORD *)v2;
      v56 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v57 = *(_QWORD *)(v2 + 24);
      if (v57)
      {
        if (v56)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55);
      }
    }
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v95, (uint64_t *)v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v91, (uint64_t *)v2);
    v13 = IPC::Decoder::decode<std::optional<BOOL>>((uint64_t *)v2);
    result = IPC::Decoder::decode<std::optional<BOOL>>((uint64_t *)v2);
    v19 = result;
    v20 = *(_QWORD *)(v2 + 8);
    v21 = *(_QWORD *)v2;
    v22 = *(_QWORD *)(v2 + 16) - *(_QWORD *)v2;
    if (v20 <= v22)
    {
      v58 = 0;
      v59 = 0;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v60 = *(_QWORD *)(v2 + 24);
      if (v60)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
          v59 = *(_QWORD *)v2;
          v58 = *(_QWORD *)(v2 + 8);
        }
        else
        {
          v58 = 0;
          v59 = 0;
        }
      }
      goto LABEL_98;
    }
    v23 = (unsigned __int8 *)(v21 + v22);
    *(_QWORD *)(v2 + 16) = v23 + 1;
    if (!v21)
    {
      v58 = v20;
      v59 = 0;
LABEL_98:
      v20 = 0;
      v21 = 0;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v61 = *(_QWORD *)(v2 + 24);
      if (v61)
      {
        if (v58)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59, v58);
          v21 = *(_QWORD *)v2;
          v20 = *(_QWORD *)(v2 + 8);
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
      }
      goto LABEL_99;
    }
    v24 = *v23;
    if (v24 < 2)
    {
      if (v24)
      {
        result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)v2);
        v25 = result;
        v26 = ((unsigned __int16)result > 0xFFu) << 16;
        if ((result & 0xFF00) == 0)
          v25 = 0;
        v27 = 256;
      }
      else
      {
        v25 = 0;
        v27 = 0;
        v26 = 0x10000;
      }
      goto LABEL_22;
    }
LABEL_99:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    result = *(_QWORD *)(v2 + 24);
    if (result && v20)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    v26 = 0;
    v25 = 0;
    v27 = 0;
LABEL_22:
    v28 = v25 | v26 | v27;
    v4 = *(_QWORD *)(v2 + 8);
    if (!HIWORD(v26))
    {
      v62 = *(_QWORD *)v2;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      v63 = *(_QWORD *)(v2 + 24);
      if (!v63 || !v4)
      {
        v4 = 0;
        v5 = *(WTF::StringImpl **)v2;
LABEL_103:
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        v64 = *(_QWORD *)(v2 + 24);
        if (v64)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v64 + 16))(v64, v5);
            v65 = *(_QWORD *)v2;
            v4 = *(_QWORD *)(v2 + 8);
          }
          else
          {
            v65 = 0;
          }
        }
        else
        {
          v65 = 0;
          v4 = 0;
        }
LABEL_105:
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        v66 = *(_QWORD *)(v2 + 24);
        if (v66)
        {
          if (v4)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v65);
            v5 = *(WTF::StringImpl **)v2;
            v4 = *(_QWORD *)(v2 + 8);
          }
          else
          {
            v5 = 0;
          }
        }
        else
        {
          v5 = 0;
          v4 = 0;
        }
        goto LABEL_107;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v62);
      v4 = *(_QWORD *)(v2 + 8);
    }
    v5 = *(WTF::StringImpl **)v2;
    v29 = *(_QWORD *)(v2 + 16) - *(_QWORD *)v2;
    if (v4 <= v29)
      goto LABEL_103;
    v30 = (unsigned __int8 *)v5 + v29;
    *(_QWORD *)(v2 + 16) = v30 + 1;
    if (!v5)
    {
      v65 = 0;
      goto LABEL_105;
    }
    v31 = *v30;
    if (v31 < 2)
    {
      if (v31)
      {
        result = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)v2);
        v32 = result;
        v33 = ((unsigned __int16)result > 0xFFu) << 16;
        if ((result & 0xFF00) == 0)
          v32 = 0;
        v34 = 256;
      }
      else
      {
        v32 = 0;
        v34 = 0;
        v33 = 0x10000;
      }
      goto LABEL_31;
    }
LABEL_107:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    result = *(_QWORD *)(v2 + 24);
    if (result && v4)
      result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
    v33 = 0;
    v32 = 0;
    v34 = 0;
LABEL_31:
    if (!HIWORD(v33))
    {
      v5 = *(WTF::StringImpl **)v2;
      v4 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      result = *(_QWORD *)(v2 + 24);
      if (result)
      {
        if (v4)
        {
          v74 = v34;
          v75 = v33;
          v73 = v32;
          result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
          v32 = v73;
          v34 = v74;
          v33 = v75;
        }
      }
    }
    if (!*(_QWORD *)v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_71;
    }
    v35 = v108;
    if (v108)
    {
      LOBYTE(v76) = 0;
      v78 = 0;
      v36 = v107;
      if (v107)
      {
        v76 = v105;
        v35 = v106;
        v17 = HIDWORD(v106);
        v105 = 0;
        v106 = 0;
        v77 = __PAIR64__(v17, v35);
        v78 = 1;
      }
      v37 = v104;
      if (v104)
      {
        LOBYTE(v79) = 0;
        v81 = 0;
        v38 = v103;
        if (v103)
        {
          v79 = v101;
          v37 = v102;
          v18 = HIDWORD(v102);
          v101 = 0;
          v102 = 0;
          v80 = __PAIR64__(v18, v37);
          v81 = 1;
        }
        if (v100)
        {
          v39 = v11 | v10 | i;
          v5 = v99;
          v99 = 0;
          v82 = v5;
          if (HIWORD(v39))
          {
            v83 = v11 | v10 | i;
            if (v98)
            {
              LOBYTE(v84) = 0;
              v86 = 0;
              v40 = v97;
              if (v97)
              {
                v84 = v95;
                v4 = v96;
                v15 = HIDWORD(v96);
                v95 = 0;
                v96 = 0;
                v85 = __PAIR64__(v15, v4);
                v41 = 1;
                v86 = 1;
              }
              else
              {
                v41 = 0;
              }
              v42 = v94;
              if (v94)
              {
                LOBYTE(v87) = 0;
                v89 = 0;
                v43 = v93;
                if (v93)
                {
                  v87 = v91;
                  v42 = v92;
                  v16 = HIDWORD(v92);
                  v91 = 0;
                  v92 = 0;
                  v88 = __PAIR64__(v16, v42);
                  v2 = 1;
                  v89 = 1;
                }
                if ((v13 & 0xFF0000) != 0)
                {
                  LOWORD(v90) = v13;
                  if ((v19 & 0xFF0000) != 0)
                  {
                    WORD1(v90) = v19;
                    v2 = HIWORD(v28);
                    if ((_DWORD)v2)
                    {
                      v44 = v32 | v33 | v34;
                      WORD2(v90) = v28;
                      if (HIWORD(v44))
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_90:
    v50 = 0;
    v51 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v52 = *(_QWORD *)(v2 + 24);
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v52 + 16))(v52, v5);
        v51 = *(_QWORD *)v2;
        v50 = *(_QWORD *)(v2 + 8);
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
    }
LABEL_91:
    v4 = 0;
    v5 = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v53 = *(_QWORD *)(v2 + 24);
    if (v53)
    {
      if (v50)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
        v5 = *(WTF::StringImpl **)v2;
        v4 = *(_QWORD *)(v2 + 8);
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_92:
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v54 = *(_QWORD *)(v2 + 24);
    if (v54 && v4)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v54 + 16))(v54, v5);
    v10 = 0;
    v11 = 0;
  }
  HIWORD(v90) = v44;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v36)
  {
    v45 = v76;
    v76 = 0;
    v77 = 0;
    *(_QWORD *)a2 = v45;
    *(_DWORD *)(a2 + 8) = v35;
    *(_DWORD *)(a2 + 12) = v17;
    *(_BYTE *)(a2 + 16) = 1;
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (v38)
  {
    v46 = v79;
    v79 = 0;
    v80 = 0;
    *(_QWORD *)(a2 + 24) = v46;
    *(_DWORD *)(a2 + 32) = v37;
    *(_DWORD *)(a2 + 36) = v18;
    *(_BYTE *)(a2 + 40) = 1;
  }
  v82 = 0;
  *(_QWORD *)(a2 + 48) = v5;
  *(_WORD *)(a2 + 56) = v39;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  if (v40)
  {
    v47 = v84;
    v84 = 0;
    v85 = 0;
    *(_QWORD *)(a2 + 64) = v47;
    *(_DWORD *)(a2 + 72) = v4;
    *(_DWORD *)(a2 + 76) = v15;
    *(_BYTE *)(a2 + 80) = 1;
  }
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v43)
  {
    v48 = v87;
    v49 = v90;
    v87 = 0;
    v88 = 0;
    *(_QWORD *)(a2 + 88) = v48;
    *(_DWORD *)(a2 + 96) = v42;
    *(_DWORD *)(a2 + 100) = v16;
    *(_BYTE *)(a2 + 104) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v5);
    v41 = v86;
  }
  else
  {
    v49 = v90;
  }
  *(_QWORD *)(a2 + 112) = v49;
  *(_BYTE *)(a2 + 120) = 1;
  if (v41)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v5);
  result = (uint64_t)v82;
  v82 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if (v81)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v5);
  if (v78)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v5);
LABEL_71:
  if (v94 && v93)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v5);
  if (v98 && v97)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v5);
  if (v100)
  {
    result = (uint64_t)v99;
    v99 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v104 && v103)
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v5);
  if (v108)
  {
    if (v107)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v5);
  }
  return result;
}

void sub_196E1D03C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  WTF::StringImpl *v45;
  BOOL v46;

  if (*(_BYTE *)(v43 - 152))
  {
    v45 = *(WTF::StringImpl **)(v43 - 160);
    *(_QWORD *)(v43 - 160) = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, a2);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  if (*(_BYTE *)(v43 - 120) && *(_BYTE *)(v43 - 128))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43 - 144, a2);
  if (*(_BYTE *)(v43 - 88))
    v46 = *(_BYTE *)(v43 - 96) == 0;
  else
    v46 = 1;
  if (!v46)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43 - 112, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WTF::URL>,void>::encode<IPC::Encoder,std::optional<WTF::URL> const&>(a1, a2 + 8);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 64));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionFrameParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  char i;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23[5];
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  WTF::StringImpl *v30[5];
  char v31;
  char v32;

  v3 = a1;
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_26;
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v18 = v5;
    v19 = 0;
    goto LABEL_27;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_29;
  v10 = 0;
  for (i = 1; ; i = 0)
  {
    if (v9)
      v12 = i;
    else
      v12 = 0;
    IPC::Decoder::decode<std::optional<WTF::URL>>(v30, v3, a3);
    v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
    v15 = v14;
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v27);
    if (!*v3)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      goto LABEL_18;
    }
    if (!v10)
    {
      if (v32)
      {
        v3 = (uint64_t *)v23;
        std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](v23, (uint64_t)v30);
        if (v15)
        {
          *(_QWORD *)&v25 = v13;
          if (v29)
            break;
        }
      }
    }
    __break(1u);
LABEL_26:
    v18 = 0;
    v19 = 0;
    *v3 = 0;
    v3[1] = 0;
    v20 = v3[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *v3;
        v18 = v3[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
LABEL_27:
    *v3 = 0;
    v3[1] = 0;
    v21 = v3[3];
    if (v21 && v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
      v9 = 0;
      v6 = *v3;
      v5 = v3[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v9 = 0;
    }
LABEL_29:
    *v3 = 0;
    v3[1] = 0;
    v22 = v3[3];
    if (v22 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v6);
    v10 = 1;
  }
  *((_QWORD *)&v25 + 1) = v27;
  v26 = v28;
  *(_BYTE *)a2 = v12;
  result = (WTF::StringImpl *)std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a2 + 8), (uint64_t)v23);
  *(_OWORD *)(a2 + 56) = v25;
  *(_BYTE *)(a2 + 72) = v26;
  *(_BYTE *)(a2 + 80) = 1;
  if (v24)
  {
    result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_18:
  if (v32)
  {
    if (v31)
    {
      result = v30[0];
      v30[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_196E1D3AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if ((_BYTE)a29 && a27 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WTF::URL>>(_BYTE *a1, uint64_t *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21[5];
  char v22;

  v5 = a2[2];
  v6 = *a2;
  v7 = a2[1];
  v8 = v5 - v6;
  if (v7 <= v8)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *a2;
        v13 = a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_14;
  }
  v9 = (unsigned __int8 *)(v6 + v8);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v13 = v7;
    v14 = 0;
LABEL_14:
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        v6 = *a2;
        v7 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    goto LABEL_15;
  }
  v10 = *v9;
  if (v10 >= 2)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v6);
    goto LABEL_16;
  }
  if (!v10)
  {
    LOBYTE(v21[0]) = 0;
    v22 = 0;
    std::__optional_move_base<WTF::URL,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v21);
    goto LABEL_8;
  }
  IPC::Decoder::decode<WTF::URL>(a2, v21);
  if (!v22)
  {
LABEL_16:
    *a1 = 0;
    a1[48] = 0;
    goto LABEL_17;
  }
  a3.n128_f64[0] = WTF::URL::URL((uint64_t)a1, (uint64_t *)v21);
  a1[40] = 1;
LABEL_8:
  a1[48] = 1;
  if (v22)
  {
    v12 = v21[0];
    v21[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
LABEL_17:
  if (!a1[48])
  {
    v18 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v19)
        (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v20 + 16))(v20, v18, a3);
    }
  }
}

void sub_196E1D5D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (*(_BYTE *)(v14 + 48))
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v14, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = a2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[6];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  char v17;

  IPC::Decoder::decode<WTF::URL>(a1, &v14);
  v4 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v6 = v5;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!*a1)
    goto LABEL_16;
  if (!v17
    || (v9 = v14, v14 = 0, v10 = v9, v11 = v15, v12 = v16, LODWORD(v15) = v15 & 0xFFFFFFFE, !v6)
    || (*(_QWORD *)&v13 = v4, !(_BYTE)v8))
  {
    __break(1u);
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_9;
  }
  *((_QWORD *)&v13 + 1) = result;
  WTF::URL::URL(a2, (uint64_t *)&v10);
  *(_OWORD *)(a2 + 40) = v13;
  *(_BYTE *)(a2 + 56) = 1;
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_9:
  if (v17)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196E1D7A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>((uint64_t)a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 56));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 58));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 60));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 88);
  return IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, (__int16 *)(a2 + 112));
}

void IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  char v64;
  __int16 v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  uint64_t v86;
  char v87;
  WTF::StringImpl *v88;
  char v89;
  WTF::StringImpl *v90;
  char v91;
  WTF::StringImpl *v92;
  unsigned __int8 v93;
  char v94;
  WTF::StringImpl *v95;
  char v96;

  IPC::Decoder::decode<WTF::String>(a1, &v95);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v92);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v41 = 0;
    v42 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
    }
    goto LABEL_82;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v41 = v4;
    v42 = 0;
LABEL_82:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v42, v41);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_83;
  }
  if (*v7 < 2u)
  {
    if (!*v7)
    {
      v11 = 0;
      v12 = 0;
      v10 = 0x10000;
      goto LABEL_13;
    }
    if (v4 <= (unint64_t)&v7[-v5 + 1])
    {
      v9 = 0;
      v55 = 0;
      *a1 = 0;
      a1[1] = 0;
      v56 = a1[3];
      if (v56)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v9 = 0;
        v58 = *a1;
        v59 = a1[1];
        v60 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v55 = 0;
        if (v60)
        {
          if (v59)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v58);
            v55 = *a1;
            v9 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v7 + 2);
      v8 = v7[1];
      if (v8 < 4)
      {
        LODWORD(v9) = v8 | 0x100;
        goto LABEL_8;
      }
      v9 = v4;
      v55 = v5;
    }
    *a1 = 0;
    a1[1] = 0;
    v57 = a1[3];
    if (v57)
    {
      if (!v9)
        goto LABEL_8;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v9);
    }
    LODWORD(v9) = 0;
LABEL_8:
    v10 = (v9 > 0xFF) << 16;
    if (v9 >= 0x100)
      v11 = v9;
    else
      v11 = 0;
    v12 = 256;
    goto LABEL_13;
  }
LABEL_83:
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (v45 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v5);
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_13:
  if (!HIWORD(v10))
  {
    v46 = *a1;
    v47 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
    {
      if (v47)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
    }
  }
  IPC::Decoder::decode<WTF::String>(a1, &v90);
  IPC::Decoder::decode<WTF::String>(a1, &v88);
  IPC::Decoder::decode<WTF::String>(a1, &v86);
  v13 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v14 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v15 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v82, a1);
  v16 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v78, a1);
  v18 = a1[1];
  v19 = *a1;
  v20 = a1[2] - *a1;
  if (v18 <= v20)
  {
    v49 = 0;
    v50 = 0;
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
        v50 = *a1;
        v49 = a1[1];
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
    }
    goto LABEL_89;
  }
  v21 = (unsigned __int8 *)(v19 + v20);
  a1[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    v49 = v18;
    v50 = 0;
LABEL_89:
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (v52)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v49);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_90;
  }
  v22 = *v21;
  if (v22 >= 2)
  {
LABEL_90:
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v19);
    v22 = 0;
    goto LABEL_92;
  }
  if (!v22)
  {
    v23 = 0;
    goto LABEL_21;
  }
  v16 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>(a1);
  v22 = 0x10000;
  if (v16 >= 0x10000)
  {
    v23 = 0;
    v22 = (unsigned __int16)v16 | 0x10000;
    goto LABEL_21;
  }
LABEL_92:
  v19 = *a1;
  v54 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16)
  {
    v61 = v22;
    if (v54)
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v19);
    v23 = 1;
    v22 = v61;
  }
  else
  {
    v23 = 1;
  }
LABEL_21:
  if (!*a1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 120) = 0;
    goto LABEL_46;
  }
  if (!v96)
    goto LABEL_57;
  v24 = v95;
  v95 = 0;
  v62 = v24;
  if (!v94)
    goto LABEL_57;
  v25 = v11 | v10 | v12;
  LOBYTE(v63) = 0;
  v64 = 0;
  v26 = v93;
  if (v93)
  {
    v27 = v92;
    v92 = 0;
    v63 = v27;
    v64 = 1;
  }
  if (!HIWORD(v25))
    goto LABEL_57;
  v65 = v11 | v10 | v12;
  if (!v91)
    goto LABEL_57;
  v28 = v90;
  v90 = 0;
  v66 = v28;
  if (!v89)
    goto LABEL_57;
  v29 = v88;
  v88 = 0;
  v67 = v29;
  if (!v87)
    goto LABEL_57;
  v30 = v86;
  v86 = 0;
  v68 = v30;
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_57;
  LOWORD(v69) = v13;
  if ((v14 & 0xFF0000) == 0)
    goto LABEL_57;
  HIWORD(v69) = v14;
  if ((v15 & 0xFF0000) == 0)
    goto LABEL_57;
  v70 = v15;
  v31 = v85;
  if (!v85)
    goto LABEL_57;
  LOBYTE(v71) = 0;
  v73 = 0;
  v32 = v84;
  if (v84)
  {
    v71 = v82;
    v31 = v83;
    v16 = HIDWORD(v83);
    v82 = 0;
    v83 = 0;
    v72 = __PAIR64__(v16, v31);
    v73 = 1;
  }
  v19 = v81;
  if (!v81)
    goto LABEL_57;
  LOBYTE(v74) = 0;
  v76 = 0;
  v33 = v80;
  if (!v80)
  {
    if (!v23)
      goto LABEL_39;
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v74 = v78;
  v19 = v79;
  v17 = HIDWORD(v79);
  v78 = 0;
  v79 = 0;
  v75 = __PAIR64__(v17, v19);
  v76 = 1;
  if (v23)
    goto LABEL_57;
LABEL_39:
  LOWORD(v77) = v22;
  BYTE2(v77) = BYTE2(v22);
  v62 = 0;
  *(_QWORD *)a2 = v24;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (v26)
  {
    v34 = v63;
    v63 = 0;
    *(_QWORD *)(a2 + 8) = v34;
    *(_BYTE *)(a2 + 16) = 1;
  }
  *(_WORD *)(a2 + 24) = v25;
  v66 = 0;
  v67 = 0;
  *(_QWORD *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 40) = v29;
  v68 = 0;
  *(_QWORD *)(a2 + 48) = v30;
  *(_DWORD *)(a2 + 56) = v69;
  *(_WORD *)(a2 + 60) = v70;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  if (v32)
  {
    v35 = v71;
    v71 = 0;
    v72 = 0;
    *(_QWORD *)(a2 + 64) = v35;
    *(_DWORD *)(a2 + 72) = v31;
    *(_DWORD *)(a2 + 76) = v16;
    *(_BYTE *)(a2 + 80) = 1;
  }
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v33)
  {
    v36 = v74;
    v74 = 0;
    v75 = 0;
    *(_QWORD *)(a2 + 88) = v36;
    *(_DWORD *)(a2 + 96) = v19;
    *(_DWORD *)(a2 + 100) = v17;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_DWORD *)(a2 + 112) = v77;
  *(_BYTE *)(a2 + 120) = 1;
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v62, (void *)v19);
LABEL_46:
  if (v81 && v80)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, (void *)v19);
  if (v85 && v84)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, (void *)v19);
  if (v87)
  {
    v16 = v86;
    v86 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        goto LABEL_59;
      }
LABEL_58:
      WTF::StringImpl::destroy((WTF::StringImpl *)v16, (WTF::StringImpl *)v19);
    }
  }
LABEL_59:
  if (v89)
  {
    v37 = v88;
    v88 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (v91)
  {
    v38 = v90;
    v90 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (v94)
  {
    if (v93)
    {
      v39 = v92;
      v92 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
  }
  if (v96)
  {
    v40 = v95;
    v95 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
}

