uint64_t WebCore::GraphicsContext::paintingDisabled(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::detectingContentfulPaint(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::tiledBacking(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *((_QWORD *)this + 105);
}

uint64_t WebCore::GraphicsLayerCA::isGraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
  return 1;
}

_QWORD *WebKit::WebPreferences::setMediaContentTypesRequiringHardwareSupport(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferencesStore::setStringValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *v10;
  _BYTE v12[24];
  const WTF::StringImpl *v13;
  int v14;
  WTF *v15;

  WebKit::valueForKey<WTF::String>((uint64_t)this, (uint64_t)this + 24, a2, &v15);
  v6 = v15;
  v9 = WTF::equal(v15, *a3, v7);
  if ((v9 & 1) == 0)
  {
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v13 = v10;
    v14 = 0;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v13, (uint64_t)v12);
    if (v14 != -1)
      ((void (*)(_BYTE *, const WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v14])(v12, &v13);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v9 ^ 1u;
}

uint64_t WebKit::valueForKey<WTF::String>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  uint64_t *v10;
  const WTF::StringImpl *v11;
  _DWORD *v12;

  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if ((*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) == result || *(_DWORD *)(result + 16))
    && ((result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v9), *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) == result)|| *(_DWORD *)(result + 16))&& ((v10 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)result), result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v10, a3, v11), *v10 + 24 * *((unsigned int *)v10 + 2) == result)|| *(_DWORD *)(result + 16)))
  {
    v12 = 0;
  }
  else
  {
    v12 = *(_DWORD **)(result + 8);
    if (v12)
      *v12 += 2;
  }
  *a4 = v12;
  return result;
}

WTF *IPC::Decoder::decode<WebKit::WebPreferencesStore>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPreferencesStore,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BCEE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF *IPC::ArgumentCoder<WebKit::WebPreferencesStore,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  WTF *v5;
  unsigned int v6;
  char v7;
  WTF *v8;
  int v9;
  char v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;

  IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>((uint64_t)&v24, a1);
  result = (WTF *)IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>((uint64_t)&v19, a1);
  if (!*a1)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    if (!v23)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (!v28 || (v5 = v24, v24 = 0, v6 = v25, v25 = 0, !v23))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = v27;
  v8 = v19;
  v19 = 0;
  v9 = v21;
  v10 = v22;
  v12[0] = 0;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  v12[1] = 0;
  v13 = 0;
  *(_QWORD *)(a2 + 12) = v26;
  v14 = 0;
  *(_BYTE *)(a2 + 20) = v7;
  v15 = 0;
  *(_QWORD *)(a2 + 24) = v8;
  v16 = 0;
  v11 = v20;
  LODWORD(v20) = 0;
  *(_QWORD *)(a2 + 32) = v11;
  v17 = 0;
  *(_DWORD *)(a2 + 40) = v9;
  v18 = 0;
  *(_BYTE *)(a2 + 44) = v10;
  *(_BYTE *)(a2 + 48) = 1;
  WebKit::WebPreferencesStore::~WebPreferencesStore((WebKit::WebPreferencesStore *)v12);
LABEL_5:
  result = v19;
  if (v19)
    result = (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v19, (WTF::StringImpl *)v20);
LABEL_7:
  if (v28)
  {
    result = v24;
    if (v24)
      return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v24, (WTF::StringImpl *)v25);
  }
  return result;
}

void sub_196BCEFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF *v3;

  if (*(_BYTE *)(v1 - 24))
  {
    v3 = *(WTF **)(v1 - 48);
    if (v3)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*(unsigned int *)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  char *v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int i;
  unsigned int v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  WTF *v51;
  int v52;
  char v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  unsigned __int8 v68;
  WTF::StringImpl *v69;
  char v70;
  WTF *v71[3];
  WTF::StringImpl *v72;
  char v73[8];
  int v74;
  char v75;

  result = IPC::Decoder::decode<unsigned int>(a2);
  if ((result & 0xFF00000000) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  memset(v71, 0, 21);
  if ((_DWORD)result)
  {
    v4 = 0;
    v65 = result;
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a2, &v69);
      if (!v70)
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
LABEL_95:
        result = (uint64_t)v71[0];
        if (v71[0])
          return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v71[0], (WTF::StringImpl *)LODWORD(v71[1]));
        return result;
      }
      v5 = (const WTF::StringImpl *)a2[1];
      v6 = (WTF::StringImpl *)*a2;
      v7 = a2[2] - *a2;
      if ((unint64_t)v5 <= v7)
      {
        *a2 = 0;
        a2[1] = 0;
        v56 = a2[3];
        if (!v56 || !v5)
          goto LABEL_106;
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        goto LABEL_100;
      }
      v8 = (unsigned __int8 *)v6 + v7;
      v9 = (uint64_t)v6 + v7 + 1;
      a2[2] = v9;
      if (!v6)
        goto LABEL_101;
      v10 = *v8;
      if (v10 > 3)
        goto LABEL_106;
      if (*v8)
      {
        if (v10 == 1)
        {
          if ((unint64_t)v5 <= v9 - (uint64_t)v6)
            goto LABEL_105;
          a2[2] = (uint64_t)(v8 + 2);
          v11 = v8[1];
          if (v11 >= 2)
            goto LABEL_101;
          LOBYTE(v66) = v11 != 0;
          v67 = 1;
          v68 = 1;
LABEL_13:
          result = (uint64_t)v69;
          if ((unint64_t)v69 + 1 >= 2)
          {
            v13 = (int)v71[1];
            if (10 * (unint64_t)HIDWORD(v71[1]) >= 9 * (unint64_t)LODWORD(v71[1])
              || BYTE4(v71[2]) && LODWORD(v71[1]) <= 2 * HIDWORD(v71[1]))
            {
              if (LODWORD(v71[1]))
                v59 = 2 * LODWORD(v71[1]);
              else
                v59 = 8;
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v71, v59);
              v13 = (int)v71[1];
              result = (uint64_t)v69;
            }
            v14 = (int)v71[2];
            v15 = *(_DWORD *)(result + 16);
            if (v15 >= 0x100)
              v16 = v15 >> 8;
            else
              v16 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
            v17 = v13 - 1;
            v18 = (v16 ^ v14) & (v13 - 1);
            v19 = v71[0];
            v20 = (char *)v71[0] + 24 * v18;
            v21 = *(WTF **)v20;
            if (*(_QWORD *)v20)
            {
              v63 = v14;
              v22 = 0;
              while (1)
              {
                v23 = *((_DWORD *)v21 + 4);
                v24 = v23 >= 0x100 ? v23 >> 8 : WTF::StringImpl::hashSlowCase(v21);
                v25 = (v18 + v13 - ((v24 ^ v63) & v17)) & v17;
                if (v22 > v25)
                  break;
                if (v24 == v16)
                {
                  result = WTF::equal(*(WTF **)v20, v69, v5);
                  if ((result & 1) != 0)
                    goto LABEL_14;
                }
                v19 = v71[0];
                v18 = ((_DWORD)v18 + 1) & v17;
                ++v22;
                v20 = (char *)v71[0] + 24 * v18;
                v21 = *(WTF **)v20;
                if (!*(_QWORD *)v20)
                {
                  if (v22 >= 0x80)
                    BYTE4(v71[2]) = 1;
                  goto LABEL_42;
                }
              }
              if (v22 >= 0x80)
                BYTE4(v71[2]) = 1;
              v29 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = 0;
              v72 = v29;
              v30 = (uint64_t)v19 + 24 * v18 + 8;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v73, v30);
              v32 = (char *)v19 + 24 * v18;
              v35 = *((_DWORD *)v32 + 4);
              v34 = v32 + 16;
              v33 = v35;
              if (v35 != -1)
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v33])(&v75, v30);
              *v34 = -1;
              v36 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v31);
                else
                  *(_DWORD *)v36 -= 2;
              }
              *(_QWORD *)v20 = 0;
              *((_QWORD *)v20 + 1) = 0;
              *((_DWORD *)v20 + 4) = 0;
              v37 = v69;
              v69 = 0;
              v38 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = v37;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v31);
                else
                  *(_DWORD *)v38 -= 2;
              }
              std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v30, (uint64_t)&v66);
              for (i = v18 + 1; ; i = v41 + 1)
              {
                v41 = i & v17;
                v42 = v71[0];
                v43 = (WTF *)((char *)v71[0] + 24 * (i & v17));
                v44 = *(WTF::StringImpl **)v43;
                if (!*(_QWORD *)v43)
                  break;
                v45 = *((_DWORD *)v44 + 4);
                if (v45 >= 0x100)
                  v46 = v45 >> 8;
                else
                  v46 = WTF::StringImpl::hashSlowCase(v44);
                v47 = v25 + 1;
                v25 = (v41 + v13 - ((v46 ^ v63) & v17)) & v17;
                if (v47 <= v25)
                  v25 = v47;
                else
                  std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>(&v72, v43);
              }
              v48 = v72;
              v72 = 0;
              v49 = *(WTF::StringImpl **)v43;
              *(_QWORD *)v43 = v48;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v39);
                else
                  *(_DWORD *)v49 -= 2;
              }
              std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)v42 + 24 * v41 + 8, (uint64_t)v73);
              if (v74 != -1)
                ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v74])(&v75, v73);
              v74 = -1;
              result = (uint64_t)v72;
              v72 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            else
            {
LABEL_42:
              v26 = v69;
              v69 = 0;
              v27 = *(WTF::StringImpl **)v20;
              *(_QWORD *)v20 = v26;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v6);
                else
                  *(_DWORD *)v27 -= 2;
              }
              result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)v19 + 24 * v18 + 8, (uint64_t)&v66);
            }
            v12 = 0;
            ++HIDWORD(v71[1]);
          }
          else
          {
LABEL_14:
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 24) = 0;
            v12 = 1;
          }
          if (v68 && v67 != -1)
            result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v67])(&v72, &v66);
          goto LABEL_18;
        }
        result = IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::decode<IPC::Decoder,0ul,1ul>((uint64_t)&v66, a2, *v8);
        v28 = v68;
      }
      else
      {
        IPC::Decoder::decode<WTF::String>(a2, &v72);
        if (v73[0])
        {
          v55 = v72;
          v72 = 0;
          v66 = v55;
          v67 = 0;
          v28 = 1;
        }
        else
        {
          v28 = 0;
          LOBYTE(v66) = 0;
        }
        v68 = v28;
        result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v54);
      }
      if (!v28)
      {
LABEL_107:
        v6 = (WTF::StringImpl *)*a2;
        v5 = (const WTF::StringImpl *)a2[1];
        *a2 = 0;
        a2[1] = 0;
        result = a2[3];
        if (result && v5)
          result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v6);
      }
      if (v68)
        break;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      v12 = 1;
LABEL_18:
      if (v70)
      {
        result = (uint64_t)v69;
        v69 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v12)
        goto LABEL_95;
      if (++v4 == v65)
      {
        v50 = v71[0];
        v51 = v71[1];
        v52 = (int)v71[2];
        v53 = BYTE4(v71[2]);
        goto LABEL_84;
      }
    }
    if (v70)
      goto LABEL_13;
    __break(1u);
LABEL_105:
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (v58)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, const WTF::StringImpl *))(*(_QWORD *)v58 + 16))(v58, v6, v5);
      v60 = *a2;
      v61 = a2[1];
      v62 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v62)
      {
        if (v61)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60);
LABEL_100:
          v6 = (WTF::StringImpl *)*a2;
          v5 = (const WTF::StringImpl *)a2[1];
LABEL_101:
          v57 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v57 && v5)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v57 + 16))(v57, v6);
        }
      }
    }
LABEL_106:
    LOBYTE(v66) = 0;
    v68 = 0;
    goto LABEL_107;
  }
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
LABEL_84:
  *(_QWORD *)a1 = v50;
  *(_QWORD *)(a1 + 8) = v51;
  *(_DWORD *)(a1 + 16) = v52;
  *(_BYTE *)(a1 + 20) = v53;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_196BCF6C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, int a15, int a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,WTF *a23,unsigned int a24,uint64_t a25,WTF::StringImpl *a26)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a19, a2);
  if (a23)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(a23, (WTF::StringImpl *)a24);
  _Unwind_Resume(a1);
}

void sub_196BCF768()
{
  JUMPOUT(0x196BCF74CLL);
}

uint64_t IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::decode<IPC::Decoder,0ul,1ul>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  char v5;
  int v6;
  char v7;

  if (a3 == 2)
  {
    result = IPC::Decoder::decode<unsigned int>(a2);
    if ((result & 0xFF00000000) != 0)
    {
      *(_DWORD *)a1 = result;
      v6 = 2;
      goto LABEL_4;
    }
LABEL_8:
    v7 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_5;
  }
  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v5)
    goto LABEL_8;
  *(_QWORD *)a1 = result;
  v6 = 3;
LABEL_4:
  *(_DWORD *)(a1 + 8) = v6;
  v7 = 1;
LABEL_5:
  *(_BYTE *)(a1 + 16) = v7;
  return result;
}

void WebKit::WebPreferencesStore::~WebPreferencesStore(WebKit::WebPreferencesStore *this)
{
  WTF *v2;

  v2 = (WTF *)*((_QWORD *)this + 3);
  if (v2)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*((unsigned int *)this + 8));
  if (*(_QWORD *)this)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)this, (WTF::StringImpl *)*((unsigned int *)this + 2));
}

uint64_t WebKit::WebPage::updatePreferences(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2)
{
  uint64_t v4;
  WebCore::Settings *v5;
  const WTF::StringImpl *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  const WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int BoolValueForKey;
  const WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WebCore::DatabaseManager *v24;
  const WTF::StringImpl *v25;
  WebCore::DatabaseManager *v26;
  const WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  int v29;
  const WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  int v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  char v36;
  const WTF::StringImpl *v37;
  int v38;
  const WTF::StringImpl *v39;
  char HasServiceWorkerEntitlement;
  const WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WebCore *v44;
  WebCore::PlatformStrategies *v45;
  WebKit::WebProcess *v46;
  WebKit::WebProcess *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  int v50;
  WebKit::AuxiliaryProcess *v51;
  WebKit::WebProcess *v52;
  int isParentProcessAFullWebBrowser;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::DeprecatedGlobalSettings *v61;
  uint64_t v62;
  WebCore::DeprecatedGlobalSettings *v63;
  uint64_t v64;
  const WTF::StringImpl *v65;
  WebCore::PlatformMediaSessionManager *v66;
  const WebKit::WebPreferencesStore *v67;
  WebKit::WebProcess *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 **v79;
  void *v80;
  WebKit::WebProcess *v82;
  WebKit::WebProcess *v83;
  WebKit::WebProcess *v84;
  WebKit::WebProcess *v85;
  WebKit::WebProcess *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t buf[4];
  _BYTE v93[18];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  WebKit::WebPage::updatePreferencesGenerated(a2, a2);
  v4 = *(_QWORD *)(*((_QWORD *)this + 6) + 112);
  WebKit::WebPage::updateSettingsGenerated(a2, (const WebKit::WebPreferencesStore *)v4, v5);
  if ((*(_QWORD *)(v4 + 664) & 0x10) == 0)
  {
    v7 = qword_1ECE712D0;
    if (os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)this + 5);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v93 = this;
      *(_WORD *)&v93[8] = 2048;
      *(_QWORD *)&v93[10] = v8;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::updatePreferences: acceleratedCompositingEnabled setting was false. WebKit cannot function in this mode; changing setting to true",
        buf,
        0x16u);
    }
    WebCore::Settings::setAcceleratedCompositingEnabled((WebCore::Settings *)v4);
  }
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  v9 = (uint64_t *)(v4 + 664);
  if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, v6))
  {
    v11 = *(unsigned int *)(v4 + 720) | ((unint64_t)*(unsigned __int8 *)(v4 + 724) << 32);
    v13 = *(_QWORD *)(v4 + 704);
    v12 = *(_QWORD *)(v4 + 712);
    v14 = *(_QWORD *)(v4 + 696);
    v16 = *v9;
    v15 = *(_QWORD *)(v4 + 672);
    v17 = *(_QWORD *)(v4 + 680);
    v18 = *(_QWORD *)(v4 + 688) | 0x200000000000;
LABEL_16:
    v23 = 0x100000000000;
    goto LABEL_18;
  }
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, v10);
  v21 = 0x200000000000;
  if (!BoolValueForKey)
    v21 = 0;
  *(_QWORD *)(v4 + 688) = *(_QWORD *)(v4 + 688) & 0xFFFFDFFFFFFFFFFFLL | v21;
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  v22 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, v20);
  v11 = *(unsigned int *)(v4 + 720) | ((unint64_t)*(unsigned __int8 *)(v4 + 724) << 32);
  v13 = *(_QWORD *)(v4 + 704);
  v12 = *(_QWORD *)(v4 + 712);
  v18 = *(_QWORD *)(v4 + 688);
  v14 = *(_QWORD *)(v4 + 696);
  v15 = *(_QWORD *)(v4 + 672);
  v17 = *(_QWORD *)(v4 + 680);
  v16 = *v9;
  if (v22)
    goto LABEL_16;
  v23 = 0;
LABEL_18:
  *v9 = v16;
  *(_QWORD *)(v4 + 672) = v15;
  *(_QWORD *)(v4 + 680) = v17;
  *(_QWORD *)(v4 + 688) = v18 & 0xFFFFEFFFFFFFFFFFLL | v23;
  *(_QWORD *)(v4 + 696) = v14;
  *(_QWORD *)(v4 + 704) = v13;
  *(_QWORD *)(v4 + 712) = v12;
  *(_DWORD *)(v4 + 720) = v11;
  *(_BYTE *)(v4 + 724) = BYTE4(v11);
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(v4 + 560) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key) != 0;
  {
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(v4 + 549) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key) != 0;
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  *(_DWORD *)(v4 + 424) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key);
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
  WebCore::Settings::setStorageBlockingPolicy();
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(v4 + 369) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key);
  {
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(v4 + 616) = WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key);
  {
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
  }
  v24 = (WebCore::DatabaseManager *)WebKit::valueForKey<unsigned int>((uint64_t)a2, (uint64_t)a2 + 24, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key);
  *(_BYTE *)(v4 + 520) = (_BYTE)v24;
  v26 = (WebCore::DatabaseManager *)WebCore::DatabaseManager::singleton(v24);
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, v25);
  WebCore::DatabaseManager::setIsAvailable(v26);
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  *((_BYTE *)this + 187) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, v27);
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v29 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, v28);
  if (*((unsigned __int8 *)this + 1834) != v29)
  {
    *((_BYTE *)this + 1834) = v29;
    WebKit::WebPage::updateThrottleState(this);
  }
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *((_BYTE *)this + 198) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, v30);
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *((_BYTE *)this + 200) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, v31);
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v33 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, v32);
  v35 = 0x8000000000;
  if (!v33)
    v35 = 0;
  *(_QWORD *)(v4 + 712) = *(_QWORD *)(v4 + 712) & 0xFFFFFF7FFFFFFFFFLL | v35;
  if (*((_BYTE *)this + 1193))
  {
    v36 = 1;
  }
  else
  {
    {
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
    }
    v36 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, v34);
  }
  *((_BYTE *)this + 1193) = v36;
  *((_BYTE *)this + 1177) = v36;
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v34))WebKit::disableServiceWorkerEntitlementTestingOverride = 1;
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v38 = *((unsigned __int8 *)this + 2249);
  if (WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v37))
  {
    HasServiceWorkerEntitlement = WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(this);
    if (!v38 && (HasServiceWorkerEntitlement & 1) == 0)
      *(_QWORD *)(v4 + 696) &= ~0x80uLL;
  }
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  *((_BYTE *)this + 195) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, v39);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v42 = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, v41);
  v43 = 0x400000000;
  if (!v42)
    v43 = 0;
  *(_QWORD *)(v4 + 688) = *(_QWORD *)(v4 + 688) & 0xFFFFFFFBFFFFFFFFLL | v43;
  v44 = (WebCore *)*((_QWORD *)this + 9);
  if (v44)
    v44 = (WebCore *)(*(uint64_t (**)(WebCore *, const WebKit::WebPreferencesStore *))(*(_QWORD *)v44 + 104))(v44, a2);
  v45 = (WebCore::PlatformStrategies *)WebCore::platformStrategies(v44);
  atomic_store(*((_BYTE *)this + 193), (unsigned __int8 *)(WebCore::PlatformStrategies::mediaStrategy(v45) + 9));
  {
    v46 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v82 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v46 = WebKit::WebProcess::WebProcess(v82);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v46;
  }
  WebKit::RemoteMediaPlayerManager::setUseGPUProcess(*((WebKit::RemoteMediaPlayerManager **)v46 + 48), *((unsigned __int8 *)this + 193));
  {
    v47 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v83 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v47 = WebKit::WebProcess::WebProcess(v83);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v47;
  }
  WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(*((WebKit::RemoteImageDecoderAVFManager **)v47 + 49), *((_BYTE *)this + 193));
  {
    v48 = (unsigned __int8 *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v84 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v48 = (unsigned __int8 *)WebKit::WebProcess::WebProcess(v84);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v48;
  }
  v48[760] = *((_BYTE *)this + 191);
  v49 = *((_BYTE *)this + 192);
  if (v49)
    v49 = *((_BYTE *)this + 113) == 0;
  v50 = *((unsigned __int8 *)this + 193);
  v48[761] = v49;
  WebKit::WebProcess::setUseGPUProcessForMedia(v48, v50 != 0);
  {
    v52 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v85 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v52 = WebKit::WebProcess::WebProcess(v85);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v52;
  }
  *((_BYTE *)v52 + 763) = *((_BYTE *)this + 194);
  isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(v52, v51);
  v54 = *(_QWORD *)(v4 + 704);
  if (isParentProcessAFullWebBrowser)
  {
    v55 = *(unsigned int *)(v4 + 720) | ((unint64_t)*(unsigned __int8 *)(v4 + 724) << 32);
    v56 = *(_QWORD *)(v4 + 712);
    v58 = *(_QWORD *)(v4 + 688);
    v57 = *(_QWORD *)(v4 + 696);
    v60 = *(_QWORD *)(v4 + 672);
    v59 = *(_QWORD *)(v4 + 680);
    *v9 = *v9;
    *(_QWORD *)(v4 + 672) = v60;
    *(_QWORD *)(v4 + 680) = v59;
    *(_QWORD *)(v4 + 688) = v58;
    *(_QWORD *)(v4 + 696) = v57;
    *(_QWORD *)(v4 + 704) = v54;
    *(_QWORD *)(v4 + 712) = v56;
    *(_BYTE *)(v4 + 724) = BYTE4(v55);
    *(_DWORD *)(v4 + 720) = v55 | 0x40;
  }
  v61 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled((WebCore::PlatformMediaSessionManager *)((v54 >> 40) & 1));
  v62 = WebCore::DeprecatedGlobalSettings::shared(v61);
  v63 = (WebCore::DeprecatedGlobalSettings *)WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v62 + 33));
  v64 = WebCore::DeprecatedGlobalSettings::shared(v63);
  WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)*(unsigned __int8 *)(v64 + 34));
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v66 = (WebCore::PlatformMediaSessionManager *)WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, v65);
  WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled(v66);
  {
    v68 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v86 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v68 = WebKit::WebProcess::WebProcess(v86);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v68;
  }
  if (*((_BYTE *)v68 + 618))
    WebKit::WebPage::adjustSettingsForLockdownMode((WebKit::WebPage *)v4, a2, v67);
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  *((_BYTE *)this + 2256) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, v67);
  v69 = *(_QWORD *)(v4 + 672);
  if ((v69 & 0x400000000000) != 0)
  {
    v70 = *(unsigned int *)(v4 + 720) | ((unint64_t)*(unsigned __int8 *)(v4 + 724) << 32);
    v72 = *(_QWORD *)(v4 + 704);
    v71 = *(_QWORD *)(v4 + 712);
    v73 = *(_QWORD *)(v4 + 688);
    v74 = *(_QWORD *)(v4 + 680);
    v75 = *(_QWORD *)(v4 + 696) | 0x40000020000000;
    *v9 = *v9;
    *(_QWORD *)(v4 + 672) = v69;
    *(_QWORD *)(v4 + 680) = v74;
    *(_QWORD *)(v4 + 688) = v73;
    *(_QWORD *)(v4 + 696) = v75;
    *(_QWORD *)(v4 + 704) = v72;
    *(_QWORD *)(v4 + 712) = v71;
    *(_DWORD *)(v4 + 720) = v70;
    *(_BYTE *)(v4 + 724) = BYTE4(v70);
  }
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, buf);
  v76 = *((_QWORD *)this + 20);
  if (v76)
  {
    v78 = *(unsigned int *)(v76 - 4);
    v77 = v76 + 8 * v78;
  }
  else
  {
    v77 = 0;
    v78 = 0;
  }
  v87 = (char *)this + 160;
  v88 = v77;
  v89 = v77;
  v90 = v77;
  v91 = v76 + 8 * v78;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v87);
  while (*(_QWORD *)&v93[4] != v88)
  {
    v79 = *(unsigned __int8 ***)(*(_QWORD *)(**(_QWORD **)&v93[4] + 8) + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v79 + 9);
    (*((void (**)(unsigned __int8 **))*v79 + 152))(v79);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v79[9], v80);
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  return WebCore::Page::settingsDidChange(*((WebCore::Page **)this + 6));
}

uint64_t WebKit::valueForKey<unsigned int>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  unsigned int *v6;
  const WTF::StringImpl *v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;

  v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if (((unsigned int *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)) == v6 || v6[4] != 2)
    && ((v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7), (unsigned int *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8)) == v6)|| v6[4] != 2)&& ((v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6), v6 = (unsigned int *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9), (unsigned int *)(*v8 + 24 * *((unsigned int *)v8 + 2)) == v6)|| v6[4] != 2))
  {
    return 0;
  }
  else
  {
    return v6[2];
  }
}

_QWORD *WebKit::WebPreferences::setAllowMediaContentTypesRequiringHardwareSupportAsFallback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferencesStore::setBoolValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, unsigned int a3)
{
  char v3;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE v9[8];
  int v10;

  v3 = a3;
  v6 = WebKit::valueForKey<BOOL>((uint64_t)this, (uint64_t)this + 24, a2) ^ a3;
  if ((_DWORD)v6 == 1)
  {
    v9[0] = v3;
    v10 = 1;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)v9, (uint64_t)v8);
    if (v10 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v10])(v8, v9);
  }
  return v6;
}

double WebKit::valueForKey<double>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  double result;

  v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if (*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) != v6 && *(_DWORD *)(v6 + 16) == 3)
    return *(double *)(v6 + 8);
  v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7);
  if (*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) != v6 && *(_DWORD *)(v6 + 16) == 3)
    return *(double *)(v6 + 8);
  v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6);
  v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9);
  result = 0.0;
  if (*v8 + 24 * *((unsigned int *)v8 + 2) != v6 && *(_DWORD *)(v6 + 16) == 3)
    return *(double *)(v6 + 8);
  return result;
}

BOOL WebKit::valueForKey<BOOL>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;

  v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if ((*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) == v6 || *(_DWORD *)(v6 + 16) != 1)
    && ((v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v7), *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) == v6)|| *(_DWORD *)(v6 + 16) != 1)&& ((v8 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)v6), v6 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v8, a3, v9), *v8 + 24 * *((unsigned int *)v8 + 2) == v6)|| *(_DWORD *)(v6 + 16) != 1))
  {
    return 0;
  }
  else
  {
    return *(_BYTE *)(v6 + 8) != 0;
  }
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 24 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
  {
    v10 = v9 >> 8;
  }
  else
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  v13 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 24 * v13);
  v14 = *v11;
  if (*v11)
  {
    v15 = -1;
    while (1)
    {
      v16 = *((_DWORD *)v14 + 4);
      v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v14);
      if (++v15 > ((v13 + v4 - ((v17 ^ v8) & v7)) & v7))
        break;
      if (v17 == v10)
      {
        v18 = WTF::equal(*v11, *a2, a3);
        v3 = *a1;
        if ((v18 & 1) != 0)
          return (uint64_t)v11;
      }
      else
      {
        v3 = *a1;
      }
      v13 = (v13 + 1) & v7;
      v11 = (WTF **)(v3 + 24 * v13);
      v14 = *v11;
      if (!*v11)
        return v3 + 24 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 24 * *((unsigned int *)a1 + 2);
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 24 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
  {
    v10 = v9 >> 8;
  }
  else
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = (WTF **)(v3 + 24 * v11);
  v13 = *v12;
  if (*v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 >= 0x100 ? v15 >> 8 : WTF::StringImpl::hashSlowCase(v13);
      if (++v14 > ((v11 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10)
      {
        v17 = WTF::equal(*v12, *a2, a3);
        v3 = *a1;
        if ((v17 & 1) != 0)
          return (uint64_t)v12;
      }
      else
      {
        v3 = *a1;
      }
      v11 = (v11 + 1) & v7;
      v12 = (WTF **)(v3 + 24 * v11);
      v13 = *v12;
      if (!*v12)
        return v3 + 24 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 24 * *((unsigned int *)a1 + 2);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v8;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = (char *)this + 8;
    do
    {
      v5 = *((unsigned int *)v4 + 2);
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v5])(&v8, v4);
      *((_DWORD *)v4 + 2) = -1;
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 - 1);
      *((_QWORD *)v4 - 1) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  _BYTE v22[8];
  int v23;
  char v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  v3 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v3)
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = 24 * v3;
    v7 = WTF::fastMalloc((WTF *)(24 * v3));
    v8 = 0;
    do
    {
      v9 = v7 + v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
    }
    while (v6 != v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = a2[1];
    v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v12 >> 31) ^ v12;
    *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13)
    {
      v14 = 0;
      for (i = 0; i < v13; ++i)
      {
        v16 = *a2;
        v17 = *(WTF::StringImpl **)(*a2 + v14);
        if (v17)
        {
          *(_DWORD *)v17 += 2;
          v21 = v17;
          v22[0] = 0;
          v23 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v22, v16 + v14 + 8);
          WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, &v21);
          if (v23 != -1)
            ((void (*)(char *, _BYTE *))off_1E34D4180[v23])(&v24, v22);
          v23 = -1;
          v19 = v21;
          v21 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          v13 = *((unsigned int *)a2 + 2);
        }
        v14 += 24;
      }
    }
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastMalloc((WTF *)(24 * a2));
  if (a2)
  {
    v8 = a2;
    v9 = result;
    do
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v12 >> 31) ^ v12;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v13 = v5;
    do
    {
      if (*(_QWORD *)v13)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (WTF::StringImpl **)v13);
      v14 = *((unsigned int *)v13 + 4);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v14])(&v16, (char *)v13 + 8);
      *((_DWORD *)v13 + 4) = -1;
      v15 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v7);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 24);
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v4 = *((_DWORD *)a1 + 2);
  v5 = v4 - 1;
  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  v9 = (v8 ^ v6) & v5;
  v10 = *a1;
  v11 = (WTF::StringImpl *)(*a1 + 24 * v9);
  v12 = *(WTF::StringImpl **)v11;
  if (*(_QWORD *)v11)
  {
    v14 = 0;
    do
    {
      v15 = *((_DWORD *)v12 + 4);
      if (v15 >= 0x100)
        v16 = v15 >> 8;
      else
        v16 = WTF::StringImpl::hashSlowCase(v12);
      v17 = (v9 + v4 - ((v16 ^ v6) & v5)) & v5;
      if (v14 > v17)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>(a2, v11);
        v14 = v17;
      }
      v9 = (v9 + 1) & v5;
      ++v14;
      v10 = *a1;
      v11 = (WTF::StringImpl *)(*a1 + 24 * v9);
      v12 = *(WTF::StringImpl **)v11;
    }
    while (*(_QWORD *)v11);
  }
  WTF::String::operator=((WTF::StringImpl **)v11, (WTF::StringImpl *)a2);
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v10 + 24 * v9 + 8, (uint64_t)(a2 + 1));
}

WTF::StringImpl *WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t i;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *result;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  const WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  char v51[8];
  int v52;
  char v53;

  v4 = (uint64_t)a3;
  v9 = *(unsigned int *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  if (10 * v8 >= (unint64_t)(9 * v9) || *(_BYTE *)(a1 + 20) && v9 <= 2 * (int)v8)
  {
    if ((_DWORD)v9)
      v46 = 2 * v9;
    else
      v46 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v46);
    LODWORD(v9) = *(_DWORD *)(a1 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *((_DWORD *)*a2 + 4);
  v49 = a2;
  if (v12 >= 0x100)
    v13 = v12 >> 8;
  else
    v13 = WTF::StringImpl::hashSlowCase(*a2);
  v14 = (v13 ^ v11) & v10;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)a1 + 24 * v14;
  v17 = *(WTF **)v16;
  if (*(_QWORD *)v16)
  {
    v47 = v4;
    v48 = a4;
    v18 = 0;
    while (1)
    {
      v19 = *((_DWORD *)v17 + 4);
      v20 = v19 >= 0x100 ? v19 >> 8 : WTF::StringImpl::hashSlowCase(v17);
      v21 = (v14 + v9 - ((v20 ^ v11) & v10)) & v10;
      if (v18 > v21)
        break;
      if (v20 == v13)
      {
        v44 = WTF::equal(*(WTF **)v16, *v49, a3);
        v15 = *(_QWORD *)a1;
        if ((v44 & 1) != 0)
        {
          v45 = v15 + 24 * *(unsigned int *)(a1 + 8);
          *(_QWORD *)v48 = v16;
          *(_QWORD *)(v48 + 8) = v45;
          *(_BYTE *)(v48 + 16) = 0;
          return (WTF::StringImpl *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v16 + 8, v47);
        }
      }
      else
      {
        v15 = *(_QWORD *)a1;
      }
      v14 = ((_DWORD)v14 + 1) & v10;
      ++v18;
      v16 = v15 + 24 * v14;
      v17 = *(WTF **)v16;
      if (!*(_QWORD *)v16)
      {
        if (v18 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        v4 = v47;
        a4 = v48;
        goto LABEL_42;
      }
    }
    if (v18 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v22 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = 0;
    v50 = v22;
    v23 = v15 + 24 * v14;
    v24 = v23 + 8;
    v51[0] = 0;
    v52 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>((uint64_t)v51, v23 + 8);
    v28 = *(_DWORD *)(v23 + 16);
    v27 = (_DWORD *)(v23 + 16);
    v26 = v28;
    if (v28 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v26])(&v53, v24);
    *v27 = -1;
    v29 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = 0;
    WTF::String::operator=((WTF::StringImpl **)v16, (WTF::StringImpl *)v49);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v24, v47);
    v31 = (v14 + 1) & v10;
    for (i = *(_QWORD *)a1; ; i = *(_QWORD *)a1)
    {
      v33 = (WTF::StringImpl *)(i + 24 * v31);
      v34 = *(WTF::StringImpl **)v33;
      if (!*(_QWORD *)v33)
        break;
      v35 = *((_DWORD *)v34 + 4);
      if (v35 >= 0x100)
        v36 = v35 >> 8;
      else
        v36 = WTF::StringImpl::hashSlowCase(v34);
      ++v21;
      v37 = (v31 + v9 - ((v36 ^ v11) & v10)) & v10;
      if (v21 > v37)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>(&v50, v33);
        v21 = v37;
      }
      v31 = (v31 + 1) & v10;
    }
    v38 = v50;
    v50 = 0;
    v39 = *(WTF::StringImpl **)v33;
    *(_QWORD *)v33 = v38;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v30);
      else
        *(_DWORD *)v39 -= 2;
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(i + 24 * v31 + 8, (uint64_t)v51);
    if (v52 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v52])(&v53, v51);
    v52 = -1;
    result = v50;
    v50 = 0;
    a4 = v48;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_42:
    WTF::String::operator=((WTF::StringImpl **)v16, (WTF::StringImpl *)v49);
    result = (WTF::StringImpl *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v15 + 24 * v14 + 8, v4);
  }
  v42 = *(_DWORD *)(a1 + 8);
  ++*(_DWORD *)(a1 + 12);
  v43 = *(_QWORD *)a1 + 24 * v42;
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v43;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

WTF::StringImpl **WTF::String::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_196BD1330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updatePreferences(uint64_t **this, const WebKit::WebPreferencesStore *a2)
{
  WebKit::RemoteLayerTreeDrawingArea *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Settings *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  const WTF::StringImpl *v14;

  v3 = (WebKit::RemoteLayerTreeDrawingArea *)this;
  v4 = this[5][1];
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(WebCore::Settings **)(*(_QWORD *)(v5 + 48) + 112);
  *((_QWORD *)v6 + 83) |= 0x20uLL;
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7)
  {
    v8 = this[11];
    v9 = 40 * v7;
    do
    {
      v10 = *v8;
      v8 += 5;
      v11 = WebCore::Settings::showDebugBorders(v6);
      this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 616))(v10, v11);
      v9 -= 40;
    }
    while (v9);
  }
  v12 = *((_QWORD *)v3 + 10);
  v13 = (WTF::StringImpl **)WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey((WebKit::WebPreferencesKey *)this);
  *(_BYTE *)(v12 + 209) = WebKit::WebPreferencesStore::getBoolValueForKey(a2, v13, v14);
  return WebCore::DebugPageOverlays::settingsChanged();
}

_QWORD *WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(WebKit::WebPreferencesKey *this)
{
  if ((byte_1ECE73359 & 1) == 0)
  {
    WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE73370[0] = &WebKit::WebPreferencesKey::useCGDisplayListsForDOMRenderingKey(void)::$_0::operator() const(void)::impl;
    byte_1ECE73359 = 1;
  }
  return qword_1ECE73370;
}

uint64_t WebKit::WebPage::updatePreferencesGenerated(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2)
{
  WebKit::WebPreferencesStore *v2;
  uint64_t *v3;
  const WTF::StringImpl *v4;
  WebCore::DeprecatedGlobalSettings *BoolValueForKey;
  char v6;
  WebKit::WebPreferencesKey *v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  WebCore::DeprecatedGlobalSettings *v10;
  WebKit::WebPreferencesKey *v11;
  uint64_t *v12;
  const WTF::StringImpl *v13;
  WebCore::DeprecatedGlobalSettings *v14;
  char v15;
  WebKit::WebPreferencesKey *v16;
  uint64_t *v17;
  const WTF::StringImpl *v18;
  WebCore::DeprecatedGlobalSettings *v19;
  WebKit::WebPreferencesKey *v20;
  uint64_t *v21;
  const WTF::StringImpl *v22;
  WebCore::DeprecatedGlobalSettings *v23;
  char v24;
  WebKit::WebPreferencesKey *v25;
  uint64_t *v26;
  const WTF::StringImpl *v27;
  WebCore::DeprecatedGlobalSettings *v28;
  char v29;
  WebKit::WebPreferencesKey *v30;
  uint64_t *v31;
  const WTF::StringImpl *v32;
  WebCore::DeprecatedGlobalSettings *v33;
  char v34;
  WebKit::WebPreferencesKey *v35;
  uint64_t *v36;
  const WTF::StringImpl *v37;
  WebCore::DeprecatedGlobalSettings *v38;
  char v39;
  WebKit::WebPreferencesKey *v40;
  uint64_t *v41;
  const WTF::StringImpl *v42;
  WebCore::DeprecatedGlobalSettings *v43;
  WebKit::WebPreferencesKey *v44;
  uint64_t *v45;
  const WTF::StringImpl *v46;
  WebCore::DeprecatedGlobalSettings *v47;
  char v48;
  WebKit::WebPreferencesKey *v49;
  uint64_t *v50;
  const WTF::StringImpl *v51;
  WebCore::DeprecatedGlobalSettings *v52;
  char v53;
  WebKit::WebPreferencesKey *v54;
  uint64_t *v55;
  const WTF::StringImpl *v56;
  WebCore::DeprecatedGlobalSettings *v57;
  WebKit::WebPreferencesKey *v58;
  uint64_t *v59;
  const WTF::StringImpl *v60;
  WebCore::DeprecatedGlobalSettings *v61;
  char v62;
  WebKit::WebPreferencesKey *v63;
  uint64_t *v64;
  const WTF::StringImpl *v65;
  WebCore::DeprecatedGlobalSettings *v66;
  WebKit::WebPreferencesKey *v67;
  uint64_t *v68;
  const WTF::StringImpl *v69;
  WebCore::DeprecatedGlobalSettings *v70;
  char v71;
  WebKit::WebPreferencesKey *v72;
  uint64_t *v73;
  const WTF::StringImpl *v74;
  WebCore::DeprecatedGlobalSettings *v75;
  char v76;
  WebKit::WebPreferencesKey *v77;
  uint64_t *v78;
  const WTF::StringImpl *v79;
  WebCore::DeprecatedGlobalSettings *v80;
  char v81;
  WebKit::WebPreferencesKey *v82;
  uint64_t *v83;
  const WTF::StringImpl *v84;
  WebCore::DeprecatedGlobalSettings *v85;
  uint64_t result;

  v2 = this;
  v3 = WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(this);
  BoolValueForKey = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v3, v4);
  v6 = (char)BoolValueForKey;
  v7 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(BoolValueForKey);
  *((_BYTE *)v7 + 18) = v6;
  v8 = WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(v7);
  v10 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v8, v9);
  v11 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(v10);
  v12 = WebKit::WebPreferencesKey::webMParserEnabledKey(v11);
  v14 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v12, v13);
  v15 = (char)v14;
  v16 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v14);
  *((_BYTE *)v16 + 32) = v15;
  v17 = WebKit::WebPreferencesKey::isAVFoundationEnabledKey(v16);
  v19 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v17, v18);
  v20 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(v19);
  v21 = WebKit::WebPreferencesKey::attachmentElementEnabledKey(v20);
  v23 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v21, v22);
  v24 = (char)v23;
  v25 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v23);
  *((_BYTE *)v25 + 25) = v24;
  v26 = WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(v25);
  v28 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v26, v27);
  v29 = (char)v28;
  v30 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v28);
  *((_BYTE *)v30 + 36) = v29;
  v31 = WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(v30);
  v33 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v31, v32);
  v34 = (char)v33;
  v35 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v33);
  *((_BYTE *)v35 + 21) = v34;
  v36 = WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(v35);
  v38 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v36, v37);
  v39 = (char)v38;
  v40 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v38);
  *((_BYTE *)v40 + 17) = v39;
  v41 = WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(v40);
  v43 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v41, v42);
  v44 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(v43);
  v45 = WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(v44);
  v47 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v45, v46);
  v48 = (char)v47;
  v49 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v47);
  *((_BYTE *)v49 + 22) = v48;
  v50 = WebKit::WebPreferencesKey::modelDocumentEnabledKey(v49);
  v52 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v50, v51);
  v53 = (char)v52;
  v54 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v52);
  *((_BYTE *)v54 + 37) = v53;
  v55 = WebKit::WebPreferencesKey::opusDecoderEnabledKey(v54);
  v57 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v55, v56);
  v58 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(v57);
  v59 = WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(v58);
  v61 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v59, v60);
  v62 = (char)v61;
  v63 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v61);
  *((_BYTE *)v63 + 30) = v62;
  v64 = WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(v63);
  v66 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v64, v65);
  v67 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(v66);
  v68 = WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(v67);
  v70 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v68, v69);
  v71 = (char)v70;
  v72 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v70);
  *((_BYTE *)v72 + 29) = v71;
  v73 = WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(v72);
  v75 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v73, v74);
  v76 = (char)v75;
  v77 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v75);
  *((_BYTE *)v77 + 26) = v76;
  v78 = WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(v77);
  v80 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v78, v79);
  v81 = (char)v80;
  v82 = (WebKit::WebPreferencesKey *)WebCore::DeprecatedGlobalSettings::shared(v80);
  *((_BYTE *)v82 + 27) = v81;
  v83 = WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(v82);
  v85 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey(v2, (WTF::StringImpl **)v83, v84);
  LOBYTE(v2) = (_BYTE)v85;
  result = WebCore::DeprecatedGlobalSettings::shared(v85);
  *(_BYTE *)(result + 28) = (_BYTE)v2;
  return result;
}

uint64_t *WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::attachmentElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isAVFoundationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::modelDocumentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::opusDecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webMParserEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key;
}

void WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(WebKit::RemoteImageDecoderAVFManager *this, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if ((a2 & 1) != 0)
  {
    WebCore::ImageDecoder::clearFactories(this);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34E8AF8;
    v3[1] = WebKit::RemoteImageDecoderAVF::supportsMediaType;
    v6[0] = v3;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34E8B20;
    v4[1] = WebKit::RemoteImageDecoderAVF::canDecodeType;
    v6[1] = v4;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34E8B48;
    v5[1] = this;
    v6[2] = v5;
    WebCore::ImageDecoder::installFactory();
    WebCore::ImageDecoder::ImageDecoderFactory::~ImageDecoderFactory((WebCore::ImageDecoder::ImageDecoderFactory *)v6);
  }
  else
  {
    WebCore::ImageDecoder::resetFactories(this);
  }
}

void WebCore::ImageDecoder::ImageDecoderFactory::~ImageDecoderFactory(WebCore::ImageDecoder::ImageDecoderFactory *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::RemoteMediaPlayerManager::setUseGPUProcess(WebKit::RemoteMediaPlayerManager *this, int a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;

  if (a2)
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34E77D8;
    v3[1] = this;
  }
  else
  {
    v3 = 0;
  }
  v6 = (uint64_t)v3;
  WebCore::RemoteMediaPlayerSupport::setRegisterRemotePlayerCallback();
  result = v6;
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (a2)
  {
    WebCore::SampleBufferDisplayLayer::setCreator();
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setNativeImageCreator();
  }
  return result;
}

unsigned __int8 *WebKit::WebProcess::setUseGPUProcessForMedia(unsigned __int8 *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  WebKit::RemoteAudioSession *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  WebKit::RemoteLegacyCDMFactory *v14;
  WebKit::RemoteMediaEngineConfigurationFactory *v15;
  char *v16;
  const char *v17;
  char *v18;
  WebCore::SystemBatteryStatusTestingOverrides *v19;
  WebCore::VP9TestingOverrides *v20;
  uint64_t v21;
  WebCore::AudioSession *v22;
  WebCore::MediaSessionHelper *v23;
  WebCore::LegacyCDM *v24;
  WebCore::MediaEngineConfigurationFactory *v25;
  WebCore::AudioHardwareListener *v26;
  WebCore::RemoteCommandListener *v27;
  WebCore::SystemBatteryStatusTestingOverrides *v28;
  WebCore::VP9TestingOverrides *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (this[762] == a2)
    return this;
  v3 = (uint64_t)this;
  this[762] = a2;
  v4 = WebCore::CDMFactory::registeredFactories((WebCore::CDMFactory *)this);
  WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, v5);
  if (!a2)
  {
    v22 = (WebCore::AudioSession *)WebCore::CDMFactory::platformRegisterFactories();
    WebCore::AudioSession::create(v22);
    WebCore::AudioSession::setSharedSession();
    v23 = (WebCore::MediaSessionHelper *)v31;
    v31 = 0;
    if (v23)
      v23 = (WebCore::MediaSessionHelper *)(*(uint64_t (**)(WebCore::MediaSessionHelper *))(*(_QWORD *)v23 + 8))(v23);
    v24 = (WebCore::LegacyCDM *)WebCore::MediaSessionHelper::resetSharedHelper(v23);
    v25 = (WebCore::MediaEngineConfigurationFactory *)WebCore::LegacyCDM::resetFactories(v24);
    v26 = (WebCore::AudioHardwareListener *)WebCore::MediaEngineConfigurationFactory::resetFactories(v25);
    v27 = (WebCore::RemoteCommandListener *)WebCore::AudioHardwareListener::resetCreationFunction(v26);
    v28 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::RemoteCommandListener::resetCreationFunction(v27);
    WebCore::SystemBatteryStatusTestingOverrides::singleton(v28);
    v33 = 0;
    WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback();
    v29 = 0;
    if (!&v31)
      v29 = (WebCore::VP9TestingOverrides *)(*((uint64_t (**)(void))v31 + 4))();
    WebCore::VP9TestingOverrides::singleton(v29);
    v33 = 0;
    goto LABEL_26;
  }
  v31 = "RemoteCDMFactory";
  v32 = 17;
  v6 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 272), (WTF::ASCIILiteralHash *)&v31);
  if (v6)
    v7 = (uint64_t)(v6 - 8);
  else
    v7 = 0;
  WebKit::RemoteCDMFactory::registerFactory(v7, v4);
  v8 = (WebKit::RemoteAudioSession *)WTF::fastMalloc((WTF *)0xE0);
  v31 = (const char *)WebKit::RemoteAudioSession::RemoteAudioSession(v8);
  WebCore::AudioSession::setSharedSession();
  v9 = v31;
  v31 = 0;
  if (v9)
    (*(void (**)(const char *))(*(_QWORD *)v9 + 8))(v9);
  v10 = WTF::fastMalloc((WTF *)0x60);
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 39) = 0;
  *(_DWORD *)(v10 + 36) = 0;
  *(_QWORD *)v10 = off_1E34B74F8;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = &unk_1E34B7558;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = &unk_1E34B7590;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v31 = (const char *)v10;
  WebCore::MediaSessionHelper::setSharedHelper();
  v13 = v31;
  v31 = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v13 + 1), v12);
  v31 = "RemoteLegacyCDMFactory";
  v32 = 23;
  v14 = (WebKit::RemoteLegacyCDMFactory *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 272), (WTF::ASCIILiteralHash *)&v31);
  WebKit::RemoteLegacyCDMFactory::registerFactory(v14);
  v31 = "RemoteMediaEngineConfigurationFactory";
  v32 = 38;
  v15 = (WebKit::RemoteMediaEngineConfigurationFactory *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 272), (WTF::ASCIILiteralHash *)&v31);
  WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(v15);
  v16 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = off_1E34E0978;
  v31 = v16;
  WebCore::AudioHardwareListener::setCreationFunction();
  v17 = v31;
  v31 = 0;
  if (v17)
    (*(void (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = off_1E34E09A0;
  v31 = v18;
  WebCore::RemoteCommandListener::setCreationFunction();
  v19 = (WebCore::SystemBatteryStatusTestingOverrides *)v31;
  v31 = 0;
  if (v19)
    v19 = (WebCore::SystemBatteryStatusTestingOverrides *)(*(uint64_t (**)(WebCore::SystemBatteryStatusTestingOverrides *))(*(_QWORD *)v19 + 8))(v19);
  WebCore::SystemBatteryStatusTestingOverrides::singleton(v19);
  v31 = (const char *)&off_1E34E09C8;
  v32 = v3;
  v33 = &v31;
  WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback();
  v20 = (WebCore::VP9TestingOverrides *)v33;
  if (v33 == &v31)
  {
    v21 = 4;
    v20 = (WebCore::VP9TestingOverrides *)&v31;
    goto LABEL_22;
  }
  if (v33)
  {
    v21 = 5;
LABEL_22:
    v20 = (WebCore::VP9TestingOverrides *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  }
  WebCore::VP9TestingOverrides::singleton(v20);
  v31 = (const char *)&off_1E34E0A10;
  v32 = v3;
  v33 = &v31;
LABEL_26:
  WebCore::VP9TestingOverrides::setConfigurationChangedCallback();
  this = (unsigned __int8 *)v33;
  if (v33 == &v31)
  {
    v30 = 4;
    this = (unsigned __int8 *)&v31;
  }
  else
  {
    if (!v33)
      return this;
    v30 = 5;
  }
  return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v30))();
}

uint64_t WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(WebKit::RemoteMediaEngineConfigurationFactory *this)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WebCore::MediaEngineConfigurationFactory::clearFactories(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34E7788;
  v4[1] = v2;
  v6 = (uint64_t)v4;
  WebCore::MediaEngineConfigurationFactory::installFactory();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

unsigned int *WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  unsigned int **v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (!*(_QWORD *)result)
  {
    v3 = (unsigned int **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (unsigned int *)v5;
    if (result)
    {
      do
      {
        v6 = __ldaxr(result);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, result));
      if (!v7)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::createMediaStrategy(WebKit::WebPlatformStrategies *this)
{
  WebCore::MediaStrategy *v1;
  uint64_t result;

  v1 = (WebCore::MediaStrategy *)operator new();
  result = WebCore::MediaStrategy::MediaStrategy(v1);
  *(_QWORD *)result = &off_1E34E87F8;
  *(_BYTE *)(result + 9) = 0;
  return result;
}

WebKit::RemoteAudioSession *WebKit::RemoteAudioSession::RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
  _QWORD *v2;
  WebCore::AudioSessionInterruptionObserver *v3;
  uint64_t v4;

  v2 = (_QWORD *)WebCore::AudioSession::AudioSession(this);
  v2[6] = off_1E34E6A90;
  v3 = (WebCore::AudioSessionInterruptionObserver *)(v2 + 6);
  v2[7] = 0;
  v2[8] = off_1E34E6488;
  v2[9] = &off_1E34B0558;
  v2[10] = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = this;
  *(_QWORD *)this = off_1E34E64C8;
  *(_QWORD *)v3 = &unk_1E34E6638;
  *((_QWORD *)this + 8) = &unk_1E34E6670;
  *((_QWORD *)this + 9) = &unk_1E34E66B0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 11) = v4;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  WebCore::AudioSession::addInterruptionObserver(this, v3);
  return this;
}

uint64_t WebKit::RemoteCDMFactory::registerFactory(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = result;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == *(_DWORD *)(a2 + 8))
    return WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteCDMFactory *>(a2, &v3);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v2) = result;
  *(_DWORD *)(a2 + 12) = v2 + 1;
  return result;
}

const char *WebKit::WebProcess::supplement<WebKit::RemoteLegacyCDMFactory>(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "RemoteLegacyCDMFactory";
  v2[1] = 23;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 272), (WTF::ASCIILiteralHash *)v2);
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(WebKit::WebPage *this)
{
  uint64_t result;
  char hasEntitlement;
  WebKit::WebProcess *v3;
  WebKit::WebProcess *v4;

  if ((WebKit::disableServiceWorkerEntitlementTestingOverride & 1) != 0)
    return 0;
    return WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(void)const::hasEntitlement != 0;
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
  }
  hasEntitlement = WTF::hasEntitlement();
  result = 1;
  if ((hasEntitlement & 1) == 0)
  {
    {
      v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v4);
    }
    result = WTF::hasEntitlement();
  }
  WebKit::WebPage::parentProcessHasServiceWorkerEntitlement(void)const::hasEntitlement = result;
  return result;
}

void sub_196BD2728(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10, WTF *a11, uint64_t a12)
{
  WTF *v12;

  if (v12)
    WTF::fastFree(v12, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 1)
      WTF::fastFree(a11, a2);
    else
      --*(_DWORD *)a11;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  const WTF::StringImpl *v53;
  uint64_t v54;
  IPC::Encoder *v56;
  WebCore::Color *v57;
  uint64_t *v58;
  uint64_t v59;

  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 40));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 48);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, (uint64_t *)(a2 + 64));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 72);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 88);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 104);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 120);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 136);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 152);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 168);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 184);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 200);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 216);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 232);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 248);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 264);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 280);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 296);
  v4 = *(_BYTE *)(a2 + 312);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *(_DWORD *)(a2 + 328);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 332);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 333);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 334);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 335);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 336);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 337);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 338);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 339);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 340);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 341);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 342);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 343);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 344);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 345);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 352));
  v7 = *(_DWORD *)(a2 + 360);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 364);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 368));
  v9 = *(_DWORD *)(a2 + 376);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v9;
  IPC::Encoder::addAttachment((uint64_t)a1, a2 + 380);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 384));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 392));
  LOBYTE(v9) = *(_BYTE *)(a2 + 400);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *(_BYTE *)(a2 + 401);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *(_BYTE *)(a2 + 402);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_QWORD *)(a2 + 408);
  v11 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10)
  {
    *v11 = 1;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(*(_QWORD *)(a2 + 408) + 16), *(_QWORD *)(*(_QWORD *)(a2 + 408) + 24));
  }
  else
  {
    *v11 = 0;
  }
  v12 = *(_QWORD *)(a2 + 416);
  if (v12)
    v13 = *(_DWORD *)(v12 - 12);
  else
    v13 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v14 = *(_QWORD *)(a2 + 416);
  if (!v14)
  {
    v17 = 0;
    v15 = 0;
    goto LABEL_16;
  }
  v15 = *(unsigned int *)(v14 - 4);
  v16 = v14 + 16 * v15;
  if (!*(_DWORD *)(v14 - 12))
  {
    v17 = v14 + 16 * v15;
LABEL_16:
    v16 = v14 + 16 * v15;
    goto LABEL_17;
  }
  v17 = *(_QWORD *)(a2 + 416);
  if ((_DWORD)v15)
  {
    v18 = 16 * v15;
    v17 = *(_QWORD *)(a2 + 416);
    while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
    {
      v17 += 16;
      v18 -= 16;
      if (!v18)
      {
        v17 = v16;
        break;
      }
    }
  }
LABEL_17:
  if (v14)
    v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
  else
    v19 = 0;
  while (v17 != v19)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v17);
    v20 = *(_BYTE *)(v17 + 8);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
    v21 = v17 + 16;
    v17 = v16;
    if (v21 != v16)
    {
      v17 = v21;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 16;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  IPC::ArgumentCoder<__CFData const*,void>::encode((uint64_t)a1, *(const __CFData **)(a2 + 424));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 432);
  v22 = *(_DWORD *)(a2 + 448);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v22;
  IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>(a1, (_DWORD **)(a2 + 456));
  v23 = *(_BYTE *)(a2 + 464);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v24 = *(unsigned __int8 *)(a2 + 624);
  v25 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v24)
  {
    *v25 = 1;
    if (!*(_BYTE *)(a2 + 624))
    {
      v56 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WebCore::Color,void>::encode(v56, v57);
    }
    IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode(a1, (uint64_t *)(a2 + 472));
  }
  else
  {
    *v25 = 0;
  }
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 632);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 648);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 664);
  v26 = *(_BYTE *)(a2 + 680);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v26;
  v27 = *(_BYTE *)(a2 + 681);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v27;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 688);
  v28 = *(_BYTE *)(a2 + 704);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v28;
  v29 = *(_BYTE *)(a2 + 705);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v29;
  v30 = *(_BYTE *)(a2 + 706);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v30;
  v31 = *(_BYTE *)(a2 + 707);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v31;
  v32 = *(_QWORD *)(a2 + 712);
  if (v32)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v33;
  v34 = *(_QWORD *)(a2 + 712);
  if (v34)
  {
    if (*(_DWORD *)(v34 - 12))
    {
      v35 = v34 + 16 * *(unsigned int *)(v34 - 4);
      v58 = *(uint64_t **)(a2 + 712);
      v59 = v35;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(&v58);
      v37 = v58;
      v36 = v59;
      v34 = *(_QWORD *)(a2 + 712);
      goto LABEL_39;
    }
    v38 = *(unsigned int *)(v34 - 4);
    v37 = (uint64_t *)(v34 + 16 * v38);
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v36 = v34 + 16 * v38;
LABEL_39:
  v58 = v37;
  v59 = v36;
  if (v34)
    v39 = (uint64_t *)(v34 + 16 * *(unsigned int *)(v34 - 4));
  else
    v39 = 0;
  if (v39 != v37)
  {
    do
    {
      v40 = *(_DWORD *)v37;
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v40;
      LOBYTE(v40) = *((_BYTE *)v37 + 4);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v40;
      LOBYTE(v40) = *((_BYTE *)v37 + 5);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v40;
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v37 + 1));
      v58 += 2;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(&v58);
      v37 = v58;
    }
    while (v58 != v39);
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 720));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 728));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 736));
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)(a2 + 744));
  v41 = *(_QWORD *)(a2 + 752);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v41;
  IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode(a1, (_DWORD *)(a2 + 760));
  LOBYTE(v41) = *(_BYTE *)(a2 + 784);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v41;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 792));
  v42 = *(_QWORD *)(a2 + 800);
  if (v42)
    v43 = *(_DWORD *)(v42 - 12);
  else
    v43 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v43;
  v46 = *(_QWORD *)(a2 + 800);
  if (!v46)
  {
    v49 = 0;
    v50 = 0;
LABEL_52:
    v48 = v46 + 16 * v50;
    goto LABEL_53;
  }
  if (!*(_DWORD *)(v46 - 12))
  {
    v50 = *(unsigned int *)(v46 - 4);
    v49 = (uint64_t *)(v46 + 16 * v50);
    goto LABEL_52;
  }
  v47 = v46 + 16 * *(unsigned int *)(v46 - 4);
  v58 = *(uint64_t **)(a2 + 800);
  v59 = v47;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v58, v44, v45);
  v49 = v58;
  v48 = v59;
  v46 = *(_QWORD *)(a2 + 800);
LABEL_53:
  v58 = v49;
  v59 = v48;
  if (v46)
    v51 = (uint64_t *)(v46 + 16 * *(unsigned int *)(v46 - 4));
  else
    v51 = 0;
  if (v51 != v49)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v49);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v49 + 1);
      v58 += 2;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v58, v52, v53);
      v49 = v58;
    }
    while (v58 != v51);
  }
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 808));
  v54 = *(_QWORD *)(a2 + 816);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v54;
  return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 824), *(unsigned int *)(a2 + 836));
}

char *IPC::ArgumentCoder<WebCore::Color,void>::encode(IPC::Encoder *a1, WebCore::Color *this)
{
  uint64_t v4;

  WebCore::Color::data(this);
  return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(a1, (uint64_t)&v4);
}

char *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  char *v6;
  int *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 28);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 28))
    {
      return IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::encode(a1, a2);
    }
    else
    {
      v6 = (char *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::Encoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&>(v6, v7, v8);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::Encoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&>(char *a1, int *a2, uint64_t a3)
{
  int v3;
  char *result;
  uint64_t v5;

  if (a3)
    return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::Encoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(a1, (uint64_t)a2, a3);
  if (a2[5])
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return (char *)IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::encode(v5);
  }
  else
  {
    v3 = *a2;
    result = IPC::Encoder::grow((IPC::Encoder *)a1, 4uLL, 4);
    *(_DWORD *)result = v3;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  int v6;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::Encoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&>((char *)a1, (int *)(a2 + 4), v6);
}

void IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  BOOL *v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  void *v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  char *v49;
  void *v50;
  unint64_t v51;

  v3 = *a2;
  if (*a2)
  {
    v5 = *(_DWORD *)(v3 + 16);
    v6 = *(_DWORD *)(v3 + 4);
    v7 = *(_QWORD *)(a1 + 544);
    v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v9 = v8 + 4;
    v10 = *(_QWORD *)(a1 + 552);
    if (v10 < v8 + 4)
    {
      v34 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v35 = v34;
        v34 *= 2;
      }
      while (v35 < v9);
      v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
      if (v36 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x196BD3698);
      }
      v11 = v36;
      memcpy(v36, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v37 = *(void **)(a1 + 528);
      if (v37 != (void *)(a1 + 16))
        munmap(v37, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v11;
      *(_QWORD *)(a1 + 552) = v35;
      v7 = *(_QWORD *)(a1 + 544);
    }
    else
    {
      v11 = *(char **)(a1 + 528);
    }
    bzero(&v11[v7], v8 - v7);
    *(_QWORD *)(a1 + 544) = v9;
    v12 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v8);
    *(_QWORD *)(a1 + 536) = v12 + 1;
    *v12 = v6;
    v13 = *(_QWORD *)(a1 + 544);
    v14 = v13 + 1;
    v15 = *(_QWORD *)(a1 + 552);
    if (v15 < v13 + 1)
    {
      v38 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v39 = v38;
        v38 *= 2;
      }
      while (v39 < v14);
      v40 = (char *)mmap(0, v39, 3, 4098, -1, 0);
      if (v40 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x196BD36A0);
      }
      v16 = v40;
      memcpy(v40, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v41 = *(void **)(a1 + 528);
      if (v41 != (void *)(a1 + 16))
        munmap(v41, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v16;
      *(_QWORD *)(a1 + 552) = v39;
      v17 = *(_QWORD *)(a1 + 544);
    }
    else
    {
      v16 = *(char **)(a1 + 528);
      v17 = *(_QWORD *)(a1 + 544);
    }
    bzero(&v16[v17], v13 - v17);
    *(_QWORD *)(a1 + 544) = v14;
    v18 = (BOOL *)(*(_QWORD *)(a1 + 528) + v13);
    *(_QWORD *)(a1 + 536) = v18 + 1;
    *v18 = (v5 & 4) != 0;
    v19 = *a2;
    if (((v5 >> 2) & 1) != 0)
    {
      if (v19)
      {
        v20 = *(const void **)(v19 + 8);
        v21 = *(unsigned int *)(v19 + 4);
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v22 = *(_QWORD *)(a1 + 544);
      v23 = v22 + v21;
      v24 = *(_QWORD *)(a1 + 552);
      if (v24 >= v22 + v21)
      {
        v25 = *(char **)(a1 + 528);
        v26 = *(_QWORD *)(a1 + 544);
LABEL_11:
        bzero(&v25[v26], v22 - v26);
        *(_QWORD *)(a1 + 544) = v23;
        v27 = (char *)(*(_QWORD *)(a1 + 528) + v22);
        *(_QWORD *)(a1 + 536) = &v27[v21];
        memcpy(v27, v20, v21);
        return;
      }
      v42 = (2 * v24 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v43 = v42;
        v42 *= 2;
      }
      while (v43 < v23);
      v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
      if (v44 == (char *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x196BD36A8);
      }
      goto LABEL_30;
    }
    if (v19)
    {
      v20 = *(const void **)(v19 + 8);
      v21 = 2 * *(unsigned int *)(v19 + 4);
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v26 = *(_QWORD *)(a1 + 544);
    v22 = (v26 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v23 = v22 + v21;
    v46 = *(_QWORD *)(a1 + 552);
    if (v46 >= v22 + v21)
    {
      v25 = *(char **)(a1 + 528);
      goto LABEL_11;
    }
    v51 = (2 * v46 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v43 = v51;
      v51 *= 2;
    }
    while (v43 < v23);
    v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
    if (v44 != (char *)-1)
    {
LABEL_30:
      v25 = v44;
      memcpy(v44, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v45 = *(void **)(a1 + 528);
      if (v45 != (void *)(a1 + 16))
        munmap(v45, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v25;
      *(_QWORD *)(a1 + 552) = v43;
      v26 = *(_QWORD *)(a1 + 544);
      goto LABEL_11;
    }
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x196BD3674);
  }
  v28 = *(_QWORD *)(a1 + 544);
  v29 = (v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v30 = v29 + 4;
  v31 = *(_QWORD *)(a1 + 552);
  if (v31 < v29 + 4)
  {
    v47 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v48 = v47;
      v47 *= 2;
    }
    while (v48 < v30);
    v49 = (char *)mmap(0, v48, 3, 4098, -1, 0);
    if (v49 == (char *)-1)
      goto LABEL_52;
    v32 = v49;
    memcpy(v49, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v50 = *(void **)(a1 + 528);
    if (v50 != (void *)(a1 + 16))
      munmap(v50, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v32;
    *(_QWORD *)(a1 + 552) = v48;
    v28 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v32 = *(char **)(a1 + 528);
  }
  bzero(&v32[v28], v29 - v28);
  *(_QWORD *)(a1 + 544) = v30;
  v33 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v29);
  *(_QWORD *)(a1 + 536) = v33 + 1;
  *v33 = -1;
}

char *IPC::Encoder::grow(IPC::Encoder *this, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  char *result;
  unint64_t v11;
  size_t v12;
  char *v13;

  v5 = *((_QWORD *)this + 68);
  v6 = (a2 + v5 - 1) / a2 * a2;
  v7 = v6 + a3;
  v8 = *((_QWORD *)this + 69);
  if (v8 >= v6 + a3)
  {
    v9 = (char *)*((_QWORD *)this + 66);
LABEL_3:
    bzero(&v9[v5], v6 - v5);
    *((_QWORD *)this + 68) = v7;
    result = (char *)(*((_QWORD *)this + 66) + v6);
    *((_QWORD *)this + 67) = &result[a3];
    return result;
  }
  v11 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v7);
  result = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *((const void **)this + 66), *((_QWORD *)this + 68));
    v13 = (char *)*((_QWORD *)this + 66);
    if (v13 != (char *)this + 16)
      munmap(v13, *((_QWORD *)this + 69));
    *((_QWORD *)this + 66) = v9;
    *((_QWORD *)this + 69) = v12;
    v5 = *((_QWORD *)this + 68);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

char *IPC::Encoder::encodeHeader(IPC::Encoder *this)
{
  IPC::Encoder::operator<<<unsigned char const&>((uint64_t)this, IPC::defaultMessageFlags);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>((uint64_t)this, *(_WORD *)this);
  return IPC::Encoder::operator<<<unsigned long long &>((uint64_t)this, (uint64_t *)this + 1);
}

char *IPC::Encoder::operator<<<unsigned char const&>(uint64_t a1, char *a2)
{
  char v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  char *result;
  unint64_t v11;
  size_t v12;
  void *v13;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 544);
  v5 = v4 + 1;
  v6 = *(_QWORD *)(a1 + 552);
  if (v6 >= v4 + 1)
  {
    v7 = *(char **)(a1 + 528);
    v8 = *(_QWORD *)(a1 + 544);
LABEL_3:
    bzero(&v7[v8], v4 - v8);
    *(_QWORD *)(a1 + 544) = v5;
    v9 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v4);
    *(_QWORD *)(a1 + 536) = v9 + 1;
    *v9 = v3;
    return (char *)a1;
  }
  v11 = (2 * v6 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v5);
  result = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v7 = result;
    memcpy(result, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v13 = *(void **)(a1 + 528);
    if (v13 != (void *)(a1 + 16))
      munmap(v13, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v7;
    *(_QWORD *)(a1 + 552) = v12;
    v8 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

void IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  void *v13;

  v4 = *(_QWORD *)(a1 + 544);
  v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v6 = v5 + 2;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 2)
  {
    v8 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v8[v4], v5 - v4);
    *(_QWORD *)(a1 + 544) = v6;
    v9 = (_WORD *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v9 + 1;
    *v9 = a2;
    return;
  }
  v10 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v11 = v10;
    v10 *= 2;
  }
  while (v11 < v6);
  v12 = (char *)mmap(0, v11, 3, 4098, -1, 0);
  if (v12 != (char *)-1)
  {
    v8 = v12;
    memcpy(v12, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v13 = *(void **)(a1 + 528);
    if (v13 != (void *)(a1 + 16))
      munmap(v13, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v11;
    v4 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

WebKit::WebProcess *WebKit::WebProcess::singleton(WebKit::WebProcess *this)
{
  WebKit::WebProcess *result;
  WebKit::WebProcess *v2;

    return (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
  result = WebKit::WebProcess::WebProcess(v2);
  WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::weakDeref(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
LABEL_3:
    this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
    goto LABEL_4;
  }
  if (__stxr(1u, this))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 2) - 1;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v5 = __ldxr(v2);
    if (v5 == 1)
    {
      if (!__stlxr(0, v2))
        return this;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v6 = *((_QWORD *)v2 + 1);
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_14:
  if (!v6)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebKit::WebProcess::networkProcessConnectionID(WebKit::WebProcess *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 304;
  if (__ldaxr((unsigned __int8 *)this + 304))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 304);
LABEL_5:
  v4 = *((_QWORD *)this + 39);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::ThreadSafeWeakPtrControlBlock::weakRef(WTF::ThreadSafeWeakPtrControlBlock *this)
{
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  int v4;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  if (*((_QWORD *)this + 3))
  {
    ++*((_QWORD *)this + 2);
    v3 = this;
  }
  else
  {
    v3 = 0;
  }
  v4 = __ldxr((unsigned __int8 *)this);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v3;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(this);
  return v3;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  int v7;

  v4 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  if (*((_QWORD *)v4 + 3))
    ++*((_QWORD *)v4 + 1);
  else
    a2 = 0;
  *a3 = a2;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

void IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
}

_QWORD *IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  const char ***v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(const char ****)a2;
    v8 = 8 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, v7++);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::UserData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  if (*a2)
    CFRetain(*(CFTypeRef *)(v3 + 8));
  v5 = v3;
  IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(a1, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void sub_196BD3DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,void>::encode<IPC::Encoder,API::Object>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::ArgumentCoder<API::Object,void>::encode(a1, *a2);
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>> const&>(uint64_t a1, _QWORD ***a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = (uint64_t)*a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (v4)
  {
    *v10 = 1;
    IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, *a2);
  }
  else
  {
    *v10 = 0;
  }
}

void IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode(uint64_t a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>> const&>(a1, (_QWORD ***)(a2 + 24));
}

uint64_t WebKit::WebProcessPool::platformInitializeWebProcess(WebKit::WebProcessPool *this, const WebKit::WebProcessProxy *a2, WebKit::WebProcessCreationParameters *a3)
{
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  WebKit::SandboxExtensionImpl *v13;
  uint64_t v14;
  const char **v15;
  const char **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  const char ***v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  WebCore *v53;
  void *v54;
  uint64_t v55;
  WebCore *v56;
  WebCore *HasBattery;
  PAL *HasAC;
  BOOL v59;
  char v60;
  WebCore *v61;
  WebCore::RenderThemeIOS *v62;
  int *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  double v69;
  double v70;
  double v71;
  uint64_t Table;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  int i;
  unsigned int v81;
  uint64_t v82;
  BOOL v83;
  WebCore::RenderThemeIOS *v84;
  unsigned int *v85;
  void *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  WebCore::IOSurface *v98;
  WebCore::IOSurface *v99;
  WebKit::StorageAccessUserAgentStringQuirkController *v100;
  const WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  unsigned int v105;
  _DWORD *v106;
  uint64_t v107;
  const WTF::StringImpl *v108;
  uint64_t v109;
  WTF::ASCIICaseInsensitiveHash **v110;
  _DWORD *v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  const WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  const WTF::StringImpl *v120;
  WTF::StringImpl **v121;
  __int128 *v122;
  WTF::StringImpl *v123;
  const WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  const WTF::URL *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  const WTF::StringImpl *v138;
  uint64_t result;
  unsigned int v140;
  unsigned int v141;
  CFTypeRef cf;
  void *v143;
  uint64_t v144;
  _OWORD v145[2];
  _OWORD v146[2];
  WTF::StringImpl *v147;
  uint64_t v148;
  _BYTE buf[32];
  char v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  {
    WebKit::mediaTypeCache(void)::typeCache = 0;
    unk_1EE341D70 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t)&WebKit::mediaTypeCache(void)::typeCache);
  v7 = *((unsigned int *)a3 + 111);
  if ((_DWORD)v7)
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)a3 + 54), (WTF::StringImpl *)(*((_QWORD *)a3 + 54) + 8 * v7));
  v8 = (WTF *)*((_QWORD *)a3 + 54);
  if (v8)
  {
    *((_QWORD *)a3 + 54) = 0;
    *((_DWORD *)a3 + 110) = 0;
    WTF::fastFree(v8, v6);
  }
  *((_QWORD *)a3 + 54) = *(_QWORD *)buf;
  v9 = *(_QWORD *)&buf[8];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *((_QWORD *)a3 + 55) = v9;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
  *((_BYTE *)a3 + 402) = 0;
  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  *((_BYTE *)a3 + 400) = objc_msgSend(v10, "BOOLForKey:", CFSTR("WebKitJSCJITEnabledDefaultsKey"));
  *((_BYTE *)a3 + 401) = objc_msgSend(v10, "BOOLForKey:", CFSTR("WebKitJSCFTLJITEnabledDefaultsKey"));
  *((_BYTE *)a3 + 333) = objc_msgSend(v10, "BOOLForKey:", CFSTR("LogMemoryJetsamDetails"));
  *((_BYTE *)a3 + 334) = objc_msgSend(v10, "BOOLForKey:", CFSTR("WebKitSuppressMemoryPressureHandler"));
  WTF::String::operator=((WTF::StringImpl **)a3 + 48, (WebKit::WebProcessPool *)((char *)this + 696));
  v11 = *((_QWORD *)a3 + 48);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 16);
    v13 = *(WebKit::SandboxExtensionImpl **)(v11 + 8);
    LODWORD(v11) = *(_DWORD *)(v11 + 4);
    v14 = (v12 >> 2) & 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(v13, (WebKit::SandboxExtensionImpl *)(v11 | (unint64_t)(v14 << 32)), 0, (uint64_t)buf);
  if (buf[8])
  {
    v16 = *(const char ***)buf;
    *(_QWORD *)buf = 0;
    v15 = std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a3 + 49, v16);
    if (buf[8])
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
  }
  WebCore::applicationBundleIdentifier((WebCore *)v15);
  v18 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v19 = (WTF::StringImpl *)*((_QWORD *)a3 + 44);
  *((_QWORD *)a3 + 44) = v18;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
      goto LABEL_16;
    WTF::StringImpl::destroy(v19, v17);
    v19 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (!v19)
      goto LABEL_17;
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v21);
    else
LABEL_16:
      *(_DWORD *)v19 = v20;
  }
LABEL_17:
  if (_MergedGlobals_1080 == 1)
  {
    v22 = dword_1EE34185C;
  }
  else
  {
    v22 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("WebKitWebProcessLatencyQOS"));
    dword_1EE34185C = v22;
    _MergedGlobals_1080 = 1;
  }
  *((_DWORD *)a3 + 90) = v22;
  if (byte_1EE341851 == 1)
  {
    v23 = dword_1EE341860;
  }
  else
  {
    v23 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("WebKitWebProcessThroughputQOS"));
    dword_1EE341860 = v23;
    byte_1EE341851 = 1;
  }
  *((_DWORD *)a3 + 91) = v23;
  v24 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v24 + 132))
  {
    v143 = 0;
    v25 = *(_OWORD *)(v24 + 116);
    v145[0] = *(_OWORD *)(v24 + 100);
    v145[1] = v25;
    v26 = (void *)objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyWithAuditToken:error:", v145, &v143);
    v27 = v143;
    if (v143)
    {
      v28 = qword_1ECE71B18;
      v23 = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v23)
      {
        v29 = objc_msgSend(v27, "localizedDescription");
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v29;
        _os_log_error_impl(&dword_196BCC000, v28, OS_LOG_TYPE_ERROR, "Failed to get attribution bundleID from audit token with error: %@.", buf, 0xCu);
      }
    }
    else
    {
      MEMORY[0x19AEABCC8](buf, objc_msgSend(v26, "bundleIdentifier"));
      v31 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v23 = *((_QWORD *)a3 + 46);
      *((_QWORD *)a3 + 46) = v31;
      if (!v23)
        goto LABEL_30;
      v32 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 != 2)
        goto LABEL_29;
      WTF::StringImpl::destroy((WTF::StringImpl *)v23, v30);
      v23 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (!v23)
        goto LABEL_30;
      v32 = *(_DWORD *)v23 - 2;
      if (*(_DWORD *)v23 == 2)
        v23 = WTF::StringImpl::destroy((WTF::StringImpl *)v23, v33);
      else
LABEL_29:
        *(_DWORD *)v23 = v32;
    }
  }
LABEL_30:
  if (!WebKit::WebProcessProxy::shouldEnableRemoteInspector((WebKit::WebProcessProxy *)v23))
    goto LABEL_50;
  v147 = (WTF::StringImpl *)"com.apple.webinspector";
  v148 = 23;
  v34 = *((_QWORD *)a2 + 18);
  if (!v34)
    goto LABEL_38;
  if (!*(_QWORD *)(v34 + 352))
  {
    LOBYTE(v34) = 0;
LABEL_38:
    v35 = 0;
    goto LABEL_39;
  }
  xpc_connection_get_audit_token();
  LOBYTE(v34) = buf[0];
  v146[0] = *(_OWORD *)&buf[1];
  *(_OWORD *)((char *)v146 + 15) = *(_OWORD *)&buf[16];
  v35 = 1;
LABEL_39:
  buf[0] = v34;
  *(_OWORD *)&buf[1] = v146[0];
  *(_OWORD *)&buf[16] = *(_OWORD *)((char *)v146 + 15);
  v150 = v35;
  WebKit::SandboxExtension::createHandlesForMachLookup((uint64_t *)&v147, 1uLL, (__int128 *)buf, 0, (uint64_t)&v143);
  v37 = *((unsigned int *)a3 + 21);
  if ((_DWORD)v37)
  {
    v38 = (const char ***)*((_QWORD *)a3 + 9);
    v39 = 8 * v37;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v38);
      v38 = (const char ***)(v40 + 8);
      v39 -= 8;
    }
    while (v39);
  }
  v41 = (WTF *)*((_QWORD *)a3 + 9);
  if (v41)
  {
    *((_QWORD *)a3 + 9) = 0;
    *((_DWORD *)a3 + 20) = 0;
    v41 = (WTF *)WTF::fastFree(v41, v36);
  }
  *((_QWORD *)a3 + 9) = v143;
  v42 = v144;
  v143 = 0;
  v144 = 0;
  *((_QWORD *)a3 + 10) = v42;
  {
    if (WebKit::singleton(void)::singleton)
    {
      v43 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
      if (v43)
      {
        if (!*(_BYTE *)(v43 + 444))
        {
          WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(v41, buf);
          v147 = (WTF::StringImpl *)buf;
          WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>(v43, (uint64_t *)&v147, 0, 0);
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v44);
        }
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v143, v36);
LABEL_50:
  v45 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a3 + 70, (uint64_t)this + 408);
  if (*((_QWORD *)this + 81))
  {
    v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
    objc_msgSend(v46, "encodeObject:forKey:", *((_QWORD *)this + 81), CFSTR("parameters"));
    objc_msgSend(v46, "finishEncoding");
    v47 = (const void *)objc_msgSend(v46, "encodedData");
    cf = v47;
    if (v47)
      CFRetain(v47);
    API::Data::createWithoutCopying((id *)&cf, (WebKit **)buf);
    v48 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v49 = *((_QWORD *)a3 + 51);
    *((_QWORD *)a3 + 51) = v48;
    if (v49)
    {
      CFRelease(*(CFTypeRef *)(v49 + 8));
      v50 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v50)
        CFRelease(*(CFTypeRef *)(v50 + 8));
    }
    v45 = cf;
    cf = 0;
    if (v45)
      CFRelease(v45);
    if (v46)
      CFRelease(v46);
  }
  v51 = MEMORY[0x19AEAA858](v45);
  v52 = (const void *)*((_QWORD *)a3 + 53);
  *((_QWORD *)a3 + 53) = v51;
  if (v52)
    CFRelease(v52);
  v53 = (WebCore *)objc_msgSend(v10, "BOOLForKey:", CFSTR("WebKitLogCookieInformation"));
  *((_BYTE *)a3 + 464) = (_BYTE)v53;
  WebCore::collectScreenProperties(v53);
  *((_DWORD *)a3 + 112) = (_DWORD)v143;
  v55 = v144;
  v144 = 0;
  v56 = (WebCore *)*((_QWORD *)a3 + 57);
  *((_QWORD *)a3 + 57) = v55;
  if (v56)
    v56 = (WebCore *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)v56, v54);
  HasBattery = (WebCore *)WebCore::systemHasBattery(v56);
  *((_BYTE *)a3 + 704) = (_BYTE)HasBattery;
  HasAC = (PAL *)WebCore::cachedSystemHasAC(HasBattery);
  if ((_BYTE)HasAC)
    v59 = 0;
  else
    v59 = (unsigned __int16)HasAC >= 0x100u;
  v60 = !v59;
  *((_BYTE *)a3 + 705) = v60;
  v61 = (WebCore *)PAL::currentUserInterfaceIdiom(HasAC);
  *((_BYTE *)a3 + 706) = (_BYTE)v61;
  v62 = (WebCore::RenderThemeIOS *)WebCore::supportsPictureInPicture(v61);
  *((_BYTE *)a3 + 707) = (_BYTE)v62;
  v64 = (uint64_t *)WebCore::RenderThemeIOS::cssValueToSystemColorMap(v62);
  if (!*v64 || (v65 = *(unsigned int *)(*v64 - 12), !(_DWORD)v65))
  {
    Table = 0;
    goto LABEL_103;
  }
  v66 = (v65 - 1) | ((v65 - 1) >> 1) | ((((_DWORD)v65 - 1) | ((v65 - 1) >> 1)) >> 2);
  v67 = v66 | (v66 >> 4) | ((v66 | (v66 >> 4)) >> 8);
  v68 = (v67 | HIWORD(v67)) + 1;
  if (v68 > 0x400)
  {
    if (v68 > 2 * v65)
      goto LABEL_78;
  }
  else if (3 * v68 > 4 * v65)
  {
LABEL_75:
    v69 = (double)v65;
    v70 = (double)v68;
    v71 = 0.604166667;
    goto LABEL_79;
  }
  LODWORD(v68) = 2 * v68;
  if (v68 <= 0x400)
    goto LABEL_75;
LABEL_78:
  v69 = (double)v65;
  v70 = (double)v68;
  v71 = 0.416666667;
LABEL_79:
  if (v70 * v71 <= v69)
    LODWORD(v68) = 2 * v68;
  if (v68 <= 8)
    v73 = 8;
  else
    v73 = v68;
  Table = WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::allocateTable(v73);
  *(_DWORD *)(Table - 8) = v73 - 1;
  *(_DWORD *)(Table - 4) = v73;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(Table - 12) = v65;
  v74 = *v64;
  if (*v64)
  {
    if (*(_DWORD *)(v74 - 12))
    {
      v75 = v74 + 16 * *(unsigned int *)(v74 - 4);
      *(_QWORD *)buf = *v64;
      *(_QWORD *)&buf[8] = v75;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(buf);
      v63 = *(int **)buf;
      v76 = *(_QWORD *)&buf[8];
      v74 = *v64;
      goto LABEL_90;
    }
    v77 = *(unsigned int *)(v74 - 4);
    v63 = (int *)(v74 + 16 * v77);
  }
  else
  {
    v63 = 0;
    v77 = 0;
  }
  v76 = v74 + 16 * v77;
LABEL_90:
  *(_QWORD *)buf = v63;
  *(_QWORD *)&buf[8] = v76;
  if (v74)
    v78 = (int *)(v74 + 16 * *(unsigned int *)(v74 - 4));
  else
    v78 = 0;
  if (v78 != v63)
  {
    do
    {
      v79 = 0;
      for (i = *v63; ; i = v79 + v81)
      {
        v81 = i & *(_DWORD *)(Table - 8);
        v82 = Table + 16 * v81;
        v83 = !*(_DWORD *)v82 && *(_BYTE *)(v82 + 4) == 0;
        if (v83 && !*(_BYTE *)(v82 + 5))
          break;
        ++v79;
      }
      *(_QWORD *)v82 = *(_QWORD *)v63;
      WebCore::Color::operator=();
      *(_QWORD *)buf += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(buf);
      v63 = *(int **)buf;
    }
    while (*(int **)buf != v78);
  }
LABEL_103:
  v84 = (WebCore::RenderThemeIOS *)*((_QWORD *)a3 + 89);
  *((_QWORD *)a3 + 89) = Table;
  if (v84)
    v84 = (WebCore::RenderThemeIOS *)WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable((uint64_t)v84, v63);
  WebCore::RenderThemeIOS::systemFocusRingColor(v84);
  v85 = (unsigned int *)WebCore::Color::operator=();
  if ((*(_QWORD *)buf & 0x8000000000000) != 0)
  {
    v85 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFLL);
    do
    {
      v140 = __ldaxr(v85);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v85));
    if (!v141)
    {
      atomic_store(1u, v85);
      v85 = (unsigned int *)WTF::fastFree((WTF *)v85, v86);
    }
  }
  WebCore::localizedDeviceModel((WebCore *)v85);
  v88 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v89 = (WTF::StringImpl *)*((_QWORD *)a3 + 91);
  *((_QWORD *)a3 + 91) = v88;
  if (!v89)
    goto LABEL_111;
  v90 = *(_DWORD *)v89 - 2;
  if (*(_DWORD *)v89 != 2)
  {
LABEL_110:
    *(_DWORD *)v89 = v90;
    goto LABEL_111;
  }
  WTF::StringImpl::destroy(v89, v87);
  v89 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v89)
  {
    v90 = *(_DWORD *)v89 - 2;
    if (*(_DWORD *)v89 == 2)
    {
      v89 = (WTF::StringImpl *)WTF::StringImpl::destroy(v89, v91);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
LABEL_111:
  v92 = WebCore::contentSizeCategory(v89);
  MEMORY[0x19AEABCC8](buf, v92);
  v94 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v95 = (WTF::StringImpl *)*((_QWORD *)a3 + 92);
  *((_QWORD *)a3 + 92) = v94;
  if (!v95)
    goto LABEL_116;
  v96 = *(_DWORD *)v95 - 2;
  if (*(_DWORD *)v95 != 2)
    goto LABEL_115;
  WTF::StringImpl::destroy(v95, v93);
  v95 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v95)
    goto LABEL_116;
  v96 = *(_DWORD *)v95 - 2;
  if (*(_DWORD *)v95 == 2)
    WTF::StringImpl::destroy(v95, v97);
  else
LABEL_115:
    *(_DWORD *)v95 = v96;
LABEL_116:
  WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(buf);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)a3 + 648, (uint64_t)buf);
  if (buf[8])
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
  *((_WORD *)a3 + 340) = 257;
  if (objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication")
    && !objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "applicationState")
    && qword_1EE341878 != -1)
  {
    dispatch_once(&qword_1EE341878, &__block_literal_global_124);
  }
  *((_BYTE *)a3 + 337) = -[WKMouseDeviceObserver hasMouseDevice](+[WKMouseDeviceObserver sharedInstance](WKMouseDeviceObserver, "sharedInstance"), "hasMouseDevice");
  v98 = (WebCore::IOSurface *)-[WKStylusDeviceObserver hasStylusDevice](+[WKStylusDeviceObserver sharedInstance](WKStylusDeviceObserver, "sharedInstance"), "hasStylusDevice");
  *((_BYTE *)a3 + 338) = (_BYTE)v98;
  v99 = (WebCore::IOSurface *)WebCore::IOSurface::maximumSize(v98);
  *((_QWORD *)a3 + 93) = v99;
  *((_QWORD *)a3 + 94) = WebCore::IOSurface::bytesPerRowAlignment(v99);
  WebKit::accessibilityPreferences((WebKit *)buf);
  *(_OWORD *)((char *)a3 + 760) = *(_OWORD *)buf;
  *(_QWORD *)((char *)a3 + 775) = *(_QWORD *)&buf[15];
  v100 = (WebKit::StorageAccessUserAgentStringQuirkController *)_AXSApplicationAccessibilityEnabled();
  *((_BYTE *)a3 + 784) = (_DWORD)v100 != 0;
  v103 = (uint64_t *)WebKit::StorageAccessUserAgentStringQuirkController::shared(v100) + 1;
  v102 = *v103;
  if (*v103 && (v104 = *(_DWORD *)(v102 - 12)) != 0)
  {
    v105 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v102 - 12));
    v106 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v105 + 16));
    v106[2] = v105 - 1;
    v106[3] = v105;
    *v106 = 0;
    v106[1] = v104;
    v109 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v103, v107, v108);
    v110 = (WTF::ASCIICaseInsensitiveHash **)v109;
    v111 = v106 + 4;
    *(_QWORD *)buf = v109;
    *(_QWORD *)&buf[8] = v101;
    if (*v103)
      v112 = *v103 + 16 * *(unsigned int *)(*v103 - 4);
    else
      v112 = 0;
    if (v112 != v109)
    {
      do
      {
        v113 = v106[2];
        v114 = WTF::ASCIICaseInsensitiveHash::hash(*v110, v101);
        v116 = 0;
        do
        {
          v117 = v114 & v113;
          v118 = WTF::equal(*(WTF **)&v111[4 * v117], 0, v115);
          v114 = ++v116 + v117;
        }
        while (!v118);
        WTF::String::operator=((WTF::StringImpl **)&v111[4 * v117], (WTF::StringImpl *)v110);
        WTF::String::operator=((WTF::StringImpl **)&v111[4 * v117 + 2], (WTF::StringImpl *)(v110 + 1));
        *(_QWORD *)buf += 16;
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, v119, v120);
        v110 = *(WTF::ASCIICaseInsensitiveHash ***)buf;
      }
      while (*(_QWORD *)buf != v112);
    }
  }
  else
  {
    v111 = 0;
  }
  v121 = (WTF::StringImpl **)*((_QWORD *)a3 + 100);
  *((_QWORD *)a3 + 100) = v111;
  if (v121)
    v121 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v121, v101);
  v122 = WebKit::StorageAccessPromptQuirkController::shared((WebKit::StorageAccessPromptQuirkController *)v121);
  v125 = *((unsigned int *)v122 + 5);
  if ((_DWORD)v125)
  {
    v126 = *((_QWORD *)v122 + 1);
    v127 = v126 + 32 * v125;
    v128 = (uint64_t *)((char *)a3 + 808);
    do
    {
      v129 = *(unsigned int *)(v126 + 28);
      if ((_DWORD)v129)
      {
        v130 = *(const WTF::URL **)(v126 + 16);
        v131 = 40 * v129;
        do
        {
          WebCore::RegistrableDomain::RegistrableDomain(&v147, v130);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v128, &v147, (uint64_t)buf);
          v132 = v147;
          v147 = 0;
          if (v132)
          {
            if (*(_DWORD *)v132 == 2)
              WTF::StringImpl::destroy(v132, v123);
            else
              *(_DWORD *)v132 -= 2;
          }
          v130 = (const WTF::URL *)((char *)v130 + 40);
          v131 -= 40;
        }
        while (v131);
      }
      else
      {
        v133 = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v126 + 8), (uint64_t)v123, v124);
        v135 = *(_QWORD *)(v126 + 8);
        if (v135)
          v136 = (WTF::StringImpl *)(v135 + 24 * *(unsigned int *)(v135 - 4));
        else
          v136 = 0;
        v147 = v133;
        v148 = v134;
        while (1)
        {
          v123 = v147;
          if (v147 == v136)
            break;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v128, (WTF::ASCIICaseInsensitiveHash **)v147, (uint64_t)buf);
          v147 = (WTF::StringImpl *)((char *)v147 + 24);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v147, v137, v138);
        }
      }
      v126 += 32;
    }
    while (v126 != v127);
  }
  result = v144;
  if (v144)
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v144, v123);
  return result;
}

void sub_196BD4AF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  _Unwind_Resume(a1);
}

void sub_196BD4C1C(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  JUMPOUT(0x196BD4C04);
}

_QWORD *WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(_QWORD *result)
{
  _BYTE *v1;
  _BYTE *v2;
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  _BYTE *v7;

  v1 = (_BYTE *)result[1];
  if ((_BYTE *)*result != v1)
  {
    v2 = (_BYTE *)(*result + 5);
    do
    {
      v3 = *(_DWORD *)(v2 - 5);
      v4 = *(v2 - 1);
      if (v3)
        v5 = 0;
      else
        v5 = v4 == 0;
      if (v5)
      {
        if (*v2)
          return result;
      }
      else
      {
        if (v3)
          v6 = 1;
        else
          v6 = v4 == 0;
        if (v6 || !*v2)
          return result;
      }
      v7 = v2 + 11;
      *result = v2 + 11;
      v2 += 16;
    }
    while (v7 != v1);
  }
  return result;
}

__int128 *WebKit::StorageAccessPromptQuirkController::shared(WebKit::StorageAccessPromptQuirkController *this)
{
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  return &WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance;
}

void WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(_BYTE *a1@<X8>)
{
  NSObject *v3;
  _BYTE v4[36];
  uint8_t buf[16];

  if (_MGCacheValid())
  {
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    v3 = qword_1ECE71780;
    if (os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "MobileGestalt cache is invalid! Creating a sandbox extension to repopulate cache in memory.", buf, 2u);
    }
    v4[0] = 0;
    v4[32] = 0;
    WebKit::SandboxExtension::createHandleForMachLookup((uint64_t)"com.apple.mobilegestalt.xpc", (uint64_t)v4, (uint64_t)a1);
  }
}

void WebKit::WebProcessProxy::platformInitialize(WebKit::WebProcessProxy *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  -[WKMouseDeviceObserver start](+[WKMouseDeviceObserver sharedInstance](WKMouseDeviceObserver, "sharedInstance"), "start");
  -[WKStylusDeviceObserver start](+[WKStylusDeviceObserver sharedInstance](WKStylusDeviceObserver, "sharedInstance"), "start");
  if ((WebKit::WebProcessProxy::platformInitialize(void)::didSetScreenWakeLockHandler & 1) == 0)
  {
    WebKit::WebProcessProxy::platformInitialize(void)::didSetScreenWakeLockHandler = 1;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34CE9E8;
    v5 = v2;
    PAL::SleepDisablerCocoa::setScreenWakeLockHandler();
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  WebKit::ProcessThrottler::setAllowsActivities((WebKit::WebProcessProxy *)((char *)this + 200), *(unsigned __int8 *)(v4 + 944) == 0);
}

void sub_196BD4E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::ProcessThrottler::setAllowsActivities(WebKit::ProcessThrottler *this, int a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebKit::ProcessThrottler *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 188) != a2)
  {
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v9 = 134218496;
      v10 = this;
      v11 = 1024;
      v12 = v6;
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setAllowsActivities %d", (uint8_t *)&v9, 0x18u);
    }
    v7 = *((_QWORD *)this + 1);
    if (*(unsigned __int8 *)(v7 + 16) == a2)
    {
      if ((a2 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      *(_BYTE *)(v7 + 16) = a2;
      if ((a2 & 1) != 0)
      {
LABEL_13:
        *((_BYTE *)this + 188) = a2;
        return;
      }
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        *(_QWORD *)(v7 + 8) = 0;
        WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(v8, v5);
      }
    }
    WebKit::ProcessThrottler::invalidateAllActivities(this);
    goto LABEL_13;
  }
}

void sub_196BD5150(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v1);
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::accessibilityPreferences(WebKit *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  CFTypeRef v15;
  void *v16;
  WTF::StringImpl *v17;
  CFTypeRef cf;

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = -1;
  *((_DWORD *)this + 4) = -1;
  *((_WORD *)this + 10) = 1;
  *((_BYTE *)this + 22) = 0;
  WebCore::applicationBundleIdentifier(this);
  WTF::String::createCFString((WTF::String *)&v17);
  v3 = v17;
  v17 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = _AXSReduceMotionEnabledApp();
  if ((v4 + 1) >= 3)
    v5 = -2;
  else
    v5 = v4;
  *(_DWORD *)this = v5;
  v6 = _AXSIncreaseButtonLegibilityApp();
  if ((v6 + 1) >= 3)
    v7 = -2;
  else
    v7 = v6;
  *((_DWORD *)this + 1) = v7;
  v8 = _AXSEnhanceTextLegibilityEnabledApp();
  if ((v8 + 1) >= 3)
    v9 = -2;
  else
    v9 = v8;
  *((_DWORD *)this + 2) = v9;
  v10 = _AXDarkenSystemColorsApp();
  if ((v10 + 1) >= 3)
    v11 = -2;
  else
    v11 = v10;
  *((_DWORD *)this + 3) = v11;
  v12 = _AXSInvertColorsEnabledApp();
  if ((v12 + 1) >= 3)
    v13 = -2;
  else
    v13 = v12;
  *((_DWORD *)this + 4) = v13;
  *((_BYTE *)this + 21) = _AXSEnhanceTextLegibilityEnabled() != 0;
  if (byte_1EE341855 == 1)
  {
    v14 = off_1EE3418B0;
    if (!off_1EE3418B0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (byte_1EE341856 == 1)
  {
    v16 = (void *)qword_1EE3418B8;
  }
  else
  {
    v16 = dlopen("/usr/lib/libAccessibility.dylib", 2);
    qword_1EE3418B8 = (uint64_t)v16;
    byte_1EE341856 = 1;
  }
  v14 = dlsym(v16, "_AXSReduceMotionAutoplayAnimatedImagesEnabled");
  off_1EE3418B0 = v14;
  byte_1EE341855 = 1;
  if (v14)
LABEL_22:
    *((_BYTE *)this + 20) = ((unsigned int (*)(void *))v14)(v14) != 0;
LABEL_23:
  *((_BYTE *)this + 22) = _AXSPrefersNonBlinkingCursorIndicator() != 0;
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
}

void sub_196BD533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

__int128 *WebKit::StorageAccessUserAgentStringQuirkController::shared(WebKit::StorageAccessUserAgentStringQuirkController *this)
{
  {
    qword_1ECE735A0 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    *(_OWORD *)algn_1ECE73590 = 0u;
  }
  return &WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance;
}

char *IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = v2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = v2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = v2[4];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 20);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 21);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = *((_BYTE *)v2 + 22);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

int *IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>(IPC::Encoder *this, _DWORD **a2)
{
  int v4;
  int *result;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int v10;

  if (*a2)
    v4 = *(*a2 - 3);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(a2);
  v6 = result;
  v8 = v7;
  if (*a2)
    v9 = (unint64_t)&(*a2)[16 * (unint64_t)*(*a2 - 1)];
  else
    v9 = 0;
  if ((int *)v9 != result)
  {
    do
    {
      v10 = *v6;
      *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v10;
      result = (int *)IPC::ArgumentCoder<WebCore::ScreenData,void>::encode(this, (uint64_t)(v6 + 2));
      if (v6 + 16 == v8)
      {
LABEL_12:
        v6 = v8;
      }
      else
      {
        v6 += 16;
        while ((*v6 + 1) <= 1)
        {
          v6 += 16;
          if (v6 == v8)
            goto LABEL_12;
        }
      }
    }
    while (v6 != (int *)v9);
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD **a1)
{
  _DWORD *result;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[16 * v2];
  if (!*(result - 3))
    return &result[16 * v2];
  if ((_DWORD)v2)
  {
    v4 = v2 << 6;
    while ((*result + 1) <= 1)
    {
      result += 16;
      v4 -= 64;
      if (!v4)
        return v3;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ScreenData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  char *result;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 32));
  v4 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v5) = *(_BYTE *)(a2 + 50);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_DWORD *)(a2 + 52);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v6;
  return result;
}

void API::Data::createWithoutCopying(id *a1@<X0>, WebKit **a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v4 = *a1;
  if (*a1)
  {
    v5 = objc_msgSend(*a1, "bytes");
    v6 = objc_msgSend(v4, "length");
    v7 = *a1;
  }
  else
  {
    v7 = 0;
    v5 = 0;
    v6 = 0;
  }
  *a1 = 0;
  API::Data::createWithoutCopying(v5, v6, (uint64_t)API::Data::createWithoutCopying(WTF::RetainPtr<NSData>)::$_0::__invoke, (uint64_t)v7, a2);
}

void sub_196BD5C04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, CFTypeRef cf)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1)
      WTF::fastFree(a11, a2);
    else
      --*(_DWORD *)a11;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  const void *v11;
  const void *v12;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(WTF **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v8 = (_QWORD *)v6;
        v9 = 8 * v5;
        v10 = v4;
        do
        {
          v11 = *(const void **)v10;
          *(_QWORD *)v10 = 0;
          *v8 = v11;
          v12 = *(const void **)v10;
          *(_QWORD *)v10 = 0;
          if (v12)
            CFRelease(v12);
          ++v8;
          v10 = (WTF *)((char *)v10 + 8);
          v9 -= 8;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

void WebKit::ProcessLauncher::platformInvalidate(WebKit::ProcessLauncher *this)
{
  unsigned int *v2;

  v2 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v2);
  if (*((_BYTE *)this + 56))
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  WebKit::ProcessLauncher::terminateXPCConnection(this);
}

uint64_t WebCore::ChromeClient::isSVGImageChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::invalidatingImagesWithAsyncDecodes(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebKit::GraphicsLayerCARemote::filtersCanBeComposited()
{
  return WebCore::PlatformCALayerCocoa::filtersCanBeComposited();
}

uint64_t WebKit::WebChromeClient::allowedCompositingTriggers(WebKit::WebChromeClient *this)
{
  return 223;
}

unsigned int *IPC::Decoder::decode<WebCore::Color>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BD5FBC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::ArgumentCoder<WebCore::Color,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[7];
  _BYTE v12[32];
  char v13;

  result = (unsigned int *)IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::decode<IPC::Decoder>(a1, (uint64_t)v12);
  if (!v13)
  {
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (result && v9 != 0)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  if (*a1)
  {
    if (v13)
    {
      WebCore::Color::Color();
      result = (unsigned int *)WebCore::Color::Color();
      a2[8] = 1;
      if ((*(_QWORD *)v11 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(*(_QWORD *)v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v6 = __ldaxr(result);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, result));
        if (!v7)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v5);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void sub_196BD60A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if ((a9 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  _QWORD *result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  _BYTE v39[26];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_26;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v24 = v4;
    v25 = 0;
    goto LABEL_27;
  }
  v9 = *v7;
  if (v9 < 2)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (!v28 || !v4)
    {
      v12 = 0;
      v29 = 0;
      v5 = 0;
      v10 = 1;
LABEL_31:
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30 && v29)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v5, v29);
        v16 = 0;
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v16 = 0;
      }
      goto LABEL_33;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v5);
    v11 = 0;
    v5 = *a1;
    v4 = a1[1];
    v10 = 1;
    v8 = a1[2];
LABEL_5:
    if (v9)
      v12 = v11;
    else
      v12 = 0;
    v13 = v8 - v5;
    if (v4 <= v13)
    {
      v29 = 0;
      v34 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v34 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v5 = *a1;
        v29 = a1[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_31;
    }
    v14 = (unsigned __int8 *)(v5 + v13);
    v15 = v5 + v13 + 1;
    a1[2] = v15;
    if (!v5)
    {
      v29 = v4;
      goto LABEL_31;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31 || !v4)
    {
      v19 = 0;
      v32 = 0;
      v5 = 0;
      v17 = 1;
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v5);
    v18 = 0;
    v5 = *a1;
    v4 = a1[1];
    v17 = 1;
    v15 = a1[2];
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - v5;
    if (v4 <= v20)
    {
      v35 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v35 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v5 = *a1;
        v32 = a1[1];
      }
      else
      {
        v32 = 0;
        v5 = 0;
      }
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
      v33 = a1[3];
      if (v33 && v32)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v5, v32);
      goto LABEL_36;
    }
    v21 = (unsigned __int8 *)(v5 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v5)
    {
      v32 = v4;
      goto LABEL_35;
    }
    v22 = *v21;
    if (v22 < 2)
    {
      result = IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder>(a1, v22, (uint64_t)&v36);
      if (v38)
        goto LABEL_19;
      goto LABEL_37;
    }
LABEL_36:
    LOBYTE(v36) = 0;
    v38 = 0;
LABEL_37:
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
    {
      if (v4)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
    }
LABEL_19:
    if (!*a1)
      break;
    if (!v10 && !v17 && v38)
    {
      *(_OWORD *)&v39[2] = v36;
      *(_QWORD *)&v39[18] = v37;
      *(_BYTE *)a2 = v12;
      *(_BYTE *)(a2 + 1) = v19;
      *(_OWORD *)(a2 + 2) = *(_OWORD *)v39;
      *(_OWORD *)(a2 + 12) = *(_OWORD *)&v39[10];
      *(_BYTE *)(a2 + 28) = 1;
      return result;
    }
    __break(1u);
LABEL_26:
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v5);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27 && v24)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
      v9 = 0;
      v5 = *a1;
      v4 = a1[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 0;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Cookie,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  void *v45;
  WTF::StringImpl *result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[5];
  __int128 v69;
  char v70;
  char v71;
  char v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  WTF *v77;
  uint64_t v78;
  char v79;
  WTF *v80;
  uint64_t v81;
  char v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  char v86;
  WTF::StringImpl *v87;
  char v88;
  __int128 v89;
  char v90;
  WTF::StringImpl *v91;
  char v92;
  WTF::StringImpl *v93;
  char v94;
  WTF::StringImpl *v95;
  char v96;
  WTF::StringImpl *v97;
  char v98;

  IPC::Decoder::decode<WTF::String>(a1, &v97);
  IPC::Decoder::decode<WTF::String>(a1, &v95);
  IPC::Decoder::decode<WTF::String>(a1, &v93);
  IPC::Decoder::decode<WTF::String>(a1, &v91);
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v47 = v4;
      v48 = 0;
      goto LABEL_82;
    }
    v9 = 0;
    v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    v47 = 0;
    v48 = 0;
    *a1 = 0;
    a1[1] = 0;
    v49 = a1[3];
    if (v49)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v5, v4);
        v48 = *a1;
        v47 = a1[1];
      }
      else
      {
        v47 = 0;
        v48 = 0;
      }
    }
LABEL_82:
    *a1 = 0;
    a1[1] = 0;
    v10 = 0;
    v50 = a1[3];
    if (v50 && v47)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
    v9 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<double>>(a1, &v89);
    v11 = a1[1];
    v12 = *a1;
    v13 = a1[2] - *a1;
    if (v11 <= v13)
    {
      v51 = 0;
      v52 = 0;
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          v52 = *a1;
          v51 = a1[1];
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
      }
      goto LABEL_85;
    }
    v14 = (unsigned __int8 *)(v12 + v13);
    v15 = v12 + v13 + 1;
    a1[2] = v15;
    if (!v12)
    {
      v51 = v11;
      v52 = 0;
LABEL_85:
      *a1 = 0;
      a1[1] = 0;
      v54 = a1[3];
      if (v54 && v51)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
        v16 = 0;
        v12 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v16 = 0;
      }
      goto LABEL_87;
    }
    v16 = *v14;
    if (v16 < 2)
    {
      v17 = 0;
      v18 = 1;
      goto LABEL_12;
    }
LABEL_87:
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (!v55 || !v11)
    {
      v19 = 0;
      v56 = 0;
      v12 = 0;
      v17 = 1;
LABEL_89:
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (v57 && v56)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v12, v56);
        v23 = 0;
        v12 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v23 = 0;
      }
      goto LABEL_91;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v12);
    v18 = 0;
    v12 = *a1;
    v11 = a1[1];
    v17 = 1;
    v15 = a1[2];
LABEL_12:
    if (v16)
      v19 = v18;
    else
      v19 = 0;
    v20 = v15 - v12;
    if (v11 <= v20)
    {
      v56 = 0;
      v67 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v67 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v12 = *a1;
        v56 = a1[1];
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_89;
    }
    v21 = (unsigned __int8 *)(v12 + v20);
    v22 = v12 + v20 + 1;
    a1[2] = v22;
    if (!v12)
    {
      v56 = v11;
      goto LABEL_89;
    }
    v23 = *v21;
    if (v23 < 2)
    {
      v24 = 0;
      v25 = 1;
      goto LABEL_19;
    }
LABEL_91:
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (!v58 || !v11)
    {
      v26 = 0;
      v59 = 0;
      v12 = 0;
      v24 = 1;
LABEL_93:
      *a1 = 0;
      a1[1] = 0;
      v60 = a1[3];
      if (v60 && v59)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v12, v59);
        v29 = 0;
        v12 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v29 = 0;
      }
      goto LABEL_95;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v12);
    v25 = 0;
    v12 = *a1;
    v11 = a1[1];
    v24 = 1;
    v22 = a1[2];
LABEL_19:
    if (v23)
      v26 = v25;
    else
      v26 = 0;
    v27 = v22 - v12;
    if (v11 <= v27)
    {
      v59 = 0;
      v66 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v66 && v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        v12 = *a1;
        v59 = a1[1];
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_93;
    }
    v28 = (unsigned __int8 *)(v12 + v27);
    a1[2] = (uint64_t)(v28 + 1);
    if (!v12)
    {
      v59 = v11;
      goto LABEL_93;
    }
    v29 = *v28;
    if (v29 < 2)
    {
      v30 = 0;
      v31 = 1;
      goto LABEL_26;
    }
LABEL_95:
    *a1 = 0;
    a1[1] = 0;
    v61 = a1[3];
    if (v61 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v12);
    v31 = 0;
    v30 = 1;
LABEL_26:
    v32 = v29 ? v31 : 0;
    IPC::Decoder::decode<WTF::String>(a1, &v87);
    IPC::Decoder::decode<WTF::URL>(a1, &v83);
    IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v80, a1);
    v33 = a1[1];
    v34 = (char *)*a1;
    v35 = a1[2] - *a1;
    if (v33 <= v35)
      break;
    v36 = &v34[v35];
    a1[2] = (uint64_t)(v36 + 1);
    if (!v34)
    {
      v62 = v33;
      v63 = 0;
      goto LABEL_98;
    }
    v5 = *v36;
    if (v5 > 2)
      goto LABEL_99;
    v4 = v5 | 0x100;
LABEL_33:
    if (v98)
    {
      if (v96)
      {
        if (v94)
        {
          if (v92)
          {
            if (!v9)
            {
              if (v90)
              {
                if (!v17 && !v24 && !v30)
                {
                  if (v88)
                  {
                    if (v86)
                    {
                      if (v82)
                      {
                        v37 = v80;
                        v38 = v81;
                        v80 = 0;
                        v81 = 0;
                        if (v4 > 0xFF)
                        {
                          v39 = (uint64_t)v97;
                          v97 = 0;
                          v40 = (uint64_t)v95;
                          v95 = 0;
                          v68[0] = v39;
                          v68[1] = v40;
                          v41 = (uint64_t)v93;
                          v93 = 0;
                          v42 = (uint64_t)v91;
                          v91 = 0;
                          v68[2] = v41;
                          v68[3] = v42;
                          v68[4] = v10;
                          v69 = v89;
                          v70 = v19;
                          v71 = v26;
                          v72 = v32;
                          v43 = v87;
                          v87 = 0;
                          v44 = v83;
                          v83 = 0;
                          v73 = v43;
                          v74 = v44;
                          v75 = v84;
                          v76 = v85;
                          LODWORD(v84) = v84 & 0xFFFFFFFE;
                          v77 = v37;
                          v78 = v38;
                          v79 = v5;
                          WebCore::Cookie::Cookie((uint64_t)a2, v68);
                          a2[136] = 1;
                          WebCore::Cookie::~Cookie((WebCore::Cookie *)v68, v45);
                          goto LABEL_47;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  v62 = 0;
  v63 = 0;
  *a1 = 0;
  a1[1] = 0;
  v64 = a1[3];
  if (v64)
  {
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
      v63 = *a1;
      v62 = a1[1];
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
  }
LABEL_98:
  v33 = 0;
  v34 = 0;
  *a1 = 0;
  a1[1] = 0;
  v65 = a1[3];
  if (v65)
  {
    if (v62)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v62);
      v34 = (char *)*a1;
      v33 = a1[1];
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
  }
LABEL_99:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v33)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(_QWORD *)result + 16))(result, v34);
      if (*a1)
      {
        v5 = 0;
        v4 = 0;
        goto LABEL_33;
      }
    }
  }
  *a2 = 0;
  a2[136] = 0;
  if (!v82)
    goto LABEL_49;
LABEL_47:
  result = v80;
  if (v80)
    result = (WTF::StringImpl *)WTF::fastFree(v80, v34);
LABEL_49:
  if (v86)
  {
    result = v83;
    v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v88)
  {
    result = v87;
    v87 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v92)
  {
    result = v91;
    v91 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v94)
  {
    result = v93;
    v93 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v96)
  {
    result = v95;
    v95 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v98)
  {
    result = v97;
    v97 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196BD6B6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,WTF::StringImpl *a35,char a36)
{
  uint64_t v36;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  if (*(_BYTE *)(v36 - 152))
  {
    v38 = *(WTF::StringImpl **)(v36 - 160);
    *(_QWORD *)(v36 - 160) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, a2);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (*(_BYTE *)(v36 - 136))
  {
    v39 = *(WTF::StringImpl **)(v36 - 144);
    *(_QWORD *)(v36 - 144) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  if (*(_BYTE *)(v36 - 120))
  {
    v40 = *(WTF::StringImpl **)(v36 - 128);
    *(_QWORD *)(v36 - 128) = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, a2);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  if (*(_BYTE *)(v36 - 104))
  {
    v41 = *(WTF::StringImpl **)(v36 - 112);
    *(_QWORD *)(v36 - 112) = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, a2);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WTF::String>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::String,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (v15)
    {
      v16 = result;
      v18 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        result = v16;
        a2 = v18;
        v14 = *v16;
        v13 = v16[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(v3 + v4);
  v7 = v3 + v4 + 8;
  result[2] = v7;
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_22:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v13)
      goto LABEL_26;
    v17 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v14, v13);
LABEL_31:
    a2 = v17;
LABEL_26:
    v12 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_19;
  }
  v8 = *v6;
  if (v8)
  {
    v9 = v2 - (v7 - v3);
    if (v2 < v7 - v3 || v9 < v8)
    {
      *result = 0;
      result[1] = 0;
      result = (_QWORD *)result[3];
      if (!result || !v2)
        goto LABEL_26;
      v17 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      goto LABEL_31;
    }
    result[2] = v7 + v8;
    if (v9 != -1 && v8 == -1)
      goto LABEL_26;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  v12 = 1;
LABEL_19:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

uint64_t IPC::Decoder::decode<unsigned long long>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (v2)
      return *(_QWORD *)v5;
    v7 = v1;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v10 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v10;
        v8 = *v10;
        v7 = v10[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    return 0;
  }
  return result;
}

void IPC::Decoder::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, IPC::Decoder **a5@<X8>)
{
  uint64_t v10;
  IPC::Decoder *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __int16 v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = WTF::fastMalloc((WTF *)0x48);
    v11 = (IPC::Decoder *)v10;
    *(_QWORD *)v10 = a1;
    *(_QWORD *)(v10 + 8) = a2;
    *(_QWORD *)(v10 + 16) = a1;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 24) = v12;
    v13 = *a4;
    *a4 = 0;
    *(_QWORD *)(v10 + 32) = v13;
    LODWORD(v13) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(v10 + 40) = v13;
    LODWORD(v13) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(v10 + 44) = v13;
    *(_DWORD *)(v10 + 48) = 244908032;
    *(_QWORD *)(v10 + 56) = 0;
    v14 = *(_QWORD *)v10;
    if ((*(_QWORD *)v10 & 7) != 0)
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v29 = *(_QWORD *)(v10 + 24);
      if (!v29)
        goto LABEL_38;
LABEL_32:
      if (!a2)
        goto LABEL_18;
      goto LABEL_33;
    }
    if (a2 <= *(_QWORD *)(v10 + 16) - v14)
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v30 = *(_QWORD *)(v10 + 24);
      if (!v30)
        goto LABEL_38;
      if (!a2)
        goto LABEL_18;
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
      v14 = *(_QWORD *)v11;
      a2 = *((_QWORD *)v11 + 1);
    }
    else
    {
      v15 = *(unsigned __int8 **)(v10 + 16);
      v16 = v15 + 1;
      *(_QWORD *)(v10 + 16) = v15 + 1;
      if (v14)
      {
        v17 = *v15;
        if (v17 < 0x10)
        {
          *(_BYTE *)(v10 + 48) = v17;
          v18 = ((unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFFELL) - v14;
          if (a2 >= v18 && a2 - v18 > 1)
          {
            v20 = (unsigned __int16 *)(v14 + v18);
            v23 = *v20;
            v21 = v20 + 1;
            v22 = v23;
            *(_QWORD *)(v10 + 16) = v21;
            if (v23 < 0xE99)
            {
              *(_WORD *)(v10 + 50) = v22;
              v24 = (((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
              if (a2 >= v24 && a2 - v24 > 7)
              {
                v26 = (uint64_t *)(v14 + v24);
                v27 = *v26;
                *(_QWORD *)(v10 + 16) = v26 + 1;
                *(_QWORD *)(v10 + 64) = v27;
                goto LABEL_18;
              }
              *(_QWORD *)v10 = 0;
              *(_QWORD *)(v10 + 8) = 0;
              v34 = *(_QWORD *)(v10 + 24);
              if (!v34)
                goto LABEL_38;
              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
              v39 = *((_QWORD *)v11 + 1);
              v40 = *((_QWORD *)v11 + 3);
              *(_QWORD *)v11 = 0;
              *((_QWORD *)v11 + 1) = 0;
              if (!v40 || !v39)
                goto LABEL_38;
              v32 = *(void (**)(void))(*(_QWORD *)v40 + 16);
              goto LABEL_34;
            }
            goto LABEL_42;
          }
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          v33 = *(_QWORD *)(v10 + 24);
          if (v33
            && ((*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33),
                v36 = *(_QWORD *)v11,
                v37 = *((_QWORD *)v11 + 1),
                v38 = *((_QWORD *)v11 + 3),
                *(_QWORD *)v11 = 0,
                *((_QWORD *)v11 + 1) = 0,
                v38))
          {
            if (v37)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
              a2 = *((_QWORD *)v11 + 1);
LABEL_42:
              v29 = *((_QWORD *)v11 + 3);
              *(_QWORD *)v11 = 0;
              *((_QWORD *)v11 + 1) = 0;
              if (!v29 || !a2)
                goto LABEL_38;
LABEL_33:
              v32 = *(void (**)(void))(*(_QWORD *)v29 + 16);
LABEL_34:
              v32();
LABEL_18:
              if (*(_QWORD *)v11)
              {
                *a5 = v11;
                return;
              }
            }
          }
          else
          {
            *(_QWORD *)v11 = 0;
            *((_QWORD *)v11 + 1) = 0;
          }
LABEL_38:
          *a5 = 0;
          IPC::Decoder::~Decoder(v11);
          WTF::fastFree(v11, v35);
          return;
        }
        goto LABEL_31;
      }
    }
    v31 = *((_QWORD *)v11 + 3);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    if (!v31 || !a2)
      goto LABEL_38;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v14, a2);
    a2 = *((_QWORD *)v11 + 1);
LABEL_31:
    v29 = *((_QWORD *)v11 + 3);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    if (!v29)
      goto LABEL_38;
    goto LABEL_32;
  }
  v28 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v41 = 134217984;
    v42 = a2;
    _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "Decoder::create() called with a null buffer (buffer size: %lu)", (uint8_t *)&v41, 0xCu);
  }
  *a5 = 0;
}

uint64_t IPC::Decoder::decode<unsigned short>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _WORD *v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 >= v3 && v1 - v3 > 1)
  {
    v5 = (_WORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5 & 0xFF00;
      v7 = *v5;
      v8 = 0x10000;
      return v8 | v6 | v7;
    }
    v10 = v1;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return v8 | v6 | v7;
}

_QWORD *IPC::ArgumentCoder<WTF::String,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = result[1];
  v4 = *result;
  v5 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (!v19)
    {
LABEL_27:
      *result = 0;
      result[1] = 0;
      result = (_QWORD *)result[3];
      if (result && v17)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v18, v17);
LABEL_28:
      v13 = 0;
      *a2 = 0;
      goto LABEL_18;
    }
    v22 = result;
    if (v3)
    {
LABEL_39:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v4);
      result = v22;
      v18 = *v22;
      v17 = v22[1];
      goto LABEL_27;
    }
    goto LABEL_41;
  }
  v7 = (unsigned int *)(v4 + v5);
  v8 = v4 + v5 + 4;
  result[2] = v8;
  if (!v4)
    goto LABEL_40;
  v9 = *v7;
  if ((_DWORD)v9 == -1)
  {
    *(_QWORD *)a2 = 0;
    goto LABEL_17;
  }
  if (v3 <= v8 - v4)
  {
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v20 = result[3];
    if (!v20)
      goto LABEL_27;
    v22 = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v17 = 0;
      v4 = *v22;
      v21 = v22[1];
      v19 = v22[3];
      *v22 = 0;
      v22[1] = 0;
      v18 = 0;
      if (v19)
      {
        result = v22;
        if (!v21)
          goto LABEL_27;
        goto LABEL_39;
      }
LABEL_42:
      result = v22;
      goto LABEL_27;
    }
LABEL_41:
    v17 = 0;
    v18 = 0;
    goto LABEL_42;
  }
  v10 = (char *)v7 + 5;
  result[2] = (char *)v7 + 5;
  v11 = *((unsigned __int8 *)v7 + 4);
  if (v11 >= 2)
  {
LABEL_40:
    v17 = v3;
    v18 = v4;
    goto LABEL_27;
  }
  if (v11)
  {
    if (v3 < (unint64_t)&v10[-v4] || v3 - (unint64_t)&v10[-v4] < v9)
      goto LABEL_34;
    result[2] = &v10[v9];
    result = (_QWORD *)WTF::String::String();
  }
  else
  {
    v14 = ((unint64_t)(v10 + 1) & 0xFFFFFFFFFFFFFFFELL) - v4;
    v15 = 2 * v9;
    if (v3 < v14 || v3 - v14 < v15)
    {
LABEL_34:
      *result = 0;
      result[1] = 0;
      result = (_QWORD *)result[3];
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      goto LABEL_28;
    }
    result[2] = v4 + v14 + v15;
    result = (_QWORD *)WTF::String::String();
  }
LABEL_17:
  v13 = 1;
LABEL_18:
  a2[8] = v13;
  return result;
}

uint64_t IPC::Decoder::decode<unsigned int>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (_DWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5 & 0xFFFFFF00;
      v7 = *v5;
      v8 = 0x100000000;
      return v8 | v7 | v6;
    }
    v10 = v1;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return v8 | v7 | v6;
}

uint64_t IPC::Decoder::decode<BOOL>(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = (unsigned __int8 *)a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if ((unint64_t)v1 <= v3)
  {
    v4 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        a1 = v15;
        v9 = *v15;
        v4 = (unsigned __int8 *)v15[1];
      }
      else
      {
        v4 = 0;
        v9 = 0;
      }
    }
    goto LABEL_10;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v4 = v1;
    v9 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v11 + 16))(v11, v9, v4);
        LODWORD(v4) = 0;
        a1 = v14;
        v2 = *v14;
        v1 = (unsigned __int8 *)v14[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      LODWORD(v4) = 0;
    }
    goto LABEL_12;
  }
  LODWORD(v4) = *v4;
  if (v4 < 2)
  {
    v5 = 256;
    v6 = 1;
    goto LABEL_5;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    v13 = (int)v4;
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v2);
    v6 = 0;
    v5 = 0;
    LODWORD(v4) = v13;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
LABEL_5:
  if ((_DWORD)v4)
    v7 = v6;
  else
    v7 = 0;
  return v5 | v7;
}

_QWORD *IPC::Decoder::operator>><unsigned char>(_QWORD *result, _WORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _WORD *v13;
  _WORD *v14;

  v2 = result[1];
  v3 = *result;
  v4 = result[2] - *result;
  if (v2 <= v4)
  {
    v8 = 0;
    v9 = 0;
    *result = 0;
    result[1] = 0;
    v10 = result[3];
    if (v10)
    {
      v12 = result;
      v14 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v3, v2);
        result = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      a2 = v14;
    }
  }
  else
  {
    v5 = (unsigned __int8 *)(v3 + v4);
    result[2] = v5 + 1;
    if (v3)
    {
      v6 = *v5;
      LOWORD(v7) = 256;
      goto LABEL_4;
    }
    v8 = v2;
    v9 = 0;
  }
  *result = 0;
  result[1] = 0;
  v7 = result[3];
  if (v7)
  {
    v11 = result;
    v13 = a2;
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
    v6 = 0;
    LOWORD(v7) = 0;
    result = v11;
    a2 = v13;
  }
  else
  {
    v6 = 0;
  }
LABEL_4:
  *a2 = v7 | v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = result;
  v3 = a2[1];
  v4 = *a2;
  v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 < v5 || v3 - v5 <= 7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      v25 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v4);
        a2 = v25;
        v16 = *v25;
        v15 = v25[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v15)
    {
      v19 = a2;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
LABEL_36:
      a2 = v19;
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  v7 = (unint64_t *)(v4 + v5);
  v8 = v4 + v5 + 8;
  a2[2] = v8;
  if (!v4)
  {
    v15 = v3;
    v16 = 0;
    goto LABEL_20;
  }
  v9 = *v7;
  if (!*v7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
LABEL_17:
    *(_BYTE *)(v2 + 16) = 1;
    return result;
  }
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_24;
  v10 = ((v8 + 1) & 0xFFFFFFFFFFFFFFFELL) - v4;
  v11 = 2 * v9;
  if (v3 >= v10 && v3 - v10 >= v11)
  {
    v13 = (__int16 *)(v4 + v10);
    a2[2] = v4 + v10 + v11;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = v9;
    if (v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x196BD7A38);
    }
    result = WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v2 + 8) = v9;
    *(_QWORD *)v2 = result;
    do
    {
      v14 = *v13++;
      *(_WORD *)result = v14;
      result += 2;
      v11 -= 2;
    }
    while (v11);
    goto LABEL_17;
  }
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20 && v3)
  {
    v19 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v4);
    goto LABEL_36;
  }
LABEL_24:
  v22 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    v24 = a2;
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
      a2 = v24;
      v23 = *v24;
      v21 = v24[1];
      result = v24[3];
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v21 = 0;
    v23 = 0;
  }
  *(_BYTE *)v2 = 0;
  *(_BYTE *)(v2 + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v21)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::optional<double>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<double>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<double>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;

  v2 = result[1];
  v3 = *result;
  v4 = result[2] - *result;
  if (v2 <= v4)
  {
    v13 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (v15)
    {
      v22 = result;
      v25 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        result = v22;
        a2 = v25;
        v14 = *v22;
        v13 = v22[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_14;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  v6 = v3 + v4 + 1;
  result[2] = v6;
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_14:
    v2 = 0;
    v3 = 0;
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (v16)
    {
      v21 = result;
      v24 = a2;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        result = v21;
        a2 = v24;
        v3 = *v21;
        v2 = v21[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_15;
  }
  v7 = *v5;
  if (v7 >= 2)
  {
LABEL_15:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v2)
      goto LABEL_20;
    v23 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v3);
    goto LABEL_18;
  }
  if (v7)
  {
    v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v8 || v2 - v8 <= 7)
    {
      *result = 0;
      result[1] = 0;
      v17 = result[3];
      if (!v17)
        goto LABEL_20;
      v18 = result;
      v23 = a2;
      (*(void (**)(_QWORD))(*(_QWORD *)v17 + 16))(result[3]);
      a2 = v23;
      v19 = *v18;
      v20 = v18[1];
      result = (_QWORD *)v18[3];
      *v18 = 0;
      v18[1] = 0;
      if (!result || !v20)
        goto LABEL_20;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v19);
LABEL_18:
      a2 = v23;
LABEL_20:
      v12 = 0;
      *a2 = 0;
      goto LABEL_11;
    }
    v10 = (uint64_t *)(v3 + v8);
    v11 = *v10;
    result[2] = v10 + 1;
    *(_QWORD *)a2 = v11;
    v12 = 1;
    a2[8] = 1;
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
    v12 = 1;
  }
LABEL_11:
  a2[16] = v12;
  return result;
}

uint64_t WebCore::Cookie::Cookie(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)((char *)a2 + 43);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v9;
  WTF::URL::URL(a1 + 72, a2 + 9);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v10 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  return a1;
}

void sub_196BD7D18(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = v2[8];
  v2[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[3];
  v2[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v2[2];
  v2[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[1];
  v2[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196BD7EA4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  const void *v13;
  void *v15;

  if (v13)
    CFRelease(v13);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, const WebCore::Cookie *a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x1E1E1E2)
  {
    v5 = 136 * a3;
    v6 = WTF::fastMalloc((WTF *)(136 * a3));
    *((_DWORD *)v3 + 2) = v5 / 0x88;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      WebCore::Cookie::Cookie((WebCore::Cookie *)(*v3 + 136 * v7), a2);
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 = (const WebCore::Cookie *)((char *)a2 + 136);
      v5 -= 136;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_196BD7F8C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if ((v3 & 0x80000000) == 0)
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(2 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 2 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t API::HTTPCookieStore::filterAppBoundCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *a2;
    *a2 = 0;
    v6 = *a3;
    *a3 = 0;
    v7 = a2[1];
    a2[1] = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = off_1E34D9DD0;
    v8[1] = v5;
    v12 = 0;
    v13 = 0;
    v8[2] = v7;
    v8[3] = v6;
    v15 = v8;
    WebKit::WebsiteDataStore::getAppBoundDomains(v4, (uint64_t *)&v15);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v14 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v9);
}

uint64_t WebKit::WebsiteDataStore::getAppBoundDomains(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34CCE18;
  v4[1] = v3;
  v6 = v4;
  WebKit::WebsiteDataStore::ensureAppBoundDomains(a1, (uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_196BD8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::ensureAppBoundDomains(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  v4 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v4 & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 480))
      WebKit::WebsiteDataStore::addTestDomains((WebCore *)a1);
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    if ((byte_1ECE72BD4 & 1) == 0)
    {
      qword_1ECE72C18 = 0;
      byte_1ECE72BD4 = 1;
    }
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &WebKit::appBoundDomains(void)::appBoundDomains, &qword_1ECE72C18);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v5 = WebKit::appBoundDomainQueue((WebKit *)a1);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E34CCDA0;
    v7[1] = a1;
    v7[2] = a1;
    v7[3] = v6;
    v10 = v7;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v10);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196BD82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34D9DD0;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RegistrableDomain *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  if (*a2 && *(_DWORD *)(*a2 - 12) && (WebKit::isFullWebBrowserOrRunningTest((WebKit *)a1) & 1) == 0)
  {
    v8 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = 136 * v8;
    while (1)
    {
      v12 = (WebCore::RegistrableDomain *)(v10 + v9 + 16);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v12, &v25);
      v14 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a2, &v25);
      v15 = v25;
      v25 = 0;
      if (!v15)
        goto LABEL_11;
      if (*(_DWORD *)v15 != 2)
        break;
      WTF::StringImpl::destroy(v15, v13);
      if (v14)
      {
LABEL_14:
        if (HIDWORD(v27) == (_DWORD)v27)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v26, v10 + v9);
        }
        else
        {
          v16 = v26 + 136 * HIDWORD(v27);
          v17 = v10 + v9;
          v18 = *(_QWORD *)(v10 + v9);
          *(_QWORD *)v17 = 0;
          *(_QWORD *)v16 = v18;
          v19 = *(_QWORD *)(v10 + v9 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v16 + 8) = v19;
          v20 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v16 + 16) = v20;
          v21 = *(_QWORD *)(v10 + v9 + 24);
          *(_QWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v16 + 24) = v21;
          v22 = *(_OWORD *)(v10 + v9 + 32);
          *(_OWORD *)(v16 + 43) = *(_OWORD *)(v10 + v9 + 43);
          *(_OWORD *)(v16 + 32) = v22;
          v23 = *(_QWORD *)(v10 + v9 + 64);
          *(_QWORD *)(v17 + 64) = 0;
          *(_QWORD *)(v16 + 64) = v23;
          WTF::URL::URL(v16 + 72, (uint64_t *)(v10 + v9 + 72));
          *(_QWORD *)(v16 + 112) = 0;
          *(_QWORD *)(v16 + 120) = 0;
          v24 = *(_QWORD *)(v10 + v9 + 112);
          *(_QWORD *)(v17 + 112) = 0;
          *(_QWORD *)(v16 + 112) = v24;
          LODWORD(v24) = *(_DWORD *)(v10 + v9 + 120);
          *(_DWORD *)(v17 + 120) = 0;
          *(_DWORD *)(v16 + 120) = v24;
          LODWORD(v24) = *(_DWORD *)(v10 + v9 + 124);
          *(_DWORD *)(v17 + 124) = 0;
          *(_DWORD *)(v16 + 124) = v24;
          *(_BYTE *)(v16 + 128) = *(_BYTE *)(v10 + v9 + 128);
          ++HIDWORD(v27);
        }
      }
LABEL_17:
      v9 += 136;
      if (v11 == v9)
        goto LABEL_5;
    }
    *(_DWORD *)v15 -= 2;
LABEL_11:
    if (v14)
      goto LABEL_14;
    goto LABEL_17;
  }
  v26 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v27 = v4;
LABEL_5:
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v6);
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::WebCookieManager::SetCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****), uint64_t a5)
{
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unsigned __int8 **v14;
  unint64_t v15;
  void *v16;
  unsigned __int8 ***v17;
  unsigned __int8 **v18;
  unsigned __int8 ***result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 ***v24;
  unint64_t v25;
  _QWORD v26[2];
  char v27;
  unint64_t v28;
  unsigned __int8 **v29;
  char v30;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if ((_BYTE)v11
    && (v12 = v10,
        IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v11, (uint64_t)&v28), v30))
  {
    v25 = v12;
    v26[0] = v28;
    v14 = v29;
    v28 = 0;
    v29 = 0;
    v26[1] = v14;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v13);
    v27 = 1;
    v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v16)
      return (unsigned __int8 ***)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v16);
    v28 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a1);
    v17 = (unsigned __int8 ***)WTF::fastMalloc((WTF *)0x18);
    *v17 = (unsigned __int8 **)off_1E34F4630;
    v17[1] = (unsigned __int8 **)v28;
    v18 = v29;
    v29 = 0;
    v17[2] = v18;
    v24 = v17;
    result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
    if (v27)
    {
      v20 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****))(*v20 + a4);
      a4(v20, v25, v26, &v24);
      result = v24;
      v24 = 0;
      if (result)
        result = (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***))(*result)[1])(result);
      if (v27)
        return (unsigned __int8 ***)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v16);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (unsigned __int8 ***)a2[3];
    if (result)
      v23 = v22 == 0;
    else
      v23 = 1;
    if (!v23)
      return (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***, uint64_t))(*result)[2])(result, v21);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Cookie *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::Cookie **)a1;
    v5 = 136 * v3;
    do
    {
      WebCore::Cookie::~Cookie(v4, a2);
      v4 = (WebCore::Cookie *)(v6 + 136);
      v5 -= 136;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebCore::Cookie::~Cookie(WebCore::Cookie *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

unint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<PAL::SessionID,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<PAL::SessionID,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (_QWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (!v2)
      goto LABEL_20;
    if ((unint64_t)(*v5 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_15:
      v7 = 0;
LABEL_16:
      v6 = 0;
    }
    else
    {
      v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      v7 = *v5;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    while (1)
    {
      v7 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v12 = a1[3];
      if (!v12)
        break;
      v13 = a1;
      if (!v9)
        goto LABEL_15;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      v2 = *v13;
      if (!*v13)
      {
        v7 = 0;
        goto LABEL_16;
      }
      __break(1u);
LABEL_20:
      v9 = v1;
      v10 = v2;
    }
  }
  return v6 | v7;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41[5];
  uint64_t v42;
  int v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v6, v5);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v47 = 0;
    v48 = 0;
    if (v10 >> 1 >= 0xF0F)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::Cookie>(a1, &v35);
        if (!v46)
          break;
        if (HIDWORD(v48) == (_DWORD)v48)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v47, (unint64_t)&v35);
        }
        else
        {
          v26 = v47 + 136 * HIDWORD(v48);
          v27 = v35;
          v35 = 0;
          *(_QWORD *)v26 = v27;
          v28 = v36;
          v36 = 0;
          *(_QWORD *)(v26 + 8) = v28;
          v29 = v37;
          v37 = 0;
          *(_QWORD *)(v26 + 16) = v29;
          v30 = v38;
          v38 = 0;
          *(_QWORD *)(v26 + 24) = v30;
          v31 = v39[0];
          *(_OWORD *)(v26 + 43) = *(_OWORD *)((char *)v39 + 11);
          *(_OWORD *)(v26 + 32) = v31;
          v32 = v40;
          v40 = 0;
          *(_QWORD *)(v26 + 64) = v32;
          WTF::URL::URL(v26 + 72, v41);
          *(_QWORD *)(v26 + 112) = 0;
          *(_QWORD *)(v26 + 120) = 0;
          v33 = v42;
          v42 = 0;
          *(_QWORD *)(v26 + 112) = v33;
          LODWORD(v33) = v43;
          v43 = 0;
          *(_DWORD *)(v26 + 120) = v33;
          LODWORD(v33) = v44;
          v44 = 0;
          *(_DWORD *)(v26 + 124) = v33;
          *(_BYTE *)(v26 + 128) = v45;
          ++HIDWORD(v48);
        }
        if (v46)
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v35, v25);
        if (!--v10)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v47, HIDWORD(v48));
          *(_QWORD *)a3 = v47;
          v34 = v48;
          v47 = 0;
          v48 = 0;
          *(_QWORD *)(a3 + 8) = v34;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v19 = 0;
        v20 = 0;
LABEL_19:
        v47 = 0;
        v48 = 0;
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v20;
LABEL_20:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
      }
      LODWORD(v48) = 136 * (int)v10 / 0x88u;
      v47 = WTF::fastMalloc((WTF *)(136 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::Cookie>(a1, &v35);
        if (!v46)
          break;
        if (HIDWORD(v48) == (_DWORD)v48)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v47, (unint64_t)&v35);
        }
        else
        {
          v11 = v47 + 136 * HIDWORD(v48);
          v12 = v35;
          v35 = 0;
          *(_QWORD *)v11 = v12;
          v13 = v36;
          v36 = 0;
          *(_QWORD *)(v11 + 8) = v13;
          v14 = v37;
          v37 = 0;
          *(_QWORD *)(v11 + 16) = v14;
          v15 = v38;
          v38 = 0;
          *(_QWORD *)(v11 + 24) = v15;
          v16 = v39[0];
          *(_OWORD *)(v11 + 43) = *(_OWORD *)((char *)v39 + 11);
          *(_OWORD *)(v11 + 32) = v16;
          v17 = v40;
          v40 = 0;
          *(_QWORD *)(v11 + 64) = v17;
          WTF::URL::URL(v11 + 72, v41);
          *(_QWORD *)(v11 + 112) = 0;
          *(_QWORD *)(v11 + 120) = 0;
          v18 = v42;
          v42 = 0;
          *(_QWORD *)(v11 + 112) = v18;
          LODWORD(v18) = v43;
          v43 = 0;
          *(_DWORD *)(v11 + 120) = v18;
          LODWORD(v18) = v44;
          v44 = 0;
          *(_DWORD *)(v11 + 124) = v18;
          *(_BYTE *)(v11 + 128) = v45;
          ++HIDWORD(v48);
        }
        if (v46)
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v35, a2);
        if (!--v10)
        {
          v19 = v47;
          v20 = v48;
          goto LABEL_19;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
  }
  v21 = v5;
  v22 = 0;
LABEL_22:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v21)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::Cookie>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Cookie,void>::decode(a1, a2);
  if (!a2[136])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BD8E28(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::Cookie *v2;

  if (*((_BYTE *)v2 + 136))
    WebCore::Cookie::~Cookie(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t API::HTTPCookieStore::setCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v6 = *a3;
  *a3 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34D9E48;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v6;
  v9 = v7;
  API::HTTPCookieStore::filterAppBoundCookies(a1, a2, (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::WebCookieManager::setCookie(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v7 = (unsigned int *)(v6 + 120);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v18 = a2;
  v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 216), &v18);
  v10 = v9;
  if (!v6)
    goto LABEL_6;
  do
  {
    v11 = __ldaxr(v7);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v7));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v6 + 120));
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v10)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v9)
      goto LABEL_10;
  }
  v13 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v13)
  {
    v14 = *a3;
    v15 = 136 * v13;
    do
    {
      WebCore::NetworkStorageSession::setCookie();
      v14 += 136;
      v15 -= 136;
    }
    while (v15);
  }
LABEL_10:
  v16 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

uint64_t WebKit::NetworkProcess::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 120);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebKit::NetworkProcess::deref(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = this + 30;
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, this + 30);
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2 + ~(*a2 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
      return *(_QWORD *)(v2 + 16 * v7 + 8);
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v10;
      if (v8 == *a2)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3165;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebCore::ResourceRequestBase::ResourceRequestBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  return a1;
}

void sub_196BD9248(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::URL>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::URL,void>::decode(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BD92CC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::URL,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  WTF::StringImpl *v7;
  char v8;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x19AEABB0C](v6, &v7, 0);
    WTF::URL::URL((uint64_t)a2, (uint64_t *)v6);
    a2[40] = 1;
    result = v6[0];
    v6[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196BD93A4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v10 - 32, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (int *)(v2 + 16 * v8);
      v10 = *v9;
      v11 = *((unsigned __int8 *)v9 + 4);
      if (*v9)
        v12 = 1;
      else
        v12 = v11 == 0;
      if (v12)
      {
        if (v10)
          v13 = 0;
        else
          v13 = v11 == 0;
        if (v13 && !*((_BYTE *)v9 + 5))
        {
          v14 = *(_QWORD *)(v2 + 16 * v8 + 8);
          if ((v14 & 0x8000000000000) == 0)
            goto LABEL_38;
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (v17)
            goto LABEL_38;
          goto LABEL_23;
        }
      }
      else if (*((_BYTE *)v9 + 5))
      {
        goto LABEL_38;
      }
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 8);
      else
        v19 = 0;
      for (i = 0; ; v10 = i + v21)
      {
        v21 = v10 & v19;
        v22 = v18 + 16 * v21;
        v23 = !*(_DWORD *)v22 && *(_BYTE *)(v22 + 4) == 0;
        if (v23 && !*(_BYTE *)(v22 + 5))
          break;
        ++i;
      }
      v24 = *(_QWORD *)(v18 + 16 * v21 + 8);
      if ((v24 & 0x8000000000000) != 0)
      {
        v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v7);
        }
      }
      *(_QWORD *)v22 = *(_QWORD *)v9;
      WebCore::Color::Color();
      v25 = *(_QWORD *)(v2 + 16 * v8 + 8);
      if ((v25 & 0x8000000000000) == 0)
        goto LABEL_38;
      v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      do
      {
        v29 = __ldaxr(v15);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v15));
      if (v30)
        goto LABEL_38;
LABEL_23:
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v7);
LABEL_38:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t WebCore::GraphicsContext::performingPaintInvalidation(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::tiledBacking(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::appliesPageScale(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 11) & 1;
}

float WebKit::PlatformCALayerRemote::bounds(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 110);
}

uint64_t `non-virtual thunk to'WebKit::PageClientImpl::isFullScreen(id *this)
{
  return WebKit::PageClientImpl::isFullScreen(this - 4);
}

void WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  WebCore::HTTPHeaderMap::UncommonHeader *v3;
  WebCore::HTTPHeaderMap::UncommonHeader *v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity(uint64_t a1)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  WebCore::ExceptionData *v3;
  WebCore::ExceptionData *v4;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = (WebCore::ExceptionData *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v4 = (WebCore::ExceptionData *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WebKit::WebProcessCreationParameters::~WebProcessCreationParameters(WebKit::WebProcessCreationParameters *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const void *v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  v3 = (WTF *)*((_QWORD *)this + 103);
  if (v3)
  {
    *((_QWORD *)this + 103) = 0;
    *((_DWORD *)this + 208) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 101);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl *)a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 100);
  if (v5)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 90);
  if ((v9 & 0x8000000000000) != 0)
  {
    v45 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, a2);
    }
  }
  v10 = *((_QWORD *)this + 89);
  if (v10)
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v10, a2);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 688, a2);
  if (*((_BYTE *)this + 672))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 83);
  if (*((_BYTE *)this + 656))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 81);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 632, v11);
  if (*((_BYTE *)this + 624))
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)this + 59);
  v13 = *((_QWORD *)this + 57);
  if (v13)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v13, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 432, v12);
  v15 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (WTF::StringImpl **)*((_QWORD *)this + 52);
  if (v16)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v14);
  v17 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 49);
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::MachSendRight::~MachSendRight((WebKit::WebProcessCreationParameters *)((char *)this + 380));
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 296, v20);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 248, v25);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v27);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, v28);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 184, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 168, v30);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v31);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v32);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v33);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v34);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v35);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v36);
  v38 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v38)
    CFRelease(*(CFTypeRef *)(v38 + 8));
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v37);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 5);
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)this + 3, 0);
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v41);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v41);
    else
      *(_DWORD *)v44 -= 2;
  }
}

uint64_t WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  const char ***v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(const char ****)a1;
    v7 = 8 * v3;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::ArgumentCoder<WebCore::ResourceRequest,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int16 v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  char v42;
  unint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  char v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  int v78;
  int v79;
  char v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  void *v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  void *v107;
  char v108;
  int v109;
  unint64_t v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  int v115;
  int v116;
  WTF::StringImpl *v117;
  void *v118;
  CFTypeRef v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unsigned int v125;
  unsigned __int16 v126;
  unsigned int v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  int v137;
  unint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  unsigned __int8 *v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int16 v239;
  int v240;
  int v241;
  unsigned __int16 v242;
  int v243;
  char v244;
  int v245;
  int v246;
  unsigned __int16 v247;
  char v248;
  int v249;
  int v250;
  unsigned __int16 v251;
  unsigned __int16 v252;
  int v253;
  int v254;
  unsigned __int16 v255;
  int v256;
  int v257;
  unsigned __int16 v258;
  int v259;
  unsigned __int16 v260;
  int v261;
  char v262;
  int v263;
  int v264;
  unsigned __int16 v265;
  uint64_t *v266;
  int v267;
  int v268;
  char v269;
  int v270;
  unsigned __int16 v271;
  uint64_t v272;
  int v273;
  char v274;
  int v275;
  int v276;
  unsigned __int16 v277;
  unsigned __int16 v278;
  char v279;
  int v280;
  int v281;
  unsigned __int16 v282;
  int v283;
  int v284;
  unsigned __int16 v285;
  char v286;
  int v287;
  unsigned __int16 v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unsigned __int16 v292;
  uint64_t v293;
  char v294;
  int v295;
  int v296;
  unsigned __int16 v297;
  uint64_t v298;
  int v299;
  char v300;
  int v301;
  int v302;
  unsigned __int16 v303;
  uint64_t v304;
  int v305;
  char v306;
  int v307;
  int v308;
  unsigned __int16 v309;
  uint64_t v310;
  int v311;
  char v312;
  int v313;
  int v314;
  unsigned __int16 v315;
  uint64_t v316;
  int v317;
  int v318;
  unsigned __int16 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  char v331;
  char v332;
  char v333;
  char v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  uint64_t v387;
  CFTypeRef cf;
  __int128 v389;
  __int128 v390;
  WTF::StringImpl *v391;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  char v402;
  char v403;
  uint64_t v404;
  _BYTE v405[16];
  unsigned __int8 v406;
  _BYTE v407[16];
  uint64_t v408;
  unsigned __int8 v409;
  WTF::StringImpl *v410;
  unsigned __int8 v411;
  WTF::StringImpl *v412;
  __int128 v413;
  __int128 v414;
  unsigned __int8 v415;
  WTF::StringImpl *v416;
  __int128 v417;
  __int128 v418;
  unsigned __int8 v419;
  _BYTE v420[121];
  int v421;
  _QWORD v422[19];
  int v423;
  unsigned __int8 v424;
  WTF::StringImpl *v425;
  __int128 v426;
  __int128 v427;
  WTF::StringImpl *v428;
  __int128 v429;
  __int128 v430;
  uint64_t v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  char v439;
  uint64_t v440;

  v2 = a1;
  v440 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_221;
  v7 = (_BYTE *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v160 = v4;
    v161 = 0;
    goto LABEL_222;
  }
  if (*v7 >= 2u)
    goto LABEL_223;
  v387 = a2;
  if (*v7)
  {
    v425 = (WTF::StringImpl *)objc_opt_class();
    *(_QWORD *)&v426 = objc_opt_class();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v416, (uint64_t *)&v425, 2);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(v2 + 7, (_QWORD **)&v416);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLRequest>(v2, &cf);
    v385 = v389;
    if ((_BYTE)v389)
    {
      v119 = cf;
      if (cf)
      {
        CFRetain(cf);
        CFRelease(v119);
      }
    }
    else
    {
      v119 = 0;
    }
    if (v416)
      WTF::fastFree((WTF::StringImpl *)((char *)v416 - 16), v118);
    v120 = IPC::Decoder::decode<std::optional<BOOL>>(v2);
    v121 = v2[1];
    v122 = *v2;
    v123 = v2[2] - *v2;
    if (v121 <= v123)
    {
      v212 = 0;
      v213 = 0;
      *v2 = 0;
      v2[1] = 0;
      v214 = v2;
      v215 = v2[3];
      if (v215)
      {
        if (v121)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v215 + 16))(v215);
          v213 = *v2;
          v212 = v2[1];
        }
        else
        {
          v212 = 0;
          v213 = 0;
        }
      }
    }
    else
    {
      v124 = (unsigned __int8 *)(v122 + v123);
      v2[2] = (uint64_t)(v124 + 1);
      if (v122)
      {
        v125 = *v124;
        if (v125 < 2)
        {
          if (v125)
          {
            v126 = IPC::Decoder::decode<WebCore::ResourceRequestRequester>(v2);
            v127 = (v126 > 0xFFu) << 16;
            if ((v126 & 0xFF00) != 0)
              v128 = v126;
            else
              v128 = 0;
            v129 = 256;
          }
          else
          {
            v128 = 0;
            v129 = 0;
            v127 = 0x10000;
          }
          goto LABEL_179;
        }
LABEL_281:
        *v2 = 0;
        v2[1] = 0;
        v217 = v2[3];
        if (v217 && v121)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v217 + 16))(v217, v122);
        v127 = 0;
        v128 = 0;
        v129 = 0;
LABEL_179:
        v130 = v2[1];
        if (!HIWORD(v127))
        {
          v381 = v129;
          v383 = v128;
          v218 = 0;
          v219 = 0;
          v220 = *v2;
          *v2 = 0;
          v2[1] = 0;
          v221 = v2;
          v222 = v2[3];
          if (!v222)
            goto LABEL_284;
          if (!v130)
          {
            v218 = 0;
            v219 = 0;
            goto LABEL_284;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v220);
          v130 = v2[1];
          v129 = v381;
          v128 = v383;
        }
        v131 = *v2;
        v132 = v2[2] - *v2;
        if (v130 <= v132)
        {
          v381 = v129;
          v383 = v128;
          v218 = 0;
          v321 = v2[3];
          *v2 = 0;
          v2[1] = 0;
          v221 = v2;
          v219 = 0;
          if (v130 && v321)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v321 + 16))(v321);
            v219 = *v2;
            v218 = v2[1];
          }
        }
        else
        {
          v133 = (unsigned __int8 *)(v131 + v132);
          v134 = v131 + v132 + 1;
          v2[2] = v134;
          if (v131)
          {
            v135 = *v133;
            if (v135 < 2)
            {
              a2 = 0;
              v136 = 1;
              goto LABEL_184;
            }
            v381 = v129;
            v383 = v128;
LABEL_286:
            *v2 = 0;
            v2[1] = 0;
            v224 = v2;
            v225 = v2[3];
            if (!v225 || !v130)
            {
              v137 = 0;
              v226 = 0;
              v131 = 0;
              a2 = 1;
              goto LABEL_288;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v225 + 16))(v225, v131);
            v136 = 0;
            v131 = *v2;
            v130 = v2[1];
            a2 = 1;
            v134 = v2[2];
            v129 = v381;
            v128 = v383;
LABEL_184:
            if (v135)
              v137 = v136;
            else
              v137 = 0;
            v138 = v134 - v131;
            if (v130 <= v138)
            {
              v381 = v129;
              v383 = v128;
              v226 = 0;
              v324 = v2[3];
              *v2 = 0;
              v2[1] = 0;
              v224 = v2;
              if (v130 && v324)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v324 + 16))(v324);
                v131 = *v2;
                v226 = v2[1];
              }
              else
              {
                v131 = 0;
              }
            }
            else
            {
              v139 = (unsigned __int8 *)(v131 + v138);
              v140 = v131 + v138 + 1;
              v2[2] = v140;
              if (v131)
              {
                v141 = *v139;
                if (v141 < 2)
                {
                  v142 = 0;
                  v143 = 1;
                  goto LABEL_191;
                }
                v381 = v129;
                v383 = v128;
LABEL_290:
                *v2 = 0;
                v2[1] = 0;
                v228 = v2;
                v229 = v2[3];
                if (!v229 || !v130)
                {
                  v144 = 0;
                  v230 = 0;
                  v131 = 0;
                  v142 = 1;
                  goto LABEL_292;
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v229 + 16))(v229, v131);
                v143 = 0;
                v131 = *v2;
                v130 = v2[1];
                v142 = 1;
                v140 = v2[2];
                v129 = v381;
                v128 = v383;
LABEL_191:
                if (v141)
                  v144 = v143;
                else
                  v144 = 0;
                v145 = v140 - v131;
                if (v130 <= v145)
                {
                  v381 = v129;
                  v383 = v128;
                  v230 = 0;
                  v323 = v2[3];
                  *v2 = 0;
                  v2[1] = 0;
                  v228 = v2;
                  if (v130 && v323)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 16))(v323);
                    v131 = *v2;
                    v230 = v2[1];
                  }
                  else
                  {
                    v131 = 0;
                  }
                }
                else
                {
                  v146 = (unsigned __int8 *)(v131 + v145);
                  v147 = v131 + v145 + 1;
                  v2[2] = v147;
                  if (v131)
                  {
                    v148 = *v146;
                    if (v148 < 2)
                    {
                      v149 = 0;
                      v150 = 1;
                      goto LABEL_198;
                    }
                    v381 = v129;
                    v383 = v128;
LABEL_294:
                    *v2 = 0;
                    v2[1] = 0;
                    v232 = v2[3];
                    if (!v232 || !v130)
                    {
                      v151 = 0;
                      v233 = 0;
                      v131 = 0;
                      v149 = 1;
                      goto LABEL_296;
                    }
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v232 + 16))(v232, v131);
                    v150 = 0;
                    v2 = a1;
                    v131 = *a1;
                    v130 = a1[1];
                    v149 = 1;
                    v147 = a1[2];
                    v129 = v381;
                    v128 = v383;
LABEL_198:
                    if (v148)
                      v151 = v150;
                    else
                      v151 = 0;
                    v152 = v147 - v131;
                    if (v130 <= v152)
                    {
                      v381 = v129;
                      v383 = v128;
                      v233 = 0;
                      v322 = v2[3];
                      *v2 = 0;
                      v2[1] = 0;
                      if (v130 && v322)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v322 + 16))(v322);
                        v131 = *a1;
                        v233 = a1[1];
                      }
                      else
                      {
                        v131 = 0;
                      }
                    }
                    else
                    {
                      v153 = (unsigned __int8 *)(v131 + v152);
                      v2[2] = (uint64_t)(v153 + 1);
                      if (v131)
                      {
                        v154 = *v153;
                        if (v154 <= 1)
                        {
                          v4 = 0;
                          v5 = (unint64_t)(v154 != 0) << 56;
                          goto LABEL_205;
                        }
                        v381 = v129;
                        v383 = v128;
LABEL_298:
                        v235 = 0;
                        *v2 = 0;
                        v2[1] = 0;
                        v236 = v2[3];
                        if (v236)
                        {
                          if (v130)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, v131);
                            v235 = *v2;
                            if (*v2)
                            {
                              v5 = 0;
                              v4 = 1;
                              v129 = v381;
                              v128 = v383;
LABEL_205:
                              if (!v385)
                                goto LABEL_220;
                              if ((v120 & 0xFF0000) == 0)
                                goto LABEL_220;
                              v155 = v128 | v127 | v129;
                              if (!HIWORD(v155) || (_DWORD)a2 || v142 || v149 || (_DWORD)v4)
                                goto LABEL_220;
                              v156 = 0x100000000;
                              if (!v137)
                                v156 = 0;
                              v157 = (unsigned __int16)v120 | ((unsigned __int16)v155 << 16);
                              v158 = 0x10000000000;
                              if (!v144)
                                v158 = 0;
                              v159 = 0x1000000000000;
                              if (!v151)
                                v159 = 0;
                              v422[0] = v119;
                              v422[1] = v5 | v158 | v156 | v159 | v157;
                              v109 = 1;
                              v423 = 1;
                              goto LABEL_219;
                            }
                          }
                          else
                          {
                            v235 = 0;
                          }
                        }
                        if (v385 && v119)
                        {
                          CFRelease(v119);
                          v235 = *v2;
                        }
                        v237 = v2[1];
                        *v2 = 0;
                        v2[1] = 0;
                        v238 = v2[3];
                        if (v238 && v237)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v238 + 16))(v238, v235);
                        v109 = 0;
                        LOBYTE(v422[0]) = 0;
LABEL_219:
                        v424 = v109;
                        a2 = v387;
                        goto LABEL_138;
                      }
                      v381 = v129;
                      v383 = v128;
                      v233 = v130;
                    }
LABEL_296:
                    *a1 = 0;
                    a1[1] = 0;
                    v2 = a1;
                    v234 = a1[3];
                    if (v234 && v233)
                    {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v234 + 16))(v234, v131, v233);
                      v131 = *a1;
                      v130 = a1[1];
                    }
                    else
                    {
                      v130 = 0;
                      v131 = 0;
                    }
                    goto LABEL_298;
                  }
                  v381 = v129;
                  v383 = v128;
                  v228 = v2;
                  v230 = v130;
                }
LABEL_292:
                *v228 = 0;
                v228[1] = 0;
                v2 = v228;
                v231 = v228[3];
                if (v231 && v230)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v231 + 16))(v231, v131, v230);
                  v148 = 0;
                  v131 = *v228;
                  v130 = v228[1];
                }
                else
                {
                  v130 = 0;
                  v131 = 0;
                  v148 = 0;
                }
                goto LABEL_294;
              }
              v381 = v129;
              v383 = v128;
              v224 = v2;
              v226 = v130;
            }
LABEL_288:
            *v224 = 0;
            v224[1] = 0;
            v2 = v224;
            v227 = v224[3];
            if (v227 && v226)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v227 + 16))(v227, v131, v226);
              v141 = 0;
              v131 = *v224;
              v130 = v224[1];
            }
            else
            {
              v130 = 0;
              v131 = 0;
              v141 = 0;
            }
            goto LABEL_290;
          }
          v381 = v129;
          v383 = v128;
          v221 = v2;
          v218 = v130;
          v219 = 0;
        }
LABEL_284:
        *v221 = 0;
        v221[1] = 0;
        v2 = v221;
        v223 = v221[3];
        if (v223 && v218)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223 + 16))(v223, v219, v218);
          v135 = 0;
          v131 = *v2;
          v130 = v2[1];
        }
        else
        {
          v130 = 0;
          v131 = 0;
          v135 = 0;
        }
        goto LABEL_286;
      }
      v214 = v2;
      v212 = v121;
      v213 = 0;
    }
    v121 = 0;
    v122 = 0;
    *v214 = 0;
    v214[1] = 0;
    v2 = v214;
    v216 = v214[3];
    if (v216)
    {
      if (v212)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(v216, v213, v212);
        v122 = *v214;
        v121 = v214[1];
      }
      else
      {
        v121 = 0;
        v122 = 0;
      }
    }
    goto LABEL_281;
  }
  IPC::Decoder::decode<WTF::URL>(a1, &v416);
  IPC::Decoder::decode<WTF::URL>(v2, &v412);
  v8 = v2[1];
  v9 = *v2;
  v10 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    v12 = (uint64_t *)(v9 + v10);
    v2[2] = (uint64_t)(v12 + 1);
    if (v9)
    {
      v384 = 0;
      v13 = *v12;
      goto LABEL_12;
    }
    v172 = v8;
    v173 = 0;
  }
  else
  {
    v172 = 0;
    v173 = 0;
    *v2 = 0;
    v2[1] = 0;
    v174 = v2[3];
    if (v174)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v174 + 16))(v174, v9, v8);
        v173 = *v2;
        v172 = v2[1];
      }
      else
      {
        v172 = 0;
        v173 = 0;
      }
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v13 = 0;
  v175 = v2[3];
  if (v175 && v172)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, v173);
  v384 = 1;
LABEL_12:
  IPC::Decoder::decode<WTF::String>(v2, &v410);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v407, v2);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v14, (uint64_t)v405);
  v15 = v2[1];
  v16 = *v2;
  v17 = v2[2] - *v2;
  if (v15 <= v17)
  {
    v176 = 0;
    v177 = 0;
    *v2 = 0;
    v2[1] = 0;
    v178 = v2[3];
    if (v178)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v178 + 16))(v178);
        v177 = *v2;
        v176 = v2[1];
      }
      else
      {
        v176 = 0;
        v177 = 0;
      }
    }
    goto LABEL_235;
  }
  v18 = (unsigned __int8 *)(v16 + v17);
  v19 = v16 + v17 + 1;
  v2[2] = v19;
  if (!v16)
  {
    v176 = v15;
    v177 = 0;
LABEL_235:
    v16 = 0;
    v15 = 0;
    *v2 = 0;
    v2[1] = 0;
    v179 = v2[3];
    if (v179)
    {
      if (v176)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v179 + 16))(v179, v177, v176);
        v16 = *v2;
        v15 = v2[1];
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
    }
    goto LABEL_236;
  }
  v379 = *v18;
  if (v379 < 6)
  {
    v382 = 0;
    goto LABEL_16;
  }
LABEL_236:
  *v2 = 0;
  v2[1] = 0;
  v180 = v2[3];
  if (!v180 || !v15)
  {
    LOBYTE(v379) = 0;
    v181 = 0;
    v16 = 0;
    v382 = 1;
    goto LABEL_238;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v180 + 16))(v180, v16);
  LOBYTE(v379) = 0;
  v16 = *v2;
  v15 = v2[1];
  v382 = 1;
  v19 = v2[2];
LABEL_16:
  v20 = v19 - v16;
  if (v15 <= v20)
  {
    v181 = 0;
    v289 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v15 && v289)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v289 + 16))(v289);
      v16 = *v2;
      v181 = v2[1];
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_238;
  }
  v21 = (unsigned __int8 *)(v16 + v20);
  v22 = v16 + v20 + 1;
  v2[2] = v22;
  if (!v16)
  {
    v181 = v15;
LABEL_238:
    *v2 = 0;
    v2[1] = 0;
    v182 = v2[3];
    if (v182)
    {
      if (v181)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 16))(v182, v16, v181);
        v16 = *v2;
        v15 = v2[1];
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    goto LABEL_240;
  }
  v378 = *v21;
  if (v378 < 3)
  {
    v380 = 0;
    goto LABEL_20;
  }
LABEL_240:
  *v2 = 0;
  v2[1] = 0;
  v183 = v2[3];
  if (!v183 || !v15)
  {
    LOBYTE(v378) = 0;
    v184 = 0;
    v16 = 0;
    v380 = 1;
LABEL_242:
    *v2 = 0;
    v2[1] = 0;
    v185 = v2[3];
    if (v185 && v184)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v16, v184);
      v16 = *v2;
      v15 = v2[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    goto LABEL_244;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 16))(v183, v16);
  LOBYTE(v378) = 0;
  v16 = *v2;
  v15 = v2[1];
  v380 = 1;
  v22 = v2[2];
LABEL_20:
  v23 = v22 - v16;
  if (v15 <= v23)
  {
    v184 = 0;
    v290 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v15 && v290)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v290 + 16))(v290);
      v16 = *v2;
      v184 = v2[1];
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_242;
  }
  v24 = (unsigned __int8 *)(v16 + v23);
  v2[2] = (uint64_t)(v24 + 1);
  if (!v16)
  {
    v184 = v15;
    goto LABEL_242;
  }
  v377 = *v24;
  if (v377 < 5)
  {
    v25 = 0;
    goto LABEL_24;
  }
LABEL_244:
  *v2 = 0;
  v2[1] = 0;
  v186 = v2[3];
  if (v186 && v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v186 + 16))(v186, v16);
  LOBYTE(v377) = 0;
  v25 = 1;
LABEL_24:
  v26 = IPC::Decoder::decode<WebCore::ResourceRequestRequester>(v2);
  v27 = v2[1];
  v28 = (WTF::StringImpl *)*v2;
  v29 = v2[2] - *v2;
  if (v27 <= v29)
  {
    v187 = 0;
    v188 = 0;
    *v2 = 0;
    v2[1] = 0;
    v189 = v2[3];
    if (v189)
    {
      v278 = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v189 + 16))(v189);
        v188 = *v2;
        v187 = v2[1];
      }
      else
      {
        v187 = 0;
        v188 = 0;
      }
      v26 = v278;
    }
    goto LABEL_247;
  }
  v30 = (unsigned __int8 *)v28 + v29;
  v31 = (uint64_t)v28 + v29 + 1;
  v2[2] = v31;
  if (!v28)
  {
    v187 = v27;
    v188 = 0;
LABEL_247:
    *v2 = 0;
    v2[1] = 0;
    v190 = v2[3];
    if (v190)
    {
      v252 = v26;
      if (v187)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v188, v187);
        v32 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v32 = 0;
      }
      v26 = v252;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v32 = 0;
    }
    goto LABEL_249;
  }
  v32 = *v30;
  if (v32 < 2)
  {
    v33 = 0;
    v34 = 1;
    goto LABEL_28;
  }
LABEL_249:
  *v2 = 0;
  v2[1] = 0;
  v191 = v2[3];
  if (!v191)
  {
    v35 = 0;
    v192 = 0;
    v28 = 0;
    v33 = 1;
    goto LABEL_251;
  }
  v239 = v26;
  if (!v27)
  {
    v35 = 0;
    v192 = 0;
    v28 = 0;
    v33 = 1;
LABEL_251:
    *v2 = 0;
    v2[1] = 0;
    v193 = v2[3];
    if (v193)
    {
      v256 = v33;
      v257 = v35;
      v258 = v26;
      if (v192)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v193 + 16))(v193, v28, v192);
        v39 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v39 = 0;
      }
      v26 = v258;
      v35 = v257;
      v33 = v256;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v39 = 0;
    }
    goto LABEL_253;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v191 + 16))(v191, v28);
  v34 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v33 = 1;
  v31 = v2[2];
  v26 = v239;
LABEL_28:
  if (v32)
    v35 = v34;
  else
    v35 = 0;
  v36 = v31 - (_QWORD)v28;
  if (v27 <= v36)
  {
    v317 = v33;
    v318 = v35;
    v319 = v26;
    v192 = 0;
    v320 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v320)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v320 + 16))(v320);
      v28 = (WTF::StringImpl *)*v2;
      v192 = v2[1];
      v26 = v319;
      v35 = v318;
      v33 = v317;
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_251;
  }
  v37 = (unsigned __int8 *)v28 + v36;
  v38 = (uint64_t)v28 + v36 + 1;
  v2[2] = v38;
  if (!v28)
  {
    v192 = v27;
    goto LABEL_251;
  }
  v39 = *v37;
  if (v39 < 2)
  {
    v40 = 0;
    v41 = 1;
    goto LABEL_35;
  }
LABEL_253:
  *v2 = 0;
  v2[1] = 0;
  v194 = v2[3];
  if (!v194)
  {
    v42 = 0;
    v195 = 0;
    v28 = 0;
    v40 = 1;
    goto LABEL_255;
  }
  v240 = v33;
  v241 = v35;
  v242 = v26;
  if (!v27)
  {
    v42 = 0;
    v195 = 0;
    v28 = 0;
    v40 = 1;
LABEL_255:
    *v2 = 0;
    v2[1] = 0;
    v196 = v2[3];
    if (v196)
    {
      v261 = v40;
      v262 = v42;
      v263 = v33;
      v264 = v35;
      v265 = v26;
      if (v195)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v196 + 16))(v196, v28, v195);
        v46 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v46 = 0;
      }
      v26 = v265;
      v35 = v264;
      v33 = v263;
      v42 = v262;
      v40 = v261;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v46 = 0;
    }
    goto LABEL_257;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v194 + 16))(v194, v28);
  v41 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v40 = 1;
  v38 = v2[2];
  v26 = v242;
  v35 = v241;
  v33 = v240;
LABEL_35:
  if (v39)
    v42 = v41;
  else
    v42 = 0;
  v43 = v38 - (_QWORD)v28;
  if (v27 <= v43)
  {
    v311 = v40;
    v312 = v42;
    v313 = v33;
    v314 = v35;
    v315 = v26;
    v195 = 0;
    v316 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v316)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v316 + 16))(v316);
      v28 = (WTF::StringImpl *)*v2;
      v195 = v2[1];
      v26 = v315;
      v35 = v314;
      v33 = v313;
      v42 = v312;
      v40 = v311;
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_255;
  }
  v44 = (unsigned __int8 *)v28 + v43;
  v45 = (uint64_t)v28 + v43 + 1;
  v2[2] = v45;
  if (!v28)
  {
    v195 = v27;
    goto LABEL_255;
  }
  v46 = *v44;
  if (v46 < 2)
  {
    v47 = 0;
    v48 = 1;
    goto LABEL_42;
  }
LABEL_257:
  *v2 = 0;
  v2[1] = 0;
  v197 = v2[3];
  if (!v197)
  {
    v49 = 0;
    v198 = 0;
    v28 = 0;
    v47 = 1;
    goto LABEL_259;
  }
  v243 = v40;
  v244 = v42;
  v245 = v33;
  v246 = v35;
  v247 = v26;
  if (!v27)
  {
    v49 = 0;
    v198 = 0;
    v28 = 0;
    v47 = 1;
LABEL_259:
    *v2 = 0;
    v2[1] = 0;
    v199 = v2[3];
    if (v199)
    {
      v358 = v49;
      v370 = v47;
      v273 = v40;
      v274 = v42;
      v275 = v33;
      v276 = v35;
      v277 = v26;
      if (v198)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v199 + 16))(v199, v28, v198);
        v53 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v53 = 0;
      }
      v26 = v277;
      v35 = v276;
      v33 = v275;
      v42 = v274;
      v40 = v273;
      v49 = v358;
      v47 = v370;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v53 = 0;
    }
    goto LABEL_261;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v197 + 16))(v197, v28);
  v48 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v47 = 1;
  v45 = v2[2];
  v26 = v247;
  v35 = v246;
  v33 = v245;
  v42 = v244;
  v40 = v243;
LABEL_42:
  if (v46)
    v49 = v48;
  else
    v49 = 0;
  v50 = v45 - (_QWORD)v28;
  if (v27 <= v50)
  {
    v365 = v49;
    v376 = v47;
    v305 = v40;
    v306 = v42;
    v307 = v33;
    v308 = v35;
    v309 = v26;
    v198 = 0;
    v310 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v310)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v310 + 16))(v310);
      v28 = (WTF::StringImpl *)*v2;
      v198 = v2[1];
      v26 = v309;
      v35 = v308;
      v33 = v307;
      v42 = v306;
      v40 = v305;
      v49 = v365;
      v47 = v376;
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_259;
  }
  v51 = (unsigned __int8 *)v28 + v50;
  v52 = (uint64_t)v28 + v50 + 1;
  v2[2] = v52;
  if (!v28)
  {
    v198 = v27;
    goto LABEL_259;
  }
  v53 = *v51;
  if (v53 < 2)
  {
    v54 = 0;
    v55 = 1;
    goto LABEL_49;
  }
LABEL_261:
  *v2 = 0;
  v2[1] = 0;
  v200 = v2[3];
  if (!v200)
  {
    v56 = 0;
    v201 = 0;
    v28 = 0;
    v54 = 1;
    goto LABEL_263;
  }
  v354 = v49;
  v366 = v47;
  v345 = v40;
  v248 = v42;
  v249 = v33;
  v250 = v35;
  v251 = v26;
  if (!v27)
  {
    v56 = 0;
    v201 = 0;
    v28 = 0;
    v54 = 1;
LABEL_263:
    *v2 = 0;
    v2[1] = 0;
    v202 = v2[3];
    if (v202)
    {
      v359 = v49;
      v371 = v47;
      v339 = v56;
      v349 = v40;
      v279 = v42;
      v280 = v33;
      v281 = v35;
      v282 = v26;
      if (v201)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v202 + 16))(v202, v28, v201);
        v60 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v60 = 0;
      }
      v26 = v282;
      v35 = v281;
      v33 = v280;
      v42 = v279;
      v40 = v349;
      v49 = v359;
      v56 = v339;
      v47 = v371;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v60 = 0;
    }
    goto LABEL_265;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v200 + 16))(v200, v28);
  v55 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v54 = 1;
  v52 = v2[2];
  v26 = v251;
  v35 = v250;
  v33 = v249;
  v42 = v248;
  v40 = v345;
  v49 = v354;
  v47 = v366;
LABEL_49:
  if (v53)
    v56 = v55;
  else
    v56 = 0;
  v57 = v52 - (_QWORD)v28;
  if (v27 <= v57)
  {
    v364 = v49;
    v375 = v47;
    v344 = v56;
    v299 = v40;
    v300 = v42;
    v301 = v33;
    v302 = v35;
    v303 = v26;
    v201 = 0;
    v304 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v304)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v304 + 16))(v304);
      v28 = (WTF::StringImpl *)*v2;
      v201 = v2[1];
    }
    else
    {
      v28 = 0;
    }
    v26 = v303;
    v35 = v302;
    v33 = v301;
    v42 = v300;
    v40 = v299;
    v49 = v364;
    v47 = v375;
    v56 = v344;
    goto LABEL_263;
  }
  v58 = (unsigned __int8 *)v28 + v57;
  v59 = (uint64_t)v28 + v57 + 1;
  v2[2] = v59;
  if (!v28)
  {
    v201 = v27;
    goto LABEL_263;
  }
  v60 = *v58;
  if (v60 < 2)
  {
    v61 = 0;
    v62 = 1;
    goto LABEL_56;
  }
LABEL_265:
  *v2 = 0;
  v2[1] = 0;
  v203 = v2[3];
  if (!v203)
  {
    v63 = 0;
    v204 = 0;
    v28 = 0;
    v61 = 1;
    goto LABEL_267;
  }
  v355 = v49;
  v367 = v47;
  v336 = v56;
  v346 = v40;
  v331 = v42;
  v253 = v33;
  v254 = v35;
  v255 = v26;
  if (!v27)
  {
    v63 = 0;
    v204 = 0;
    v28 = 0;
    v61 = 1;
LABEL_386:
    v47 = v367;
    goto LABEL_267;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v203 + 16))(v203, v28);
  v62 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v61 = 1;
  v59 = v2[2];
  v26 = v255;
  v35 = v254;
  v33 = v253;
  v42 = v331;
  v40 = v346;
  v49 = v355;
  v56 = v336;
  v47 = v367;
LABEL_56:
  if (v60)
    v63 = v62;
  else
    v63 = 0;
  v64 = v59 - (_QWORD)v28;
  if (v27 <= v64)
  {
    v343 = v56;
    v363 = v49;
    v367 = v47;
    v353 = v40;
    v294 = v42;
    v295 = v33;
    v296 = v35;
    v297 = v26;
    v204 = 0;
    v298 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v298)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v298 + 16))(v298);
      v28 = (WTF::StringImpl *)*v2;
      v204 = v2[1];
    }
    else
    {
      v28 = 0;
    }
    v26 = v297;
    v35 = v296;
    v33 = v295;
    v42 = v294;
    v40 = v353;
    v49 = v363;
    v56 = v343;
    goto LABEL_386;
  }
  v65 = (unsigned __int8 *)v28 + v64;
  v66 = (uint64_t)v28 + v64 + 1;
  v2[2] = v66;
  if (!v28)
  {
    v204 = v27;
LABEL_267:
    *v2 = 0;
    v2[1] = 0;
    v205 = v2[3];
    if (v205)
    {
      v340 = v56;
      v360 = v49;
      v372 = v47;
      v350 = v40;
      v333 = v42;
      v283 = v33;
      v284 = v35;
      v285 = v26;
      if (v204)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v205 + 16))(v205, v28, v204);
        v67 = 0;
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v67 = 0;
      }
      v26 = v285;
      v35 = v284;
      v33 = v283;
      v42 = v333;
      v40 = v350;
      v49 = v360;
      v56 = v340;
      v47 = v372;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v67 = 0;
    }
    goto LABEL_269;
  }
  v67 = *v65;
  if (v67 < 2)
  {
    v68 = 0;
    v69 = 1;
    goto LABEL_63;
  }
LABEL_269:
  *v2 = 0;
  v2[1] = 0;
  v206 = v2[3];
  if (!v206)
  {
    v70 = 0;
    v207 = 0;
    v28 = 0;
    v68 = 1;
    goto LABEL_271;
  }
  v337 = v56;
  v356 = v49;
  v368 = v47;
  v347 = v40;
  v328 = v35;
  v332 = v42;
  v259 = v33;
  v260 = v26;
  if (!v27)
  {
    v70 = 0;
    v207 = 0;
    v28 = 0;
    v68 = 1;
LABEL_271:
    *v2 = 0;
    v2[1] = 0;
    v208 = v2[3];
    if (v208)
    {
      v326 = v70;
      v329 = v35;
      v341 = v56;
      v361 = v49;
      v373 = v47;
      v351 = v40;
      v286 = v42;
      v287 = v33;
      v288 = v26;
      if (v207)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v208 + 16))(v208, v28, v207);
        v28 = (WTF::StringImpl *)*v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
      v26 = v288;
      v70 = v326;
      v35 = v329;
      v33 = v287;
      v42 = v286;
      v40 = v351;
      v49 = v361;
      v56 = v341;
      v47 = v373;
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    goto LABEL_273;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v206 + 16))(v206, v28);
  v69 = 0;
  v28 = (WTF::StringImpl *)*v2;
  v27 = v2[1];
  v68 = 1;
  v66 = v2[2];
  v26 = v260;
  v35 = v328;
  v42 = v332;
  v33 = v259;
  v40 = v347;
  v49 = v356;
  v56 = v337;
  v47 = v368;
LABEL_63:
  if (v67)
    v70 = v69;
  else
    v70 = 0;
  v71 = v66 - (_QWORD)v28;
  if (v27 <= v71)
  {
    v327 = v70;
    v330 = v35;
    v342 = v56;
    v362 = v49;
    v374 = v47;
    v352 = v40;
    v334 = v42;
    v291 = v33;
    v292 = v26;
    v207 = 0;
    v293 = v2[3];
    *v2 = 0;
    v2[1] = 0;
    if (v27 && v293)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v293 + 16))(v293);
      v28 = (WTF::StringImpl *)*v2;
      v207 = v2[1];
      v26 = v292;
      v35 = v330;
      v42 = v334;
      v33 = v291;
      v40 = v352;
      v49 = v362;
      v56 = v342;
    }
    else
    {
      v28 = 0;
    }
    v47 = v374;
    v70 = v327;
    goto LABEL_271;
  }
  v72 = (unsigned __int8 *)v28 + v71;
  v2[2] = (uint64_t)(v72 + 1);
  if (!v28)
  {
    v207 = v27;
    goto LABEL_271;
  }
  v73 = *v72;
  if (v73 <= 1)
  {
    v5 = 0;
    a2 = v73 != 0;
    goto LABEL_70;
  }
LABEL_273:
  *v2 = 0;
  v2[1] = 0;
  v209 = v2[3];
  if (v209)
  {
    if (v27)
    {
      v325 = v70;
      v335 = v63;
      v338 = v33;
      v357 = v25;
      v369 = v47;
      v266 = v2;
      v267 = v56;
      v268 = v49;
      v348 = v40;
      v269 = v42;
      v270 = v35;
      v271 = v26;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v209 + 16))(v209, v28);
      v272 = *v266;
      v26 = v271;
      v40 = v348;
      v25 = v357;
      v56 = v267;
      v2 = v266;
      v47 = v369;
      v63 = v335;
      v33 = v338;
      v70 = v325;
      if (v272)
      {
        v35 = v270;
        v42 = v269;
        v49 = v268;
        a2 = 0;
        v5 = 1;
LABEL_70:
        v4 = v419;
        if (!v419)
          goto LABEL_220;
        v4 = v415;
        if (!v415)
          goto LABEL_220;
        v4 = v384;
        if (v384)
          goto LABEL_220;
        v4 = v411;
        if (!v411)
          goto LABEL_220;
        v4 = v409;
        if (!v409)
          goto LABEL_220;
        v4 = v406;
        if (!v406)
          goto LABEL_220;
        v4 = v382;
        if (v382)
          goto LABEL_220;
        v4 = v380;
        if (v380)
          goto LABEL_220;
        if (v25)
          goto LABEL_220;
        v4 = v26;
        if (v26 <= 0xFFu || v33 || v40 || v47 || v54 || v61 || v68 || (_DWORD)v5)
          goto LABEL_220;
        v74 = v26;
        v75 = v416;
        if (v416)
          *(_DWORD *)v416 += 2;
        v425 = v75;
        v426 = v417;
        v427 = v418;
        v76 = v412;
        if (v412)
          *(_DWORD *)v412 += 2;
        v77 = v70;
        v78 = v56;
        v79 = v49;
        v80 = v42;
        v81 = v35;
        v428 = v76;
        v429 = v413;
        v430 = v414;
        v431 = v13;
        v82 = v410;
        if (v410)
          *(_DWORD *)v410 += 2;
        *(_QWORD *)&v432 = v82;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)((char *)&v432 + 8), (WTF::ASCIILiteral *)v407);
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v434, (WTF::ASCIILiteral *)&v408);
        v83 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v436, (uint64_t)v405);
        LOBYTE(v438) = v379;
        BYTE1(v438) = v378;
        BYTE2(v438) = v377;
        HIBYTE(v438) = v74;
        if (v81)
          v85 = 2;
        else
          v85 = 0;
        if (v79)
          v86 = 4;
        else
          v86 = 0;
        if (v78)
          v87 = 8;
        else
          v87 = 0;
        if (v63)
          v88 = 16;
        else
          v88 = 0;
        if (v77)
          v89 = 32;
        else
          v89 = 0;
        if ((_DWORD)a2)
          v90 = 64;
        else
          v90 = 0;
        v439 = v88 | v90 | v86 | v85 | v80 | v87 | v89 | v439 & 0x80;
        v91 = v425;
        v92 = v428;
        v425 = 0;
        cf = v91;
        v389 = v426;
        v390 = v427;
        LODWORD(v426) = v426 & 0xFFFFFFFE;
        v428 = 0;
        v391 = v92;
        v392 = v429;
        v393 = v430;
        LODWORD(v429) = v429 & 0xFFFFFFFE;
        v93 = v433;
        v394 = v431;
        v94 = v432;
        v432 = 0uLL;
        v395 = v94;
        v433 = 0;
        v396 = v93;
        v95 = v434;
        v434 = 0;
        v397 = v95;
        v96 = v435;
        v435 = 0;
        v398 = v96;
        v97 = v436;
        v436 = 0;
        v399 = v97;
        v98 = v437;
        v437 = 0;
        v400 = v98;
        v402 = v439;
        v401 = v438;
        v403 = 1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v83, v84);
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v434);
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)((char *)&v432 + 8));
        v99 = (WTF::StringImpl *)v432;
        *(_QWORD *)&v432 = 0;
        v2 = a1;
        a2 = v387;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WTF::StringImpl::destroy(v99, v28);
          else
            *(_DWORD *)v99 -= 2;
        }
        v100 = v428;
        v428 = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
            WTF::StringImpl::destroy(v100, v28);
          else
            *(_DWORD *)v100 -= 2;
        }
        v101 = v425;
        v425 = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2)
            WTF::StringImpl::destroy(v101, v28);
          else
            *(_DWORD *)v101 -= 2;
        }
        v102 = 0;
        goto LABEL_121;
      }
    }
  }
  LOBYTE(cf) = 0;
  v403 = 0;
  v102 = 1;
LABEL_121:
  if (v406)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v405, v28);
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v407);
  if (v411)
  {
    v104 = v410;
    v410 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v103);
      else
        *(_DWORD *)v104 -= 2;
    }
  }
  if (v415)
  {
    v105 = v412;
    v412 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v103);
      else
        *(_DWORD *)v105 -= 2;
    }
  }
  if (v419)
  {
    v106 = v416;
    v416 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v103);
      else
        *(_DWORD *)v106 -= 2;
    }
  }
  if (!v102
    || (v107 = (void *)*v2, v210 = v2[1], *v2 = 0, v2[1] = 0, (v211 = v2[3]) != 0)
    && v210
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v211 + 16))(v211, v107), v403))
  {
    std::__variant_detail::__alt<0ul,WebCore::ResourceRequestBase::RequestData>::__alt[abi:sn180100]<WebCore::ResourceRequestBase::RequestData>((uint64_t)v422, (uint64_t)&cf);
    v423 = 0;
    v108 = 1;
  }
  else
  {
    v108 = 0;
    LOBYTE(v422[0]) = 0;
  }
  v424 = v108;
  std::__optional_destruct_base<WebCore::ResourceRequestBase::RequestData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v107);
  v109 = v424;
LABEL_138:
  if (!v109)
    goto LABEL_224;
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(v2, &v425);
    v110 = v2[1];
    v111 = (WTF::StringImpl *)*v2;
    v112 = v2[2] - *v2;
    if (v110 <= v112)
    {
      v167 = 0;
      v168 = 0;
      *v2 = 0;
      v2[1] = 0;
      v169 = v2[3];
      if (v169)
      {
        if (v110)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
          v168 = *v2;
          v167 = v2[1];
        }
        else
        {
          v167 = 0;
          v168 = 0;
        }
      }
      goto LABEL_228;
    }
    v113 = (unsigned __int8 *)v111 + v112;
    v4 = (unint64_t)(v113 + 1);
    v2[2] = (uint64_t)(v113 + 1);
    if (!v111)
    {
      v167 = v110;
      v168 = 0;
LABEL_228:
      v110 = 0;
      v111 = 0;
      *v2 = 0;
      v2[1] = 0;
      v170 = v2[3];
      if (v170)
      {
        if (v167)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v168, v167);
          v111 = (WTF::StringImpl *)*v2;
          v110 = v2[1];
        }
        else
        {
          v110 = 0;
          v111 = 0;
        }
      }
      goto LABEL_229;
    }
    v114 = *v113;
    if (v114 <= 1)
    {
      v115 = 0;
      v2 = (uint64_t *)(v114 != 0);
      goto LABEL_143;
    }
LABEL_229:
    *v2 = 0;
    v2[1] = 0;
    v171 = v2[3];
    if (!v171
      || !v110
      || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v171 + 16))(v171, v111), !*v2))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 200) = 0;
      goto LABEL_151;
    }
    v2 = 0;
    v115 = 1;
LABEL_143:
    v5 = v424;
    if (v424)
    {
      v420[0] = 0;
      v421 = -1;
      v116 = v423;
      if (v423 != -1)
      {
        ((void (*)(WTF::StringImpl **, _BYTE *, _QWORD *))off_1E34ADA20[v423])(&v416, v420, v422);
        v421 = v116;
      }
      v5 = v426;
      if ((_BYTE)v426)
      {
        if (!v115)
          break;
      }
    }
LABEL_220:
    __break(1u);
LABEL_221:
    v160 = 0;
    v161 = 0;
    *v2 = 0;
    v2[1] = 0;
    v162 = v2[3];
    if (v162)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v162 + 16))(v162, v5, v4);
        v161 = *v2;
        v160 = v2[1];
      }
      else
      {
        v160 = 0;
        v161 = 0;
      }
    }
LABEL_222:
    *v2 = 0;
    v2[1] = 0;
    v163 = v2[3];
    if (v163 && v160)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 16))(v163, v161);
LABEL_223:
    LOBYTE(v422[0]) = 0;
    v424 = 0;
LABEL_224:
    v164 = *v2;
    v165 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v166 = v2[3];
    if (v166 && v165)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, v164);
  }
  WebCore::ResourceRequest::fromResourceRequestData();
  WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)&cf);
  *(_QWORD *)(a2 + 192) = v404;
  *(_BYTE *)(a2 + 200) = 1;
  v404 = 0;
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&cf);
  if (v421 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS6_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v421])(&v416, v420);
  v421 = -1;
LABEL_151:
  if ((_BYTE)v426)
  {
    v117 = v425;
    v425 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v111);
      else
        *(_DWORD *)v117 -= 2;
    }
  }
  if (v424)
  {
    if (v423 != -1)
      ((void (*)(CFTypeRef *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS6_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v423])(&cf, v422);
  }
}

void sub_196BDB958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  const void *v17;

  if (a17)
  {
    if (v17)
      CFRelease(v17);
  }
  _Unwind_Resume(a1);
}

void sub_196BDBAD0()
{
  JUMPOUT(0x196BDBA2CLL);
}

void sub_196BDBAF0()
{
  JUMPOUT(0x196BDBA90);
}

void sub_196BDBAF8()
{
  JUMPOUT(0x196BDBA98);
}

void sub_196BDBB08()
{
  JUMPOUT(0x196BDBAA8);
}

void sub_196BDBB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)va);
  if (LODWORD(STACK[0x268]) != -1)
    JUMPOUT(0x196BDBB40);
  JUMPOUT(0x196BDBB48);
}

void sub_196BDBB90()
{
  JUMPOUT(0x196BDBAB0);
}

CFTypeRef *WebCore::ResourceRequest::ResourceRequest(CFTypeRef *this, const WebCore::ResourceRequest *a2)
{
  WebCore::ResourceRequestBase::ResourceRequestBase((WebCore::ResourceRequestBase *)this, (WTF::RefCountedBase **)a2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(this + 24, (uint64_t *)a2 + 24);
  return this;
}

{
  WebCore::ResourceRequest::ResourceRequest(this, a2);
  return this;
}

WebCore::ResourceRequestBase *WebCore::ResourceRequestBase::ResourceRequestBase(WebCore::ResourceRequestBase *this, WTF::RefCountedBase **a2)
{
  WTF::RefCountedBase *v5;

  WebCore::ResourceRequestBase::RequestData::RequestData(this, (const WebCore::ResourceRequestBase::RequestData *)a2);
  WTF::String::String((WebCore::ResourceRequestBase *)((char *)this + 152), (const WTF::String *)(a2 + 19));
  WTF::String::String((WebCore::ResourceRequestBase *)((char *)this + 160), (const WTF::String *)(a2 + 20));
  v5 = a2[21];
  if (v5)
    WTF::RefCountedBase::ref(v5);
  *((_QWORD *)this + 21) = v5;
  *((_QWORD *)this + 22) = a2[22];
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  return this;
}

WebCore::ResourceRequestBase::RequestData *WebCore::ResourceRequestBase::RequestData::RequestData(WebCore::ResourceRequestBase::RequestData *this, const WebCore::ResourceRequestBase::RequestData *a2)
{
  WebCore::ResourceRequestBase::RequestData::RequestData(this, a2);
  return this;
}

{
  WTF::URL::URL(this, a2);
  WTF::URL::URL((WebCore::ResourceRequestBase::RequestData *)((char *)this + 40), (const WebCore::ResourceRequestBase::RequestData *)((char *)a2 + 40));
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  WTF::String::String((WebCore::ResourceRequestBase::RequestData *)((char *)this + 88), (const WebCore::ResourceRequestBase::RequestData *)((char *)a2 + 88));
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), (const WebCore::ResourceRequestBase::RequestData *)((char *)a2 + 96));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 128, (uint64_t)a2 + 128);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  return this;
}

WTF::URL *WTF::URL::URL(WTF::URL *this, const WTF::URL *a2)
{
  WTF::URL::URL(this, a2);
  return this;
}

{
  WTF::String::String(this, a2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

WebCore::HTTPHeaderMap *WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this, const WebCore::HTTPHeaderMap *a2)
{
  WebCore::HTTPHeaderMap::HTTPHeaderMap(this, a2);
  return this;
}

{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector(this, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WebCore::HTTPHeaderMap *)((char *)this + 16), (const WebCore::HTTPHeaderMap *)((char *)a2 + 16));
  return this;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD ***)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7;
        if (*v7)
          *v9 += 2;
        *v5++ = v9;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  unint64_t v3;
  int v4;
  WebCore::HTTPHeaderMap::UncommonHeader *v5;
  const WebCore::HTTPHeaderMap::UncommonHeader *v6;
  uint64_t v7;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v5 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    v6 = (const WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(WTF::ASCIILiteral *a1)
{
  return WTF::ASCIILiteral::characters(a1);
}

uint64_t WTF::ASCIILiteral::characters(WTF::ASCIILiteral *this)
{
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)this);
}

uint64_t WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, unint64_t a2, int a3)
{
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  *(_DWORD *)(a1 + 12) = a3;
  if (a2)
    WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  return a1;
}

uint64_t WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  unint64_t v3;
  int v4;
  WebCore::HTTPHeaderMap::CommonHeader *v5;
  const CommonHeader *v6;
  uint64_t v7;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v5 = (WebCore::HTTPHeaderMap::CommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    v6 = (const CommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 16 * a1[3];
}

uint64_t std::span<char const,18446744073709551615ul>::data[abi:sn180100](uint64_t a1)
{
  return *(_QWORD *)a1;
}

WebCore::HTTPHeaderMap::CommonHeader *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy(WebCore::HTTPHeaderMap::CommonHeader *a1, const CommonHeader *a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::CommonHeader>(a1, a2, a3);
}

uint64_t WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (!WTF::isValidCapacityForVector<WebCore::HTTPHeaderMap::CommonHeader>(a2))
  {
    __break(0xC471u);
    JUMPOUT(0x196BDC304);
  }
  result = WTF::FastMalloc::malloc((WTF::FastMalloc *)(16 * a2));
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t WTF::FastMalloc::malloc(WTF::FastMalloc *this)
{
  return WTF::fastMalloc(this);
}

BOOL WTF::isValidCapacityForVector<WebCore::HTTPHeaderMap::CommonHeader>(unint64_t a1)
{
  return a1 <= (unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() >> 4;
}

CFTypeRef *WTF::RetainPtr<NSURLRequest>::RetainPtr(CFTypeRef *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = WTF::RetainPtr<NSURLRequest>::get(a2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, v3);
  return a1;
}

uint64_t WTF::RetainPtr<NSURLRequest>::get(uint64_t *a1)
{
  return WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, *a1);
}

uint64_t WTF::RetainPtr<NSURLRequest>::toStorageType(uint64_t a1, uint64_t a2)
{
  return a2;
}

CFTypeRef *WTF::RetainPtr<NSURLRequest>::RetainPtr(CFTypeRef *a1, uint64_t a2)
{
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, a2);
  return a1;
}

{
  *a1 = (CFTypeRef)WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, a2);
  if (*a1)
    CFRetain(*a1);
  return a1;
}

WTF::ASCIILiteral *IPC::Decoder::decode<WebCore::HTTPHeaderMap>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  WTF::ASCIILiteral *result;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (unint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v39 = v4;
      v40 = 0;
      goto LABEL_51;
    }
    v9 = *v8;
    v69 = 0;
    v70 = 0;
    if (v9 < 0x10000)
    {
      if (!v9)
      {
        v15 = 0;
        v16 = 0;
LABEL_19:
        v69 = 0;
        v70 = 0;
        v72 = v15;
        v73 = v16;
LABEL_20:
        v74 = 1;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v69);
        goto LABEL_21;
      }
      LODWORD(v70) = v9;
      v69 = WTF::fastMalloc((WTF *)(16 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v65, a2);
        if (!(_BYTE)v67)
          goto LABEL_91;
        if (HIDWORD(v70) != (_DWORD)v70)
          break;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v69, (unint64_t)&v65);
        if ((_BYTE)v67)
          goto LABEL_13;
LABEL_16:
        if (!--v9)
        {
          v15 = v69;
          v16 = v70;
          goto LABEL_19;
        }
      }
      v11 = HIDWORD(v70) + 1;
      v12 = v69 + 16 * HIDWORD(v70);
      *(_WORD *)v12 = v65;
      v13 = v66;
      v66 = 0;
      *(_QWORD *)(v12 + 8) = v13;
      HIDWORD(v70) = v11;
LABEL_13:
      v14 = v66;
      v66 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      goto LABEL_16;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v65, a2);
      if (!(_BYTE)v67)
      {
LABEL_91:
        LOBYTE(v72) = 0;
        v74 = 0;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v69);
        goto LABEL_53;
      }
      if (HIDWORD(v70) != (_DWORD)v70)
        break;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v69, (unint64_t)&v65);
      if ((_BYTE)v67)
        goto LABEL_85;
LABEL_88:
      if (!--v9)
      {
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v69, HIDWORD(v70));
        v72 = v69;
        v59 = v70;
        v69 = 0;
        v70 = 0;
        v73 = v59;
        goto LABEL_20;
      }
    }
    v55 = HIDWORD(v70) + 1;
    v56 = v69 + 16 * HIDWORD(v70);
    *(_WORD *)v56 = v65;
    v57 = v66;
    v66 = 0;
    *(_QWORD *)(v56 + 8) = v57;
    HIDWORD(v70) = v55;
LABEL_85:
    v58 = v66;
    v66 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v54);
      else
        *(_DWORD *)v58 -= 2;
    }
    goto LABEL_88;
  }
  while (1)
  {
    v39 = 0;
    v40 = 0;
    *a2 = 0;
    a2[1] = 0;
    v41 = a2[3];
    if (v41)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v5, v4);
        v40 = *a2;
        v39 = a2[1];
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
LABEL_51:
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42 && v39)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
    LOBYTE(v72) = 0;
    v74 = 0;
LABEL_53:
    v43 = *a2;
    v44 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45 && v44)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
LABEL_21:
    v17 = a2[1];
    v18 = *a2;
    v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      v46 = 0;
      v47 = 0;
      *a2 = 0;
      a2[1] = 0;
      v48 = a2[3];
      if (v48)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v18, v17);
          v47 = *a2;
          v46 = a2[1];
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
      }
      goto LABEL_58;
    }
    v21 = (unint64_t *)(v18 + v19);
    a2[2] = (uint64_t)(v21 + 1);
    if (!v18)
    {
      v46 = v17;
      v47 = 0;
LABEL_58:
      *a2 = 0;
      a2[1] = 0;
      v49 = a2[3];
      if (v49 && v46)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
      LOBYTE(v69) = 0;
      v71 = 0;
      goto LABEL_60;
    }
    v22 = *v21;
    v75 = 0;
    v76 = 0;
    if (v22 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v65, a2);
        if (!(_BYTE)v67)
          goto LABEL_99;
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v75, (unint64_t)&v65);
        }
        else
        {
          v60 = HIDWORD(v76) + 1;
          v61 = (_QWORD *)(v75 + 16 * HIDWORD(v76));
          v62 = v65;
          v65 = 0;
          *v61 = v62;
          v63 = v66;
          v66 = 0;
          v61[1] = v63;
          HIDWORD(v76) = v60;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v34);
        if (!--v22)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v75, HIDWORD(v76));
          v64 = v75;
          v75 = 0;
          v69 = v64;
          v24 = v76;
          v23 = HIDWORD(v76);
          goto LABEL_31;
        }
      }
    }
    if (v22)
    {
      v33 = WTF::fastMalloc((WTF *)(16 * v22));
      LODWORD(v76) = v22;
      v75 = v33;
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v65, a2);
        if (!(_BYTE)v67)
          break;
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v75, (unint64_t)&v65);
        }
        else
        {
          v35 = HIDWORD(v76) + 1;
          v36 = (_QWORD *)(v75 + 16 * HIDWORD(v76));
          v37 = v65;
          v65 = 0;
          *v36 = v37;
          v38 = v66;
          v66 = 0;
          v36[1] = v38;
          HIDWORD(v76) = v35;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v34);
        if (!--v22)
        {
          v25 = v75;
          v24 = v76;
          v23 = HIDWORD(v76);
          goto LABEL_30;
        }
      }
LABEL_99:
      LOBYTE(v69) = 0;
      v71 = 0;
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v34);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v75);
LABEL_60:
      v50 = *a2;
      v51 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = (WTF::ASCIILiteral *)a2[3];
      if (result && v51)
        result = (WTF::ASCIILiteral *)(*(uint64_t (**)(WTF::ASCIILiteral *, uint64_t))(*(_QWORD *)result + 16))(result, v50);
      v26 = 0;
      v5 = 1;
      goto LABEL_32;
    }
    v23 = 0;
    v24 = 0;
    v25 = 0;
LABEL_30:
    v75 = 0;
    v69 = v25;
LABEL_31:
    v76 = 0;
    v70 = __PAIR64__(v23, v24);
    v26 = 1;
    v71 = 1;
    result = WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v75);
    v5 = 0;
LABEL_32:
    v28 = *a2;
    if (!*a2)
      break;
    v4 = v74;
    if (v74 && !(_DWORD)v5)
    {
      WebCore::HTTPHeaderMap::HTTPHeaderMap();
      v29 = v65;
      v65 = 0;
      *(_QWORD *)a1 = v29;
      v30 = v66;
      v66 = 0;
      *(_QWORD *)(a1 + 8) = v30;
      v31 = v67;
      v67 = 0;
      *(_QWORD *)(a1 + 16) = v31;
      v32 = v68;
      v68 = 0;
      *(_QWORD *)(a1 + 24) = v32;
      *(_BYTE *)(a1 + 32) = 1;
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v67);
      result = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v65);
      v26 = v71;
      goto LABEL_36;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_36:
  if (v26)
    result = WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v69);
  if (v74)
    result = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v72);
  if (!v28)
  {
    v52 = *a2;
    v53 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::ASCIILiteral *)a2[3];
    if (result)
    {
      if (v53)
        return (WTF::ASCIILiteral *)(*(uint64_t (**)(WTF::ASCIILiteral *, uint64_t))(*(_QWORD *)result + 16))(result, v52);
    }
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v9;
  unsigned int v10;
  _QWORD *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  char v23;

  v4 = (a2[2] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 1)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_13;
  }
  v9 = (unsigned __int16 *)(v5 + v7);
  a2[2] = (uint64_t)(v9 + 1);
  if (!v5)
  {
    v14 = v6;
    v15 = 0;
LABEL_13:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v5);
    IPC::Decoder::decode<WTF::String>(a2, &v22);
    if (!*a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  v10 = *v9;
  if (v10 >= 0x5F)
    goto LABEL_14;
  result = IPC::Decoder::decode<WTF::String>(a2, &v22);
  if (!*a2)
    goto LABEL_17;
  if (v23)
  {
    v13 = v22;
    *(_WORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v23)
  {
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v21)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v20);
  }
  return result;
}

void sub_196BDCCC0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(WebCore::HTTPHeaderMap::UncommonHeader *a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  while (a1 != a2)
  {
    WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(a1);
    a1 = (WebCore::HTTPHeaderMap::UncommonHeader *)((char *)a1 + 16);
  }
}

void WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(WebCore::HTTPHeaderMap::UncommonHeader *this)
{
  WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(this);
}

void WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(WebCore::PublicKeyCredentialCreationOptions::Entity *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _QWORD v4[4];
  WTF::StringImpl *v5;
  WebCore::PublicKeyCredentialCreationOptions::Entity *v6;
  WebCore::PublicKeyCredentialCreationOptions::Entity *v7;
  _QWORD v8[4];
  WTF::StringImpl *v9;

  v4[1] = (char *)this + 8;
  v4[0] = 0;
  v4[3] = (char *)this + 8;
  v4[2] = v4;
  v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v5)
    WTF::StringImpl::deref(v5, v2);
  v6 = this;
  v7 = this;
  v8[1] = this;
  v8[0] = 0;
  v8[3] = this;
  v8[2] = v8;
  v9 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v9)
    WTF::StringImpl::deref(v9, v3);
}

void WebCore::ResourceResponseBase::~ResourceResponseBase(WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  const void *v3;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*((_BYTE *)this + 128))
  {
    v3 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v4, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseBase *)((char *)this + 96));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseBase *)((char *)this + 80));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::ResourceRequestBase::~ResourceRequestBase(WebCore::ResourceRequestBase *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _QWORD v4[4];
  WTF::RefCountedBase *v5;
  char *v6;
  char *v7;
  _QWORD v8[4];
  WTF::StringImpl *v9;
  char *v10;
  char *v11;
  _QWORD v12[4];
  WTF::StringImpl *v13;

  v4[1] = (char *)this + 168;
  v4[0] = 0;
  v4[3] = (char *)this + 168;
  v4[2] = v4;
  v5 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 21);
  if (v5)
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  v6 = (char *)this + 160;
  v7 = (char *)this + 160;
  v8[1] = (char *)this + 160;
  v8[0] = 0;
  v8[3] = (char *)this + 160;
  v8[2] = v8;
  v9 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 20);
  if (v9)
    WTF::StringImpl::deref(v9, v2);
  v10 = (char *)this + 152;
  v11 = (char *)this + 152;
  v12[1] = (char *)this + 152;
  v12[0] = 0;
  v12[3] = (char *)this + 152;
  v12[2] = v12;
  v13 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 19);
  if (v13)
    WTF::StringImpl::deref(v13, v3);
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, v3);
}

void WebCore::ResourceRequestBase::RequestData::~RequestData(WebCore::ResourceRequestBase::RequestData *this, void *a2)
{
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, a2);
}

{
  WTF::StringImpl *v3;
  _QWORD v4[4];
  WTF::StringImpl *v5;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96));
  v4[1] = (char *)this + 88;
  v4[0] = 0;
  v4[3] = (char *)this + 88;
  v4[2] = v4;
  v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 11);
  if (v5)
    WTF::StringImpl::deref(v5, v3);
  WTF::URL::~URL((WebCore::ResourceRequestBase::RequestData *)((char *)this + 40));
  WTF::URL::~URL(this);
}

void WTF::URL::~URL(WTF::URL *this)
{
  WTF::URL::~URL(this);
}

{
  WTF::StringImpl *v1;
  _QWORD v2[4];
  WTF::StringImpl *v3;

  v2[1] = this;
  v2[0] = 0;
  v2[3] = this;
  v2[2] = v2;
  v3 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v3)
    WTF::StringImpl::deref(v3, v1);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  return a1;
}

{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::HTTPHeaderMap::~HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  WebCore::HTTPHeaderMap::~HTTPHeaderMap(this);
}

{
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::HTTPHeaderMap *)((char *)this + 16));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(this);
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  WebCore::HTTPHeaderMap::UncommonHeader *v2;
  WebCore::HTTPHeaderMap::UncommonHeader *v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  WTF::FastMalloc *v2;

  v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(uint64_t result, WTF::FastMalloc *a2)
{
  if (a2)
  {
    if (*(WTF::FastMalloc **)result == a2)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
    }
    return WTF::FastMalloc::free(a2, a2);
  }
  return result;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  WebCore::ExceptionData *v2;
  WebCore::ExceptionData *v3;

  if (*((_DWORD *)a1 + 3))
  {
    v2 = (WebCore::ExceptionData *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (WebCore::ExceptionData *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t WTF::FastMalloc::free(WTF::FastMalloc *this, void *a2)
{
  return WTF::fastFree(this, a2);
}

void WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(WebCore::ExceptionData *a1, WebCore::ExceptionData *a2)
{
  while (a1 != a2)
  {
    WebCore::ExceptionData::~ExceptionData(a1);
    a1 = (WebCore::ExceptionData *)((char *)a1 + 16);
  }
}

void WebCore::ExceptionData::~ExceptionData(WebCore::ExceptionData *this)
{
  WebCore::ExceptionData::~ExceptionData(this);
}

{
  WTF::StringImpl *v1;
  _QWORD v2[4];
  WTF::StringImpl *v3;

  v2[1] = (char *)this + 8;
  v2[0] = 0;
  v2[3] = (char *)this + 8;
  v2[2] = v2;
  v3 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v3)
    WTF::StringImpl::deref(v3, v1);
}

WTF::StringImpl *WTF::StringImpl::deref(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  if (*(_DWORD *)this == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
  *(_DWORD *)this -= 2;
  return this;
}

void WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(WebCore::ExceptionData *a1, WebCore::ExceptionData *a2)
{
  WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(a1, a2);
}

WTF::StringImpl *WTF::VectorDestructor<true,WTF::String>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++v3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

void WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(WebCore::HTTPHeaderMap::UncommonHeader *a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(a1, a2);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a2, &v13);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v11);
  v6 = *a2;
  if (*a2)
  {
    if (v14)
    {
      v7 = v13;
      v13 = 0;
      if (v12)
      {
        v8 = v11;
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v8;
        *(_BYTE *)(a1 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_5:
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v6)
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v10)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
    }
  }
  return result;
}

void sub_196BDD830(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WebCore::HTTPHeaderMap::UncommonHeader *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy(WebCore::HTTPHeaderMap::UncommonHeader *a1, const WebCore::HTTPHeaderMap::UncommonHeader *a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::UncommonHeader>(a1, a2, a3);
}

WebCore::HTTPHeaderMap::UncommonHeader *WTF::VectorCopier<false,WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::UncommonHeader>(WebCore::HTTPHeaderMap::UncommonHeader *result, const WebCore::HTTPHeaderMap::UncommonHeader *a2, uint64_t a3)
{
  WebCore::HTTPHeaderMap::UncommonHeader *v3;
  const WebCore::HTTPHeaderMap::UncommonHeader *i;

  for (i = result; i != a2; i = (const WebCore::HTTPHeaderMap::UncommonHeader *)((char *)i + 16))
  {
    v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)operator new(16, 0, a3);
    result = WebCore::HTTPHeaderMap::UncommonHeader::UncommonHeader(v3, i);
    a3 += 16;
  }
  return result;
}

WebCore::HTTPHeaderMap::UncommonHeader *WebCore::HTTPHeaderMap::UncommonHeader::UncommonHeader(WebCore::HTTPHeaderMap::UncommonHeader *this, const WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  WebCore::HTTPHeaderMap::UncommonHeader::UncommonHeader(this, a2);
  return this;
}

{
  WTF::String::String(this, a2);
  WTF::String::String((WebCore::HTTPHeaderMap::UncommonHeader *)((char *)this + 8), (const WebCore::HTTPHeaderMap::UncommonHeader *)((char *)a2 + 8));
  return this;
}

WebCore::HTTPHeaderMap::CommonHeader *WTF::VectorCopier<false,WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::CommonHeader>(WebCore::HTTPHeaderMap::CommonHeader *result, const CommonHeader *a2, uint64_t a3)
{
  WebCore::HTTPHeaderMap::CommonHeader *v3;
  const CommonHeader *i;

  for (i = (const CommonHeader *)result; i != a2; i = (const CommonHeader *)((char *)i + 16))
  {
    v3 = (WebCore::HTTPHeaderMap::CommonHeader *)operator new(16, 0, a3);
    result = WebCore::HTTPHeaderMap::CommonHeader::CommonHeader(v3, i);
    a3 += 16;
  }
  return result;
}

uint64_t operator new(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

WebCore::HTTPHeaderMap::CommonHeader *WebCore::HTTPHeaderMap::CommonHeader::CommonHeader(WebCore::HTTPHeaderMap::CommonHeader *this, const CommonHeader *a2)
{
  WebCore::HTTPHeaderMap::CommonHeader::CommonHeader(this, a2);
  return this;
}

{
  *(_WORD *)this = *(_WORD *)a2;
  WTF::String::String((WebCore::HTTPHeaderMap::CommonHeader *)((char *)this + 8), (const WTF::String *)((char *)a2 + 8));
  return this;
}

WTF::String *WTF::String::String(WTF::String *this, const WTF::String *a2)
{
  WTF::String::String(this, a2);
  return this;
}

{
  _DWORD *v5;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    WTF::StringImpl::ref(v5);
  *(_QWORD *)this = v5;
  return this;
}

_DWORD *WTF::StringImpl::ref(_DWORD *this)
{
  *this += 2;
  return this;
}

void WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(const char ***this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*((_BYTE *)this + 136))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 16);
  if (*((_BYTE *)this + 120))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 14);
  if (*((_BYTE *)this + 104))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 12);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 11);
  v3 = (WTF::StringImpl *)this[10];
  this[10] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (uint64_t)this[9];
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v2);
  v5 = (WTF::StringImpl **)this[8];
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 6);
  v7 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 3);
  v9 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)this[1];
  this[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector **WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(WebCore::AdditionalNetworkLoadMetricsForWebInspector **this, WTF::StringImpl *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v5;
  WTF::StringImpl *v6;

  v2 = (WTF *)this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = this[16];
    *((_QWORD *)v2 + 16) = 0;
    if (v5)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WTF::RefCountedBase::derefBase(WTF::RefCountedBase *this)
{
  return WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(this) & 1;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (const void **)(a1 + 40);
    do
    {
      if (*((_DWORD *)v4 - 10) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::RefCountedBase::ref(WTF::RefCountedBase *this)
{
  WTF::RefCountedBase::refAllowingPartiallyDestroyed(this);
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = a1 + 16 * i;
      if (*(_DWORD *)v4)
        v5 = 1;
      else
        v5 = *(_BYTE *)(v4 + 4) == 0;
      if (v5 || !*(_BYTE *)(v4 + 5))
      {
        v6 = *(_QWORD *)(v4 + 8);
        if ((v6 & 0x8000000000000) != 0)
        {
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            v13 = a1;
            v11 = i;
            v12 = v2;
            WTF::fastFree((WTF *)v7, a2);
            i = v11;
            v2 = v12;
            a1 = v13;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_DWORD *`non-virtual thunk to'WebKit::NetworkResourceLoader::deref(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this - 10, a2);
}

BOOL WebKit::WebLocalFrameLoaderClient::hasHTMLView(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((_BYTE *)this + 50) == 0;
}

uint64_t WebKit::WebUserContentController::userContentExtensionBackend(WebKit::WebUserContentController *this)
{
  return (uint64_t)this + 96;
}

void sub_196BDDF04(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DisplayList::Recorder::hasPlatformContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebKit::WebPageDebuggable::type(WebKit::WebPageDebuggable *this)
{
  return 5;
}

uint64_t WebKit::PlatformCALayerRemote::superlayer(WebKit::PlatformCALayerRemote *this)
{
  return *((_QWORD *)this + 101);
}

void WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::call(uint64_t a1)
{
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 16) + 336));
}

WebCore::RenderView *WebKit::RemoteScrollingCoordinator::coordinatesScrollingForFrameView(WebKit::RemoteScrollingCoordinator *this, const WebCore::LocalFrameView *a2)
{
  WebCore::RenderView *result;

  result = (WebCore::RenderView *)WebCore::LocalFrameView::renderView(a2);
  if (result)
    return (WebCore::RenderView *)WebCore::RenderView::usesCompositing(result);
  return result;
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 40);
  return this;
}

uint64_t ___ZN6WebKit12NetworkCache9IOChannelC2EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEE_block_invoke(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void WebKit::VideoPresentationManagerProxy::~VideoPresentationManagerProxy(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  _QWORD v17[4];

  *(_QWORD *)this = off_1E34C9D68;
  v3 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v3 + 64);
  v4 = *(_QWORD *)(v3 + 72);
  v17[0] = "VideoPresentationManagerProxy";
  v17[1] = 30;
  v17[2] = "~VideoPresentationManagerProxy";
  v17[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v17);
  WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(this, a2);
  WebKit::VideoPresentationManagerProxy::invalidate(this, v6);
  v8 = *((_QWORD *)this + 12);
  if (v8)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v7);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v7);
  v10 = *((_QWORD *)this + 9);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v9);
  v11 = *((_QWORD *)this + 8);
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v9);
  v12 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[4];
  }
  v13 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v9);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v16);
}

{
  WTF *v2;
  void *v3;

  WebKit::VideoPresentationManagerProxy::~VideoPresentationManagerProxy(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_196BDE108(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  v4 = *(_QWORD *)(v2 + 96);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, a2);
  v6 = *(_QWORD *)(v2 + 72);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v5);
  v7 = *(_QWORD *)(v2 + 64);
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v5);
  v8 = *(_DWORD **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  v9 = *(unsigned int **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  *(_QWORD *)v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), v5);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::VideoPresentationManagerProxy::applicationDidBecomeActive(WebKit::VideoPresentationManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v2 = *((_QWORD *)this + 7);
  v4 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(v2 + 72);
  v11[0] = "VideoPresentationManagerProxy";
  v11[1] = 30;
  v11[2] = "applicationDidBecomeActive";
  v11[3] = v3;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 8);
  v6 = result;
  v8 = v7;
  v9 = *((_QWORD *)this + 8);
  if (v9)
    v10 = v9 + 24 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  if (v10 != result)
  {
    do
    {
      result = WebCore::VideoPresentationInterfaceIOS::applicationDidBecomeActive(*(WebCore::VideoPresentationInterfaceIOS **)(v6 + 16));
      while (1)
      {
        v6 += 24;
        if (v6 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_12;
      }
      v6 = v8;
LABEL_12:
      ;
    }
    while (v6 != v10);
  }
  return result;
}

const char *WebKit::VideoPresentationManagerProxy::invalidate(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  const char *v14;
  const char *result;
  const char *v16;
  uint64_t v17;
  const void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v3 + 64);
  v4 = *(_QWORD *)(v3 + 72);
  v19 = "VideoPresentationManagerProxy";
  v20 = 30;
  v21 = "invalidate";
  v22 = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)&v19);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(v7 + 192) + 152, 0x93u, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 1896));
      v8 = (unsigned int *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
  }
  v11 = *((_QWORD *)this + 9);
  v19 = (const char *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v13 = (const char *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&v19);
  v14 = v12;
  result = v19;
  if (v19)
    v16 = &v19[24 * *((unsigned int *)v19 - 1)];
  else
    v16 = 0;
  if (v16 != v13)
  {
    do
    {
      WebCore::VideoPresentationInterfaceIOS::invalidate(*((WebCore::VideoPresentationInterfaceIOS **)v13 + 2));
      objc_msgSend(*(id *)(*((_QWORD *)v13 + 1) + 40), "removeFromSuperview");
      v17 = *((_QWORD *)v13 + 1);
      v18 = *(const void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = 0;
      if (v18)
        CFRelease(v18);
      objc_msgSend(*(id *)(*((_QWORD *)v13 + 1) + 48), "setPresentationModel:", 0, v19, v20, v21, v22);
      while (1)
      {
        v13 += 24;
        if (v13 == v14)
          break;
        if ((unint64_t)(*(_QWORD *)v13 + 1) > 1)
          goto LABEL_22;
      }
      v13 = v14;
LABEL_22:
      ;
    }
    while (v13 != v16);
    result = v19;
  }
  if (result)
    return (const char *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)result, v12);
  return result;
}

void sub_196BDE41C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(a9, a2);
  _Unwind_Resume(exception_object);
}

WebKit::WebScreenOrientationManagerProxy *WebKit::WebPageProxy::didAttachToRunningProcess(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebPageProxy *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::SystemPreviewController *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  char v29;
  WebKit::WebScreenOrientationManagerProxy *v30;
  WebKit::WebPageProxy *v32[3];
  uint64_t v33;
  uint64_t v34;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1200))(v3);
  v5 = WTF::fastMalloc((WTF *)0x50);
  WebKit::WebFullScreenManagerProxy::WebFullScreenManagerProxy(v5, this, v4);
  v6 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  WebKit::PlaybackSessionManagerProxy::create(this, v32);
  v7 = v32[0];
  v8 = (_DWORD *)*((_QWORD *)this + 47);
  *((WebKit::WebPageProxy **)this + 47) = v32[0];
  if (!v8)
  {
LABEL_9:
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v8[4] != 1)
  {
    --v8[4];
    goto LABEL_9;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  v7 = (WebKit::WebPageProxy *)*((_QWORD *)this + 47);
  if (v7)
LABEL_10:
    ++*((_DWORD *)v7 + 4);
LABEL_11:
  WebKit::VideoPresentationManagerProxy::create(this, v7, v32);
  v9 = (_DWORD *)*((_QWORD *)this + 48);
  *((WebKit::WebPageProxy **)this + 48) = v32[0];
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  if (*((_DWORD *)v7 + 4) == 1)
    (*(void (**)(WebKit::WebPageProxy *))(*(_QWORD *)v7 + 8))(v7);
  else
    --*((_DWORD *)v7 + 4);
  v10 = *((_QWORD *)this + 48);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)(v10 + 16) = v11 + 1;
    *(_BYTE *)(v10 + 32) = *((_BYTE *)this + 392);
    if (v11)
      *(_DWORD *)(v10 + 16) = v11;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v12 = *((_QWORD *)this + 4);
  v13 = WTF::fastMalloc((WTF *)0x58);
  WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(v13, v12 + 8);
  v14 = *((_QWORD *)this + 4);
  v15 = *(_QWORD *)(v14 + 1976);
  *(_QWORD *)(v14 + 1976) = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (WebKit::SystemPreviewController *)WTF::fastMalloc((WTF *)0x130);
  WebKit::SystemPreviewController::SystemPreviewController(v16, this);
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)this + 51, v16);
  v18 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v18 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v17))
  {
    v19 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = this;
    std::unique_ptr<WebKit::ModelElementController>::reset[abi:sn180100]((WTF **)this + 52, v19);
  }
  v20 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v20 = off_1E34DEEB0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = this;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_WORD *)(v20 + 48) = 0;
  *(_QWORD *)(v20 + 64) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 56) = 0;
  v21 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v22 = (uint64_t *)(*((_QWORD *)this + 26) + 160);
  v33 = 153;
  v34 = v21;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v22, (unsigned __int8 *)&v33, v20, (unsigned int **)v32);
  v23 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = v20;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v24 = off_1E34F4800;
  v24[1] = 0;
  v24[2] = &unk_1E34F4838;
  v24[3] = 0;
  v24[4] = this;
  v25 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v26 = (uint64_t *)(*((_QWORD *)this + 26) + 160);
  v33 = 159;
  v34 = v25;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v26, (unsigned __int8 *)&v33, (uint64_t)(v24 + 2), (unsigned int **)v32);
  v27 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = v24;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_DWORD *)this + 99);
  if (v28 == -90)
  {
    v29 = 3;
  }
  else if (v28 == 90)
  {
    v29 = 2;
  }
  else
  {
    v29 = v28 == 180;
  }
  v30 = (WebKit::WebScreenOrientationManagerProxy *)WTF::fastMalloc((WTF *)0x30);
  WebKit::WebScreenOrientationManagerProxy::WebScreenOrientationManagerProxy((uint64_t)v30, (uint64_t)this, v29);
  return std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)this + 156, v30);
}

uint64_t WebKit::WebScreenOrientationManagerProxy::WebScreenOrientationManagerProxy(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v7;
  _QWORD v8[2];

  *(_QWORD *)a1 = off_1E34D8EA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 1896);
  v5 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 160);
  v8[0] = 197;
  v8[1] = v4;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a1, &v7);
  return a1;
}

WebKit::VideoPresentationManagerProxy *WebKit::VideoPresentationManagerProxy::create@<X0>(WebKit::VideoPresentationManagerProxy *this@<X0>, WebKit::WebPageProxy *a2@<X1>, WebKit::VideoPresentationManagerProxy **a3@<X8>)
{
  WebKit::VideoPresentationManagerProxy *v7;
  WebKit::VideoPresentationManagerProxy *result;

  v7 = (WebKit::VideoPresentationManagerProxy *)WTF::fastMalloc((WTF *)0x70);
  result = WebKit::VideoPresentationManagerProxy::VideoPresentationManagerProxy(v7, this, a2);
  *a3 = v7;
  return result;
}

void sub_196BDE86C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::VideoPresentationManagerProxy *WebKit::VideoPresentationManagerProxy::VideoPresentationManagerProxy(WebKit::VideoPresentationManagerProxy *this, WebKit::WebPageProxy *a2, WebKit::PlaybackSessionManagerProxy *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int *v15[4];
  _QWORD v16[2];

  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34C9D68;
  *((_BYTE *)this + 32) = 0;
  *(int32x2_t *)((char *)this + 36) = vdup_n_s32(0x42C80000u);
  v5 = (uint64_t *)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v6 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  ++*((_DWORD *)a3 + 4);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 6) = v6;
  *((_QWORD *)this + 7) = a3;
  *((_OWORD *)this + 6) = 0u;
  v8 = *((_QWORD *)a3 + 8);
  v9 = (unsigned int *)*((_QWORD *)a3 + 9);
  v15[0] = (unsigned int *)"VideoPresentationManagerProxy";
  v15[1] = (unsigned int *)30;
  v15[2] = (unsigned int *)"VideoPresentationManagerProxy";
  v15[3] = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v15);
    v6 = *((_QWORD *)this + 6);
  }
  v10 = *(_QWORD *)(v6 + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 1896);
  v13 = (uint64_t *)(*(_QWORD *)(v11 + 208) + 160);
  v16[0] = 147;
  v16[1] = v12;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v13, (unsigned __int8 *)v16, (uint64_t)this, v15);
  return this;
}

void sub_196BDE9B0(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  unsigned int **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;

  v8 = v2[12];
  if (v8)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, a2);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  v10 = v2[9];
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v9);
  if (*v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::VideoPresentationModelContext,WTF::RawPtrTraits<WebKit::VideoPresentationModelContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationModelContext>>,WTF::Ref<WebCore::VideoPresentationInterfaceAVKit,WTF::RawPtrTraits<WebCore::VideoPresentationInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*v6, v9);
  v11 = (_DWORD *)v2[7];
  v2[7] = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
  v12 = (unsigned int *)v2[6];
  v2[6] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
  }
  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, v9);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v15);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  _BYTE buf[24];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  *(_QWORD *)buf = v23;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, &v24);
  if (v24)
  {
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v7);
      else
        *(_DWORD *)v23 -= 2;
    }
    v8 = *(NSObject **)(a1 + 32);
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      WTF::String::utf8();
      v11 = v25 ? (char *)v25 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v9 = (uint64_t)v25;
      v25 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          v9 = WTF::fastFree((WTF *)v9, v10);
        else
          --*(_DWORD *)v9;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v13 = *v12;
        if ((v13 & 1) != 0)
          break;
        v14 = __ldaxr(v12);
        if (v14 == v13)
        {
          if (!__stxr(v13 | 1, v12))
          {
            v15 = WTF::Logger::observers((WTF::Logger *)v9);
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16)
            {
              v17 = *(uint64_t **)v15;
              v18 = 8 * v16;
              do
              {
                v19 = *v17;
                LODWORD(v25) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)buf, (uint64_t)&v25, 1uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v19 + 16))(v19, a1, a2, buf);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
                v21 = v26;
                v26 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v10);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                ++v17;
                v18 -= 8;
              }
              while (v18);
            }
            v22 = __ldxr(v12);
            if (v22 == 1)
            {
              if (!__stlxr(0, v12))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_196BDECE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  unsigned __int8 *v13;
  int v15;

  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
    {
LABEL_6:
      if (a10)
      {
        if (*(_DWORD *)a10 == 2)
          WTF::StringImpl::destroy(a10, a2);
        else
          *(_DWORD *)a10 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WebKit::PlaybackSessionManagerProxy *WebKit::PlaybackSessionManagerProxy::create@<X0>(WebKit::PlaybackSessionManagerProxy *this@<X0>, WebKit::PlaybackSessionManagerProxy **a2@<X8>)
{
  WebKit::PlaybackSessionManagerProxy *v5;
  WebKit::PlaybackSessionManagerProxy *result;

  v5 = (WebKit::PlaybackSessionManagerProxy *)WTF::fastMalloc((WTF *)0x50);
  result = WebKit::PlaybackSessionManagerProxy::PlaybackSessionManagerProxy(v5, this);
  *a2 = v5;
  return result;
}

void sub_196BDEDE0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManagerProxy *WebKit::PlaybackSessionManagerProxy::PlaybackSessionManagerProxy(WebKit::PlaybackSessionManagerProxy *this, WebKit::WebPageProxy *a2)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v19[4];
  _QWORD v20[2];

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34C8800;
  v4 = (unsigned int **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = *v4;
  if (*v4)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v7 = WebKit::WebPageProxy::logger(a2);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 8) = v7;
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744) + ~(*(_QWORD *)(*((_QWORD *)a2 + 4) + 744) << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = (unsigned int *)(((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27)));
  *((_QWORD *)this + 9) = v13;
  v19[0] = (unsigned int *)"VideoPresentationManagerProxy";
  v19[1] = (unsigned int *)30;
  v19[2] = (unsigned int *)"PlaybackSessionManagerProxy";
  v19[3] = v13;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  v14 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v14)
    v15 = v14 - 16;
  else
    v15 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 1896);
  v17 = (uint64_t *)(*(_QWORD *)(v15 + 208) + 160);
  v20[0] = 48;
  v20[1] = v16;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v17, (unsigned __int8 *)v20, (uint64_t)this, v19);
  return this;
}

void sub_196BDEF60(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  unsigned int **v4;
  uint64_t *v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;

  v7 = (unsigned int *)v2[8];
  v2[8] = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = v2[7];
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), a2);
  if (*v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*v5, a2);
  v12 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E34B7608;
  *(_QWORD *)(a1 + 16) = &unk_1E34B7688;
  *(_QWORD *)(a1 + 24) = &unk_1E34B76D8;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 80) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32), a1, 183, a1);
  return a1;
}

void sub_196BDF0C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  unsigned int **v2;
  uint64_t *v3;
  id *v4;
  uint64_t *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v3;
  objc_destroyWeak(v4);
  v8 = *v5;
  *v5 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v9 = v1[8];
  v1[8] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *v1 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v7);
  _Unwind_Resume(a1);
}

unsigned int *`non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorAddMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v7;
  _QWORD v8[2];

  v4 = *(_QWORD *)(a1 + 1888);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) + 160);
  v8[0] = a3;
  v8[1] = v4;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v5, (unsigned __int8 *)v8, a4, &v7);
}

uint64_t WebKit::WebFullScreenManagerProxy::WebFullScreenManagerProxy(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  _QWORD v16[2];

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34D3720;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = this;
  *(_QWORD *)(a1 + 32) = a3;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = WebKit::WebPageProxy::logger(this);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 64) = v5;
  v8 = *(_QWORD *)(*((_QWORD *)this + 4) + 744) + ~(*(_QWORD *)(*((_QWORD *)this + 4) + 744) << 32);
  v9 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_QWORD *)(a1 + 72) = (v10 >> 31) ^ v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 208);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 1896);
  v16[0] = 166;
  v16[1] = v13;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v12 + 160), (unsigned __int8 *)v16, a1, &v15);
  return a1;
}

uint64_t WebKit::WebPageProxy::logger(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;

  if (!*((_QWORD *)this + 147))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    v3 = (unsigned int *)(v2 + 8);
    *(_QWORD *)v2 = off_1E34B8110;
    *(_BYTE *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = this;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 147);
    *((_QWORD *)this + 147) = v2;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    v9 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
    v10 = v9 >= 0 || v9 == -1;
    if (*(WebKit::WebPageProxy **)(v2 + 16) == this)
      *(_BYTE *)(v2 + 12) = v10;
    do
    {
      v11 = __ldaxr(v3);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v3));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return *((_QWORD *)this + 147);
}

WebKit::SystemPreviewController *WebKit::SystemPreviewController::SystemPreviewController(WebKit::SystemPreviewController *this, WebKit::WebPageProxy *a2)
{
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 18) = 0;
  WTF::URL::invalidate((WebKit::SystemPreviewController *)((char *)this + 144));
  *((_QWORD *)this + 23) = 0;
  WTF::URL::invalidate((WebKit::SystemPreviewController *)((char *)this + 184));
  *((_QWORD *)this + 36) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return this;
}

uint64_t WebKit::PageClientImpl::fullScreenManagerProxyClient(WebKit::PageClientImpl *this)
{
  return (uint64_t)this + 32;
}

uint64_t WebKit::DatabaseUtilities::migrateDataToNewTablesIfNecessary(WebKit::DatabaseUtilities *this)
{
  uint64_t result;
  WebCore::SQLiteDatabase *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  WTF::StringImpl *v30;
  NSObject *v31;
  NSObject *v32;
  void (*v33)(_BYTE *, _BYTE *);
  NSObject *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  uint64_t ErrorMsg;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebKit::DatabaseUtilities *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _BYTE v51[16];
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _BYTE v54[12];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  _BYTE buf[12];
  __int16 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(_QWORD *)this + 32))(this);
  if ((_DWORD)result)
  {
    v3 = (WebKit::DatabaseUtilities *)((char *)this + 16);
    WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v51, (WebKit::DatabaseUtilities *)((char *)this + 16));
    WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v51);
    v4 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(_QWORD *)this + 40))(this);
    if (*(_DWORD *)(v4 + 12))
    {
      v5 = *(unsigned int *)(v4 + 8);
      if ((_DWORD)v5)
      {
        v6 = 32 * v5;
        v7 = *(WTF::StringImpl ***)v4;
        while (!*v7)
        {
          v7 += 4;
          v6 -= 32;
          if (!v6)
            goto LABEL_7;
        }
      }
      else
      {
        v7 = *(WTF::StringImpl ***)v4;
      }
      v35 = *(_QWORD *)v4 + 32 * v5;
      if (v7 != (WTF::StringImpl **)v35)
      {
        v36 = *v7;
LABEL_80:
        if (v36)
          *(_DWORD *)v36 += 2;
        v50 = v36;
        v37 = *v7;
        if (*v7)
          *(_DWORD *)v37 += 2;
        v49 = v37;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"ALTER TABLE ", 13, (uint64_t *)&v50, (uint64_t)" RENAME TO _", 13, (uint64_t *)&v49, buf);
        WebCore::SQLiteDatabase::prepareStatementSlow();
        v39 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = v49;
        v49 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v38);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = v50;
        v50 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v38);
          else
            *(_DWORD *)v41 -= 2;
        }
        if (*(_DWORD *)((char *)&v56 + 2)
          || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v54) != 101)
        {
          v42 = qword_1ECE715F0;
          if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
          {
            ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&buf[4] = this;
            v60 = 2080;
            v61 = ErrorMsg;
            _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to rename table, error message: %s", buf, 0x16u);
          }
          WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v51);
          if (*(_DWORD *)((char *)&v56 + 2) == -1)
            return MEMORY[0x19AEAFB44](v51);
          v33 = (void (*)(_BYTE *, _BYTE *))*(&off_1E34BC698 + *(unsigned int *)((char *)&v56 + 2));
          goto LABEL_108;
        }
        if (*(_DWORD *)((char *)&v56 + 2) != -1)
          (*(&off_1E34BC698 + *(unsigned int *)((char *)&v56 + 2)))((int)buf, (WebCore::SQLiteStatement *)v54);
        while (1)
        {
          v7 += 4;
          if (v7 == (WTF::StringImpl **)v35)
            break;
          v36 = *v7;
          if (*v7)
          {
            if (v7 != (WTF::StringImpl **)v35)
              goto LABEL_80;
            break;
          }
        }
      }
    }
LABEL_7:
    if (((**(uint64_t (***)(WebKit::DatabaseUtilities *))this)(this) & 1) != 0)
    {
      v48 = this;
      v8 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(_QWORD *)this + 48))(this);
      if (v9)
      {
        v10 = (uint64_t *)v8;
        v11 = 16 * v9;
        while (1)
        {
          v12 = v10[1];
          if (v12)
          {
            if (v12 == 1)
            {
              v13 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v13 = *(WTF::StringImpl **)v54;
            }
          }
          else
          {
            v13 = 0;
          }
          if (MEMORY[0x19AEABBCC](v13, "SubframeUnderTopFrameDomains", 28)
            || MEMORY[0x19AEABBCC](v13, "SubresourceUnderTopFrameDomains", 31)
            || MEMORY[0x19AEABBCC](v13, "SubresourceUniqueRedirectsTo", 28)
            || MEMORY[0x19AEABBCC](v13, "TopFrameLinkDecorationsFrom", 27))
          {
            WebCore::SQLiteDatabase::prepareStatement();
          }
          else
          {
            if (v13)
              *(_DWORD *)v13 += 4;
            v52 = v13;
            v53 = v13;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"INSERT INTO ", 13, (uint64_t *)&v53, (uint64_t)" SELECT DISTINCT * FROM _", 26, (uint64_t *)&v52, v54);
            WebCore::SQLiteDatabase::prepareStatementSlow();
            v15 = *(WTF::StringImpl **)v54;
            *(_QWORD *)v54 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v52;
            v52 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v14);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v53;
            v53 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
          }
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v14);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (*(_DWORD *)((char *)&v61 + 2)
            || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) != 101)
          {
            break;
          }
          if (*(_DWORD *)((char *)&v61 + 2) != -1)
            (*(&off_1E34BC698 + *(unsigned int *)((char *)&v61 + 2)))((int)v54, (WebCore::SQLiteStatement *)buf);
          v10 += 2;
          v11 -= 16;
          if (!v11)
            goto LABEL_42;
        }
        WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v51);
        v31 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
        {
          v44 = *v10;
          v45 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
          *(_DWORD *)v54 = 134218498;
          *(_QWORD *)&v54[4] = v48;
          v55 = 2080;
          v56 = v44;
          v57 = 2080;
          v58 = v45;
          _os_log_error_impl(&dword_196BCC000, v31, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary (table %s) failed to migrate schema, error message: %s", v54, 0x20u);
        }
        if (*(_DWORD *)((char *)&v61 + 2) != -1)
          (*(&off_1E34BC698 + *(unsigned int *)((char *)&v61 + 2)))((int)v54, (WebCore::SQLiteStatement *)buf);
        return MEMORY[0x19AEAFB44](v51);
      }
LABEL_42:
      v18 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(_QWORD *)v48 + 48))(v48);
      if (v19)
      {
        v20 = v18;
        v21 = v18 + 16 * v19;
        while (1)
        {
          v22 = *(_QWORD *)(v20 + 8);
          v23 = v22 != 0;
          v24 = v22 - 1;
          if (v23)
            v25 = v24;
          else
            v25 = 0;
          if (v25 >> 31
            || (v26 = (v25 + 12), __OFADD__((_DWORD)v25, 12))
            || (v27 = *(_BYTE **)v20, WTF::tryFastCompactMalloc((WTF *)(v26 + 20)), (v28 = *(_QWORD *)buf) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x196BDFBF0);
          }
          *(_QWORD *)(*(_QWORD *)buf + 20) = *(_QWORD *)"DROP TABLE _";
          *(_DWORD *)v28 = 2;
          *(_DWORD *)(v28 + 4) = v26;
          *(_QWORD *)(v28 + 8) = v28 + 20;
          *(_DWORD *)(v28 + 16) = 4;
          *(_DWORD *)(v28 + 28) = 1595950412;
          if ((_DWORD)v25)
          {
            v29 = (_BYTE *)(v28 + 32);
            if ((_DWORD)v25 == 1)
              *v29 = *v27;
            else
              memcpy(v29, v27, v25);
          }
          WebCore::SQLiteDatabase::prepareStatementSlow();
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v28, v30);
          else
            *(_DWORD *)v28 -= 2;
          if (*(_DWORD *)((char *)&v56 + 2)
            || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v54) != 101)
          {
            break;
          }
          if (*(_DWORD *)((char *)&v56 + 2) != -1)
            (*(&off_1E34BC698 + *(unsigned int *)((char *)&v56 + 2)))((int)buf, (WebCore::SQLiteStatement *)v54);
          v20 += 16;
          if (v20 == v21)
            goto LABEL_62;
        }
        WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v51);
        v32 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
        {
          v46 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v48;
          v60 = 2080;
          v61 = v46;
          _os_log_error_impl(&dword_196BCC000, v32, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to drop temporary tables, error message: %s", buf, 0x16u);
        }
        if (*(_DWORD *)((char *)&v56 + 2) == -1)
          return MEMORY[0x19AEAFB44](v51);
        v33 = (void (*)(_BYTE *, _BYTE *))*(&off_1E34BC698 + *(unsigned int *)((char *)&v56 + 2));
LABEL_108:
        v33(buf, v54);
        return MEMORY[0x19AEAFB44](v51);
      }
LABEL_62:
      if (((*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(_QWORD *)v48 + 8))(v48) & 1) != 0)
      {
        WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v51);
        return MEMORY[0x19AEAFB44](v51);
      }
      v34 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        v47 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)v54 = 134218242;
        *(_QWORD *)&v54[4] = v48;
        v55 = 2080;
        v56 = v47;
        _os_log_error_impl(&dword_196BCC000, v34, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to create unique indices, error message: %s", v54, 0x16u);
      }
    }
    WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v51);
    return MEMORY[0x19AEAFB44](v51);
  }
  return result;
}

uint64_t WebKit::WebPreferences::platformGetUInt32UserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, unsigned int *a3)
{
  void *v6;
  const WTF::String *v7;
  uint64_t result;
  void *v9;

  if (!*((_QWORD *)this + 2))
    return 0;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result)
    return result;
  v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  *a3 = objc_msgSend(v9, "intValue");
  return 1;
}

uint64_t WebKit::WebPreferences::platformGetStringUserValueForKey(WebKit **this, const WTF::String **a2, WTF::StringImpl **a3)
{
  void *v6;
  const WTF::String *v7;
  uint64_t result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (this[2])
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(this[2], this[3], *a2, v7));
    if (!result)
      return result;
    v9 = result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      MEMORY[0x19AEABCC8](&v15, v9);
      v11 = v15;
      v15 = 0;
      v12 = *a3;
      *a3 = v11;
      if (v12)
      {
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 != 2)
        {
LABEL_8:
          *(_DWORD *)v12 = v13;
          return 1;
        }
        WTF::StringImpl::destroy(v12, v10);
        v12 = v15;
        v15 = 0;
        if (v12)
        {
          v13 = *(_DWORD *)v12 - 2;
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, v14);
            return 1;
          }
          goto LABEL_8;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t WebKit::WebPreferences::platformGetDoubleUserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, double *a3)
{
  void *v6;
  const WTF::String *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;

  if (!*((_QWORD *)this + 2))
    return 0;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result)
    return result;
  v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  objc_msgSend(v9, "doubleValue");
  *(_QWORD *)a3 = v10;
  return 1;
}

uint64_t WebKit::setDebugBoolValueIfInUserDefaults(WebKit **this, const WTF::String **a2, const WTF::String *a3, const WTF::String **a4, const WTF::String *a5, WebKit::WebPreferencesStore *a6)
{
  uint64_t result;
  void *v9;

  result = WebKit::debugUserDefaultsValue(this, a2, a3, a4, a5);
  if (result)
  {
    v9 = (void *)result;
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return WebKit::WebPreferencesStore::setBoolValueForKey(a5, a4, objc_msgSend(v9, "BOOLValue"));
  }
  return result;
}

uint64_t WebKit::debugUserDefaultsValue(WebKit **this, const WTF::String **a2, const WTF::String *a3, const WTF::String **a4, const WTF::String *a5)
{
  const WTF::String *v9;
  void *v10;
  WebKit *v11;
  uint64_t result;
  __CFString *v13;
  const __CFString *v14;

  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults", a3, a4, a5);
  v11 = *this;
  if (!*this
    || !*((_DWORD *)v11 + 1)
    || (result = objc_msgSend(v10, "objectForKey:", WebKit::makeKey(v11, *a2, *a4, v9))) == 0)
  {
    if (*(_QWORD *)a3)
      v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    if (*a4)
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    return objc_msgSend(v10, "objectForKey:", -[__CFString stringByAppendingString:](v13, "stringByAppendingString:", v14));
  }
  return result;
}

uint64_t WebKit::WebPreferences::platformGetBoolUserValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, BOOL *a3)
{
  void *v6;
  const WTF::String *v7;
  uint64_t result;
  void *v9;

  if (!*((_QWORD *)this + 2))
    return 0;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  result = objc_msgSend(v6, "objectForKey:", WebKit::makeKey(*((WebKit **)this + 2), *((const WTF::String **)this + 3), *a2, v7));
  if (!result)
    return result;
  v9 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  *a3 = objc_msgSend(v9, "BOOLValue");
  return 1;
}

const __CFString *WebKit::makeKey(WebKit *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  WTF::StringImpl *v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (this)
    *(_DWORD *)this += 2;
  v13 = this;
  if (a2)
    *(_DWORD *)a2 += 2;
  v12 = a2;
  if (a3)
    *(_DWORD *)a3 += 2;
  v11 = a3;
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v13, (uint64_t *)&v12, (uint64_t *)&v11, &v14);
  if (v14)
  {
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v6 = v14;
    v14 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v14 = 0;
    v5 = &stru_1E351F1B8;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v5;
}

void sub_196BE0114(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  char *v5;
  char *v6;
  unsigned __int128 v7;
  char v8;

  v2 = *result;
  if (*result)
  {
    v3 = *(char **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *__dst = *v3;
        else
          return (uint64_t *)memcpy(__dst, v3, v4);
      }
    }
    else
    {
      v5 = &__dst[v4];
      if (v4 >= 0x10)
      {
        v6 = &__dst[v4 & 0xFFFFFFF0];
        do
        {
          v7 = (unsigned __int128)vld2q_s8(v3);
          v3 += 32;
          *(_OWORD *)__dst = v7;
          __dst += 16;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v8 = *v3;
        v3 += 2;
        *__dst++ = v8;
      }
    }
  }
  return result;
}

unsigned int *WebKit::ProcessThrottler::assertionName(_QWORD *a1, uint64_t a2, int a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  uint64_t v25;

  v4 = "Foreground";
  v5 = 11;
  v6 = "Unknown";
  v7 = 8;
  if (a3 == 1)
  {
    v6 = "Background";
    v7 = 11;
  }
  if (a3 != 3)
  {
    v4 = v6;
    v5 = v7;
  }
  if (a3)
    v8 = v4;
  else
    v8 = "NearSuspended";
  if (a3)
    v9 = v5;
  else
    v9 = 14;
  v10 = *(unsigned int **)(*(_QWORD *)(a2 + 16) + 8);
  v11 = v10 + 4;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 112))(v10);
  if (v14)
    v15 = v14 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    goto LABEL_35;
  }
  v16 = v9 - 1;
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x196BE0404);
  }
  if (__OFADD__((_DWORD)v16, 10)
    || (v17 = v16 + 11, __OFADD__(v16 + 10, 1))
    || (v18 = (v15 + v17), __OFADD__((_DWORD)v15, v17))
    || (v18 & 0x80000000) != 0
    || (v19 = (_BYTE *)v13, WTF::tryFastCompactMalloc((WTF *)(v18 + 20)), !v25))
  {
    *a1 = 0;
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x196BE03E4);
  }
  v20 = (_BYTE *)(v25 + 20);
  *(_DWORD *)v25 = 2;
  *(_DWORD *)(v25 + 4) = v18;
  *(_QWORD *)(v25 + 8) = v25 + 20;
  *(_DWORD *)(v25 + 16) = 4;
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 1)
      *v20 = *v19;
    else
      memcpy((void *)(v25 + 20), v19, v15);
  }
  v21 = &v20[v15];
  *v21 = 32;
  v22 = v21 + 1;
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == 1)
      *v22 = *v8;
    else
      memcpy(v22, v8, v16);
  }
  v23 = &v22[v16];
  *(_QWORD *)v23 = *(_QWORD *)" Assertion";
  *((_WORD *)v23 + 4) = 28271;
  *a1 = v25;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

char **WebKit::ResourceLoadStatisticsStore::sortedTables(WebKit::ResourceLoadStatisticsStore *this)
{
  return &WebKit::ResourceLoadStatisticsStore::sortedTables(void)::sortedTables;
}

uint64_t WebKit::ResourceLoadStatisticsStore::needsUpdatedSchema(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (WebKit::ResourceLoadStatisticsStore::missingReferenceToObservedDomains(this)
    || (WebKit::ResourceLoadStatisticsStore::missingUniqueIndices(this) & 1) != 0)
  {
    return 1;
  }
  WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(this);
  if (HIDWORD(qword_1ECE72980))
  {
    if ((_DWORD)qword_1ECE72980)
    {
      v3 = 32 * qword_1ECE72980;
      v4 = (_QWORD *)qword_1ECE72978;
      result = 0;
      while (!*v4)
      {
        v4 += 4;
        v3 -= 32;
        if (!v3)
          return result;
      }
    }
    else
    {
      v4 = (_QWORD *)qword_1ECE72978;
    }
    v5 = qword_1ECE72978 + 32 * qword_1ECE72980;
    if (v4 != (_QWORD *)v5)
    {
      while (1)
      {
        v4 += 4;
        if (v4 == (_QWORD *)v5)
          break;
        if (*v4)
        {
          result = 0;
          if (v4 == (_QWORD *)v5)
            return result;
        }
      }
    }
  }
  return 0;
}

BOOL WebKit::ResourceLoadStatisticsStore::missingReferenceToObservedDomains(WebKit::ResourceLoadStatisticsStore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _BOOL8 v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[3];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::DatabaseUtilities::currentTableAndIndexQueries(this, (uint64_t)v9);
  v2 = v9[0];
  v9[0] = 0;
  std::pair<WTF::String,std::optional<WTF::String>>::~pair(v9, v3);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (!v2)
    return 0;
  v6 = WTF::StringImpl::find() != -1;
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, v5);
  else
    *(_DWORD *)v2 -= 2;
  return v6;
}

uint64_t WebKit::ResourceLoadStatisticsStore::missingUniqueIndices(WebKit::ResourceLoadStatisticsStore *this)
{
  WebCore::SQLiteDatabase *v2;
  unsigned int v3;
  _BOOL8 v4;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WebKit::VideoPresentationManagerProxy *v12;
  _BYTE v13[16];
  unsigned int v14;
  uint8_t buf[4];
  WebKit::ResourceLoadStatisticsStore *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int Error;
  __int16 v21;
  uint64_t ErrorMsg;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  v3 = v14;
  if (v14)
  {
    v6 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v4 = 0;
      goto LABEL_6;
    }
    v7 = *((_QWORD *)this + 81);
    *(_DWORD *)buf = 134218755;
    v16 = this;
    v17 = 2048;
    v18 = v7;
    v19 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v21 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::missingUniqueIndices: faile"
         "d to prepare statement";
    goto LABEL_14;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v13) == 100)
  {
    if (v14)
    {
      v12 = (WebKit::VideoPresentationManagerProxy *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(v12);
    }
    v4 = (int)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v13) < 13;
    goto LABEL_5;
  }
  v6 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v9 = *((_QWORD *)this + 81);
    v10 = WebCore::SQLiteDatabase::lastError(v2);
    v11 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)buf = 134218755;
    v16 = this;
    v17 = 2048;
    v18 = v9;
    v19 = 1024;
    Error = v10;
    v21 = 2081;
    ErrorMsg = v11;
    v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::missingUniqueIndices: faile"
         "d to step statement";
LABEL_14:
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
  }
  v4 = 0;
LABEL_5:
  v3 = v14;
LABEL_6:
  if (v3 != -1)
    (*(&off_1E34C0CF8 + v3))((int)buf, (WebCore::SQLiteStatement *)v13);
  return v4;
}

uint64_t WebKit::VideoPresentationManagerProxy::callCloseCompletionHandlers(WebKit::VideoPresentationManagerProxy *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;
  int v10;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  v8 = v2;
  v4 = *((_DWORD *)this + 22);
  v3 = *((unsigned int *)this + 23);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v9 = v4;
  v10 = v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v6 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v2;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, a2);
}

void sub_196BE082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

unsigned int **WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

BOOL WebKit::ResourceLoadStatisticsStore::createUniqueIndices(WebKit::ResourceLoadStatisticsStore *this)
{
  WebCore::SQLiteDatabase *v2;
  _BOOL8 result;
  NSObject *v4;
  uint64_t v5;
  int v6;
  WebKit::ResourceLoadStatisticsStore *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  int Error;
  __int16 v12;
  uint64_t ErrorMsg;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  if (WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && (WebCore::SQLiteDatabase::executeCommand() & 1) != 0)
  {
    return 1;
  }
  v4 = qword_1ECE71758;
  result = os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v5 = *((_QWORD *)this + 81);
    v6 = 134218755;
    v7 = this;
    v8 = 2048;
    v9 = v5;
    v10 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v12 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createUniqueIndices: failed to execute statement", (uint8_t *)&v6, 0x26u);
    return 0;
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::createSchema(WebKit::ResourceLoadStatisticsStore *this)
{
  WebCore::SQLiteDatabase *v2;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WebKit::ResourceLoadStatisticsStore *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int Error;
  __int16 v25;
  uint64_t ErrorMsg;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v18 = *((_QWORD *)this + 81);
      v19 = 134218755;
      v20 = this;
      v21 = 2048;
      v22 = v18;
      v23 = 1024;
      Error = WebCore::SQLiteDatabase::lastError(v2);
      v25 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to e"
           "xecute statement createObservedDomain";
      goto LABEL_42;
    }
    return 0;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v5 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v5;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopLevelDomains";
LABEL_42:
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v19, 0x26u);
    return 0;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v7 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v7;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createStorageAccessUnderTopFrameDomains";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v8;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsTo";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v9 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v9;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v10 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v10;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsFrom";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v11 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v11;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameLinkDecorationsFrom";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v12 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v12;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameLoadedThirdPartyScripts";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v13 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v13;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubframeUnderTopFrameDomains";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v14 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v14;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUnderTopFrameDomains";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v15 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v15;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUniqueRedirectsTo";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v4 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      return 0;
    v16 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v16;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUniqueRedirectsFrom";
    goto LABEL_42;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) != 0)
    return WebKit::ResourceLoadStatisticsStore::createUniqueIndices(this);
  v4 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    v17 = *((_QWORD *)this + 81);
    v19 = 134218755;
    v20 = this;
    v21 = 2048;
    v22 = v17;
    v23 = 1024;
    Error = WebCore::SQLiteDatabase::lastError(v2);
    v25 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createOperatingDates";
    goto LABEL_42;
  }
  return 0;
}

float WebKit::PlatformCALayerRemote::contentsScale(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 153);
}

BOOL WebKit::WebLocalFrameLoaderClient::allowScript(WebKit::WebLocalFrameLoaderClient *this, int a2)
{
  uint64_t (*v2)();

  if (!a2)
    return 0;
  if (*((_QWORD *)this + 5))
    v2 = WTF::RefPtr<WebKit::PluginView,WTF::RawPtrTraits<WebKit::PluginView>,WTF::DefaultRefDerefTraits<WebKit::PluginView>>::unspecifiedBoolTypeInstance;
  else
    v2 = 0;
  return v2 == 0;
}

uint64_t WebKit::WebChromeClient::hasStablePageScaleFactor(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 1292);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

API::HTTPCookieStore *WebKit::WebsiteDataStore::cookieStore(WebKit::WebsiteDataStore *this)
{
  API::HTTPCookieStore *result;
  API::HTTPCookieStore *v3;
  uint64_t v4;

  result = (API::HTTPCookieStore *)*((_QWORD *)this + 50);
  if (!result)
  {
    v3 = (API::HTTPCookieStore *)API::Object::newObject(0x30uLL, 66);
    result = API::HTTPCookieStore::HTTPCookieStore(v3, this);
    v4 = *((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return (API::HTTPCookieStore *)*((_QWORD *)this + 50);
    }
  }
  return result;
}

API::HTTPCookieStore *API::HTTPCookieStore::HTTPCookieStore(API::HTTPCookieStore *this, WebKit::WebsiteDataStore *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D9CE8;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v4;
  return this;
}

uint64_t WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect(WebCore::ChromeClient *this, IntRect *a2)
{
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebKit::WebFrame **this)
{
  return WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections(this[2]);
}

uint64_t **__copy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

uint64_t WebKit::PlatformCALayerRemote::customSublayers(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

void WebKit::PlatformCALayerRemote::setAcceleratesDrawing(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((_BYTE *)this + 824) = a2;
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

void WebKit::LogChannels::logLevelString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_196BE1678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,WTF::StringImpl **a22,unsigned int a23,uint64_t a24,char a25)
{
  if (a25)
  {
    if (a22)
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a22, (WTF::StringImpl *)a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_196BE1860(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl **a21)
{
  if (a21)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a21, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WebKit::GPUProcessCreationParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  void *v3;
  int v4;
  uint64_t v5[19];
  unsigned __int8 v6;

  IPC::Decoder::decode<WebKit::GPUProcessCreationParameters>(v5, a2);
  if (v6)
  {
    WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters((uint64_t)a1, v5);
    v4 = v6;
    a1[152] = 1;
    if (v4)
      WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v5, v3);
  }
  else
  {
    *a1 = 0;
    a1[152] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessCreationParameters>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::decode(a2, a1);
  if (!a1[152])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::ensureGPUProcess(WebKit::WebProcessPool *this)
{
  uint64_t result;
  WebKit::GPUProcessProxy *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcessProxy **v8;
  WebKit::WebProcessProxy **v9;
  WebKit::WebProcessProxy *v10;
  unsigned int *v11;
  unsigned int v12;
  WebKit::GPUProcessProxy *v13;
  WebKit::GPUProcessProxy *v14;

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    WebKit::GPUProcessProxy::getOrCreate(&v14);
    v3 = v14;
    v4 = (unsigned int *)((char *)v14 + 16);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v3;
    if (v6)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
    v7 = *((unsigned int *)this + 21);
    if ((_DWORD)v7)
    {
      v8 = (WebKit::WebProcessProxy **)*((_QWORD *)this + 9);
      v9 = &v8[v7];
      do
      {
        v10 = *v8;
        v11 = (unsigned int *)((char *)*v8 + 16);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = v14;
        WebKit::GPUProcessProxy::updatePreferences((uint64_t)v14, v10);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
        ++v8;
      }
      while (v8 != v9);
      if (!v13)
        return *((_QWORD *)this + 22);
    }
    else
    {
      v13 = v14;
      if (!v14)
        return *((_QWORD *)this + 22);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v13 + 4);
    return *((_QWORD *)this + 22);
  }
  return result;
}

uint64_t WebKit::GPUProcessProxy::updatePreferences(uint64_t this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  CFTypeRef *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[2];

  v2 = this;
  v3 = *(_QWORD *)(this + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(this + 144))
  {
    v13 = 0;
    v14[0] = 0;
    *(_DWORD *)((char *)v14 + 7) = 0;
    WebKit::WebProcessProxy::pages(a2, (uint64_t)&v11);
    if (v12)
    {
      v5 = 8 * v12;
      v6 = v11;
      do
      {
        v7 = *(_QWORD *)v6;
        CFRetain(*(CFTypeRef *)(*(_QWORD *)v6 + 8));
        v8 = *(CFTypeRef **)(v7 + 224);
        CFRetain(v8[1]);
        {
          WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v9))WebKit::GPUProcessPreferences::copyEnabledWebPreferences((WebKit::GPUProcessPreferences *)&v13, (const WebKit::WebPreferences *)v8, v10);
        CFRelease(v8[1]);
        CFRelease(*(CFTypeRef *)(v7 + 8));
        v6 += 8;
        v5 -= 8;
      }
      while (v5);
    }
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
    v11 = (char *)&v13;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateGPUProcessPreferences>(v2, &v11, 0, 0);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateGPUProcessPreferences>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 81;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::GPUProcessProxy::getOrCreate(WebKit::GPUProcessProxy **a1@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  WebKit::GPUProcessProxy *v6;
  WebKit::GPUProcessProxy *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  {
    if (WebKit::singleton(void)::singleton)
    {
      v3 = *(unsigned int **)(WebKit::singleton(void)::singleton + 8);
      if (v3)
      {
        v4 = v3 + 4;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        *a1 = (WebKit::GPUProcessProxy *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  v6 = (WebKit::GPUProcessProxy *)WTF::fastMalloc((WTF *)0x1C8);
  v7 = WebKit::GPUProcessProxy::GPUProcessProxy(v6);
  *a1 = v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v7 + 2, (uint64_t)v6);
  v9 = (unsigned int *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  {
    v11 = (unsigned int *)WebKit::singleton(void)::singleton;
    WebKit::singleton(void)::singleton = (uint64_t)v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v8);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = (uint64_t)v9;
  }
}

WebKit::GPUProcessProxy *WebKit::GPUProcessProxy::GPUProcessProxy(WebKit::GPUProcessProxy *this)
{
  char v2;
  WebCore::MockRealtimeMediaSourceCenter *v3;
  WTF::StringImpl **v4;
  __int128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebKit::SandboxExtensionImpl *v22;
  const char **v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebKit::SandboxExtensionImpl *v28;
  const char **v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  WTF::StringImpl *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v40;
  WTF::StringImpl *v41[2];
  WTF::StringImpl *v42[2];
  __int128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl ***v45;
  __int16 v46;
  pid_t v47;
  WebKit::SandboxExtensionImpl *v48[2];
  WTF::StringImpl *v49[2];
  _BYTE v50[40];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  IPC::Encoder *v54;

  v2 = WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(this);
  v3 = (WebCore::MockRealtimeMediaSourceCenter *)WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy((uint64_t)this, v2, 0, 3.0);
  *(_QWORD *)this = off_1E34DCA18;
  *((_QWORD *)this + 3) = &unk_1E34DCB10;
  *((_QWORD *)this + 4) = &unk_1E34DCB68;
  *((_QWORD *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  *((_BYTE *)this + 432) = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(v3);
  *((_QWORD *)this + 56) = 0;
  *(_QWORD *)((char *)this + 436) = 0;
  *((_BYTE *)this + 444) = 0;
  v4 = WebKit::AuxiliaryProcessProxy::connect(this);
  v46 = 0;
  v45 = 0;
  v50[32] = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)v49 = 0u;
  memset(v50, 0, 25);
  WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters((WebKit::AuxiliaryProcessProxy *)v4, v41);
  v5 = *(_OWORD *)v41;
  v7 = v42[0];
  v6 = v42[1];
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)v42 = 0u;
  v43 = v5;
  v44 = v7;
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](&v45, v6);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&v42[1], 0);
  v9 = v42[0];
  v42[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v41[1];
  v41[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v41[0];
  v41[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1EE341DE8 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v52 + 2, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  LOBYTE(v46) = *((_BYTE *)this + 432);
  v47 = getpid();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)v41, &v54);
  v13 = v41[0];
  v41[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v54, v12);
  if (v54)
  {
    v14 = *((_QWORD *)v54 + 1);
    v15 = *((unsigned int *)v54 + 1) | ((unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v14 = 0;
    v15 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v14, v15, v41);
  v17 = v41[0];
  v41[0] = 0;
  v18 = v49[0];
  v49[0] = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v16);
      v19 = v41[0];
      v41[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v18 -= 2;
      v41[0] = 0;
    }
  }
  v20 = v54;
  v54 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(&v40);
  if (v49[0])
  {
    v21 = *((unsigned int *)v49[0] + 1);
    if ((_DWORD)v21)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v49[0] + 1), (WebKit::SandboxExtensionImpl *)(v21 | ((unint64_t)((*((_DWORD *)v49[0] + 4) >> 2) & 1) << 32)), 1, (uint64_t)v41);
      if (LOBYTE(v41[1]))
      {
        v22 = v41[0];
        v41[0] = 0;
        v23 = (const char **)v48[0];
        v48[0] = v22;
        if (!v23 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v23), WTF::fastFree(v24, v25), LOBYTE(v41[1])))
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v41);
      }
    }
  }
  v26 = (WTF::StringImpl *)v40;
  if (v40)
  {
    v27 = *(unsigned int *)(v40 + 4);
    if ((_DWORD)v27)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v40 + 8), (WebKit::SandboxExtensionImpl *)(v27 | ((unint64_t)((*(_DWORD *)(v40 + 16) >> 2) & 1) << 32)), 1, (uint64_t)v41);
      if (LOBYTE(v41[1]))
      {
        v28 = v41[0];
        v41[0] = 0;
        v29 = (const char **)v48[1];
        v48[1] = v28;
        if (!v29 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v29), WTF::fastFree(v30, v31), LOBYTE(v41[1])))
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v41);
      }
    }
  }
  WebKit::GPUProcessProxy::platformInitializeGPUProcessParameters(this, (WebKit::GPUProcessCreationParameters *)&v43);
  *((_BYTE *)this + 444) = HIDWORD(v51) != 0;
  v32 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v32 = 66;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 528) = v32 + 16;
  *(_QWORD *)(v32 + 536) = v32 + 16;
  *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v32 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
  v54 = (IPC::Encoder *)v32;
  IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::encode((IPC::Encoder *)v32, (uint64_t)&v43);
  LOBYTE(v41[0]) = 0;
  LOBYTE(v42[0]) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v54, 0, (uint64_t)v41, 1);
  if (LOBYTE(v42[0]))
  {
    v34 = v41[0];
    v41[0] = 0;
    if (v34)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v34 + 8))(v34);
  }
  v35 = v54;
  v54 = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v33);
    WTF::fastFree(v36, v37);
  }
  WebKit::GPUProcessProxy::updateProcessAssertion(this);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v38);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)&v43, v38);
  return this;
}

void WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters(WebKit::GPUProcessCreationParameters *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v3);
  if (*((_BYTE *)this + 104))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 12);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v6);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 6);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 5);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)this + 3, 0);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
}

WTF::StringImpl *WebKit::GPUProcessProxy::platformInitializeGPUProcessParameters(WebKit::GPUProcessProxy *this, WebKit::GPUProcessCreationParameters *a2)
{
  WebKit::GPUProcessProxy *v3;
  void *v4;
  uint64_t v5;
  const char ***v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebKit *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(&v18);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)a2 + 96, (uint64_t)&v18);
  if ((_BYTE)v19)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v18);
  WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(v3, &v18);
  v5 = *((unsigned int *)a2 + 31);
  if ((_DWORD)v5)
  {
    v6 = (const char ***)*((_QWORD *)a2 + 14);
    v7 = 8 * v5;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)a2 + 14);
  if (v9)
  {
    *((_QWORD *)a2 + 14) = 0;
    *((_DWORD *)a2 + 30) = 0;
    WTF::fastFree(v9, v4);
  }
  *((_QWORD *)a2 + 14) = v18;
  v10 = v19;
  v18 = 0;
  v19 = 0;
  *((_QWORD *)a2 + 15) = v10;
  v11 = (WebKit *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v4);
  v12 = WebKit::applicationVisibleName(v11);
  MEMORY[0x19AEABCC8](&v18, v12);
  v14 = v18;
  v18 = 0;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v14;
  if (result)
  {
    v16 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v13);
      result = v18;
      v18 = 0;
      if (!result)
        return result;
      v16 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    *(_DWORD *)result = v16;
  }
  return result;
}

void sub_196BE23D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::applicationVisibleName(WebKit *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_msgSend(v1, "infoDictionary");
  v3 = objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AAC8]);
  v4 = (void *)objc_msgSend(v1, "infoDictionary");
  result = objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AE88]);
  if (v3)
    return v3;
  return result;
}

void WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(WebKit::GPUProcessProxy *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  char v4;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  if (WebKit::WebProcessProxy::shouldEnableRemoteInspector(this))
  {
    v5[0] = (uint64_t)"com.apple.gputools.service";
    v5[1] = 27;
    LOBYTE(v3) = 0;
    v4 = 0;
    WebKit::SandboxExtension::createHandlesForMachLookup(v5, 1uLL, &v3, 0, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

BOOL WebKit::WebProcessProxy::shouldEnableRemoteInspector(WebKit::WebProcessProxy *this)
{
  return CFPreferencesGetAppIntegerValue(CFSTR("RemoteInspectorEnabled"), CFSTR("com.apple.webinspectord"), 0) != 0;
}

WebKit::ProcessThrottlerActivity *WebKit::GPUProcessProxy::updateProcessAssertion(WebKit::GPUProcessProxy *this)
{
  void *v2;
  char v3;
  char v4;
  WebKit::ProcessThrottlerActivity *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::ProcessThrottlerActivity *result;
  WebKit::ProcessThrottlerActivity *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[8];
  int v21;
  WebKit::ProcessThrottlerActivity *v22;
  unsigned int v23;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (!v23)
  {
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
    goto LABEL_19;
  }
  v3 = 0;
  v4 = 0;
  v5 = v22;
  v6 = 8 * v23;
  do
  {
    v7 = *(_QWORD *)v5;
    v5 = (WebKit::ProcessThrottlerActivity *)((char *)v5 + 8);
    v3 |= *(_QWORD *)(*(_QWORD *)(v7 + 736) + 8) != 0;
    v4 |= *(_QWORD *)(*(_QWORD *)(v7 + 752) + 8) != 0;
    v6 -= 8;
  }
  while (v6);
  result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (WebKit::GPUProcessProxy *)((char *)this + 416);
    if (*((_DWORD *)this + 106) != 1
      || (v10 = *(_QWORD *)(*(_QWORD *)v9 + 8)) == 0
      || !*(_QWORD *)(v10 + 8)
      || !*(_BYTE *)(*(_QWORD *)v9 + 32))
    {
      v11 = WTF::fastMalloc((WTF *)0x28);
      v12 = "GPU for foreground view(s)";
      v13 = (char *)this + 200;
      v14 = 1;
      goto LABEL_17;
    }
    return result;
  }
  if ((v4 & 1) == 0)
  {
LABEL_19:
    v20[0] = 0;
    v21 = -1;
    result = (WebKit::ProcessThrottlerActivity *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)this + 416);
    v19 = *((unsigned int *)this + 106);
    if ((_DWORD)v19 != -1)
    {
      if (!(_DWORD)v19)
      {
        *((_QWORD *)this + 52) = 0;
        goto LABEL_24;
      }
      result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, char *))off_1E34DCC50[v19])(&v22, (char *)this + 416);
    }
    *((_QWORD *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
LABEL_24:
    if (v21 != -1)
      return (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, _BYTE *))off_1E34DCC50[v21])(&v22, v20);
    return result;
  }
  v9 = (WebKit::GPUProcessProxy *)((char *)this + 416);
  if (*((_DWORD *)this + 106) != 1
    || (v15 = *(_QWORD *)(*(_QWORD *)v9 + 8)) == 0
    || !*(_QWORD *)(v15 + 8)
    || *(_BYTE *)(*(_QWORD *)v9 + 32))
  {
    v11 = WTF::fastMalloc((WTF *)0x28);
    v12 = "GPU for background view(s)";
    v13 = (char *)this + 200;
    v14 = 0;
LABEL_17:
    v22 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v11, (uint64_t)v13, v12, 27, v14, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v9, (WebKit::ProcessThrottlerActivity **)v9, &v22);
    result = v22;
    v22 = 0;
    if (result)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, v16);
      return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  int v6;

  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode((uint64_t)a1, a2);
  v4 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 40));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 64);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 112);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 128));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 136);
}

char *IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 4);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 6);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 10);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 12);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 14);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 16);
  LOBYTE(v2) = v2[18];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(IPC::Encoder *a1, char *a2)
{
  int v4;
  char *result;
  char v6;
  id v7;

  v4 = a2[1];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (a2[1])
    {
      v6 = *a2;
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v6;
    }
    else
    {
      v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Decoder::decode<std::tuple<WebKit::GPUProcessCreationParameters>>(v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::GPUProcessCreationParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::GPUProcessCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[152])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196BE2A1C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196BE2E94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  unsigned int *v18;
  unsigned int v20;
  unsigned int v21;

  if (v18)
  {
    do
    {
      v20 = __ldaxr(v18);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v18));
    if (!v21)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  if (cf)
    CFRelease(cf);
  if (a14)
  {
    if (a12 != -1)
      ((void (*)(__int16 *, char *))off_1E34CE498[a12])(&a16, &a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *a3 = v6;
      v7 = (unsigned int *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      a3[1] = v7;
      v8 = (const void *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v8)
        CFRelease(v8);
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      a3 += 2;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_196BE319C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef cf)
{
  const void *v15;
  const void *v16;
  const void *v17;

  if (cf)
    CFRelease(cf);
  if (a14)
    CFRelease(a14);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  _Unwind_Resume(exception_object);
}

void initializeMethods(_WKRemoteObjectInterface *a1, Protocol *a2)
{
  Protocol **v4;
  unint64_t v5;
  unint64_t v6;
  Protocol *v7;
  unsigned int outCount;

  outCount = 0;
  v4 = protocol_copyProtocolList(a2, &outCount);
  v5 = outCount;
  if (outCount)
  {
    v6 = 0;
    do
    {
      v7 = v4[v6];
      if (v7 != (Protocol *)&unk_1EE343580)
      {
        initializeMethods(a1, v7);
        v5 = outCount;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  free(v4);
  initializeMethods(a1, a2, 1);
  initializeMethods(a1, a2, 0);
}

void sub_196BE3690(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void initializeMethods(_WKRemoteObjectInterface *a1, Protocol *p, BOOL isRequiredMethod)
{
  void *v5;
  objc_method_description *v6;
  uint64_t v7;
  uint64_t *p_methods;
  CFTypeRef *v9;
  char *name;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  CFTypeRef v22;
  const void *v23;
  uint64_t v24;
  WTF *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  const void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  CFTypeRef v35;
  void *v36;
  CFTypeRef v37;
  uint64_t MethodTypeEncoding;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef *v43;
  CFTypeRef *v44;
  __int128 v45;
  CFTypeRef v46[2];
  CFTypeRef cf[3];
  unsigned int outCount;

  outCount = 0;
  v6 = protocol_copyMethodDescriptionList(p, isRequiredMethod, 1, &outCount);
  if (outCount)
  {
    v7 = 0;
    p_methods = (uint64_t *)&a1->_methods;
    v9 = &v46[1];
    while (1)
    {
      name = (char *)v6[v7].name;
      *(_OWORD *)v46 = 0u;
      *(_OWORD *)cf = 0u;
      v45 = 0u;
      v11 = *p_methods;
      if (*p_methods
        || (WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(p_methods, 0), (v11 = *p_methods) != 0))
      {
        v12 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        v12 = 0;
      }
      v13 = (unint64_t)&name[~((_QWORD)name << 32)] ^ ((unint64_t)&name[~((_QWORD)name << 32)] >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = (uint64_t *)(v11 + 56 * v16);
      v18 = *v17;
      if (*v17)
      {
        v39 = 0;
        v40 = 1;
        while ((char *)v18 != name)
        {
          if (v18 == -1)
            v39 = v17;
          v16 = (v16 + v40) & v12;
          v17 = (uint64_t *)(v11 + 56 * v16);
          v18 = *v17;
          ++v40;
          if (!*v17)
          {
            if (v39)
            {
              v39[6] = 0;
              *((_OWORD *)v39 + 1) = 0u;
              *((_OWORD *)v39 + 2) = 0u;
              *(_OWORD *)v39 = 0u;
              --*(_DWORD *)(*p_methods - 16);
              v17 = v39;
            }
            goto LABEL_6;
          }
        }
        goto LABEL_22;
      }
LABEL_6:
      *v17 = (uint64_t)name;
      v19 = *((unsigned int *)v17 + 5);
      v20 = (WTF *)v17[1];
      if ((_DWORD)v19)
      {
        v43 = v9;
        v41 = 8 * v19;
        do
        {
          if (*(_QWORD *)v20)
            WTF::fastFree((WTF *)(*(_QWORD *)v20 - 16), v5);
          v20 = (WTF *)((char *)v20 + 8);
          v41 -= 8;
        }
        while (v41);
        v20 = (WTF *)v17[1];
        v9 = v43;
      }
      if (v20)
      {
        v17[1] = 0;
        *((_DWORD *)v17 + 4) = 0;
        WTF::fastFree(v20, v5);
      }
      v17[1] = v45;
      v21 = *((_QWORD *)&v45 + 1);
      v45 = 0uLL;
      v17[2] = v21;
      v22 = v46[0];
      v46[0] = 0;
      v23 = (const void *)v17[3];
      v17[3] = (uint64_t)v22;
      if (v23)
        CFRelease(v23);
      v24 = *((unsigned int *)v17 + 11);
      v25 = (WTF *)v17[4];
      if ((_DWORD)v24)
      {
        v44 = v9;
        v42 = 8 * v24;
        do
        {
          if (*(_QWORD *)v25)
            WTF::fastFree((WTF *)(*(_QWORD *)v25 - 16), v5);
          v25 = (WTF *)((char *)v25 + 8);
          v42 -= 8;
        }
        while (v42);
        v25 = (WTF *)v17[4];
        v9 = v44;
      }
      if (v25)
      {
        v17[4] = 0;
        *((_DWORD *)v17 + 10) = 0;
        WTF::fastFree(v25, v5);
      }
      v17[4] = (uint64_t)v46[1];
      v26 = cf[0];
      v46[1] = 0;
      cf[0] = 0;
      v17[5] = (uint64_t)v26;
      v27 = cf[1];
      cf[1] = 0;
      v28 = (const void *)v17[6];
      v17[6] = (uint64_t)v27;
      if (v28)
        CFRelease(v28);
      v29 = *p_methods;
      v30 = *p_methods ? *(_DWORD *)(v29 - 12) + 1 : 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *p_methods;
      v32 = *p_methods ? *(_DWORD *)(v31 - 12) : 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
        break;
      if (3 * v34 <= 4 * v33)
        goto LABEL_39;
LABEL_22:
      v35 = cf[1];
      cf[1] = 0;
      if (v35)
        CFRelease(v35);
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
      v37 = v46[0];
      v46[0] = 0;
      if (v37)
        CFRelease(v37);
      WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v36);
      MethodTypeEncoding = _protocol_getMethodTypeEncoding();
      if (!MethodTypeEncoding)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Could not find method type encoding for method \"%s\""), sel_getName(name));
      initializeMethod((MethodInfo *)(v17 + 1), p, (objc_selector *)name, (NSMethodSignature *)objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", MethodTypeEncoding), 0);
      if (++v7 >= (unint64_t)outCount)
        goto LABEL_50;
    }
    if (v34 > 2 * v33)
      goto LABEL_22;
LABEL_39:
    v17 = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(p_methods, v17);
    goto LABEL_22;
  }
LABEL_50:
  free(v6);
}

void sub_196BE3ABC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  MethodInfo::~MethodInfo((MethodInfo *)va, a2);
  _Unwind_Resume(a1);
}

const char *initializeMethod(MethodInfo *a1, Protocol *a2, objc_selector *a3, NSMethodSignature *a4, int a5)
{
  char *types;
  objc_method_description MethodDescription;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  unint64_t v16;
  MethodInfo *v17;
  const char *result;
  const char *v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  const void *v27;
  objc_method_description v28;
  const char *Name;
  void *v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v25 = (const void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", a4);
    v26 = v25;
    if (v25)
      CFRetain(v25);
    v27 = (const void *)*((_QWORD *)a1 + 5);
    *((_QWORD *)a1 + 5) = v26;
    if (v27)
      CFRelease(v27);
    v17 = (MethodInfo *)((char *)a1 + 24);
    v16 = 1;
  }
  else
  {
    MethodDescription = protocol_getMethodDescription(a2, (SEL)a3, 1, 1);
    types = MethodDescription.types;
    if (!MethodDescription.name)
    {
      v28 = protocol_getMethodDescription(a2, (SEL)a3, 0, 1);
      types = v28.types;
      if (!v28.name)
        types = 0;
    }
    v12 = objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", types);
    v13 = (const void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v12);
    v14 = v13;
    if (v13)
      CFRetain(v13);
    v15 = (const void *)*((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v14;
    if (v15)
      CFRelease(v15);
    v16 = 2;
    v17 = a1;
  }
  result = -[NSMethodSignature numberOfArguments](a4, "numberOfArguments");
  if (v16 < (unint64_t)result)
  {
    v19 = result;
    v20 = 0;
    do
    {
      result = -[NSMethodSignature getArgumentTypeAtIndex:](a4, "getArgumentTypeAtIndex:", v16);
      if (*result == 64)
      {
        if (result[1] == 63)
        {
          if (a5)
          {
            v32 = (void *)MEMORY[0x1E0C99DA0];
            Name = protocol_getName(a2);
            objc_msgSend(v32, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Blocks as arguments to the reply block of method (%s / %s) are not allowed"), Name, sel_getName((SEL)a3));
          }
          if ((v20 & 1) != 0)
          {
            v30 = (void *)MEMORY[0x1E0C99DA0];
            v31 = protocol_getName(a2);
            objc_msgSend(v30, "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Only one reply block is allowed per method (%s / %s)"), v31, sel_getName((SEL)a3));
          }
          initializeMethod(a1, a2, a3, (NSMethodSignature *)-[NSMethodSignature _signatureForBlockAtArgumentIndex:](a4, "_signatureForBlockAtArgumentIndex:", v16), 1);
          v20 = 1;
        }
        result = (const char *)-[NSMethodSignature _classForObjectAtArgumentIndex:](a4, "_classForObjectAtArgumentIndex:", v16);
        if (result)
        {
          v34[0] = (uint64_t)result;
          result = (const char *)WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v33, v34, 1);
          v22 = *((unsigned int *)v17 + 3);
          if ((_DWORD)v22 == *((_DWORD *)v17 + 2))
            goto LABEL_19;
        }
        else
        {
          v33 = 0;
          v22 = *((unsigned int *)v17 + 3);
          if ((_DWORD)v22 == *((_DWORD *)v17 + 2))
          {
LABEL_19:
            result = (const char *)WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v22 + 1, (unint64_t)&v33);
            v22 = *((unsigned int *)v17 + 3);
            v23 = *(_QWORD *)v17;
            *(_QWORD *)(*(_QWORD *)v17 + 8 * v22) = 0;
            v24 = *(_QWORD *)result;
            *(_QWORD *)result = 0;
            goto LABEL_15;
          }
        }
      }
      else
      {
        v33 = 0;
        v22 = *((unsigned int *)v17 + 3);
        if ((_DWORD)v22 == *((_DWORD *)v17 + 2))
          goto LABEL_19;
      }
      v23 = *(_QWORD *)v17;
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v22) = 0;
      v24 = v33;
      v33 = 0;
LABEL_15:
      *(_QWORD *)(v23 + 8 * v22) = v24;
      ++*((_DWORD *)v17 + 3);
      if (v33)
        result = (const char *)WTF::fastFree((WTF *)(v33 - 16), v21);
      ++v16;
    }
    while (v19 != (const char *)v16);
  }
  return result;
}

void sub_196BE3DEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_196BE3E74(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;

  if (*v2)
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

void sub_196BE3FF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    WTF::fastFree((WTF *)(a21 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(v4, v14);
    v14 = result;
    v18 = *v4;
    if (*v4)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_16;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = (_QWORD *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(a1, v13);
        *v14 = *v13;
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::rehash(a1, v5, a2);
}

unint64_t classesForSelectorArgument(_WKRemoteObjectInterface *a1, objc_selector *a2, unint64_t a3, int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v14;

  v8 = WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<objc_selector *>>,objc_selector *>((uint64_t)a1, (uint64_t)a2);
  v9 = v8;
  if (a1)
    v10 = (uint64_t *)a1 + 7 * HIDWORD(a1[-1]._protocol);
  else
    v10 = 0;
  if (v10 == v8)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Interface does not contain selector \"%s\""), sel_getName((SEL)a2));
  if (!a4)
  {
    v11 = v9 + 1;
    v12 = *((unsigned int *)v9 + 5);
    if (v12 <= a3)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Argument index %ld is out of range for selector \"%s\""), a3, sel_getName((SEL)a2));
      v12 = *((unsigned int *)v9 + 5);
    }
    if (v12 > a3)
      return *v11 + 8 * a3;
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x196BE4434);
  }
  if (!v9[6])
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Selector \"%s\" does not have a reply block"), sel_getName((SEL)a2));
  v11 = v9 + 4;
  v14 = *((unsigned int *)v9 + 11);
  if (v14 <= a3)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Argument index %ld is out of range for reply block of selector \"%s\""), a3, sel_getName((SEL)a2));
    v14 = *((unsigned int *)v9 + 11);
  }
  if (v14 <= a3)
    goto LABEL_16;
  return *v11 + 8 * a3;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<objc_selector *>>,objc_selector *>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 56 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8)
    {
      v6 = (v6 + v10) & v2;
      v7 = (uint64_t *)(a1 + 56 * v6);
      v8 = *v7;
      ++v10;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 56 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

unint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD *)result;
        v8 = 8 * v5;
        v9 = v4;
        do
        {
          *v7 = 0;
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *v7 = v10;
          if (*(_QWORD *)v9)
            result = WTF::fastFree((WTF *)(*(_QWORD *)v9 - 16), v6);
          ++v7;
          v9 = (WTF *)((char *)v9 + 8);
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t *WTF::HashTable<objc_selector *,WTF::KeyValuePair<objc_selector *,MethodInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<objc_selector *,MethodInfo>>,WTF::DefaultHash<objc_selector *>,WTF::HashMap<objc_selector *,MethodInfo,WTF::DefaultHash<objc_selector *>,WTF::HashTraits<objc_selector *>,WTF::HashTraits<MethodInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<objc_selector *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  const void *v24;
  _QWORD *v25;
  const void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  const void *v30;
  _QWORD *v31;
  const void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  const void *v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t *result;
  uint64_t v56;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_3;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v5 = v3 << (6 * v4 >= 2 * v3);
LABEL_4:
  v6 = WTF::fastMalloc((WTF *)(56 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 56 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v59 = v3;
    v56 = v2;
    do
    {
      v61 = (uint64_t *)(v2 + 56 * v10);
      v12 = *v61;
      if (*v61)
      {
        if (v12 != -1)
        {
          v13 = *a1;
          v60 = v11;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = (uint64_t *)(v13 + 56 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (*v21);
          v22 = v20;
          v23 = v13 + 56 * v20;
          v26 = *(const void **)(v23 + 48);
          v25 = (_QWORD *)(v23 + 48);
          v24 = v26;
          *v25 = 0;
          if (v26)
            CFRelease(v24);
          v27 = v13 + 56 * v22;
          v28 = (_QWORD *)(v27 + 32);
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 32, v7);
          v32 = *(const void **)(v27 + 24);
          v31 = (_QWORD *)(v27 + 24);
          v30 = v32;
          *v31 = 0;
          if (v32)
            CFRelease(v30);
          v33 = v13 + 56 * v22;
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33 + 8, v29);
          *v21 = *v61;
          v35 = v2 + 56 * v10;
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v33 + 16) = 0;
          v37 = *(_QWORD *)(v35 + 8);
          v36 = v35 + 8;
          *(_QWORD *)(v35 + 8) = 0;
          *(_QWORD *)(v33 + 8) = v37;
          v38 = *(_DWORD *)(v35 + 16);
          *(_DWORD *)(v35 + 16) = 0;
          *(_DWORD *)(v33 + 16) = v38;
          v39 = *(_DWORD *)(v35 + 20);
          *(_DWORD *)(v35 + 20) = 0;
          *(_DWORD *)(v33 + 20) = v39;
          v41 = *(_QWORD *)(v35 + 24);
          v40 = (const void **)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          *v31 = v41;
          *v28 = 0;
          v28[1] = 0;
          v43 = *(_QWORD *)(v35 + 32);
          v42 = v35 + 32;
          *(_QWORD *)v42 = 0;
          *v28 = v43;
          v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v33 + 40) = v44;
          v45 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *(_DWORD *)(v33 + 44) = v45;
          v46 = *(_QWORD *)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          *v25 = v46;
          v47 = *(const void **)(v42 + 16);
          *(_QWORD *)(v42 + 16) = 0;
          if (v47)
            CFRelease(v47);
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v42, v34);
          v49 = *v40;
          *v40 = 0;
          if (v49)
            CFRelease(v49);
          WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36, v48);
          v2 = v56;
          v11 = v60;
          if (v61 == a2)
            v11 = v21;
        }
      }
      else
      {
        v50 = v2 + 56 * v10;
        v51 = *(const void **)(v50 + 48);
        *(_QWORD *)(v50 + 48) = 0;
        if (v51)
          CFRelease(v51);
        v52 = v2 + 56 * v10;
        WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v52 + 32, v7);
        v54 = *(const void **)(v52 + 24);
        *(_QWORD *)(v52 + 24) = 0;
        if (v54)
          CFRelease(v54);
        WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 56 * v10 + 8, v53);
      }
      ++v10;
    }
    while (v10 != v59);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    do
    {
      if (*(_QWORD *)v4)
        WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
      v4 = (WTF *)((char *)v4 + 8);
      v6 -= 8;
    }
    while (v6);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRepaintCount(uint64_t a1)
{
  return *(unsigned int *)(a1 - 428);
}

uint64_t WebKit::RemoteScrollingCoordinator::scheduleTreeStateCommit(WebKit::RemoteScrollingCoordinator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 19) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 264))(*(_QWORD *)(v2 + 72));
}

id *WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::repositionScrollingLayers(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  id *result;

  result = (id *)*((_QWORD *)this + 12);
  if (result)
    return (id *)WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(result);
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay((uint64_t)this, 0);
}

uint64_t WebKit::PageClientImpl::isFullScreen(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if ((objc_msgSend(WeakRetained, "hasFullScreenWindowController") & 1) != 0)
  {
    v2 = objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "isFullScreen");
    if (!WeakRetained)
      return v2;
    goto LABEL_5;
  }
  v2 = 0;
  if (WeakRetained)
LABEL_5:
    CFRelease(WeakRetained);
  return v2;
}

void sub_196BE4D58(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CGAffineTransform *WebKit::PlatformCALayerRemote::enumerateRectsBeingDrawn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteLayerBackingStore::enumerateRectsBeingDrawn(*(_QWORD *)(a1 + 472), a2, a3);
}

void API::SecurityOrigin::~SecurityOrigin(API::SecurityOrigin *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E34BC2E0;
  v2 = *((unsigned int *)this + 10);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E34BC158[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E34BC2E0;
  v2 = *((unsigned int *)this + 10);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E34BC158[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  MEMORY[0x19AEB936C](this, 0x10E3C40DE8DBC46);
}

void sub_196BE4EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t API::SecurityOrigin::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v4;
  WebKit *v5;
  uint64_t result;
  char v7;
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)API::Object::newObject(0x30uLL, 18);
  v5 = (WebKit *)WebCore::SecurityOriginData::isolatedCopy();
  *v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *v4 = off_1E34BC2E0;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)v8);
  *a1 = v4;
  if (v9 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34BC158[v9])(&v7, v8);
  return result;
}

{
  _QWORD *v4;
  WebKit *v5;
  uint64_t result;
  char v7;
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)API::Object::newObject(0x30uLL, 18);
  v5 = (WebKit *)WebCore::SecurityOriginData::isolatedCopy();
  *v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *v4 = off_1E34BC2E0;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)v8);
  *a1 = v4;
  if (v9 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34C9598[v9])(&v7, v8);
  return result;
}

void sub_196BE4FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  void *v16;

  if (a16 != -1)
    ((void (*)(char *, char *))off_1E34BC158[a16])(&a12, &a13);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void WebKit::WebUserContentControllerProxy::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  if (*((_WORD *)a3 + 25) == 2803)
    IPC::handleMessageAsync<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserContentControllerProxy,WebKit::WebUserContentControllerProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t))WebKit::WebUserContentControllerProxy::didPostMessage, 0);
  CFRelease(this[1]);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::FrameInfoData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 296))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BE50A8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ScriptMessageHandlerDelegate::supportsAsyncReply(ScriptMessageHandlerDelegate *this)
{
  return *((unsigned __int8 *)this + 32);
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 64);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()
{
  uint64_t v0;
  char v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  if (WebCore::operator==())
    v0 = WebCore::operator==();
  else
    v0 = 0;
  if (DWORD2(v6) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[DWORD2(v6)])(&v2, &v5);
  DWORD2(v6) = -1;
  if (DWORD2(v4) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[DWORD2(v4)])(&v2, &v3);
  return v0;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebKit::FrameInfoData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  char v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char v22;
  char v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  const void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  WTF::StringImpl *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  char v59;
  char v60;
  __int128 v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  _BYTE v65[192];
  const void *v66;
  char v67;
  char v68;
  _BYTE v69[8];
  _BYTE v70[192];
  CFTypeRef cf;
  _BYTE v72[24];
  int v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  char v77;
  int v78;
  char v79;
  char v80;
  _BYTE v81[24];
  int v82;
  char v83;
  uint64_t v84;

  v2 = a1;
  v84 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_52;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v36 = v4;
    v37 = 0;
    goto LABEL_53;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    v57 = 0;
    v9 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v40 = v2[3];
    if (!v40)
    {
      v5 = 0;
      v10 = 0;
      v4 = 0;
      goto LABEL_57;
    }
    if (!v4)
    {
      v5 = 0;
      v10 = 0;
LABEL_57:
      v57 = 1;
LABEL_58:
      *v2 = 0;
      v2[1] = 0;
      v41 = v2[3];
      if (v41)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v5);
          v42 = *v2;
          v4 = v2[1];
        }
        else
        {
          v42 = 0;
        }
      }
      else
      {
        v42 = 0;
        v4 = 0;
      }
LABEL_60:
      *v2 = 0;
      v2[1] = 0;
      v43 = v2[3];
      if (v43)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v42);
          v5 = *v2;
          v4 = v2[1];
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        v5 = 0;
        v4 = 0;
      }
      goto LABEL_62;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v5);
    v9 = 0;
    v5 = *v2;
    v4 = v2[1];
    v57 = 1;
LABEL_5:
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    if (v4 <= v2[2] - v5)
      goto LABEL_58;
    v11 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v11 + 1);
    if (!v5)
    {
      v42 = 0;
      goto LABEL_60;
    }
    v12 = *v11;
    if (v12 < 2)
    {
      v13 = 0;
      v14 = v12 != 0;
      goto LABEL_12;
    }
LABEL_62:
    *v2 = 0;
    v2[1] = 0;
    v44 = v2[3];
    if (v44 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v5);
    v45 = *v2;
    v46 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v47 = v2[3];
    if (v47 && v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
    v14 = 0;
    v13 = 1;
LABEL_12:
    IPC::Decoder::decode<WebCore::ResourceRequest>(v2, (uint64_t)v65);
    IPC::Decoder::decode<WebCore::SecurityOriginData>(v2, v81);
    IPC::Decoder::decode<WTF::String>(v2, &v63);
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v2, (uint64_t)&v61);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v2, (uint64_t)&v58);
    v15 = IPC::Decoder::decode<unsigned int>(v2);
    v4 = v2[1];
    v16 = (WTF::StringImpl *)*v2;
    v17 = v2[2] - *v2;
    if (v4 <= v17)
    {
      v48 = 0;
      v49 = 0;
      *v2 = 0;
      v2[1] = 0;
      v50 = v2[3];
      if (v50)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
          v49 = *v2;
          v48 = v2[1];
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
      }
      goto LABEL_66;
    }
    v18 = (unsigned __int8 *)v16 + v17;
    v19 = (uint64_t)v16 + v17 + 1;
    v2[2] = v19;
    if (!v16)
    {
      v48 = v4;
      v49 = 0;
LABEL_66:
      *v2 = 0;
      v2[1] = 0;
      v51 = v2[3];
      if (v51 && v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
        v20 = 0;
        v16 = (WTF::StringImpl *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v16 = 0;
        v20 = 0;
      }
      goto LABEL_68;
    }
    v20 = *v18;
    if (v20 < 2)
    {
      v21 = 0;
      v22 = 1;
      goto LABEL_16;
    }
LABEL_68:
    *v2 = 0;
    v2[1] = 0;
    v52 = v2[3];
    if (!v52 || !v4)
    {
      v23 = 0;
      v53 = 0;
      v16 = 0;
      v21 = 1;
LABEL_70:
      *v2 = 0;
      v2[1] = 0;
      v54 = v2[3];
      if (v54 && v53)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v54 + 16))(v54, v16, v53);
        v16 = (WTF::StringImpl *)*v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v16 = 0;
      }
      goto LABEL_72;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v52 + 16))(v52, v16);
    v22 = 0;
    v16 = (WTF::StringImpl *)*v2;
    v4 = v2[1];
    v21 = 1;
    v19 = v2[2];
LABEL_16:
    if (v20)
      v23 = v22;
    else
      v23 = 0;
    v24 = v19 - (_QWORD)v16;
    if (v4 <= v24)
    {
      v53 = 0;
      v56 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v56 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v16 = (WTF::StringImpl *)*v2;
        v53 = v2[1];
      }
      else
      {
        v16 = 0;
      }
      goto LABEL_70;
    }
    v25 = (unsigned __int8 *)v16 + v24;
    v2[2] = (uint64_t)(v25 + 1);
    if (!v16)
    {
      v53 = v4;
      goto LABEL_70;
    }
    v26 = a2;
    v27 = *v25;
    if (v27 <= 1)
    {
      v28 = 0;
      a2 = v27 != 0;
      goto LABEL_23;
    }
LABEL_72:
    *v2 = 0;
    v2[1] = 0;
    v55 = v2[3];
    if (!v55
      || !v4
      || (v26 = a2, (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v55 + 16))(v55, v16), !*v2))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 296) = 0;
      goto LABEL_41;
    }
    a2 = 0;
    v28 = 1;
LABEL_23:
    if (!v57)
    {
      v69[0] = v10;
      if (!v13)
      {
        v69[1] = v14;
        if (v67)
        {
          v2 = (uint64_t *)v70;
          WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v70, (uint64_t)v65);
          v29 = v66;
          v66 = 0;
          cf = v29;
          if (v83)
          {
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v72, (uint64_t)v81);
            if (v64)
            {
              v30 = v63;
              v63 = 0;
              v74 = v30;
              if (v62)
              {
                v75 = v61;
                if (v60)
                {
                  v76 = v58;
                  v77 = v59;
                  if ((v15 & 0xFF00000000) != 0)
                  {
                    v78 = v15;
                    if (!v21)
                    {
                      v79 = v23;
                      if (!v28)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    v36 = 0;
    v37 = 0;
    *v2 = 0;
    v2[1] = 0;
    v38 = v2[3];
    if (v38)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *v2;
        v36 = v2[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
LABEL_53:
    *v2 = 0;
    v2[1] = 0;
    v39 = v2[3];
    if (v39 && v36)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
      v8 = 0;
      v5 = *v2;
      v4 = v2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v8 = 0;
    }
  }
  v80 = a2;
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>(v26, (uint64_t)v69);
  v32 = v74;
  v74 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v73 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v73])(&v68, v72);
  v73 = -1;
  v33 = cf;
  cf = 0;
  if (v33)
    CFRelease(v33);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v70);
LABEL_41:
  if (v64)
  {
    v34 = v63;
    v63 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v16);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  if (v83 && v82 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v82])(v69, v81);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v65);
}

void sub_196BE5838(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  uint64_t v49;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18, a2);
  if (*(_BYTE *)(v47 - 104))
  {
    v49 = *(unsigned int *)(v47 - 112);
    if ((_DWORD)v49 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v49])(&a47, v47 - 136);
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a20);
  _Unwind_Resume(a1);
}

void sub_196BE58B4()
{
  JUMPOUT(0x196BE5878);
}

void sub_196BE58BC()
{
  JUMPOUT(0x196BE58A4);
}

void sub_196BE58C4()
{
  JUMPOUT(0x196BE58ACLL);
}

uint64_t IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t result;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  _BYTE v65[24];
  int v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v65);
  IPC::Decoder::decode<WTF::String>(a2, &v63);
  IPC::Decoder::decode<WTF::String>(a2, &v61);
  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
    goto LABEL_51;
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a2[2] = v8;
  if (!v5)
  {
    v30 = v4;
    v31 = 0;
    goto LABEL_52;
  }
  v9 = *v7;
  if (v9 >= 2)
    goto LABEL_54;
  v59 = 0;
LABEL_5:
  v10 = v8 - v5;
  if (v4 <= v10)
  {
    i = 0;
    v55 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v55 && v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
      v5 = *a2;
      i = a2[1];
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_56;
  }
  v11 = (unsigned __int8 *)(v5 + v10);
  v12 = v5 + v10 + 1;
  a2[2] = v12;
  if (v5)
  {
    if (*v11 >= 2u)
      goto LABEL_58;
    v13 = 0;
LABEL_9:
    v14 = v12 - v5;
    if (v4 <= v14)
    {
      v38 = 0;
      v54 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v54 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        v5 = *a2;
        v38 = a2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_60;
    }
    v15 = (unsigned __int8 *)(v5 + v14);
    v16 = v5 + v14 + 1;
    a2[2] = v16;
    if (!v5)
    {
      v38 = v4;
      goto LABEL_60;
    }
    if (*v15 >= 2u)
      goto LABEL_62;
    v17 = 0;
LABEL_13:
    v18 = v16 - v5;
    if (v4 <= v18)
    {
      v41 = 0;
      v53 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v53 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        v5 = *a2;
        v41 = a2[1];
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_64;
    }
    v19 = (unsigned __int8 *)(v5 + v18);
    v20 = v5 + v18 + 1;
    a2[2] = v20;
    if (!v5)
    {
      v41 = v4;
      goto LABEL_64;
    }
    if (*v19 >= 2u)
      goto LABEL_66;
    v21 = 0;
LABEL_17:
    v22 = v20 - v5;
    if (v4 <= v22)
    {
      v44 = 0;
      v52 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v52 && v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        v5 = *a2;
        v44 = a2[1];
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v23 = (unsigned __int8 *)(v5 + v22);
      a2[2] = (uint64_t)(v23 + 1);
      if (v5)
      {
        if (*v23 < 2u)
        {
          v24 = 0;
          goto LABEL_21;
        }
        goto LABEL_70;
      }
      v44 = v4;
    }
    goto LABEL_68;
  }
  for (i = v4; ; i = 0)
  {
LABEL_56:
    *a2 = 0;
    a2[1] = 0;
    v36 = a2[3];
    if (v36 && i)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v5, i);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_58:
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v5);
      v5 = *a2;
      v4 = a2[1];
      v13 = 1;
      v12 = a2[2];
      goto LABEL_9;
    }
    v38 = 0;
    v5 = 0;
    v13 = 1;
LABEL_60:
    *a2 = 0;
    a2[1] = 0;
    v39 = a2[3];
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v5, v38);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_62:
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v5);
      v5 = *a2;
      v4 = a2[1];
      v17 = 1;
      v16 = a2[2];
      goto LABEL_13;
    }
    v41 = 0;
    v5 = 0;
    v17 = 1;
LABEL_64:
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42 && v41)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v5, v41);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_66:
    *a2 = 0;
    a2[1] = 0;
    v43 = a2[3];
    if (v43 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v5);
      v5 = *a2;
      v4 = a2[1];
      v21 = 1;
      v20 = a2[2];
      goto LABEL_17;
    }
    v44 = 0;
    v5 = 0;
    v21 = 1;
LABEL_68:
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45 && v44)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v5, v44);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_70:
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v5);
    v24 = 1;
LABEL_21:
    result = IPC::Decoder::decode<std::optional<BOOL>>(a2);
    v4 = a2[1];
    v26 = (WTF::StringImpl *)*a2;
    v27 = a2[2] - *a2;
    if (v4 <= v27)
    {
      v47 = 0;
      v48 = 0;
      *a2 = 0;
      a2[1] = 0;
      v49 = a2[3];
      if (v49)
      {
        v58 = result;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
          v48 = *a2;
          v47 = a2[1];
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
        result = v58;
      }
      goto LABEL_73;
    }
    v28 = (unsigned __int8 *)v26 + v27;
    a2[2] = (uint64_t)(v28 + 1);
    if (!v26)
    {
      v47 = v4;
      v48 = 0;
LABEL_73:
      v4 = 0;
      v26 = 0;
      *a2 = 0;
      a2[1] = 0;
      v50 = a2[3];
      if (v50)
      {
        v57 = result;
        if (v47)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48, v47);
          v26 = (WTF::StringImpl *)*a2;
          v4 = a2[1];
        }
        else
        {
          v4 = 0;
          v26 = 0;
        }
        result = v57;
      }
      goto LABEL_74;
    }
    if (*v28 <= 1u)
    {
      v29 = 0;
      goto LABEL_25;
    }
LABEL_74:
    *a2 = 0;
    a2[1] = 0;
    v51 = a2[3];
    if (!v51
      || !v4
      || (v56 = result,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v51 + 16))(v51, v26),
          result = v56,
          !*a2))
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_36;
    }
    v29 = 1;
LABEL_25:
    if (v67 && v64 && v62 && !v59 && !v13 && !v17 && !v21 && !v24 && (result & 0xFF0000) != 0 && !v29)
      break;
    __break(1u);
LABEL_51:
    v30 = 0;
    v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a2;
        v30 = a2[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
LABEL_52:
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33 && v30)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_54:
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v5);
      v5 = *a2;
      v4 = a2[1];
      v59 = 1;
      v8 = a2[2];
      goto LABEL_5;
    }
    v5 = 0;
    v59 = 1;
  }
  result = WebCore::SecurityOrigin::create();
  *(_QWORD *)a1 = v60;
  a1[8] = 1;
LABEL_36:
  if (v62)
  {
    result = (uint64_t)v61;
    v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v64)
  {
    result = (uint64_t)v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v67)
  {
    if (v66 != -1)
      return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v66])(&v63, v65);
  }
  return result;
}

void sub_196BE6028(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22)
{
  WTF::StringImpl *v23;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, v23);
  if (a22)
  {
    if (a20 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a20])(&a15, &a17);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<BOOL>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<BOOL>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v22 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v22;
        v11 = *v22;
        v10 = v22[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_14;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v10 = v1;
    v11 = 0;
LABEL_14:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v21 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v21;
        v2 = *v21;
        v1 = v21[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_15;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    if (!*v4)
    {
      v8 = 0;
      v7 = 0x10000;
      return v8 | v7 | v5;
    }
    if (v1 <= (unint64_t)&v4[-v2 + 1])
    {
      *a1 = 0;
      a1[1] = 0;
      v15 = a1[3];
      if (v15)
      {
        v17 = a1;
        (*(void (**)(_QWORD))(*(_QWORD *)v15 + 16))(a1[3]);
        v6 = 0;
        v1 = 0;
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[3];
        *v17 = 0;
        v17[1] = 0;
        v2 = 0;
        if (v20)
        {
          a1 = v17;
          if (v19)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v19);
            a1 = v17;
            v6 = 0;
            v2 = *v17;
            v1 = v17[1];
          }
        }
        else
        {
          a1 = v17;
        }
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      a1[2] = v4 + 2;
      v6 = v4[1];
      if (v6 < 2)
      {
        v7 = 0x10000;
        v8 = 1;
LABEL_8:
        if (!v6)
          v8 = 0;
        v5 = 256;
        return v8 | v7 | v5;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v23 = v6;
      if (v1)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v2);
      v8 = 0;
      v7 = 0;
      v6 = v23;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    goto LABEL_8;
  }
LABEL_15:
  *a1 = 0;
  a1[1] = 0;
  v14 = a1[3];
  if (v14 && v1)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v2);
  v7 = 0;
  v8 = 0;
  v5 = 0;
  return v8 | v7 | v5;
}

uint64_t IPC::Decoder::decode<WebCore::SecurityOriginData>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::decode(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196BE638C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 32))
  {
    v15 = *(unsigned int *)(v13 + 24);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;
  _BYTE v6[24];
  int v7;
  _BYTE v8[24];
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::Decoder::decode<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v10)
      __break(1u);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v8);
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v6);
    a2[32] = 1;
    if (v7 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v5, v6);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  if (v10)
  {
    if (v9 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(v6, v8);
  }
  return result;
}

void sub_196BE64B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  if (a17 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a17])(&a13, &a14);
  if (a24)
  {
    if (a22 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a22])(&a14, &a19);
  }
  _Unwind_Resume(exception_object);
}

WebCore::HTTPHeaderMap::UncommonHeader *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::~__alt(WebCore::HTTPHeaderMap::UncommonHeader *a1)
{
  std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::~__alt(a1);
  return a1;
}

{
  WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(a1);
  return a1;
}

uint64_t WebCore::SecurityOriginData::Tuple::Tuple(uint64_t a1, uint64_t a2)
{
  WebCore::SecurityOriginData::Tuple::Tuple(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(uint64_t *a1, uint64_t *a2)
{
  WTF::String::String(a1, a2);
  return a1;
}

uint64_t *WTF::String::String(uint64_t *a1, uint64_t *a2)
{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

uint64_t WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(uint64_t *a1)
{
  _QWORD v2[4];

  v2[1] = a1;
  v2[0] = 0;
  v2[3] = a1;
  v2[2] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

unint64_t IPC::Decoder::decode<std::optional<unsigned short>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v33 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        a1 = v33;
        v18 = *v33;
        v17 = v33[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_15;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    v17 = v1;
    v18 = 0;
LABEL_15:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      v32 = a1;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        a1 = v32;
        v2 = *v32;
        v1 = v32[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_16;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = ((v5 + 1) & 0xFFFFFFFFFFFFFFFELL) - v2;
      if (v1 < v7 || v1 - v7 <= 1)
      {
        *a1 = 0;
        a1[1] = 0;
        v25 = a1[3];
        if (!v25)
        {
LABEL_25:
          v14 = 0;
          v12 = 0;
          v11 = 0;
          v13 = 0x10000;
          goto LABEL_12;
        }
        v26 = a1;
        (*(void (**)(_QWORD))(*(_QWORD *)v25 + 16))(a1[3]);
        v14 = 0;
        v27 = *v26;
        v28 = v26[1];
        v29 = v26[3];
        v13 = 0x10000;
        *v26 = 0;
        v26[1] = 0;
        v30 = v26;
        v12 = 0;
        v11 = 0;
        if (v29)
        {
          a1 = v26;
          if (!v28)
            goto LABEL_12;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
          a1 = v26;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      v9 = (unsigned __int16 *)(v2 + v7);
      v10 = *v9;
      a1[2] = v9 + 1;
      v11 = v10 & 0xFF00;
      v12 = v10;
      v13 = 0x10000;
    }
    else
    {
      v13 = 0;
      v12 = 0;
      v11 = 0;
    }
    v14 = 1;
    goto LABEL_12;
  }
LABEL_16:
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  *a1 = 0;
  a1[1] = 0;
  v21 = a1[3];
  if (v21)
  {
    v30 = a1;
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v2);
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
LABEL_20:
    a1 = v30;
  }
LABEL_12:
  v15 = (v12 | v13 | v11) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v14 & 1) << 32);
  if (!v14)
  {
    v22 = *a1;
    v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v23)
      {
        v31 = (v12 | v13 | v11) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v14 & 1) << 32);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
        return v31;
      }
    }
  }
  return v15;
}

WebCore::SecurityOriginData::Tuple *WebCore::SecurityOriginData::Tuple::Tuple(WebCore::SecurityOriginData::Tuple *this, const Tuple *a2)
{
  WebCore::SecurityOriginData::Tuple::Tuple(this, a2);
  return this;
}

{
  WTF::String::String(this, (const WTF::String *)a2);
  WTF::String::String((WebCore::SecurityOriginData::Tuple *)((char *)this + 8), (const WTF::String *)&a2->host);
  *((_DWORD *)this + 4) = a2->port;
  return this;
}

WTF::RefCountedBase *IPC::Decoder::decode<IPC::FormDataReference>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::RefCountedBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<IPC::FormDataReference,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::RefCountedBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::RefCountedBase *)(*(uint64_t (**)(WTF::RefCountedBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::RefCountedBase *IPC::ArgumentCoder<IPC::FormDataReference,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  WTF::RefCountedBase *result;
  const WebKit::SandboxExtensionHandle *v6;
  uint64_t v7;
  WTF::RefCountedBase *v8;
  const char ***v9;
  uint64_t v10;
  WebKit::SandboxExtension *v11;
  unsigned int v12;
  char v13;
  WTF::RefCountedBase *v14;
  char v15;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>(a1, &v14);
  result = (WTF::RefCountedBase *)IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v11);
  v7 = *a1;
  if (!*a1)
    goto LABEL_18;
  LOBYTE(v7) = v15;
  if (!v15 || (LOBYTE(v7) = v13) == 0)
  {
    __break(1u);
LABEL_18:
    *a2 = 0;
    goto LABEL_6;
  }
  v8 = v14;
  v14 = 0;
  if (v12)
  {
    v9 = (const char ***)v11;
    v10 = 8 * v12;
    do
    {
      if (*v9)
        result = (WTF::RefCountedBase *)WebKit::SandboxExtension::consumePermanently(v9, v6);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  *(_QWORD *)a2 = v8;
  LOBYTE(v7) = 1;
LABEL_6:
  a2[8] = v7;
  if (v13)
    result = (WTF::RefCountedBase *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v6);
  if (v15)
  {
    result = v14;
    v14 = 0;
    if (result)
      return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

void sub_196BE6AF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, WTF::RefCountedBase *a13, char a14)
{
  WTF::RefCountedBase *v14;
  WTF::RefCountedBase *v16;

  if (v14)
    WTF::RefCounted<WebCore::FormData>::deref(v14);
  if (a12)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  if (a14)
  {
    v16 = a13;
    a13 = 0;
    if (v16)
      WTF::RefCounted<WebCore::FormData>::deref(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsLayer::allowsTiling(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 10) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerIncrementRepaintCount(uint64_t a1)
{
  _DWORD *v1;
  uint64_t result;

  v1 = (_DWORD *)(a1 - 428);
  result = (*(_DWORD *)(a1 - 428) + 1);
  *v1 = result;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEE4callEv(uint64_t a1)
{
  uint64_t result;

  WTF::initializeMainThread((WTF *)a1);
  _CFPrefsSetDirectModeEnabled();
  _CFPrefsSetReadOnly();
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
  if ((_MergedGlobals_60 & 1) != 0)
  {
    if (HIDWORD(qword_1ECE723E8))
      return WTF::overrideUserPreferredLanguages();
  }
  else
  {
    qword_1ECE723E0 = 0;
    qword_1ECE723E8 = 0;
    _MergedGlobals_60 = 1;
  }
  return result;
}

uint64_t Inspector::RemoteInspectionTarget::automaticInspectionAllowed(Inspector::RemoteInspectionTarget *this)
{
  return 0;
}

BOOL WebCore::GraphicsLayerCA::usesContentsLayer(WebCore::GraphicsLayerCA *this)
{
  return *((_BYTE *)this + 888) != 0;
}

uint64_t ___ZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEi_block_invoke(uint64_t a1)
{
  return munmap(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t WebCore::Timer::fired(WebCore::Timer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setNeedsDisplay(WebCore::TileController **this)
{
  return WebCore::TileController::setNeedsDisplay(this[105]);
}

int8x16_t WebKit::PlatformCALayerRemote::setPosition(int8x16_t *a1, uint64_t a2)
{
  uint64_t v2;
  int8x16_t result;

  v2 = *(_QWORD *)a2;
  a1[26].i32[2] = *(_DWORD *)(a2 + 8);
  a1[26].i64[0] = v2;
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x40uLL));
  a1[4] = result;
  return result;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*,NSError *)#1}::__invoke(uint64_t a1, void *a2)
{
  xpc_object_t xdict;

  if (a2)
  {
    xdict = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(xdict, "message-name", "update-launch-services-database-message");
    xpc_dictionary_set_value(xdict, "launch-services-database", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), xdict);
    if (xdict)

  }
}

void sub_196BE6D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void sub_196BE7354(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Decoder *a10, WTF *a11, int a12)
{
  WTF *v12;
  WTF *v14;
  void *v15;

  if (a10)
  {
    IPC::Decoder::~Decoder(a10);
    WTF::fastFree(v14, v15);
  }
  if (v12 != a11)
  {
    if (a11)
      WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageReceiveQueueMap::get(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  WTF *v27;
  char v28;
  char *v29;

  v3 = *(unsigned __int16 *)(a2 + 50);
  if (v3 >= 0xE98)
    v3 = 3736;
  v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  v5 = a1[1];
  if (!v5)
    goto LABEL_11;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v8 = v6 & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16));
  v9 = (unsigned __int8 *)(v5 + 24 * v8);
  v10 = *v9;
  if (v10 != v4)
  {
    v11 = 1;
    while ((_BYTE)v10)
    {
      v8 = (v8 + v11) & v6;
      v9 = (unsigned __int8 *)(v5 + 24 * v8);
      v10 = *v9;
      ++v11;
      if (v10 == v4)
        goto LABEL_10;
    }
    v9 = (unsigned __int8 *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  }
LABEL_10:
  if ((unsigned __int8 *)(v5 + 24 * *(unsigned int *)(v5 - 4)) != v9)
  {
    v24 = *((unsigned int *)v9 + 4);
    if ((_DWORD)v24 != -1)
    {
      v25 = v9 + 8;
      goto LABEL_33;
    }
  }
  else
  {
LABEL_11:
    v12 = *a1;
    if (*a1)
    {
      v14 = *(_QWORD *)(a2 + 64);
      v15 = *(_DWORD *)(v12 - 8);
      v16 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v4, v14) & v15;
      v17 = (unsigned __int8 *)(v12 + 32 * v16);
      v18 = *v17;
      v19 = *((_QWORD *)v17 + 1);
      if (v18 != v4 || v19 != v14)
      {
        v21 = 1;
        while ((_BYTE)v18 || v19)
        {
          v16 = ((_DWORD)v16 + v21) & v15;
          v17 = (unsigned __int8 *)(v12 + 32 * v16);
          v18 = *v17;
          v19 = *((_QWORD *)v17 + 1);
          ++v21;
          if (v18 == v4 && v19 == v14)
            goto LABEL_28;
        }
        v17 = (unsigned __int8 *)(v12 + 32 * *(unsigned int *)(v12 - 4));
      }
LABEL_28:
      if ((unsigned __int8 *)(v12 + 32 * *(unsigned int *)(v12 - 4)) != v17)
      {
        v23 = *((unsigned int *)v17 + 6);
        if ((_DWORD)v23 != -1)
        {
          v29 = &v28;
          return ((uint64_t (*)(char **, unsigned __int8 *))off_1E351EFE0[v23])(&v29, v17 + 16);
        }
        goto LABEL_36;
      }
    }
    if (!*((_BYTE *)a1 + 32))
      return 0;
    v24 = *((unsigned int *)a1 + 6);
    if ((_DWORD)v24 != -1)
    {
      v25 = (unsigned __int8 *)(a1 + 2);
LABEL_33:
      v29 = &v28;
      return ((uint64_t (*)(char **, unsigned __int8 *))off_1E351EFE0[v24])(&v29, v25);
    }
  }
LABEL_36:
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::Decoder::create(v26, v27);
}

uint64_t IPC::Decoder::create@<X0>(WTF *this@<X1>, const void *a2@<X0>, uint64_t *a3@<X2>, IPC::Decoder **a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  NSObject *v11;
  _BYTE __dst[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WTF::tryFastMalloc(this);
  v8 = *(_QWORD *)__dst;
  if (*(_QWORD *)__dst)
  {
    memcpy(*(void **)__dst, a2, (size_t)this);
  }
  else
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__dst = 134217984;
      *(_QWORD *)&__dst[4] = this;
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "Decoder::copyBuffer: tryFastMalloc(%lu) failed", __dst, 0xCu);
    }
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E351F000;
  *(_QWORD *)__dst = v9;
  IPC::Decoder::create(v8, (unint64_t)this, (uint64_t *)__dst, a3, a4);
  result = *(_QWORD *)__dst;
  if (*(_QWORD *)__dst)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)__dst + 8))(*(_QWORD *)__dst);
  return result;
}

uint64_t IPC::Connection::sendOutgoingMessages(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF *v14;
  void *v15;
  char v16;
  WTF *v17;
  void *v18;
  unsigned __int8 v19;
  IPC::Encoder *v20;

  if (*(_BYTE *)(this + 72))
  {
    v2 = this;
    if (!*(_QWORD *)(this + 344) && (*(_DWORD *)(this + 312) - 1) <= 0xFFFFFFFD)
    {
      v3 = (unsigned __int8 *)(this + 184);
      v4 = (unsigned __int8 *)(this + 224);
      while (!__ldaxr(v3))
      {
        if (__stxr(1u, v3))
          goto LABEL_7;
LABEL_8:
        v6 = *(_QWORD *)(v2 + 192);
        v7 = *(_QWORD *)(v2 + 200);
        if (v6 == v7)
        {
          v19 = atomic_load(v4);
          if ((v19 & 1) != 0)
          {
            atomic_store(0, v4);
            this = WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(v2 + 224), a2);
          }
          v9 = 0;
          v10 = 3;
        }
        else
        {
          v8 = *(_QWORD *)(v2 + 208);
          v9 = *(IPC::Encoder **)(v8 + 8 * v6);
          *(_QWORD *)(v8 + 8 * v6) = 0;
          this = (uint64_t)std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(*(_QWORD *)(v2 + 208) + 8 * v6), 0);
          v10 = 0;
          v11 = *(_QWORD *)(v2 + 192);
          if (v11 == *(unsigned int *)(v2 + 216) - 1)
            v12 = 0;
          else
            v12 = v11 + 1;
          *(_QWORD *)(v2 + 192) = v12;
        }
        v13 = __ldxr(v3);
        if (v13 != 1)
        {
          __clrex();
LABEL_17:
          this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 184));
          goto LABEL_18;
        }
        if (__stlxr(0, v3))
          goto LABEL_17;
LABEL_18:
        if (v6 == v7)
        {
          if (v9)
          {
            IPC::Encoder::~Encoder(v9, a2);
            this = WTF::fastFree(v14, v15);
          }
        }
        else
        {
          v20 = v9;
          this = IPC::Connection::sendOutgoingMessage(v2, (__int16 **)&v20);
          v16 = this;
          if (v9)
          {
            IPC::Encoder::~Encoder(v9, a2);
            this = WTF::fastFree(v17, v18);
          }
          if ((v16 & 1) == 0)
            return this;
          v10 = 0;
        }
        if (v10)
          return this;
      }
      __clrex();
LABEL_7:
      this = MEMORY[0x19AEABB3C](v2 + 184);
      goto LABEL_8;
    }
  }
  return this;
}

void IPC::Encoder::~Encoder(IPC::Encoder *this, void *a2)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 66);
  if (v3 != (char *)this + 16)
    munmap(v3, *((_QWORD *)this + 69));
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 560, a2);
}

uint64_t IPC::Connection::sendOutgoingMessage(uint64_t a1, __int16 **a2)
{
  __int16 *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  char *v18;
  uint64_t v19;
  WTF *v20;
  int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  WTF::MachSendRight *v27;
  uint64_t v28;
  int v29;
  char *v30;
  WTF *v31;
  WTF::MachSendRight *v32;
  int v33;
  unsigned int v34;
  _QWORD v35[2];

  v4 = *a2;
  v32 = (WTF::MachSendRight *)*((_QWORD *)*a2 + 70);
  v5 = *((unsigned int *)v4 + 143);
  v33 = *((_DWORD *)v4 + 142);
  v34 = v5;
  v35[0] = 0;
  *((_QWORD *)v4 + 70) = 0;
  v35[1] = 0;
  *((_QWORD *)v4 + 71) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, a2);
  v7 = *((_QWORD *)*a2 + 68);
  v8 = __CFADD__(v7, 24);
  v9 = v7 + 24;
  v10 = v7 >= 0xFFFFFFFFFFFFFFE8;
  if (v8)
    v9 = 24;
  if (!(_DWORD)v5)
    goto LABEL_43;
  v19 = 0;
  v24 = v9 >= 0xFFFFFFFFFFFFFFFCLL;
  if (v9 < 0xFFFFFFFFFFFFFFFCLL)
    v9 += 4;
  v25 = __CFADD__(v9, 12 * v5);
  if (!__CFADD__(v9, 12 * v5))
    v9 += 12 * v5;
  if (!v24 && !v25)
  {
LABEL_43:
    if (v10 || (v11 = v9 + 3, v9 >= 0xFFFFFFFFFFFFFFFDLL))
    {
      v19 = 0;
      goto LABEL_20;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v11 & 0xFFFFFFFFFFFFFFFCLL) <= 0x1000)
      v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    else
      v13 = (12 * v5 + 47) & 0x1FFFFFFFFCLL;
    v14 = **a2;
    if (v12 <= 0x1000)
      v15 = 230297018;
    else
      v15 = 230301114;
    v16 = WTF::fastZeroedMalloc((WTF *)(v13 + 24));
    v17 = (WTF *)v16;
    *(_WORD *)v16 = v14;
    *(_QWORD *)(v16 + 8) = v13;
    *(_DWORD *)(v16 + 20) = 19;
    *(_BYTE *)(v16 + 16) = 1;
    *(_DWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 28) = *(unsigned int *)(a1 + 312);
    *(_DWORD *)(v16 + 40) = v15;
    if ((_DWORD)v5 || v12 > 0x1000)
    {
      *(_DWORD *)(v16 + 20) = -2147483629;
      if (v12 <= 0x1000)
        v22 = v5;
      else
        v22 = v5 + 1;
      *(_DWORD *)(v16 + 44) = v22;
      v18 = (char *)(v16 + 48);
      if (v34)
      {
        v26 = 0;
        v27 = v32;
        v28 = 12 * v34;
        do
        {
          v29 = WTF::MachSendRight::leakSendRight(v27);
          v30 = &v18[v26];
          *(_DWORD *)v30 = v29;
          *((_WORD *)v30 + 5) = 17;
          v27 = (WTF::MachSendRight *)((char *)v27 + 4);
          v26 += 12;
        }
        while (v28 != v26);
        v18 += v26;
      }
      if (v12 > 0x1000)
      {
        v23 = *((_QWORD *)*a2 + 68);
        *(_QWORD *)v18 = *((_QWORD *)*a2 + 66);
        *((_DWORD *)v18 + 2) = (v18[10] << 16) | 0x1000100;
        *((_DWORD *)v18 + 3) = v23;
LABEL_16:
        v31 = v17;
        v19 = IPC::Connection::sendMessage((uint64_t *)a1, (unsigned __int16 **)&v31);
        v20 = v31;
        if (v31)
        {
          if (*((_BYTE *)v31 + 16))
            mach_msg_destroy((mach_msg_header_t *)((char *)v31 + 20));
          WTF::fastFree(v20, v6);
        }
        goto LABEL_20;
      }
    }
    else
    {
      v18 = (char *)(v16 + 44);
    }
    memcpy(v18, *((const void **)*a2 + 66), *((_QWORD *)*a2 + 68));
    goto LABEL_16;
  }
LABEL_20:
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v6);
  return v19;
}

void sub_196BE7B2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF *v11;
  mach_msg_header_t *v12;
  void *v14;

  if (*((_BYTE *)v11 + 16))
    mach_msg_destroy(v12);
  WTF::fastFree(v11, a2);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::MachSendRight *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::MachSendRight **)a1;
    v7 = 4 * v3;
    do
    {
      WTF::MachSendRight::~MachSendRight(v6);
      v6 = (WTF::MachSendRight *)(v8 + 4);
      v7 -= 4;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::Connection::sendMessage(uint64_t *a1, unsigned __int16 **a2)
{
  mach_msg_return_t v4;
  void *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  WTF *v10;
  const char *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  _BYTE v15[16];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = mach_msg((mach_msg_header_t *)(*a2 + 10), 145, *((_DWORD *)*a2 + 2), 0, 0, 0, 0);
  if (v4)
  {
    if (v4 == 268435459)
    {
      IPC::Connection::cancelSendSource((IPC::Connection *)a1);
    }
    else
    {
      if (v4 != 268435460)
      {
        v7 = **a2;
        WTF::Internal::appendHex();
        v16 = v8;
        if (v7 >= 0xE98)
          v9 = 3736;
        else
          v9 = v7;
        WTF::makeString<WTF::ASCIILiteral,WTF::HexNumberBuffer,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,IPC::MessageName,char>(&v14, (uint64_t)v15, (&IPC::Detail::messageDescriptions)[3 * v9], (uint64_t)(&IPC::Detail::messageDescriptions)[3 * v9 + 1], v7);
        WTF::String::utf8();
        if (v13)
          v10 = (WTF *)((char *)v13 + 16);
        else
          v10 = 0;
        WTFLogAlways();
        WTF::setCrashLogMessage(v10, v11);
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, v12);
          else
            --*(_DWORD *)v13;
        }
        WTFCrashWithInfoImpl(256, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Platform/IPC/cocoa/ConnectionCocoa.mm", "BOOL IPC::Connection::sendMessage(std::unique_ptr<MachMessage>)");
        __break(1u);
      }
      v6 = *a2;
      *a2 = 0;
      std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100](a1 + 43, v6);
    }
    return 0;
  }
  else
  {
    *((_BYTE *)*a2 + 16) = 0;
    return 1;
  }
}

void sub_196BE7D88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkConnectionToWebProcess::didReceiveNetworkConnectionToWebProcessMessage(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  unsigned __int16 v41;
  char v42;
  unsigned __int16 v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WebKit::NetworkResourceLoadParameters *v47;
  const WTF::String *v48;
  void *v49;
  __int128 v50;
  void *v51;
  WTF *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  char v60;
  void *v61;
  WTF::ASCIICaseInsensitiveHash **v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int16 v71;
  int v72;
  int v73;
  WTF::StringImpl *v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  char v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  int v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  __int16 v103;
  unint64_t v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  BOOL v109;
  char v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  BOOL v126;
  uint64_t v127;
  __int16 v128;
  unsigned __int16 v129;
  char v130;
  unsigned __int16 v131;
  unsigned int v132;
  WTF::StringImpl *v133;
  unsigned int v134;
  unsigned __int16 v135;
  char v136;
  unsigned __int16 v137;
  char v138;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  WTF::StringImpl *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned __int8 *v144;
  unint64_t v145;
  unsigned int v147;
  int *v148;
  int v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  WTF::StringImpl *v161;
  char v162;
  uint64_t v163;
  __int16 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const void *v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  _QWORD *v176;
  void *v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  const WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  int v206;
  WTF::StringImpl *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  char v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  _QWORD *v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  unint64_t v252;
  unint64_t v253;
  unsigned __int16 v254;
  char v255;
  unsigned __int16 v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  char v263;
  unint64_t v264;
  char v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  _BYTE *v285;
  unsigned __int16 v286;
  WTF::StringImpl *v287;
  int v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  void *v294;
  uint64_t v295;
  int v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WebCore::ResourceRequestBase *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  CFTypeRef v306;
  const void *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  const void *v312;
  void *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  int v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WebCore::ResourceRequestBase *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  unint64_t v338;
  void *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  unint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  WTF::StringImpl *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  uint64_t v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  WTF::StringImpl *v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  WTF *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  BOOL v425;
  unsigned int v426;
  unsigned __int8 **v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  const void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  char v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  const void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  WTF::StringImpl *v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  char v485;
  BOOL v486;
  WTF::StringImpl *v487[2];
  char v488;
  _BYTE v489[24];
  __int128 v490;
  char v491;
  _BYTE v492[112];
  __int128 v493;
  char v494[2];
  char v495;
  __int128 v496;
  __int128 v497;
  _BYTE v498[32];
  __int128 v499;
  _BYTE cf[32];
  __int128 v501;
  uint64_t v502;
  __int128 v503;
  _BYTE v504[24];
  uint64_t v505;
  __int128 v506;
  __int128 v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  char v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  _BYTE v519[19];
  CFTypeRef v520;
  char v521;
  __int16 v522;
  char v523;
  __int128 v524;
  unsigned __int8 v525;
  _BYTE v526[96];
  __int128 v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  _BYTE v536[19];
  const void *v537;
  char v538;
  char v539;
  char v540;
  _BYTE v541[24];
  __int128 v542;
  char v543;
  char v544;
  char v545;
  _BYTE v546[24];
  __int128 v547;
  char v548;
  uint64_t v549;

  v5 = MEMORY[0x1E0C80A78](this, a2, a3);
  v8 = v5;
  v549 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(v5 + 8);
  v9 = (uint64_t *)v7;
  v10 = v6;
  switch(*(_WORD *)(v7 + 50))
  {
    case 0xD4:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[32])
        WebKit::NetworkConnectionToWebProcess::addOriginAccessAllowListEntry((WebKit::NetworkConnectionToWebProcess *)v8, (const WTF::String *)v492, (const WTF::String *)&v492[8], (const WTF::String *)&v492[16], (const WTF::String *)v492[24]);
      goto LABEL_405;
    case 0xD5:
      v171 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v172)
        goto LABEL_912;
      v173 = v171;
      v174 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!v175)
        goto LABEL_912;
      v176 = (_QWORD *)v174;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_912;
      WebKit::NetworkConnectionToWebProcess::browsingContextRemoved(v8, v173, v176, *(uint64_t *)v492, *(uint64_t *)&v492[8]);
      goto LABEL_913;
    case 0xD6:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v7, (uint64_t)v492);
      if (v492[16])
        WebKit::NetworkConnectionToWebProcess::clearFrameLoadRecordsForStorageAccess(v8, *(WTF::StringImpl **)v492, *(const WTF::StringImpl **)&v492[8]);
      goto LABEL_913;
    case 0xD7:
      v156 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v7);
      if (v157)
        WebKit::NetworkConnectionToWebProcess::clearPageSpecificData(v8, v156);
      goto LABEL_913;
    case 0xD8:
      v85 = *(_QWORD *)(v5 + 216);
      *(_QWORD *)(v8 + 216) = 0;
      if (!v85)
        goto LABEL_913;
      goto LABEL_319;
    case 0xD9:
      WebKit::NetworkConnectionToWebProcess::closeSharedWorkerContextConnection((WebKit::NetworkConnectionToWebProcess *)v5);
      goto LABEL_913;
    case 0xDA:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>((uint64_t *)v7, v492);
      if (!v492[32])
        goto LABEL_913;
      v212 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!v213)
        goto LABEL_913;
      *(_QWORD *)v526 = v212;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v214 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v214 = off_1E34B09F0;
      v214[1] = *(_QWORD *)v526;
      v215 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v214[2] = v215;
      *(_QWORD *)v541 = v214;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[32])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::connectToRTCDataChannelRemoteSource((WebKit::NetworkConnectionToWebProcess *)v8, *(uint64_t *)v492, *(uint64_t *)&v492[8], *(uint64_t *)&v492[16], *(uint64_t *)&v492[24], (uint64_t *)v541);
      goto LABEL_282;
    case 0xDB:
      IPC::Decoder::decode<std::optional<PAL::SessionID>>((uint64_t *)v7, v489);
      if (!v489[16]
        || (v158 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9),
            !v159))
      {
        v492[0] = 0;
        v523 = 0;
        goto LABEL_786;
      }
      v160 = v158;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v9, (uint64_t)v541);
      if (!v545 || (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v9, (uint64_t)v546), !v548))
      {
        v492[0] = 0;
        v523 = 0;
        goto LABEL_438;
      }
      IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v526);
      v162 = v539;
      if (!v539)
        goto LABEL_616;
      v163 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v9);
      if ((v163 & 0xFF0000) != 0)
      {
        if (!v489[16] || !v545 || !v548 || !v539)
          goto LABEL_896;
        v164 = v163;
        *(_OWORD *)v492 = *(_OWORD *)v489;
        *(_QWORD *)&v492[16] = v160;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v492[24], (uint64_t)v541);
        cf[8] = 0;
        BYTE8(v501) = 0;
        if (BYTE8(v547))
        {
          LODWORD(v501) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf[8], (uint64_t)v546);
          BYTE8(v501) = 1;
        }
        v503 = *(_OWORD *)&v526[8];
        *(_OWORD *)v504 = *(_OWORD *)&v526[24];
        v165 = *(_OWORD *)&v526[56];
        memset(&v526[56], 0, 40);
        *(_DWORD *)&v526[8] &= ~1u;
        v166 = *(_QWORD *)v526;
        v167 = *(_QWORD *)&v526[40];
        *(_QWORD *)v526 = 0;
        *(_QWORD *)&v526[40] = 0;
        v502 = v166;
        *(_QWORD *)&v504[16] = v167;
        v505 = *(_QWORD *)&v526[48];
        v506 = v165;
        v507 = *(_OWORD *)&v526[72];
        v508 = *(_QWORD *)&v526[88];
        *(_QWORD *)&v165 = *((_QWORD *)&v527 + 1);
        v509 = v527;
        v527 = 0uLL;
        v510 = v165;
        v168 = v528;
        v528 = 0;
        v511 = v168;
        LOBYTE(v512) = 0;
        v513 = 0;
        if (v530)
        {
          v169 = v529;
          v529 = 0;
          v512 = v169;
          v513 = 1;
        }
        *(_DWORD *)&v519[15] = *(_DWORD *)&v536[15];
        v518 = v535;
        *(_OWORD *)v519 = *(_OWORD *)v536;
        v514 = v531;
        v515 = v532;
        v516 = v533;
        v517 = v534;
        v170 = v537;
        v537 = 0;
        v520 = v170;
        v521 = v538;
        v162 = 1;
        v522 = v164;
      }
      else
      {
        v162 = 0;
LABEL_616:
        v492[0] = 0;
      }
      v523 = v162;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v526, v161);
      if (v548 && BYTE8(v547) && (_DWORD)v547 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34B0790[v547])(v526, v546);
LABEL_438:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v541);
      if (v523)
        goto LABEL_439;
LABEL_786:
      v391 = *v9;
      v392 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v393 = v9[3];
      if (!v393)
        goto LABEL_913;
      if (!v392)
        goto LABEL_913;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v393 + 16))(v393, v391);
      if (!v523)
        goto LABEL_913;
LABEL_439:
      v302 = (WebCore::ResourceRequestBase *)&v492[24];
      WebKit::NetworkConnectionToWebProcess::convertMainResourceLoadToDownload((uint64_t *)v8, *(WTF::StringImpl **)v492, v492[8], *(uint64_t *)&v492[16], (WebCore::ResourceRequest *)&v492[24], (WebCore::SecurityOriginData *)&cf[8], (WebCore::ResourceResponseBase *)&v502, v522);
      if (!v523)
        goto LABEL_913;
      v306 = v520;
      v520 = 0;
      if (v306)
        CFRelease(v306);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v502, v305);
      if (BYTE8(v501))
      {
        if ((_DWORD)v501 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B0790[v501])(v526, &cf[8]);
        LODWORD(v501) = -1;
      }
      v307 = *(const void **)cf;
      *(_QWORD *)cf = 0;
      if (v307)
        goto LABEL_447;
      goto LABEL_514;
    case 0xDC:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>((uint64_t)v492, (uint64_t *)v7);
      if (!v494[0])
        goto LABEL_301;
      v224 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v223)
        goto LABEL_301;
      *(_QWORD *)v526 = v224;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v225 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v225 = off_1E34B0800;
      v225[1] = *(_QWORD *)v526;
      v226 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v225[2] = v226;
      *(_QWORD *)v541 = v225;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v494[0])
        goto LABEL_896;
      *(_OWORD *)v526 = *(_OWORD *)&v492[80];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v492[96];
      WebKit::NetworkConnectionToWebProcess::cookiesEnabled((_QWORD *)v8, (WTF::URL *)v492, (uint64_t)&v492[40], (uint64_t)v526, *(uint64_t *)&v492[104], v493, BYTE8(v493), (uint64_t *)v541);
      v227 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v227)
        (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
LABEL_301:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v492, v223);
      goto LABEL_913;
    case 0xDD:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v541);
      if (v543)
      {
        v132 = IPC::Decoder::decode<WebCore::SameSiteInfo>(v9);
        if (HIBYTE(v132) && (v134 = v132, IPC::Decoder::decode<WTF::URL>(v9, v526), v526[40]))
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v9, (uint64_t)v546);
          if ((_BYTE)v547
            && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, v487), v488)&& (v135 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v9), v135 > 0xFFu)&& (v136 = v135, v137 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v9), v137 > 0xFFu)&& (v138 = v137, ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v9), ShouldRelaxThirdPartyCookie > 0xFFu))
          {
            v381 = ShouldRelaxThirdPartyCookie;
            IPC::ArgumentCoder<WebCore::CookieStoreGetOptions,void>::decode(v9, (uint64_t)v489);
            if (v489[16])
            {
              if (!v543 || !v526[40] || !(_BYTE)v547 || !v488)
                goto LABEL_896;
              v382 = *(_QWORD *)v541;
              *(_QWORD *)v541 = 0;
              *(_QWORD *)v492 = v382;
              *(_OWORD *)&v492[8] = *(_OWORD *)&v541[8];
              *(_OWORD *)&v492[24] = v542;
              *(_DWORD *)&v541[8] &= ~1u;
              *(_WORD *)&v492[40] = v134;
              v492[42] = BYTE2(v134);
              v383 = *(_QWORD *)v526;
              *(_QWORD *)v526 = 0;
              *(_OWORD *)&v492[56] = *(_OWORD *)&v526[8];
              *(_OWORD *)&v492[72] = *(_OWORD *)&v526[24];
              *(_DWORD *)&v526[8] &= ~1u;
              *(_QWORD *)&v492[48] = v383;
              *(_QWORD *)&v492[104] = *(_QWORD *)&v546[16];
              *(_OWORD *)&v492[88] = *(_OWORD *)v546;
              v493 = *(_OWORD *)v487;
              v494[0] = v136;
              v494[1] = v138;
              v495 = v381;
              v384 = 1;
              v496 = *(_OWORD *)v489;
            }
            else
            {
              v133 = (WTF::StringImpl *)*v9;
              v475 = v9[1];
              *v9 = 0;
              v9[1] = 0;
              v476 = v9[3];
              if (v476 && v475)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v476 + 16))(v476, v133);
              v384 = 0;
              v492[0] = 0;
            }
            LOBYTE(v497) = v384;
          }
          else
          {
            v492[0] = 0;
            LOBYTE(v497) = 0;
          }
          if (v526[40])
          {
            v140 = *(WTF::StringImpl **)v526;
            *(_QWORD *)v526 = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2)
                WTF::StringImpl::destroy(v140, v133);
              else
                *(_DWORD *)v140 -= 2;
            }
          }
        }
        else
        {
          v492[0] = 0;
          LOBYTE(v497) = 0;
        }
        if (v543)
        {
          v309 = *(WTF::StringImpl **)v541;
          *(_QWORD *)v541 = 0;
          if (v309)
          {
            if (*(_DWORD *)v309 == 2)
              WTF::StringImpl::destroy(v309, v133);
            else
              *(_DWORD *)v309 -= 2;
          }
        }
      }
      else
      {
        v492[0] = 0;
        LOBYTE(v497) = 0;
      }
      if (!(_BYTE)v497)
      {
        v405 = *v9;
        v406 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v407 = v9[3];
        if (!v407)
          goto LABEL_913;
        if (!v406)
          goto LABEL_913;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v407 + 16))(v407, v405);
        if (!(_BYTE)v497)
          goto LABEL_913;
      }
      v332 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if ((_BYTE)v19)
      {
        *(_QWORD *)v526 = v332;
        v9 = (uint64_t *)&v526[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
        v333 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v333 = off_1E34B0850;
        v333[1] = *(_QWORD *)v526;
        v334 = *(_QWORD *)&v526[8];
        *(_QWORD *)&v526[8] = 0;
        v333[2] = v334;
        *(_QWORD *)v541 = v333;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
        if (!(_BYTE)v497)
          goto LABEL_896;
        *(_OWORD *)v526 = *(_OWORD *)&v492[88];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v492[104];
        WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync((_QWORD *)v8, (WTF::URL *)v492, &v492[40], (const WTF::String **)&v492[48], (__int128 *)v526, (WTF::String *)v493, *((uint64_t *)&v493 + 1), v494[0], v494[1], v495, (uint64_t)&v496, (uint64_t *)v541);
        v335 = *(_QWORD *)v541;
        *(_QWORD *)v541 = 0;
        if (v335)
          (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
      }
      if (!(_BYTE)v497)
        goto LABEL_913;
      v336 = (WTF::StringImpl *)*((_QWORD *)&v496 + 1);
      *((_QWORD *)&v496 + 1) = 0;
      if (v336)
      {
        if (*(_DWORD *)v336 == 2)
          WTF::StringImpl::destroy(v336, v19);
        else
          *(_DWORD *)v336 -= 2;
      }
      v337 = (WTF::StringImpl *)v496;
      *(_QWORD *)&v496 = 0;
      if (!v337)
        goto LABEL_603;
      goto LABEL_592;
    case 0xDE:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[32])
        WebKit::NetworkConnectionToWebProcess::createNewMessagePortChannel(v8, v492, &v492[16]);
      goto LABEL_913;
    case 0xDF:
      v81 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v82)
        goto LABEL_913;
      *(_QWORD *)v492 = v81;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v492[8], v10);
      v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v83 = off_1E34B09C8;
      v83[1] = *(_QWORD *)v492;
      v84 = *(_QWORD *)&v492[8];
      *(_QWORD *)&v492[8] = 0;
      v83[2] = v84;
      *(_QWORD *)v526 = v83;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v492[8]);
      WebKit::NetworkConnectionToWebProcess::createRTCProvider((WebKit::NetworkConnectionToWebProcess *)v8, (uint64_t *)v526);
      v85 = *(_QWORD *)v526;
      *(_QWORD *)v526 = 0;
      if (!v85)
        goto LABEL_913;
      goto LABEL_319;
    case 0xE0:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)v7, (uint64_t)v526);
      if (!(_BYTE)v535 || (IPC::Decoder::decode<WTF::String>(v9, v487), !LOBYTE(v487[1])))
      {
        v492[0] = 0;
        LOBYTE(v507) = 0;
        goto LABEL_865;
      }
      v113 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(v9);
      if (v114)
      {
        v10 = (unsigned __int8 **)v113;
        v115 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
        if ((_BYTE)v116)
        {
          v117 = v115;
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v9, (uint64_t)v546);
          if ((_BYTE)v547)
          {
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, v489);
            if (v489[16])
            {
              IPC::Decoder::decode<WebCore::ClientOrigin>(v9, v541);
              v118 = v544;
              if (!v544)
              {
LABEL_167:
                v492[0] = 0;
LABEL_168:
                LOBYTE(v507) = v118;
                std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v541);
                goto LABEL_860;
              }
              v119 = v9[1];
              v120 = *v9;
              v121 = v9[2] - *v9;
              if (v119 <= v121)
              {
                v466 = 0;
                v467 = 0;
                *v9 = 0;
                v9[1] = 0;
                v468 = v9[3];
                if (v468)
                {
                  if (v119)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v468 + 16))(v468);
                    v467 = *v9;
                    v466 = v9[1];
                  }
                  else
                  {
                    v466 = 0;
                    v467 = 0;
                  }
                }
              }
              else
              {
                v122 = (unsigned __int8 *)(v120 + v121);
                v9[2] = (uint64_t)(v122 + 1);
                if (v120)
                {
                  v123 = *v122;
                  if (v123 < 2)
                  {
                    v124 = v123 != 0;
                    if (v119 <= (unint64_t)&v122[-v120 + 1])
                    {
                      v471 = 0;
                      v472 = 0;
                      *v9 = 0;
                      v9[1] = 0;
                      v473 = v9[3];
                      if (v473)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v473 + 16))(v473);
                        v471 = 0;
                        v482 = *v9;
                        v483 = v9[1];
                        v484 = v9[3];
                        *v9 = 0;
                        v9[1] = 0;
                        v472 = 0;
                        if (v484)
                        {
                          if (v483)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v484 + 16))(v484, v482);
                            v472 = *v9;
                            v471 = v9[1];
                          }
                        }
                      }
                    }
                    else
                    {
                      v9[2] = (uint64_t)(v122 + 2);
                      v125 = v122[1];
                      if (v125 < 2)
                      {
                        v126 = v125 != 0;
                        v127 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v9);
                        if ((v127 & 0xFF0000) != 0)
                        {
                          v128 = v127;
                          v486 = v124;
                          v129 = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v9);
                          if (v129 > 0xFFu)
                          {
                            v130 = v129;
                            v131 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(v9);
                            if (v131 > 0xFFu)
                            {
                              if (!(_BYTE)v535)
                                goto LABEL_896;
                              if (!LOBYTE(v487[1]))
                                goto LABEL_896;
                              if (!(_BYTE)v547)
                                goto LABEL_896;
                              if (!v489[16])
                                goto LABEL_896;
                              v485 = v131;
                              if (!v544)
                                goto LABEL_896;
                              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v492, (uint64_t)v526);
                              v385 = v487[0];
                              v487[0] = 0;
                              *(_QWORD *)&v499 = v385;
                              *((_QWORD *)&v499 + 1) = v10;
                              *(_OWORD *)&cf[8] = *(_OWORD *)v546;
                              *(_QWORD *)cf = v117;
                              *(_QWORD *)&cf[24] = *(_QWORD *)&v546[16];
                              v501 = *(_OWORD *)v489;
                              LOBYTE(v502) = 0;
                              *(_DWORD *)v504 = -1;
                              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v502, (uint64_t)v541);
                              v504[8] = 0;
                              LODWORD(v506) = -1;
                              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v504[8], (uint64_t)&v542 + 8);
                              BYTE8(v506) = v486;
                              BYTE9(v506) = v126;
                              WORD5(v506) = v128;
                              BYTE12(v506) = v130;
                              v118 = 1;
                              BYTE13(v506) = v485;
                              goto LABEL_168;
                            }
                          }
                        }
                        goto LABEL_166;
                      }
                      v471 = v119;
                      v472 = v120;
                    }
                    *v9 = 0;
                    v9[1] = 0;
                    v474 = v9[3];
                    if (v474 && v471)
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v474 + 16))(v474, v472, v471);
LABEL_166:
                    v118 = 0;
                    goto LABEL_167;
                  }
LABEL_937:
                  *v9 = 0;
                  v9[1] = 0;
                  v470 = v9[3];
                  if (v470 && v119)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v470 + 16))(v470, v120);
                  goto LABEL_166;
                }
                v466 = v119;
                v467 = 0;
              }
              v119 = 0;
              v120 = 0;
              *v9 = 0;
              v9[1] = 0;
              v469 = v9[3];
              if (v469)
              {
                if (v466)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v469 + 16))(v469, v467, v466);
                  v120 = *v9;
                  v119 = v9[1];
                }
                else
                {
                  v119 = 0;
                  v120 = 0;
                }
              }
              goto LABEL_937;
            }
          }
        }
      }
      else
      {
        v116 = (WTF::StringImpl *)*v9;
        v430 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v431 = v9[3];
        if (v431 && v430)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v431 + 16))(v431, v116);
      }
      v492[0] = 0;
      LOBYTE(v507) = 0;
LABEL_860:
      if (LOBYTE(v487[1]))
      {
        v432 = v487[0];
        v487[0] = 0;
        if (v432)
        {
          if (*(_DWORD *)v432 == 2)
            WTF::StringImpl::destroy(v432, v116);
          else
            *(_DWORD *)v432 -= 2;
        }
      }
LABEL_865:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v526);
      if (!(_BYTE)v507)
      {
        v436 = *v9;
        v437 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v438 = v9[3];
        if (!v438)
          goto LABEL_913;
        if (!v437)
          goto LABEL_913;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v438 + 16))(v438, v436);
        if (!(_BYTE)v507)
          goto LABEL_913;
      }
      *(_OWORD *)v526 = *(_OWORD *)&cf[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&cf[24];
      WebKit::NetworkConnectionToWebProcess::createSocketChannel((_QWORD *)v8, (WebCore::ResourceRequestBase *)v492, (uint64_t)&v499, *((uint64_t *)&v499 + 1), *(uint64_t *)cf, (__int128 *)v526, v501, *((uint64_t *)&v501 + 1), (uint64_t)&v502, SWORD4(v506), WORD5(v506), SWORD6(v506));
      if (!(_BYTE)v507)
        goto LABEL_913;
      if ((_DWORD)v506 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34B0790[v506])(v526, &v504[8]);
      LODWORD(v506) = -1;
      if (*(_DWORD *)v504 != -1)
        ((void (*)(_BYTE *, uint64_t *))off_1E34B0790[*(unsigned int *)v504])(v526, &v502);
      *(_DWORD *)v504 = -1;
      v434 = (WTF::StringImpl *)v499;
      *(_QWORD *)&v499 = 0;
      if (v434)
      {
        if (*(_DWORD *)v434 == 2)
          WTF::StringImpl::destroy(v434, v433);
        else
          *(_DWORD *)v434 -= 2;
      }
      v435 = *(const void **)&v498[24];
      *(_QWORD *)&v498[24] = 0;
      if (v435)
        CFRelease(v435);
      v320 = (WebCore::ResourceRequestBase *)v492;
      goto LABEL_895;
    case 0xE1:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>((uint64_t *)v7, v492);
      if (!v492[48])
        goto LABEL_277;
      v208 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v207)
        goto LABEL_277;
      *(_QWORD *)v526 = v208;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v209 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v209 = off_1E34B0828;
      v209[1] = *(_QWORD *)v526;
      v210 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v209[2] = v210;
      *(_QWORD *)v541 = v209;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[48])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::deleteCookie(v8, (uint64_t)v492, (uint64_t)&v492[40], (uint64_t *)v541);
      v211 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v211)
        (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
LABEL_277:
      std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v492, v207);
      goto LABEL_913;
    case 0xE2:
      if (!*(_BYTE *)(v5 + 312))
        goto LABEL_913;
      v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v65)
        goto LABEL_912;
      WebKit::NetworkConnectionToWebProcess::destroyWebTransportSession(v8, v64);
      goto LABEL_913;
    case 0xE3:
      v150 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v7);
      if (v151)
        WebKit::NetworkConnectionToWebProcess::didDeliverMessagePortMessages((WebKit::NetworkConnectionToWebProcess *)v8, v150);
      goto LABEL_913;
    case 0xE4:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[32])
        WebKit::NetworkConnectionToWebProcess::entangleLocalPortInThisProcessToRemote(v8, (uint64_t *)v492);
      goto LABEL_913;
    case 0xE5:
      v182 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v183)
        goto LABEL_651;
      v184 = v182;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v541);
      if (!v541[8])
        goto LABEL_651;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v9, (uint64_t)v526);
      if (!v526[48])
      {
        if (!v541[8])
          goto LABEL_651;
        v318 = *(WTF::StringImpl **)v541;
        *(_QWORD *)v541 = 0;
        if (!v318)
          goto LABEL_651;
        goto LABEL_571;
      }
      if (!v541[8])
        goto LABEL_896;
      v186 = *(WTF::StringImpl **)v541;
      *(_QWORD *)v492 = v184;
      *(_QWORD *)&v492[8] = *(_QWORD *)v541;
      *(_OWORD *)&v492[16] = *(_OWORD *)v526;
      *(_OWORD *)&v492[32] = *(_OWORD *)&v526[16];
      *(_OWORD *)&v492[48] = *(_OWORD *)&v526[32];
      v492[64] = 1;
      v187 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if ((_BYTE)v19)
      {
        *(_QWORD *)v526 = v187;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
        v188 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v188 = off_1E34B0978;
        v188[1] = *(_QWORD *)v526;
        v189 = *(_QWORD *)&v526[8];
        *(_QWORD *)&v526[8] = 0;
        v188[2] = v189;
        *(_QWORD *)v541 = v188;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
        *(_OWORD *)v526 = *(_OWORD *)&v492[16];
        *(_OWORD *)&v526[16] = *(_OWORD *)&v492[32];
        *(_OWORD *)&v526[32] = *(_OWORD *)&v492[48];
        WebKit::NetworkConnectionToWebProcess::establishSWContextConnection((_QWORD *)v8, v184, (WTF **)&v492[8], v526, (uint64_t *)v541);
        v190 = *(_QWORD *)v541;
        *(_QWORD *)v541 = 0;
        if (v190)
          (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
        if (!v492[64])
          goto LABEL_913;
LABEL_290:
        v186 = *(WTF::StringImpl **)&v492[8];
      }
LABEL_291:
      *(_QWORD *)&v492[8] = 0;
      if (!v186)
        goto LABEL_913;
      if (*(_DWORD *)v186 != 2)
      {
        *(_DWORD *)v186 -= 2;
        goto LABEL_913;
      }
      v319 = v186;
      goto LABEL_729;
    case 0xE6:
      v216 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v217)
        goto LABEL_651;
      v218 = v216;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v526);
      if (!v526[8])
        goto LABEL_651;
      v186 = *(WTF::StringImpl **)v526;
      *(_QWORD *)v492 = v218;
      *(_QWORD *)&v492[8] = *(_QWORD *)v526;
      v492[16] = 1;
      v219 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_291;
      *(_QWORD *)v526 = v219;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v220 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v220 = off_1E34B09A0;
      v220[1] = *(_QWORD *)v526;
      v221 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v220[2] = v221;
      *(_QWORD *)v541 = v220;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      WebKit::NetworkConnectionToWebProcess::establishSharedWorkerContextConnection(v8, v218, (const WebCore::RegistrableDomain *)&v492[8], (uint64_t *)v541);
      v222 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v222)
        (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
      if (v492[16])
        goto LABEL_290;
      goto LABEL_913;
    case 0xE7:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)v7, (uint64_t)v546);
      if (!v546[8])
        goto LABEL_651;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v541);
      if (v541[8])
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, (uint64_t)v526);
        if (v526[16]
          && (v246 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9),
              (_BYTE)v245))
        {
          if (!v546[8] || !v541[8] || !v526[16])
            goto LABEL_896;
          v3 = v246;
          v247 = *(_QWORD *)v546;
          *(_QWORD *)v546 = 0;
          v248 = *(_QWORD *)v541;
          *(_QWORD *)v541 = 0;
          *(_QWORD *)v492 = v247;
          *(_QWORD *)&v492[8] = v248;
          *(_OWORD *)&v492[16] = *(_OWORD *)v526;
          *(_QWORD *)&v492[32] = v246;
          v249 = 1;
        }
        else
        {
          v249 = 0;
          v492[0] = 0;
        }
        v492[40] = v249;
        if (v541[8])
        {
          v316 = *(WTF::StringImpl **)v541;
          *(_QWORD *)v541 = 0;
          if (v316)
          {
            if (*(_DWORD *)v316 == 2)
              WTF::StringImpl::destroy(v316, v245);
            else
              *(_DWORD *)v316 -= 2;
          }
        }
      }
      else
      {
        v249 = 0;
        v492[0] = 0;
        v492[40] = 0;
      }
      if (v546[8])
      {
        v351 = *(WTF::StringImpl **)v546;
        *(_QWORD *)v546 = 0;
        if (v351)
        {
          if (*(_DWORD *)v351 == 2)
            WTF::StringImpl::destroy(v351, v245);
          else
            *(_DWORD *)v351 -= 2;
        }
      }
      if (!v249)
        goto LABEL_651;
      v352 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_644;
      *(_QWORD *)v526 = v352;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v353 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v353 = off_1E34B0900;
      v353[1] = *(_QWORD *)v526;
      v354 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v353[2] = v354;
      *(_QWORD *)v541 = v353;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      WebKit::NetworkConnectionToWebProcess::hasStorageAccess(v8, (uint64_t)v492, (uint64_t)&v492[8], *(uint64_t *)&v492[16], *(uint64_t *)&v492[24], v3, (uint64_t *)v541);
      v355 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v355)
        (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
      if (v492[40])
        goto LABEL_644;
      goto LABEL_913;
    case 0xE8:
      if (!*(_BYTE *)(v5 + 312))
        goto LABEL_913;
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)v7, v492);
      if (!v492[40])
        goto LABEL_913;
      v196 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_371;
      *(_QWORD *)v526 = v196;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v197 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v197 = off_1E34B0AE0;
      v197[1] = *(_QWORD *)v526;
      v198 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v197[2] = v198;
      *(_QWORD *)v541 = v197;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[40])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession((unsigned int *)v8, (uint64_t)v492, (uint64_t *)v541);
      goto LABEL_369;
    case 0xE9:
      IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::decode((uint64_t *)v7, (uint64_t)v492);
      if (v492[24])
        goto LABEL_267;
      v400 = *v9;
      v357 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v358 = v9[3];
      if (!v358)
        goto LABEL_773;
      if (!v357)
        goto LABEL_774;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v358 + 16))(v358, v400);
      if (!v492[24])
        goto LABEL_792;
LABEL_267:
      *(_DWORD *)v526 = *(_DWORD *)v492;
      v204 = *(WTF::StringImpl **)&v492[8];
      if (*(_QWORD *)&v492[8])
        **(_DWORD **)&v492[8] += 2;
      *(_QWORD *)&v526[8] = v204;
      v205 = *(WTF::StringImpl **)&v492[16];
      if (*(_QWORD *)&v492[16])
      {
        v206 = **(_DWORD **)&v492[16];
        **(_DWORD **)&v492[16] += 2;
        *(_QWORD *)&v526[16] = v205;
        v526[24] = 1;
        *(_QWORD *)&v492[16] = 0;
        if (v206)
        {
          *(_DWORD *)v205 = v206;
        }
        else
        {
          WTF::StringImpl::destroy(v205, v203);
          v204 = *(WTF::StringImpl **)&v492[8];
        }
      }
      else
      {
        *(_QWORD *)&v526[16] = 0;
        v526[24] = 1;
        *(_QWORD *)&v492[16] = 0;
      }
      *(_QWORD *)&v492[8] = 0;
      if (v204)
      {
        if (*(_DWORD *)v204 == 2)
          WTF::StringImpl::destroy(v204, v203);
        else
          *(_DWORD *)v204 -= 2;
      }
      WebKit::NetworkConnectionToWebProcess::installMockContentFilter((WebCore::MockContentFilterSettings *)v8, v526);
      if (!v526[24])
        goto LABEL_913;
      v315 = *(WTF::StringImpl **)&v526[16];
      *(_QWORD *)&v526[16] = 0;
      if (v315)
      {
        if (*(_DWORD *)v315 == 2)
          WTF::StringImpl::destroy(v315, v19);
        else
          *(_DWORD *)v315 -= 2;
      }
      v319 = *(WTF::StringImpl **)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      if (!v319)
        goto LABEL_913;
      goto LABEL_727;
    case 0xEA:
      v238 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v7);
      if (v239)
      {
        v240 = v238;
        v241 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
        if (v242)
        {
          *(_QWORD *)v492 = v241;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v492[8], v10);
          v243 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v243 = off_1E34B07D8;
          v243[1] = *(_QWORD *)v492;
          v244 = *(_QWORD *)&v492[8];
          *(_QWORD *)&v492[8] = 0;
          v243[2] = v244;
          *(_QWORD *)v526 = v243;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v492[8]);
          WebKit::NetworkConnectionToWebProcess::isResourceLoadFinished(v8, v240, (uint64_t *)v526);
          v85 = *(_QWORD *)v526;
          *(_QWORD *)v526 = 0;
          if (v85)
            goto LABEL_319;
        }
      }
      goto LABEL_913;
    case 0xEB:
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)v7, (uint64_t)v526);
      v263 = v535;
      if (!(_BYTE)v535)
        goto LABEL_885;
      v264 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!v265)
        goto LABEL_884;
      v266 = v9[1];
      v267 = *v9;
      v268 = ((v9[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v9;
      if (v266 < v268 || v266 - v268 <= 7)
      {
        v439 = 0;
        v440 = 0;
        *v9 = 0;
        v9[1] = 0;
        v441 = v9[3];
        if (v441)
        {
          if (v266)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v441 + 16))(v441, v267, v266);
            v440 = *v9;
            v439 = v9[1];
          }
          else
          {
            v439 = 0;
            v440 = 0;
          }
        }
LABEL_883:
        *v9 = 0;
        v9[1] = 0;
        v442 = v9[3];
        if (v442 && v439)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v442 + 16))(v442, v440);
LABEL_884:
        v263 = 0;
LABEL_885:
        v492[0] = 0;
        goto LABEL_886;
      }
      v270 = (uint64_t *)(v267 + v268);
      v9[2] = (uint64_t)(v270 + 1);
      if (!v267)
      {
        v439 = v266;
        v440 = 0;
        goto LABEL_883;
      }
      if (!(_BYTE)v535)
        goto LABEL_896;
      v271 = v264;
      v272 = *v270;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v492, (uint64_t)v526);
      *(_QWORD *)&v499 = v271;
      *((_QWORD *)&v499 + 1) = v272;
      v263 = 1;
LABEL_886:
      cf[0] = v263;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v526);
      if (!cf[0])
        goto LABEL_897;
      while (1)
      {
        v443 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
        if (!v444)
          break;
        *(_QWORD *)v526 = v443;
        v9 = (uint64_t *)&v526[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
        v445 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v445 = off_1E34B0B08;
        v445[1] = *(_QWORD *)v526;
        v446 = *(_QWORD *)&v526[8];
        *(_QWORD *)&v526[8] = 0;
        v445[2] = v446;
        *(_QWORD *)v541 = v445;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
        if (cf[0])
        {
          WebKit::NetworkConnectionToWebProcess::loadImageForDecoding(v8, (uint64_t)v492, v499, *((uint64_t *)&v499 + 1), (uint64_t *)v541);
          v447 = *(_QWORD *)v541;
          *(_QWORD *)v541 = 0;
          if (v447)
            (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
          break;
        }
LABEL_896:
        __break(1u);
LABEL_897:
        v449 = *v9;
        v450 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v451 = v9[3];
        if (v451)
        {
          if (v450)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v451 + 16))(v451, v449);
            if (cf[0])
              continue;
          }
        }
        goto LABEL_913;
      }
      if (!cf[0])
        goto LABEL_913;
      v448 = *(const void **)&v498[24];
      *(_QWORD *)&v498[24] = 0;
      if (v448)
        CFRelease(v448);
      v320 = (WebCore::ResourceRequestBase *)v492;
      goto LABEL_895;
    case 0xEC:
      IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v492, (uint64_t *)v7, v7);
      if (!(_BYTE)v524)
        goto LABEL_913;
      WebKit::NetworkConnectionToWebProcess::loadPing(v8, (uint64_t)v492);
      goto LABEL_197;
    case 0xED:
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>((uint64_t *)v7, (uint64_t)v541);
      if (!v541[16])
        goto LABEL_912;
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>(v9, (uint64_t)v526);
      if (!v526[16])
        goto LABEL_912;
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>(v9, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_912;
      v141 = v9[1];
      v142 = *v9;
      v143 = v9[2] - *v9;
      if (v141 <= v143)
      {
        v455 = 0;
        v456 = 0;
        *v9 = 0;
        v9[1] = 0;
        v457 = v9[3];
        if (v457)
        {
          if (v141)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v457 + 16))(v457);
            v456 = *v9;
            v455 = v9[1];
          }
          else
          {
            v455 = 0;
            v456 = 0;
          }
        }
      }
      else
      {
        v144 = (unsigned __int8 *)(v142 + v143);
        v9[2] = (uint64_t)(v144 + 1);
        if (v142)
        {
          v145 = ((unint64_t)(v144 + 4) & 0xFFFFFFFFFFFFFFFCLL) - v142;
          if (v141 >= v145 && v141 - v145 > 3)
          {
            v147 = *v144;
            v148 = (int *)((unint64_t)(v144 + 4) & 0xFFFFFFFFFFFFFFFCLL);
            v149 = *v148;
            v9[2] = (uint64_t)(v148 + 1);
            if (v541[16] && v526[16])
            {
              WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(v8, *(char **)v541, *(uint64_t *)&v541[8], *(char **)v526, *(uint64_t *)&v526[8], *(uint64_t *)v492, *(uint64_t *)&v492[8], v147, v149);
              goto LABEL_913;
            }
            goto LABEL_896;
          }
          *v9 = 0;
          v9[1] = 0;
          v459 = v9[3];
          if (v459)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v459 + 16))(v459);
            v477 = *v9;
            v478 = v9[1];
            v479 = v9[3];
            *v9 = 0;
            v9[1] = 0;
            if (v479)
            {
              if (v478)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v479 + 16))(v479, v477);
            }
          }
LABEL_912:
          v356 = *v9;
          v362 = v9[1];
          *v9 = 0;
          v9[1] = 0;
          v358 = v9[3];
          if (v358)
            goto LABEL_916;
          goto LABEL_913;
        }
        v455 = v141;
        v456 = 0;
      }
      *v9 = 0;
      v9[1] = 0;
      v458 = v9[3];
      if (v458 && v455)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v458 + 16))(v458, v456, v455);
      goto LABEL_912;
    case 0xEE:
      IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[8])
        goto LABEL_913;
      WebKit::NetworkConnectionToWebProcess::logUserInteraction(v8, (WTF::ASCIICaseInsensitiveHash **)v492);
      if (!v492[8])
        goto LABEL_913;
      goto LABEL_648;
    case 0xEF:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v7, (uint64_t)v492);
      if (v492[16])
        WebCore::MessagePortChannelRegistry::didCloseMessagePort();
      goto LABEL_913;
    case 0xF0:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v7, (uint64_t)v492);
      if (v492[16])
        WebKit::NetworkConnectionToWebProcess::messagePortDisentangled(v8, v492);
      goto LABEL_913;
    case 0xF1:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)v7, v492);
      if (!v492[40])
        goto LABEL_913;
      v273 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_371;
      *(_QWORD *)v526 = v273;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v274 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v274 = off_1E34B0AB8;
      v274[1] = *(_QWORD *)v526;
      v275 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v274[2] = v275;
      *(_QWORD *)v541 = v274;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[40])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(v8, (uint64_t *)v492, (uint64_t *)v541);
      goto LABEL_369;
    case 0xF2:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)v7, v492);
      if (!v492[40])
        goto LABEL_913;
      v228 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_371;
      *(_QWORD *)v526 = v228;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v229 = off_1E34B0A90;
      v229[1] = *(_QWORD *)v526;
      v230 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v229[2] = v230;
      *(_QWORD *)v541 = v229;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[40])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::navigatorGetPushSubscription(v8, (uint64_t *)v492, (uint64_t *)v541);
      goto LABEL_369;
    case 0xF3:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v7, v492);
      if (!v492[56])
        goto LABEL_233;
      v178 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v177)
        goto LABEL_233;
      *(_QWORD *)v526 = v178;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v179 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v179 = off_1E34B0A40;
      v179[1] = *(_QWORD *)v526;
      v180 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v179[2] = v180;
      *(_QWORD *)v541 = v179;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[56])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(v8, (const WTF::URL *)v492, (uint64_t)&v492[40], (uint64_t *)v541);
      v181 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v181)
        (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
LABEL_233:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v492, v177);
      goto LABEL_913;
    case 0xF4:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v526);
      if (!v526[40])
        goto LABEL_651;
      v231 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v185)
      {
        v492[0] = 0;
        v492[48] = 0;
        if (v526[40])
        {
          v318 = *(WTF::StringImpl **)v526;
          *(_QWORD *)v526 = 0;
          if (v318)
          {
LABEL_571:
            if (*(_DWORD *)v318 == 2)
              WTF::StringImpl::destroy(v318, v185);
            else
              *(_DWORD *)v318 -= 2;
          }
        }
        goto LABEL_651;
      }
      if (!v526[40])
        goto LABEL_896;
      *(_QWORD *)v492 = *(_QWORD *)v526;
      *(_OWORD *)&v492[8] = *(_OWORD *)&v526[8];
      *(_OWORD *)&v492[24] = *(_OWORD *)&v526[24];
      *(_QWORD *)&v492[40] = v231;
      v492[48] = 1;
      v232 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if ((_BYTE)v19)
      {
        *(_QWORD *)v526 = v232;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
        v233 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v233 = off_1E34B0A68;
        v233[1] = *(_QWORD *)v526;
        v234 = *(_QWORD *)&v526[8];
        *(_QWORD *)&v526[8] = 0;
        v233[2] = v234;
        *(_QWORD *)v541 = v233;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
        WebKit::NetworkConnectionToWebProcess::navigatorUnsubscribeFromPushService(v8, (uint64_t *)v492, (uint64_t *)&v492[40], (uint64_t *)v541);
        v235 = *(_QWORD *)v541;
        *(_QWORD *)v541 = 0;
        if (v235)
          (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
        if (!v492[48])
          goto LABEL_913;
      }
      goto LABEL_648;
    case 0xF5:
      v66 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v7);
      if (v67)
        WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage(v8, v66);
      goto LABEL_913;
    case 0xF6:
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>((uint64_t *)v7, (uint64_t)v526);
      if (!v526[24]
        || (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, (uint64_t)v541), !v541[16]))
      {
        v492[0] = 0;
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v526, v49);
        goto LABEL_651;
      }
      if (!v526[24])
        goto LABEL_896;
      v50 = *(_OWORD *)v526;
      memset(v526, 0, 24);
      *(_OWORD *)v492 = v50;
      *(_QWORD *)&v492[16] = *(_QWORD *)&v526[16];
      *(_OWORD *)&v492[24] = *(_OWORD *)v541;
      v492[40] = 1;
      std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v526, v49);
      WebKit::NetworkConnectionToWebProcess::postMessageToRemote(v8, (uint64_t)v492, (uint64_t *)&v492[24]);
      if (v492[40])
      {
        v52 = *(WTF **)&v492[8];
        if (*(_QWORD *)&v492[8])
        {
          *(_QWORD *)&v492[8] = 0;
          *(_DWORD *)&v492[16] = 0;
          WTF::fastFree(v52, v51);
        }
        v53 = *(unsigned int **)v492;
        *(_QWORD *)v492 = 0;
        if (v53)
        {
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            atomic_store(1u, v53);
            *(_QWORD *)v526 = v53;
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)v526);
          }
        }
      }
      goto LABEL_913;
    case 0xF7:
      IPC::Decoder::decode<std::optional<PAL::SessionID>>((uint64_t *)v7, v541);
      if (v541[16] && (IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v526, v9, v45), v540))
      {
        if (!v541[16])
          goto LABEL_896;
        *(_OWORD *)v492 = *(_OWORD *)v541;
        WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&v492[16], (uint64_t)v526);
        v525 = 1;
        if (!v540)
          goto LABEL_56;
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v526, v46);
        if (v525)
          goto LABEL_56;
      }
      else
      {
        v492[0] = 0;
        v525 = 0;
      }
      v299 = *v9;
      v300 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v301 = v9[3];
      if (!v301)
        goto LABEL_913;
      if (!v300)
        goto LABEL_913;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v299);
      if (!v525)
        goto LABEL_913;
LABEL_56:
      WebKit::NetworkConnectionToWebProcess::preconnectTo(v8, *(uint64_t *)v492, v492[8], (uint64_t)&v492[16]);
      if (!v525)
        goto LABEL_913;
      v47 = (WebKit::NetworkResourceLoadParameters *)&v492[16];
      goto LABEL_402;
    case 0xF8:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[8])
        goto LABEL_913;
      WebCore::prefetchDNS((WebCore *)v492, v48);
      if (!v492[8])
        goto LABEL_913;
      goto LABEL_726;
    case 0xF9:
      v20 = *(_QWORD *)(v7 + 8);
      v21 = *(_QWORD *)v7;
      v22 = ((*(_QWORD *)(v7 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)v7;
      if (v20 < v22 || v20 - v22 <= 7)
      {
        v401 = 0;
        v402 = 0;
        *v9 = 0;
        v9[1] = 0;
        v403 = v9[3];
        if (v403)
        {
          if (v20)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v403 + 16))(v403, v21, v20);
            v402 = *v9;
            v401 = v9[1];
          }
          else
          {
            v401 = 0;
            v402 = 0;
          }
        }
        goto LABEL_810;
      }
      v24 = (unint64_t *)(v21 + v22);
      *(_QWORD *)(v7 + 16) = v24 + 1;
      if (!v21)
      {
        v401 = v20;
        v402 = 0;
LABEL_810:
        *v9 = 0;
        v9[1] = 0;
        v404 = v9[3];
        if (v404 && v401)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v404 + 16))(v404, v402);
        goto LABEL_772;
      }
      v25 = *v24;
      *(_QWORD *)v492 = 0;
      *(_QWORD *)&v492[8] = 0;
      if (v25 < 0x20000)
      {
        if (v25)
        {
          *(_DWORD *)&v492[8] = v25;
          *(_QWORD *)v492 = WTF::fastMalloc((WTF *)(8 * v25));
          do
          {
            v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
            *(_QWORD *)v526 = v26;
            *(_QWORD *)&v526[8] = v27;
            if (!(_BYTE)v27)
              goto LABEL_770;
            if (*(_DWORD *)&v492[12] == *(_DWORD *)&v492[8])
            {
              v28 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v492, *(unsigned int *)&v492[12] + 1, (unint64_t)v526);
              *(_QWORD *)(*(_QWORD *)v492 + 8 * *(unsigned int *)&v492[12]) = *v28;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v492 + 8 * *(unsigned int *)&v492[12]) = v26;
            }
            v29 = ++*(_DWORD *)&v492[12];
            --v25;
          }
          while (v25);
          v30 = *(_QWORD *)v492;
          v31 = *(_DWORD *)&v492[8];
        }
        else
        {
          v29 = 0;
          v31 = 0;
          v30 = 0;
        }
LABEL_473:
        *(_QWORD *)v492 = v30;
        *(_DWORD *)&v492[8] = v31;
        *(_DWORD *)&v492[12] = v29;
        v492[16] = 1;
        WebKit::NetworkConnectionToWebProcess::prioritizeResourceLoads(v8, (uint64_t)v492);
        if (*(_QWORD *)v492)
          WTF::fastFree(*(WTF **)v492, v313);
        goto LABEL_913;
      }
      while (1)
      {
        v388 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
        *(_QWORD *)v526 = v388;
        *(_QWORD *)&v526[8] = v27;
        if (!(_BYTE)v27)
          break;
        if (*(_DWORD *)&v492[12] == *(_DWORD *)&v492[8])
        {
          v386 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v492, *(unsigned int *)&v492[12] + 1, (unint64_t)v526);
          *(_QWORD *)(*(_QWORD *)v492 + 8 * *(unsigned int *)&v492[12]) = *v386;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v492 + 8 * *(unsigned int *)&v492[12]) = v388;
        }
        v387 = ++*(_DWORD *)&v492[12];
        if (!--v25)
        {
          WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v492, v387);
          v30 = *(_QWORD *)v492;
          v31 = *(_DWORD *)&v492[8];
          v29 = *(_DWORD *)&v492[12];
          goto LABEL_473;
        }
      }
LABEL_770:
      v389 = *(WTF **)v492;
      if (*(_QWORD *)v492)
      {
        *(_QWORD *)v492 = 0;
        *(_DWORD *)&v492[8] = 0;
        WTF::fastFree(v389, v27);
      }
LABEL_772:
      v390 = *v9;
      v357 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v358 = v9[3];
      if (!v358)
      {
LABEL_773:
        v357 = 0;
LABEL_774:
        v356 = 0;
        goto LABEL_775;
      }
      if (!v357)
        goto LABEL_774;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v358 + 16))(v358, v390);
LABEL_792:
      v356 = *v9;
      v357 = v9[1];
      v358 = v9[3];
LABEL_775:
      *v9 = 0;
      v9[1] = 0;
      if (!v358)
        goto LABEL_913;
LABEL_652:
      if (!v357)
        goto LABEL_913;
      goto LABEL_917;
    case 0xFA:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v489);
      if (v491)
      {
        IPC::Decoder::decode<WTF::URL>(v9, v546);
        if (v548)
        {
          IPC::Decoder::decode<WebCore::PolicyContainer>(v9, (uint64_t)v526);
          if (v526[80] && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v9, (uint64_t)v541), v543))
          {
            if (!v491 || !v548 || !v526[80])
              goto LABEL_896;
            v279 = *(_QWORD *)v489;
            *(_QWORD *)v489 = 0;
            *(_QWORD *)v492 = v279;
            *(_OWORD *)&v492[8] = *(_OWORD *)&v489[8];
            *(_OWORD *)&v492[24] = v490;
            *(_DWORD *)&v489[8] &= ~1u;
            v280 = *(_QWORD *)v546;
            *(_QWORD *)v546 = 0;
            *(_QWORD *)&v492[40] = v280;
            *(_OWORD *)&v492[48] = *(_OWORD *)&v546[8];
            *(_OWORD *)&v492[64] = v547;
            *(_DWORD *)&v546[8] &= ~1u;
            v281 = *(_QWORD *)v526;
            *(_QWORD *)v526 = 0;
            *(_QWORD *)&v492[80] = v281;
            v282 = *(_QWORD *)&v526[8];
            *(_QWORD *)&v526[8] = 0;
            *(_QWORD *)&v492[88] = v282;
            v492[100] = v526[20];
            *(_DWORD *)&v492[96] = *(_DWORD *)&v526[16];
            *(_WORD *)&v492[104] = *(_WORD *)&v526[24];
            v283 = *(_OWORD *)&v526[32];
            *(_OWORD *)&v526[32] = 0u;
            v493 = v283;
            *(_WORD *)v494 = *(_WORD *)&v526[48];
            v284 = *(_OWORD *)&v526[56];
            *(_OWORD *)&v526[56] = 0u;
            v496 = v284;
            LOBYTE(v497) = v526[72];
            BYTE8(v497) = 0;
            v498[24] = 0;
            if (BYTE8(v542))
            {
              *(_DWORD *)&v498[16] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v497 + 8, (uint64_t)v541);
              v498[24] = 1;
              LOBYTE(v499) = 1;
              if (v543 && BYTE8(v542) && (_DWORD)v542 != -1)
                ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B0790[v542])(v487, v541);
            }
            else
            {
              LOBYTE(v499) = 1;
            }
          }
          else
          {
            v492[0] = 0;
            LOBYTE(v499) = 0;
          }
          std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v526, v278);
          if (v548)
          {
            v314 = *(WTF::StringImpl **)v546;
            *(_QWORD *)v546 = 0;
            if (v314)
            {
              if (*(_DWORD *)v314 == 2)
                WTF::StringImpl::destroy(v314, v277);
              else
                *(_DWORD *)v314 -= 2;
            }
          }
        }
        else
        {
          v492[0] = 0;
          LOBYTE(v499) = 0;
        }
        if (v491)
        {
          v323 = *(WTF::StringImpl **)v489;
          *(_QWORD *)v489 = 0;
          if (v323)
          {
            if (*(_DWORD *)v323 == 2)
              WTF::StringImpl::destroy(v323, v277);
            else
              *(_DWORD *)v323 -= 2;
          }
        }
      }
      else
      {
        v492[0] = 0;
        LOBYTE(v499) = 0;
      }
      if (!(_BYTE)v499)
      {
        v414 = *v9;
        v415 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v416 = v9[3];
        if (!v416)
          goto LABEL_913;
        if (!v415)
          goto LABEL_913;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v416 + 16))(v416, v414);
        if (!(_BYTE)v499)
          goto LABEL_913;
      }
      WebKit::NetworkConnectionToWebProcess::registerBlobURL(v8, (uint64_t)v492, (uint64_t)&v492[40], (uint64_t)&v492[80], (uint64_t)&v497 + 8);
      if (!(_BYTE)v499)
        goto LABEL_913;
      if (v498[24])
      {
        if (*(_DWORD *)&v498[16] != -1)
          ((void (*)(_BYTE *, char *))off_1E34B0790[*(unsigned int *)&v498[16]])(v526, (char *)&v497 + 8);
        *(_DWORD *)&v498[16] = -1;
      }
      v325 = (WTF::StringImpl *)*((_QWORD *)&v496 + 1);
      *((_QWORD *)&v496 + 1) = 0;
      if (v325)
      {
        if (*(_DWORD *)v325 == 2)
          WTF::StringImpl::destroy(v325, v324);
        else
          *(_DWORD *)v325 -= 2;
      }
      v326 = (WTF::StringImpl *)v496;
      *(_QWORD *)&v496 = 0;
      if (v326)
      {
        if (*(_DWORD *)v326 == 2)
          WTF::StringImpl::destroy(v326, v324);
        else
          *(_DWORD *)v326 -= 2;
      }
      v327 = (WTF::StringImpl *)*((_QWORD *)&v493 + 1);
      *((_QWORD *)&v493 + 1) = 0;
      if (v327)
      {
        if (*(_DWORD *)v327 == 2)
          WTF::StringImpl::destroy(v327, v324);
        else
          *(_DWORD *)v327 -= 2;
      }
      v328 = (WTF::StringImpl *)v493;
      *(_QWORD *)&v493 = 0;
      if (v328)
      {
        if (*(_DWORD *)v328 == 2)
          WTF::StringImpl::destroy(v328, v324);
        else
          *(_DWORD *)v328 -= 2;
      }
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v492[80], v324);
      goto LABEL_722;
    case 0xFB:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[80])
        WebKit::NetworkConnectionToWebProcess::registerBlobURLHandle(v8, (uint64_t)v492, (uint64_t)&v492[40]);
      goto LABEL_322;
    case 0xFC:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v526);
      if (!v526[40])
        goto LABEL_778;
      v90 = v9[1];
      v91 = *v9;
      v92 = ((v9[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v9;
      if (v90 < v92 || v90 - v92 <= 7)
      {
        v417 = 0;
        v418 = 0;
        *v9 = 0;
        v9[1] = 0;
        v419 = v9[3];
        if (v419)
        {
          if (v90)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v419 + 16))(v419, v91, v90);
            v418 = *v9;
            v417 = v9[1];
          }
          else
          {
            v417 = 0;
            v418 = 0;
          }
        }
        goto LABEL_831;
      }
      v94 = (unint64_t *)(v91 + v92);
      v9[2] = (uint64_t)(v94 + 1);
      if (!v91)
      {
        v417 = v90;
        v418 = 0;
LABEL_831:
        *v9 = 0;
        v9[1] = 0;
        v420 = v9[3];
        if (v420 && v417)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v420 + 16))(v420, v418);
        goto LABEL_844;
      }
      v95 = *v94;
      *(_OWORD *)v546 = 0uLL;
      if (v95 >= 0x5555)
      {
        while (1)
        {
          IPC::Decoder::decode<WebCore::BlobPart>(v492, v9);
          if (!v492[48])
            break;
          v421 = *(_DWORD *)&v546[12];
          if (*(_DWORD *)&v546[12] == *(_DWORD *)&v546[8])
          {
            WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v546, (unint64_t)v492);
          }
          else
          {
            v422 = *(_QWORD *)v546 + 48 * *(unsigned int *)&v546[12];
            *(_BYTE *)v422 = 0;
            *(_DWORD *)(v422 + 40) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v422, (uint64_t)v492);
            *(_DWORD *)&v546[12] = v421 + 1;
          }
          if (v492[48] && *(_DWORD *)&v492[40] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34B0890[*(unsigned int *)&v492[40]])(v541, v492);
          if (!--v95)
          {
            v426 = *(_DWORD *)&v546[12];
            v10 = *(unsigned __int8 ***)v546;
            if (*(_DWORD *)&v546[8] > *(_DWORD *)&v546[12])
            {
              v427 = *(unsigned __int8 ***)v546;
              if (*(_DWORD *)&v546[12])
              {
                if (*(_DWORD *)&v546[12] >= 0x5555556u)
                {
                  __break(0xC471u);
                  return;
                }
                v428 = 48 * *(_DWORD *)&v546[12];
                v429 = WTF::fastMalloc((WTF *)(48 * *(unsigned int *)&v546[12]));
                *(_DWORD *)&v546[8] = (v428 & 0xFFFFFFF0) / 0x30;
                *(_QWORD *)v546 = v429;
                v427 = v10;
                if ((unsigned __int8 **)v429 != v10)
                {
                  WTF::VectorMover<false,WebCore::BlobPart>::move((uint64_t)v10, (uint64_t)&v10[6 * v426], v429);
                  v427 = *(unsigned __int8 ***)v546;
                }
              }
              if (v10)
              {
                if (v427 == v10)
                {
                  *(_QWORD *)v546 = 0;
                  *(_DWORD *)&v546[8] = 0;
                }
                WTF::fastFree((WTF *)v10, v89);
                v10 = *(unsigned __int8 ***)v546;
              }
              else
              {
                v10 = v427;
              }
            }
            *(_QWORD *)v541 = v10;
            LODWORD(v95) = *(_DWORD *)&v546[8];
            v293 = *(_DWORD *)&v546[12];
            *(_OWORD *)v546 = 0uLL;
            goto LABEL_416;
          }
        }
LABEL_843:
        WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v546, v97);
LABEL_844:
        v297 = (WTF::StringImpl *)*v9;
        v423 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v424 = v9[3];
        if (v424)
          v425 = v423 == 0;
        else
          v425 = 1;
        if (!v425)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v424 + 16))(v424, v297);
        v296 = 0;
        v492[0] = 0;
        v492[64] = 0;
        goto LABEL_420;
      }
      if (v95)
      {
        v96 = WTF::fastMalloc((WTF *)(48 * v95));
        *(_DWORD *)&v546[8] = 48 * (int)v95 / 0x30u;
        *(_QWORD *)v546 = v96;
        do
        {
          IPC::Decoder::decode<WebCore::BlobPart>(v492, v9);
          if (!v492[48])
            goto LABEL_843;
          v98 = *(_DWORD *)&v546[12];
          if (*(_DWORD *)&v546[12] == *(_DWORD *)&v546[8])
          {
            WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v546, (unint64_t)v492);
          }
          else
          {
            v99 = *(_QWORD *)v546 + 48 * *(unsigned int *)&v546[12];
            *(_BYTE *)v99 = 0;
            *(_DWORD *)(v99 + 40) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v99, (uint64_t)v492);
            *(_DWORD *)&v546[12] = v98 + 1;
          }
          if (v492[48] && *(_DWORD *)&v492[40] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34B0890[*(unsigned int *)&v492[40]])(v541, v492);
          --v95;
        }
        while (v95);
        v10 = *(unsigned __int8 ***)v546;
        LODWORD(v95) = *(_DWORD *)&v546[8];
        v293 = *(_DWORD *)&v546[12];
      }
      else
      {
        v293 = 0;
        v10 = 0;
      }
      *(_OWORD *)v546 = 0uLL;
      *(_QWORD *)v541 = v10;
LABEL_416:
      *(_DWORD *)&v541[8] = v95;
      *(_DWORD *)&v541[12] = v293;
      v541[16] = 1;
      WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v546, v89);
      IPC::Decoder::decode<WTF::String>(v9, v546);
      if (v546[8])
      {
        if (!v526[40])
          goto LABEL_896;
        v295 = *(_QWORD *)v526;
        *(_QWORD *)v526 = 0;
        *(_QWORD *)v492 = v295;
        *(_OWORD *)&v492[8] = *(_OWORD *)&v526[8];
        *(_OWORD *)&v492[24] = *(_OWORD *)&v526[24];
        *(_DWORD *)&v526[8] &= ~1u;
        *(_QWORD *)v541 = 0;
        *(_QWORD *)&v492[40] = v10;
        *(_QWORD *)&v541[8] = 0;
        *(_DWORD *)&v492[48] = v95;
        *(_DWORD *)&v492[52] = v293;
        v296 = 1;
        *(_QWORD *)&v492[56] = *(_QWORD *)v546;
      }
      else
      {
        v296 = 0;
        v492[0] = 0;
      }
      v492[64] = v296;
      WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v541, v294);
LABEL_420:
      if (v526[40])
      {
        v298 = *(WTF::StringImpl **)v526;
        *(_QWORD *)v526 = 0;
        if (v298)
        {
          if (*(_DWORD *)v298 == 2)
            WTF::StringImpl::destroy(v298, v297);
          else
            *(_DWORD *)v298 -= 2;
        }
      }
      if (v296)
      {
        WebKit::NetworkConnectionToWebProcess::registerInternalBlobURL(v8, (uint64_t)v492);
        if (!v492[64])
          goto LABEL_913;
        v322 = *(WTF::StringImpl **)&v492[56];
        *(_QWORD *)&v492[56] = 0;
        if (v322)
        {
          if (*(_DWORD *)v322 == 2)
            WTF::StringImpl::destroy(v322, v321);
          else
            *(_DWORD *)v322 -= 2;
        }
        WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v492[40], v321);
LABEL_726:
        v319 = *(WTF::StringImpl **)v492;
        *(_QWORD *)v492 = 0;
        if (v319)
        {
LABEL_727:
          if (*(_DWORD *)v319 == 2)
LABEL_729:
            WTF::StringImpl::destroy(v319, v19);
          else
            *(_DWORD *)v319 -= 2;
        }
      }
      else
      {
LABEL_778:
        v356 = *v9;
        v362 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v358 = v9[3];
        if (!v358)
          goto LABEL_913;
LABEL_916:
        if (v362)
LABEL_917:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v358 + 16))(v358, v356);
      }
      goto LABEL_913;
    case 0xFD:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v541);
      if (!v543)
        goto LABEL_697;
      IPC::Decoder::decode<WTF::URL>(v9, v526);
      if (v526[40])
      {
        v10 = (unsigned __int8 **)IPC::Decoder::decode<long long>(v9);
        if ((_BYTE)v191 && (v192 = IPC::Decoder::decode<long long>(v9), (_BYTE)v191))
        {
          v3 = v192;
          IPC::Decoder::decode<WTF::String>(v9, v546);
          if (v546[8])
          {
            if (!v543 || !v526[40])
              goto LABEL_896;
            v193 = *(_QWORD *)v541;
            *(_QWORD *)v541 = 0;
            *(_QWORD *)v492 = v193;
            *(_OWORD *)&v492[8] = *(_OWORD *)&v541[8];
            *(_OWORD *)&v492[24] = v542;
            *(_DWORD *)&v541[8] &= ~1u;
            v194 = *(_QWORD *)v526;
            *(_QWORD *)v526 = 0;
            *(_QWORD *)&v492[40] = v194;
            *(_OWORD *)&v492[48] = *(_OWORD *)&v526[8];
            *(_OWORD *)&v492[64] = *(_OWORD *)&v526[24];
            *(_DWORD *)&v526[8] &= ~1u;
            *(_QWORD *)&v492[80] = v10;
            *(_QWORD *)&v492[88] = v3;
            v195 = 1;
            *(_QWORD *)&v492[96] = *(_QWORD *)v546;
          }
          else
          {
            v195 = 0;
            v492[0] = 0;
          }
          v492[104] = v195;
        }
        else
        {
          v195 = 0;
          v492[0] = 0;
          v492[104] = 0;
        }
        if (v526[40])
        {
          v365 = *(WTF::StringImpl **)v526;
          *(_QWORD *)v526 = 0;
          if (v365)
          {
            if (*(_DWORD *)v365 == 2)
              WTF::StringImpl::destroy(v365, v191);
            else
              *(_DWORD *)v365 -= 2;
          }
        }
      }
      else
      {
        v195 = 0;
        v492[0] = 0;
        v492[104] = 0;
      }
      if (v543)
      {
        v366 = *(WTF::StringImpl **)v541;
        *(_QWORD *)v541 = 0;
        if (v366)
        {
          if (*(_DWORD *)v366 == 2)
            WTF::StringImpl::destroy(v366, v191);
          else
            *(_DWORD *)v366 -= 2;
        }
      }
      if (!v195)
      {
LABEL_697:
        v356 = *v9;
        v362 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v358 = v9[3];
        if (!v358)
          goto LABEL_913;
        goto LABEL_916;
      }
      WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLForSlice((WebKit::NetworkConnectionToWebProcess *)v8, (const WTF::URL *)v492, (const WTF::URL *)&v492[40], (uint64_t)v10, v3, (const WTF::String *)&v492[96]);
      if (!v492[104])
        goto LABEL_913;
      v363 = *(WTF::StringImpl **)&v492[96];
      *(_QWORD *)&v492[96] = 0;
      if (v363)
        goto LABEL_719;
      goto LABEL_722;
    case 0xFE:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v541);
      if (!v543)
        goto LABEL_670;
      IPC::Decoder::decode<WTF::URL>(v9, v526);
      if (!v526[40])
      {
        v262 = 0;
        v492[0] = 0;
        v492[96] = 0;
        goto LABEL_660;
      }
      IPC::Decoder::decode<WTF::String>(v9, v489);
      if (!v489[8])
      {
        v262 = 0;
        v492[0] = 0;
        v492[96] = 0;
        goto LABEL_655;
      }
      IPC::Decoder::decode<WTF::String>(v9, v546);
      if (v546[8])
      {
        if (!v543 || !v526[40] || !v489[8])
          goto LABEL_896;
        v259 = *(_QWORD *)v541;
        *(_QWORD *)v541 = 0;
        *(_QWORD *)v492 = v259;
        *(_OWORD *)&v492[8] = *(_OWORD *)&v541[8];
        *(_OWORD *)&v492[24] = v542;
        *(_DWORD *)&v541[8] &= ~1u;
        v260 = *(_QWORD *)v526;
        *(_QWORD *)v526 = 0;
        *(_QWORD *)&v492[40] = v260;
        *(_OWORD *)&v492[48] = *(_OWORD *)&v526[8];
        *(_OWORD *)&v492[64] = *(_OWORD *)&v526[24];
        *(_DWORD *)&v526[8] &= ~1u;
        v261 = *(_QWORD *)v489;
        *(_QWORD *)v489 = 0;
        *(_QWORD *)&v492[80] = v261;
        *(_QWORD *)&v492[88] = *(_QWORD *)v546;
        v262 = 1;
        v492[96] = 1;
      }
      else
      {
        v262 = 0;
        v492[0] = 0;
        v492[96] = 0;
        if (!v489[8])
          goto LABEL_655;
      }
      v345 = *(WTF::StringImpl **)v489;
      *(_QWORD *)v489 = 0;
      if (v345)
      {
        if (*(_DWORD *)v345 == 2)
          WTF::StringImpl::destroy(v345, v258);
        else
          *(_DWORD *)v345 -= 2;
      }
LABEL_655:
      if (v526[40])
      {
        v359 = *(WTF::StringImpl **)v526;
        *(_QWORD *)v526 = 0;
        if (v359)
        {
          if (*(_DWORD *)v359 == 2)
            WTF::StringImpl::destroy(v359, v258);
          else
            *(_DWORD *)v359 -= 2;
        }
      }
LABEL_660:
      if (v543)
      {
        v360 = *(WTF::StringImpl **)v541;
        *(_QWORD *)v541 = 0;
        if (v360)
        {
          if (*(_DWORD *)v360 == 2)
            WTF::StringImpl::destroy(v360, v258);
          else
            *(_DWORD *)v360 -= 2;
        }
      }
      if (!v262)
      {
LABEL_670:
        v356 = *v9;
        v362 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v358 = v9[3];
        if (!v358)
          goto LABEL_913;
        goto LABEL_916;
      }
      WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked((WebKit::NetworkConnectionToWebProcess *)v8, (const WTF::URL *)v492, (const WTF::URL *)&v492[40], (const WTF::String *)&v492[80], (const WTF::String *)&v492[88]);
      if (!v492[96])
        goto LABEL_913;
      v361 = *(WTF::StringImpl **)&v492[88];
      *(_QWORD *)&v492[88] = 0;
      if (v361)
      {
        if (*(_DWORD *)v361 == 2)
          WTF::StringImpl::destroy(v361, v19);
        else
          *(_DWORD *)v361 -= 2;
      }
      v363 = *(WTF::StringImpl **)&v492[80];
      *(_QWORD *)&v492[80] = 0;
      if (v363)
        goto LABEL_719;
      goto LABEL_722;
    case 0xFF:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v526);
      if (!v526[40])
        goto LABEL_715;
      IPC::Decoder::decode<WTF::String>(v9, v487);
      if (!LOBYTE(v487[1]))
      {
        v317 = 0;
        v492[0] = 0;
        v492[72] = 0;
        goto LABEL_705;
      }
      IPC::Decoder::decode<WTF::String>(v9, v489);
      if (!v489[8])
      {
        v317 = 0;
        v492[0] = 0;
        v492[72] = 0;
        goto LABEL_700;
      }
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(v9, (uint64_t)v546);
      if (!v546[8])
      {
        v317 = 0;
        v492[0] = 0;
        v492[72] = 0;
        goto LABEL_677;
      }
      IPC::Decoder::decode<WTF::String>(v9, v541);
      if (v541[8])
      {
        if (!v526[40] || !LOBYTE(v487[1]) || !v489[8] || !v546[8])
          goto LABEL_896;
        v13 = *(_QWORD *)v526;
        *(_QWORD *)v526 = 0;
        *(_QWORD *)v492 = v13;
        *(_OWORD *)&v492[8] = *(_OWORD *)&v526[8];
        *(_OWORD *)&v492[24] = *(_OWORD *)&v526[24];
        *(_DWORD *)&v526[8] &= ~1u;
        v14 = v487[0];
        v487[0] = 0;
        v15 = *(_QWORD *)v489;
        *(_QWORD *)v489 = 0;
        *(_QWORD *)&v492[40] = v14;
        *(_QWORD *)&v492[48] = v15;
        v16 = *(_QWORD *)v546;
        *(_QWORD *)v546 = 0;
        *(_QWORD *)&v492[56] = v16;
        *(_QWORD *)&v492[64] = *(_QWORD *)v541;
        v17 = 1;
        v492[72] = 1;
      }
      else
      {
        v17 = 0;
        v317 = 0;
        v492[0] = 0;
        v492[72] = 0;
        if (!v546[8])
          goto LABEL_677;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v546);
      v317 = v17;
LABEL_677:
      if (v489[8])
      {
        v364 = *(WTF::StringImpl **)v489;
        *(_QWORD *)v489 = 0;
        if (v364)
        {
          if (*(_DWORD *)v364 == 2)
            WTF::StringImpl::destroy(v364, v12);
          else
            *(_DWORD *)v364 -= 2;
        }
      }
LABEL_700:
      if (LOBYTE(v487[1]))
      {
        v367 = v487[0];
        v487[0] = 0;
        if (v367)
        {
          if (*(_DWORD *)v367 == 2)
            WTF::StringImpl::destroy(v367, v12);
          else
            *(_DWORD *)v367 -= 2;
        }
      }
LABEL_705:
      if (v526[40])
      {
        v368 = *(WTF::StringImpl **)v526;
        *(_QWORD *)v526 = 0;
        if (v368)
        {
          if (*(_DWORD *)v368 == 2)
            WTF::StringImpl::destroy(v368, v12);
          else
            *(_DWORD *)v368 -= 2;
        }
      }
      if (!v317)
      {
LABEL_715:
        v356 = *v9;
        v362 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v358 = v9[3];
        if (!v358)
          goto LABEL_913;
        goto LABEL_916;
      }
      WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL((_QWORD *)v8, (uint64_t)v492, (const WTF::String *)&v492[40], (const WTF::String *)&v492[48], (uint64_t *)&v492[56]);
      if (!v492[72])
        goto LABEL_913;
      v370 = *(WTF::StringImpl **)&v492[64];
      *(_QWORD *)&v492[64] = 0;
      if (v370)
      {
        if (*(_DWORD *)v370 == 2)
          WTF::StringImpl::destroy(v370, v369);
        else
          *(_DWORD *)v370 -= 2;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v492[56]);
      v363 = *(WTF::StringImpl **)&v492[48];
      *(_QWORD *)&v492[48] = 0;
      if (v363)
      {
LABEL_719:
        if (*(_DWORD *)v363 == 2)
          WTF::StringImpl::destroy(v363, v19);
        else
          *(_DWORD *)v363 -= 2;
      }
LABEL_722:
      v343 = *(WTF::StringImpl **)&v492[40];
      *(_QWORD *)&v492[40] = 0;
      if (!v343)
        goto LABEL_726;
      goto LABEL_723;
    case 0x100:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v7, v6, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_913;
      if (*(_DWORD *)&v492[12])
      {
        v62 = *(WTF::ASCIICaseInsensitiveHash ***)v492;
        v63 = 8 * *(unsigned int *)&v492[12];
        do
        {
          WebKit::NetworkSchemeRegistry::registerURLSchemeAsCORSEnabled(*(_QWORD *)(v8 + 280), v62++);
          v63 -= 8;
        }
        while (v63);
        if (!v492[16])
          goto LABEL_913;
      }
      goto LABEL_413;
    case 0x101:
      v236 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v7);
      if (v237)
        WebKit::NetworkConnectionToWebProcess::removeLoadIdentifier((uint64_t *)v8, v236);
      goto LABEL_913;
    case 0x102:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[32])
        WebKit::NetworkConnectionToWebProcess::removeOriginAccessAllowListEntry((WebKit::NetworkConnectionToWebProcess *)v8, (const WTF::String *)v492, (const WTF::String *)&v492[8], (const WTF::String *)&v492[16], (const WTF::String *)v492[24]);
LABEL_405:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v492, v11);
      goto LABEL_913;
    case 0x103:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_912;
      IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!v37)
        goto LABEL_912;
      if (!v492[16])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::removeStorageAccessForFrame(v8);
      goto LABEL_913;
    case 0x104:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)v7, (uint64_t)v546);
      if (!v546[8])
        goto LABEL_651;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v541);
      if (v541[8])
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, (uint64_t)v526);
        if (v526[16]
          && (v69 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9),
              (_BYTE)v68)
          && (v3 = v69,
              v70 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9),
              (_BYTE)v68)
          && (v4 = (_QWORD *)v70,
              v71 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v9),
              v71 > 0xFFu))
        {
          if (!v546[8] || !v541[8] || !v526[16])
            goto LABEL_896;
          v72 = v71;
          v371 = *(_QWORD *)v546;
          *(_QWORD *)v546 = 0;
          v372 = *(_QWORD *)v541;
          *(_QWORD *)v541 = 0;
          *(_QWORD *)v492 = v371;
          *(_QWORD *)&v492[8] = v372;
          *(_OWORD *)&v492[16] = *(_OWORD *)v526;
          *(_QWORD *)&v492[32] = v3;
          *(_QWORD *)&v492[40] = v4;
          v73 = 1;
          v492[48] = v71;
        }
        else
        {
          v72 = 0;
          v73 = 0;
          v492[0] = 0;
        }
        v492[56] = v73;
        if (v541[8])
        {
          v74 = *(WTF::StringImpl **)v541;
          *(_QWORD *)v541 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v68);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
      }
      else
      {
        v72 = 0;
        v73 = 0;
        v492[0] = 0;
        v492[56] = 0;
      }
      if (v546[8])
      {
        v346 = *(WTF::StringImpl **)v546;
        *(_QWORD *)v546 = 0;
        if (v346)
        {
          if (*(_DWORD *)v346 == 2)
            WTF::StringImpl::destroy(v346, v68);
          else
            *(_DWORD *)v346 -= 2;
        }
      }
      if (!v73)
        goto LABEL_651;
      v347 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if ((_BYTE)v19)
      {
        *(_QWORD *)v526 = v347;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
        v348 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v348 = off_1E34B0928;
        v348[1] = *(_QWORD *)v526;
        v349 = *(_QWORD *)&v526[8];
        *(_QWORD *)&v526[8] = 0;
        v348[2] = v349;
        *(_QWORD *)v541 = v348;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
        WebKit::NetworkConnectionToWebProcess::requestStorageAccess(v8, (WTF::ASCIICaseInsensitiveHash **)v492, (const WTF::StringImpl **)&v492[8], *(uint64_t *)&v492[16], *(uint64_t *)&v492[24], v3, v4, v72 != 0, (uint64_t *)v541);
        v350 = *(_QWORD *)v541;
        *(_QWORD *)v541 = 0;
        if (v350)
          (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
        if (!v492[56])
          goto LABEL_913;
      }
LABEL_644:
      v344 = *(WTF::StringImpl **)&v492[8];
      *(_QWORD *)&v492[8] = 0;
      if (!v344)
        goto LABEL_648;
      goto LABEL_645;
    case 0x105:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)v7, (uint64_t)v541);
      if (!v541[8])
        goto LABEL_651;
      v10 = (unsigned __int8 **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if ((_BYTE)v86)
      {
        IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v526);
        if (v526[8])
        {
          if (!v541[8])
            goto LABEL_896;
          v87 = *(_QWORD *)v541;
          *(_QWORD *)v541 = 0;
          *(_QWORD *)v492 = v87;
          *(_QWORD *)&v492[8] = v10;
          *(_QWORD *)&v492[16] = *(_QWORD *)v526;
          v88 = 1;
        }
        else
        {
          v88 = 0;
          v492[0] = 0;
        }
        v492[24] = v88;
      }
      else
      {
        v88 = 0;
        v492[0] = 0;
        v492[24] = 0;
      }
      if (v541[8])
      {
        v331 = *(WTF::StringImpl **)v541;
        *(_QWORD *)v541 = 0;
        if (v331)
        {
          if (*(_DWORD *)v331 == 2)
            WTF::StringImpl::destroy(v331, v86);
          else
            *(_DWORD *)v331 -= 2;
        }
      }
      if (!v88)
      {
LABEL_651:
        v356 = *v9;
        v357 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v358 = v9[3];
        if (!v358)
          goto LABEL_913;
        goto LABEL_652;
      }
      WebKit::NetworkConnectionToWebProcess::requestStorageAccessUnderOpener(v8, (uint64_t *)v492, (uint64_t)v10, (uint64_t *)&v492[16]);
      if (v492[24])
      {
        v344 = *(WTF::StringImpl **)&v492[16];
        *(_QWORD *)&v492[16] = 0;
        if (v344)
        {
LABEL_645:
          if (*(_DWORD *)v344 == 2)
            WTF::StringImpl::destroy(v344, v19);
          else
            *(_DWORD *)v344 -= 2;
        }
LABEL_648:
        v319 = *(WTF::StringImpl **)v492;
        *(_QWORD *)v492 = 0;
        if (v319)
          goto LABEL_727;
      }
      goto LABEL_913;
    case 0x106:
      WebCore::SecurityPolicy::resetOriginAccessAllowlists((WebCore::SecurityPolicy *)v5);
      goto LABEL_913;
    case 0x107:
      IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(v6, (uint64_t *)v7, v5);
      goto LABEL_913;
    case 0x108:
      IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v526, (uint64_t *)v7, v7);
      if (v540)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, v541);
        v288 = v541[16];
        if (v541[16])
        {
          if (!v540)
            goto LABEL_896;
          WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)v492, (uint64_t)v526);
          v524 = *(_OWORD *)v541;
          v288 = 1;
        }
        else
        {
          v492[0] = 0;
        }
        v525 = v288;
        if (v540)
        {
          WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v526, v287);
          v288 = v525;
        }
        if (v288)
          goto LABEL_400;
      }
      else
      {
        v492[0] = 0;
        v525 = 0;
      }
      v452 = *v9;
      v453 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v454 = v9[3];
      if (!v454)
        goto LABEL_913;
      if (!v453)
        goto LABEL_913;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v454 + 16))(v454, v452);
      if (!v525)
        goto LABEL_913;
LABEL_400:
      WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(v8, (uint64_t)v492, v524, SBYTE8(v524));
      if (v525)
      {
LABEL_401:
        v47 = (WebKit::NetworkResourceLoadParameters *)v492;
LABEL_402:
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters(v47, v33);
      }
      goto LABEL_913;
    case 0x109:
      IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v492, (uint64_t *)v7, v7);
      if (!(_BYTE)v524)
        goto LABEL_913;
      v32 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v33)
        goto LABEL_197;
      *(_QWORD *)v526 = v32;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v34 = off_1E34B07B0;
      v34[1] = *(_QWORD *)v526;
      v35 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v34[2] = v35;
      *(_QWORD *)v541 = v34;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!(_BYTE)v524)
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::sendH2Ping(v8, (uint64_t)v492, (uint64_t *)v541);
      v36 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_197:
      if (!(_BYTE)v524)
        goto LABEL_913;
      goto LABEL_401;
    case 0x10A:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v492, (uint64_t *)v7);
      if (!v492[24])
        goto LABEL_913;
      WebKit::NetworkProcess::setCORSDisablingPatterns(*(_QWORD *)(v8 + 72), v8, *(void **)v492, (uint64_t *)&v492[8]);
      if (!v492[24])
        goto LABEL_913;
      v285 = &v492[8];
      goto LABEL_414;
    case 0x10B:
      v286 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)v7);
      if (v286 >= 0x100u)
        WebKit::NetworkConnectionToWebProcess::setCaptureExtraNetworkLoadMetricsEnabled((_QWORD *)v8, (_QWORD *)(v286 != 0));
      goto LABEL_913;
    case 0x10C:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v546);
      if (v548)
      {
        v38 = IPC::Decoder::decode<WebCore::SameSiteInfo>(v9);
        if (HIBYTE(v38) && (v40 = v38, IPC::Decoder::decode<WTF::URL>(v9, v541), v543))
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v9, (uint64_t)v489);
          if ((_BYTE)v490
            && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, v487), v488)&& (v41 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v9), v41 > 0xFFu)&& (v42 = v41, IPC::Decoder::decode<WebCore::Cookie>(v9, v526), (_BYTE)v531))
          {
            v43 = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v9);
            if (v43 > 0xFFu)
            {
              if (!v548 || !v543 || !(_BYTE)v490 || !v488 || !(_BYTE)v531)
                goto LABEL_896;
              v373 = *(_QWORD *)v546;
              *(_QWORD *)v546 = 0;
              *(_QWORD *)v492 = v373;
              *(_OWORD *)&v492[8] = *(_OWORD *)&v546[8];
              *(_OWORD *)&v492[24] = v547;
              *(_DWORD *)&v546[8] &= ~1u;
              *(_WORD *)&v492[40] = v40;
              v492[42] = BYTE2(v40);
              v374 = *(_QWORD *)v541;
              *(_QWORD *)v541 = 0;
              *(_OWORD *)&v492[56] = *(_OWORD *)&v541[8];
              *(_OWORD *)&v492[72] = v542;
              *(_DWORD *)&v541[8] &= ~1u;
              *(_QWORD *)&v492[48] = v374;
              *(_QWORD *)&v492[104] = *(_QWORD *)&v489[16];
              *(_OWORD *)&v492[88] = *(_OWORD *)v489;
              v493 = *(_OWORD *)v487;
              v494[0] = v42;
              v375 = *(_OWORD *)&v526[16];
              v496 = *(_OWORD *)v526;
              memset(v526, 0, 32);
              v497 = v375;
              *(_OWORD *)&v498[11] = *(_OWORD *)&v526[43];
              *(_OWORD *)v498 = *(_OWORD *)&v526[32];
              v376 = *(_OWORD *)&v526[64];
              *(_OWORD *)&v526[64] = 0u;
              v499 = v376;
              *(_OWORD *)cf = *(_OWORD *)&v526[80];
              *(_OWORD *)&cf[16] = v527;
              *(_DWORD *)&v526[80] &= ~1u;
              v377 = v528;
              v528 = 0;
              *(_QWORD *)&v501 = v377;
              v378 = v529;
              v529 = 0;
              *((_QWORD *)&v501 + 1) = v378;
              LOBYTE(v502) = v530;
              v44 = 1;
              LOBYTE(v503) = v43;
            }
            else
            {
              v44 = 0;
              v492[0] = 0;
            }
            BYTE8(v503) = v44;
            if ((_BYTE)v531)
              WebCore::Cookie::~Cookie((WebCore::Cookie *)v526, v39);
          }
          else
          {
            v492[0] = 0;
            BYTE8(v503) = 0;
          }
          if (v543)
          {
            v329 = *(WTF::StringImpl **)v541;
            *(_QWORD *)v541 = 0;
            if (v329)
            {
              if (*(_DWORD *)v329 == 2)
                WTF::StringImpl::destroy(v329, (WTF::StringImpl *)v39);
              else
                *(_DWORD *)v329 -= 2;
            }
          }
        }
        else
        {
          v492[0] = 0;
          BYTE8(v503) = 0;
        }
        if (v548)
        {
          v308 = *(WTF::StringImpl **)v546;
          *(_QWORD *)v546 = 0;
          if (v308)
          {
            if (*(_DWORD *)v308 == 2)
              WTF::StringImpl::destroy(v308, (WTF::StringImpl *)v39);
            else
              *(_DWORD *)v308 -= 2;
          }
        }
      }
      else
      {
        v492[0] = 0;
        BYTE8(v503) = 0;
      }
      if (BYTE8(v503)
        || (v411 = *v9, v412 = v9[1], *v9 = 0, v9[1] = 0, (v413 = v9[3]) != 0)
        && v412
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v413 + 16))(v413, v411), BYTE8(v503)))
      {
        v338 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
        if ((_BYTE)v339)
        {
          *(_QWORD *)v526 = v338;
          v9 = (uint64_t *)&v526[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
          v340 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v340 = off_1E34B0878;
          v340[1] = *(_QWORD *)v526;
          v341 = *(_QWORD *)&v526[8];
          *(_QWORD *)&v526[8] = 0;
          v340[2] = v341;
          *(_QWORD *)v541 = v340;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
          if (!BYTE8(v503))
            goto LABEL_896;
          *(_OWORD *)v526 = *(_OWORD *)&v492[88];
          *(_QWORD *)&v526[16] = *(_QWORD *)&v492[104];
          WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync((_QWORD *)v8, (const WTF::String **)v492, &v492[40], (const WTF::String **)&v492[48], (__int128 *)v526, (WTF::String *)v493, *((uint64_t *)&v493 + 1), v494[0], (uint64_t)&v496, v503, (uint64_t *)v541);
          v342 = *(_QWORD *)v541;
          *(_QWORD *)v541 = 0;
          if (v342)
            (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
        }
        if (BYTE8(v503))
        {
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v496, v339);
          goto LABEL_603;
        }
      }
      goto LABEL_913;
    case 0x10D:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v7, v541);
      if (v543)
      {
        v250 = IPC::Decoder::decode<WebCore::SameSiteInfo>(v9);
        if (BYTE3(v250) && (v10 = (unsigned __int8 **)v250, IPC::Decoder::decode<WTF::URL>(v9, v526), v526[40]))
        {
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, (uint64_t)v546);
          if (v546[16]
            && (v252 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9),
                (_BYTE)v251)
            && (v253 = v252, v254 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v9), v254 > 0xFFu)
            && (v255 = v254, IPC::Decoder::decode<WTF::String>(v9, v489), v489[8]))
          {
            v256 = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v9);
            if (v256 >= 0x100u)
            {
              if (!v543 || !v526[40] || !v546[16] || !v489[8])
                goto LABEL_896;
              v379 = *(_QWORD *)v541;
              *(_QWORD *)v541 = 0;
              *(_QWORD *)v492 = v379;
              *(_OWORD *)&v492[8] = *(_OWORD *)&v541[8];
              *(_OWORD *)&v492[24] = v542;
              *(_DWORD *)&v541[8] &= ~1u;
              *(_WORD *)&v492[40] = (_WORD)v10;
              v492[42] = BYTE2(v10);
              v380 = *(_QWORD *)v526;
              *(_QWORD *)v526 = 0;
              *(_OWORD *)&v492[56] = *(_OWORD *)&v526[8];
              *(_OWORD *)&v492[72] = *(_OWORD *)&v526[24];
              *(_DWORD *)&v526[8] &= ~1u;
              *(_OWORD *)&v492[88] = *(_OWORD *)v546;
              *(_QWORD *)&v492[48] = v380;
              *(_QWORD *)&v492[104] = v253;
              LOBYTE(v493) = v255;
              *((_QWORD *)&v493 + 1) = *(_QWORD *)v489;
              v494[0] = v256;
              LOBYTE(v496) = 1;
            }
            else
            {
              v492[0] = 0;
              LOBYTE(v496) = 0;
              if (v489[8])
              {
                v257 = *(WTF::StringImpl **)v489;
                *(_QWORD *)v489 = 0;
                if (v257)
                {
                  if (*(_DWORD *)v257 == 2)
                    WTF::StringImpl::destroy(v257, v251);
                  else
                    *(_DWORD *)v257 -= 2;
                }
              }
            }
          }
          else
          {
            v492[0] = 0;
            LOBYTE(v496) = 0;
          }
          if (v526[40])
          {
            v330 = *(WTF::StringImpl **)v526;
            *(_QWORD *)v526 = 0;
            if (v330)
            {
              if (*(_DWORD *)v330 == 2)
                WTF::StringImpl::destroy(v330, v251);
              else
                *(_DWORD *)v330 -= 2;
            }
          }
        }
        else
        {
          v492[0] = 0;
          LOBYTE(v496) = 0;
        }
        if (v543)
        {
          v310 = *(WTF::StringImpl **)v541;
          *(_QWORD *)v541 = 0;
          if (v310)
          {
            if (*(_DWORD *)v310 == 2)
              WTF::StringImpl::destroy(v310, v251);
            else
              *(_DWORD *)v310 -= 2;
          }
        }
      }
      else
      {
        v492[0] = 0;
        LOBYTE(v496) = 0;
      }
      if (!(_BYTE)v496)
      {
        v408 = *v9;
        v409 = v9[1];
        *v9 = 0;
        v9[1] = 0;
        v410 = v9[3];
        if (!v410)
          goto LABEL_913;
        if (!v409)
          goto LABEL_913;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v410 + 16))(v410, v408);
        if (!(_BYTE)v496)
          goto LABEL_913;
      }
      WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM((_QWORD *)v8, (const WTF::String **)v492, &v492[40], (const WTF::String **)&v492[48], *(uint64_t *)&v492[88], *(uint64_t *)&v492[96], *(WTF::String **)&v492[104], v493, (uint64_t)&v493 + 8, v494[0]);
      if (!(_BYTE)v496)
        goto LABEL_913;
      v337 = (WTF::StringImpl *)*((_QWORD *)&v493 + 1);
      *((_QWORD *)&v493 + 1) = 0;
      if (v337)
      {
LABEL_592:
        if (*(_DWORD *)v337 == 2)
          WTF::StringImpl::destroy(v337, v19);
        else
          *(_DWORD *)v337 -= 2;
      }
LABEL_603:
      v343 = *(WTF::StringImpl **)&v492[48];
      *(_QWORD *)&v492[48] = 0;
      if (v343)
      {
LABEL_723:
        if (*(_DWORD *)v343 == 2)
          WTF::StringImpl::destroy(v343, v19);
        else
          *(_DWORD *)v343 -= 2;
      }
      goto LABEL_726;
    case 0x10E:
      IPC::Decoder::decode<WebCore::Cookie>((uint64_t *)v7, v492);
      if ((_BYTE)v496)
      {
        v76 = *(_OWORD *)v492;
        v77 = *(_OWORD *)&v492[16];
        memset(v492, 0, 32);
        *(_OWORD *)v526 = v76;
        *(_OWORD *)&v526[16] = v77;
        *(_OWORD *)&v526[32] = *(_OWORD *)&v492[32];
        *(_OWORD *)&v526[43] = *(_OWORD *)&v492[43];
        v78 = *(_OWORD *)&v492[64];
        *(_OWORD *)&v492[64] = 0u;
        *(_OWORD *)&v526[64] = v78;
        *(_OWORD *)&v526[80] = *(_OWORD *)&v492[80];
        v527 = *(_OWORD *)&v492[96];
        *(_DWORD *)&v492[80] &= ~1u;
        v79 = *((_QWORD *)&v493 + 1);
        v528 = v493;
        v493 = 0uLL;
        v529 = v79;
        v530 = v494[0];
        LOBYTE(v531) = 1;
        WebCore::Cookie::~Cookie((WebCore::Cookie *)v492, v75);
        WebKit::NetworkConnectionToWebProcess::setRawCookie((WebKit::NetworkConnectionToWebProcess *)v8, (const WebCore::Cookie *)v526);
        if ((_BYTE)v531)
          WebCore::Cookie::~Cookie((WebCore::Cookie *)v526, v80);
        goto LABEL_913;
      }
      v356 = *v9;
      v362 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v358 = v9[3];
      if (!v358)
        goto LABEL_913;
      goto LABEL_916;
    case 0x10F:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[16])
        WebKit::NetworkConnectionToWebProcess::setResourceLoadSchedulingMode(v8, *(uint64_t *)v492, v492[8]);
      goto LABEL_913;
    case 0x110:
      v100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (!v101)
      {
        v492[0] = 0;
        LOBYTE(v505) = 0;
        goto LABEL_801;
      }
      v10 = (unsigned __int8 **)v100;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v9, (uint64_t)v526);
      if (!(_BYTE)v535 || (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v9, (uint64_t)v541), !v543))
      {
        v492[0] = 0;
        LOBYTE(v505) = 0;
        goto LABEL_432;
      }
      v102 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v9);
      if ((v102 & 0xFF0000) == 0 || (v103 = v102, IPC::Decoder::decode<WTF::String>(v9, v487), !LOBYTE(v487[1])))
      {
        v492[0] = 0;
        LOBYTE(v505) = 0;
        goto LABEL_927;
      }
      v104 = v9[1];
      v105 = (WTF::StringImpl *)*v9;
      v106 = v9[2] - *v9;
      if (v104 <= v106)
      {
        v460 = 0;
        v461 = 0;
        *v9 = 0;
        v9[1] = 0;
        v462 = v9[3];
        if (v462)
        {
          if (v104)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v462 + 16))(v462);
            v461 = *v9;
            v460 = v9[1];
          }
          else
          {
            v460 = 0;
            v461 = 0;
          }
        }
        goto LABEL_919;
      }
      v107 = (unsigned __int8 *)v105 + v106;
      v9[2] = (uint64_t)(v107 + 1);
      if (!v105)
      {
        v460 = v104;
        v461 = 0;
LABEL_919:
        v104 = 0;
        v105 = 0;
        *v9 = 0;
        v9[1] = 0;
        v463 = v9[3];
        if (v463)
        {
          if (v460)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v463 + 16))(v463, v461, v460);
            v105 = (WTF::StringImpl *)*v9;
            v104 = v9[1];
          }
          else
          {
            v104 = 0;
            v105 = 0;
          }
        }
        goto LABEL_920;
      }
      v108 = *v107;
      if (v108 >= 2)
      {
LABEL_920:
        *v9 = 0;
        v9[1] = 0;
        v464 = v9[3];
        if (v464)
        {
          if (v104)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v464 + 16))(v464, v105);
            v480 = v9[3];
            v105 = (WTF::StringImpl *)*v9;
            v481 = v9[1];
            *v9 = 0;
            v9[1] = 0;
            if (v480)
            {
              if (v481)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v480 + 16))(v480, v105);
            }
          }
        }
        goto LABEL_921;
      }
      v109 = v108 != 0;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v9, (uint64_t)v546);
      if (!(_BYTE)v547)
      {
LABEL_921:
        v492[0] = 0;
        LOBYTE(v505) = 0;
        goto LABEL_922;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v9, v489);
      v110 = v489[16];
      if (v489[16])
      {
        if (!(_BYTE)v535 || !v543 || !LOBYTE(v487[1]) || !(_BYTE)v547)
          goto LABEL_896;
        *(_QWORD *)v492 = v10;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v492[8], (uint64_t)v526);
        BYTE8(v499) = 0;
        cf[24] = 0;
        if (BYTE8(v542))
        {
          *(_DWORD *)&cf[16] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v499 + 8, (uint64_t)v541);
          cf[24] = 1;
        }
        LOWORD(v501) = v103;
        v111 = v487[0];
        v487[0] = 0;
        *((_QWORD *)&v501 + 1) = v111;
        LOBYTE(v502) = v109;
        v503 = *(_OWORD *)v546;
        *(_QWORD *)v504 = *(_QWORD *)&v546[16];
        v110 = 1;
        *(_OWORD *)&v504[8] = *(_OWORD *)v489;
      }
      else
      {
        v492[0] = 0;
      }
      LOBYTE(v505) = v110;
LABEL_922:
      if (LOBYTE(v487[1]))
      {
        v465 = v487[0];
        v487[0] = 0;
        if (v465)
        {
          if (*(_DWORD *)v465 == 2)
            WTF::StringImpl::destroy(v465, v105);
          else
            *(_DWORD *)v465 -= 2;
        }
      }
LABEL_927:
      if (v543 && BYTE8(v542) && (_DWORD)v542 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34B0790[v542])(v546, v541);
LABEL_432:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v526);
      if ((_BYTE)v505)
        goto LABEL_433;
LABEL_801:
      v397 = *v9;
      v398 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v399 = v9[3];
      if (!v399)
        goto LABEL_913;
      if (!v398)
        goto LABEL_913;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v399 + 16))(v399, v397);
      if (!(_BYTE)v505)
        goto LABEL_913;
LABEL_433:
      v302 = (WebCore::ResourceRequestBase *)&v492[8];
      *(_OWORD *)v526 = v503;
      *(_QWORD *)&v526[16] = *(_QWORD *)v504;
      WebKit::NetworkConnectionToWebProcess::startDownload((_QWORD *)v8, *(uint64_t *)v492, (CFTypeRef *)&v492[8], (WebCore::SecurityOriginData *)((char *)&v499 + 8), v501, (WTF::StringImpl *)((char *)&v501 + 8), v502, (uint64_t)v526, *(uint64_t *)&v504[8], v504[16]);
      if (!(_BYTE)v505)
        goto LABEL_913;
      v304 = (WTF::StringImpl *)*((_QWORD *)&v501 + 1);
      *((_QWORD *)&v501 + 1) = 0;
      if (v304)
      {
        if (*(_DWORD *)v304 == 2)
          WTF::StringImpl::destroy(v304, v303);
        else
          *(_DWORD *)v304 -= 2;
      }
      if (cf[24])
      {
        if (*(_DWORD *)&cf[16] != -1)
          ((void (*)(_BYTE *, char *))off_1E34B0790[*(unsigned int *)&cf[16]])(v526, (char *)&v499 + 8);
        *(_DWORD *)&cf[16] = -1;
      }
      v307 = (const void *)v499;
      *(_QWORD *)&v499 = 0;
      if (v307)
LABEL_447:
        CFRelease(v307);
LABEL_514:
      v320 = v302;
LABEL_895:
      WebCore::ResourceRequestBase::~ResourceRequestBase(v320);
LABEL_913:
      if (*(_DWORD *)(v8 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 8);
      return;
    case 0x111:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)v7, v492);
      if (!v492[40])
        goto LABEL_913;
      v199 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v19)
        goto LABEL_371;
      *(_QWORD *)v526 = v199;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v200 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v200 = off_1E34B0950;
      v200[1] = *(_QWORD *)v526;
      v201 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v200[2] = v201;
      *(_QWORD *)v541 = v200;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[40])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::storageAccessQuirkForTopFrameDomain(v8, (WebCore::NetworkStorageSession *)v492, (uint64_t *)v541);
LABEL_369:
      v276 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v276)
        (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
LABEL_371:
      if (!v492[40])
        goto LABEL_913;
      goto LABEL_648;
    case 0x112:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[8])
        goto LABEL_913;
      WebKit::NetworkConnectionToWebProcess::subscribeToCookieChangeNotifications((WebKit::NetworkConnectionToWebProcess *)v8, (WTF::StringImpl **)v492, v202);
      if (!v492[8])
        goto LABEL_913;
      goto LABEL_726;
    case 0x113:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_913;
      v152 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!v153)
        goto LABEL_913;
      *(_QWORD *)v526 = v152;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v154 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v154 = off_1E34B0A18;
      v154[1] = *(_QWORD *)v526;
      v155 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v154[2] = v155;
      *(_QWORD *)v541 = v154;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[16])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(v8, (uint64_t)v492, (uint64_t *)v541);
LABEL_282:
      v85 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v85)
LABEL_319:
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      goto LABEL_913;
    case 0x114:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[80])
        WebKit::NetworkConnectionToWebProcess::unregisterBlobURL(v8, (uint64_t)v492, (uint64_t)&v492[40]);
      goto LABEL_322;
    case 0x115:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v492, (uint64_t *)v7);
      if (v492[80])
        WebKit::NetworkConnectionToWebProcess::unregisterBlobURLHandle(v8, (uint64_t)v492, (uint64_t)&v492[40]);
LABEL_322:
      std::__optional_destruct_base<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v492, v112);
      goto LABEL_913;
    case 0x116:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)v7, (uint64_t)v492);
      if (!v492[8])
        goto LABEL_913;
      WebKit::NetworkConnectionToWebProcess::unsubscribeFromCookieChangeNotifications((WebKit::NetworkConnectionToWebProcess *)v8, (WTF::StringImpl **)v492, v18);
      if (!v492[8])
        goto LABEL_913;
      goto LABEL_726;
    case 0x117:
      v56 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
      if (v57)
      {
        v58 = v56;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v526);
        v60 = v539;
        if (v539)
        {
          *(_QWORD *)v492 = v58;
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v492[8], (uint64_t)v526);
          v60 = 1;
        }
        else
        {
          v492[0] = 0;
        }
        LOBYTE(v502) = v60;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v526, v59);
        if ((_BYTE)v502)
          goto LABEL_468;
      }
      else
      {
        v492[0] = 0;
        LOBYTE(v502) = 0;
      }
      v394 = *v9;
      v395 = v9[1];
      *v9 = 0;
      v9[1] = 0;
      v396 = v9[3];
      if (!v396)
        goto LABEL_913;
      if (!v395)
        goto LABEL_913;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v396 + 16))(v396, v394);
      if (!(_BYTE)v502)
        goto LABEL_913;
LABEL_468:
      WebKit::NetworkConnectionToWebProcess::useRedirectionForCurrentNavigation(v8, *(uint64_t *)v492, (uint64_t)&v492[8]);
      if ((_BYTE)v502)
      {
        v312 = (const void *)v501;
        *(_QWORD *)&v501 = 0;
        if (v312)
          CFRelease(v312);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v492[8], v311);
      }
      goto LABEL_913;
    case 0x118:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v7, v6, (uint64_t)v492);
      if (!v492[16])
        goto LABEL_913;
      v289 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9);
      if (!(_BYTE)v61)
        goto LABEL_412;
      *(_QWORD *)v526 = v289;
      v9 = (uint64_t *)&v526[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v526[8], v10);
      v290 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v290 = off_1E34B08B0;
      v290[1] = *(_QWORD *)v526;
      v291 = *(_QWORD *)&v526[8];
      *(_QWORD *)&v526[8] = 0;
      v290[2] = v291;
      *(_QWORD *)v541 = v290;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v526[8]);
      if (!v492[16])
        goto LABEL_896;
      WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(v8, (uint64_t *)v492, (uint64_t *)v541);
      v292 = *(_QWORD *)v541;
      *(_QWORD *)v541 = 0;
      if (v292)
        (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
LABEL_412:
      if (v492[16])
      {
LABEL_413:
        v285 = v492;
LABEL_414:
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v285, v61);
      }
      goto LABEL_913;
    default:
      goto LABEL_913;
  }
}

void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(WebKit::NetworkConnectionToWebProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::RunLoop *v10;
  WebKit::NetworkResourceLoader *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void (*v22)(uint64_t, unsigned __int8 **, IPC::Decoder *);
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 ***v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WebKit::NetworkTransportSession *v35;
  uint64_t v36;
  WebKit::WebSWServerConnection *v37;
  IPC::Encoder *v38;
  WebKit::WebSWServerToContextConnection *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  WebKit::WebSharedWorkerServerToContextConnection *v43;
  const char *v44;
  uint8_t buf[24];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xE98)
    v6 = 3736;
  v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  if (v7 > 0x87)
  {
    switch(LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]))
    {
      case 0xC2:
        v36 = *((_QWORD *)this + 26);
        if (v36)
        {
          v37 = *(WebKit::WebSWServerConnection **)(v36 + 8);
          if (v37)
            WebKit::WebSWServerConnection::didReceiveMessage(v37, a2, a3);
        }
        return;
      case 0xC3:
        v38 = (IPC::Encoder *)*((_QWORD *)this + 27);
        if (v38)
          WebKit::WebSWServerToContextConnection::didReceiveMessage(v38, a2, a3);
        return;
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
        goto LABEL_54;
      case 0xC8:
        v41 = *((_QWORD *)this + 28);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
            WebKit::WebSharedWorkerServerConnection::didReceiveMessage((_QWORD *)(v42 - 8), (IPC::Connection *)a2, a3);
        }
        return;
      case 0xC9:
        v43 = (WebKit::WebSharedWorkerServerToContextConnection *)*((_QWORD *)this + 29);
        if (v43)
          WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(v43, (IPC::Connection *)a2, a3);
        return;
      default:
        if (v7 == 136)
        {
          v39 = (WebKit::WebSWServerToContextConnection *)*((_QWORD *)this + 27);
          if (v39)
            WebKit::WebSWServerToContextConnection::didReceiveFetchTaskMessage(v39, (IPC::Connection *)a2, a3);
        }
        else
        {
          if (v7 == 183)
          {
            v21 = WebKit::NetworkConnectionToWebProcess::paymentCoordinator(this);
            v22 = *(void (**)(uint64_t, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)v21 + 16);
            goto LABEL_22;
          }
LABEL_54:
          WTFLogAlways();
        }
        break;
    }
  }
  else
  {
    switch(LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]))
    {
      case 0x1F:
        v8 = *((_QWORD *)this + 9);
        *(_QWORD *)buf = *((_QWORD *)this + 10);
        v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 208), buf);
        if (v9)
          WebKit::NetworkBroadcastChannelRegistry::didReceiveMessage(*(WebKit::NetworkBroadcastChannelRegistry **)(v9 + 704), a2, a3);
        return;
      case 0x20:
        WebKit::NetworkConnectionToWebProcess::didReceiveNetworkConnectionToWebProcessMessage(this, (IPC::Connection *)a2, a3);
        return;
      case 0x22:
        WebKit::NetworkMDNSRegister::didReceiveMessage((WebKit::NetworkConnectionToWebProcess *)((char *)this + 160), a2, a3);
        return;
      case 0x23:
        v40 = off_1ECE71C40;
        if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          goto LABEL_42;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        v44 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 251: Invalid message dispatched %s";
        goto LABEL_56;
      case 0x26:
        v25 = WebKit::NetworkConnectionToWebProcess::rtcProvider(this);
        WebKit::NetworkRTCMonitor::didReceiveMessage((unsigned int *)v25 + 20, (IPC::Connection *)a2, a3);
        return;
      case 0x28:
        v10 = (WTF::RunLoop *)WTF::RunLoop::main(this);
        if ((WTF::RunLoop::isCurrent(v10) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196BEC7B4);
        }
        if (*((_QWORD *)a3 + 8))
        {
          *(_QWORD *)buf = *((_QWORD *)a3 + 8);
          v11 = (WebKit::NetworkResourceLoader *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 12, buf);
          if (v11)
            WebKit::NetworkResourceLoader::didReceiveNetworkResourceLoaderMessage(v11, (IPC::Connection *)a2, a3);
          return;
        }
        v40 = off_1ECE71C40;
        if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          goto LABEL_42;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        v44 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 266: Invalid message dispatched %s";
        goto LABEL_56;
      case 0x29:
        v12 = *((_QWORD *)this + 11);
        if (!v12)
          return;
        v13 = *((_QWORD *)a3 + 8);
        v14 = *(_DWORD *)(v12 - 8);
        v15 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = *(_QWORD *)(v12 + 16 * v18);
        if (v19 == v13)
          goto LABEL_17;
        v20 = 1;
        while (v19)
        {
          v18 = ((_DWORD)v18 + v20) & v14;
          v19 = *(_QWORD *)(v12 + 16 * v18);
          ++v20;
          if (v19 == v13)
          {
LABEL_17:
            v21 = *(_QWORD *)(v12 + 16 * v18 + 8);
            if (v21)
            {
              v22 = *(void (**)(uint64_t, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)v21 + 64);
LABEL_22:
              v22(v21, a2, a3);
            }
            return;
          }
        }
        return;
      case 0x2B:
        v26 = *((_QWORD *)this + 40);
        if (!v26)
          return;
        v27 = *((_QWORD *)a3 + 8);
        v28 = *(_DWORD *)(v26 - 8);
        v29 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
        v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
        v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
        v32 = v28 & ((v31 >> 31) ^ v31);
        v33 = *(_QWORD *)(v26 + 16 * v32);
        if (v33 == v27)
          goto LABEL_30;
        v34 = 1;
        break;
      case 0x2C:
        v23 = *((_QWORD *)this + 9);
        if (!*(_BYTE *)(v23 + 394))
        {
          v40 = off_1ECE71C40;
          if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &"
                                 ", IPC::Decoder &)";
            v44 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProces"
                  "s.cpp 280: Invalid message dispatched %s";
LABEL_56:
            _os_log_fault_impl(&dword_196BCC000, v40, OS_LOG_TYPE_FAULT, v44, buf, 0xCu);
          }
LABEL_42:
          *(_BYTE *)(*((_QWORD *)this + 8) + 98) = 1;
          return;
        }
        *(_QWORD *)buf = *((_QWORD *)this + 10);
        v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 208), buf);
        if (!v24)
          return;
        v22 = *(void (**)(uint64_t, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)(v24 + 832) + 16);
        v21 = v24 + 832;
        goto LABEL_22;
      default:
        goto LABEL_54;
    }
    while (v33)
    {
      v32 = ((_DWORD)v32 + v34) & v28;
      v33 = *(_QWORD *)(v26 + 16 * v32);
      ++v34;
      if (v33 == v27)
      {
LABEL_30:
        v35 = *(WebKit::NetworkTransportSession **)(v26 + 16 * v32 + 8);
        if (v35)
          WebKit::NetworkTransportSession::didReceiveMessage(v35, a2, a3);
        return;
      }
    }
  }
}

void WebKit::WebProcess::didReceiveMessage(unsigned int **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _BOOL8 v6;
  unsigned int v7;
  int v8;
  WebCore::SWContextManager *v9;
  unsigned __int8 **v10;
  WebCore::SharedWorkerContextManager *v11;
  WTF::StringImpl **v12;

  v6 = IPC::MessageReceiverMap::dispatchMessage(this + 5, a2, a3);
  if (!v6)
  {
    v7 = *((unsigned __int16 *)a3 + 25);
    if (v7 >= 0xE98)
      v7 = 3736;
    v8 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v7 + 2]);
    switch(v8)
    {
      case 186:
        WebKit::WebProcess::didReceiveWebProcessMessage((WebKit::WebProcess *)this, (unsigned __int8 **)a2, a3);
        break;
      case 3:
        WebKit::AuxiliaryProcess::didReceiveMessage((WebKit::AuxiliaryProcess *)this, (unsigned __int8 **)a2, a3);
        break;
      case 193:
        v9 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton((WebCore::SWContextManager *)v6);
        v10 = (unsigned __int8 **)WebCore::SWContextManager::connection(v9);
        if (v10)
          WebKit::WebSWContextManagerConnection::didReceiveMessage(v10, (unsigned __int8 **)a2, a3);
        break;
      case 198:
        v11 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)v6);
        v12 = (WTF::StringImpl **)WebCore::SharedWorkerContextManager::connection(v11);
        if (v12)
          WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(v12, (unsigned __int8 **)a2, a3);
        break;
    }
  }
}

void WebKit::WebProcessProxy::didReceiveMessage(WebKit::WebProcessProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;

  if (!IPC::MessageReceiverMap::dispatchMessage((unsigned int **)this + 19, a2, a3))
  {
    v6 = *((_QWORD *)this + 64);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      v8 = v7 ? v7 - 16 : 0;
    }
    else
    {
      v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v9 = IPC::MessageReceiverMap::dispatchMessage((unsigned int **)(v8 + 56), a2, a3);
    CFRelease(*(CFTypeRef *)(v8 + 8));
    if (!v9)
    {
      v10 = *((unsigned __int16 *)a3 + 25);
      if (v10 >= 0xE98)
        v10 = 3736;
      if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v10 + 2]) == 188)
        WebKit::WebProcessProxy::didReceiveWebProcessProxyMessage(this, a2, a3);
    }
  }
}

void WebKit::NetworkProcessConnection::didReceiveMessage(WebKit::WebIDBConnectionToServer **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5;
  int v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WebKit::WebResourceLoader *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  WebKit::WebProcess *v23;
  unsigned int *v24;
  WebKit::WebProcess *v25;
  WebKit::WebPage *v26;
  WebKit::WebProcess *v27;
  void *v28;
  unsigned int *v29;
  WebKit::WebProcess *v30;
  WebKit::WebProcess *v31;
  unsigned int v32;
  WebKit::WebProcess *v33;
  uint64_t v34;
  WebKit::WebProcess *v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::WebPaymentCoordinator *v38;
  WebKit::WebPaymentCoordinator *v39;
  unsigned int v40;
  unsigned int v41;
  WebKit::WebProcess *v42;
  uint64_t v43;
  uint64_t v44;
  WebKit::WebSWClientConnection *v45;
  WebCore::SWContextManager *v46;
  unsigned __int8 **v47;
  WebCore::SharedWorkerContextManager *v48;
  WTF::StringImpl **v49;
  WebKit::WebSharedWorkerObjectConnection *v50;
  WebKit::WebIDBConnectionToServer *v51;
  NSObject *v52;
  const char *v53;
  WebKit::WebProcess *v54;
  WebKit::WebProcess *v55;
  WebKit::WebProcess *v56;
  WebKit::WebProcess *v57;
  WebKit::WebProcess *v58;
  WebKit::WebProcess *v59;
  WebKit::WebProcess *v60;
  WebKit::WebProcess *v61;
  WebKit::WebProcess *v62;
  WebKit::WebProcess *v63;
  WebKit::NetworkProcessConnection *v64;
  uint8_t buf[8];
  uint64_t v66;
  WTF *v67;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 >= 0xE98)
    v5 = 3736;
  v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 > 177)
  {
    if (v6 > 201)
    {
      if (v6 == 202)
      {
        {
          v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v31 = WebKit::WebProcess::WebProcess(v60);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v31;
        }
        WebKit::WebSocketChannelManager::didReceiveMessage((uint64_t *)v31 + 52, (uint64_t)a2, (uint64_t)a3);
        return;
      }
      if (v6 == 204)
      {
        {
          v23 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v64 = (WebKit::NetworkProcessConnection *)this;
          v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v23 = WebKit::WebProcess::WebProcess(v56);
          this = (WebKit::WebIDBConnectionToServer **)v64;
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v23;
        }
        if (*((_BYTE *)v23 + 780))
        {
          v24 = (unsigned int *)WebKit::WebProcess::webTransportSession((uint64_t)v23, *((_QWORD *)a3 + 8));
          if (v24)
            WebKit::WebTransportSession::didReceiveMessage(v24, a2, a3);
          return;
        }
        v32 = *((unsigned __int16 *)a3 + 25);
        if (v32 >= 0xE98)
          v32 = 3736;
        v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v32 + 2]);
      }
    }
    else
    {
      if (v6 == 178)
      {
        {
          v25 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v57 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v25 = WebKit::WebProcess::WebProcess(v57);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v25;
        }
        *(_QWORD *)buf = *((_QWORD *)a3 + 8);
        v26 = (WebKit::WebPage *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v25 + 14, buf);
        if (v26)
          WebKit::WebPage::didReceiveWebPageMessage(v26, a2, a3);
        return;
      }
      if (v6 == 191)
      {
        {
          v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v7 = WebKit::WebProcess::WebProcess(v54);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
        }
        v8 = *(_QWORD *)(*((_QWORD *)v7 + 40) + 48);
        if (v8)
        {
          v9 = *((_QWORD *)a3 + 8);
          v10 = *(_DWORD *)(v8 - 8);
          v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = v10 & ((v13 >> 31) ^ v13);
          v15 = *(_QWORD *)(v8 + 16 * v14);
          if (v15 == v9)
          {
LABEL_14:
            v17 = *(WebKit::WebResourceLoader **)(v8 + 16 * v14 + 8);
            if (v17)
              WebKit::WebResourceLoader::didReceiveWebResourceLoaderMessage(v17, a2, a3);
          }
          else
          {
            v16 = 1;
            while (v15)
            {
              v14 = ((_DWORD)v14 + v16) & v10;
              v15 = *(_QWORD *)(v8 + 16 * v14);
              ++v16;
              if (v15 == v9)
                goto LABEL_14;
            }
          }
        }
        return;
      }
    }
LABEL_50:
    switch(v6)
    {
      case 189:
        {
          v33 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v33 = WebKit::WebProcess::WebProcess(v61);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v33;
        }
        WebKit::WebProcess::libWebRTCNetwork(v33);
        if (*(_BYTE *)(v34 + 192))
        {
          WebKit::WebRTCMonitor::didReceiveMessage((WebKit::WebRTCMonitor *)(v34 + 88), a2, a3);
        }
        else
        {
          v52 = qword_1ECE71B18;
          if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v53 = "Received WebRTCMonitor message while libWebRTCNetwork is not active";
            goto LABEL_86;
          }
        }
        break;
      case 190:
        {
          v42 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v62 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v42 = WebKit::WebProcess::WebProcess(v62);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v42;
        }
        WebKit::WebProcess::libWebRTCNetwork(v42);
        if (*(_BYTE *)(v43 + 192))
        {
          v44 = *((_QWORD *)a3 + 8);
          *(_QWORD *)buf = v43 + 24;
          v66 = v44;
          WebKit::WebRTCResolver::didReceiveMessage((uint64_t)buf, a2, a3);
        }
        else
        {
          v52 = qword_1ECE71B18;
          if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v53 = "Received WebRTCResolver message while libWebRTCNetwork is not active";
LABEL_86:
            _os_log_error_impl(&dword_196BCC000, v52, OS_LOG_TYPE_ERROR, v53, buf, 2u);
          }
        }
        break;
      case 191:
      case 194:
      case 195:
      case 196:
      case 197:
        goto LABEL_69;
      case 192:
        v45 = (WebKit::WebSWClientConnection *)WebKit::NetworkProcessConnection::serviceWorkerConnection((WebKit::NetworkProcessConnection *)this);
        WebKit::WebSWClientConnection::didReceiveMessage(v45, (unsigned __int8 **)a2, a3);
        break;
      case 193:
        v46 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton((WebCore::SWContextManager *)this);
        v47 = (unsigned __int8 **)WebCore::SWContextManager::connection(v46);
        if (v47)
          WebKit::WebSWContextManagerConnection::didReceiveMessage(v47, (unsigned __int8 **)a2, a3);
        break;
      case 198:
        v48 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)this);
        v49 = (WTF::StringImpl **)WebCore::SharedWorkerContextManager::connection(v48);
        if (v49)
          WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(v49, (unsigned __int8 **)a2, a3);
        break;
      case 199:
        v50 = WebKit::NetworkProcessConnection::sharedWorkerConnection((WebKit::NetworkProcessConnection *)this);
        WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(v50, (unsigned __int8 **)a2, a3);
        break;
      default:
        if (v6 == 169)
        {
          v51 = this[9];
          if (v51)
            WebKit::WebIDBConnectionToServer::didReceiveMessage(v51, a2, a3);
        }
        else if (v6 == 182)
        {
          {
            v35 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v63 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            v35 = WebKit::WebProcess::WebProcess(v63);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)v35;
          }
          *(_QWORD *)buf = *((_QWORD *)a3 + 8);
          v36 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v35 + 14, buf);
          if (v36)
          {
            v37 = *(_QWORD *)(v36 + 48);
            if (v37)
            {
              v38 = *(WebKit::WebPaymentCoordinator **)(*(_QWORD *)(v37 + 1240) + 8);
              if ((*(unsigned int (**)(WebKit::WebPaymentCoordinator *))(*(_QWORD *)v38 + 112))(v38))
                v39 = v38;
              else
                v39 = 0;
            }
            else
            {
              v39 = 0;
            }
            WebKit::WebPaymentCoordinator::didReceiveMessage(v39, a2, a3);
          }
        }
        else
        {
LABEL_69:
          WebKit::NetworkProcessConnection::didReceiveNetworkProcessConnectionMessage((WebKit::NetworkProcessConnection *)this, a2, a3);
        }
        break;
    }
    return;
  }
  if (v6 != 142)
  {
    if (v6 == 156)
    {
      {
        v30 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v59 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v30 = WebKit::WebProcess::WebProcess(v59);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v30;
      }
      WebKit::WebBroadcastChannelRegistry::didReceiveMessage(*((_DWORD **)v30 + 50), (unsigned __int8 **)a2, a3);
      return;
    }
    if (v6 == 164)
    {
      {
        v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v55 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v18 = WebKit::WebProcess::WebProcess(v55);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
      }
      v19 = WebKit::WebProcess::fileSystemStorageConnection(v18);
      if (*((_WORD *)a3 + 25) == 1704)
      {
        v20 = v19;
        v21 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
        if (v22)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 128))(v20, v21);
      }
      return;
    }
    goto LABEL_50;
  }
  {
    v27 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v58 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v27 = WebKit::WebProcess::WebProcess(v58);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v27;
  }
  *(_QWORD *)buf = *((_QWORD *)a3 + 8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((unsigned int **)v27 + 82, buf, (unsigned int **)&v67);
  v29 = (unsigned int *)v67;
  if (v67)
  {
    if (*((_QWORD *)v67 + 1))
    {
      WebKit::StorageAreaMap::didReceiveMessage(*((WebKit::StorageAreaMap **)v67 + 1), a2, a3);
      v29 = (unsigned int *)v67;
      v67 = 0;
      if (!v29)
        return;
    }
    else
    {
      v67 = 0;
    }
    do
    {
      v40 = __ldaxr(v29);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v29));
    if (!v41)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
  }
}

void WebKit::WebResourceLoader::didReceiveWebResourceLoaderMessage(WebKit::WebResourceLoader *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  IPC::Connection *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[256];
  char v34;
  _OWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BYTE v48[80];
  uint64_t v49;
  uint64_t v50;
  CFTypeRef cf;
  BOOL v52;
  BOOL v53;
  _OWORD v54[5];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA66:
      IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WTF::String,WebCore::ResourceError,WTF::URL,WebCore::SubstituteData>>((uint64_t)&v43, (uint64_t *)a3);
      if (v62)
      {
        WebKit::WebResourceLoader::contentFilterDidBlockLoad((uint64_t)this, (uint64_t)&v43, (uint64_t)&v47, (uint64_t)v48, (uint64_t)&v49, &v50);
        if (v62)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::ContentFilterUnblockHandler,WTF::String,WebCore::ResourceError,WTF::URL,WebCore::SubstituteData>::~__tuple_impl((uint64_t)&v43, a2);
      }
      goto LABEL_22;
    case 0xA67:
      WebKit::WebResourceLoader::didBlockAuthenticationChallenge(this);
      goto LABEL_22;
    case 0xA68:
      IPC::handleMessage<Messages::WebResourceLoader::DidFailResourceLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>((uint64_t *)a3, this);
      goto LABEL_22;
    case 0xA69:
      IPC::handleMessage<Messages::WebResourceLoader::DidFailServiceWorkerLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>((uint64_t *)a3, this);
      goto LABEL_22;
    case 0xA6A:
      IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)&v43);
      if (v48[24])
        WebKit::WebResourceLoader::didFinishResourceLoad((uint64_t)this, (uint64_t)&v43);
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v15);
      goto LABEL_22;
    case 0xA6B:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>((uint64_t *)a3, &v43);
      if (v46)
        WebKit::WebResourceLoader::didReceiveData((uint64_t)this, (IPC::SharedBufferReference *)&v43, v45);
      std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v16);
      goto LABEL_22;
    case 0xA6C:
      IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>(a3, (uint64_t)&v43);
      if ((_BYTE)v45)
      {
        WebKit::WebResourceLoader::didReceiveResource((uint64_t)this);
        if ((_BYTE)v45)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v43);
      }
      goto LABEL_22;
    case 0xA6D:
      IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, v33);
      if (!v34)
        goto LABEL_47;
      v5 = *((_QWORD *)a3 + 1);
      a2 = *(IPC::Connection **)a3;
      v6 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v6)
      {
        v17 = 0;
        v18 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v19 = *((_QWORD *)a3 + 3);
        if (v19)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
            v18 = *(_QWORD *)a3;
            v17 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
        }
        goto LABEL_35;
      }
      v7 = (unsigned __int8 *)a2 + v6;
      *((_QWORD *)a3 + 2) = v7 + 1;
      if (!a2)
      {
        v17 = v5;
        v18 = 0;
LABEL_35:
        v5 = 0;
        a2 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v20 = *((_QWORD *)a3 + 3);
        if (v20)
        {
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
            a2 = *(IPC::Connection **)a3;
            v5 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v5 = 0;
            a2 = 0;
          }
        }
        goto LABEL_36;
      }
      v8 = *v7;
      if (v8 >= 2)
      {
LABEL_36:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v21 = *((_QWORD *)a3 + 3);
        if (v21)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v21 + 16))(v21, a2);
            v22 = *((_QWORD *)a3 + 3);
            a2 = *(IPC::Connection **)a3;
            v23 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v22)
            {
              if (v23)
                (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v22 + 16))(v22, a2);
            }
          }
        }
        goto LABEL_47;
      }
      v9 = v8 != 0;
      if (v5 <= v7 + 1 - (unsigned __int8 *)a2)
      {
        v26 = 0;
        v27 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v28 = *((_QWORD *)a3 + 3);
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
          v26 = 0;
          a2 = *(IPC::Connection **)a3;
          v31 = *((_QWORD *)a3 + 1);
          v32 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v27 = 0;
          if (v32)
          {
            if (v31)
            {
              (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v32 + 16))(v32, a2);
              v27 = *(IPC::Connection **)a3;
              v26 = *((_QWORD *)a3 + 1);
            }
          }
        }
        goto LABEL_46;
      }
      *((_QWORD *)a3 + 2) = v7 + 2;
      v10 = v7[1];
      if (v10 >= 2)
      {
        v26 = v5;
        v27 = a2;
LABEL_46:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v29 = *((_QWORD *)a3 + 3);
        if (v29 && v26)
          (*(void (**)(uint64_t, IPC::Connection *, unint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
        goto LABEL_47;
      }
      v11 = v10 != 0;
      IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)v35);
      if (!v42)
      {
LABEL_47:
        LOBYTE(v43) = 0;
        v61 = 0;
        goto LABEL_14;
      }
      if (!v34)
      {
        __break(1u);
        goto LABEL_49;
      }
      std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v43, (uint64_t)v33);
      v52 = v9;
      v53 = v11;
      LOBYTE(v54[0]) = 0;
      v60 = 0;
      if (v41)
      {
        v55 = v36;
        v54[2] = v35[2];
        v54[3] = v35[3];
        v54[4] = v35[4];
        v54[0] = v35[0];
        v54[1] = v35[1];
        v57 = v38;
        v12 = v40;
        v56 = v37;
        v58 = v39;
        v37 = 0;
        v40 = 0;
        v59 = v12;
        v60 = 1;
      }
      v61 = 1;
      if (v42)
        std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35, a2);
LABEL_14:
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v33, a2);
      if (v61
        || (a2 = *(IPC::Connection **)a3,
            v24 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v25 = *((_QWORD *)a3 + 3)) != 0)
        && v24
        && ((*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v25 + 16))(v25, a2), v61))
      {
        WebKit::WebResourceLoader::didReceiveResponse((uint64_t)this, (WebCore::ResourceResponseBase *)&v43, v52, v53, (uint64_t)v54);
        if (v61)
        {
          std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, a2);
          v14 = cf;
          cf = 0;
          if (v14)
            CFRelease(v14);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v43, v13);
        }
      }
LABEL_22:
      if (*((_DWORD *)this + 2) == 1)
        (*(void (**)(WebKit::WebResourceLoader *, IPC::Connection *))(*(_QWORD *)this + 8))(this, a2);
      else
        --*((_DWORD *)this + 2);
      return;
    case 0xA6E:
      IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>((uint64_t *)a3, (uint64_t)&v43);
      if (v44)
        WebKit::WebResourceLoader::didSendData(this);
      goto LABEL_22;
    case 0xA6F:
      WebKit::WebResourceLoader::serviceWorkerDidNotHandle(this);
      goto LABEL_22;
    case 0xA70:
      v30 = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if ((_BYTE)a2)
        *((_QWORD *)this + 11) = v30;
      goto LABEL_22;
    case 0xA71:
      IPC::handleMessage<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceResponse const&)>((uint64_t *)a3, this);
      goto LABEL_22;
    case 0xA72:
LABEL_49:
      IPC::handleMessageAsync<Messages::WebResourceLoader::WillSendRequest,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)>((unsigned __int8 **)a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_22;
    default:
      goto LABEL_22;
  }
}

uint64_t IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Encoder::setShouldDispatchMessageWhenWaitingForSyncReply(uint64_t result, int a2)
{
  _BYTE *v2;
  char v3;

  switch(a2)
  {
    case 1:
      v2 = *(_BYTE **)(result + 528);
      v3 = *v2 & 0xFC | 1;
LABEL_3:
      *v2 = v3;
      return result;
    case 2:
      v2 = *(_BYTE **)(result + 528);
      v3 = *v2 & 0xFC | 2;
      goto LABEL_3;
    case 0:
      v2 = *(_BYTE **)(result + 528);
      v3 = *v2 & 0xFC;
      goto LABEL_3;
  }
  return result;
}

void WebKit::WebProcess::didReceiveWebProcessMessage(WebKit::WebProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  BOOL v3;
  WTF::StringImpl *v4;
  WebKit::WebMemorySampler *v8;
  int *v9;
  WebKit::WebMemorySampler *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl **v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  const WTF::String *v27;
  WebCore::Page *v28;
  int v29;
  unsigned __int16 v30;
  unsigned __int8 v31;
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  void *v44;
  WTF::StringImpl *v45;
  void *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF *v49;
  void *v50;
  void *v51;
  void *v52;
  WTF::StringImpl **v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  const WTF::String *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unsigned __int16 v62;
  uint64_t v63;
  char v64;
  char v65;
  WTF::StringImpl *v66;
  char v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned __int16 v70;
  char v71;
  const WTF::String *v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  uint64_t v75;
  int v76;
  char v77;
  WTF::StringImpl *v78;
  char v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WebCore::GCController *v82;
  uint64_t v83;
  const WTF::StringImpl *v84;
  WebCore::ResourceLoadObserver *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  void *v89;
  WTF::StringImpl *v90;
  const WTF::String *v91;
  unsigned __int16 v92;
  uint64_t v93;
  char v94;
  WTF::StringImpl *v95;
  char v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  char v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  const WTF::String *v104;
  int v105;
  unint64_t v106;
  void *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  unsigned __int16 v111;
  uint64_t v112;
  void *v113;
  int v114;
  void *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  char v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  char v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  const WTF::String *v133;
  const WebKit::SandboxExtensionHandle *v134;
  const char ***v135;
  uint64_t v136;
  void *v137;
  unsigned __int16 v138;
  char v139;
  uint64_t v140;
  char v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  char v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  char v147;
  WTF *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF *v151;
  WTF *v152;
  WTF *v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  WebCore::BackForwardCache *v159;
  const WTF::String *v160;
  WebCore::ResourceRequestBase *v161;
  char v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  void *v165;
  WTF::StringImpl *v166;
  void *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  const WTF::String *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int8 *v175;
  unsigned int v176;
  int v177;
  WTF::StringImpl *v178;
  int v179;
  unsigned __int16 v180;
  char v181;
  WTF::StringImpl *v182;
  char v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  char v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  const WTF::String *v190;
  WebCore::GCController *v191;
  WebCore::GCController *v192;
  const WTF::StringImpl *v193;
  unsigned __int16 v194;
  void *v195;
  char v196;
  void *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  void *v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  char v218;
  __int128 v219;
  WTF *v220;
  uint64_t v221;
  WTF *v222;
  WTF *v223;
  WTF::StringImpl *v224;
  WebKit::WebMemorySampler *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  unint64_t v228;
  char v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  unint64_t v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  unint64_t v263;
  WTF::StringImpl *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  unint64_t v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276[2];
  WTF::StringImpl *v277;
  WTF *v278;
  uint64_t v279;
  int v280;
  char v281;
  char v282;
  WTF::StringImpl *v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  WTF::StringImpl *v289[3];
  WTF *v290;
  WTF *v291;
  WTF *v292;
  uint64_t v293;
  WTF *v294;
  __int128 v295;
  WTF::StringImpl *v296;
  char v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  _QWORD v302[3];
  char v303;
  char v304;
  char v305;
  _BYTE v306[32];
  __int128 v307;
  uint64_t v308;
  WTF *v309;
  uint64_t v310;
  char v311;
  char v312;
  uint64_t v313;

  v313 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA08:
      IPC::Decoder::decode<WebKit::AccessibilityPreferences>((uint64_t *)a3, (uint64_t)v289);
      if (!(_BYTE)v290)
        goto LABEL_383;
      *(_OWORD *)v306 = *(_OWORD *)v289;
      *(WTF::StringImpl **)&v306[16] = v289[2];
      v306[24] = 1;
      WebKit::WebProcess::accessibilityPreferencesDidChange((uint64_t)this, (uint64_t)v306);
      return;
    case 0xA09:
      IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>((uint64_t *)a3, v289);
      if ((_BYTE)v298)
        WebCore::MockRealtimeMediaSourceCenter::addDevice();
      std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v289, v90);
      return;
    case 0xA0A:
      v83 = *((_QWORD *)this + 4);
      LOBYTE(v289[0]) = 0;
      IPC::Connection::send<Messages::WebProcessProxy::DidReceiveBackgroundResponsivenessPing>(v83, (uint64_t)v289, 0, 0, 0);
      return;
    case 0xA0B:
      v88 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v88 & 0xFF00000000) != 0)
        WebKit::WebProcess::backlightLevelDidChange(this, *(float *)&v88);
      return;
    case 0xA0C:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)v306);
      if (v306[16]
        && (v10 = (WebKit::WebMemorySampler *)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)v289), LOBYTE(v289[2])))
      {
        if (!v306[16])
          goto LABEL_452;
        WebKit::WebProcess::bindAccessibilityFrameWithData((uint64_t)this, *(uint64_t *)v306, *(uint64_t *)&v306[8], (uint64_t)v289[0], (uint64_t)v289[1]);
      }
      else
      {
        v205 = *(_QWORD *)a3;
        v206 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v207 = *((_QWORD *)a3 + 3);
        if (v207)
          goto LABEL_302;
      }
      return;
    case 0xA0D:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[2]))
      {
        v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v100)
        {
          *(_QWORD *)v306 = v99;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
          v101 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v101 = off_1E3505030;
          *((_QWORD *)v101 + 1) = *(_QWORD *)v306;
          v102 = *(_QWORD *)&v306[8];
          *(_QWORD *)&v306[8] = 0;
          *((_QWORD *)v101 + 2) = v102;
          v276[0] = v101;
          v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
          if (!LOBYTE(v289[2]))
            goto LABEL_452;
          WebKit::WebProcess::clearCachedPage((uint64_t)this, (uint64_t)v289[0], (uint64_t)v289[1], (uint64_t *)v276);
          v103 = v276[0];
          v276[0] = 0;
          if (v103)
            goto LABEL_259;
        }
      }
      return;
    case 0xA0E:
      WebCore::PlatformKeyboardEvent::setCurrentModifierState();
      return;
    case 0xA0F:
      v289[0] = 0;
      v289[1] = 0;
      WebCore::MockRealtimeMediaSourceCenter::setDevices();
      WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v289, v89);
      return;
    case 0xA10:
      WebKit::WebProcess::clearResourceLoadStatistics(this);
      return;
    case 0xA11:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>>(v289, (uint64_t *)a3);
      if (v305)
      {
        WebKit::WebProcess::createWebPage((uint64_t)this, (uint64_t)v289[0], (uint64_t)&v289[1]);
        if (v305)
          WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v289[1]);
      }
      return;
    case 0xA12:
      v124 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v125)
      {
        v289[0] = v124;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v126 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v126 = off_1E3504F40;
        *(WTF::StringImpl **)(v126 + 8) = v289[0];
        v127 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v126 + 16) = v127;
        *(_QWORD *)v306 = v126;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        WebKit::WebProcess::deleteAllCookies((uint64_t)this, (uint64_t *)v306);
        goto LABEL_258;
      }
      return;
    case 0xA13:
      v63 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v63 & 0xFF00000000) != 0 && (v64 = v63, IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a3), v65))
      {
        v66 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v67)
        {
          v289[0] = v66;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
          v68 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v68 = off_1E3504E90;
          *(WTF::StringImpl **)(v68 + 8) = v289[0];
          v69 = v289[1];
          v289[1] = 0;
          *(_QWORD *)(v68 + 16) = v69;
          *(_QWORD *)v306 = v68;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
          WebKit::WebProcess::deleteWebsiteData(this, v64, (uint64_t *)v306);
          goto LABEL_258;
        }
      }
      else
      {
        v202 = *(_QWORD *)a3;
        v203 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v204 = *((_QWORD *)a3 + 3);
        if (v204)
          goto LABEL_291;
      }
      return;
    case 0xA14:
      v75 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v75 & 0xFF00000000) != 0)
      {
        v76 = v75;
        IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v306);
        v77 = v310;
        if ((_BYTE)v310)
        {
          LODWORD(v289[0]) = v76;
          LOBYTE(v289[1]) = 0;
          LODWORD(v291) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v289[1], (uint64_t)v306);
          LOBYTE(v292) = 0;
          LODWORD(v295) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v292, (uint64_t)&v307);
          v77 = 1;
        }
        else
        {
          LOBYTE(v289[0]) = 0;
        }
        BYTE8(v295) = v77;
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v306);
        if (BYTE8(v295))
          goto LABEL_311;
      }
      else
      {
        LOBYTE(v289[0]) = 0;
        BYTE8(v295) = 0;
      }
      v245 = *(_QWORD *)a3;
      v246 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v247 = *((_QWORD *)a3 + 3);
      if (!v247)
        return;
      if (!v246)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v247 + 16))(v247, v245);
      if (!BYTE8(v295))
        return;
LABEL_311:
      v213 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v214)
      {
        *(_QWORD *)v306 = v213;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
        v215 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v215 = off_1E3504EF0;
        *((_QWORD *)v215 + 1) = *(_QWORD *)v306;
        v216 = *(_QWORD *)&v306[8];
        *(_QWORD *)&v306[8] = 0;
        *((_QWORD *)v215 + 2) = v216;
        v276[0] = v215;
        v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
        if (!BYTE8(v295))
          goto LABEL_452;
        WebKit::WebProcess::deleteWebsiteDataForOrigin(this, (char)v289[0], (uint64_t)&v289[1], (uint64_t *)v276);
        v217 = v276[0];
        v276[0] = 0;
        if (v217)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v217 + 8))(v217);
      }
      if (BYTE8(v295))
      {
        if ((_DWORD)v295 != -1)
          ((void (*)(_BYTE *, WTF **))off_1E3504EA8[v295])(v306, &v292);
        LODWORD(v295) = -1;
        if ((_DWORD)v291 != -1)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3504EA8[v291])(v306, &v289[1]);
      }
      return;
    case 0xA15:
      v112 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v112 & 0xFF00000000) != 0
        && (v114 = v112,
            IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v113, (uint64_t)v306), v306[16]))
      {
        LODWORD(v289[0]) = v114;
        v116 = *(WTF::StringImpl **)v306;
        *(_QWORD *)v306 = 0;
        v289[1] = v116;
        v117 = *(WTF::StringImpl **)&v306[8];
        *(_QWORD *)&v306[8] = 0;
        v289[2] = v117;
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v306, v115);
        LOBYTE(v290) = 1;
        v118 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!(_BYTE)v119)
          goto LABEL_168;
        *(_QWORD *)v306 = v118;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
        v120 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v120 = off_1E3504EC8;
        *((_QWORD *)v120 + 1) = *(_QWORD *)v306;
        v121 = *(_QWORD *)&v306[8];
        *(_QWORD *)&v306[8] = 0;
        *((_QWORD *)v120 + 2) = v121;
        v276[0] = v120;
        v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
        if (!(_BYTE)v290)
          goto LABEL_452;
        WebKit::WebProcess::deleteWebsiteDataForOrigins(this, (char)v289[0], (uint64_t)&v289[1], v276);
        v122 = v276[0];
        v276[0] = 0;
        if (v122)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v122 + 8))(v122);
        if ((_BYTE)v290)
LABEL_168:
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v289[1], v119);
      }
      else
      {
        v205 = *(_QWORD *)a3;
        v206 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v207 = *((_QWORD *)a3 + 3);
        if (v207)
          goto LABEL_302;
      }
      return;
    case 0xA16:
      v57 = *((_QWORD *)this + 62);
      *((_QWORD *)this + 62) = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      return;
    case 0xA17:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebKit::WebProcess::didWriteToPasteboardAsynchronously(this, v289, v84);
        goto LABEL_172;
      }
      return;
    case 0xA18:
      if (PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(this))
        ((void (*)(void))*MEMORY[0x1E0DCE360])();
      return;
    case 0xA19:
      Inspector::RemoteInspector::singleton(this);
      return;
    case 0xA1A:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebKit::WebProcess::ensureAutomationSessionProxy(this, (const WTF::String *)v289);
        goto LABEL_172;
      }
      return;
    case 0xA1B:
      v138 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if (v138 < 0x100u)
        goto LABEL_383;
      v139 = v138;
      v140 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v141)
        goto LABEL_383;
      v142 = (WTF::StringImpl *)v140;
      v143 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v144)
        goto LABEL_383;
      v145 = (WTF::StringImpl *)v143;
      v146 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v147)
        goto LABEL_383;
      v148 = (WTF *)v146;
      IPC::Decoder::decode<WebKit::WebPreferencesStore>((uint64_t *)a3, (uint64_t)v276);
      if (!v282 || (IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)&v283), !v284))
      {
        std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v276);
        goto LABEL_383;
      }
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>((uint64_t *)a3, (uint64_t)v306);
      if (!(_BYTE)v308)
        goto LABEL_433;
      v10 = (WebKit::WebMemorySampler *)IPC::ArgumentCoder<WebKit::RemoteWorkerInitializationData,void>::decode((uint64_t *)a3, (uint64_t)&v285);
      if (v288)
      {
        if (!v282 || !v284 || !(_BYTE)v308)
          goto LABEL_452;
        LOBYTE(v289[0]) = v139;
        v289[1] = v142;
        v289[2] = v145;
        v151 = v276[0];
        v276[0] = 0;
        v290 = v148;
        v291 = v151;
        v152 = v276[1];
        v276[1] = 0;
        v292 = v152;
        LODWORD(v151) = (_DWORD)v277;
        LODWORD(v277) = 0;
        LODWORD(v293) = (_DWORD)v151;
        LOBYTE(v151) = BYTE4(v277);
        BYTE4(v277) = 0;
        BYTE4(v293) = (_BYTE)v151;
        v153 = v278;
        v278 = 0;
        v294 = v153;
        v154 = v279;
        v279 = 0;
        *(_QWORD *)&v295 = v154;
        LODWORD(v153) = v280;
        v280 = 0;
        DWORD2(v295) = (_DWORD)v153;
        LOBYTE(v153) = v281;
        v281 = 0;
        BYTE12(v295) = (_BYTE)v153;
        v155 = v283;
        v283 = 0;
        v299 = *(_OWORD *)&v306[16];
        v300 = v307;
        v298 = *(_OWORD *)v306;
        v296 = v155;
        v301 = v285;
        v302[0] = v286;
        v286 = 0;
        v156 = v287;
        v287 = 0;
        v302[1] = v156;
        v157 = 1;
        v303 = 1;
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v286, v150);
      }
      else
      {
        v149 = *(WTF::StringImpl **)a3;
        v266 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v267 = *((_QWORD *)a3 + 3);
        if (v267 && v266)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v267 + 16))(v267, v149);
LABEL_433:
        v157 = 0;
        LOBYTE(v289[0]) = 0;
        v303 = 0;
      }
      if (v284)
      {
        v268 = v283;
        v283 = 0;
        if (v268)
        {
          if (*(_DWORD *)v268 == 2)
            WTF::StringImpl::destroy(v268, v149);
          else
            *(_DWORD *)v268 -= 2;
        }
      }
      std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v276);
      if (!v157)
        goto LABEL_383;
      v269 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v270)
        goto LABEL_445;
      *(_QWORD *)v306 = v269;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
      v271 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v271 = off_1E3504F90;
      *((_QWORD *)v271 + 1) = *(_QWORD *)v306;
      v272 = *(_QWORD *)&v306[8];
      *(_QWORD *)&v306[8] = 0;
      *((_QWORD *)v271 + 2) = v272;
      v276[0] = v271;
      v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
      if (!v303)
        goto LABEL_452;
      *(_OWORD *)v306 = v298;
      *(_OWORD *)&v306[16] = v299;
      v307 = v300;
      WebKit::WebProcess::establishRemoteWorkerContextConnectionToNetworkProcess(this, LOBYTE(v289[0]), (uint64_t)v289[1], (uint64_t)v289[2], (uint64_t)v290, (WebKit::WebPage *)&v291, (uint64_t *)&v296, (__int128 *)v306, &v301, (uint64_t)v276);
      v273 = v276[0];
      v276[0] = 0;
      if (v273)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v273 + 8))(v273);
      if (v303)
      {
LABEL_445:
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v302, v270);
        v275 = v296;
        v296 = 0;
        if (v275)
        {
          if (*(_DWORD *)v275 == 2)
            WTF::StringImpl::destroy(v275, v274);
          else
            *(_DWORD *)v275 -= 2;
        }
        v10 = v294;
        if (v294)
          goto LABEL_453;
        goto LABEL_450;
      }
      return;
    case 0xA1C:
      v93 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v93 & 0xFF00000000) != 0)
      {
        v94 = v93;
        v95 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v96)
        {
          v289[0] = v95;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
          v97 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v97 = off_1E3504E68;
          *(WTF::StringImpl **)(v97 + 8) = v289[0];
          v98 = v289[1];
          v289[1] = 0;
          *(_QWORD *)(v97 + 16) = v98;
          *(_QWORD *)v306 = v97;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
          WebKit::WebProcess::fetchWebsiteData(this, v94, (uint64_t *)v306);
          goto LABEL_258;
        }
      }
      else
      {
        v202 = *(_QWORD *)a3;
        v203 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v204 = *((_QWORD *)a3 + 3);
        if (v204)
          goto LABEL_291;
      }
      return;
    case 0xA1D:
      v111 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v111 >= 0x100u)
        *((_BYTE *)this + 256) = v111 != 0;
      return;
    case 0xA1E:
      IPC::Decoder::decode<WebKit::GamepadData>((uint64_t *)a3, (uint64_t)v306);
      if (!v311
        || (v10 = (WebKit::WebMemorySampler *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3),
            (unsigned __int16)v10 < 0x100u))
      {
        std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v306, v137);
        goto LABEL_383;
      }
      if (!v311)
        goto LABEL_452;
      v218 = (char)v10;
      LODWORD(v289[0]) = *(_DWORD *)v306;
      v219 = *(_OWORD *)&v306[8];
      memset(&v306[8], 0, 24);
      *(_OWORD *)&v289[1] = v219;
      v290 = *(WTF **)&v306[24];
      v220 = (WTF *)*((_QWORD *)&v307 + 1);
      v291 = (WTF *)v307;
      v307 = 0uLL;
      v292 = v220;
      *(_QWORD *)&v219 = v308;
      v308 = 0;
      v293 = v219;
      v221 = v310;
      v310 = 0;
      v294 = v309;
      *(_QWORD *)&v295 = v221;
      BYTE8(v295) = (_BYTE)v10;
      LOBYTE(v296) = 1;
      std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v306, v137);
      {
        qword_1ECE739E8 = 0;
        unk_1ECE739F0 = 0;
        byte_1ECE739F8 = 0;
        WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&off_1E34E9A40;
        xmmword_1ECE73A00 = 0u;
        unk_1ECE73A10 = 0u;
        xmmword_1ECE73A20 = 0u;
      }
      WebKit::WebGamepadProvider::gamepadConnected((uint64_t)&WebKit::WebGamepadProvider::singleton(void)::provider, (unsigned int *)v289, (v218 != 0));
      if ((_BYTE)v296)
      {
        if ((_QWORD)v295)
          WTF::fastFree((WTF *)(v295 - 16), v24);
        v222 = v292;
        if (v292)
        {
          v292 = 0;
          LODWORD(v293) = 0;
          WTF::fastFree(v222, v24);
        }
        v223 = v290;
        if (v290)
        {
          v290 = 0;
          LODWORD(v291) = 0;
          WTF::fastFree(v223, v24);
        }
        v224 = v289[2];
        v289[2] = 0;
        if (v224)
        {
          if (*(_DWORD *)v224 == 2)
            WTF::StringImpl::destroy(v224, (WTF::StringImpl *)v24);
          else
            *(_DWORD *)v224 -= 2;
        }
        v123 = v289[1];
        v289[1] = 0;
        if (v123)
          goto LABEL_174;
      }
      return;
    case 0xA1F:
      v163 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v163 & 0xFF00000000) != 0)
      {
        {
          qword_1ECE739E8 = 0;
          unk_1ECE739F0 = 0;
          byte_1ECE739F8 = 0;
          WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&off_1E34E9A40;
          xmmword_1ECE73A00 = 0u;
          unk_1ECE73A10 = 0u;
          xmmword_1ECE73A20 = 0u;
        }
        WebKit::WebGamepadProvider::gamepadDisconnected(&WebKit::WebGamepadProvider::singleton(void)::provider, (void *)v163);
      }
      return;
    case 0xA20:
      v82 = (WebCore::GCController *)WebCore::GCController::singleton(this);
      WebCore::GCController::garbageCollectNow(v82);
      return;
    case 0xA21:
      v78 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v79)
      {
        v289[0] = v78;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v80 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v80 = off_1E3504FE0;
        *(WTF::StringImpl **)(v80 + 8) = v289[0];
        v81 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v80 + 16) = v81;
        *(_QWORD *)v306 = v80;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        WebKit::WebProcess::getActivePagesOriginsForTesting((uint64_t)this, (uint64_t *)v306);
        goto LABEL_258;
      }
      return;
    case 0xA22:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (LOBYTE(v289[2]))
      {
        WebKit::WebProcess::grantAccessToAssetServices((const char ***)this, (uint64_t)v289);
        goto LABEL_244;
      }
      return;
    case 0xA23:
      IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::decode((uint64_t *)a3, a2, (uint64_t)v289);
      if ((_BYTE)v292)
        goto LABEL_65;
      v244 = *(_QWORD *)a3;
      v240 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v207 = *((_QWORD *)a3 + 3);
      if (!v207)
      {
        v240 = 0;
LABEL_392:
        v205 = 0;
        goto LABEL_393;
      }
      if (!v240)
        goto LABEL_392;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, v244);
      if ((_BYTE)v292)
      {
LABEL_65:
        v47 = v289[0];
        memset(v289, 0, sizeof(v289));
        *(_QWORD *)v306 = v47;
        *(WTF::StringImpl **)&v306[8] = v289[1];
        *(WTF::StringImpl **)&v306[16] = v289[2];
        v48 = v290;
        v290 = 0;
        *(_QWORD *)&v306[24] = v48;
        v49 = v291;
        v291 = 0;
        *(_QWORD *)&v307 = v49;
        BYTE8(v307) = 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v291);
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v289[2], v50);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v289, v51);
        WebKit::WebProcess::grantUserMediaDeviceSandboxExtensions((uint64_t)this, (uint64_t)v306);
        if (BYTE8(v307))
        {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v307);
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v306[16], v52);
          goto LABEL_67;
        }
        return;
      }
      v205 = *(_QWORD *)a3;
      v240 = *((_QWORD *)a3 + 1);
      v207 = *((_QWORD *)a3 + 3);
LABEL_393:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v207)
        goto LABEL_394;
      return;
    case 0xA24:
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((uint64_t *)a3, v289);
      if (LOBYTE(v289[2]))
        WebKit::WebProcess::handleInjectedBundleMessage((uint64_t)this, (uint64_t)v289, (const void **)&v289[1]);
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v289, v164);
      return;
    case 0xA25:
      IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::decode((uint64_t *)a3, (unint64_t)v289);
      if (v304
        || (v248 = *(_QWORD *)a3,
            v249 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v250 = *((_QWORD *)a3 + 3)) != 0)
        && v249
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v250 + 16))(v250, v248), v304))
      {
        WebKit::WebProcessCreationParameters::WebProcessCreationParameters((uint64_t)v306, (uint64_t *)v289);
        v312 = 1;
        if (!v304)
          goto LABEL_233;
        WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v289, v165);
        if (v312)
          goto LABEL_233;
      }
      else
      {
        v306[0] = 0;
        v312 = 0;
      }
      v251 = *(_QWORD *)a3;
      v252 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v253 = *((_QWORD *)a3 + 3);
      if (!v253)
        return;
      if (!v252)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v253 + 16))(v253, v251);
      if (!v312)
        return;
LABEL_233:
      v166 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)v167)
      {
        v289[0] = v166;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v168 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v168 = off_1E3504E40;
        *(WTF::StringImpl **)(v168 + 8) = v289[0];
        v169 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v168 + 16) = v169;
        v276[0] = (WTF::StringImpl *)v168;
        v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        if (!v312)
          goto LABEL_452;
        WebKit::WebProcess::initializeWebProcess((uint64_t)this, (uint64_t)v306, (uint64_t *)v276);
        v170 = v276[0];
        v276[0] = 0;
        if (v170)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v170 + 8))(v170);
      }
      if (v312)
        WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v306, v167);
      return;
    case 0xA26:
      v128 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v129)
      {
        v289[0] = v128;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v130 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v130 = off_1E3505008;
        *(WTF::StringImpl **)(v130 + 8) = v289[0];
        v131 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v130 + 16) = v131;
        *(_QWORD *)v306 = v130;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        WebKit::WebProcess::isJITEnabled((uint64_t)this, (uint64_t *)v306);
        goto LABEL_258;
      }
      return;
    case 0xA27:
      *((_DWORD *)this + 149) = 4;
      WTF::isIntegralOrPointerType(this);
      return;
    case 0xA28:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v276);
      if (!LOBYTE(v276[1]))
        goto LABEL_383;
      v10 = (WebKit::WebMemorySampler *)IPC::Decoder::decode<std::optional<unsigned long long>>((uint64_t *)a3, (uint64_t)v306);
      if (!v306[16])
      {
        if (LOBYTE(v276[1]))
        {
          v233 = v276[0];
          v276[0] = 0;
          if (v233)
          {
            if (*(_DWORD *)v233 == 2)
              WTF::StringImpl::destroy(v233, v132);
            else
              *(_DWORD *)v233 -= 2;
          }
        }
        goto LABEL_383;
      }
      if (!LOBYTE(v276[1]))
        goto LABEL_452;
      v289[0] = v276[0];
      *(_OWORD *)&v289[1] = *(_OWORD *)v306;
      LOBYTE(v290) = 1;
      WebKit::WebProcess::postNotification((int)this, (WTF::String *)v289, *(uint64_t *)v306, v306[8]);
      if ((_BYTE)v290)
        goto LABEL_173;
      return;
    case 0xA29:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebKit::WebProcess::postObserverNotification(this, (const WTF::String *)v289);
        goto LABEL_172;
      }
      return;
    case 0xA2A:
      v54 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v54 >= 0x100u)
        WebCore::setSystemHasAC((WebCore *)(v54 != 0));
      return;
    case 0xA2B:
      IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      return;
    case 0xA2C:
      IPC::Decoder::decode<WebCore::PrewarmInformation>((uint64_t *)a3, a2, (uint64_t)v289);
      if ((_BYTE)v291)
      {
        v41 = v289[0];
        memset(v289, 0, sizeof(v289));
        *(_QWORD *)v306 = v41;
        *(WTF::StringImpl **)&v306[8] = v289[1];
        *(WTF::StringImpl **)&v306[16] = v289[2];
        v42 = v290;
        v290 = 0;
        *(_QWORD *)&v306[24] = v42;
        LOBYTE(v307) = 1;
        std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v289, v40);
        WebCore::ProcessWarming::prewarmWithInformation();
        if ((_BYTE)v307)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v306[16], v43);
LABEL_67:
          v53 = (WTF::StringImpl **)v306;
          goto LABEL_287;
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v289, v40);
        v205 = *(_QWORD *)a3;
        v206 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v207 = *((_QWORD *)a3 + 3);
        if (v207)
        {
LABEL_302:
          if (v206)
            goto LABEL_395;
        }
      }
      return;
    case 0xA2D:
      WebKit::WebProcess::processDidResume(this);
      return;
    case 0xA2E:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy((WebCore::LegacySchemeRegistry *)v289, v171);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA2F:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebKit::WebProcess::registerURLSchemeAsCORSEnabled(this, (const WTF::String *)v289);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA30:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned((WebCore::LegacySchemeRegistry *)v289, v72);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA31:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest((WebCore::LegacySchemeRegistry *)v289, v91);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA32:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated((WebCore::LegacySchemeRegistry *)v289, v160);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA33:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument((WebCore::LegacySchemeRegistry *)v289, v27);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA34:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal((WebCore::LegacySchemeRegistry *)v289, v56);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA35:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess((WebCore::LegacySchemeRegistry *)v289, v133);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA36:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure((WebCore::LegacySchemeRegistry *)v289, v190);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA37:
      IPC::handleMessage<Messages::WebProcess::RegisterURLSchemeAsWebExtension,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::String const&)const>((uint64_t *)a3, this);
      return;
    case 0xA38:
      v58 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v59)
      {
        v289[0] = v58;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v60 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v60 = off_1E35050F8;
        *(WTF::StringImpl **)(v60 + 8) = v289[0];
        v61 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v60 + 16) = v61;
        *(_QWORD *)v306 = v60;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        WebKit::WebProcess::releaseMemory((uint64_t)this, (uint64_t *)v306);
        goto LABEL_258;
      }
      return;
    case 0xA39:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v306);
      if ((_BYTE)v310)
      {
        v10 = (WebKit::WebMemorySampler *)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, (uint64_t)v276);
        v71 = (char)v278;
        if ((_BYTE)v278)
        {
          if (!(_BYTE)v310)
            goto LABEL_452;
          LOBYTE(v289[0]) = 0;
          LODWORD(v290) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v289, (uint64_t)v306);
          LOBYTE(v291) = 0;
          LODWORD(v294) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v291, (uint64_t)&v307);
          v295 = *(_OWORD *)v276;
          v296 = v277;
          v71 = 1;
        }
        else
        {
          LOBYTE(v289[0]) = 0;
        }
        v297 = v71;
      }
      else
      {
        LOBYTE(v289[0]) = 0;
        v297 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v306);
      if (v297
        || (v254 = *(_QWORD *)a3,
            v255 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v256 = *((_QWORD *)a3 + 3)) != 0)
        && v255
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v256 + 16))(v256, v254), v297))
      {
        v228 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v229)
        {
          *(_QWORD *)v306 = v228;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
          v230 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v230 = off_1E3504F18;
          *((_QWORD *)v230 + 1) = *(_QWORD *)v306;
          v231 = *(_QWORD *)&v306[8];
          *(_QWORD *)&v306[8] = 0;
          *((_QWORD *)v230 + 2) = v231;
          v276[0] = v230;
          v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
          if (!v297)
            goto LABEL_452;
          *(_OWORD *)v306 = v295;
          *(_QWORD *)&v306[16] = v296;
          WebKit::WebProcess::reloadExecutionContextsForOrigin((uint64_t)this, (uint64_t)v289, (uint64_t)v306, (uint64_t *)v276);
          v232 = v276[0];
          v276[0] = 0;
          if (v232)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v232 + 8))(v232);
        }
        if (v297)
        {
          if ((_DWORD)v294 != -1)
            ((void (*)(_BYTE *, WTF **))off_1E3504EA8[v294])(v306, &v291);
          LODWORD(v294) = -1;
          if ((_DWORD)v290 != -1)
            ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3504EA8[v290])(v306, v289);
        }
      }
      return;
    case 0xA3A:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::MockRealtimeMediaSourceCenter::removeDevice((WebCore::MockRealtimeMediaSourceCenter *)v289, v25);
LABEL_172:
        if (LOBYTE(v289[1]))
          goto LABEL_173;
      }
      return;
    case 0xA3B:
      WebCore::MockRealtimeMediaSourceCenter::resetDevices(this);
      return;
    case 0xA3C:
      WebKit::WebProcess::revokeAccessToAssetServices(this);
      return;
    case 0xA3D:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (LOBYTE(v289[2]))
      {
        WebKit::WebProcess::revokeUserMediaDeviceSandboxExtensions((uint64_t)this, (unsigned int *)v289, v36);
        goto LABEL_53;
      }
      return;
    case 0xA3E:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)v276);
      if (!LOBYTE(v276[1]))
      {
        v179 = 0;
        LOBYTE(v289[0]) = 0;
        LOBYTE(v290) = 0;
LABEL_306:
        v210 = *(_QWORD *)a3;
        v211 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v212 = *((_QWORD *)a3 + 3);
        if (v212 && v211)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v212 + 16))(v212, v210);
        goto LABEL_369;
      }
      v10 = IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)v306);
      if (!v306[8])
      {
        v179 = 0;
        LOBYTE(v289[0]) = 0;
        LOBYTE(v290) = 0;
LABEL_360:
        v177 = 1;
        goto LABEL_361;
      }
      v173 = *((_QWORD *)a3 + 1);
      v172 = *(WTF::StringImpl **)a3;
      v174 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v173 <= v174)
      {
        v257 = 0;
        v258 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v259 = *((_QWORD *)a3 + 3);
        if (v259)
        {
          if (v173)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v259 + 16))(v259);
            v258 = *(_QWORD *)a3;
            v257 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v257 = 0;
            v258 = 0;
          }
        }
        goto LABEL_416;
      }
      v175 = (unsigned __int8 *)v172 + v174;
      *((_QWORD *)a3 + 2) = v175 + 1;
      if (!v172)
      {
        v257 = v173;
        v258 = 0;
LABEL_416:
        v173 = 0;
        v172 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v260 = *((_QWORD *)a3 + 3);
        if (v260)
        {
          if (v257)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v260 + 16))(v260, v258, v257);
            v172 = *(WTF::StringImpl **)a3;
            v173 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v173 = 0;
            v172 = 0;
          }
        }
LABEL_417:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v261 = *((_QWORD *)a3 + 3);
        if (v261 && v173)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v261 + 16))(v261, v172);
        LOBYTE(v289[0]) = 0;
        LOBYTE(v290) = 0;
        if (v306[8])
        {
          v262 = *(WTF::StringImpl **)v306;
          *(_QWORD *)v306 = 0;
          if (v262)
          {
            if (*(_DWORD *)v262 != 2)
            {
              v179 = 0;
              *(_DWORD *)v262 -= 2;
              goto LABEL_360;
            }
            WTF::StringImpl::destroy(v262, v172);
          }
        }
        v179 = 0;
        goto LABEL_360;
      }
      v176 = *v175;
      if (v176 >= 2)
        goto LABEL_417;
      if (!LOBYTE(v276[1]))
        goto LABEL_452;
      v177 = 0;
      v3 = v176 != 0;
      v178 = v276[0];
      v276[0] = 0;
      v289[0] = v178;
      v289[1] = *(WTF::StringImpl **)v306;
      LOBYTE(v289[2]) = v3;
      v179 = 1;
      LOBYTE(v290) = 1;
LABEL_361:
      if (LOBYTE(v276[1]))
      {
        v234 = v276[0];
        v276[0] = 0;
        if (v234)
        {
          if (*(_DWORD *)v234 == 2)
            WTF::StringImpl::destroy(v234, v172);
          else
            *(_DWORD *)v234 -= 2;
        }
      }
      if (v177)
        goto LABEL_306;
LABEL_369:
      if (v179)
      {
        v235 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!(_BYTE)v24)
          goto LABEL_374;
        *(_QWORD *)v306 = v235;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
        v236 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v236 = off_1E3505058;
        *((_QWORD *)v236 + 1) = *(_QWORD *)v306;
        v237 = *(_QWORD *)&v306[8];
        *(_QWORD *)&v306[8] = 0;
        *((_QWORD *)v236 + 2) = v237;
        v276[0] = v236;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
        WebKit::WebProcess::seedResourceLoadStatisticsForTesting(this, (uint64_t)v289, (uint64_t)&v289[1], v3, (uint64_t *)v276);
        v238 = v276[0];
        v276[0] = 0;
        if (v238)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v238 + 8))(v238);
        if ((_BYTE)v290)
        {
LABEL_374:
          v239 = v289[1];
          v289[1] = 0;
          if (v239)
          {
            if (*(_DWORD *)v239 == 2)
              WTF::StringImpl::destroy(v239, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v239 -= 2;
          }
          goto LABEL_173;
        }
      }
      return;
    case 0xA3F:
      v186 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v187)
      {
        v289[0] = v186;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
        v188 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v188 = off_1E35050D0;
        *(WTF::StringImpl **)(v188 + 8) = v289[0];
        v189 = v289[1];
        v289[1] = 0;
        *(_QWORD *)(v188 + 16) = v189;
        *(_QWORD *)v306 = v188;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
        WebKit::WebProcess::sendResourceLoadStatisticsDataImmediately(this, (uint64_t)v306);
        goto LABEL_258;
      }
      return;
    case 0xA40:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::FontCascade::setCodePath();
      return;
    case 0xA41:
      v158 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v158 & 0xFF00000000) != 0)
      {
        v159 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton((WebCore::BackForwardCache *)v158);
        WebCore::BackForwardCache::setMaxSize(v159);
      }
      return;
    case 0xA42:
      v62 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>((uint64_t *)a3);
      if (v62 >= 0x100u)
        WebKit::WebProcess::setCacheModel((uint64_t)this, (WTF *)v62);
      return;
    case 0xA43:
      v161 = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v162)
        WebCore::ResourceRequestBase::setDefaultTimeoutInterval(v161, *(double *)&v161);
      return;
    case 0xA44:
      v73 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v73 >= 0x100u)
        WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting((WebCore::FontCascade *)(v73 != 0));
      return;
    case 0xA45:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme((WebCore::LegacySchemeRegistry *)1, (uint64_t)v289, v104);
        if (LOBYTE(v289[1]))
          goto LABEL_263;
      }
      return;
    case 0xA46:
      IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        v106 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v107)
        {
          *(_QWORD *)v306 = v106;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v306[8], a2);
          v108 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v108 = off_1E35050A8;
          *((_QWORD *)v108 + 1) = *(_QWORD *)v306;
          v109 = *(_QWORD *)&v306[8];
          *(_QWORD *)&v306[8] = 0;
          *((_QWORD *)v108 + 2) = v109;
          v276[0] = v108;
          v10 = (WebKit::WebMemorySampler *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v306[8]);
          if (!LOBYTE(v289[1]))
            goto LABEL_452;
          WebKit::WebProcess::setDomainsWithCrossPageStorageAccess((uint64_t)this, (uint64_t *)v289, (const WTF::StringImpl *)v276);
          v110 = v276[0];
          v276[0] = 0;
          if (v110)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v110 + 8))(v110);
        }
        if (LOBYTE(v289[1]) && v289[0])
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v289[0], v107);
      }
      return;
    case 0xA47:
      v85 = (WebCore::ResourceLoadObserver *)IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        v86 = WebCore::ResourceLoadObserver::shared(v85);
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v86 + 120))(v86, v289);
        goto LABEL_271;
      }
      return;
    case 0xA48:
      v74 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v74 >= 0x100u)
        WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility((WebCore::AXObjectCache *)(v74 != 0));
      return;
    case 0xA49:
      v28 = (WebCore::Page *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)v28 >= 0x100u)
      {
        v105 = v28 != 0;
        if (*((unsigned __int8 *)this + 257) != v105)
        {
          *((_BYTE *)this + 257) = v105;
          goto LABEL_150;
        }
      }
      return;
    case 0xA4A:
      v28 = (WebCore::Page *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)v28 >= 0x100u)
      {
        v29 = v28 != 0;
        if (*((unsigned __int8 *)this + 258) != v29)
        {
          *((_BYTE *)this + 258) = v29;
LABEL_150:
          WebCore::Page::updateStyleForAllPagesAfterGlobalChangeInEnvironment(v28);
        }
      }
      return;
    case 0xA4B:
      v55 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v55 >= 0x100u)
        *((_BYTE *)this + 616) = v55 != 0;
      return;
    case 0xA4C:
      IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if (v201)
        WebKit::WebProcess::setHiddenPageDOMTimerThrottlingIncreaseLimit((uint64_t)this);
      return;
    case 0xA4D:
      IPC::Decoder::decode<WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (!LOBYTE(v289[2]))
        goto LABEL_383;
      *(WTF::StringImpl **)v306 = v289[0];
      v45 = v289[1];
      v289[0] = 0;
      v289[1] = 0;
      *(_QWORD *)&v306[8] = v45;
      WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v289, v44);
      v306[16] = 1;
      {
        qword_1ECE739E8 = 0;
        unk_1ECE739F0 = 0;
        byte_1ECE739F8 = 0;
        WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&off_1E34E9A40;
        xmmword_1ECE73A00 = 0u;
        unk_1ECE73A10 = 0u;
        xmmword_1ECE73A20 = 0u;
      }
      WebKit::WebGamepadProvider::setInitialGamepads((uint64_t)&WebKit::WebGamepadProvider::singleton(void)::provider, (uint64_t)v306);
      if (v306[16])
        WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v306, v46);
      return;
    case 0xA4E:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, v289);
      if ((_BYTE)v290)
      {
        WebKit::WebProcess::setInjectedBundleParameter((uint64_t)this, v289, (uint64_t)v289[1], (uint64_t)v289[2]);
        if ((_BYTE)v290)
        {
LABEL_263:
          v123 = v289[0];
          v289[0] = 0;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
              goto LABEL_266;
            *(_DWORD *)v123 -= 2;
          }
        }
      }
      return;
    case 0xA4F:
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[2]))
        WebKit::WebProcess::setInjectedBundleParameters((uint64_t)this, (uint64_t)v289[0], (uint64_t)v289[1]);
      return;
    case 0xA50:
      v180 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v180 >= 0x100u)
      {
        v181 = v180;
        v182 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v183)
        {
          v289[0] = v182;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
          v184 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v184 = off_1E3504FB8;
          *(WTF::StringImpl **)(v184 + 8) = v289[0];
          v185 = v289[1];
          v289[1] = 0;
          *(_QWORD *)(v184 + 16) = v185;
          *(_QWORD *)v306 = v184;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
          WebKit::WebProcess::setIsInProcessCache(this, v181 != 0, (uint64_t *)v306);
          goto LABEL_258;
        }
      }
      return;
    case 0xA51:
      v191 = (WebCore::GCController *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)v191 >= 0x100u)
      {
        v192 = (WebCore::GCController *)WebCore::GCController::singleton(v191);
        WebCore::GCController::setJavaScriptGarbageCollectorTimerEnabled(v192);
      }
      return;
    case 0xA52:
      v194 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>((uint64_t *)a3);
      if (v194 < 0x100u)
        goto LABEL_383;
      v196 = v194;
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v195, (uint64_t)v306);
      if (!v306[16])
        goto LABEL_383;
      LOBYTE(v289[0]) = v196;
      v198 = *(WTF::StringImpl **)v306;
      *(_QWORD *)v306 = 0;
      v289[1] = v198;
      v199 = *(WTF::StringImpl **)&v306[8];
      *(_QWORD *)&v306[8] = 0;
      v289[2] = v199;
      LOBYTE(v290) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v306, v197);
      WebKit::WebProcess::setMediaAccessibilityPreferences((uint64_t)this);
      v53 = &v289[1];
      goto LABEL_287;
    case 0xA53:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (!LOBYTE(v289[2]))
        return;
      *(WTF::StringImpl **)v306 = v289[0];
      v38 = v289[1];
      v289[0] = 0;
      v289[1] = 0;
      *(_QWORD *)&v306[8] = v38;
      WebKit::WebProcess::setMediaMIMETypes(this);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v306, v39);
LABEL_53:
      if (!LOBYTE(v289[2]))
        return;
      goto LABEL_286;
    case 0xA54:
      v92 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v92 >= 0x100u)
        WebKit::WebProcess::setMemoryCacheDisabled(this, v92 != 0);
      return;
    case 0xA55:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((uint64_t *)a3, v289);
      if (LOBYTE(v289[2]))
      {
        WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral((WebCore::MockRealtimeMediaSourceCenter *)v289, (const WTF::String *)LOBYTE(v289[1]));
        if (LOBYTE(v289[2]))
        {
LABEL_173:
          v123 = v289[0];
          v289[0] = 0;
          if (v123)
          {
LABEL_174:
            if (*(_DWORD *)v123 == 2)
LABEL_266:
              WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v24);
            else
              *(_DWORD *)v123 -= 2;
          }
        }
      }
      return;
    case 0xA56:
      IPC::Decoder::decode<WebCore::ScreenProperties>((unint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[2]))
      {
        *(_DWORD *)v306 = v289[0];
        *(WTF::StringImpl **)&v306[8] = v289[1];
        v306[16] = 1;
        WebKit::WebProcess::setScreenProperties((uint64_t)this);
        if (v306[16] && *(_QWORD *)&v306[8])
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(*(uint64_t *)&v306[8], v200);
      }
      else
      {
LABEL_383:
        v205 = *(_QWORD *)a3;
        v240 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v207 = *((_QWORD *)a3 + 3);
        if (v207)
        {
LABEL_394:
          if (v240)
LABEL_395:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, v205);
        }
      }
      return;
    case 0xA57:
      v19 = IPC::Decoder::decode<WebKit::TextCheckerState>((uint64_t *)a3);
      if ((v19 & 0xFF0000) == 0)
      {
        v241 = *(_QWORD *)a3;
        v242 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v243 = *((_QWORD *)a3 + 3);
        if (v243)
        {
          if (v242)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 16))(v243, v241);
        }
      }
      v20 = v19 & 0xFFFFFF;
      v21 = v19 & 0xFF00 | 0x10000;
      if ((v19 & 0xFF0000) == 0)
        v21 = 0;
      if (v20 <= 0x10000)
        LOBYTE(v20) = 0;
      v22 = HIWORD(v21);
      v23 = v21 & 0xFFFFFF00 | v20;
      BYTE2(v289[0]) = v22;
      LOWORD(v289[0]) = v23;
      if (v23 >= 0x10000)
        WebKit::WebProcess::setTextCheckerState((uint64_t)this, v289);
      return;
    case 0xA58:
      v30 = IPC::Decoder::decode<JSC::MessageLevel>((uint64_t *)a3);
      if (v30 > 0xFFu)
      {
        v31 = v30;
        v32 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v33)
        {
          v289[0] = v32;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v289[1], a2);
          v34 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v34 = off_1E3505080;
          *(WTF::StringImpl **)(v34 + 8) = v289[0];
          v35 = v289[1];
          v289[1] = 0;
          *(_QWORD *)(v34 + 16) = v35;
          *(_QWORD *)v306 = v34;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v289[1]);
          WebKit::WebProcess::setThirdPartyCookieBlockingMode(this, v31, (uint64_t *)v306);
LABEL_258:
          v103 = *(WTF::StringImpl **)v306;
          *(_QWORD *)v306 = 0;
          if (v103)
LABEL_259:
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v103 + 8))(v103);
        }
        return;
      }
      v202 = *(_QWORD *)a3;
      v203 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v204 = *((_QWORD *)a3 + 3);
      if (!v204)
        return;
      goto LABEL_291;
    case 0xA59:
      v70 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v70 >= 0x100u)
        WebKit::WebProcess::setTrackingPreventionEnabled(this, (WebCore::DeprecatedGlobalSettings *)(v70 != 0));
      return;
    case 0xA5A:
      IPC::Decoder::decode<std::tuple<WebKit::WebProcessDataStoreParameters>>(v289, (uint64_t *)a3);
      if (LOBYTE(v302[0]))
      {
        WebKit::WebProcess::setWebsiteDataStoreParameters(this, (uint64_t)v289);
        if (LOBYTE(v302[0]))
          WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v289);
      }
      return;
    case 0xA5B:
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((uint64_t *)a3, (uint64_t)v276);
      if (!LOBYTE(v276[1]))
      {
        v18 = 0;
        LOBYTE(v289[0]) = 0;
        LOBYTE(v290) = 0;
LABEL_298:
        v208 = *(_QWORD *)a3;
        v209 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v10 = (WebKit::WebMemorySampler *)*((_QWORD *)a3 + 3);
        if (v10 && v209)
          v10 = (WebKit::WebMemorySampler *)(*(uint64_t (**)(WebKit::WebMemorySampler *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v208);
LABEL_338:
        if (v18)
        {
          v225 = WebKit::WebMemorySampler::singleton(v10);
          WebKit::WebMemorySampler::start(v225, (uint64_t *)v289, (WTF::StringImpl *)&v289[1], *(double *)&v4);
          if ((_BYTE)v290)
          {
            v227 = v289[1];
            v289[1] = 0;
            if (v227)
            {
              if (*(_DWORD *)v227 == 2)
                WTF::StringImpl::destroy(v227, v226);
              else
                *(_DWORD *)v227 -= 2;
            }
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v289);
          }
        }
        return;
      }
      v10 = (WebKit::WebMemorySampler *)IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v306);
      if (v306[8])
      {
        v11 = *((_QWORD *)a3 + 1);
        v12 = *(_QWORD *)a3;
        v13 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
        if (v11 >= v13 && v11 - v13 > 7)
        {
          v15 = (WTF::StringImpl **)(v12 + v13);
          *((_QWORD *)a3 + 2) = v15 + 1;
          if (v12)
          {
            if (!LOBYTE(v276[1]))
            {
LABEL_452:
              __break(1u);
LABEL_453:
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v10, (WTF::StringImpl *)v295);
LABEL_450:
              if (v291)
                WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v291, (WTF::StringImpl *)v292);
              return;
            }
            v16 = 0;
            v4 = *v15;
            v17 = v276[0];
            v276[0] = 0;
            v289[0] = v17;
            v289[1] = *(WTF::StringImpl **)v306;
            v289[2] = v4;
            v18 = 1;
            LOBYTE(v290) = 1;
LABEL_335:
            if (LOBYTE(v276[1]))
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v276);
            if (!v16)
              goto LABEL_338;
            goto LABEL_298;
          }
          v263 = v11;
          v264 = 0;
        }
        else
        {
          v263 = 0;
          v264 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v265 = *((_QWORD *)a3 + 3);
          if (v265)
          {
            if (v11)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v265 + 16))(v265, v12, v11);
              v264 = *(WTF::StringImpl **)a3;
              v263 = *((_QWORD *)a3 + 1);
            }
            else
            {
              v263 = 0;
              v264 = 0;
            }
          }
        }
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v10 = (WebKit::WebMemorySampler *)*((_QWORD *)a3 + 3);
        if (v10 && v263)
          v10 = (WebKit::WebMemorySampler *)(*(uint64_t (**)(WebKit::WebMemorySampler *, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, v264);
        LOBYTE(v289[0]) = 0;
        LOBYTE(v290) = 0;
        if (v306[8])
        {
          v10 = *(WebKit::WebMemorySampler **)v306;
          *(_QWORD *)v306 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 != 2)
            {
              v18 = 0;
              *(_DWORD *)v10 -= 2;
              goto LABEL_334;
            }
            v10 = (WebKit::WebMemorySampler *)WTF::StringImpl::destroy(v10, v264);
          }
        }
        v18 = 0;
        goto LABEL_334;
      }
      v18 = 0;
      LOBYTE(v289[0]) = 0;
      LOBYTE(v290) = 0;
LABEL_334:
      v16 = 1;
      goto LABEL_335;
    case 0xA5C:
      v8 = WebKit::WebMemorySampler::singleton(this);
      WebKit::WebMemorySampler::stop((uint64_t)v8, v9);
      return;
    case 0xA5D:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (!LOBYTE(v289[2]))
        return;
      if (!HIDWORD(v289[1]))
        goto LABEL_245;
      v135 = (const char ***)v289[0];
      v136 = 8 * HIDWORD(v289[1]);
      do
      {
        if (*v135)
          WebKit::SandboxExtension::consumePermanently(v135, v134);
        ++v135;
        v136 -= 8;
      }
      while (v136);
LABEL_244:
      if (LOBYTE(v289[2]))
LABEL_245:
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v289, v134);
      return;
    case 0xA5E:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (!LOBYTE(v289[2]))
        return;
      WebKit::WebProcess::unblockServicesRequiredByAccessibility((uint64_t)this, (uint64_t)v289);
      goto LABEL_244;
    case 0xA5F:
      IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t *)a3, (uint64_t)v289);
      if (LOBYTE(v289[1]))
      {
        WebKit::WebProcess::updateDomainsWithStorageAccessQuirks((uint64_t)this, (WTF::StringImpl *)v289, v193);
LABEL_271:
        if (LOBYTE(v289[1]) && v289[0])
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v289[0], v87);
      }
      return;
    case 0xA60:
      IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v289, (uint64_t *)a3);
      if (LOBYTE(v289[1]))
      {
        WebCore::Quirks::updateStorageAccessUserAgentStringQuirks();
        if (LOBYTE(v289[1]))
        {
          if (v289[0])
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v289[0], v26);
        }
      }
      return;
    case 0xA61:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3) <= 0xFFu)
      {
        v202 = *(_QWORD *)a3;
        v203 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v204 = *((_QWORD *)a3 + 3);
        if (v204)
        {
LABEL_291:
          if (v203)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v202);
        }
      }
      else
      {
        PAL::setCurrentUserInterfaceIdiom();
      }
      return;
    case 0xA62:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v289);
      if (LOBYTE(v289[2]))
      {
        WTF::overrideUserPreferredLanguages();
        if (LOBYTE(v289[2]))
        {
LABEL_286:
          v53 = v289;
LABEL_287:
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, v37);
        }
      }
      return;
    default:
      return;
  }
}

uint64_t IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::decode((uint64_t)a2, (uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 3776))
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _BOOL8 v11;
  const WebCore::ResourceResponse *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  _DWORD *v18;
  WebCore::InspectorInstrumentationWebKit *v19;
  BOOL v21;
  uint64_t result;
  WTF::StringImpl *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v32;
  _QWORD *v33;
  int shouldInterceptResponseInternal;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  WebKit::WebProcess *v38;
  _QWORD *v39;
  _QWORD *v40;
  _BYTE buf[24];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = off_1ECE713E8;
  v11 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    v17 = v16 - *(double *)(a1 + 80);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    v42 = v14;
    v43 = 2048;
    v44 = v15;
    v45 = 2048;
    v46 = v17;
    v47 = 1024;
    v48 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: (httpStatusCode=%d)", buf, 0x3Au);
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a5 + 128))
  {
    *(_QWORD *)(a5 + 80) = *(_QWORD *)(a1 + 88);
    v24 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)v24 = 1;
    v25 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(v24 + 8) = *(_OWORD *)a5;
    *(_OWORD *)(v24 + 24) = v25;
    v27 = *(_OWORD *)(a5 + 48);
    v26 = *(_OWORD *)(a5 + 64);
    v28 = *(_QWORD *)(a5 + 80);
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(a5 + 32);
    *(_QWORD *)(v24 + 88) = v28;
    *(_OWORD *)(v24 + 72) = v26;
    *(_OWORD *)(v24 + 56) = v27;
    v29 = *(_QWORD *)(a5 + 88);
    *(_QWORD *)(a5 + 88) = 0;
    *(_QWORD *)(v24 + 96) = v29;
    v30 = *(_OWORD *)(a5 + 96);
    *(_QWORD *)(v24 + 120) = *(_QWORD *)(a5 + 112);
    *(_OWORD *)(v24 + 104) = v30;
    v31 = *(_QWORD *)(a5 + 120);
    *(_QWORD *)(a5 + 120) = 0;
    *(_QWORD *)(v24 + 128) = v31;
    v32 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)*((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = v24;
    if (v32)
      WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v32, v23);
  }
  if (a3)
  {
    v38 = (WebKit::WebProcess *)WebKit::WebResourceLoader::mainFrameMainResource((WebKit::WebResourceLoader *)a1);
    if ((_DWORD)v38)
      *((_BYTE *)WebKit::WebProcess::singleton(v38) + 776) = 1;
  }
  v40 = 0;
  v18 = (_DWORD *)a1;
  if (a4)
  {
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v18 = 0;
    *v33 = &off_1E34EB4B8;
    v33[1] = a1;
    v33[2] = a1;
    v40 = v33;
  }
  v19 = *(WebCore::InspectorInstrumentationWebKit **)(*(_QWORD *)(a1 + 16) + 32);
  if (atomic_load(MEMORY[0x1E0DD42D8]))
    v21 = v19 == 0;
  else
    v21 = 1;
  if (v21
    || (shouldInterceptResponseInternal = WebCore::InspectorInstrumentationWebKit::shouldInterceptResponseInternal(v19, a2, v12)) == 0)
  {
    (*(void (**)(_QWORD, WebCore::ResourceResponseBase *, _QWORD **))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16), a2, &v40);
    result = (uint64_t)v40;
    v40 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 744);
    WebKit::WebResourceInterceptController::beginInterceptingResponse((uint64_t *)(a1 + 64), v35);
    ++*(_DWORD *)(a1 + 8);
    *(_QWORD *)&buf[16] = v35;
    v36 = v40;
    v40 = 0;
    *(_QWORD *)buf = a1;
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v37 = &off_1E34EB4E0;
    v37[1] = a1;
    v37[2] = a1;
    v37[3] = v35;
    *(_QWORD *)&buf[8] = 0;
    v42 = 0;
    v37[4] = v36;
    v39 = v37;
    WebCore::InspectorInstrumentationWebKit::interceptResponseInternal();
    if (v39)
      (*(void (**)(_QWORD *))(*v39 + 8))(v39);
    result = WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::~$_1((uint64_t)buf);
  }
  if (v18)
  {
    if (v18[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  return result;
}

void WebKit::NetworkProcess::didReceiveNetworkProcessMessage(WebKit::NetworkProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t *v8;
  unsigned __int8 **v9;
  _BYTE *v11;
  IPC::Encoder **v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  CFTypeRef v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  CFTypeRef v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  double v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  CFTypeRef v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unsigned __int8 *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _QWORD *v75;
  CFTypeRef v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  _QWORD *v80;
  CFTypeRef v81;
  unint64_t v82;
  char v83;
  unsigned __int8 *v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  _QWORD *v92;
  CFTypeRef v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  _QWORD *v97;
  CFTypeRef v98;
  unint64_t v99;
  char v100;
  unsigned __int8 *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unsigned __int8 *v115;
  unint64_t v116;
  char v117;
  const void *v118;
  uint64_t v119;
  __int16 v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  _QWORD *v125;
  CFTypeRef v126;
  unint64_t v127;
  char v128;
  unsigned __int8 *v129;
  uint64_t v130;
  void *v131;
  int v132;
  void *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  _QWORD *v146;
  CFTypeRef v147;
  unint64_t v148;
  char v149;
  unsigned __int8 *v150;
  int v151;
  char v152;
  unint64_t v153;
  char v154;
  unsigned __int8 *v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unsigned int v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  unint64_t v169;
  char v170;
  unsigned __int8 *v171;
  int v172;
  const void *v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unsigned __int8 *v183;
  _QWORD *v184;
  CFTypeRef v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  unsigned __int8 *v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unsigned __int8 *v216;
  double v217;
  WTF::StringImpl *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char v224;
  uint64_t v225;
  unsigned __int16 v226;
  uint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 *v232;
  _QWORD *v233;
  CFTypeRef v234;
  unint64_t v235;
  uint64_t v236;
  unsigned __int8 *v237;
  _QWORD *v238;
  CFTypeRef v239;
  unint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  _QWORD *v243;
  CFTypeRef v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  char v249;
  uint64_t v250;
  unsigned __int8 *v251;
  _QWORD *v252;
  CFTypeRef v253;
  unint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  uint64_t v259;
  unsigned __int16 PartyWebsiteDataRemoval;
  unint64_t v261;
  uint64_t v262;
  unsigned __int8 *v263;
  _QWORD *v264;
  CFTypeRef v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  unsigned __int8 *v271;
  unint64_t v272;
  char v273;
  const void *v274;
  unint64_t v275;
  unint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  int v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  unsigned __int8 *v285;
  _QWORD *v286;
  CFTypeRef v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  unsigned __int8 *v296;
  void *v297;
  WTF::StringImpl *v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  char v307;
  unsigned __int8 *v308;
  uint64_t v309;
  CFTypeRef v310;
  unint64_t v311;
  uint64_t v312;
  unsigned __int8 *v313;
  _QWORD *v314;
  CFTypeRef v315;
  unsigned __int8 *v316;
  _QWORD *v317;
  CFTypeRef v318;
  unint64_t v319;
  _QWORD *v320;
  unsigned __int8 *v321;
  _QWORD *v322;
  CFTypeRef v323;
  unint64_t v324;
  char v325;
  unsigned __int8 *v326;
  char v327;
  int v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unsigned __int8 *v335;
  _QWORD *v336;
  CFTypeRef v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  unint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t v350;
  char v351;
  unsigned __int8 *v352;
  uint64_t v353;
  BOOL v354;
  unint64_t v355;
  unint64_t v356;
  unsigned __int8 *v357;
  unsigned int v358;
  double v359;
  unint64_t v360;
  unsigned __int8 *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned __int8 *v364;
  unsigned int v365;
  unint64_t v366;
  uint64_t *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  int v371;
  char v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unsigned __int8 *v376;
  _QWORD *v377;
  CFTypeRef v378;
  unint64_t v379;
  char v380;
  unsigned __int8 *v381;
  WTF::StringImpl *v382;
  __int128 v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unsigned __int8 *v391;
  _QWORD *v392;
  CFTypeRef v393;
  unint64_t v394;
  uint64_t v395;
  unsigned __int8 *v396;
  _QWORD *v397;
  CFTypeRef v398;
  unint64_t v399;
  char v400;
  uint64_t v401;
  unsigned __int16 v402;
  unint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unsigned __int8 *v408;
  _QWORD *v409;
  CFTypeRef v410;
  unint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  unint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  unint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  WTF::StringImpl *v429;
  char v430;
  IPC::Encoder *v431;
  CFTypeRef v432;
  WTF::StringImpl *v433;
  const char **v434;
  const char **v435;
  const char **v436;
  const char **v437;
  unint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  unsigned __int16 v441;
  char v442;
  unsigned __int8 *v443;
  _QWORD *v444;
  CFTypeRef v445;
  unint64_t v446;
  _QWORD *v447;
  uint64_t v448;
  unint64_t v449;
  char v450;
  uint64_t v451;
  unint64_t v452;
  char v453;
  uint64_t v454;
  unint64_t v455;
  char v456;
  unint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unsigned __int8 *v462;
  _QWORD *v463;
  CFTypeRef v464;
  unint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  unint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unsigned __int8 *v474;
  _QWORD *v475;
  CFTypeRef v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  unint64_t v480;
  char v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unsigned __int8 *v486;
  unsigned int v487;
  unsigned __int8 *v488;
  CFTypeRef v489;
  unsigned __int8 *v490;
  _QWORD *v491;
  CFTypeRef v492;
  unint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  unint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  char v509;
  unsigned __int8 *v510;
  WTF::StringImpl *v511;
  WTF::StringImpl *v512;
  int v513;
  unsigned __int16 v514;
  unint64_t v515;
  char v516;
  unsigned __int8 *v517;
  unint64_t v518;
  char v519;
  const void *v520;
  char v521;
  unsigned __int16 v522;
  unint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  unsigned __int16 v526;
  unint64_t v527;
  _QWORD *v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  WTF::StringImpl *v535;
  unint64_t v536;
  char v537;
  unsigned __int8 *v538;
  WTF::StringImpl *v539;
  int v540;
  int v541;
  unint64_t v542;
  char v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  int *v548;
  uint64_t v549;
  int v550;
  unsigned __int8 *v551;
  _QWORD *v552;
  CFTypeRef v553;
  unint64_t v554;
  uint64_t v555;
  unsigned __int8 *v556;
  _QWORD *v557;
  CFTypeRef v558;
  unint64_t v559;
  uint64_t v560;
  unsigned __int8 *v561;
  _QWORD *v562;
  CFTypeRef v563;
  unint64_t v564;
  void *v565;
  unsigned __int8 *v566;
  WTF::StringImpl *v567;
  WTF::StringImpl *v568;
  unint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unsigned __int8 *v575;
  _QWORD *v576;
  CFTypeRef v577;
  void (*v578)(void);
  unint64_t v579;
  char v580;
  unsigned __int8 *v581;
  unint64_t v582;
  char *v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  int v588;
  const void *v589;
  int v590;
  WTF::StringImpl *v591;
  unint64_t v592;
  uint64_t v593;
  unsigned __int8 *v594;
  _QWORD *v595;
  CFTypeRef v596;
  unint64_t v597;
  char v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  unsigned __int16 v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  WTF::StringImpl *v606;
  unint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  WTF::RefCountedBase *v611;
  const void *v612;
  int v613;
  WTF *v614;
  char v615;
  unsigned __int8 *v616;
  _QWORD *v617;
  CFTypeRef v618;
  char v619;
  unsigned __int8 *v620;
  _QWORD *v621;
  CFTypeRef v622;
  char v623;
  unsigned __int8 *v624;
  _QWORD *v625;
  CFTypeRef v626;
  WTF::StringImpl *v627;
  unint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  uint64_t v635;
  const void *v636;
  char v637;
  unsigned __int8 *v638;
  _QWORD *v639;
  CFTypeRef v640;
  WTF::StringImpl *v641;
  WTF::StringImpl *v642;
  unint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  WTF::StringImpl *v646;
  WTF::StringImpl *v647;
  unint64_t v648;
  _QWORD *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  WTF::StringImpl *v653;
  unint64_t v654;
  uint64_t v655;
  unsigned __int8 *v656;
  _QWORD *v657;
  CFTypeRef v658;
  int v659;
  const void *v660;
  unint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  char v669;
  unsigned __int8 *v670;
  unint64_t v671;
  uint64_t v672;
  unint64_t v673;
  unsigned __int8 *v674;
  unsigned int v675;
  BOOL v676;
  int v677;
  unint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  _QWORD *v683;
  uint64_t v684;
  uint64_t v685;
  WTF::StringImpl *v686;
  WTF::StringImpl *v687;
  WTF::StringImpl *v688;
  WTF::StringImpl *v689;
  const void *v690;
  WTF::StringImpl *v691;
  unint64_t v692;
  char v693;
  unsigned __int8 *v694;
  WTF::StringImpl *v695;
  char v696;
  unint64_t v697;
  unint64_t v698;
  unsigned __int8 *v699;
  unsigned int v700;
  WTF::StringImpl *v701;
  __int128 v702;
  unint64_t v703;
  char v704;
  unsigned __int8 *v705;
  unint64_t v706;
  _QWORD *v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  char v711;
  uint64_t v712;
  WTF::StringImpl *v713;
  char v714;
  unint64_t v715;
  uint64_t v716;
  unsigned __int8 *v717;
  _QWORD *v718;
  CFTypeRef v719;
  unsigned __int8 *v720;
  uint64_t v721;
  unsigned __int8 *v722;
  _QWORD *v723;
  CFTypeRef v724;
  unint64_t v725;
  _QWORD *v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  unsigned __int8 *v730;
  _QWORD *v731;
  CFTypeRef v732;
  unint64_t v733;
  uint64_t v734;
  unsigned __int8 *v735;
  _QWORD *v736;
  CFTypeRef v737;
  unsigned __int16 v738;
  unsigned __int8 v739;
  unint64_t v740;
  char v741;
  const void *v742;
  unint64_t v743;
  void *v744;
  unsigned __int8 *v745;
  void *v746;
  WTF::StringImpl *v747;
  uint64_t v748;
  unint64_t v749;
  char v750;
  unsigned __int8 *v751;
  unint64_t v752;
  char v753;
  const void *v754;
  uint64_t v755;
  unint64_t v756;
  _QWORD *v757;
  uint64_t v758;
  unint64_t v759;
  _QWORD *v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  unint64_t v764;
  _QWORD *v765;
  uint64_t v766;
  uint64_t v767;
  void *v768;
  void *v769;
  void *v770;
  uint64_t v771;
  WTF::StringImpl *v772;
  unint64_t v773;
  _QWORD *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  char v779;
  unint64_t v780;
  _QWORD *v781;
  uint64_t v782;
  uint64_t v783;
  WTF::StringImpl *v784;
  WTF::StringImpl *v785;
  unint64_t v786;
  _QWORD *v787;
  uint64_t v788;
  uint64_t v789;
  WTF::StringImpl *v790;
  WTF::StringImpl *v791;
  unsigned int v792;
  unsigned int v793;
  WTF::StringImpl *v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unsigned __int8 **v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  unsigned __int8 **v807;
  uint64_t v808;
  uint64_t v809;
  IPC::Decoder *v810;
  unsigned __int8 **v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  unsigned __int8 **v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  unsigned __int8 **v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  WTF::StringImpl *v844;
  WTF::StringImpl *v845;
  WTF::StringImpl *v846;
  unint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  uint64_t v850;
  WTF::StringImpl *v851;
  WTF::StringImpl *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  _QWORD *v860;
  uint64_t v861;
  uint64_t v862;
  WTF::StringImpl *v863;
  WTF *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int v882;
  WTF::StringImpl *v883;
  WTF::StringImpl *v884;
  char v885;
  WTF::StringImpl *v886;
  uint64_t v887;
  char v888;
  _BYTE v889[24];
  _BYTE v890[32];
  __int128 v891;
  _BYTE v892[120];
  __int128 v893;
  __int128 v894;
  uint64_t v895;
  char v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  uint64_t v900;
  char v901;
  uint64_t v902;
  char v903;
  const char **v904;
  char v905;
  const char **v906;
  char v907;
  const char **v908;
  char v909;
  const char **v910;
  char v911;
  char v912;
  IPC::Encoder *v913;
  CFTypeRef cf;
  WTF::StringImpl *v915[2];
  _BYTE v916[64];
  char v917;
  char v918;
  __int128 v919;
  __int128 v920;
  uint64_t v921;
  int v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  uint64_t v926;
  char v927;
  uint64_t v928;
  char v929;
  const char **v930;
  char v931;
  const char **v932;
  char v933;
  const char **v934;
  char v935;
  const char **v936;
  char v937;
  char v938;
  _BYTE v939[24];
  __int128 v940;
  char v941;
  uint64_t v942;

  v8 = (uint64_t *)a3;
  v9 = a2;
  v11 = v939;
  v12 = &v913;
  v942 = *MEMORY[0x1E0C80C00];
  v13 = (WTF::StringImpl *)&v924;
  v14 = (unsigned int *)((char *)this + 120);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x160:
      IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_1079;
    case 0x162:
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>((uint64_t *)a3, &v913);
      v430 = v938;
      if (v938)
      {
        v431 = v913;
        v913 = 0;
        *(_QWORD *)v889 = v431;
        v432 = cf;
        cf = 0;
        *(_QWORD *)&v889[8] = v432;
        v433 = v915[0];
        v915[0] = 0;
        *(_QWORD *)&v889[16] = v433;
        WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)&v890[8], (uint64_t)v916);
        LOBYTE(v904) = 0;
        v905 = 0;
        if (v931)
        {
          v434 = v930;
          v930 = 0;
          v904 = v434;
          v905 = 1;
        }
        LOBYTE(v906) = 0;
        v907 = 0;
        if (v933)
        {
          v435 = v932;
          v932 = 0;
          v906 = v435;
          v907 = 1;
        }
        LOBYTE(v908) = 0;
        v909 = 0;
        if (v935)
        {
          v436 = v934;
          v934 = 0;
          v908 = v436;
          v909 = 1;
        }
        LOBYTE(v910) = 0;
        v911 = 0;
        v430 = 1;
        if (v937)
        {
          v437 = v936;
          v936 = 0;
          v910 = v437;
          v911 = 1;
        }
      }
      else
      {
        v889[0] = 0;
      }
      v912 = v430;
      std::__optional_destruct_base<WebKit::WebsiteDataStoreParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v913, v429);
      if (v912
        || (a2 = (unsigned __int8 **)*v8, a3 = (IPC::Decoder *)v8[1], *v8 = 0, v8[1] = 0, (v805 = v8[3]) != 0)
        && a3
        && ((*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v805 + 16))(v805, a2), v912))
      {
        WebKit::NetworkProcess::addWebsiteDataStore((uint64_t)this, (uint64_t)v889);
        if (v912)
        {
          if (v911)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v910);
          if (v909)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v908);
          if (v907)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v906);
          if (v905)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v904);
          WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&v890[8], (WTF::StringImpl *)a2);
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v889[16]);
          v614 = *(WTF **)v889;
          if (*(_QWORD *)v889)
          {
            *(_QWORD *)v889 = 0;
            *(_DWORD *)&v889[8] = 0;
            WTF::fastFree(v614, a2);
          }
        }
      }
      goto LABEL_1079;
    case 0x163:
      v306 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v307
        && (v308 = (unsigned __int8 *)v306, IPC::Decoder::decode<WebCore::CertificateInfo>(v8, (uint64_t)v889), v889[8]))
      {
        v913 = (IPC::Encoder *)v308;
        cf = *(CFTypeRef *)v889;
        LOBYTE(v915[0]) = 1;
        *(_QWORD *)v889 = v308;
        v309 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, v889);
        if (!v309
          || ((*(void (**)(_QWORD, CFTypeRef *))(**(_QWORD **)(v309 + 152) + 152))(*(_QWORD *)(v309 + 152), &cf), LOBYTE(v915[0])))
        {
          v310 = cf;
          cf = 0;
          if (v310)
            CFRelease(v310);
        }
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x165:
      WebKit::DownloadManager::applicationDidEnterBackground((WebKit::NetworkProcess *)((char *)this + 152));
      goto LABEL_1079;
    case 0x166:
      WebKit::DownloadManager::applicationWillEnterForeground((WebKit::NetworkProcess *)((char *)this + 152));
      goto LABEL_1079;
    case 0x167:
      v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v27
        && (v28 = v26,
            v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
            v30))
      {
        v31 = v29;
        v32 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v32;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v33 = off_1E34B0F28;
          v33[1] = v913;
          v34 = cf;
          cf = 0;
          v33[2] = v34;
          *(_QWORD *)v889 = v33;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::cancelDataTask((uint64_t)this, v28, v31, (uint64_t *)v889);
          goto LABEL_580;
        }
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x168:
      v248 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v249)
      {
        v250 = v248;
        v251 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v251;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v252 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v252 = off_1E34B0ED8;
          v252[1] = v913;
          v253 = cf;
          cf = 0;
          v252[2] = v253;
          *(_QWORD *)v889 = v252;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::cancelDownload((uint64_t)this, v250, (uint64_t *)v889);
          goto LABEL_580;
        }
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x169:
      v72 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v73 = v72;
        v74 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v74;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v75 = off_1E34B1C98;
          v75[1] = v913;
          v76 = cf;
          cf = 0;
          v75[2] = v76;
          *(_QWORD *)v889 = v75;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::clearAppBoundSession((uint64_t)this, v73, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x16C:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
      {
        v457 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)a2)
          goto LABEL_797;
        *(_QWORD *)v889 = v457;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v458 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v458 = off_1E34B0FA0;
        v458[1] = *(_QWORD *)v889;
        v459 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v458[2] = v459;
        *(_QWORD *)v939 = v458;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::clearPrevalentResource((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
        goto LABEL_484;
      }
      goto LABEL_1079;
    case 0x16D:
      v460 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v461 = v460;
        v462 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v462;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v463 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v463 = off_1E34B19F0;
          v463[1] = v913;
          v464 = cf;
          cf = 0;
          v463[2] = v464;
          *(_QWORD *)v889 = v463;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::clearPrivateClickMeasurement((uint64_t)this, v461, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x16F:
      v232 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v913 = (IPC::Encoder *)v232;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
        v233 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v233 = off_1E34B1CC0;
        v233[1] = v913;
        v234 = cf;
        cf = 0;
        v233[2] = v234;
        *(_QWORD *)v889 = v233;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
        WebKit::NetworkProcess::clearServiceWorkerEntitlementOverride((uint64_t)this, (uint64_t *)v889);
        goto LABEL_683;
      }
      goto LABEL_1079;
    case 0x170:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
      {
        v504 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)a2)
          goto LABEL_797;
        *(_QWORD *)v889 = v504;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v505 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v505 = off_1E34B0FC8;
        v505[1] = *(_QWORD *)v889;
        v506 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v505[2] = v506;
        *(_QWORD *)v939 = v505;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::clearUserInteraction((uint64_t)this, (uint64_t)v913, (WTF::ASCIICaseInsensitiveHash **)&cf, (uint64_t *)v939);
LABEL_484:
        v507 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v507)
          (*(void (**)(uint64_t))(*(_QWORD *)v507 + 8))(v507);
        if (LOBYTE(v915[0]))
          goto LABEL_797;
      }
      goto LABEL_1079;
    case 0x172:
      v449 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v450
        && (v451 = v449,
            v452 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
            v453)
        && (v454 = v452,
            v455 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
            v456))
      {
        WebKit::NetworkProcess::cloneSessionStorageForWebPage((uint64_t)this, v451, v454, v455);
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_1144;
      }
      goto LABEL_1079;
    case 0x173:
      v122 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v123 = v122;
        v124 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v124;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v125 = off_1E34B17E8;
          v125[1] = v913;
          v126 = cf;
          cf = 0;
          v125[2] = v126;
          *(_QWORD *)v889 = v125;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::closeITPDatabase((uint64_t)this, v123, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x174:
      v143 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v144 = v143;
        v145 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v145;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v146 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v146 = off_1E34B1BA8;
          v146[1] = v913;
          v147 = cf;
          cf = 0;
          v146[2] = v147;
          *(_QWORD *)v889 = v146;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::closePCMDatabase((uint64_t)this, v144, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x176:
      IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      goto LABEL_1079;
    case 0x177:
      v515 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v516
        && (v517 = (unsigned __int8 *)v515,
            v518 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
            v519))
      {
        v520 = (const void *)v518;
        IPC::Decoder::decode<WebCore::ResourceRequest>(v8, (uint64_t)v889);
        if (BYTE8(v893) && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v8, (uint64_t)v939), v941))
        {
          *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<IPC::FormDataReference>(v8, &v886));
          v521 = v887;
          if ((_BYTE)v887)
          {
            if (!BYTE8(v893) || !v941)
              goto LABEL_1220;
            v913 = (IPC::Encoder *)v517;
            cf = v520;
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v915, (uint64_t)v889);
            LOBYTE(v920) = 0;
            LOBYTE(v923) = 0;
            if (BYTE8(v940))
            {
              v922 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v920, (uint64_t)v939);
              LOBYTE(v923) = 1;
            }
            *((_QWORD *)&v923 + 1) = v886;
            v521 = 1;
          }
          else
          {
            LOBYTE(v913) = 0;
          }
          LOBYTE(v924) = v521;
          if (v941 && BYTE8(v940) && (_DWORD)v940 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B0E40[v940])(&v886, v939);
        }
        else
        {
          LOBYTE(v913) = 0;
          LOBYTE(v924) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v889);
        if ((_BYTE)v924)
          goto LABEL_641;
      }
      else
      {
        LOBYTE(v913) = 0;
        LOBYTE(v924) = 0;
      }
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v796 = v8[3];
      if (!v796)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v796 + 16))(v796, a2);
      if (!(_BYTE)v924)
        goto LABEL_1079;
LABEL_641:
      v607 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v607;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v608 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v608 = off_1E34B0F00;
        v608[1] = *(_QWORD *)v889;
        v609 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v608[2] = v609;
        *(_QWORD *)v939 = v608;
        *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
        if (!(_BYTE)v924)
          goto LABEL_1220;
        WebKit::NetworkProcess::dataTaskWithRequest((uint64_t)this, (uint64_t)v913, (WTF::RefCountedBase *)cf, (uint64_t)v915, (uint64_t)&v920, (WTF::RefCountedBase **)&v923 + 1, (uint64_t)v939);
        v610 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v610)
          (*(void (**)(uint64_t))(*(_QWORD *)v610 + 8))(v610);
      }
      if ((_BYTE)v924)
      {
        v611 = (WTF::RefCountedBase *)*((_QWORD *)&v923 + 1);
        *((_QWORD *)&v923 + 1) = 0;
        if (v611)
          WTF::RefCounted<WebCore::FormData>::deref(v611);
        if ((_BYTE)v923)
        {
          if (v922 != -1)
            ((void (*)(_BYTE *, __int128 *))off_1E34B0E40[v922])(v889, &v920);
          v922 = -1;
        }
        v612 = (const void *)*((_QWORD *)&v919 + 1);
        *((_QWORD *)&v919 + 1) = 0;
        if (v612)
          CFRelease(v612);
        goto LABEL_654;
      }
      goto LABEL_1079;
    case 0x178:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[1]))
      {
        v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          *(_QWORD *)v889 = v22;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v23 = off_1E34B1798;
          v23[1] = *(_QWORD *)v889;
          v24 = *(_QWORD *)&v889[8];
          *(_QWORD *)&v889[8] = 0;
          v23[2] = v24;
          *(_QWORD *)v939 = v23;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
          *(_QWORD *)v889 = cf;
          WebKit::NetworkProcess::deleteCookiesForTesting(this, (uint64_t)v913, (unint64_t)v889, LOBYTE(v915[0]), (uint64_t *)v939);
          v25 = *(WTF::StringImpl **)v889;
          *(_QWORD *)v889 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v25 -= 2;
          }
          goto LABEL_675;
        }
        v535 = (WTF::StringImpl *)cf;
        if (cf)
          goto LABEL_1076;
      }
      goto LABEL_1079;
    case 0x179:
      v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v41
        && (v42 = v40,
            v43 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v8),
            (v43 & 0xFF00000000) != 0)
        && (v44 = v43, *(double *)&v45 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>(v8)), v46))
      {
        v47 = *(double *)&v45;
        v48 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v48;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v49 = off_1E34B0E28;
          v49[1] = v913;
          v50 = cf;
          cf = 0;
          v49[2] = v50;
          *(_QWORD *)v889 = v49;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::deleteWebsiteData((uint64_t)this, v42, v44, (uint64_t *)v889, v47);
          goto LABEL_580;
        }
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x17A:
      v127 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v128)
        goto LABEL_987;
      v129 = (unsigned __int8 *)v127;
      v130 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v8);
      if ((v130 & 0xFF00000000) == 0)
        goto LABEL_987;
      v132 = v130;
      IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v131, (uint64_t)&v883);
      if (!v885)
        goto LABEL_987;
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v133, (uint64_t)&v886);
      if (v888)
      {
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, a2, (uint64_t)v939);
        if (v939[16])
        {
          *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, a2, (uint64_t)v889));
          if (v889[16])
          {
            if (!v885 || !v888 || !v939[16])
              goto LABEL_1220;
            v913 = (IPC::Encoder *)v129;
            LODWORD(cf) = v132;
            v134 = v883;
            v883 = 0;
            v915[0] = v134;
            v135 = v884;
            v884 = 0;
            v915[1] = v135;
            v136 = v886;
            v886 = 0;
            *(_QWORD *)v916 = v136;
            v137 = v887;
            v887 = 0;
            *(_QWORD *)&v916[8] = v137;
            v138 = *(_QWORD *)v939;
            *(_QWORD *)v939 = 0;
            *(_QWORD *)&v916[16] = v138;
            v139 = *(_QWORD *)&v939[8];
            *(_QWORD *)&v939[8] = 0;
            *(_QWORD *)&v916[24] = v139;
            v140 = *(_QWORD *)v889;
            *(_QWORD *)v889 = 0;
            *(_QWORD *)&v916[32] = v140;
            v141 = *(_QWORD *)&v889[8];
            *(_QWORD *)&v889[8] = 0;
            *(_QWORD *)&v916[40] = v141;
            v142 = 1;
            v916[48] = 1;
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v889, a2);
          }
          else
          {
            v142 = 0;
            LOBYTE(v913) = 0;
            v916[48] = 0;
          }
          if (v939[16])
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v939, a2);
        }
        else
        {
          v142 = 0;
          LOBYTE(v913) = 0;
          v916[48] = 0;
        }
        if (v888)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v886, a2);
      }
      else
      {
        v142 = 0;
        LOBYTE(v913) = 0;
        v916[48] = 0;
      }
      if (v885)
        WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v883, a2);
      if (v142)
      {
        v764 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)a2)
          goto LABEL_986;
        *(_QWORD *)v889 = v764;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v765 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v765 = off_1E34B0E60;
        v765[1] = *(_QWORD *)v889;
        v766 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v765[2] = v766;
        *(_QWORD *)v939 = v765;
        *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
        if (!v916[48])
          goto LABEL_1220;
        WebKit::NetworkProcess::deleteWebsiteDataForOrigins((uint64_t)this, (uint64_t)v913, (int)cf, (uint64_t)v915, (uint64_t)v916, (uint64_t)&v916[16], (uint64_t)&v916[32], (uint64_t *)v939);
        v767 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v767)
          (*(void (**)(uint64_t))(*(_QWORD *)v767 + 8))(v767);
        if (v916[48])
        {
LABEL_986:
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v916[32], a2);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v916[16], v768);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v916, v769);
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v915, v770);
        }
      }
      else
      {
LABEL_987:
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x17B:
      v181 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v182 = v181;
        v183 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v183;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v184 = off_1E34B0DD8;
          v184[1] = v913;
          v185 = cf;
          cf = 0;
          v184[2] = v185;
          *(_QWORD *)v889 = v184;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::destroySession((uint64_t *)this, v182, (uint64_t *)v889);
          goto LABEL_580;
        }
      }
      goto LABEL_1079;
    case 0x17C:
      v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v58)
        goto LABEL_863;
      v59 = (unsigned __int8 *)v57;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v939);
      if (!v939[8])
        goto LABEL_863;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
      if (!v889[8])
      {
        v66 = 0;
        LOBYTE(v63) = 0;
        v67 = 0;
        LOBYTE(v913) = 0;
        v916[24] = 0;
        goto LABEL_877;
      }
      v60 = v8[1];
      a2 = (unsigned __int8 **)*v8;
      v61 = v8[2] - *v8;
      if (v60 <= v61)
      {
        v824 = 0;
        v825 = 0;
        *v8 = 0;
        v8[1] = 0;
        v826 = v8[3];
        if (v826)
        {
          if (v60)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v826 + 16))(v826);
            v825 = *v8;
            v824 = v8[1];
          }
          else
          {
            v824 = 0;
            v825 = 0;
          }
        }
      }
      else
      {
        v62 = (unsigned __int8 *)a2 + v61;
        v8[2] = (uint64_t)(v62 + 1);
        if (a2)
        {
          v63 = *v62;
          if ((v63 & 0xFFFFFFF9) == 0)
          {
            v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if (!(_BYTE)a2
              || (v9 = (unsigned __int8 **)v64,
                  v65 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
                  !(_BYTE)a2)
              || (v13 = (WTF::StringImpl *)v65,
                  *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v8)),
                  (unsigned __int16)v39 <= 0xFFu))
            {
LABEL_47:
              v66 = 0;
              LOBYTE(v63) = 0;
              v67 = 0;
              LOBYTE(v913) = 0;
              goto LABEL_48;
            }
            if (!v939[8] || !v889[8])
              goto LABEL_1220;
            v66 = v39;
            v690 = *(const void **)v939;
            *(_QWORD *)v939 = 0;
            v913 = (IPC::Encoder *)v59;
            cf = v690;
            v691 = *(WTF::StringImpl **)v889;
            *(_QWORD *)v889 = 0;
            v915[0] = v691;
            LOBYTE(v915[1]) = v63;
            *(_QWORD *)v916 = v9;
            *(_QWORD *)&v916[8] = v13;
            v67 = 1;
            v916[16] = v39;
LABEL_48:
            v916[24] = v67;
            if (v889[8])
            {
              v68 = *(WTF::StringImpl **)v889;
              *(_QWORD *)v889 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v68 -= 2;
              }
            }
LABEL_877:
            if (v939[8])
            {
              v688 = *(WTF::StringImpl **)v939;
              *(_QWORD *)v939 = 0;
              if (v688)
              {
                if (*(_DWORD *)v688 == 2)
                  WTF::StringImpl::destroy(v688, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v688 -= 2;
              }
            }
            if (!v67)
              goto LABEL_863;
            WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer(this, v913, (uint64_t)&cf, (uint64_t)v915, v63, (uint64_t)v9, (uint64_t)v13, v66 != 0);
            if (v916[24])
            {
              v689 = v915[0];
              v915[0] = 0;
              if (v689)
              {
                if (*(_DWORD *)v689 == 2)
                  WTF::StringImpl::destroy(v689, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v689 -= 2;
              }
              v535 = (WTF::StringImpl *)cf;
              cf = 0;
              if (v535)
                goto LABEL_1076;
            }
            goto LABEL_1079;
          }
LABEL_1154:
          *v8 = 0;
          v8[1] = 0;
          v828 = v8[3];
          if (v828 && v60)
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v828 + 16))(v828, a2);
          goto LABEL_47;
        }
        v824 = v60;
        v825 = 0;
      }
      v60 = 0;
      a2 = 0;
      *v8 = 0;
      v8[1] = 0;
      v827 = v8[3];
      if (v827)
      {
        if (v824)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v827 + 16))(v827, v825, v824);
          a2 = (unsigned __int8 **)*v8;
          v60 = v8[1];
        }
        else
        {
          v60 = 0;
          a2 = 0;
        }
      }
      goto LABEL_1154;
    case 0x17D:
      v82 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v83)
      {
        v84 = (unsigned __int8 *)v82;
        IPC::Decoder::decode<WebCore::ClientOrigin>(v8, v889);
        if (BYTE8(v891)
          && (v85 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8),
              v86))
        {
          v87 = v85;
          *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<std::optional<unsigned long long>>(v8, (uint64_t)v939));
          v88 = v939[16];
          if (v939[16])
          {
            if (!BYTE8(v891))
              goto LABEL_1220;
            v913 = (IPC::Encoder *)v84;
            LOBYTE(cf) = 0;
            *(_DWORD *)v916 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v889);
            v916[8] = 0;
            *(_DWORD *)&v916[32] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v916[8], (uint64_t)&v890[8]);
            *(_QWORD *)&v916[40] = v87;
            *(_OWORD *)&v916[48] = *(_OWORD *)v939;
            v88 = 1;
          }
          else
          {
            LOBYTE(v913) = 0;
          }
          v917 = v88;
        }
        else
        {
          LOBYTE(v913) = 0;
          v917 = 0;
        }
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v889);
        if (v917)
          goto LABEL_765;
      }
      else
      {
        LOBYTE(v913) = 0;
        v917 = 0;
      }
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v802 = v8[3];
      if (!v802)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v802 + 16))(v802, a2);
      if (!v917)
        goto LABEL_1079;
LABEL_765:
      WebKit::NetworkProcess::didIncreaseQuota((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, *(uint64_t *)&v916[40], *(uint64_t *)&v916[48], v916[56]);
      if (v917)
      {
        if (*(_DWORD *)&v916[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[*(unsigned int *)&v916[32]])(v889, &v916[8]);
        *(_DWORD *)&v916[32] = -1;
        if (*(_DWORD *)v916 != -1)
          goto LABEL_769;
      }
      goto LABEL_1079;
    case 0x17E:
      WebKit::disableServiceWorkerEntitlementTestingOverride = 1;
      goto LABEL_1079;
    case 0x17F:
      v542 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v543)
        goto LABEL_1138;
      v544 = v8[1];
      v545 = *v8;
      v546 = ((v8[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v8;
      if (v544 >= v546 && v544 - v546 > 3)
      {
        v548 = (int *)(v545 + v546);
        v8[2] = (uint64_t)(v548 + 1);
        if (v545)
        {
          v549 = v542;
          v550 = *v548;
          v551 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
          if ((_BYTE)a2)
          {
            v913 = (IPC::Encoder *)v551;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
            v552 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v552 = off_1E34B12C0;
            v552[1] = v913;
            v553 = cf;
            cf = 0;
            v552[2] = v553;
            *(_QWORD *)v889 = v552;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
            WebKit::NetworkProcess::domainIDExistsInDatabase((uint64_t)this, v549, v550, (uint64_t *)v889);
            goto LABEL_683;
          }
          goto LABEL_1079;
        }
        v813 = v544;
        v814 = 0;
      }
      else
      {
        v813 = 0;
        v814 = 0;
        *v8 = 0;
        v8[1] = 0;
        v815 = v8[3];
        if (v815)
        {
          if (v544)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v815 + 16))(v815, v545, v544);
            v814 = *v8;
            v813 = v8[1];
          }
          else
          {
            v813 = 0;
            v814 = 0;
          }
        }
      }
      *v8 = 0;
      v8[1] = 0;
      v816 = v8[3];
      if (v816 && v813)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v816 + 16))(v816, v814);
LABEL_1138:
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v227 = v8[3];
      if (v227)
        goto LABEL_1144;
      goto LABEL_1079;
    case 0x180:
      v113 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v114
        && (v115 = (unsigned __int8 *)v113,
            v116 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8),
            v117))
      {
        v118 = (const void *)v116;
        IPC::Decoder::decode<WebCore::ResourceRequest>(v8, (uint64_t)v889);
        if (BYTE8(v893) && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v8, (uint64_t)v939), v941))
        {
          v119 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v8);
          if ((v119 & 0xFF0000) != 0)
          {
            v120 = v119;
            *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::String>(v8, &v886));
            v121 = v887;
            if ((_BYTE)v887)
            {
              if (!BYTE8(v893) || !v941)
                goto LABEL_1220;
              v913 = (IPC::Encoder *)v115;
              cf = v118;
              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v915, (uint64_t)v889);
              LOBYTE(v920) = 0;
              LOBYTE(v923) = 0;
              if (BYTE8(v940))
              {
                v922 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v920, (uint64_t)v939);
                LOBYTE(v923) = 1;
              }
              WORD4(v923) = v120;
              *(_QWORD *)&v924 = v886;
              v121 = 1;
            }
            else
            {
              LOBYTE(v913) = 0;
            }
            BYTE8(v924) = v121;
          }
          else
          {
            LOBYTE(v913) = 0;
            BYTE8(v924) = 0;
          }
          if (v941 && BYTE8(v940) && (_DWORD)v940 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B0E40[v940])(&v886, v939);
        }
        else
        {
          LOBYTE(v913) = 0;
          BYTE8(v924) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v889);
        if (BYTE8(v924))
          goto LABEL_635;
      }
      else
      {
        LOBYTE(v913) = 0;
        BYTE8(v924) = 0;
      }
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v795 = v8[3];
      if (!v795)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v795 + 16))(v795, a2);
      if (!BYTE8(v924))
        goto LABEL_1079;
LABEL_635:
      v889[0] = 0;
      v889[16] = 0;
      WebKit::DownloadManager::startDownload((uint64_t *)this + 19, (uint64_t)v913, (uint64_t)cf, (CFTypeRef *)v915, (WebCore::SecurityOriginData *)&v920, SWORD4(v923), (WTF::StringImpl *)&v924, 0, (__int128 *)v889, 0, 0, 0, 0);
      if (BYTE8(v924))
      {
        v606 = (WTF::StringImpl *)v924;
        *(_QWORD *)&v924 = 0;
        if (v606)
        {
          if (*(_DWORD *)v606 == 2)
            WTF::StringImpl::destroy(v606, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v606 -= 2;
        }
        if ((_BYTE)v923)
        {
          if (v922 != -1)
            ((void (*)(_BYTE *, __int128 *))off_1E34B0E40[v922])(v889, &v920);
          v922 = -1;
        }
        v636 = (const void *)*((_QWORD *)&v919 + 1);
        *((_QWORD *)&v919 + 1) = 0;
        if (v636)
          CFRelease(v636);
LABEL_654:
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v915);
      }
      goto LABEL_1079;
    case 0x181:
      v559 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v560 = v559;
        v561 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v561;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v562 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v562 = off_1E34B19C8;
          v562[1] = v913;
          v563 = cf;
          cf = 0;
          v562[2] = v563;
          *(_QWORD *)v889 = v562;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::dumpPrivateClickMeasurement((uint64_t)this, v560, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x182:
      v573 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v574 = v573;
        v575 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v575;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v576 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v576 = off_1E34B0FF0;
          v576[1] = v913;
          v577 = cf;
          cf = 0;
          v576[2] = v577;
          *(_QWORD *)v889 = v576;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::dumpResourceLoadStatistics((uint64_t)this, v574, (uint64_t *)v889);
          goto LABEL_580;
        }
      }
      goto LABEL_1079;
    case 0x183:
      v597 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v598
        && (v599 = v597,
            v600 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v8),
            (v600 & 0xFF00000000) != 0)
        && (v601 = v600, v602 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>(v8), v602 > 0xFFu))
      {
        v637 = v602;
        v638 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v638;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v639 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v639 = off_1E34B0E00;
          v639[1] = v913;
          v640 = cf;
          cf = 0;
          v639[2] = v640;
          *(_QWORD *)v889 = v639;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::fetchWebsiteData((uint64_t)this, v599, v601, v637, (uint64_t *)v889);
          goto LABEL_580;
        }
      }
      else
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (v227)
          goto LABEL_995;
      }
      goto LABEL_1079;
    case 0x184:
      v333 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v334 = v333;
        v335 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v335;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v336 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v336 = off_1E34B0F50;
          v336[1] = v913;
          v337 = cf;
          cf = 0;
          v336[2] = v337;
          *(_QWORD *)v889 = v336;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::flushCookies(this, v334, v889);
LABEL_580:
          v530 = *(_QWORD *)v889;
          *(_QWORD *)v889 = 0;
          if (v530)
            goto LABEL_581;
        }
      }
      goto LABEL_1079;
    case 0x186:
      v592 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v593 = v592;
        v594 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v594;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v595 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v595 = off_1E34B1220;
          v595[1] = v913;
          v596 = cf;
          cf = 0;
          v595[2] = v596;
          *(_QWORD *)v889 = v595;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::getAllStorageAccessEntries((uint64_t)this, v593, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x189:
      v77 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        v78 = v77;
        v79 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          v913 = (IPC::Encoder *)v79;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
          v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v80 = off_1E34B1428;
          v80[1] = v913;
          v81 = cf;
          cf = 0;
          v80[2] = v81;
          *(_QWORD *)v889 = v80;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
          WebKit::NetworkProcess::getResourceLoadStatisticsDataSummary((uint64_t)this, v78, (uint64_t *)v889);
          goto LABEL_683;
        }
      }
      goto LABEL_1079;
    case 0x18A:
      v564 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v565)
        goto LABEL_863;
      v566 = (unsigned __int8 *)v564;
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v565, (uint64_t)v889);
      if (!v889[16])
        goto LABEL_863;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v939));
      if (v939[8])
      {
        if (!v889[16])
          goto LABEL_1220;
        v913 = (IPC::Encoder *)v566;
        cf = *(CFTypeRef *)v889;
        v567 = *(WTF::StringImpl **)&v889[8];
        *(_QWORD *)v889 = 0;
        *(_QWORD *)&v889[8] = 0;
        v915[0] = v567;
        v568 = *(WTF::StringImpl **)v939;
        v915[1] = *(WTF::StringImpl **)v939;
        v916[0] = 1;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v889, a2);
        v569 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          *(_QWORD *)v889 = v569;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
          v570 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v570 = off_1E34B1770;
          v570[1] = *(_QWORD *)v889;
          v571 = *(_QWORD *)&v889[8];
          *(_QWORD *)&v889[8] = 0;
          v570[2] = v571;
          *(_QWORD *)v939 = v570;
          *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
          if (!v916[0])
            goto LABEL_1220;
          WebKit::NetworkProcess::grantStorageAccessForTesting((uint64_t)this, (uint64_t)v913, (uint64_t *)&cf, &v915[1], (uint64_t *)v939);
          v572 = *(_QWORD *)v939;
          *(_QWORD *)v939 = 0;
          if (v572)
            (*(void (**)(uint64_t))(*(_QWORD *)v572 + 8))(v572);
          if (!v916[0])
            goto LABEL_1079;
          v568 = v915[1];
        }
        v915[1] = 0;
        if (v568)
        {
          if (*(_DWORD *)v568 == 2)
            WTF::StringImpl::destroy(v568, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v568 -= 2;
        }
        goto LABEL_893;
      }
      if (v889[16])
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v889, a2);
LABEL_863:
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v227 = v8[3];
      if (!v227 || !a3)
        goto LABEL_1079;
      goto LABEL_1145;
    case 0x18B:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v344 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v344;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v345 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v345 = off_1E34B11A8;
      v345[1] = *(_QWORD *)v889;
      v346 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v345[2] = v346;
      *(_QWORD *)v939 = v345;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::hadUserInteraction((uint64_t)this, (uint64_t)v913, (WTF::ASCIICaseInsensitiveHash **)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x18C:
      v94 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v95 = v94;
      v96 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v96;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v97 = off_1E34B1C70;
      v97[1] = v913;
      v98 = cf;
      cf = 0;
      v97[2] = v98;
      *(_QWORD *)v889 = v97;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::hasAppBoundSession((uint64_t)this, v95, (uint64_t *)v889);
      goto LABEL_683;
    case 0x18D:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v329 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1075;
      *(_QWORD *)v889 = v329;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v330 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v330 = off_1E34B17C0;
      v330[1] = *(_QWORD *)v889;
      v331 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v330[2] = v331;
      *(_QWORD *)v939 = v330;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::hasIsolatedSession((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_314;
    case 0x18E:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v54 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v55 = off_1E34B11F8;
      v55[1] = *(_QWORD *)v889;
      v56 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v55[2] = v56;
      *(_QWORD *)v939 = v55;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::hasLocalStorage((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x190:
      IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_1079;
    case 0x191:
      v579 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v580
        || (v581 = (unsigned __int8 *)v579, IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889),
                                            !v889[8]))
      {
        v590 = 0;
        LOBYTE(v913) = 0;
        v916[0] = 0;
        goto LABEL_629;
      }
      a3 = (IPC::Decoder *)v8[1];
      a2 = (unsigned __int8 **)*v8;
      v582 = ((v8[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v8;
      if ((unint64_t)a3 < v582 || (unint64_t)a3 - v582 <= 7)
      {
        v810 = 0;
        v811 = 0;
        *v8 = 0;
        v8[1] = 0;
        v822 = v8[3];
        if (!v822)
          goto LABEL_1150;
        if (!a3)
        {
LABEL_1309:
          v810 = 0;
          v811 = 0;
LABEL_1150:
          *v8 = 0;
          v8[1] = 0;
          v823 = v8[3];
          if (v823 && v810)
            (*(void (**)(uint64_t, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)v823 + 16))(v823, v811, v810);
          v590 = 0;
          LOBYTE(v913) = 0;
          v588 = 1;
LABEL_599:
          v916[0] = v590;
          if (v889[8])
          {
            v591 = *(WTF::StringImpl **)v889;
            *(_QWORD *)v889 = 0;
            if (v591)
            {
              if (*(_DWORD *)v591 == 2)
                WTF::StringImpl::destroy(v591, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v591 -= 2;
            }
          }
          if (!v588)
          {
LABEL_856:
            if (!v590)
              goto LABEL_1079;
            v682 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if ((_BYTE)a2)
            {
              *(_QWORD *)v889 = v682;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
              v683 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v683 = off_1E34B1108;
              v683[1] = *(_QWORD *)v889;
              v684 = *(_QWORD *)&v889[8];
              *(_QWORD *)&v889[8] = 0;
              v683[2] = v684;
              *(_QWORD *)v939 = v683;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
              WebKit::NetworkProcess::insertExpiredStatisticForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (int)v13, v11 != 0, v3, v4, (uint64_t *)v939);
              v685 = *(_QWORD *)v939;
              *(_QWORD *)v939 = 0;
              if (v685)
                (*(void (**)(uint64_t))(*(_QWORD *)v685 + 8))(v685);
              if (!v916[0])
                goto LABEL_1079;
            }
LABEL_532:
            v535 = (WTF::StringImpl *)cf;
            cf = 0;
            if (!v535)
              goto LABEL_1079;
LABEL_1076:
            v763 = *(_DWORD *)v535 - 2;
            if (*(_DWORD *)v535 == 2)
LABEL_1078:
              WTF::StringImpl::destroy(v535, (WTF::StringImpl *)a2);
            else
LABEL_1077:
              *(_DWORD *)v535 = v763;
            goto LABEL_1079;
          }
LABEL_629:
          a2 = (unsigned __int8 **)*v8;
          a3 = (IPC::Decoder *)v8[1];
          *v8 = 0;
          v8[1] = 0;
          v605 = v8[3];
          if (v605 && a3)
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v605 + 16))(v605, a2);
          goto LABEL_856;
        }
LABEL_1264:
        (*(void (**)(uint64_t))(*(_QWORD *)v822 + 16))(v822);
        v811 = (unsigned __int8 **)*v8;
        v810 = (IPC::Decoder *)v8[1];
        goto LABEL_1150;
      }
      v584 = (char *)a2 + v582;
      v8[2] = (uint64_t)(v584 + 8);
      if (!a2)
        goto LABEL_1298;
      if ((unint64_t)a3 <= v584 + 8 - (char *)a2)
      {
        v810 = 0;
        v811 = 0;
        *v8 = 0;
        v8[1] = 0;
        v812 = v8[3];
        if (!v812)
          goto LABEL_1150;
        if (!a3)
          goto LABEL_1309;
        goto LABEL_1262;
      }
      v13 = *(WTF::StringImpl **)v584;
      v8[2] = (uint64_t)(v584 + 9);
      v585 = v584[8];
      if (v585 >= 2)
        goto LABEL_1298;
      LOBYTE(v11) = v585 != 0;
      if ((unint64_t)a3 > v584 + 9 - (char *)a2)
      {
        v8[2] = (uint64_t)(v584 + 10);
        v586 = v584[9];
        if (v586 >= 2)
        {
LABEL_1298:
          v810 = a3;
          v811 = a2;
          goto LABEL_1150;
        }
        v3 = v586 != 0;
        if ((unint64_t)a3 > v584 + 10 - (char *)a2)
        {
          v8[2] = (uint64_t)(v584 + 11);
          v587 = v584[10];
          if (v587 < 2)
          {
            v588 = 0;
            v589 = *(const void **)v889;
            v4 = v587 != 0;
            *(_QWORD *)v889 = 0;
            v913 = (IPC::Encoder *)v581;
            cf = v589;
            v915[0] = v13;
            LOBYTE(v915[1]) = (_BYTE)v11;
            BYTE1(v915[1]) = v586 != 0;
            BYTE2(v915[1]) = v587 != 0;
            v590 = 1;
            goto LABEL_599;
          }
          goto LABEL_1298;
        }
      }
      v810 = 0;
      v811 = 0;
      *v8 = 0;
      v8[1] = 0;
      v812 = v8[3];
      if (!v812)
        goto LABEL_1150;
LABEL_1262:
      (*(void (**)(uint64_t))(*(_QWORD *)v812 + 16))(v812);
      v810 = 0;
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      v822 = v8[3];
      *v8 = 0;
      v8[1] = 0;
      v811 = 0;
      if (!v822 || !a3)
        goto LABEL_1150;
      goto LABEL_1264;
    case 0x192:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v107 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v107;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v108 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v108 = off_1E34B1040;
      v108[1] = *(_QWORD *)v889;
      v109 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v108[2] = v109;
      *(_QWORD *)v939 = v108;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::isGrandfathered((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x193:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v531 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v531;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v532 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v532 = off_1E34B1068;
      v532[1] = *(_QWORD *)v889;
      v533 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v532[2] = v533;
      *(_QWORD *)v939 = v532;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::isPrevalentResource((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x194:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v446 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v446;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v447 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v447 = off_1E34B1248;
      v447[1] = *(_QWORD *)v889;
      v448 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v447[2] = v448;
      *(_QWORD *)v939 = v447;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::isRegisteredAsRedirectingTo((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x195:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v438 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v438;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v439 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v439 = off_1E34B1270;
      v439[1] = *(_QWORD *)v889;
      v440 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v439[2] = v440;
      *(_QWORD *)v939 = v439;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::isRegisteredAsSubFrameUnder((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x196:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v37 = off_1E34B1298;
      v37[1] = *(_QWORD *)v889;
      v38 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v37[2] = v38;
      *(_QWORD *)v939 = v37;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::isRegisteredAsSubresourceUnder((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x197:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v51 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v51;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v52 = off_1E34B11D0;
      v52[1] = *(_QWORD *)v889;
      v53 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v52[2] = v53;
      *(_QWORD *)v939 = v52;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x198:
      v240 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v241 = v240;
      v242 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v242;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v243 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v243 = off_1E34B1180;
      v243[1] = v913;
      v244 = cf;
      cf = 0;
      v243[2] = v244;
      *(_QWORD *)v889 = v243;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::isResourceLoadStatisticsEphemeral((uint64_t)this, v241, (uint64_t *)v889);
      goto LABEL_683;
    case 0x199:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v254 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v254;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v255 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v255 = off_1E34B1090;
      v255[1] = *(_QWORD *)v889;
      v256 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v255[2] = v256;
      *(_QWORD *)v939 = v255;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::isVeryPrevalentResource((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x19A:
      v153 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v154)
        goto LABEL_998;
      v155 = (unsigned __int8 *)v153;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)&v886);
      if (!(_BYTE)v887)
        goto LABEL_998;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v939);
      if (!v939[8])
      {
        v167 = 0;
        LOBYTE(v913) = 0;
        v916[24] = 0;
        goto LABEL_733;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
      if (!v889[8])
      {
        v167 = 0;
        LOBYTE(v913) = 0;
        v916[24] = 0;
        goto LABEL_728;
      }
      v156 = v8[1];
      a2 = (unsigned __int8 **)*v8;
      v157 = v8[2] - *v8;
      if (v156 <= v157)
        goto LABEL_1099;
      v158 = (unsigned __int8 *)a2 + v157;
      v8[2] = (uint64_t)(v158 + 1);
      if (!a2)
        goto LABEL_1297;
      v159 = *v158;
      if (v159 >= 2)
        goto LABEL_1101;
      LOBYTE(v13) = v159 != 0;
      if (v156 <= v158 + 1 - (unsigned __int8 *)a2)
      {
        v806 = 0;
        v807 = 0;
        *v8 = 0;
        v8[1] = 0;
        v808 = v8[3];
        if (v808)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v808 + 16))(v808);
          v806 = 0;
          a2 = (unsigned __int8 **)*v8;
          v873 = v8[1];
          v874 = v8[3];
          *v8 = 0;
          v8[1] = 0;
          v807 = 0;
          if (v874)
          {
            if (v873)
            {
              (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v874 + 16))(v874, a2);
              v807 = (unsigned __int8 **)*v8;
              v806 = v8[1];
            }
          }
        }
      }
      else
      {
        v8[2] = (uint64_t)(v158 + 2);
        v160 = v158[1];
        if (v160 < 2)
        {
          LOBYTE(v12) = v160 != 0;
          *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>(v8));
          if (!(_BYTE)a2)
          {
LABEL_1133:
            v167 = 0;
            LOBYTE(v913) = 0;
            goto LABEL_143;
          }
          v156 = v8[1];
          a2 = (unsigned __int8 **)*v8;
          v161 = v8[2] - *v8;
          if (v156 <= v161)
          {
LABEL_1099:
            v797 = 0;
            v798 = 0;
            *v8 = 0;
            v8[1] = 0;
            v799 = v8[3];
            if (v799)
            {
              if (v156)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v799 + 16))(v799);
                v798 = (unsigned __int8 **)*v8;
                v797 = v8[1];
              }
              else
              {
                v797 = 0;
                v798 = 0;
              }
            }
          }
          else
          {
            v162 = (unsigned __int8 *)a2 + v161;
            v8[2] = (uint64_t)(v162 + 1);
            if (a2)
            {
              v163 = *v162;
              if (v163 < 2)
              {
                LOBYTE(v11) = v163 != 0;
                if (!(_BYTE)v887 || !v939[8] || !v889[8])
                  goto LABEL_1220;
                v164 = v886;
                v886 = 0;
                v913 = (IPC::Encoder *)v155;
                cf = v164;
                v165 = *(WTF::StringImpl **)v939;
                *(_QWORD *)v939 = 0;
                v166 = *(WTF::StringImpl **)v889;
                *(_QWORD *)v889 = 0;
                v915[0] = v165;
                v915[1] = v166;
                v916[0] = (_BYTE)v13;
                v916[1] = (_BYTE)v12;
                *(_QWORD *)&v916[8] = v39;
                v6 = *(double *)&v39;
                v167 = 1;
                v916[16] = (_BYTE)v11;
LABEL_143:
                v916[24] = v167;
                if (v889[8])
                {
                  v168 = *(WTF::StringImpl **)v889;
                  *(_QWORD *)v889 = 0;
                  if (v168)
                  {
                    if (*(_DWORD *)v168 == 2)
                      WTF::StringImpl::destroy(v168, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v168 -= 2;
                  }
                }
LABEL_728:
                if (v939[8])
                {
                  v641 = *(WTF::StringImpl **)v939;
                  *(_QWORD *)v939 = 0;
                  if (v641)
                  {
                    if (*(_DWORD *)v641 == 2)
                      WTF::StringImpl::destroy(v641, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v641 -= 2;
                  }
                }
LABEL_733:
                if ((_BYTE)v887)
                {
                  v642 = v886;
                  v886 = 0;
                  if (v642)
                  {
                    if (*(_DWORD *)v642 == 2)
                      WTF::StringImpl::destroy(v642, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v642 -= 2;
                  }
                }
                if (v167)
                {
                  WebKit::NetworkProcess::logFrameNavigation((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t)&v915[1], v13 != 0, v12 != 0, v11 != 0, v6);
                  if (v916[24])
                    goto LABEL_1193;
                  goto LABEL_1079;
                }
LABEL_998:
                a2 = (unsigned __int8 **)*v8;
                a3 = (IPC::Decoder *)v8[1];
                *v8 = 0;
                v8[1] = 0;
                v227 = v8[3];
                if (!v227 || !a3)
                  goto LABEL_1079;
                goto LABEL_1145;
              }
              goto LABEL_1101;
            }
LABEL_1297:
            v797 = v156;
            v798 = a2;
          }
          v156 = 0;
          a2 = 0;
          *v8 = 0;
          v8[1] = 0;
          v800 = v8[3];
          if (v800)
          {
            if (v797)
            {
              (*(void (**)(uint64_t, unsigned __int8 **, unint64_t))(*(_QWORD *)v800 + 16))(v800, v798, v797);
              a2 = (unsigned __int8 **)*v8;
              v156 = v8[1];
            }
            else
            {
              v156 = 0;
              a2 = 0;
            }
          }
LABEL_1101:
          *v8 = 0;
          v8[1] = 0;
          v801 = v8[3];
          if (v801 && v156)
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v801 + 16))(v801, a2);
          goto LABEL_1133;
        }
        v806 = v156;
        v807 = a2;
      }
      *v8 = 0;
      v8[1] = 0;
      v809 = v8[3];
      if (v809 && v806)
        (*(void (**)(uint64_t, unsigned __int8 **, unint64_t))(*(_QWORD *)v809 + 16))(v809, v807, v806);
      goto LABEL_1133;
    case 0x19B:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v69 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v69;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v70 = off_1E34B12E8;
      v70[1] = *(_QWORD *)v889;
      v71 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v70[2] = v71;
      *(_QWORD *)v939 = v70;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::logUserInteraction((uint64_t)this, (uint64_t)v913, (WTF::ASCIICaseInsensitiveHash **)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x19C:
      v554 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v555 = v554;
      v556 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v556;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v557 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v557 = off_1E34B1A40;
      v557[1] = v913;
      v558 = cf;
      cf = 0;
      v557[2] = v558;
      *(_QWORD *)v889 = v557;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::markAttributedPrivateClickMeasurementsAsExpiredForTesting((uint64_t)this, v555, (uint64_t *)v889);
      goto LABEL_683;
    case 0x19D:
      v89 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v90 = v89;
      v91 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v91;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v92 = off_1E34B1B30;
      v92[1] = v913;
      v93 = cf;
      cf = 0;
      v92[2] = v93;
      *(_QWORD *)v889 = v92;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::markPrivateClickMeasurementsAsExpiredForTesting((uint64_t)this, v90, (uint64_t *)v889);
      goto LABEL_683;
    case 0x19E:
      v350 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v351)
        goto LABEL_998;
      v352 = (unsigned __int8 *)v350;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)&v886);
      if (!(_BYTE)v887)
        goto LABEL_998;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v939);
      if (!v939[8])
      {
        v371 = 0;
        LOBYTE(v913) = 0;
        v916[40] = 0;
        goto LABEL_1183;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
      if (!v889[8])
      {
        v371 = 0;
        LOBYTE(v913) = 0;
        v916[40] = 0;
        goto LABEL_1178;
      }
      v353 = IPC::Decoder::decode<WTF::MonotonicTime>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1171;
      v355 = v8[1];
      a2 = (unsigned __int8 **)*v8;
      v356 = v8[2] - *v8;
      if (v355 <= v356)
        goto LABEL_1157;
      v357 = (unsigned __int8 *)a2 + v356;
      v8[2] = (uint64_t)(v357 + 1);
      if (!a2)
        goto LABEL_1303;
      v358 = *v357;
      if (v358 >= 2)
        goto LABEL_1159;
      v359 = *(double *)&v353;
      LOBYTE(v11) = v358 != 0;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>(v8));
      if (!(_BYTE)a2)
        goto LABEL_1171;
      v355 = v8[1];
      a2 = (unsigned __int8 **)*v8;
      v360 = v8[2] - *v8;
      if (v355 <= v360)
      {
LABEL_1157:
        v829 = 0;
        v830 = 0;
        *v8 = 0;
        v8[1] = 0;
        v831 = v8[3];
        if (v831)
        {
          if (v355)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v831 + 16))(v831);
            v830 = (unsigned __int8 **)*v8;
            v829 = v8[1];
          }
          else
          {
            v829 = 0;
            v830 = 0;
          }
        }
      }
      else
      {
        v361 = (unsigned __int8 *)a2 + v360;
        v8[2] = (uint64_t)(v361 + 1);
        if (a2)
        {
          v362 = *v361;
          if (v362 < 2)
          {
            v354 = v362 != 0;
            if (v355 > v361 + 1 - (unsigned __int8 *)a2)
            {
              v8[2] = (uint64_t)(v361 + 2);
              v363 = v361[1];
              if (v363 >= 2)
              {
LABEL_1304:
                v834 = v355;
                v835 = a2;
LABEL_1162:
                *v8 = 0;
                v8[1] = 0;
                v837 = v8[3];
                if (v837 && v834)
                  (*(void (**)(uint64_t, unsigned __int8 **, unint64_t))(*(_QWORD *)v837 + 16))(v837, v835, v834);
                goto LABEL_1171;
              }
              v4 = v363 != 0;
              if (v355 > v361 + 2 - (unsigned __int8 *)a2)
              {
                v364 = v361 + 3;
                v8[2] = (uint64_t)(v361 + 3);
                v365 = v361[2];
                if (v365 < 2)
                {
                  v3 = v365 != 0;
                  v366 = ((unint64_t)(v364 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)a2;
                  if (v355 >= v366 && v355 - v366 > 7)
                  {
                    v367 = (uint64_t *)((unint64_t)(v364 + 7) & 0xFFFFFFFFFFFFFFF8);
                    v5 = *v367;
                    v8[2] = (uint64_t)(v367 + 1);
                    if (!(_BYTE)v887 || !v939[8] || !v889[8])
                      goto LABEL_1220;
                    v368 = v886;
                    v886 = 0;
                    v913 = (IPC::Encoder *)v352;
                    cf = v368;
                    v369 = *(WTF::StringImpl **)v939;
                    *(_QWORD *)v939 = 0;
                    v370 = *(WTF::StringImpl **)v889;
                    *(_QWORD *)v889 = 0;
                    v915[0] = v369;
                    v915[1] = v370;
                    *(double *)v916 = v359;
                    v916[8] = (_BYTE)v11;
                    *(_QWORD *)&v916[16] = v39;
                    v916[24] = v354;
                    v916[25] = v363 != 0;
                    v916[26] = v3;
                    v7 = v359;
                    v6 = *(double *)&v39;
                    v371 = 1;
                    *(_QWORD *)&v916[32] = v5;
LABEL_1172:
                    v916[40] = v371;
                    if (v889[8])
                    {
                      v844 = *(WTF::StringImpl **)v889;
                      *(_QWORD *)v889 = 0;
                      LOBYTE(v12) = v354;
                      if (v844)
                      {
                        if (*(_DWORD *)v844 == 2)
                          WTF::StringImpl::destroy(v844, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v844 -= 2;
                      }
                    }
                    else
                    {
                      LOBYTE(v12) = v354;
                    }
LABEL_1178:
                    if (v939[8])
                    {
                      v845 = *(WTF::StringImpl **)v939;
                      *(_QWORD *)v939 = 0;
                      if (v845)
                      {
                        if (*(_DWORD *)v845 == 2)
                          WTF::StringImpl::destroy(v845, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v845 -= 2;
                      }
                    }
LABEL_1183:
                    if ((_BYTE)v887)
                    {
                      v846 = v886;
                      v886 = 0;
                      if (v846)
                      {
                        if (*(_DWORD *)v846 == 2)
                          WTF::StringImpl::destroy(v846, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v846 -= 2;
                      }
                    }
                    if (v371)
                    {
                      v847 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                      if ((_BYTE)a2)
                      {
                        *(_QWORD *)v889 = v847;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
                        v848 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                        *v848 = off_1E34B10E0;
                        v848[1] = *(_QWORD *)v889;
                        v849 = *(_QWORD *)&v889[8];
                        *(_QWORD *)&v889[8] = 0;
                        v848[2] = v849;
                        *(_QWORD *)v939 = v848;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
                        WebKit::NetworkProcess::mergeStatisticForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t)&v915[1], v11 != 0, v12 != 0, v4, v7, v6, v3, v882, v5, (uint64_t *)v939);
                        v850 = *(_QWORD *)v939;
                        *(_QWORD *)v939 = 0;
                        if (v850)
                          (*(void (**)(uint64_t))(*(_QWORD *)v850 + 8))(v850);
                        if (!v916[40])
                          goto LABEL_1079;
                      }
LABEL_1193:
                      v851 = v915[1];
                      v915[1] = 0;
                      if (v851)
                      {
                        if (*(_DWORD *)v851 == 2)
                          WTF::StringImpl::destroy(v851, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v851 -= 2;
                      }
                      v852 = v915[0];
                      v915[0] = 0;
                      if (v852)
                      {
                        if (*(_DWORD *)v852 == 2)
                          WTF::StringImpl::destroy(v852, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v852 -= 2;
                      }
                      goto LABEL_532;
                    }
                    goto LABEL_998;
                  }
                  *v8 = 0;
                  v8[1] = 0;
                  v843 = v8[3];
                  if (v843)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v843 + 16))(v843);
                    a2 = (unsigned __int8 **)*v8;
                    v355 = v8[1];
                    v833 = v8[3];
                    *v8 = 0;
                    v8[1] = 0;
                    if (v833)
                      goto LABEL_1285;
                  }
                  goto LABEL_1171;
                }
                goto LABEL_1304;
              }
            }
            v834 = 0;
            v835 = 0;
            *v8 = 0;
            v8[1] = 0;
            v836 = v8[3];
            if (v836)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v836 + 16))(v836);
              v834 = 0;
              a2 = (unsigned __int8 **)*v8;
              v878 = v8[1];
              v879 = v8[3];
              *v8 = 0;
              v8[1] = 0;
              v835 = 0;
              if (v879)
              {
                if (v878)
                {
                  (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v879 + 16))(v879, a2);
                  v835 = (unsigned __int8 **)*v8;
                  v834 = v8[1];
                }
              }
            }
            goto LABEL_1162;
          }
LABEL_1159:
          *v8 = 0;
          v8[1] = 0;
          v833 = v8[3];
          if (v833)
          {
LABEL_1285:
            if (v355)
              (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v833 + 16))(v833, a2);
          }
LABEL_1171:
          v371 = 0;
          LOBYTE(v913) = 0;
          goto LABEL_1172;
        }
LABEL_1303:
        v829 = v355;
        v830 = a2;
      }
      v355 = 0;
      a2 = 0;
      *v8 = 0;
      v8[1] = 0;
      v832 = v8[3];
      if (v832)
      {
        if (v829)
        {
          (*(void (**)(uint64_t, unsigned __int8 **, unint64_t))(*(_QWORD *)v832 + 16))(v832, v830, v829);
          a2 = (unsigned __int8 **)*v8;
          v355 = v8[1];
        }
        else
        {
          v355 = 0;
          a2 = 0;
        }
      }
      goto LABEL_1159;
    case 0x19F:
      v193 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v193 >= 0x100u)
        WebKit::NetworkProcess::notifyMediaStreamingActivity(this, v193 != 0);
      goto LABEL_1079;
    case 0x1A1:
      IPC::handleMessage<Messages::NetworkProcess::PreconnectTo,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)>((uint64_t *)a3);
      goto LABEL_1079;
    case 0x1A2:
      IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>((uint64_t *)a3, (uint64_t)&v913);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v527 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v527;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v528 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v528 = off_1E34B0F78;
      v528[1] = *(_QWORD *)v889;
      v529 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v528[2] = v529;
      *(_QWORD *)v939 = v528;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[0]))
        goto LABEL_1220;
      WebKit::NetworkProcess::prepareToSuspend((uint64_t)this, v913, (uint64_t *)v939, *(double *)&cf);
      v530 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v530)
      {
LABEL_581:
        v578 = *(void (**)(void))(*(_QWORD *)v530 + 8);
LABEL_582:
        v578();
      }
      goto LABEL_1079;
    case 0x1A3:
      v522 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v522 >= 0x100u)
        WebKit::NetworkProcess::processDidResume(this, v522 != 0);
      goto LABEL_1079;
    case 0x1A6:
      v169 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v170)
        goto LABEL_801;
      v171 = (unsigned __int8 *)v169;
      IPC::Decoder::decode<WTF::URL>(v8, v889);
      if (!v890[16])
        goto LABEL_801;
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(v8, (uint64_t)v939);
      v172 = v939[8];
      if (v939[8])
      {
        if (!v890[16])
          goto LABEL_1220;
        v173 = *(const void **)v889;
        *(_QWORD *)v889 = 0;
        v913 = (IPC::Encoder *)v171;
        cf = v173;
        *(_OWORD *)v915 = *(_OWORD *)&v889[8];
        *(_OWORD *)v916 = *(_OWORD *)v890;
        *(_DWORD *)&v889[8] &= ~1u;
        v174 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        *(_QWORD *)&v916[16] = v174;
        v916[24] = 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v939);
      }
      else
      {
        LOBYTE(v913) = 0;
        v916[24] = 0;
      }
      if (v890[16])
      {
        v627 = *(WTF::StringImpl **)v889;
        *(_QWORD *)v889 = 0;
        if (v627)
        {
          if (*(_DWORD *)v627 == 2)
            WTF::StringImpl::destroy(v627, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v627 -= 2;
        }
      }
      if (!v172)
      {
LABEL_801:
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (!v227)
          goto LABEL_1079;
        goto LABEL_995;
      }
      WebKit::DownloadManager::publishDownloadProgress((uint64_t)this + 152, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)&v916[16]);
      if (!v916[24])
        goto LABEL_1079;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v916[16]);
LABEL_797:
      v653 = (WTF::StringImpl *)cf;
      cf = 0;
      if (!v653)
        goto LABEL_1079;
      goto LABEL_798;
    case 0x1A7:
      IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>((uint64_t *)a3, this);
      goto LABEL_1079;
    case 0x1A8:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v913);
      if (!(_BYTE)cf)
        goto LABEL_1079;
      WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal((WebCore::LegacySchemeRegistry *)&v913, (const WTF::String *)a2);
      goto LABEL_561;
    case 0x1A9:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v913);
      if (!(_BYTE)cf)
        goto LABEL_1079;
      WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess((WebCore::LegacySchemeRegistry *)&v913, (const WTF::String *)a2);
LABEL_561:
      if (!(_BYTE)cf)
        goto LABEL_1079;
      v535 = v913;
      v913 = 0;
      if (!v535)
        goto LABEL_1079;
      goto LABEL_1076;
    case 0x1AA:
      IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsSecure,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>((uint64_t *)a3, this);
      goto LABEL_1079;
    case 0x1AD:
      v148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v149)
      {
        v150 = (unsigned __int8 *)v148;
        IPC::Decoder::decode<WebCore::SecurityOriginData>(v8, v939);
        if (BYTE8(v940))
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>(v8, v889);
          if (v890[8])
          {
            *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v8));
            if ((v39 & 0xFF00000000) != 0)
            {
              if (!BYTE8(v940) || !v890[8])
                goto LABEL_1220;
              v151 = v39;
              v913 = (IPC::Encoder *)v150;
              LOBYTE(cf) = 0;
              *(_DWORD *)v916 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v939);
              v916[8] = 0;
              *(_DWORD *)&v916[32] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v916[8], (uint64_t)v889);
              *(_DWORD *)&v916[40] = v151;
              v152 = 1;
            }
            else
            {
              v152 = 0;
              LOBYTE(v913) = 0;
            }
            v916[48] = v152;
            if (v890[8] && *(_DWORD *)v890 != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B0E40[*(unsigned int *)v890])(&v886, v889);
          }
          else
          {
            LOBYTE(v913) = 0;
            v916[48] = 0;
          }
          if (BYTE8(v940) && (_DWORD)v940 != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[v940])(v889, v939);
        }
        else
        {
          LOBYTE(v913) = 0;
          v916[48] = 0;
        }
        if (v916[48])
        {
LABEL_778:
          v648 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
          if ((_BYTE)a2)
          {
            *(_QWORD *)v889 = v648;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
            v649 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v649 = off_1E34B0E88;
            v649[1] = *(_QWORD *)v889;
            v650 = *(_QWORD *)&v889[8];
            *(_QWORD *)&v889[8] = 0;
            v649[2] = v650;
            *(_QWORD *)v939 = v649;
            *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
            if (!v916[48])
              goto LABEL_1220;
            WebKit::NetworkProcess::renameOriginInWebsiteData((uint64_t)this, (unsigned __int8 *)v913, (WebCore::SecurityOriginData *)&cf, (WebCore::SecurityOriginData *)&v916[8], *(int *)&v916[40], (uint64_t *)v939);
            v651 = *(_QWORD *)v939;
            *(_QWORD *)v939 = 0;
            if (v651)
              (*(void (**)(uint64_t))(*(_QWORD *)v651 + 8))(v651);
          }
          if (!v916[48])
            goto LABEL_1079;
          if (*(_DWORD *)&v916[32] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[*(unsigned int *)&v916[32]])(v889, &v916[8]);
          *(_DWORD *)&v916[32] = -1;
          v652 = *(unsigned int *)v916;
          if (*(_DWORD *)v916 == -1)
            goto LABEL_1079;
          goto LABEL_786;
        }
      }
      else
      {
        LOBYTE(v913) = 0;
        v916[48] = 0;
      }
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v803 = v8[3];
      if (!v803)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v803 + 16))(v803, a2);
      if (!v916[48])
        goto LABEL_1079;
      goto LABEL_778;
    case 0x1AE:
      v389 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v390 = v389;
      v391 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v391;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v392 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v392 = off_1E34B16F8;
      v392[1] = v913;
      v393 = cf;
      cf = 0;
      v392[2] = v393;
      *(_QWORD *)v889 = v392;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::resetCacheMaxAgeCapForPrevalentResources((uint64_t)this, v390, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1AF:
      v283 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v284 = v283;
      v285 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v285;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v286 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v286 = off_1E34B1748;
      v286[1] = v913;
      v287 = cf;
      cf = 0;
      v286[2] = v287;
      *(_QWORD *)v889 = v286;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::resetCrossSiteLoadsWithLinkDecorationForTesting((uint64_t)this, v284, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B0:
      v311 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v312 = v311;
      v313 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v313;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v314 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v314 = off_1E34B1310;
      v314[1] = v913;
      v315 = cf;
      cf = 0;
      v314[2] = v315;
      *(_QWORD *)v889 = v314;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::resetParametersToDefaultValues((uint64_t)this, v312, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B1:
      v394 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v395 = v394;
      v396 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v396;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v397 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v397 = off_1E34B1BD0;
      v397[1] = v913;
      v398 = cf;
      cf = 0;
      v397[2] = v398;
      *(_QWORD *)v889 = v397;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::resetQuota((uint64_t)this, v395, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B2:
      v374 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v375 = v374;
      v376 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v376;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v377 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v377 = off_1E34B1C48;
      v377[1] = v913;
      v378 = cf;
      cf = 0;
      v377[2] = v378;
      *(_QWORD *)v889 = v377;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::resetStoragePersistedState((uint64_t)this, v375, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B4:
      v269 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v270)
        goto LABEL_994;
      v271 = (unsigned __int8 *)v269;
      v272 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!v273)
        goto LABEL_994;
      v274 = (const void *)v272;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v8, (uint64_t)v889);
      if (!v889[16])
        goto LABEL_994;
      IPC::Decoder::decode<WTF::String>(v8, &v886);
      if (!(_BYTE)v887)
        goto LABEL_994;
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(v8, (uint64_t)v939);
      if (!v939[8])
      {
        v282 = 0;
        LOBYTE(v913) = 0;
        v916[24] = 0;
        goto LABEL_868;
      }
      v275 = v8[1];
      a2 = (unsigned __int8 **)*v8;
      v276 = v8[2] - *v8;
      if (v275 <= v276)
      {
        v838 = 0;
        v839 = 0;
        *v8 = 0;
        v8[1] = 0;
        v840 = v8[3];
        if (v840)
        {
          if (v275)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v840 + 16))(v840);
            v839 = *v8;
            v838 = v8[1];
          }
          else
          {
            v838 = 0;
            v839 = 0;
          }
        }
        goto LABEL_1166;
      }
      v277 = (unsigned __int8 *)a2 + v276;
      v8[2] = (uint64_t)(v277 + 1);
      if (!a2)
      {
        v838 = v275;
        v839 = 0;
LABEL_1166:
        v275 = 0;
        a2 = 0;
        *v8 = 0;
        v8[1] = 0;
        v841 = v8[3];
        if (v841)
        {
          if (v838)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v841 + 16))(v841, v839, v838);
            a2 = (unsigned __int8 **)*v8;
            v275 = v8[1];
          }
          else
          {
            v275 = 0;
            a2 = 0;
          }
        }
        goto LABEL_1167;
      }
      v278 = *v277;
      if (v278 < 2)
      {
        LOBYTE(v12) = v278 != 0;
        if (!v889[16] || !(_BYTE)v887)
          goto LABEL_1220;
        v913 = (IPC::Encoder *)v271;
        cf = v274;
        *(_OWORD *)v915 = *(_OWORD *)v889;
        v279 = v886;
        v886 = 0;
        v280 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        *(_QWORD *)v916 = v279;
        *(_QWORD *)&v916[8] = v280;
        v916[16] = (_BYTE)v12;
        v281 = 1;
        v916[24] = 1;
        goto LABEL_264;
      }
LABEL_1167:
      *v8 = 0;
      v8[1] = 0;
      v842 = v8[3];
      if (v842)
      {
        if (v275)
        {
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v842 + 16))(v842, a2);
          v880 = v8[3];
          a2 = (unsigned __int8 **)*v8;
          v881 = v8[1];
          *v8 = 0;
          v8[1] = 0;
          if (v880)
          {
            if (v881)
              (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v880 + 16))(v880, a2);
          }
        }
      }
      v281 = 0;
      v282 = 0;
      LOBYTE(v913) = 0;
      v916[24] = 0;
      if (v939[8])
      {
LABEL_264:
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v939);
        v282 = v281;
      }
LABEL_868:
      if ((_BYTE)v887)
      {
        v686 = v886;
        v886 = 0;
        if (v686)
        {
          if (*(_DWORD *)v686 == 2)
            WTF::StringImpl::destroy(v686, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v686 -= 2;
        }
      }
      if (v282)
      {
        WebKit::NetworkProcess::resumeDownload((uint64_t)this, (uint64_t)v913, (uint64_t)v274, (uint64_t)v915[0], (uint64_t)v915[1], v916, (uint64_t *)&v916[8], v12 != 0);
        if (v916[24])
        {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v916[8]);
          v653 = *(WTF::StringImpl **)v916;
          *(_QWORD *)v916 = 0;
          if (v653)
          {
LABEL_798:
            if (*(_DWORD *)v653 == 2)
              WTF::StringImpl::destroy(v653, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v653 -= 2;
          }
        }
        goto LABEL_1079;
      }
LABEL_994:
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v227 = v8[3];
      if (!v227)
        goto LABEL_1079;
LABEL_995:
      if (a3)
LABEL_1145:
        (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v227 + 16))(v227, a2);
LABEL_1079:
      if (this)
      {
        do
        {
          v792 = __ldaxr(v14);
          v793 = v792 - 1;
        }
        while (__stlxr(v793, v14));
        if (!v793)
        {
          atomic_store(1u, (unsigned int *)this + 30);
          (*(void (**)(WebKit::NetworkProcess *, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
        }
      }
      return;
    case 0x1B5:
      v480 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v481)
        goto LABEL_1143;
      v482 = v480;
      IPC::Decoder::decode<std::optional<WTF::WallTime>>(v8, &v913);
      if (!LOBYTE(v915[0]))
        goto LABEL_1143;
      v483 = v8[1];
      v484 = *v8;
      v485 = v8[2] - *v8;
      if (v483 <= v485)
      {
        v817 = 0;
        v818 = 0;
        *v8 = 0;
        v8[1] = 0;
        v819 = v8[3];
        if (v819)
        {
          if (v483)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v819 + 16))(v819);
            v818 = *v8;
            v817 = v8[1];
          }
          else
          {
            v817 = 0;
            v818 = 0;
          }
        }
      }
      else
      {
        v486 = (unsigned __int8 *)(v484 + v485);
        v8[2] = (uint64_t)(v486 + 1);
        if (v484)
        {
          v487 = *v486;
          if (v487 < 2)
          {
            v488 = (unsigned __int8 *)v913;
            v489 = cf;
            v490 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if (!(_BYTE)a2)
              goto LABEL_1079;
            v913 = (IPC::Encoder *)v490;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
            v491 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v491 = off_1E34B1338;
            v491[1] = v913;
            v492 = cf;
            cf = 0;
            v491[2] = v492;
            *(_QWORD *)v889 = v491;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
            WebKit::NetworkProcess::scheduleClearInMemoryAndPersistent((uint64_t)this, v482, (uint64_t)v488, (uint64_t)v489, v487 != 0, (WTF::StringImpl *)v889);
            goto LABEL_683;
          }
LABEL_1142:
          *v8 = 0;
          v8[1] = 0;
          v821 = v8[3];
          if (v821)
          {
            if (v483)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v821 + 16))(v821, v484);
              v875 = v8[3];
              v876 = *v8;
              v877 = v8[1];
              *v8 = 0;
              v8[1] = 0;
              if (v875)
              {
                if (v877)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v875 + 16))(v875, v876);
              }
            }
          }
LABEL_1143:
          a2 = (unsigned __int8 **)*v8;
          a3 = (IPC::Decoder *)v8[1];
          *v8 = 0;
          v8[1] = 0;
          v227 = v8[3];
          if (!v227)
            goto LABEL_1079;
LABEL_1144:
          if (!a3)
            goto LABEL_1079;
          goto LABEL_1145;
        }
        v817 = v483;
        v818 = 0;
      }
      v483 = 0;
      v484 = 0;
      *v8 = 0;
      v8[1] = 0;
      v820 = v8[3];
      if (v820)
      {
        if (v817)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v820 + 16))(v820, v818, v817);
          v484 = *v8;
          v483 = v8[1];
        }
        else
        {
          v483 = 0;
          v484 = 0;
        }
      }
      goto LABEL_1142;
    case 0x1B6:
      v235 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v236 = v235;
      v237 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v237;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v238 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v238 = off_1E34B1360;
      v238[1] = v913;
      v239 = cf;
      cf = 0;
      v238[2] = v239;
      *(_QWORD *)v889 = v238;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::scheduleCookieBlockingUpdate((uint64_t)this, v236, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B7:
      v472 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v473 = v472;
      v474 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v474;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v475 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v475 = off_1E34B1388;
      v475[1] = v913;
      v476 = cf;
      cf = 0;
      v475[2] = v476;
      *(_QWORD *)v889 = v475;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::scheduleStatisticsAndDataRecordsProcessing((uint64_t)this, v473, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1B8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v189 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_170;
      *(_QWORD *)v889 = v189;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v190 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v190 = off_1E34B1810;
      v190[1] = *(_QWORD *)v889;
      v191 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v190[2] = v191;
      *(_QWORD *)v939 = v190;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setAppBoundDomainsForResourceLoadStatistics((uint64_t)this, (uint64_t)v913, (uint64_t *)&cf, (const WTF::StringImpl *)v939);
      goto LABEL_167;
    case 0x1B9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v523 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v523;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v524 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v524 = off_1E34B1C20;
      v524[1] = *(_QWORD *)v889;
      v525 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v524[2] = v525;
      *(_QWORD *)v939 = v524;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setBackupExclusionPeriodForTesting((uint64_t)this, (uint64_t)v913, (uint64_t *)v939, *(double *)&cf);
      goto LABEL_675;
    case 0x1BA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
        WebKit::NetworkProcess::setBlobRegistryTopOriginPartitioningEnabled((uint64_t)this, (uint64_t)v913, cf);
      goto LABEL_1079;
    case 0x1BB:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v178 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v178;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v179 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v179 = off_1E34B13D8;
      v179[1] = *(_QWORD *)v889;
      v180 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v179[2] = v180;
      *(_QWORD *)v939 = v179;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setCacheMaxAgeCapForPrevalentResources((uint64_t)this, (uint64_t)v913, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1BC:
      v526 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>((uint64_t *)a3);
      if (v526 >= 0x100u)
        WebKit::NetworkProcess::setCacheModel((uint64_t)this, v526);
      goto LABEL_1079;
    case 0x1BD:
      v536 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v537
        || (v538 = (unsigned __int8 *)v536, IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v939),
                                            !v939[8]))
      {
        v540 = 0;
        v541 = 0;
        LOBYTE(v913) = 0;
        v916[0] = 0;
        goto LABEL_625;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
      if (v889[8])
      {
        *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v8));
        if ((unsigned __int16)v39 >= 0x100u)
        {
          if (!v939[8] || !v889[8])
            goto LABEL_1220;
          v659 = 0;
          v540 = v39;
          v660 = *(const void **)v939;
          *(_QWORD *)v939 = 0;
          v913 = (IPC::Encoder *)v538;
          cf = v660;
          v915[0] = *(WTF::StringImpl **)v889;
          LOBYTE(v915[1]) = v39;
          v541 = 1;
          v916[0] = 1;
LABEL_1013:
          if (v939[8])
          {
            v772 = *(WTF::StringImpl **)v939;
            *(_QWORD *)v939 = 0;
            if (v772)
            {
              if (*(_DWORD *)v772 == 2)
                WTF::StringImpl::destroy(v772, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v772 -= 2;
            }
          }
          if (!v659)
          {
LABEL_1019:
            if (!v541)
              goto LABEL_1079;
            v773 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if ((_BYTE)a2)
            {
              *(_QWORD *)v889 = v773;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
              v774 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v774 = off_1E34B1720;
              v774[1] = *(_QWORD *)v889;
              v775 = *(_QWORD *)&v889[8];
              *(_QWORD *)&v889[8] = 0;
              v774[2] = v775;
              *(_QWORD *)v939 = v774;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
              WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, v540 != 0, (uint64_t *)v939);
              v776 = *(_QWORD *)v939;
              *(_QWORD *)v939 = 0;
              if (v776)
                (*(void (**)(uint64_t))(*(_QWORD *)v776 + 8))(v776);
              if (!v916[0])
                goto LABEL_1079;
            }
LABEL_1071:
            v210 = v915[0];
            v915[0] = 0;
            if (v210)
            {
LABEL_1072:
              if (*(_DWORD *)v210 == 2)
LABEL_1074:
                WTF::StringImpl::destroy(v210, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v210 -= 2;
            }
LABEL_1075:
            v535 = (WTF::StringImpl *)cf;
            cf = 0;
            if (v535)
              goto LABEL_1076;
            goto LABEL_1079;
          }
LABEL_625:
          a2 = (unsigned __int8 **)*v8;
          a3 = (IPC::Decoder *)v8[1];
          *v8 = 0;
          v8[1] = 0;
          v604 = v8[3];
          if (v604 && a3)
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v604 + 16))(v604, a2);
          goto LABEL_1019;
        }
        LOBYTE(v913) = 0;
        v916[0] = 0;
        if (v889[8])
        {
          v539 = *(WTF::StringImpl **)v889;
          *(_QWORD *)v889 = 0;
          if (v539)
          {
            if (*(_DWORD *)v539 != 2)
            {
              v540 = 0;
              v541 = 0;
              *(_DWORD *)v539 -= 2;
LABEL_1012:
              v659 = 1;
              goto LABEL_1013;
            }
            WTF::StringImpl::destroy(v539, (WTF::StringImpl *)a2);
          }
        }
        v540 = 0;
        v541 = 0;
        goto LABEL_1012;
      }
      v540 = 0;
      v541 = 0;
      LOBYTE(v913) = 0;
      v916[0] = 0;
      goto LABEL_1012;
    case 0x1BE:
      v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v100)
        goto LABEL_863;
      v101 = (unsigned __int8 *)v99;
      IPC::Decoder::decode<WTF::String>(v8, v939);
      if (!v939[8])
        goto LABEL_863;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889));
      if (!v889[8])
      {
        if (!v939[8])
          goto LABEL_863;
        goto LABEL_750;
      }
      if (!v939[8])
        goto LABEL_1220;
      v913 = (IPC::Encoder *)v101;
      cf = *(CFTypeRef *)v939;
      v102 = *(WTF::StringImpl **)v889;
      v915[0] = *(WTF::StringImpl **)v889;
      LOBYTE(v915[1]) = 1;
      v103 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v103;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v104 = off_1E34B1928;
        v104[1] = *(_QWORD *)v889;
        v105 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v104[2] = v105;
        *(_QWORD *)v939 = v104;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::setFirstPartyHostCNAMEDomainForTesting((uint64_t)this, (uint64_t)v101, (WTF **)&cf, v915, (uint64_t *)v939);
        v106 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v106)
          (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
        if (!LOBYTE(v915[1]))
          goto LABEL_1079;
        v102 = v915[0];
      }
      v915[0] = 0;
      if (!v102)
        goto LABEL_1075;
      if (*(_DWORD *)v102 != 2)
      {
        *(_DWORD *)v102 -= 2;
        goto LABEL_1075;
      }
      v210 = v102;
      goto LABEL_1074;
    case 0x1BF:
      v257 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v258
        || (v259 = v257,
            PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(v8),
            PartyWebsiteDataRemoval <= 0xFFu))
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (!v227)
          goto LABEL_1079;
        goto LABEL_1144;
      }
      v619 = PartyWebsiteDataRemoval;
      v620 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v620;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v621 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v621 = off_1E34B18D8;
      v621[1] = v913;
      v622 = cf;
      cf = 0;
      v621[2] = v622;
      *(_QWORD *)v889 = v621;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::setFirstPartyWebsiteDataRemovalModeForTesting((uint64_t)this, v259, v619, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1C0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_1079;
      v228 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v228;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v229 = off_1E34B1400;
        v229[1] = *(_QWORD *)v889;
        v230 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v229[2] = v230;
        *(_QWORD *)v939 = v229;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::setGrandfathered((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (char)v915[0], (uint64_t *)v939);
        v231 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v231)
          (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
        if (!LOBYTE(v915[1]))
          goto LABEL_1079;
      }
      goto LABEL_532;
    case 0x1C1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v186 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v186;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v187 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v187 = off_1E34B1450;
      v187[1] = *(_QWORD *)v889;
      v188 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v187[2] = v188;
      *(_QWORD *)v939 = v187;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setGrandfatheringTime((uint64_t)this, (uint64_t)v913, (uint64_t *)v939, *(double *)&cf);
      goto LABEL_471;
    case 0x1C2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
        WebKit::NetworkProcess::setInspectionForServiceWorkersAllowed((uint64_t)this, (uint64_t)v913, cf);
      goto LABEL_1079;
    case 0x1C3:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v426 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v426;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v427 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v427 = off_1E34B1568;
      v427[1] = *(_QWORD *)v889;
      v428 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v427[2] = v428;
      *(_QWORD *)v939 = v427;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setIsRunningResourceLoadStatisticsTest((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1C4:
      v214 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v215)
        goto LABEL_998;
      v216 = (unsigned __int8 *)v214;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
      if (!v889[8])
        goto LABEL_998;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>(v8));
      if (!(_BYTE)a2)
      {
        if (v889[8])
        {
          v647 = *(WTF::StringImpl **)v889;
          *(_QWORD *)v889 = 0;
          if (v647)
          {
            if (*(_DWORD *)v647 == 2)
              WTF::StringImpl::destroy(v647, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v647 -= 2;
          }
        }
        goto LABEL_998;
      }
      if (!v889[8])
        goto LABEL_1220;
      v217 = *(double *)&v39;
      v218 = *(WTF::StringImpl **)v889;
      v913 = (IPC::Encoder *)v216;
      cf = *(CFTypeRef *)v889;
      v915[0] = (WTF::StringImpl *)v39;
      LOBYTE(v915[1]) = 1;
      v219 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v219;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v220 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v220 = off_1E34B10B8;
        v220[1] = *(_QWORD *)v889;
        v221 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v220[2] = v221;
        *(_QWORD *)v939 = v220;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::setLastSeen((uint64_t)this, (uint64_t)v216, (uint64_t)&cf, (uint64_t *)v939, v217);
        v222 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v222)
          (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
        if (!LOBYTE(v915[1]))
          goto LABEL_1079;
        v218 = (WTF::StringImpl *)cf;
      }
      cf = 0;
      if (!v218)
        goto LABEL_1079;
      if (*(_DWORD *)v218 != 2)
      {
        *(_DWORD *)v218 -= 2;
        goto LABEL_1079;
      }
      v535 = v218;
      goto LABEL_1078;
    case 0x1C5:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v110 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_170;
      *(_QWORD *)v889 = v110;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v111 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v111 = off_1E34B1838;
      v111[1] = *(_QWORD *)v889;
      v112 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v111[2] = v112;
      *(_QWORD *)v939 = v111;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics((uint64_t)this, (uint64_t)v913, (uint64_t *)&cf, (uint64_t *)v939);
LABEL_167:
      v192 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v192)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      if (LOBYTE(v915[0]))
      {
LABEL_170:
        if (cf)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)cf, (WTF::StringImpl *)a2);
      }
      goto LABEL_1079;
    case 0x1C6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v477 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v477;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v478 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v478 = off_1E34B1478;
      v478[1] = *(_QWORD *)v889;
      v479 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v478[2] = v479;
      *(_QWORD *)v939 = v478;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setMaxStatisticsEntries((uint64_t)this, (uint64_t)v913, (uint64_t)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1C7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v347 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v347;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v348 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v348 = off_1E34B14A0;
      v348[1] = *(_QWORD *)v889;
      v349 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v348[2] = v349;
      *(_QWORD *)v939 = v348;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setMinimumTimeBetweenDataRecordsRemoval((uint64_t)this, (uint64_t)v913, (uint64_t *)v939, *(double *)&cf);
      goto LABEL_471;
    case 0x1C8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v266 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v266;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v267 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v267 = off_1E34B1518;
      v267[1] = *(_QWORD *)v889;
      v268 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v267[2] = v268;
      *(_QWORD *)v939 = v267;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setNotifyPagesWhenDataRecordsWereScanned((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1C9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v465 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v465;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v466 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v466 = off_1E34B1BF8;
      v466[1] = *(_QWORD *)v889;
      v467 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v466[2] = v467;
      *(_QWORD *)v939 = v466;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setOriginQuotaRatioEnabledForTesting((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_675;
    case 0x1CA:
      v508 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v509)
        goto LABEL_863;
      v510 = (unsigned __int8 *)v508;
      IPC::Decoder::decode<WTF::String>(v8, &v883);
      if (!(_BYTE)v884)
        goto LABEL_863;
      IPC::Decoder::decode<WTF::String>(v8, &v886);
      if (!(_BYTE)v887)
      {
        v513 = 0;
        LOBYTE(v913) = 0;
        v916[8] = 0;
        goto LABEL_1053;
      }
      IPC::Decoder::decode<WTF::String>(v8, v939);
      if (!v939[8])
      {
        v513 = 0;
        LOBYTE(v913) = 0;
        v916[8] = 0;
        goto LABEL_1048;
      }
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::String>(v8, v889));
      if (v889[8])
      {
        if (!(_BYTE)v884 || !(_BYTE)v887 || !v939[8])
          goto LABEL_1220;
        v511 = v883;
        v883 = 0;
        v913 = (IPC::Encoder *)v510;
        cf = v511;
        v512 = v886;
        v886 = 0;
        v915[0] = v512;
        v915[1] = *(WTF::StringImpl **)v939;
        *(_QWORD *)v916 = *(_QWORD *)v889;
        v513 = 1;
        v916[8] = 1;
      }
      else
      {
        LOBYTE(v913) = 0;
        v916[8] = 0;
        if (v939[8])
        {
          v687 = *(WTF::StringImpl **)v939;
          *(_QWORD *)v939 = 0;
          if (v687)
          {
            if (*(_DWORD *)v687 != 2)
            {
              v513 = 0;
              *(_DWORD *)v687 -= 2;
              goto LABEL_1048;
            }
            WTF::StringImpl::destroy(v687, (WTF::StringImpl *)a2);
          }
        }
        v513 = 0;
      }
LABEL_1048:
      if ((_BYTE)v887)
      {
        v784 = v886;
        v886 = 0;
        if (v784)
        {
          if (*(_DWORD *)v784 == 2)
            WTF::StringImpl::destroy(v784, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v784 -= 2;
        }
      }
LABEL_1053:
      if ((_BYTE)v884)
      {
        v785 = v883;
        v883 = 0;
        if (v785)
        {
          if (*(_DWORD *)v785 == 2)
            WTF::StringImpl::destroy(v785, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v785 -= 2;
        }
      }
      if (!v513)
        goto LABEL_863;
      v786 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v786;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v787 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v787 = off_1E34B1B58;
        v787[1] = *(_QWORD *)v889;
        v788 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v787[2] = v788;
        *(_QWORD *)v939 = v787;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::setPCMFraudPreventionValuesForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t)&v915[1], (uint64_t)v916, (uint64_t *)v939);
        v789 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v789)
          (*(void (**)(uint64_t))(*(_QWORD *)v789 + 8))(v789);
        if (!v916[8])
          goto LABEL_1079;
      }
      v790 = *(WTF::StringImpl **)v916;
      *(_QWORD *)v916 = 0;
      if (v790)
      {
        if (*(_DWORD *)v790 == 2)
          WTF::StringImpl::destroy(v790, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v790 -= 2;
      }
      v791 = v915[1];
      v915[1] = 0;
      if (v791)
      {
        if (*(_DWORD *)v791 == 2)
          WTF::StringImpl::destroy(v791, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v791 -= 2;
      }
      goto LABEL_1071;
    case 0x1CB:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v175 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v175;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v176 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v176 = off_1E34B1130;
      v176[1] = *(_QWORD *)v889;
      v177 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v176[2] = v177;
      *(_QWORD *)v939 = v176;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setPrevalentResource((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x1CC:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v197 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v197;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v198 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v198 = off_1E34B1158;
      v198[1] = *(_QWORD *)v889;
      v199 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v198[2] = v199;
      *(_QWORD *)v939 = v198;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setPrevalentResourceForDebugMode((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_529;
    case 0x1CD:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v194 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_316;
      *(_QWORD *)v889 = v194;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v195 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v195 = off_1E34B1B80;
      v195[1] = *(_QWORD *)v889;
      v196 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v195[2] = v196;
      *(_QWORD *)v939 = v195;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[0]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setPrivateClickMeasurementAppBundleIDForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_314;
    case 0x1CE:
      v203 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v204)
        goto LABEL_863;
      v205 = (unsigned __int8 *)v203;
      IPC::Decoder::decode<WTF::URL>(v8, v939);
      if (!v941)
        goto LABEL_863;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::URL>(v8, v889));
      if (!v890[16])
      {
        LOBYTE(v913) = 0;
        v916[56] = 0;
        if (v941)
        {
LABEL_750:
          v646 = *(WTF::StringImpl **)v939;
          *(_QWORD *)v939 = 0;
          if (v646)
          {
            if (*(_DWORD *)v646 == 2)
              WTF::StringImpl::destroy(v646, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v646 -= 2;
          }
        }
        goto LABEL_863;
      }
      if (!v941)
        goto LABEL_1220;
      v913 = (IPC::Encoder *)v205;
      cf = *(CFTypeRef *)v939;
      *(_OWORD *)v915 = *(_OWORD *)&v939[8];
      *(_OWORD *)v916 = v940;
      *(_QWORD *)&v916[16] = *(_QWORD *)v889;
      *(_OWORD *)&v916[24] = *(_OWORD *)&v889[8];
      *(_OWORD *)&v916[40] = *(_OWORD *)v890;
      v916[56] = 1;
      v206 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v206;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v207 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v207 = off_1E34B1B08;
        v207[1] = *(_QWORD *)v889;
        v208 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v207[2] = v208;
        *(_QWORD *)v939 = v207;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
        WebKit::NetworkProcess::setPrivateClickMeasurementAttributionReportURLsForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)&v916[16], (uint64_t *)v939);
        v209 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v209)
          (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
        if (!v916[56])
          goto LABEL_1079;
      }
      v210 = *(WTF::StringImpl **)&v916[16];
      *(_QWORD *)&v916[16] = 0;
      if (v210)
        goto LABEL_1072;
      goto LABEL_1075;
    case 0x1CF:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
        WebKit::NetworkProcess::setPrivateClickMeasurementDebugMode((uint64_t)this, (uint64_t)v913, cf);
      goto LABEL_1079;
    case 0x1D0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v423 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v423;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v424 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v424 = off_1E34B1A68;
      v424[1] = *(_QWORD *)v889;
      v425 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v424[2] = v425;
      *(_QWORD *)v939 = v424;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setPrivateClickMeasurementEphemeralMeasurementForTesting((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_675;
    case 0x1D1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v338 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v338;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v339 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v339 = off_1E34B1A18;
      v339[1] = *(_QWORD *)v889;
      v340 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v339[2] = v340;
      *(_QWORD *)v939 = v339;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setPrivateClickMeasurementOverrideTimerForTesting((uint64_t)this, (uint64_t)v913, cf, (uint64_t *)v939);
LABEL_675:
      v499 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (!v499)
        goto LABEL_1079;
      goto LABEL_684;
    case 0x1D2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>((uint64_t *)a3, &v913);
      if (!v916[16])
        goto LABEL_1079;
      v420 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_479;
      *(_QWORD *)v889 = v420;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v421 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v421 = off_1E34B1AB8;
      v421[1] = *(_QWORD *)v889;
      v422 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v421[2] = v422;
      *(_QWORD *)v939 = v421;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!v916[16])
        goto LABEL_1220;
      WebKit::NetworkProcess::setPrivateClickMeasurementTokenPublicKeyURLForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      goto LABEL_477;
    case 0x1D3:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>((uint64_t *)a3, &v913);
      if (!v916[16])
        goto LABEL_1079;
      v500 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_479;
      *(_QWORD *)v889 = v500;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v501 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v501 = off_1E34B1AE0;
      v501[1] = *(_QWORD *)v889;
      v502 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v501[2] = v502;
      *(_QWORD *)v939 = v501;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!v916[16])
        goto LABEL_1220;
      WebKit::NetworkProcess::setPrivateClickMeasurementTokenSignatureURLForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
LABEL_477:
      v503 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v503)
        (*(void (**)(uint64_t))(*(_QWORD *)v503 + 8))(v503);
LABEL_479:
      if (!v916[16])
        goto LABEL_1079;
      goto LABEL_1075;
    case 0x1D5:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v496 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v496;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v497 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v497 = off_1E34B14C8;
      v497[1] = *(_QWORD *)v889;
      v498 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v497[2] = v498;
      *(_QWORD *)v939 = v497;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setPruneEntriesDownTo((uint64_t)this, (uint64_t)v913, (uint64_t)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1D7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v200 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v200;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v201 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v201 = off_1E34B1590;
      v201[1] = *(_QWORD *)v889;
      v202 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v201[2] = v202;
      *(_QWORD *)v939 = v201;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setResourceLoadStatisticsDebugMode((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1D8:
      v514 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v514 >= 0x100u)
        WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent(this, v514 != 0);
      goto LABEL_1079;
    case 0x1D9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v291 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v291;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v292 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v292 = off_1E34B1540;
      v292[1] = *(_QWORD *)v889;
      v293 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v292[2] = v293;
      *(_QWORD *)v939 = v292;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setResourceLoadStatisticsTimeAdvanceForTesting((uint64_t)this, (uint64_t)v913, (uint64_t *)v939, *(double *)&cf);
      goto LABEL_471;
    case 0x1DA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
        WebKit::NetworkProcess::setSessionIsControlledByAutomation((uint64_t)this, (uint64_t)v913, cf);
      goto LABEL_1079;
    case 0x1DB:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v493 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v493;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v494 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v494 = off_1E34B14F0;
      v494[1] = *(_QWORD *)v889;
      v495 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v494[2] = v495;
      *(_QWORD *)v939 = v494;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setShouldClassifyResourcesBeforeDataRecordsRemoval((uint64_t)this, (uint64_t)v913, (char)cf, (uint64_t *)v939);
      goto LABEL_471;
    case 0x1DC:
      v441 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v441 < 0x100u)
        goto LABEL_1079;
      v442 = v441;
      v443 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v443;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v444 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v444 = off_1E34B1860;
      v444[1] = v913;
      v445 = cf;
      cf = 0;
      v444[2] = v445;
      *(_QWORD *)v889 = v444;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting((uint64_t)this, v442 != 0, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1DD:
      v399 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v400 || (v401 = v399, v402 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(v8), v402 <= 0xFFu))
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (!v227)
          goto LABEL_1079;
        goto LABEL_1144;
      }
      v623 = v402;
      v624 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v624;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v625 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v625 = off_1E34B18B0;
      v625[1] = v913;
      v626 = cf;
      cf = 0;
      v625[2] = v626;
      *(_QWORD *)v889 = v625;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::setShouldEnbleSameSiteStrictEnforcementForTesting((uint64_t)this, v401, v623 != 0, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1DE:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
      {
        v372 = (char)cf;
        *(_QWORD *)v889 = v913;
        v373 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, v889);
        if (v373)
          *(_BYTE *)(v373 + 718) = v372;
      }
      goto LABEL_1079;
    case 0x1E0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v468 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v468;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v469 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v469 = off_1E34B15E0;
      v469[1] = *(_QWORD *)v889;
      v470 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v469[2] = v470;
      *(_QWORD *)v939 = v469;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setSubframeUnderTopFrameDomain((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x1E1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v411 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v411;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v412 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v412 = off_1E34B1608;
      v412[1] = *(_QWORD *)v889;
      v413 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v412[2] = v413;
      *(_QWORD *)v939 = v412;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x1E2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v341 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v341;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v342 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v342 = off_1E34B1658;
      v342[1] = *(_QWORD *)v889;
      v343 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v342[2] = v343;
      *(_QWORD *)v939 = v342;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x1E3:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v211 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v211;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v212 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v212 = off_1E34B1630;
      v212[1] = *(_QWORD *)v889;
      v213 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v212[2] = v213;
      *(_QWORD *)v939 = v212;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setSubresourceUniqueRedirectTo((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x1E4:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v303 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1075;
      *(_QWORD *)v889 = v303;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v304 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v304 = off_1E34B1950;
      v304[1] = *(_QWORD *)v889;
      v305 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v304[2] = v305;
      *(_QWORD *)v939 = v304;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setThirdPartyCNAMEDomainForTesting((uint64_t)this, (uint64_t)v913, (WTF::StringImpl *)&cf, (uint64_t *)v939);
      goto LABEL_314;
    case 0x1E5:
      v223 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v224 || (v225 = v223, v226 = IPC::Decoder::decode<JSC::MessageLevel>(v8), v226 <= 0xFFu))
      {
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v227 = v8[3];
        if (!v227)
          goto LABEL_1079;
        goto LABEL_1144;
      }
      v615 = v226;
      v616 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v616;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v617 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v617 = off_1E34B1888;
      v617[1] = v913;
      v618 = cf;
      cf = 0;
      v617[2] = v618;
      *(_QWORD *)v889 = v617;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::setThirdPartyCookieBlockingMode((uint64_t)this, v225, v615, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1E6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v403 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      *(_QWORD *)v889 = v403;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v404 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v404 = off_1E34B1680;
      v404[1] = *(_QWORD *)v889;
      v405 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v404[2] = v405;
      *(_QWORD *)v939 = v404;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setTimeToLiveUserInteraction((uint64_t)this, (uint64_t)v913, (uint64_t *)v939, *(double *)&cf);
LABEL_471:
      v499 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (!v499)
        goto LABEL_1079;
      goto LABEL_684;
    case 0x1E7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v288 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1075;
      *(_QWORD *)v889 = v288;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v289 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v289 = off_1E34B1900;
      v289[1] = *(_QWORD *)v889;
      v290 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v289[2] = v290;
      *(_QWORD *)v939 = v289;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setToSameSiteStrictCookiesForTesting((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
LABEL_314:
      v332 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v332)
        (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
LABEL_316:
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      goto LABEL_1075;
    case 0x1E8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v245 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v245;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v246 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v246 = off_1E34B16D0;
      v246[1] = *(_QWORD *)v889;
      v247 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v246[2] = v247;
      *(_QWORD *)v939 = v246;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
      goto LABEL_449;
    case 0x1E9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[1]))
        goto LABEL_451;
      v414 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)v35)
        goto LABEL_451;
      *(_QWORD *)v889 = v414;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v415 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v415 = off_1E34B16A8;
      v415[1] = *(_QWORD *)v889;
      v416 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v415[2] = v416;
      *(_QWORD *)v939 = v415;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::setTopFrameUniqueRedirectTo((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t)v915, (uint64_t *)v939);
LABEL_449:
      v471 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v471)
        (*(void (**)(uint64_t))(*(_QWORD *)v471 + 8))(v471);
LABEL_451:
      std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v913, v35);
      goto LABEL_1079;
    case 0x1EA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
        WebKit::NetworkProcess::setTrackingPreventionEnabled((uint64_t)this, (uint64_t)v913, cf);
      goto LABEL_1079;
    case 0x1EB:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v913, (uint64_t *)a3);
      if (!LOBYTE(v915[0]))
        goto LABEL_1079;
      v417 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_532;
      *(_QWORD *)v889 = v417;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v418 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v418 = off_1E34B15B8;
      v418[1] = *(_QWORD *)v889;
      v419 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v418[2] = v419;
      *(_QWORD *)v939 = v418;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]);
      WebKit::NetworkProcess::setVeryPrevalentResource((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
LABEL_529:
      v534 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v534)
        (*(void (**)(uint64_t))(*(_QWORD *)v534 + 8))(v534);
      if (LOBYTE(v915[0]))
        goto LABEL_532;
      goto LABEL_1079;
    case 0x1EC:
      v319 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v320 = (_QWORD *)v319;
      v321 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v321;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v322 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v322 = off_1E34B1A90;
      v322[1] = v913;
      v323 = cf;
      cf = 0;
      v322[2] = v323;
      *(_QWORD *)v889 = v322;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart((uint64_t)this, v320, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1ED:
      v406 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v407 = v406;
      v408 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v408;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v409 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v409 = off_1E34B13B0;
      v409[1] = v913;
      v410 = cf;
      cf = 0;
      v409[2] = v410;
      *(_QWORD *)v889 = v409;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::statisticsDatabaseHasAllTables((uint64_t)this, v407, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1EE:
      v379 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v380
        && (v381 = (unsigned __int8 *)v379,
            IPC::Decoder::decode<WebCore::PrivateClickMeasurement>(v8, (uint64_t)v889),
            v903))
      {
        v913 = (IPC::Encoder *)v381;
        LOBYTE(cf) = v889[0];
        v383 = *(_OWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        *(_QWORD *)&v889[16] = 0;
        *(_OWORD *)v915 = v383;
        *(_OWORD *)v916 = *(_OWORD *)v890;
        *(_OWORD *)&v916[9] = *(_OWORD *)&v890[9];
        v916[32] = 0;
        v918 = 0;
        if (v892[112])
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)&v916[32], (uint64_t)&v891);
          v918 = 1;
        }
        v919 = v893;
        v920 = v894;
        LOBYTE(v921) = 0;
        LOBYTE(v922) = 0;
        if (v896)
        {
          v384 = v895;
          v895 = 0;
          v921 = v384;
          LOBYTE(v922) = 1;
        }
        v385 = v898;
        v923 = v897;
        v897 = 0u;
        v898 = 0u;
        v924 = v385;
        LOBYTE(v925) = 0;
        v927 = 0;
        if (v901)
        {
          v386 = v899;
          v899 = 0uLL;
          v925 = v386;
          v387 = v900;
          v900 = 0;
          v926 = v387;
          v927 = 1;
        }
        v388 = v902;
        v902 = 0;
        v928 = v388;
        v929 = 1;
        if (!v903)
          goto LABEL_372;
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v889, v382);
        if (v929)
          goto LABEL_372;
      }
      else
      {
        LOBYTE(v913) = 0;
        v929 = 0;
      }
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v603 = v8[3];
      if (!v603)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v603 + 16))(v603, a2);
      if (!v929)
        goto LABEL_1079;
LABEL_372:
      WebKit::NetworkProcess::storePrivateClickMeasurement((uint64_t)this, (uint64_t)v913, (uint64_t)&cf);
      if (v929)
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&cf, (WTF::StringImpl *)a2);
      goto LABEL_1079;
    case 0x1EF:
      v261 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v262 = v261;
      v263 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v263;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v264 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v264 = off_1E34B19A0;
      v264[1] = v913;
      v265 = cf;
      cf = 0;
      v264[2] = v265;
      *(_QWORD *)v889 = v264;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::storeServiceWorkerRegistrations((uint64_t)this, v262, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1F0:
      v316 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)a2)
        goto LABEL_1079;
      v913 = (IPC::Encoder *)v316;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
      v317 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v317 = off_1E34B1978;
      v317[1] = v913;
      v318 = cf;
      cf = 0;
      v317[2] = v318;
      *(_QWORD *)v889 = v317;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
      WebKit::NetworkProcess::syncLocalStorage((uint64_t)this, (uint64_t *)v889);
      goto LABEL_683;
    case 0x1F3:
      v294 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v295)
        goto LABEL_998;
      v296 = (unsigned __int8 *)v294;
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v295, (uint64_t)v889);
      if (!v889[16])
        goto LABEL_998;
      v913 = (IPC::Encoder *)v296;
      cf = *(CFTypeRef *)v889;
      v298 = *(WTF::StringImpl **)&v889[8];
      *(_QWORD *)v889 = 0;
      *(_QWORD *)&v889[8] = 0;
      v915[0] = v298;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v889, v297);
      LOBYTE(v915[1]) = 1;
      v299 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (!(_BYTE)a2)
        goto LABEL_893;
      *(_QWORD *)v889 = v299;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
      v300 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v300 = off_1E34B1018;
      v300[1] = *(_QWORD *)v889;
      v301 = *(_QWORD *)&v889[8];
      *(_QWORD *)&v889[8] = 0;
      v300[2] = v301;
      *(_QWORD *)v939 = v300;
      *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
      if (!LOBYTE(v915[1]))
        goto LABEL_1220;
      WebKit::NetworkProcess::updatePrevalentDomainsToBlockCookiesFor((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
      v302 = *(_QWORD *)v939;
      *(_QWORD *)v939 = 0;
      if (v302)
        (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
      if (LOBYTE(v915[1]))
LABEL_893:
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, a2);
      goto LABEL_1079;
    case 0x1F4:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v913, (uint64_t *)a3);
      if (LOBYTE(v915[0]))
      {
        WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks();
        if (LOBYTE(v915[0]))
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v913, a2);
      }
      goto LABEL_1079;
    case 0x1F5:
      v324 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v325)
      {
        LOBYTE(v913) = 0;
        v916[48] = 0;
        goto LABEL_1121;
      }
      v326 = (unsigned __int8 *)v324;
      IPC::Decoder::decode<WebCore::ClientOrigin>(v8, v889);
      v327 = BYTE8(v891);
      if (!BYTE8(v891))
        goto LABEL_694;
      *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v8));
      if ((v39 & 0xFF00000000) != 0)
      {
        if (!BYTE8(v891))
          goto LABEL_1220;
        v328 = v39;
        v913 = (IPC::Encoder *)v326;
        LOBYTE(cf) = 0;
        *(_DWORD *)v916 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v889);
        v916[8] = 0;
        *(_DWORD *)&v916[32] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v916[8], (uint64_t)&v890[8]);
        *(_DWORD *)&v916[40] = v328;
        v327 = 1;
      }
      else
      {
        v327 = 0;
LABEL_694:
        LOBYTE(v913) = 0;
      }
      v916[48] = v327;
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v889);
      if (v916[48])
        goto LABEL_696;
LABEL_1121:
      a2 = (unsigned __int8 **)*v8;
      a3 = (IPC::Decoder *)v8[1];
      *v8 = 0;
      v8[1] = 0;
      v804 = v8[3];
      if (!v804)
        goto LABEL_1079;
      if (!a3)
        goto LABEL_1079;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v804 + 16))(v804, a2);
      if (!v916[48])
        goto LABEL_1079;
LABEL_696:
      v628 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v889 = v628;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
        v629 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v629 = off_1E34B0EB0;
        v629[1] = *(_QWORD *)v889;
        v630 = *(_QWORD *)&v889[8];
        *(_QWORD *)&v889[8] = 0;
        v629[2] = v630;
        *(_QWORD *)v939 = v629;
        *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
        if (!v916[48])
          goto LABEL_1220;
        WebKit::NetworkProcess::websiteDataOriginDirectoryForTesting((unsigned __int8 *)this, v913, (uint64_t)&cf, *(unsigned int *)&v916[40], (unsigned __int8 **)v939);
        v631 = *(_QWORD *)v939;
        *(_QWORD *)v939 = 0;
        if (v631)
          (*(void (**)(uint64_t))(*(_QWORD *)v631 + 8))(v631);
      }
      if (v916[48])
      {
        if (*(_DWORD *)&v916[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[*(unsigned int *)&v916[32]])(v889, &v916[8]);
        *(_DWORD *)&v916[32] = -1;
        if (*(_DWORD *)v916 != -1)
LABEL_769:
          ((void (*)(_BYTE *, CFTypeRef *))off_1E34B0E40[*(unsigned int *)v916])(v889, &cf);
      }
      goto LABEL_1079;
    default:
      if (*((unsigned __int16 *)a3 + 25) <= 0x19Fu)
      {
        if (*((unsigned __int16 *)a3 + 25) > 0x184u)
        {
          if (*((unsigned __int16 *)a3 + 25) > 0x187u)
          {
            if (v16 == 392)
            {
              v733 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
              if (!(_BYTE)a2)
                goto LABEL_1079;
              v734 = v733;
              v735 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
              if (!(_BYTE)a2)
                goto LABEL_1079;
              v913 = (IPC::Encoder *)v735;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
              v736 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v736 = off_1E34B1DB0;
              v736[1] = v913;
              v737 = cf;
              cf = 0;
              v736[2] = v737;
              *(_QWORD *)v889 = v736;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
              WebKit::NetworkProcess::getPendingPushMessages((uint64_t)this, v734, (uint64_t *)v889);
              goto LABEL_683;
            }
            if (v16 != 399)
              goto LABEL_1079;
            IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>((uint64_t *)a3, &v913);
            if (!v916[16])
              goto LABEL_1079;
            v664 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if ((_BYTE)a2)
            {
              *(_QWORD *)v889 = v664;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
              v665 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v665 = off_1E34B1F68;
              v665[1] = *(_QWORD *)v889;
              v666 = *(_QWORD *)&v889[8];
              *(_QWORD *)&v889[8] = 0;
              v665[2] = v666;
              *(_QWORD *)v939 = v665;
              *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
              if (!v916[16])
                goto LABEL_1220;
              WebKit::NetworkProcess::hasPushSubscriptionForTesting((uint64_t)this, (uint64_t)v913, (uint64_t *)&cf, (uint64_t *)v939);
              v667 = *(_QWORD *)v939;
              *(_QWORD *)v939 = 0;
              if (v667)
                (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
            }
            if (!v916[16])
              goto LABEL_1079;
            goto LABEL_970;
          }
          if (v16 == 389)
          {
            v728 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
            if (!(_BYTE)a2)
              goto LABEL_1079;
            v729 = v728;
            v730 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if (!(_BYTE)a2)
              goto LABEL_1079;
            v913 = (IPC::Encoder *)v730;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
            v731 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v731 = off_1E34B1E28;
            v731[1] = v913;
            v732 = cf;
            cf = 0;
            v731[2] = v732;
            *(_QWORD *)v889 = v731;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
            WebKit::NetworkProcess::getAllBackgroundFetchIdentifiers((uint64_t)this, v729, (uint64_t *)v889);
            goto LABEL_683;
          }
          if (v16 != 391)
            goto LABEL_1079;
          IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
          if (!LOBYTE(v915[0]))
            goto LABEL_1079;
          v643 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
          if (!(_BYTE)a2)
            goto LABEL_969;
          *(_QWORD *)v889 = v643;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
          v644 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v644 = off_1E34B1E50;
          v644[1] = *(_QWORD *)v889;
          v645 = *(_QWORD *)&v889[8];
          *(_QWORD *)&v889[8] = 0;
          v644[2] = v645;
          *(_QWORD *)v939 = v644;
          *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
          if (LOBYTE(v915[0]))
          {
            WebKit::NetworkProcess::getBackgroundFetchState((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
            goto LABEL_967;
          }
        }
        else
        {
          if (*((unsigned __int16 *)a3 + 25) > 0x169u)
          {
            switch(*((_WORD *)a3 + 25))
            {
              case 0x16A:
                v17 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
                if ((_BYTE)a2)
                {
                  v18 = v17;
                  v19 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                  if ((_BYTE)a2)
                  {
                    v913 = (IPC::Encoder *)v19;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
                    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v20 = off_1E34B1D60;
                    v20[1] = v913;
                    v21 = cf;
                    cf = 0;
                    v20[2] = v21;
                    *(_QWORD *)v889 = v20;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
                    WebKit::NetworkProcess::clearAppPrivacyReportTestingData((uint64_t)this, v18, (uint64_t *)v889);
                    goto LABEL_683;
                  }
                }
                break;
              case 0x16B:
                v722 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
                if ((_BYTE)a2)
                {
                  v913 = (IPC::Encoder *)v722;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
                  v723 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v723 = off_1E34B1D10;
                  v723[1] = v913;
                  v724 = cf;
                  cf = 0;
                  v723[2] = v724;
                  *(_QWORD *)v889 = v723;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
                  WebKit::NetworkProcess::clearBundleIdentifier(this, (uint64_t *)v889);
                  goto LABEL_683;
                }
                break;
              case 0x16E:
                v720 = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
                if ((_BYTE)a2)
                {
                  v913 = (IPC::Encoder *)v720;
                  v721 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, &v913);
                  if (v721)
                  {
                    v578 = *(void (**)(void))(*(_QWORD *)v721 + 264);
                    goto LABEL_582;
                  }
                }
                break;
              case 0x171:
                IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
                if (LOBYTE(v915[0]))
                {
                  v725 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                  if (!(_BYTE)a2)
                    goto LABEL_969;
                  *(_QWORD *)v889 = v725;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
                  v726 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v726 = off_1E34B1EF0;
                  v726[1] = *(_QWORD *)v889;
                  v727 = *(_QWORD *)&v889[8];
                  *(_QWORD *)&v889[8] = 0;
                  v726[2] = v727;
                  *(_QWORD *)v939 = v726;
                  *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
                  if (LOBYTE(v915[0]))
                  {
                    WebKit::NetworkProcess::clickBackgroundFetch((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
                    goto LABEL_967;
                  }
                  goto LABEL_1220;
                }
                break;
              case 0x175:
                v715 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
                if ((_BYTE)a2)
                {
                  v716 = v715;
                  v717 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                  if ((_BYTE)a2)
                  {
                    v913 = (IPC::Encoder *)v717;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
                    v718 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v718 = off_1E34B1D88;
                    v718[1] = v913;
                    v719 = cf;
                    cf = 0;
                    v718[2] = v719;
                    *(_QWORD *)v889 = v718;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
                    WebKit::NetworkProcess::countNonDefaultSessionSets((uint64_t)this, v716, (uint64_t *)v889);
                    goto LABEL_683;
                  }
                }
                break;
              default:
                goto LABEL_1079;
            }
            goto LABEL_1079;
          }
          if (v16 != 351)
          {
            if (v16 != 353)
            {
              if (v16 != 356)
                goto LABEL_1079;
              v654 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
              if (!(_BYTE)a2)
                goto LABEL_1079;
              v655 = v654;
              v656 = (unsigned __int8 *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
              if (!(_BYTE)a2)
                goto LABEL_1079;
              v913 = (IPC::Encoder *)v656;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&cf, v9);
              v657 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v657 = off_1E34B1D38;
              v657[1] = v913;
              v658 = cf;
              cf = 0;
              v657[2] = v658;
              *(_QWORD *)v889 = v657;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&cf);
              WebKit::NetworkProcess::appPrivacyReportTestingData((uint64_t)this, v655, (uint64_t *)v889);
LABEL_683:
              v499 = *(_QWORD *)v889;
              *(_QWORD *)v889 = 0;
              if (v499)
LABEL_684:
                (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
              goto LABEL_1079;
            }
            v749 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v750)
            {
              v751 = (unsigned __int8 *)v749;
              v752 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
              if (v753)
              {
                v754 = (const void *)v752;
                IPC::ArgumentCoder<WebKit::WebPageNetworkParameters,void>::decode(v8, (uint64_t)v889);
                if (v889[8])
                {
                  v913 = (IPC::Encoder *)v751;
                  cf = v754;
                  v915[0] = *(WTF::StringImpl **)v889;
                  LOBYTE(v915[1]) = 1;
                  *(_QWORD *)v889 = v751;
                  v755 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, v889);
                  if (v755)
                  {
                    (*(void (**)(uint64_t, const void *, WTF::StringImpl **))(*(_QWORD *)v755 + 240))(v755, v754, v915);
                    if (!LOBYTE(v915[1]))
                      goto LABEL_1079;
                  }
                  goto LABEL_957;
                }
                v870 = *v8;
                v871 = v8[1];
                *v8 = 0;
                v8[1] = 0;
                v872 = v8[3];
                if (v872 && v871)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v872 + 16))(v872, v870);
              }
            }
LABEL_1105:
            a2 = (unsigned __int8 **)*v8;
            a3 = (IPC::Decoder *)v8[1];
            *v8 = 0;
            v8[1] = 0;
            v227 = v8[3];
            if (!v227 || !a3)
              goto LABEL_1079;
            goto LABEL_1145;
          }
          IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
          if (!LOBYTE(v915[0]))
            goto LABEL_1079;
          v756 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
          if (!(_BYTE)a2)
            goto LABEL_969;
          *(_QWORD *)v889 = v756;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
          v757 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v757 = off_1E34B1E78;
          v757[1] = *(_QWORD *)v889;
          v758 = *(_QWORD *)&v889[8];
          *(_QWORD *)&v889[8] = 0;
          v757[2] = v758;
          *(_QWORD *)v939 = v757;
          *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
          if (LOBYTE(v915[0]))
          {
            WebKit::NetworkProcess::abortBackgroundFetch((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
LABEL_967:
            v762 = *(_QWORD *)v939;
            *(_QWORD *)v939 = 0;
            if (v762)
              (*(void (**)(uint64_t))(*(_QWORD *)v762 + 8))(v762);
LABEL_969:
            if (!LOBYTE(v915[0]))
              goto LABEL_1079;
LABEL_970:
            v535 = (WTF::StringImpl *)cf;
            cf = 0;
            if (!v535)
              goto LABEL_1079;
            goto LABEL_971;
          }
        }
LABEL_1220:
        __break(1u);
LABEL_1221:
        WTF::StringImpl::destroy((WTF::StringImpl *)v39, (WTF::StringImpl *)a2);
LABEL_1222:
        v863 = *(WTF::StringImpl **)v916;
        *(_QWORD *)v916 = 0;
        if (v863)
        {
          if (*(_DWORD *)v863 == 2)
            WTF::StringImpl::destroy(v863, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v863 -= 2;
        }
        if (LOBYTE(v915[1]))
        {
          v864 = (WTF *)cf;
          if (cf)
          {
            cf = 0;
            LODWORD(v915[0]) = 0;
            WTF::fastFree(v864, a2);
          }
        }
        goto LABEL_1079;
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x1D3u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x1A4:
            IPC::Decoder::decode<WebCore::NotificationData>((uint64_t *)a3, v889);
            if ((_BYTE)v897)
            {
              *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<BOOL>>(v8));
              if ((unsigned __int16)v39 > 0xFFu)
              {
                if (!(_BYTE)v897)
                  goto LABEL_1220;
                v779 = v39;
                std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>((uint64_t)&v913, (uint64_t)v889);
                LOBYTE(v922) = v779;
                v613 = 1;
              }
              else
              {
                v613 = 0;
                LOBYTE(v913) = 0;
              }
              BYTE8(v923) = v613;
              if ((_BYTE)v897)
              {
                WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v889, a2);
                v613 = BYTE8(v923);
              }
              if (v613)
                goto LABEL_1040;
            }
            else
            {
              LOBYTE(v913) = 0;
              BYTE8(v923) = 0;
            }
            a2 = (unsigned __int8 **)*v8;
            a3 = (IPC::Decoder *)v8[1];
            *v8 = 0;
            v8[1] = 0;
            v778 = v8[3];
            if (!v778)
              goto LABEL_1079;
            if (!a3)
              goto LABEL_1079;
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v778 + 16))(v778, a2);
            if (!BYTE8(v923))
              goto LABEL_1079;
LABEL_1040:
            v780 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if ((_BYTE)a2)
            {
              *(_QWORD *)v889 = v780;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
              v781 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v781 = off_1E34B1E00;
              v781[1] = *(_QWORD *)v889;
              v782 = *(_QWORD *)&v889[8];
              *(_QWORD *)&v889[8] = 0;
              v781[2] = v782;
              *(_QWORD *)v939 = v781;
              *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
              if (!BYTE8(v923))
                goto LABEL_1220;
              WebKit::NetworkProcess::processNotificationEvent((uint64_t)this, (uint64_t)&v913, v922, (uint64_t *)v939);
              v783 = *(_QWORD *)v939;
              *(_QWORD *)v939 = 0;
              if (v783)
                (*(void (**)(uint64_t))(*(_QWORD *)v783 + 8))(v783);
            }
            if (BYTE8(v923))
              WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v913, a2);
            goto LABEL_1079;
          case 0x1A5:
            v692 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (!v693)
            {
              LOBYTE(v913) = 0;
              LOBYTE(v921) = 0;
              goto LABEL_1202;
            }
            v694 = (unsigned __int8 *)v692;
            IPC::Decoder::decode<WebKit::WebPushMessage>(v8, v889);
            v696 = BYTE8(v894);
            if (!BYTE8(v894))
              goto LABEL_1210;
            v697 = v8[1];
            v695 = (WTF::StringImpl *)*v8;
            v698 = v8[2] - *v8;
            if (v697 <= v698)
            {
              v854 = 0;
              v855 = 0;
              *v8 = 0;
              v8[1] = 0;
              v856 = v8[3];
              if (v856)
              {
                if (v697)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v856 + 16))(v856);
                  v855 = *v8;
                  v854 = v8[1];
                }
                else
                {
                  v854 = 0;
                  v855 = 0;
                }
              }
            }
            else
            {
              v699 = (unsigned __int8 *)v695 + v698;
              v8[2] = (uint64_t)(v699 + 1);
              if (v695)
              {
                v700 = *v699;
                if (v700 < 3)
                {
                  v913 = (IPC::Encoder *)v694;
                  LOBYTE(cf) = 0;
                  LOBYTE(v915[1]) = 0;
                  if (v889[16])
                  {
                    cf = *(CFTypeRef *)v889;
                    v701 = *(WTF::StringImpl **)&v889[8];
                    *(_QWORD *)v889 = 0;
                    *(_QWORD *)&v889[8] = 0;
                    v915[0] = v701;
                    LOBYTE(v915[1]) = 1;
                  }
                  v702 = *(_OWORD *)v890;
                  *(_OWORD *)v890 = 0uLL;
                  *(_OWORD *)v916 = v702;
                  *(_OWORD *)&v916[16] = *(_OWORD *)&v890[16];
                  *(_OWORD *)&v916[32] = v891;
                  *(_DWORD *)&v890[16] &= ~1u;
                  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v916[48], (uint64_t)v892);
                  BYTE8(v920) = v700;
                  v696 = 1;
                  goto LABEL_1211;
                }
LABEL_1208:
                *v8 = 0;
                v8[1] = 0;
                v858 = v8[3];
                if (v858 && v697)
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v858 + 16))(v858, v695);
                v696 = 0;
LABEL_1210:
                LOBYTE(v913) = 0;
LABEL_1211:
                LOBYTE(v921) = v696;
                std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v889, v695);
                if ((_BYTE)v921)
                  goto LABEL_1212;
LABEL_1202:
                a2 = (unsigned __int8 **)*v8;
                a3 = (IPC::Decoder *)v8[1];
                *v8 = 0;
                v8[1] = 0;
                v853 = v8[3];
                if (!v853)
                  goto LABEL_1079;
                if (!a3)
                  goto LABEL_1079;
                (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v853 + 16))(v853, a2);
                if (!(_BYTE)v921)
                  goto LABEL_1079;
LABEL_1212:
                v859 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                if ((_BYTE)a2)
                {
                  *(_QWORD *)v889 = v859;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
                  v860 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v860 = off_1E34B1DD8;
                  v860[1] = *(_QWORD *)v889;
                  v861 = *(_QWORD *)&v889[8];
                  *(_QWORD *)&v889[8] = 0;
                  v860[2] = v861;
                  *(_QWORD *)v939 = v860;
                  *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
                  if (!(_BYTE)v921)
                    goto LABEL_1220;
                  WebKit::NetworkProcess::processPushMessage((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, BYTE8(v920), (uint64_t *)v939);
                  v862 = *(_QWORD *)v939;
                  *(_QWORD *)v939 = 0;
                  if (v862)
                    (*(void (**)(uint64_t))(*(_QWORD *)v862 + 8))(v862);
                }
                if ((_BYTE)v921)
                {
                  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v916[48], (WTF::StringImpl *)a2);
                  v39 = *(uint64_t *)&v916[8];
                  *(_QWORD *)&v916[8] = 0;
                  if (*(double *)&v39 == 0.0)
                    goto LABEL_1222;
                  if (*(_DWORD *)v39 != 2)
                  {
                    *(_DWORD *)v39 -= 2;
                    goto LABEL_1222;
                  }
                  goto LABEL_1221;
                }
                goto LABEL_1079;
              }
              v854 = v697;
              v855 = 0;
            }
            v697 = 0;
            v695 = 0;
            *v8 = 0;
            v8[1] = 0;
            v857 = v8[3];
            if (v857)
            {
              if (v854)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v857 + 16))(v857, v855, v854);
                v695 = (WTF::StringImpl *)*v8;
                v697 = v8[1];
              }
              else
              {
                v697 = 0;
                v695 = 0;
              }
            }
            goto LABEL_1208;
          case 0x1A6:
          case 0x1A7:
          case 0x1A8:
          case 0x1A9:
          case 0x1AA:
            goto LABEL_1079;
          case 0x1AB:
            v703 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v704
              && (v705 = (unsigned __int8 *)v703, IPC::Decoder::decode<WebCore::SecurityOriginData>(v8, v889), v890[8]))
            {
              v913 = (IPC::Encoder *)v705;
              LOBYTE(cf) = 0;
              *(_DWORD *)v916 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v889);
              v916[8] = 1;
              if (!v890[8])
                goto LABEL_910;
              if (*(_DWORD *)v890 == -1)
                goto LABEL_910;
              ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[*(unsigned int *)v890])(v939, v889);
              if (v916[8])
                goto LABEL_910;
            }
            else
            {
              LOBYTE(v913) = 0;
              v916[8] = 0;
            }
            a2 = (unsigned __int8 **)*v8;
            a3 = (IPC::Decoder *)v8[1];
            *v8 = 0;
            v8[1] = 0;
            v771 = v8[3];
            if (!v771)
              goto LABEL_1079;
            if (!a3)
              goto LABEL_1079;
            (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v771 + 16))(v771, a2);
            if (!v916[8])
              goto LABEL_1079;
LABEL_910:
            v706 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if ((_BYTE)a2)
            {
              *(_QWORD *)v889 = v706;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
              v707 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v707 = off_1E34B1F40;
              v707[1] = *(_QWORD *)v889;
              v708 = *(_QWORD *)&v889[8];
              *(_QWORD *)&v889[8] = 0;
              v707[2] = v708;
              *(_QWORD *)v939 = v707;
              *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
              if (!v916[8])
                goto LABEL_1220;
              WebKit::NetworkProcess::removePushSubscriptionsForOrigin((uint64_t)this, (uint64_t)v913, (uint64_t)&cf, (uint64_t *)v939);
              v709 = *(_QWORD *)v939;
              *(_QWORD *)v939 = 0;
              if (v709)
                (*(void (**)(uint64_t))(*(_QWORD *)v709 + 8))(v709);
            }
            if (v916[8])
              goto LABEL_915;
            goto LABEL_1079;
          case 0x1AC:
            v710 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v711
              && (v712 = v710,
                  v713 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8),
                  v714))
            {
              WebKit::NetworkProcess::removeWebPageNetworkParameters((uint64_t)this, v712, v713);
            }
            else
            {
              a2 = (unsigned __int8 **)*v8;
              a3 = (IPC::Decoder *)v8[1];
              *v8 = 0;
              v8[1] = 0;
              v227 = v8[3];
              if (v227)
                goto LABEL_995;
            }
            goto LABEL_1079;
          default:
            if (v16 == 416)
            {
              IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
              if (LOBYTE(v915[0]))
              {
                v759 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                if (!(_BYTE)a2)
                  goto LABEL_969;
                *(_QWORD *)v889 = v759;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
                v760 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v760 = off_1E34B1EA0;
                v760[1] = *(_QWORD *)v889;
                v761 = *(_QWORD *)&v889[8];
                *(_QWORD *)&v889[8] = 0;
                v760[2] = v761;
                *(_QWORD *)v939 = v760;
                *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
                if (LOBYTE(v915[0]))
                {
                  WebKit::NetworkProcess::pauseBackgroundFetch((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
                  goto LABEL_967;
                }
                goto LABEL_1220;
              }
            }
            else if (v16 == 435)
            {
              IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, &v913);
              if (LOBYTE(v915[0]))
              {
                v661 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                if (!(_BYTE)a2)
                  goto LABEL_969;
                *(_QWORD *)v889 = v661;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
                v662 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v662 = off_1E34B1EC8;
                v662[1] = *(_QWORD *)v889;
                v663 = *(_QWORD *)&v889[8];
                *(_QWORD *)&v889[8] = 0;
                v662[2] = v663;
                *(_QWORD *)v939 = v662;
                *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
                if (LOBYTE(v915[0]))
                {
                  WebKit::NetworkProcess::resumeBackgroundFetch((uint64_t)this, (uint64_t)v913, (WTF::StringImpl **)&cf, (uint64_t *)v939);
                  goto LABEL_967;
                }
                goto LABEL_1220;
              }
            }
            goto LABEL_1079;
        }
      }
      if (*((unsigned __int16 *)a3 + 25) > 0x1DEu)
      {
        if (v16 == 479)
        {
          IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v913, (uint64_t *)a3);
          if (LOBYTE(v915[0]))
            WebKit::NetworkProcess::setStorageSiteValidationEnabled((uint64_t)this, (uint64_t)v913, (char)cf);
          goto LABEL_1079;
        }
        if (v16 != 497)
        {
          if (v16 != 498)
            goto LABEL_1079;
          IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v913);
          if (!(_BYTE)cf)
            goto LABEL_1079;
          v632 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
          if ((_BYTE)a2)
          {
            *(_QWORD *)v889 = v632;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
            v633 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v633 = off_1E34B1CE8;
            v633[1] = *(_QWORD *)v889;
            v634 = *(_QWORD *)&v889[8];
            *(_QWORD *)&v889[8] = 0;
            v633[2] = v634;
            *(_QWORD *)v939 = v633;
            *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
            if (!(_BYTE)cf)
              goto LABEL_1220;
            WebKit::NetworkProcess::updateBundleIdentifier(this, (WebCore *)&v913, (uint64_t *)v939);
            v635 = *(_QWORD *)v939;
            *(_QWORD *)v939 = 0;
            if (v635)
              (*(void (**)(uint64_t))(*(_QWORD *)v635 + 8))(v635);
          }
          if (!(_BYTE)cf)
            goto LABEL_1079;
          v535 = v913;
          v913 = 0;
          if (!v535)
            goto LABEL_1079;
          goto LABEL_971;
        }
        v738 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
        if (v738 < 0x100u)
          goto LABEL_1105;
        v739 = v738;
        v740 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!v741)
          goto LABEL_1105;
        v742 = (const void *)v740;
        IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v889);
        if (!v889[8])
        {
          LOBYTE(v913) = 0;
          goto LABEL_1105;
        }
        *(double *)&v39 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8));
        if (!(_BYTE)a2)
        {
          LOBYTE(v913) = 0;
          v916[0] = 0;
          if (v889[8])
          {
            v794 = *(WTF::StringImpl **)v889;
            *(_QWORD *)v889 = 0;
            if (v794)
            {
              if (*(_DWORD *)v794 == 2)
                WTF::StringImpl::destroy(v794, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v794 -= 2;
            }
          }
          goto LABEL_1105;
        }
        if (v889[8])
        {
          LOBYTE(v913) = v739;
          cf = v742;
          v915[0] = *(WTF::StringImpl **)v889;
          v915[1] = (WTF::StringImpl *)v39;
          v916[0] = 1;
          WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible((uint64_t)this, v739, (uint64_t)v742, v915, v39);
          if (!v916[0])
            goto LABEL_1079;
LABEL_957:
          v535 = v915[0];
          v915[0] = 0;
          if (!v535)
            goto LABEL_1079;
LABEL_971:
          v763 = *(_DWORD *)v535 - 2;
          if (*(_DWORD *)v535 != 2)
            goto LABEL_1077;
          WTF::StringImpl::destroy(v535, (WTF::StringImpl *)a2);
          goto LABEL_1079;
        }
        goto LABEL_1220;
      }
      if (v16 == 468)
      {
        v743 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v744)
        {
          v745 = (unsigned __int8 *)v743;
          IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v744, (uint64_t)v889);
          if (v889[16])
          {
            v913 = (IPC::Encoder *)v745;
            cf = *(CFTypeRef *)v889;
            v747 = *(WTF::StringImpl **)&v889[8];
            *(_QWORD *)v889 = 0;
            *(_QWORD *)&v889[8] = 0;
            v915[0] = v747;
            WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v889, v746);
            LOBYTE(v915[1]) = 1;
            *(_QWORD *)v889 = v913;
            v748 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, v889);
            if (!v748
              || ((*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v748 + 272))(v748, &cf), LOBYTE(v915[1])))
            {
              WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, a2);
            }
            goto LABEL_1079;
          }
        }
        goto LABEL_1105;
      }
      if (v16 != 470)
        goto LABEL_1079;
      v668 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v669
        || (v670 = (unsigned __int8 *)v668, IPC::Decoder::decode<WebCore::SecurityOriginData>(v8, v889), !v890[8]))
      {
        LOBYTE(v913) = 0;
        v916[16] = 0;
LABEL_1026:
        a2 = (unsigned __int8 **)*v8;
        a3 = (IPC::Decoder *)v8[1];
        *v8 = 0;
        v8[1] = 0;
        v777 = v8[3];
        if (!v777)
          goto LABEL_1079;
        if (!a3)
          goto LABEL_1079;
        (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v777 + 16))(v777, a2);
        if (!v916[16])
          goto LABEL_1079;
LABEL_848:
        v678 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)a2)
        {
          *(_QWORD *)v889 = v678;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v889[8], v9);
          v679 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v679 = off_1E34B1F18;
          v679[1] = *(_QWORD *)v889;
          v680 = *(_QWORD *)&v889[8];
          *(_QWORD *)&v889[8] = 0;
          v679[2] = v680;
          *(_QWORD *)v939 = v679;
          *(double *)&v39 = COERCE_DOUBLE(WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v889[8]));
          if (!v916[16])
            goto LABEL_1220;
          WebKit::NetworkProcess::setPushAndNotificationsEnabledForOrigin((uint64_t)this, (uint64_t)v913, (WebCore::SecurityOriginData *)&cf, v916[8], (uint64_t *)v939);
          v681 = *(_QWORD *)v939;
          *(_QWORD *)v939 = 0;
          if (v681)
            (*(void (**)(uint64_t))(*(_QWORD *)v681 + 8))(v681);
        }
        if (!v916[16])
          goto LABEL_1079;
LABEL_915:
        v652 = *(unsigned int *)v916;
        if (*(_DWORD *)v916 == -1)
          goto LABEL_1079;
LABEL_786:
        ((void (*)(_BYTE *, CFTypeRef *))off_1E34B0E40[v652])(v889, &cf);
        goto LABEL_1079;
      }
      v671 = v8[1];
      v672 = *v8;
      v673 = v8[2] - *v8;
      if (v671 <= v673)
      {
        v865 = 0;
        v866 = 0;
        *v8 = 0;
        v8[1] = 0;
        v867 = v8[3];
        if (v867)
        {
          if (v671)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v867 + 16))(v867);
            v866 = *v8;
            v865 = v8[1];
          }
          else
          {
            v865 = 0;
            v866 = 0;
          }
        }
      }
      else
      {
        v674 = (unsigned __int8 *)(v672 + v673);
        v8[2] = (uint64_t)(v674 + 1);
        if (v672)
        {
          v675 = *v674;
          if (v675 < 2)
          {
            v676 = v675 != 0;
            v913 = (IPC::Encoder *)v670;
            LOBYTE(cf) = 0;
            *(_DWORD *)v916 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v889);
            v916[8] = v676;
            v677 = 1;
            goto LABEL_844;
          }
LABEL_1233:
          *v8 = 0;
          v8[1] = 0;
          v869 = v8[3];
          if (v869 && v671)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v869 + 16))(v869, v672);
          v677 = 0;
          LOBYTE(v913) = 0;
LABEL_844:
          v916[16] = v677;
          if (v890[8] && *(_DWORD *)v890 != -1)
          {
            ((void (*)(_BYTE *, _BYTE *))off_1E34B0E40[*(unsigned int *)v890])(v939, v889);
            v677 = v916[16];
          }
          if (v677)
            goto LABEL_848;
          goto LABEL_1026;
        }
        v865 = v671;
        v866 = 0;
      }
      v671 = 0;
      v672 = 0;
      *v8 = 0;
      v8[1] = 0;
      v868 = v8[3];
      if (v868)
      {
        if (v865)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v868 + 16))(v868, v866, v865);
          v672 = *v8;
          v671 = v8[1];
        }
        else
        {
          v671 = 0;
          v672 = 0;
        }
      }
      goto LABEL_1233;
  }
}

uint64_t `non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void WebKit::WebProcessProxy::didReceiveWebProcessProxyMessage(WebKit::WebProcessProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  unint64_t v9;
  char v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  void *v16;
  void *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unsigned __int8 **v40;
  WTF::StringImpl *v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const WTF::String *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  char v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  void *v69;
  void *v70;
  WTF::StringImpl *v71;
  __int128 v72;
  char v73;
  WTF::StringImpl *v74[2];
  unsigned __int8 v75;
  WTF::StringImpl *v76[2];
  unsigned __int8 **v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[24];
  unsigned __int8 v81;
  char v82;
  WTF::StringImpl *v83;
  unsigned __int8 **v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned int *)((char *)this + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  switch(*((_WORD *)a3 + 25))
  {
    case 0x9F0:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v76);
      if (!(_BYTE)v77)
        goto LABEL_143;
      WebKit::WebProcessProxy::cacheMediaMIMETypes((uint64_t)this, (uint64_t)v76);
      if (!(_BYTE)v77)
        goto LABEL_143;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v76, v8);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F1:
      v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v10 && (v11 = (WTF::StringImpl *)v9, IPC::Decoder::decode<IPC::ConnectionHandle>(a3, &v83), BYTE4(v83)))
      {
        v76[0] = v11;
        WTF::MachSendRight::MachSendRight();
        LOBYTE(v77) = 1;
        if (BYTE4(v83))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v83);
      }
      else
      {
        LOBYTE(v76[0]) = 0;
        LOBYTE(v77) = 0;
        v53 = *(_QWORD *)a3;
        v54 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v55 = *((_QWORD *)a3 + 3);
        if (!v55)
          goto LABEL_143;
        if (!v54)
          goto LABEL_143;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
        if (!(_BYTE)v77)
          goto LABEL_143;
      }
      WebKit::WebProcessProxy::createGPUProcessConnection((uint64_t)this, (uint64_t)v76[0], (unint64_t)&v76[1]);
      if (!(_BYTE)v77)
        goto LABEL_143;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v76[1]);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F2:
      v12 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v13)
        goto LABEL_143;
      WebKit::WebProcessProxy::createSpeechRecognitionServer((uint64_t)this, v12);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F3:
      v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v15)
        goto LABEL_143;
      WebKit::WebProcessProxy::destroySpeechRecognitionServer((uint64_t)this, v14);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F4:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((uint64_t *)a3, (uint64_t)v74);
      if (LOBYTE(v74[1]))
      {
        IPC::Decoder::decode<WebCore::PrewarmInformation>((uint64_t *)a3, v16, (uint64_t)&v83);
        v18 = v87;
        if (!v87)
        {
          v24 = 0;
          LOBYTE(v76[0]) = 0;
          goto LABEL_114;
        }
        if (LOBYTE(v74[1]))
        {
          v19 = v74[0];
          v74[0] = 0;
          v20 = v83;
          v83 = 0;
          v76[0] = v19;
          v76[1] = v20;
          v21 = v84;
          v84 = 0;
          v77 = v21;
          v22 = v85;
          v85 = 0;
          v78 = v22;
          v23 = v86;
          v86 = 0;
          v24 = 1;
          v79 = v23;
LABEL_114:
          v80[0] = v24;
          std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v17);
          if (LOBYTE(v74[1]))
          {
            v66 = v74[0];
            v74[0] = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
                WTF::StringImpl::destroy(v66, v65);
              else
                *(_DWORD *)v66 -= 2;
            }
          }
          if (v18)
            goto LABEL_137;
          goto LABEL_110;
        }
LABEL_148:
        __break(1u);
      }
      v24 = 0;
      LOBYTE(v76[0]) = 0;
      v80[0] = 0;
LABEL_110:
      v62 = *(_QWORD *)a3;
      v63 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v64 = *((_QWORD *)a3 + 3);
      if (v64 && v63)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62);
LABEL_137:
      if (!v24)
        goto LABEL_143;
      WebKit::WebProcessProxy::didCollectPrewarmInformation((uint64_t)this, v76, (uint64_t)&v76[1]);
      if (!v80[0])
        goto LABEL_143;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v69);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76[1], v70);
LABEL_140:
      v71 = v76[0];
      v76[0] = 0;
      if (!v71)
      {
LABEL_143:
        if (!this)
          return;
        goto LABEL_144;
      }
      if (*(_DWORD *)v71 != 2)
      {
        *(_DWORD *)v71 -= 2;
        goto LABEL_143;
      }
      WTF::StringImpl::destroy(v71, v48);
      if (this)
LABEL_144:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      return;
    case 0x9F5:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        goto LABEL_75;
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_75;
      if (!(_BYTE)v77)
        goto LABEL_148;
      WebKit::WebProcessProxy::didDestroyFrame((uint64_t)this, (uint64_t)a2, (uint64_t)v76[0], (uint64_t)v76[1], v25);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F6:
      v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v28)
        goto LABEL_75;
      v29 = v27;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        goto LABEL_75;
      WebKit::WebProcessProxy::didDestroyUserGestureToken((uint64_t)this, v29, (uint64_t)v76[0], (uint64_t)v76[1]);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F7:
      WebKit::WebProcessProxy::didExceedActiveMemoryLimit(this);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F8:
      WebKit::WebProcessProxy::didExceedCPULimit(this);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9F9:
      WebKit::WebProcessProxy::didExceedInactiveMemoryLimit(this);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9FA:
      v30 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (!v31)
        goto LABEL_143;
      WebKit::WebProcessProxy::didExceedMemoryFootprintThreshold(this, v30);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9FB:
      WebKit::BackgroundProcessResponsivenessTimer::didReceiveBackgroundResponsivenessPong((WebKit::WebProcessProxy *)((char *)this + 416));
      if (!this)
        return;
      goto LABEL_144;
    case 0x9FC:
      v32 = *((_QWORD *)this + 17);
      if (v32 && *(_BYTE *)(v32 + 104) || !*((_QWORD *)this + 18))
        goto LABEL_144;
      v33 = *((_DWORD *)this + 164) + 1;
      goto LABEL_53;
    case 0x9FD:
      v34 = *((_QWORD *)this + 17);
      if (v34 && *(_BYTE *)(v34 + 104) || !*((_QWORD *)this + 18))
        goto LABEL_144;
      v33 = *((_DWORD *)this + 164) - 1;
LABEL_53:
      *((_DWORD *)this + 164) = v33;
      goto LABEL_144;
    case 0x9FE:
      v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v36)
        goto LABEL_75;
      WebKit::WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive(this, v35);
      if (!this)
        return;
      goto LABEL_144;
    case 0x9FF:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>((uint64_t *)a3, v76);
      if (!v80[8])
        goto LABEL_62;
      v38 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v37)
        goto LABEL_62;
      v83 = (WTF::StringImpl *)v38;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (unsigned __int8 **)a2);
      v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v39 = off_1E35051C0;
      *((_QWORD *)v39 + 1) = v83;
      v40 = v84;
      v84 = 0;
      *((_QWORD *)v39 + 2) = v40;
      v74[0] = v39;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v84);
      if (!v80[8])
        goto LABEL_148;
      WebKit::WebProcessProxy::getNotifications((uint64_t)this, (WebCore::SecurityOriginData *)v76, (const WTF::StringImpl *)v80, (uint64_t *)v74);
      v41 = v74[0];
      v74[0] = 0;
      if (v41)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
LABEL_62:
      std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v37);
      if (!this)
        return;
      goto LABEL_144;
    case 0xA00:
      v42 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v42 < 0x100u)
        goto LABEL_143;
      *((_BYTE *)this + 760) = v42 != 0;
      goto LABEL_144;
    case 0xA01:
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v72);
      if (v73 && (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)a3, &v83), v87))
      {
        IPC::Decoder::decode<std::optional<unsigned long long>>((uint64_t *)a3, (uint64_t)v74);
        v43 = v75;
        if (v75)
        {
          if (!v73 || !v87)
            goto LABEL_148;
          *(_OWORD *)v76 = v72;
          LOBYTE(v77) = 0;
          *(_DWORD *)v80 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v83);
          *(_OWORD *)&v80[8] = *(_OWORD *)v74;
          v43 = 1;
        }
        else
        {
          LOBYTE(v76[0]) = 0;
        }
        v81 = v43;
        if (v87 && (_DWORD)v86 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35051D8[v86])(v74, &v83);
          v43 = v81;
        }
        if (v43)
          goto LABEL_123;
      }
      else
      {
        LOBYTE(v76[0]) = 0;
        v81 = 0;
      }
      v56 = *(_QWORD *)a3;
      v57 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v58 = *((_QWORD *)a3 + 3);
      if (!v58)
        goto LABEL_143;
      if (!v57)
        goto LABEL_143;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
      if (!v81)
        goto LABEL_143;
LABEL_123:
      v67 = (WTF::StringImpl **)&v77;
      WebKit::WebProcessProxy::setAppBadge((uint64_t)this, (uint64_t)v76[0], (uint64_t)v76[1], (uint64_t)&v77, *(uint64_t *)&v80[8], *(uint64_t *)&v80[16]);
      if (!v81)
        goto LABEL_143;
      v68 = *(unsigned int *)v80;
LABEL_132:
      if ((_DWORD)v68 == -1)
        goto LABEL_143;
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35051D8[v68])(&v83, v67);
      if (!this)
        return;
      goto LABEL_144;
    case 0xA02:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>((uint64_t *)a3) <= 0xFFu)
      {
LABEL_75:
        v44 = *(_QWORD *)a3;
        v45 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v46 = *((_QWORD *)a3 + 3);
        if (!v46 || !v45)
          goto LABEL_143;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
        if (this)
          goto LABEL_144;
      }
      else
      {
        WebCore::CaptionUserPreferencesMediaAF::platformSetCaptionDisplayMode();
        if (this)
          goto LABEL_144;
      }
      return;
    case 0xA03:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v76);
      if (!LOBYTE(v76[1]))
        goto LABEL_143;
      WebCore::CaptionUserPreferencesMediaAF::platformSetPreferredLanguage((WebCore::CaptionUserPreferencesMediaAF *)v76, v47);
      if (!LOBYTE(v76[1]))
        goto LABEL_143;
      goto LABEL_140;
    case 0xA04:
      v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v50
        && (v51 = (WTF::StringImpl *)v49, IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)a3, &v83), v87))
      {
        IPC::Decoder::decode<std::optional<unsigned long long>>((uint64_t *)a3, (uint64_t)v74);
        v52 = v75;
        if (v75)
        {
          if (!v87)
            goto LABEL_148;
          v76[0] = v51;
          LOBYTE(v76[1]) = 0;
          LODWORD(v79) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v76[1], (uint64_t)&v83);
          *(_OWORD *)v80 = *(_OWORD *)v74;
          v52 = 1;
        }
        else
        {
          LOBYTE(v76[0]) = 0;
        }
        v80[16] = v52;
        if (v87 && (_DWORD)v86 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35051D8[v86])(v74, &v83);
          v52 = v80[16];
        }
        if (v52)
          goto LABEL_130;
      }
      else
      {
        LOBYTE(v76[0]) = 0;
        v80[16] = 0;
      }
      v59 = *(_QWORD *)a3;
      v60 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v61 = *((_QWORD *)a3 + 3);
      if (!v61)
        goto LABEL_143;
      if (!v60)
        goto LABEL_143;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v59);
      if (!v80[16])
        goto LABEL_143;
LABEL_130:
      v67 = &v76[1];
      WebKit::WebProcessProxy::setClientBadge((uint64_t)this, (uint64_t)v76[0], (uint64_t)&v76[1], *(uint64_t *)v80, *(uint64_t *)&v80[8]);
      if (!v80[16])
        goto LABEL_143;
      v68 = v79;
      goto LABEL_132;
    case 0xA05:
      WebKit::ResponsivenessTimer::stop((_BYTE *)this + 56);
      if (!this)
        return;
      goto LABEL_144;
    case 0xA06:
      PAL::systemBeep(this);
      if (!this)
        return;
      goto LABEL_144;
    case 0xA07:
      IPC::Decoder::decode<std::tuple<WebKit::BackForwardListItemState>>((uint64_t *)a3, v76);
      if (v82)
        WebKit::WebProcessProxy::updateBackForwardItem(this, (BackForwardListItemState *)v76);
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76);
      if (!this)
        return;
      goto LABEL_144;
    default:
      goto LABEL_143;
  }
}

_QWORD *WebKit::WebResourceLoader::didFinishResourceLoad(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE buf[32];
  _BYTE v29[32];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  v5 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v10 = v9 - *(double *)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v7;
    *(_WORD *)v29 = 2048;
    *(_QWORD *)&v29[2] = v8;
    *(_WORD *)&v29[10] = 2048;
    *(double *)&v29[12] = v10;
    *(_WORD *)&v29[20] = 2048;
    *(_QWORD *)&v29[22] = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didFinishResourceLoad: (length=%zd)", buf, 0x3Eu);
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (v12
    && (v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 744),
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v12, v14)))
  {
    ++*(_DWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a2 + 88);
    v32 = *(_QWORD *)(a2 + 80);
    v16 = *(_QWORD *)(a2 + 120);
    v35 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)buf = a1;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v29[16] = *(_OWORD *)(a2 + 32);
    v30 = v17;
    v31 = *(_OWORD *)(a2 + 64);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&buf[16] = *(_OWORD *)a2;
    *(_OWORD *)v29 = v18;
    *(_QWORD *)(a2 + 88) = 0;
    v34 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 120) = 0;
    v19 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v19 = &off_1E34EB558;
    *(_QWORD *)(v19 + 8) = a1;
    *(_QWORD *)(v19 + 16) = a1;
    v20 = v32;
    v21 = v31;
    v22 = *(_OWORD *)&v29[16];
    *(_OWORD *)(v19 + 72) = v30;
    *(_OWORD *)(v19 + 88) = v21;
    *(_OWORD *)(v19 + 56) = v22;
    *(_QWORD *)(v19 + 104) = v20;
    *(_QWORD *)(v19 + 112) = v15;
    v23 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v19 + 40) = *(_OWORD *)v29;
    *(_OWORD *)(v19 + 24) = v23;
    *(_QWORD *)&buf[8] = 0;
    v33 = 0;
    v24 = v35;
    *(_OWORD *)(v19 + 120) = v34;
    *(_QWORD *)(v19 + 136) = v24;
    *(_QWORD *)(v19 + 144) = v16;
    v36 = 0;
    v27 = v19;
    WebKit::WebResourceInterceptController::defer(*(_QWORD *)(a1 + 64), v14, &v27);
    v26 = v27;
    v27 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    return WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0::~$_0(buf, v25);
  }
  else
  {
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 88);
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), a2);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 128))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 **v11;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (uint64_t *)v4;
    do
    {
      if (*v10 != -1)
      {
        if (*v10)
        {
          WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::reinsert(*a1, v10);
          v11 = (unsigned __int8 **)*v10;
          *v10 = 0;
          if (v11)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v11);
        }
        else
        {
          *v10 = 0;
        }
      }
      ++v10;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash(a1, v3);
}

void WebKit::GPUProcess::didReceiveGPUProcessMessage(WebKit::GPUProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  unsigned __int8 **v4;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WebCore::MockRealtimeMediaSourceCenter *v9;
  WebCore::MockRealtimeMediaSourceCenter *v10;
  unsigned __int16 v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _BYTE v69[19];
  char v70;
  int v71;
  uint64_t v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  _BYTE v76[19];
  char v77;
  int v78;
  char v79;
  uint64_t v80;

  v3 = (uint64_t *)a3;
  v4 = a2;
  v80 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned int *)((char *)this + 112);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  switch(*((_WORD *)a3 + 25))
  {
    case '>':
      IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>((uint64_t *)a3, v69);
      if (v74)
        WebCore::MockRealtimeMediaSourceCenter::addDevice();
      std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69, v8);
      goto LABEL_93;
    case '?':
      IPC::handleMessage<Messages::GPUProcess::AddSession,WebKit::GPUProcess,WebKit::GPUProcess,void ()(PAL::SessionID,WebKit::GPUProcessSessionParameters &&)>((uint64_t *)a3, (uint64_t)this);
      goto LABEL_93;
    case '@':
      *(_QWORD *)v69 = 0;
      *(_QWORD *)&v69[8] = 0;
      WebCore::MockRealtimeMediaSourceCenter::setDevices();
      WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, v21);
      goto LABEL_93;
    case 'A':
      IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_93;
    case 'B':
      IPC::Decoder::decode<std::tuple<WebKit::GPUProcessCreationParameters>>(v69, (uint64_t *)a3);
      if (v75)
      {
        WebKit::GPUProcess::initializeGPUProcess((uint64_t)this, (uint64_t)v69);
        if (v75)
          WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v69, a2);
      }
      goto LABEL_93;
    case 'C':
      IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>((uint64_t *)a3, (uint64_t)v69);
      if (v69[16])
      {
        v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if ((_BYTE)a2)
        {
          *(_QWORD *)v76 = v37;
          v3 = (uint64_t *)&v76[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v76[8], v4);
          v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v38 = off_1E34B6EC0;
          v38[1] = *(_QWORD *)v76;
          v39 = *(_QWORD *)&v76[8];
          *(_QWORD *)&v76[8] = 0;
          v38[2] = v39;
          v68 = v38;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76[8]);
          if (!v69[16])
            goto LABEL_88;
          WebKit::GPUProcess::prepareToSuspend(this, v69[0], (uint64_t *)&v68);
          v40 = (uint64_t)v68;
          v68 = 0;
          if (v40)
            goto LABEL_67;
        }
      }
      goto LABEL_93;
    case 'D':
      WebKit::GPUProcess::processDidResume(this);
      goto LABEL_93;
    case 'E':
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v69);
      if (v69[8])
      {
        WebCore::MockRealtimeMediaSourceCenter::removeDevice((WebCore::MockRealtimeMediaSourceCenter *)v69, (const WTF::String *)a2);
        if (v69[8])
          goto LABEL_29;
      }
      goto LABEL_93;
    case 'F':
      v46 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebKit::GPUProcess::removeSession((uint64_t)this, v46);
      goto LABEL_93;
    case 'G':
      v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v13)
        goto LABEL_92;
      v14 = v12;
      v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v16)
        goto LABEL_92;
      v17 = v15;
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v69 = v18;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v69[8], v4);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v19 = off_1E34B6F30;
        v19[1] = *(_QWORD *)v69;
        v20 = *(_QWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        v19[2] = v20;
        *(_QWORD *)v76 = v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69[8]);
        WebKit::GPUProcess::requestBitmapImageForCurrentTime((uint64_t)this, v14, v17, (uint64_t *)v76);
        goto LABEL_66;
      }
      goto LABEL_93;
    case 'H':
      WebCore::MockRealtimeMediaSourceCenter::resetDevices(this);
      goto LABEL_93;
    case 'I':
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v69);
      if (v69[16])
        WebKit::GPUProcess::resolveBookmarkDataForCacheDirectory((uint64_t)this, *(uint64_t *)v69, *(uint64_t *)&v69[8]);
      goto LABEL_93;
    case 'J':
      v11 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v11 >= 0x100u)
        WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((WebCore::MockRealtimeMediaSourceCenter *)(v11 != 0));
      goto LABEL_93;
    case 'K':
      v41 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v41 & 0xFFFFFF) >= 0x10000)
        WebCore::MockRealtimeMediaSourceCenter::setMockCaptureDevicesInterrupted((WebCore::MockRealtimeMediaSourceCenter *)(v41 != 0));
      goto LABEL_93;
    case 'L':
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((uint64_t *)a3, v69);
      if (v69[16])
      {
        WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral((WebCore::MockRealtimeMediaSourceCenter *)v69, (const WTF::String *)v69[8]);
        if (v69[16])
        {
LABEL_29:
          v23 = *(WTF::StringImpl **)v69;
          *(_QWORD *)v69 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
      }
      goto LABEL_93;
    case 'M':
      v22 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v22 & 0xFF00000000) != 0)
        WebKit::GPUProcess::setOrientationForMediaCapture(this, v22);
      goto LABEL_93;
    case 'N':
      v9 = (WebCore::MockRealtimeMediaSourceCenter *)IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v9 & 0xFFFFFF) >= 0x10000)
      {
        v10 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v9);
        WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v10);
      }
      goto LABEL_93;
    case 'O':
      v24 = *((_QWORD *)a3 + 1);
      v25 = *v3;
      v26 = v3[2] - *v3;
      if (v24 <= v26)
        goto LABEL_89;
      v27 = (unsigned __int8 *)(v25 + v26);
      v3[2] = (uint64_t)(v27 + 1);
      if (!v25)
      {
        v55 = v24;
        v56 = 0;
        goto LABEL_90;
      }
      v28 = *v27;
      if (v28 >= 2)
        goto LABEL_91;
      if (v24 <= (unint64_t)&v27[-v25 + 1])
        goto LABEL_84;
      v3[2] = (uint64_t)(v27 + 2);
      v29 = v27[1];
      if (v29 >= 2)
        goto LABEL_115;
      if (v24 <= (unint64_t)&v27[-v25 + 2])
      {
LABEL_84:
        v51 = 0;
        v52 = 0;
        *v3 = 0;
        v3[1] = 0;
        v53 = v3[3];
        if (v53)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          v51 = 0;
          v65 = *v3;
          v66 = v3[1];
          v67 = v3[3];
          *v3 = 0;
          v3[1] = 0;
          v52 = 0;
          if (v67)
          {
            if (v66)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v65);
              v52 = *v3;
              v51 = v3[1];
            }
          }
        }
      }
      else
      {
        v3[2] = (uint64_t)(v27 + 3);
        v30 = v27[2];
        if (v30 < 2)
        {
          v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
          if (!v32)
            goto LABEL_92;
          v33 = v31;
          v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
          if ((_BYTE)a2)
          {
            *(_QWORD *)v69 = v34;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v69[8], v4);
            v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v35 = off_1E34B6EE8;
            v35[1] = *(_QWORD *)v69;
            v36 = *(_QWORD *)&v69[8];
            *(_QWORD *)&v69[8] = 0;
            v35[2] = v36;
            *(_QWORD *)v76 = v35;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69[8]);
            WebKit::GPUProcess::updateCaptureAccess((uint64_t *)this, v28 != 0, v29 != 0, v30 != 0, v33, (uint64_t *)v76);
            goto LABEL_66;
          }
          goto LABEL_93;
        }
LABEL_115:
        v51 = v24;
        v52 = v25;
      }
      *v3 = 0;
      v3[1] = 0;
      v54 = v3[3];
      if (v54 && v51)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
      goto LABEL_92;
    case 'P':
      IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)a3, v76);
      if (!v79)
      {
        v69[0] = 0;
        v73 = 0;
        goto LABEL_72;
      }
      v42 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v43)
      {
        v45 = 0;
        v69[0] = 0;
        goto LABEL_77;
      }
      if (v79)
      {
        v44 = v42;
        v69[0] = 0;
        v71 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v69, (uint64_t)v76);
        v72 = v44;
        v45 = 1;
LABEL_77:
        v73 = v45;
        if (v79 && v78 != -1)
        {
          ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v78])(&v68, v76);
          v45 = v73;
        }
        if (v45)
        {
LABEL_81:
          WebKit::GPUProcess::updateCaptureOrigin((uint64_t)this, (const WebCore::SecurityOriginData *)v69, v72);
          if (v73 && v71 != -1)
            ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v71])(v76, v69);
          goto LABEL_93;
        }
LABEL_72:
        a2 = (unsigned __int8 **)*v3;
        a3 = (IPC::Decoder *)v3[1];
        *v3 = 0;
        v3[1] = 0;
        v50 = v3[3];
        if (!v50)
          goto LABEL_93;
        if (!a3)
          goto LABEL_93;
        (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v50 + 16))(v50, a2);
        if (!v73)
          goto LABEL_93;
        goto LABEL_81;
      }
LABEL_88:
      __break(1u);
LABEL_89:
      v55 = 0;
      v56 = 0;
      *v3 = 0;
      v3[1] = 0;
      v57 = v3[3];
      if (v57)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
          v56 = *v3;
          v55 = v3[1];
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
      }
LABEL_90:
      v24 = 0;
      v25 = 0;
      *v3 = 0;
      v3[1] = 0;
      v58 = v3[3];
      if (v58)
      {
        if (v55)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v56, v55);
          v25 = *v3;
          v24 = v3[1];
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
      }
LABEL_91:
      *v3 = 0;
      v3[1] = 0;
      v59 = v3[3];
      if (v59 && v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v25);
LABEL_92:
      a2 = (unsigned __int8 **)*v3;
      a3 = (IPC::Decoder *)v3[1];
      *v3 = 0;
      v3[1] = 0;
      v60 = v3[3];
      if (v60)
      {
LABEL_101:
        if (a3)
          (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v60 + 16))(v60, a2);
      }
LABEL_93:
      if (this)
      {
        do
        {
          v61 = __ldaxr(v6);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v6));
        if (!v62)
        {
          atomic_store(1u, (unsigned int *)this + 28);
          (*(void (**)(WebKit::GPUProcess *, unsigned __int8 **, IPC::Decoder *))(*(_QWORD *)this + 8))(this, a2, a3);
        }
      }
      return;
    case 'Q':
      IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::decode((uint64_t *)a3, (uint64_t)v69);
      if (v70)
        goto LABEL_69;
      v63 = *v3;
      v64 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v60 = v3[3];
      if (v60 && v64)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v63);
        if (v70)
        {
LABEL_69:
          *(_OWORD *)v76 = *(_OWORD *)v69;
          *(_DWORD *)&v76[15] = *(_DWORD *)&v69[15];
          v77 = 1;
          WebKit::GPUProcess::updateGPUProcessPreferences((uint64_t)this, (unsigned __int16 *)v76);
          goto LABEL_93;
        }
        a2 = (unsigned __int8 **)*v3;
        a3 = (IPC::Decoder *)v3[1];
        v60 = v3[3];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
      v77 = 0;
      *v3 = 0;
      v3[1] = 0;
      if (v60)
        goto LABEL_101;
      goto LABEL_93;
    case 'R':
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v69);
      if (v69[16])
      {
        WebKit::GPUProcess::updateSandboxAccess((uint64_t)this, (uint64_t)v69);
        if (v69[16])
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, a2);
      }
      goto LABEL_93;
    case 'S':
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)v69);
      if (v69[16])
      {
        WTF::overrideUserPreferredLanguages();
        if (v69[16])
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v69, a2);
      }
      goto LABEL_93;
    case 'T':
      v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        *(_QWORD *)v69 = v47;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v69[8], v4);
        v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v48 = off_1E34B6F58;
        v48[1] = *(_QWORD *)v69;
        v49 = *(_QWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        v48[2] = v49;
        *(_QWORD *)v76 = v48;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v69[8]);
        WebKit::GPUProcess::webProcessConnectionCountForTesting((uint64_t)this, (uint64_t *)v76);
LABEL_66:
        v40 = *(_QWORD *)v76;
        *(_QWORD *)v76 = 0;
        if (v40)
LABEL_67:
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
      goto LABEL_93;
    default:
      goto LABEL_93;
  }
}

void WebKit::GPUProcess::didReceiveMessage(unsigned int **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned int v6;

  if (!IPC::MessageReceiverMap::dispatchMessage(this + 5, (IPC::Connection *)a2, a3))
  {
    v6 = *((unsigned __int16 *)a3 + 25);
    if (v6 >= 0xE98)
      v6 = 3736;
    if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]) == 3)
      WebKit::AuxiliaryProcess::didReceiveMessage((WebKit::AuxiliaryProcess *)this, a2, a3);
    else
      WebKit::GPUProcess::didReceiveGPUProcessMessage((WebKit::GPUProcess *)this, a2, a3);
  }
}

void `non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::GPUConnectionToWebProcess::didReceiveMessage((WebKit::GPUConnectionToWebProcess *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  ++*(_DWORD *)(a1 + 8);
  v4 = *a3;
  *a3 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34BC9D0;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v7 = v5;
  WebCore::MessagePortChannelRegistry::takeAllMessagesForPort();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[2 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v3];
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v5 -= 16;
      if (!v5)
        return v4;
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::didReceiveMessage(unsigned int **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  if (!IPC::MessageReceiverMap::dispatchMessage(this + 19, (IPC::Connection *)a2, a3))
    WebKit::NetworkProcessProxy::didReceiveNetworkProcessProxyMessage((WebKit::NetworkProcessProxy *)this, a2, a3);
}

uint64_t WebKit::AuxiliaryProcess::setProcessSuppressionEnabled(WebKit::AuxiliaryProcess *this, int a2)
{
  char *v2;

  v2 = (char *)this + 56;
  if (a2)
    return PAL::HysteresisActivity::stop((uint64_t)v2);
  else
    return PAL::HysteresisActivity::start((uint64_t)v2);
}

void WebKit::WebProcess::backlightLevelDidChange(WebKit::WebProcess *this, float a2)
{
  unint64_t v2;
  char v3;
  char **v4;
  char *v5;

  *((float *)this + 160) = a2;
  v2 = atomic_load(&WebKit::WebProcess::backlightLevelDidChange(float)::onceFlag);
  if (v2 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::WebProcess::backlightLevelDidChange(float)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcess::backlightLevelDidChange(float)::$_0 &&>>);
  }
}

uint64_t *WebKit::NetworkConnectionToWebProcess::didDeliverMessagePortMessages(WebKit::NetworkConnectionToWebProcess *this, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v2 = (uint64_t *)((char *)this + 272);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 34, &v7);
  result = WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take(v2, v3, &v6);
  v5 = v6;
  if (v6)
  {
    v6 = 0;
    (*(void (**)(uint64_t *))(*v5 + 16))(v5);
    (*(void (**)(uint64_t *))(*v5 + 8))(v5);
    result = v6;
    v6 = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebProcess::setTextCheckerState(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  if (*a2)
    v3 = 0;
  else
    v3 = *(_BYTE *)(result + 280) != 0;
  if (a2[1])
    v4 = 0;
  else
    v4 = *(_BYTE *)(result + 281) != 0;
  *(_WORD *)(result + 280) = *(_WORD *)a2;
  if (v3 || v4)
  {
    result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(result + 112));
    v5 = (_QWORD *)result;
    v7 = v6;
    v8 = *(_QWORD *)(v2 + 112);
    v9 = v8 ? v8 + 16 * *(unsigned int *)(v8 - 4) : 0;
    if (v9 != result)
    {
      do
      {
        if (v3)
          result = WebKit::WebPage::unmarkAllMisspellings(v5[1]);
        if (v4)
          result = WebKit::WebPage::unmarkAllBadGrammar(v5[1]);
        while (1)
        {
          v5 += 2;
          if (v5 == v7)
            break;
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_20;
        }
        v5 = v7;
LABEL_20:
        ;
      }
      while (v5 != (_QWORD *)v9);
    }
  }
  return result;
}

uint64_t WebKit::GPUProcess::updateGPUProcessPreferences(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;

  v3 = result;
  if (!*((_BYTE *)a2 + 5))
  {
    if (*(_BYTE *)(result + 141))
      goto LABEL_9;
    v5 = 0;
    *(_WORD *)(result + 140) = 256;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(result + 141) || *(unsigned __int8 *)(result + 140) != *((unsigned __int8 *)a2 + 4))
  {
    v4 = a2[2];
    *(_WORD *)(result + 140) = v4;
    if (v4 <= 0xFF)
      goto LABEL_87;
    v5 = v4;
LABEL_8:
    result = WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)result);
    *(_BYTE *)(result + 32) = v5;
  }
LABEL_9:
  LOBYTE(v6) = *(_BYTE *)(v3 + 137);
  if (!*((_BYTE *)a2 + 1))
  {
    if (*(_BYTE *)(v3 + 137))
      goto LABEL_17;
    *(_WORD *)(v3 + 136) = 256;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(v3 + 137) || *(unsigned __int8 *)(v3 + 136) != *(unsigned __int8 *)a2)
  {
    v6 = *a2;
    *(_WORD *)(v3 + 136) = v6;
    if (v6 <= 0xFF)
      goto LABEL_87;
LABEL_16:
    result = WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)(v6 != 0));
  }
LABEL_17:
  LOBYTE(v7) = *(_BYTE *)(v3 + 139);
  if (!*((_BYTE *)a2 + 3))
  {
    if (*(_BYTE *)(v3 + 139))
      goto LABEL_25;
    *(_WORD *)(v3 + 138) = 256;
    goto LABEL_24;
  }
  if (!*(_BYTE *)(v3 + 139) || *(unsigned __int8 *)(v3 + 138) != *((unsigned __int8 *)a2 + 2))
  {
    v7 = a2[1];
    *(_WORD *)(v3 + 138) = v7;
    if (v7 <= 0xFF)
      goto LABEL_87;
LABEL_24:
    result = WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)(v7 != 0));
  }
LABEL_25:
  LOBYTE(v8) = *(_BYTE *)(v3 + 143);
  if (!*((_BYTE *)a2 + 7))
  {
    if (*(_BYTE *)(v3 + 143))
      goto LABEL_33;
    *(_WORD *)(v3 + 142) = 256;
    goto LABEL_32;
  }
  if (!*(_BYTE *)(v3 + 143) || *(unsigned __int8 *)(v3 + 142) != *((unsigned __int8 *)a2 + 6))
  {
    v8 = a2[3];
    *(_WORD *)(v3 + 142) = v8;
    if (v8 <= 0xFF)
      goto LABEL_87;
LABEL_32:
    result = WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled((WebCore::DeprecatedGlobalSettings *)(v8 != 0));
  }
LABEL_33:
  LOBYTE(v9) = *(_BYTE *)(v3 + 145);
  if (!*((_BYTE *)a2 + 9))
  {
    if (*(_BYTE *)(v3 + 145))
      goto LABEL_41;
    *(_WORD *)(v3 + 144) = 256;
    goto LABEL_40;
  }
  if (!*(_BYTE *)(v3 + 145) || *(unsigned __int8 *)(v3 + 144) != *((unsigned __int8 *)a2 + 8))
  {
    v9 = a2[4];
    *(_WORD *)(v3 + 144) = v9;
    if (v9 <= 0xFF)
      goto LABEL_87;
LABEL_40:
    result = WebCore::MediaSessionManagerCocoa::setSampleBufferContentKeySessionSupportEnabled((WebCore::MediaSessionManagerCocoa *)(v9 != 0));
  }
LABEL_41:
  LOBYTE(v10) = *(_BYTE *)(v3 + 147);
  if (!*((_BYTE *)a2 + 11))
  {
    if (*(_BYTE *)(v3 + 147))
      goto LABEL_49;
    *(_WORD *)(v3 + 146) = 256;
    goto LABEL_48;
  }
  if (!*(_BYTE *)(v3 + 147) || *(unsigned __int8 *)(v3 + 146) != *((unsigned __int8 *)a2 + 10))
  {
    v10 = a2[5];
    *(_WORD *)(v3 + 146) = v10;
    if (v10 <= 0xFF)
      goto LABEL_87;
LABEL_48:
    result = WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled((WebCore::PlatformMediaSessionManager *)(v10 != 0));
  }
LABEL_49:
  LOBYTE(v11) = *(_BYTE *)(v3 + 149);
  if (!*((_BYTE *)a2 + 13))
  {
    if (*(_BYTE *)(v3 + 149))
      goto LABEL_57;
    *(_WORD *)(v3 + 148) = 256;
    goto LABEL_56;
  }
  if (!*(_BYTE *)(v3 + 149) || *(unsigned __int8 *)(v3 + 148) != *((unsigned __int8 *)a2 + 12))
  {
    v11 = a2[6];
    *(_WORD *)(v3 + 148) = v11;
    if (v11 <= 0xFF)
      goto LABEL_87;
LABEL_56:
    result = WebCore::PlatformMediaSessionManager::setMediaCapabilityGrantsEnabled((WebCore::PlatformMediaSessionManager *)(v11 != 0));
  }
LABEL_57:
  LOBYTE(v12) = *(_BYTE *)(v3 + 151);
  if (*((_BYTE *)a2 + 15))
  {
    if (*(_BYTE *)(v3 + 151) && *(unsigned __int8 *)(v3 + 150) == *((unsigned __int8 *)a2 + 14))
      goto LABEL_68;
    v12 = a2[7];
    *(_WORD *)(v3 + 150) = v12;
    if (v12 <= 0xFF)
      goto LABEL_87;
  }
  else
  {
    if (*(_BYTE *)(v3 + 151))
      goto LABEL_68;
    *(_WORD *)(v3 + 150) = 256;
  }
  result = WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder((WebCore::PlatformMediaSessionManager *)(v12 != 0));
  if (!*(_BYTE *)(v3 + 280))
  {
    if (!*(_BYTE *)(v3 + 151))
      goto LABEL_87;
    if (*(_BYTE *)(v3 + 150))
    {
      *(_BYTE *)(v3 + 280) = 1;
      result = MEMORY[0x19AEB2C34](result);
    }
  }
LABEL_68:
  LOBYTE(v13) = *(_BYTE *)(v3 + 153);
  if (*((_BYTE *)a2 + 17))
  {
    if (*(_BYTE *)(v3 + 153) && *(unsigned __int8 *)(v3 + 152) == *((unsigned __int8 *)a2 + 16))
      goto LABEL_79;
    v13 = a2[8];
    *(_WORD *)(v3 + 152) = v13;
    if (v13 <= 0xFF)
      goto LABEL_87;
  }
  else
  {
    if (*(_BYTE *)(v3 + 153))
      goto LABEL_79;
    *(_WORD *)(v3 + 152) = 256;
  }
  result = WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder((WebCore::PlatformMediaSessionManager *)(v13 != 0));
  if (!*(_BYTE *)(v3 + 281))
  {
    if (*(_BYTE *)(v3 + 153))
    {
      if (*(_BYTE *)(v3 + 152))
      {
        *(_BYTE *)(v3 + 281) = 1;
        result = WebCore::registerSupplementalVP9Decoder((WebCore *)result);
      }
      goto LABEL_79;
    }
LABEL_87:
    __break(1u);
    return result;
  }
LABEL_79:
  v14 = *((unsigned __int8 *)a2 + 18);
  v15 = *(unsigned __int8 *)(v3 + 154);
  *(_BYTE *)(v3 + 154) = v14;
  if (v14 != v15)
  {
    result = WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled((WebCore::PlatformMediaSessionManager *)(v14 != 0));
    if (!*(_BYTE *)(v3 + 282))
    {
      if (*(_BYTE *)(v3 + 154))
      {
        *(_BYTE *)(v3 + 282) = 1;
        if (!*(_BYTE *)(v3 + 281))
        {
          result = MEMORY[0x19AEB2C40](result);
          *(_BYTE *)(v3 + 281) = 1;
        }
        if (!*(_BYTE *)(v3 + 280))
        {
          result = MEMORY[0x19AEB2C34](result);
          *(_BYTE *)(v3 + 280) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 8 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(a1, v15);
        *v16 = *v15;
        if (v15 == a3)
          v13 = v16;
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_QWORD *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

const char **IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 24));
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  BOOL i;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v4 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v5 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v7 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v8 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v9 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v10 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v11 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v13 = a1[1];
  v14 = *a1;
  v15 = a1[2] - *a1;
  if (v13 <= v15)
    goto LABEL_18;
  v16 = (unsigned __int8 *)(v14 + v15);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    v21 = v13;
    v22 = 0;
    goto LABEL_19;
  }
  v17 = *v16;
  if (v17 > 1)
    goto LABEL_20;
  v18 = 0;
  for (i = v17 != 0; ; i = 0)
  {
    if ((v4 & 0xFF0000) != 0
      && (v5 & 0xFF0000) != 0
      && (v6 & 0xFF0000) != 0
      && (v7 & 0xFF0000) != 0
      && (v8 & 0xFF0000) != 0
      && (v9 & 0xFF0000) != 0
      && (v10 & 0xFF0000) != 0
      && (v11 & 0xFF0000) != 0
      && (result & 0xFF0000) != 0
      && !v18)
    {
      *(_WORD *)a2 = v4;
      *(_WORD *)(a2 + 2) = v5;
      *(_WORD *)(a2 + 4) = v6;
      *(_WORD *)(a2 + 6) = v7;
      *(_WORD *)(a2 + 8) = v8;
      *(_WORD *)(a2 + 10) = v9;
      *(_WORD *)(a2 + 12) = v10;
      *(_WORD *)(a2 + 14) = v11;
      *(_WORD *)(a2 + 16) = result;
      v20 = 1;
      *(_BYTE *)(a2 + 18) = i;
      goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      v28 = result;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      result = v28;
    }
LABEL_19:
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      v27 = result;
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
        v14 = *a1;
        v13 = a1[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      result = v27;
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (!v25)
      break;
    if (!v13)
      break;
    v26 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v14);
    result = v26;
    if (!*a1)
      break;
    v18 = 1;
  }
  v20 = 0;
  *(_BYTE *)a2 = 0;
LABEL_16:
  *(_BYTE *)(a2 + 19) = v20;
  return result;
}

WebKit::NetworkSession *WebKit::NetworkProcess::setBlobRegistryTopOriginPartitioningEnabled(uint64_t a1, uint64_t a2, int a3)
{
  WebKit::NetworkSession *result;
  uint64_t v5;

  v5 = a2;
  result = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result)
    return (WebKit::NetworkSession *)WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(result, a3);
  return result;
}

uint64_t WebKit::WebSWServerConnection::setThrottleState(WebKit::WebSWServerConnection *this, char a2)
{
  *((_BYTE *)this + 112) = a2;
  return WebKit::WebSWServerConnection::updateThrottleState(this);
}

_DWORD *WebKit::NetworkResourceLoader::didReceiveNetworkResourceLoaderMessage(WebKit::NetworkResourceLoader *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)((char *)this + 8);
  ++*((_DWORD *)this + 2);
  if (*((_WORD *)a3 + 25) == 515)
    WebKit::NetworkResourceLoader::continueDidReceiveResponse(this);
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v3, a2);
}

uint64_t WebKit::NetworkProcess::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  _QWORD v9[2];

  v9[0] = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v9);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
      return WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(v5, a3);
  }
  v9[0] = 0;
  v9[1] = 0;
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B1428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2926;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = &v8[3 * v7];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v8);
      IPC::VectorArgumentCoder<false,WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, (uint64_t)(v8 + 1));
      v8 += 3;
    }
    while (v8 != v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

uint64_t WebCore::GraphicsLayerCA::allowsBackingStoreDetaching(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 890) >> 2) & 1;
}

void IPC::Connection::dispatchIncomingMessages(IPC::Connection *this)
{
  unsigned __int8 v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  uint64_t v23;
  IPC::Decoder *v24;
  WTF *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  IPC::Decoder *v30;
  uint64_t v31;
  uint64_t v32;
  IPC::Decoder *v33;
  WTF *v34;
  void *v35;
  unsigned int v36;
  char *v37;
  IPC::Decoder *v38;
  IPC::Decoder *v39;
  unsigned __int8 **v40;
  _BYTE buf[12];
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)this + 33);
  if ((v1 & 1) == 0)
    return;
  v3 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  v4 = *((_QWORD *)this + 14);
  if (v4 == *((_QWORD *)this + 15))
  {
    os_unfair_lock_unlock(v3);
    return;
  }
  v5 = *((_QWORD *)this + 16);
  v6 = *(unsigned __int16 **)(v5 + 8 * v4);
  *(_QWORD *)(v5 + 8 * v4) = 0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*((_QWORD *)this + 16) + 8 * v4), 0);
  v7 = *((unsigned int *)this + 34);
  v8 = *((_QWORD *)this + 14);
  v9 = *((_QWORD *)this + 15);
  if (v8 == v7 - 1)
    v10 = 0;
  else
    v10 = v8 + 1;
  *((_QWORD *)this + 14) = v10;
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
    v7 = 0;
  if (!*((_BYTE *)this + 100))
  {
    __break(1u);
    goto LABEL_47;
  }
  v13 = v12 + v7;
  v14 = *((unsigned __int8 *)this + 99);
  if (v13 < 0x259)
  {
    if (*((_BYTE *)this + 99))
      *((_BYTE *)this + 99) = v14 - 1;
  }
  else
  {
    v15 = (v14 + 1);
    if (v15 >= 9)
      LOWORD(v15) = 9;
    *(_WORD *)((char *)this + 99) = v15 | 0x100;
  }
  v16 = 0x258u / (v14 + 1);
  if (v16 >= v13)
    v17 = v13;
  else
    v17 = v16;
  if (v13 > v16)
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = this;
      v42 = 2048;
      v43 = v13;
      v44 = 2048;
      v45 = v17;
      _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "%p - Connection::dispatchIncomingMessages: IPC throttling was triggered (has %zu pending incoming messages, will only process %zu before yielding)", buf, 0x20u);
      v18 = off_1ECE71C40;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v36 = v6[25];
      if (v36 >= 0xE98)
        v36 = 3736;
      v37 = (&IPC::Detail::messageDescriptions)[3 * v36];
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = this;
      v42 = 2082;
      v43 = (unint64_t)v37;
      _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "%p - Connection::dispatchIncomingMessages: first IPC message in queue is %{public}s", buf, 0x16u);
    }
  }
  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 15))
  {
    v19 = *((_QWORD *)this + 2);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 80);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v40, (unsigned __int8 **)this);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E351EF48;
      v22 = v40;
      v40 = 0;
      *(_QWORD *)buf = v21;
      v21[1] = v22;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v20 + 16))(v20, buf);
      v23 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v40);
      goto LABEL_30;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x196BFA2B0);
  }
LABEL_30:
  os_unfair_lock_unlock(v3);
  v39 = (IPC::Decoder *)v6;
  IPC::Connection::dispatchMessage((uint64_t)this, (uint64_t *)&v39);
  v24 = v39;
  v39 = 0;
  if (v24)
  {
    IPC::Decoder::~Decoder(v24);
    WTF::fastFree(v25, v26);
  }
  if (v17 >= 2)
  {
    v27 = v17 - 1;
    while (1)
    {
      os_unfair_lock_lock(v3);
      v28 = *((_QWORD *)this + 14);
      if (v28 == *((_QWORD *)this + 15))
        break;
      v29 = *((_QWORD *)this + 16);
      v30 = *(IPC::Decoder **)(v29 + 8 * v28);
      *(_QWORD *)(v29 + 8 * v28) = 0;
      std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*((_QWORD *)this + 16) + 8 * v28), 0);
      v31 = *((_QWORD *)this + 14);
      if (v31 == *((unsigned int *)this + 34) - 1)
        v32 = 0;
      else
        v32 = v31 + 1;
      *((_QWORD *)this + 14) = v32;
      os_unfair_lock_unlock(v3);
      v38 = v30;
      IPC::Connection::dispatchMessage((uint64_t)this, (uint64_t *)&v38);
      v33 = v38;
      v38 = 0;
      if (v33)
      {
        IPC::Decoder::~Decoder(v33);
        WTF::fastFree(v34, v35);
      }
      if (!--v27)
        return;
    }
    os_unfair_lock_unlock(v3);
  }
}

void IPC::StreamConnectionWorkQueue::processStreams(IPC::StreamConnectionWorkQueue *this)
{
  int v1;
  IPC::StreamConnectionWorkQueue *v2;
  unsigned __int8 *v3;
  void *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  unsigned int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  unsigned int *v73;
  unsigned int v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int **v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  IPC::Decoder *v118;
  char v119;
  unsigned int *v120;
  int v121;
  WTF *v122;
  void *v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  unsigned __int8 *v138;
  int v139;
  uint64_t v140;
  unsigned int *v142;
  unsigned int *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  int v149;
  unsigned __int8 *v150;
  BOOL v152;
  unint64_t *v153;
  unsigned int *v154;
  unsigned int *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF *v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  int v173;
  unsigned int *v174;
  char v175;
  IPC::Decoder *v176;
  uint64_t v177;
  unsigned int *v178;
  unint64_t v179;
  unsigned __int8 *v180;
  IPC::StreamConnectionWorkQueue *v181;
  uint64_t **v182;
  unsigned __int8 *v183;
  char *v184;
  WTF *v185;
  int v186;
  uint64_t v187;
  WTF *v188;
  WTF *v189;
  char v190[8];
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  unsigned __int16 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201[2];

  v2 = this;
  v3 = (unsigned __int8 *)this + 41;
  do
  {
    WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v190);
    if (__ldaxr(v3))
    {
      __clrex();
LABEL_4:
      MEMORY[0x19AEABB3C](v3);
      goto LABEL_5;
    }
    if (__stxr(1u, v3))
      goto LABEL_4;
LABEL_5:
    v7 = *((_QWORD *)v2 + 7);
    v6 = *((_QWORD *)v2 + 8);
    *((_QWORD *)v2 + 7) = 0;
    *((_QWORD *)v2 + 8) = 0;
    v8 = *((_QWORD *)v2 + 9);
    *((_QWORD *)v2 + 9) = 0;
    v9 = (unsigned int *)*((unsigned int *)v2 + 20);
    *((_DWORD *)v2 + 20) = 0;
    v10 = *((unsigned int *)v2 + 27);
    if (!(_DWORD)v10)
    {
      v12 = 0;
LABEL_280:
      v20 = 0;
      goto LABEL_13;
    }
    if (v10 >> 29)
    {
      __break(0xC471u);
LABEL_305:
      __break(1u);
LABEL_306:
      v168 = v188;
      v169 = 8 * v187;
      do
      {
        v170 = *(_QWORD *)v168;
        *(_QWORD *)v168 = 0;
        if (v170)
          (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
        v168 = (WTF *)((char *)v168 + 8);
        v169 -= 8;
      }
      while (v169);
      goto LABEL_289;
    }
    v11 = WTF::fastMalloc((WTF *)(8 * v10));
    v12 = (WTF *)v11;
    v13 = *((unsigned int *)v2 + 27);
    if (!(_DWORD)v13)
      goto LABEL_280;
    v14 = (_QWORD *)*((_QWORD *)v2 + 12);
    v15 = &v14[v13];
    v16 = (_QWORD *)v11;
    do
    {
      v17 = *v14;
      v18 = (unsigned int *)(*v14 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      *v16++ = v17;
      ++v14;
    }
    while (v14 != v15);
    v20 = *((unsigned int *)v2 + 27);
LABEL_13:
    v21 = __ldxr(v3);
    v188 = (WTF *)v8;
    if (v21 != 1)
    {
      __clrex();
LABEL_17:
      v22 = v20;
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      v20 = v22;
      goto LABEL_18;
    }
    if (__stlxr(0, v3))
      goto LABEL_17;
LABEL_18:
    v187 = v6;
    v189 = v12;
    if (v7 != v6)
    {
      v156 = v7;
      do
      {
        v157 = v20;
        (*(void (**)(_QWORD))(**((_QWORD **)v188 + v156) + 16))(*((_QWORD *)v188 + v156));
        v156 += (unint64_t)v9 + 1;
        do
          v156 -= (unint64_t)v9;
        while (v156 >= (unint64_t)v9);
        v20 = v157;
      }
      while (v187 != v156);
    }
    if (!v20)
    {
      LOBYTE(v1) = 0;
      v23 = v187;
      goto LABEL_21;
    }
    v178 = v9;
    v179 = v7;
    v180 = v3;
    v181 = v2;
    v1 = 0;
    v177 = v20;
    v184 = (char *)v189 + 8 * v20;
    v24 = v189;
    while (2)
    {
      v186 = v1;
      v9 = 0;
      v8 = 0;
      v7 = 0;
      v185 = v24;
      v25 = *(_QWORD *)v24;
      v26 = (unsigned __int8 *)(*(_QWORD *)v24 + 113);
      v182 = (uint64_t **)(*(_QWORD *)v24 + 32);
      v183 = (unsigned __int8 *)(*(_QWORD *)v24 + 72);
      v6 = 209;
      LOBYTE(v1) = 1;
      while (1)
      {
        v27 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v25 + 56) + 16) + 128));
        if (v27 == 0x80000000)
          break;
        v29 = *(_QWORD *)(v25 + 56);
        v28 = *(_QWORD *)(v25 + 64);
        v30 = *(_QWORD *)(v25 + 48);
        if (v30 - 1 >= v27)
          v31 = v27;
        else
          v31 = v30 - 1;
        v32 = (v28 + 1) & 0xFFFFFFFFFFFFFFFELL;
        if (v32 + 16 >= v30)
          v32 = 0;
        if (v31 >= v32)
          v30 = v31;
        v33 = v30 - v32;
        if (v32 < v28 && v31 <= v32)
          v33 = 0;
        if (v28 <= v31)
          v33 = 0;
        v35 = v31 - v32;
        v36 = v31 > v32 && v32 >= v28;
        if (!v36)
          v35 = 0;
        if (v28 < v31)
          v37 = v35;
        else
          v37 = v33;
        v38 = *(_QWORD *)(v29 + 8);
        if (v38 <= 0xFF)
          goto LABEL_305;
        v39 = v38 - 256;
        v36 = v39 >= v32;
        v40 = v39 - v32;
        if (!v36)
          goto LABEL_305;
        v41 = *(_QWORD *)(v29 + 16);
        if (v37 == -1)
        {
          v37 = v40;
        }
        else if (v40 < v37)
        {
          goto LABEL_305;
        }
        if (v37 <= 0xF)
        {
          v76 = (unint64_t *)(v41 + 128);
          while (1)
          {
            v77 = __ldaxr(v76);
            if (v77 != v27)
              break;
            if (!__stlxr(0x80000000uLL, v76))
              goto LABEL_147;
          }
          __clrex();
LABEL_147:
          v93 = *(_QWORD *)(v25 + 64);
          v94 = *(_QWORD *)(v25 + 48);
          if (v94 - 1 < v77)
            v77 = v94 - 1;
          v95 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
          if (v95 + 16 >= v94)
            v95 = 0;
          if (v93 >= v77)
          {
            if (v93 > v77 && (v95 < v93 ? (v152 = v77 > v95) : (v152 = 1), v152))
            {
              if (v77 >= v95)
                v94 = v77;
              v37 = v94 - v95;
            }
            else
            {
              v37 = 0;
            }
          }
          else
          {
            v37 = v77 - v95;
            if (v77 <= v95 || v95 < v93)
              v37 = 0;
          }
          v97 = *(_QWORD *)(v25 + 56);
          v98 = *(_QWORD *)(v97 + 8);
          if (v98 <= 0xFF)
            goto LABEL_305;
          v99 = v98 - 256;
          v36 = v99 >= v95;
          v100 = v99 - v95;
          if (!v36)
            goto LABEL_305;
          v101 = *(_QWORD *)(v97 + 16);
          if (v37 == -1)
          {
            v37 = v100;
          }
          else if (v100 < v37)
          {
            goto LABEL_305;
          }
          if (v37 < 0x10)
            break;
          v42 = v101 + v95;
        }
        else
        {
          v42 = v41 + v32;
        }
        v43 = v42 + 256;
        v44 = *(_QWORD *)(v25 + 128);
        v191 = v43;
        v192 = v37;
        v193 = v43;
        v195 = 0;
        v196 = 0;
        v194 = 0;
        v197 = 0;
        v198 = 3737;
        v45 = ((v43 + 1) & 0xFFFFFFFFFFFFFFFELL) - v43;
        v46 = v37 >= v45 && v37 - v45 >= 2;
        v199 = 0;
        v200 = v44;
        if (!v46
          || (v47 = *(unsigned __int16 *)((v43 + 1) & 0xFFFFFFFFFFFFFFFELL),
              v193 = ((v43 + 1) & 0xFFFFFFFFFFFFFFFELL) + 2,
              v47 >= 0xE99))
        {
LABEL_212:
          v191 = 0;
          v192 = 0;
LABEL_213:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v201, v182);
          IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v201[0], v198);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v201);
          goto LABEL_214;
        }
        v198 = v47;
        if (v47 != 2822)
        {
          if (v47 == 2821)
          {
            if (__ldaxr(v183))
            {
              __clrex();
              goto LABEL_191;
            }
            if (__stxr(1u, v183))
LABEL_191:
              MEMORY[0x19AEABB3C](v183);
            v112 = *(_QWORD *)(v25 + 80);
            if (v112 == *(_QWORD *)(v25 + 88))
            {
              v124 = __ldxr(v183);
              if (v124 == 1)
              {
                if (!__stlxr(0, v183))
                  goto LABEL_214;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v183);
LABEL_214:
              IPC::Decoder::~Decoder((IPC::Decoder *)&v191);
              break;
            }
            v113 = *(_QWORD *)(v25 + 96);
            v114 = *(_QWORD *)(v113 + 8 * v112);
            *(_QWORD *)(v113 + 8 * v112) = 0;
            std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*(_QWORD *)(v25 + 96) + 8 * v112), 0);
            v115 = *(_QWORD *)(v25 + 80);
            if (v115 == *(unsigned int *)(v25 + 104) - 1)
              v116 = 0;
            else
              v116 = v115 + 1;
            *(_QWORD *)(v25 + 80) = v116;
            v117 = __ldxr(v183);
            if (v117 == 1)
            {
              if (!__stlxr(0, v183))
              {
LABEL_222:
                v125 = *(unsigned __int16 *)(v114 + 50);
                if (v125 >= 0xE98)
                  v125 = 3736;
                v126 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v125 + 2]);
                v127 = *(_QWORD *)(v114 + 64);
                v128 = __ldaxr(v26);
                v176 = (IPC::Decoder *)v114;
                if (v128)
                {
                  __clrex();
                  goto LABEL_226;
                }
                if (__stxr(1u, v26))
                {
LABEL_226:
                  v173 = v126;
                  v129 = v127;
                  MEMORY[0x19AEABB3C](v26);
                  v127 = v129;
                  v126 = v173;
                }
                v130 = *(_QWORD *)(v25 + 120);
                if (v130)
                {
                  v131 = *(_DWORD *)(v130 - 8);
                  v132 = 9 * ((~(v126 << 15) + v126) ^ ((~(v126 << 15) + v126) >> 10));
                  v133 = (v132 ^ (v132 >> 6)) + ~((v132 ^ (v132 >> 6)) << 11);
                  v134 = (v127 + ~(v127 << 32)) ^ ((unint64_t)(v127 + ~(v127 << 32)) >> 22);
                  v135 = 9 * ((v134 + ~(v134 << 13)) ^ ((v134 + ~(v134 << 13)) >> 8));
                  v136 = (v135 ^ (v135 >> 15)) + ~((v135 ^ (v135 >> 15)) << 27);
                  v137 = v131 & ((0xD7862706ELL
                                * (unint64_t)(277951225 * (v133 ^ HIWORD(v133))
                                                   + 95187966 * ((v136 >> 31) ^ v136))) >> 4);
                  v138 = (unsigned __int8 *)(v130 + 24 * v137);
                  v139 = *v138;
                  v140 = *((_QWORD *)v138 + 1);
                  if (v139 != v126 || v140 != v127)
                  {
                    v149 = 1;
                    while (v139 || v140)
                    {
                      v137 = (v137 + v149) & v131;
                      v150 = (unsigned __int8 *)(v130 + 24 * v137);
                      v139 = *v150;
                      v140 = *((_QWORD *)v150 + 1);
                      ++v149;
                      if (v139 == v126 && v140 == v127)
                        goto LABEL_233;
                    }
                    goto LABEL_302;
                  }
LABEL_233:
                  v155 = *(unsigned int **)(v130 + 24 * v137 + 16);
                  if (v155)
                  {
                    v142 = v155 + 2;
                    do
                      v79 = __ldaxr(v142);
                    while (__stlxr(v79 + 1, v142));
                    v171 = 0;
LABEL_204:
                    v121 = __ldxr(v26);
                    if (v121 == 1)
                    {
                      if (!__stlxr(0, v26))
                        goto LABEL_237;
                    }
                    else
                    {
                      __clrex();
                    }
                    v143 = v155;
                    WTF::Lock::unlockSlow((WTF::Lock *)v26);
                    v155 = v143;
LABEL_237:
                    if (v155
                      && (v174 = v155,
                          (*(void (**)(unsigned int *, uint64_t, IPC::Decoder *))(*(_QWORD *)v155 + 16))(v155, v25, v176), v155 = v174, !*(_QWORD *)v176))
                    {
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v201, v182);
                      v118 = v176;
                      IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v201[0], *((_WORD *)v176 + 25));
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v201);
                      v155 = v174;
                      v119 = 0;
                    }
                    else
                    {
                      v144 = v193 - v191;
                      v145 = (*(_QWORD *)(v25 + 64) + 1) & 0xFFFFFFFFFFFFFFFELL;
                      v146 = *(_QWORD *)(v25 + 48);
                      if (v145 + 16 >= v146)
                        v145 = 0;
                      if (v144 <= 0x10)
                        v144 = 16;
                      v147 = v145 + v144;
                      if (v146 <= v147)
                        v147 = 0;
                      v148 = *(unint64_t **)(*(_QWORD *)(v25 + 56) + 16);
                      do
                        v78 = __ldaxr(v148);
                      while (__stlxr(v147, v148));
                      *(_QWORD *)(v25 + 64) = v147;
                      v118 = v176;
                      if (v78 == 0x80000000)
                      {
                        v154 = v155;
                        MEMORY[0x19AEBA1A0](*(unsigned int *)(v25 + 140));
                        v155 = v154;
                        v118 = v176;
                      }
                      v119 = 1;
                    }
                    if ((v171 & 1) == 0)
                    {
                      v120 = v155 + 2;
                      do
                      {
                        v80 = __ldaxr(v120);
                        v81 = v80 - 1;
                      }
                      while (__stlxr(v81, v120));
                      if (!v81)
                      {
                        atomic_store(1u, v155 + 2);
                        v175 = v119;
                        (*(void (**)(unsigned int *))(*(_QWORD *)v155 + 8))(v155);
                        v119 = v175;
                      }
                    }
                    if (v118)
                    {
                      v172 = v119;
                      IPC::Decoder::~Decoder(v118);
                      WTF::fastFree(v122, v123);
                      if ((v172 & 1) == 0)
                        goto LABEL_214;
                    }
                    else if ((v119 & 1) == 0)
                    {
                      goto LABEL_214;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
LABEL_302:
                  v155 = 0;
                }
                v171 = 1;
                goto LABEL_204;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v183);
            goto LABEL_222;
          }
          v48 = v26;
          v49 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v47 + 2]);
          if ((_DWORD)v6 == (_DWORD)v49)
          {
            v26 = v48;
            if (v9)
            {
LABEL_72:
              *(_BYTE *)(v25 + 112) = 1;
              (*(void (**)(unsigned int *, uint64_t, unint64_t *))(*(_QWORD *)v9 + 16))(v9, v25, &v191);
              *(_BYTE *)(v25 + 112) = 0;
              if (!v191)
                goto LABEL_213;
              if (v198 >= 0xDB1u)
              {
                atomic_store(0, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v25 + 56) + 16) + 128));
                v153 = *(unint64_t **)(*(_QWORD *)(v25 + 56) + 16);
                do
                  v108 = __ldaxr(v153);
                while (__stlxr(0, v153));
                *(_QWORD *)(v25 + 64) = 0;
                if (v108 != 0x80000000)
                  goto LABEL_83;
LABEL_269:
                MEMORY[0x19AEBA1A0](*(unsigned int *)(v25 + 140));
                goto LABEL_83;
              }
              v50 = v193 - v191;
              v51 = (*(_QWORD *)(v25 + 64) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v52 = *(_QWORD *)(v25 + 48);
              if (v51 + 16 >= v52)
                v51 = 0;
              if (v50 <= 0x10)
                v50 = 16;
              v53 = v51 + v50;
              if (v52 <= v53)
                v53 = 0;
              v54 = *(unint64_t **)(*(_QWORD *)(v25 + 56) + 16);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v53, v54));
              goto LABEL_82;
            }
          }
          else
          {
            if (v9)
            {
              v56 = v9 + 2;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                atomic_store(1u, v9 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
              }
            }
            v6 = v49;
            v26 = v48;
          }
          if ((_DWORD)v6 == 255 || (v59 = *(_QWORD *)(v25 + 128), !(_DWORD)v6) && !v59)
          {
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v201, v182);
            IPC::Connection::dispatchDidReceiveInvalidMessage((uint64_t)v201[0], v198);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v201);
            goto LABEL_299;
          }
          if (__ldaxr(v26))
          {
            __clrex();
            goto LABEL_97;
          }
          if (__stxr(1u, v26))
LABEL_97:
            MEMORY[0x19AEABB3C](v26);
          v61 = *(_QWORD *)(v25 + 120);
          if (v61)
          {
            v62 = *(_DWORD *)(v61 - 8);
            v63 = 9 * ((~((_DWORD)v6 << 15) + v6) ^ ((~((_DWORD)v6 << 15) + v6) >> 10));
            v64 = (v63 ^ (v63 >> 6)) + ~((v63 ^ (v63 >> 6)) << 11);
            v65 = (v59 + ~(v59 << 32)) ^ ((unint64_t)(v59 + ~(v59 << 32)) >> 22);
            v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
            v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
            v68 = v62 & ((0xD7862706ELL
                        * (unint64_t)(277951225 * (v64 ^ HIWORD(v64))
                                           + 95187966 * ((v67 >> 31) ^ v67))) >> 4);
            v69 = (unsigned __int8 *)(v61 + 24 * v68);
            v70 = *v69;
            v71 = *((_QWORD *)v69 + 1);
            if (v70 != (_DWORD)v6 || v71 != v59)
            {
              v102 = 1;
              while (v70 || v71)
              {
                v68 = (v68 + v102) & v62;
                v103 = (unsigned __int8 *)(v61 + 24 * v68);
                v70 = *v103;
                v71 = *((_QWORD *)v103 + 1);
                ++v102;
                if (v70 == (_DWORD)v6 && v71 == v59)
                  goto LABEL_104;
              }
              goto LABEL_281;
            }
LABEL_104:
            v9 = *(unsigned int **)(v61 + 24 * v68 + 16);
            if (v9)
            {
              v73 = v9 + 2;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 + 1, v73));
            }
          }
          else
          {
LABEL_281:
            v9 = 0;
          }
          v75 = __ldxr(v26);
          if (v75 == 1)
          {
            if (!__stlxr(0, v26))
              goto LABEL_109;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_109:
          if (!v9)
          {
            if (__ldaxr(v26))
            {
              __clrex();
              goto LABEL_284;
            }
            if (__stxr(1u, v48))
LABEL_284:
              MEMORY[0x19AEABB3C](v48);
            v162 = __ldxr(v48);
            if (v162 == 1)
            {
              if (!__stlxr(0, v48))
                goto LABEL_299;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v48);
LABEL_299:
            v9 = 0;
            goto LABEL_214;
          }
          goto LABEL_72;
        }
        v82 = ((((v43 + 1) & 0xFFFFFFFFFFFFFFFELL) + 9) & 0xFFFFFFFFFFFFFFF8) - v43;
        v36 = v37 >= v82;
        v83 = v37 - v82;
        if (!v36 || v83 < 8)
          goto LABEL_212;
        v85 = (uint64_t *)((((v43 + 1) & 0xFFFFFFFFFFFFFFFELL) + 9) & 0xFFFFFFFFFFFFFFF8);
        v86 = *v85;
        v193 = (unint64_t)(v85 + 1);
        if (v44 != v86)
        {
          *(_QWORD *)(v25 + 128) = v86;
          if (v9)
          {
            v87 = v9 + 2;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (v88 == 1)
            {
              atomic_store(1u, v9 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
            }
            v9 = 0;
          }
        }
        v89 = v193 - v191;
        v90 = (*(_QWORD *)(v25 + 64) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v91 = *(_QWORD *)(v25 + 48);
        if (v90 + 16 >= v91)
          v90 = 0;
        if (v89 <= 0x10)
          v89 = 16;
        v53 = v90 + v89;
        if (v91 <= v53)
          v53 = 0;
        v92 = *(unint64_t **)(*(_QWORD *)(v25 + 56) + 16);
        do
          v55 = __ldaxr(v92);
        while (__stlxr(v53, v92));
LABEL_82:
        *(_QWORD *)(v25 + 64) = v53;
        if (v55 == 0x80000000)
          goto LABEL_269;
LABEL_83:
        IPC::Decoder::~Decoder((IPC::Decoder *)&v191);
        v8 = v7++ > 0x3E6;
        if (v7 == 1000)
        {
          LODWORD(v8) = 1;
          break;
        }
      }
      if (v9)
      {
        v105 = v9 + 2;
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      v1 = v186 | v8;
      v24 = (WTF *)((char *)v185 + 8);
      if ((char *)v185 + 8 != v184)
        continue;
      break;
    }
    v109 = 8 * v177;
    v110 = (unsigned int **)v189;
    v23 = v187;
    do
    {
      v110 = WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v110)
           + 1;
      v109 -= 8;
    }
    while (v109);
    v3 = v180;
    v2 = v181;
    v9 = v178;
    v7 = v179;
LABEL_21:
    if (v189)
      WTF::fastFree(v189, v4);
    v8 = v7;
    if (v7 <= v23)
    {
      if (v7 != v23)
      {
        v158 = (uint64_t *)((char *)v188 + 8 * v7);
        v159 = 8 * v23 - 8 * v7;
        do
        {
          v160 = *v158;
          *v158 = 0;
          if (v160)
            (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
          ++v158;
          v159 -= 8;
        }
        while (v159);
      }
      goto LABEL_26;
    }
    v163 = v23;
    v6 = (uint64_t)v3;
    v7 = (unint64_t)v2;
    if (v163)
      goto LABEL_306;
LABEL_289:
    v2 = (IPC::StreamConnectionWorkQueue *)v7;
    v3 = (unsigned __int8 *)v6;
    if ((unsigned int *)v8 != v9)
    {
      v164 = v8;
      v165 = (uint64_t *)((char *)v188 + 8 * v8);
      v166 = 8 * (_QWORD)v9 - 8 * v164;
      do
      {
        v167 = *v165;
        *v165 = 0;
        if (v167)
          (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
        ++v165;
        v166 -= 8;
        v2 = (IPC::StreamConnectionWorkQueue *)v7;
        v3 = (unsigned __int8 *)v6;
      }
      while (v166);
    }
LABEL_26:
    if (v188)
      WTF::fastFree(v188, v4);
    WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v190);
  }
  while ((v1 & 1) != 0);
}

void IPC::Decoder::~Decoder(IPC::Decoder *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v4 = *((_QWORD *)this + 3);
    if (v4 && v3 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v2);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v2);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Decoder::create(std::span<unsigned char const,18446744073709551615ul>,WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(int a1, WTF *this)
{
  return WTF::fastFree(this, this);
}

uint64_t IPC::Decoder::Decoder(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 244908032;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = a4;
  v4 = ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) - a2;
  if (a3 >= v4
    && a3 - v4 >= 2
    && (v5 = (unsigned __int16 *)((a2 + 1) & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(result + 16) = v5 + 1, a2)
    && (v6 = *v5, v6 < 0xE99))
  {
    *(_WORD *)(result + 50) = v6;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

unsigned __int8 ***`non-virtual thunk to'WebKit::RemoteRenderingBackend::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteRenderingBackend::didReceiveStreamMessage(this - 1, a2, a3);
}

unsigned __int8 ***WebKit::RemoteRenderingBackend::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  CFTypeRef v3;
  uint64_t v4;
  CFTypeRef v5;
  float v6;
  uint64_t **v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  char v13;
  char v14;
  unsigned __int8 ***v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  char v24;
  unsigned __int8 **v25;
  WTF *v26;
  char v27;
  WTF *v28;
  _QWORD *v29;
  unsigned int *v30;
  void *v31;
  WTF *v32;
  void *v33;
  unint64_t updated;
  char v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  unsigned __int8 ***v63;
  void *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  char v69;
  WTF *v70;
  WTF *v71;
  void *v72;
  unint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  const void **v79;
  const void *v80;
  CFTypeRef v81;
  uint64_t v82;
  char v83;
  unsigned __int8 **v84;
  WTF *v85;
  char v86;
  WTF *v87;
  _QWORD *v88;
  CFTypeRef v89;
  unint64_t v90;
  char v91;
  WTF *v92;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unsigned __int16 v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  int v103;
  CFTypeRef v104;
  int v105;
  CFTypeRef v106;
  CFTypeRef v107;
  WTF *v108;
  void *v109;
  void *v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  WTF *v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  CFTypeRef v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  CFTypeRef v175[2];
  CFTypeRef v176;
  CFTypeRef v177;
  CFTypeRef cf;
  CFTypeRef v179;
  char v180;
  char v181;
  WTF *v182[2];
  CFTypeRef v183;
  CFTypeRef v184;
  uint64_t v185;
  CFTypeRef v186;
  int v187;
  CFTypeRef v188;
  CFTypeRef v189;
  __int128 v190;
  char v191;
  __int128 v192;
  const void *v193;
  char v194;
  __int128 v195;
  unsigned __int8 v196;

  v8 = a2;
  v9 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x511:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::decode((uint64_t *)a3, v182);
      if (LOBYTE(v182[1]))
      {
        v11 = v182[0];
        v182[0] = 0;
        v175[0] = v11;
        WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)v182, v10);
        LOBYTE(v175[1]) = 1;
        WebCore::DisplayList::ResourceHeap::add((uint64_t *)(v9 + 64), (uint64_t *)v175);
        if (LOBYTE(v175[1]))
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)v175, v12);
        goto LABEL_198;
      }
      v123 = *(_QWORD *)a3;
      v124 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v125 = *((_QWORD *)a3 + 3);
      if (!v125)
        goto LABEL_153;
      if (v124)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v123);
        goto LABEL_210;
      }
      goto LABEL_154;
    case 0x512:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>((uint64_t *)a3, (uint64_t)v182);
      if (LOBYTE(v182[1]))
      {
        if (!*((_BYTE *)v182[0] + 40)
          || (WebCore::DisplayList::ResourceHeap::add((uint64_t *)(v9 + 64), (uint64_t *)v182), LOBYTE(v182[1])))
        {
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)v182, v72);
        }
      }
      goto LABEL_203;
    case 0x513:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v174, a2 + 4);
      IPC::Decoder::decode<WebCore::FontInternalAttributes>((uint64_t *)a3, &v192);
      if (!v194)
      {
        v54 = 0;
        LOBYTE(v182[0]) = 0;
        v191 = 0;
LABEL_193:
        v162 = *(_QWORD *)a3;
        v163 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v164 = *((_QWORD *)a3 + 3);
        if (v164 && v163)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v162);
        goto LABEL_50;
      }
      IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::decode((uint64_t *)a3, (uint64_t)v175);
      if (!v180)
      {
        v142 = *(_QWORD *)a3;
        v143 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v144 = *((_QWORD *)a3 + 3);
        if (!v144 || !v143 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, v142), !v180))
        {
          LOBYTE(v182[0]) = 0;
          v191 = 0;
LABEL_192:
          v54 = 0;
          goto LABEL_193;
        }
      }
      v51 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v195);
      v53 = v196;
      if (v196)
      {
        if (!v194 || !v180)
          goto LABEL_237;
        *(_OWORD *)v182 = v192;
        v183 = v193;
        v184 = v175[0];
        LOBYTE(v185) = v175[1];
        v5 = v176;
        v186 = v176;
        LODWORD(v4) = (_DWORD)v177;
        v187 = (int)v177;
        v3 = cf;
        v8 = (uint64_t **)v179;
        v188 = cf;
        v189 = v179;
        v190 = v195;
        v54 = 1;
        v191 = 1;
        cf = 0;
        v179 = 0;
        v176 = 0;
      }
      else
      {
        LOBYTE(v182[0]) = 0;
        v191 = 0;
        if (!v180)
          goto LABEL_192;
        v161 = v179;
        v179 = 0;
        if (v161)
          CFRelease(v161);
        v54 = 0;
      }
      v55 = cf;
      cf = 0;
      if (v55)
        CFRelease(v55);
      v56 = v176;
      v176 = 0;
      if (v56)
        CFRelease(v56);
      if (!v53)
        goto LABEL_193;
LABEL_50:
      if (v54)
      {
        v175[0] = v184;
        LOBYTE(v175[1]) = v185;
        v176 = v5;
        LODWORD(v177) = v4;
        v188 = 0;
        v189 = 0;
        v186 = 0;
        cf = v3;
        v179 = v8;
        WebKit::RemoteRenderingBackend::cacheFont(v9, (uint64_t)v182, (uint64_t)v175, v190, SBYTE8(v190));
        v57 = v179;
        v179 = 0;
        if (v57)
          CFRelease(v57);
        v58 = cf;
        cf = 0;
        if (v58)
          CFRelease(v58);
        v59 = v176;
        v176 = 0;
        if (v59)
          CFRelease(v59);
        if (v191)
        {
          v60 = v189;
          v189 = 0;
          if (v60)
            CFRelease(v60);
          v61 = v188;
          v188 = 0;
          if (v61)
            CFRelease(v61);
          v62 = v186;
          v186 = 0;
          if (v62)
            CFRelease(v62);
        }
      }
      v63 = (unsigned __int8 ***)&v174;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v63);
    case 0x514:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::decode((uint64_t *)a3, (uint64_t)v182);
      if ((_BYTE)v185)
        goto LABEL_70;
      v126 = *(_QWORD *)a3;
      v124 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v125 = *((_QWORD *)a3 + 3);
      if (!v125)
      {
LABEL_153:
        v124 = 0;
LABEL_154:
        v127 = 0;
        goto LABEL_155;
      }
      if (!v124)
        goto LABEL_154;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v126);
      if ((_BYTE)v185)
      {
LABEL_70:
        v175[0] = v182[0];
        v175[1] = v182[1];
        v176 = v183;
        v177 = v184;
        LOBYTE(cf) = 1;
        WebKit::RemoteRenderingBackend::cacheFontCustomPlatformData((PAL *)v9);
        v67 = (WTF::StringImpl *)v176;
        v176 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, v66);
          else
            *(_DWORD *)v67 -= 2;
        }
        v71 = (WTF *)v175[0];
        if (v175[0])
        {
          v175[0] = 0;
          LODWORD(v175[1]) = 0;
          goto LABEL_148;
        }
        goto LABEL_198;
      }
LABEL_210:
      v127 = *(_QWORD *)a3;
      v124 = *((_QWORD *)a3 + 1);
      v125 = *((_QWORD *)a3 + 3);
LABEL_155:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (!v125)
        goto LABEL_198;
LABEL_199:
      if (v124)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v127);
      goto LABEL_198;
    case 0x515:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>((unint64_t *)a3, (uint64_t)v182);
      if (!LOBYTE(v182[1]))
        goto LABEL_197;
      v32 = v182[0];
      v182[0] = 0;
      v175[0] = v32;
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)v182, v31);
      LOBYTE(v175[1]) = 1;
      if (!*((_BYTE *)v175[0] + 40)
        || (WebCore::DisplayList::ResourceHeap::add((uint64_t *)(v9 + 64), (uint64_t *)v175), LOBYTE(v175[1])))
      {
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)v175, v33);
      }
      goto LABEL_198;
    case 0x516:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>(a3, v175);
      v75 = v181;
      if (!v181)
        goto LABEL_186;
      v52 = *((_QWORD *)a3 + 1);
      v76 = *(_QWORD *)a3;
      v77 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v52 < v77 || v52 - v77 <= 7)
      {
        v157 = 0;
        v158 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v51 = *((_QWORD *)a3 + 3);
        if (v51)
          goto LABEL_238;
        goto LABEL_183;
      }
      v79 = (const void **)(v76 + v77);
      *((_QWORD *)a3 + 2) = v79 + 1;
      if (!v76)
      {
        v157 = v52;
        v158 = 0;
        goto LABEL_183;
      }
      v80 = *v79;
      if ((char *)*v79 - 1 >= (char *)0xFFFFFFFFFFFFFFFELL)
        goto LABEL_184;
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v182, (uint64_t)v175);
      v189 = v80;
      v75 = 1;
      goto LABEL_94;
    case 0x517:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      v90 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (!v91)
      {
        v128 = *(_QWORD *)a3;
        v129 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v130 = *((_QWORD *)a3 + 3);
        if (v130 && v129)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, v128);
        goto LABEL_174;
      }
      v92 = (WTF *)v90;
      ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>((uint64_t *)a3);
      if (ShouldRelaxThirdPartyCookie <= 0xFFu)
        goto LABEL_174;
      LOBYTE(v3) = ShouldRelaxThirdPartyCookie;
      v94 = IPC::Decoder::decode<WebCore::RenderingPurpose>((uint64_t *)a3);
      if (v94 <= 0xFFu)
        goto LABEL_174;
      v95 = *((_QWORD *)a3 + 1);
      v96 = *(_QWORD *)a3;
      v97 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v95 < v97 || v95 - v97 <= 3)
      {
        v145 = 0;
        v146 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v147 = *((_QWORD *)a3 + 3);
        if (v147)
        {
          if (v95)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147);
            v146 = *(_QWORD *)a3;
            v145 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v145 = 0;
            v146 = 0;
          }
        }
        goto LABEL_173;
      }
      v98 = (float *)(v96 + v97);
      *((_QWORD *)a3 + 2) = v98 + 1;
      if (!v96)
      {
        v145 = v95;
        v146 = 0;
LABEL_173:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v148 = *((_QWORD *)a3 + 3);
        if (v148 && v145)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v146);
        goto LABEL_174;
      }
      LOBYTE(v8) = v94;
      v6 = *v98;
      IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, (uint64_t)v175);
      if (!LOBYTE(v175[1]))
      {
LABEL_174:
        v99 = 0;
        v105 = 0;
        LOBYTE(v182[0]) = 0;
        LOBYTE(v186) = 0;
LABEL_175:
        v149 = *(_QWORD *)a3;
        v150 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v151 = *((_QWORD *)a3 + 3);
        if (v151 && v150)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v149);
        goto LABEL_124;
      }
      v99 = v3;
      v51 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>((uint64_t *)a3);
      LOBYTE(v3) = v51;
      if ((unsigned __int16)v51 <= 0xFFu)
      {
LABEL_181:
        v105 = 0;
        LOBYTE(v182[0]) = 0;
        v103 = 1;
        goto LABEL_120;
      }
      v52 = *((_QWORD *)a3 + 1);
      v100 = *(_QWORD *)a3;
      v101 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v52 < v101 || v52 - v101 <= 7)
      {
        v152 = 0;
        v153 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v154 = *((_QWORD *)a3 + 3);
        if (v154)
        {
          if (v52)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 16))(v154);
            v153 = *(_QWORD *)a3;
            v152 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v152 = 0;
            v153 = 0;
          }
        }
LABEL_179:
        v52 = 0;
        v100 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v155 = *((_QWORD *)a3 + 3);
        if (v155)
        {
          if (v152)
          {
            v51 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v155 + 16))(v155, v153, v152);
            if (*(_QWORD *)a3)
              goto LABEL_237;
            v100 = 0;
            v52 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v52 = 0;
            v100 = 0;
          }
        }
        goto LABEL_180;
      }
      v102 = (uint64_t *)(v100 + v101);
      *((_QWORD *)a3 + 2) = v102 + 1;
      if (!v100)
      {
        v152 = v52;
        v153 = 0;
        goto LABEL_179;
      }
      v4 = *v102;
      if ((unint64_t)(*v102 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      {
LABEL_180:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v156 = *((_QWORD *)a3 + 3);
        if (v156 && v52)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v100);
        goto LABEL_181;
      }
      if (!LOBYTE(v175[1]))
        goto LABEL_237;
      v103 = 0;
      v182[0] = v92;
      LOBYTE(v182[1]) = v99;
      BYTE1(v182[1]) = (_BYTE)v8;
      *((float *)&v182[1] + 1) = v6;
      v104 = v175[0];
      v175[0] = 0;
      v183 = v104;
      LOBYTE(v184) = v51;
      v185 = v4;
      v105 = 1;
LABEL_120:
      LOBYTE(v186) = v105;
      if (LOBYTE(v175[1]))
      {
        v106 = v175[0];
        v175[0] = 0;
        if (v106)
          CFRelease(v106);
      }
      if (v103)
        goto LABEL_175;
LABEL_124:
      if (v105)
      {
        WebKit::RemoteRenderingBackend::createImageBuffer((uint64_t *)v9, (uint64_t *)v182, v99 != 0, v8, &v183, (char)v3, v4, v6);
        if ((_BYTE)v186)
        {
          v107 = v183;
          v183 = 0;
          if (v107)
            CFRelease(v107);
        }
      }
LABEL_198:
      v63 = (unsigned __int8 ***)&v192;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v63);
    case 0x518:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      v68 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v69)
        goto LABEL_197;
      v70 = (WTF *)v68;
      IPC::ArgumentCoder<WebCore::ShapeDetection::BarcodeDetectorOptions,void>::decode((uint64_t *)a3, (uint64_t)v175);
      if ((_BYTE)v176)
      {
        v182[0] = v70;
        v182[1] = (WTF *)v175[0];
        v183 = v175[1];
        LOBYTE(v184) = 1;
        WebKit::RemoteRenderingBackend::createRemoteBarcodeDetector((uint64_t *)v9, (uint64_t)v70, (uint64_t)&v182[1]);
        if ((_BYTE)v184)
        {
          v71 = v182[1];
          if (v182[1])
          {
            v182[1] = 0;
            LODWORD(v183) = 0;
LABEL_148:
            WTF::fastFree(v71, v66);
          }
        }
      }
      else
      {
        v165 = *(_QWORD *)a3;
        v166 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v167 = *((_QWORD *)a3 + 3);
        if (v167 && v166)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 16))(v167, v165);
LABEL_197:
        v127 = *(_QWORD *)a3;
        v124 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v125 = *((_QWORD *)a3 + 3);
        if (v125)
          goto LABEL_199;
      }
      goto LABEL_198;
    case 0x519:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 4);
      v113 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v114)
        goto LABEL_202;
      v115 = (WTF *)v113;
      v116 = IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::decode((uint64_t *)a3);
      if ((v116 & 0xFF00000000) != 0)
      {
        v182[0] = v115;
        LODWORD(v182[1]) = v116;
        LOBYTE(v183) = 1;
        WebKit::RemoteRenderingBackend::createRemoteFaceDetector((uint64_t *)v9, (uint64_t)v115);
      }
      else
      {
        v168 = *(_QWORD *)a3;
        v169 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v170 = *((_QWORD *)a3 + 3);
        if (v170 && v169)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v168);
LABEL_202:
        v171 = *(_QWORD *)a3;
        v172 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v173 = *((_QWORD *)a3 + 3);
        if (v173 && v172)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v171);
      }
LABEL_203:
      v63 = (unsigned __int8 ***)v175;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v63);
    case 0x51A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v37)
        goto LABEL_167;
      v38 = *((_QWORD *)a3 + 1);
      v39 = *(_QWORD *)a3;
      v40 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v38 >= v40 && v38 - v40 > 7)
      {
        v42 = (uint64_t *)(v39 + v40);
        *((_QWORD *)a3 + 2) = v42 + 1;
        if (v39)
        {
          v43 = *v42;
          if ((unint64_t)(v43 - 1) < 0xFFFFFFFFFFFFFFFELL)
          {
            WebKit::RemoteRenderingBackend::createRemoteImageBufferSet(v9, v36, v43);
LABEL_144:
            v63 = (unsigned __int8 ***)v182;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v63);
          }
LABEL_166:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v138 = *((_QWORD *)a3 + 3);
          if (v138 && v38)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v39);
LABEL_167:
          v139 = *(_QWORD *)a3;
          v140 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v141 = *((_QWORD *)a3 + 3);
          if (v141 && v140)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v139);
          goto LABEL_144;
        }
        v134 = v38;
        v135 = 0;
      }
      else
      {
        v134 = 0;
        v135 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v136 = *((_QWORD *)a3 + 3);
        if (v136)
        {
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
            v135 = *(_QWORD *)a3;
            v134 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v134 = 0;
            v135 = 0;
          }
        }
      }
      v38 = 0;
      v39 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v137 = *((_QWORD *)a3 + 3);
      if (v137)
      {
        if (v134)
        {
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v137 + 16))(v137, v135, v134);
          if (*(_QWORD *)a3)
          {
LABEL_237:
            while (1)
            {
              __break(1u);
LABEL_238:
              if (v52)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
                v158 = *(_QWORD *)a3;
                v157 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v157 = 0;
                v158 = 0;
              }
LABEL_183:
              v52 = 0;
              v76 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v159 = *((_QWORD *)a3 + 3);
              if (!v159)
                break;
              if (!v157)
              {
                v52 = 0;
                v76 = 0;
                break;
              }
              v51 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v159 + 16))(v159, v158, v157);
              if (!*(_QWORD *)a3)
              {
                v76 = 0;
                v52 = *((_QWORD *)a3 + 1);
                break;
              }
            }
LABEL_184:
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v160 = *((_QWORD *)a3 + 3);
            if (v160 && v52)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 16))(v160, v76);
            v75 = 0;
LABEL_186:
            LOBYTE(v182[0]) = 0;
LABEL_94:
            LOBYTE(v190) = v75;
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v175);
            if ((_BYTE)v190
              || (v131 = *(_QWORD *)a3,
                  v132 = *((_QWORD *)a3 + 1),
                  *(_QWORD *)a3 = 0,
                  *((_QWORD *)a3 + 1) = 0,
                  (v133 = *((_QWORD *)a3 + 3)) != 0)
              && v132
              && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v131), (_BYTE)v190))
            {
              WebKit::RemoteRenderingBackend::cacheNativeImage(v9);
              if ((_BYTE)v190)
              {
                if ((_BYTE)v185)
                {
                  v81 = v184;
                  v184 = 0;
                  if (v81)
                    CFRelease(v81);
                }
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v182);
              }
            }
            goto LABEL_198;
          }
          v39 = 0;
          v38 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
      }
      goto LABEL_166;
    case 0x51B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v111 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v112)
        WebKit::RemoteRenderingBackend::createRemoteTextDetector((uint64_t *)v9, v111);
      goto LABEL_144;
    case 0x51C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v30 = *(unsigned int **)(v9 + 104);
      *(_QWORD *)(v9 + 104) = 0;
      if (v30)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v30);
      goto LABEL_144;
    case 0x51D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      updated = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
      if (v35)
        WebKit::RemoteRenderingBackend::finalizeRenderingUpdate((_QWORD *)v9, updated);
      goto LABEL_144;
    case 0x51E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      v84 = (unsigned __int8 **)v192;
      v85 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v86)
        goto LABEL_198;
      v87 = v85;
      v182[0] = v85;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v84);
      v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v88 = off_1E34B7920;
      v88[1] = v87;
      v182[1] = 0;
      v88[2] = v84;
      v175[0] = v88;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v182[1]);
      WebKit::RemoteRenderingBackend::getImageBufferResourceLimitsForTesting(v9, (uint64_t *)v175);
      goto LABEL_104;
    case 0x51F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      v25 = (unsigned __int8 **)v192;
      v26 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v27)
        goto LABEL_198;
      v28 = v26;
      v182[0] = v26;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v25);
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v29 = off_1E34B7948;
      v29[1] = v28;
      v182[1] = 0;
      v29[2] = v25;
      v175[0] = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v182[1]);
      WebKit::RemoteRenderingBackend::getRemoteBarcodeDetectorSupportedFormats();
LABEL_104:
      v89 = v175[0];
      v175[0] = 0;
      if (v89)
        (*(void (**)(CFTypeRef))(*(_QWORD *)v89 + 8))(v89);
      goto LABEL_198;
    case 0x520:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t)v182, (uint64_t *)a3);
      if ((_BYTE)v185)
      {
        WebKit::RemoteRenderingBackend::markSurfacesVolatile((_QWORD *)v9, (uint64_t)v182[0], (uint64_t *)&v182[1], v184);
        if ((_BYTE)v185)
        {
          v65 = v182[1];
          if (v182[1])
          {
            v182[1] = 0;
            LODWORD(v183) = 0;
            WTF::fastFree(v65, v64);
          }
        }
      }
      goto LABEL_203;
    case 0x521:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v23 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v24)
        WebKit::RemoteRenderingBackend::moveToImageBuffer((WTF::ApproximateTime *)v9, v23);
      goto LABEL_144;
    case 0x522:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v73 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v74)
        WebKit::RemoteRenderingBackend::moveToSerializedBuffer(v9, v73);
      goto LABEL_144;
    case 0x523:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v192, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v182, (uint64_t *)a3);
      if ((_BYTE)v183)
      {
        v175[0] = v182[0];
        v108 = v182[1];
        v182[0] = 0;
        v182[1] = 0;
        v175[1] = v108;
        WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay(v9, (uint64_t)v175);
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v175, v109);
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v182, v110);
      }
      goto LABEL_198;
    case 0x524:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      WebCore::DisplayList::ResourceHeap::clearAllDrawingResources((uint64_t *)(v9 + 64));
      goto LABEL_144;
    case 0x525:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      WebCore::DisplayList::ResourceHeap::clearAllImageResources((uint64_t *)(v9 + 64));
      goto LABEL_144;
    case 0x526:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v82 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v83)
        WebKit::RemoteRenderingBackend::releaseImageBuffer(v9, v82);
      goto LABEL_144;
    case 0x527:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v117 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v118)
        goto LABEL_144;
      v46 = v117;
      v47 = *(_QWORD *)(v9 + 40);
      v48 = 59;
      goto LABEL_140;
    case 0x528:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v119 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v120)
        goto LABEL_144;
      v46 = v119;
      v47 = *(_QWORD *)(v9 + 40);
      v48 = 78;
      goto LABEL_140;
    case 0x529:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v50)
        goto LABEL_167;
      WebKit::RemoteRenderingBackend::releaseRemoteImageBufferSet(v9, v49);
      goto LABEL_144;
    case 0x52A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v44 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v45)
        goto LABEL_144;
      v46 = v44;
      v47 = *(_QWORD *)(v9 + 40);
      v48 = 125;
LABEL_140:
      IPC::StreamServerConnection::stopReceivingMessages(v47, v48, v46);
      WebKit::ShapeDetection::ObjectHeap::removeObject(*(uint64_t **)(v9 + 136), v46);
      goto LABEL_144;
    case 0x52B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v182, a2 + 4);
      v121 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v122 && (WebKit::RemoteResourceCache::releaseRenderingResource(v9 + 64, v121) & 1) == 0)
        WebKit::RemoteRenderingBackend::terminateWebProcess(v9, (uint64_t)"Resource is being released before being cached.");
      goto LABEL_144;
    default:
      if (*((_WORD *)a3 + 25) == 3640)
      {
        this = (unsigned __int8 ***)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        v14 = v13;
        if (v13)
        {
          v15 = this;
          this = (unsigned __int8 ***)IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v182, (uint64_t *)a3);
          if ((_BYTE)v183)
          {
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, v8 + 4);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v175);
            v175[0] = v15;
            LOBYTE(v175[1]) = v14;
            v16 = (unsigned int *)(v8 + 1);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            v18 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v18 = off_1E34B7970;
            *(_OWORD *)(v18 + 8) = *(_OWORD *)v175;
            v176 = 0;
            *(_QWORD *)(v18 + 24) = v8;
            *(_QWORD *)&v195 = v18;
            *(WTF **)&v192 = v182[0];
            v19 = v182[1];
            v182[0] = 0;
            v182[1] = 0;
            *((_QWORD *)&v192 + 1) = v19;
            WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(v9, (uint64_t)&v192, (uint64_t *)&v195);
            WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v192, v20);
            v21 = v195;
            *(_QWORD *)&v195 = 0;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            this = (unsigned __int8 ***)WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v176);
            if ((_BYTE)v183)
              return (unsigned __int8 ***)WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v182, v22);
          }
        }
      }
      return this;
  }
}

unsigned int *WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)(result - 2));
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteImageBufferSet::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  int v5;
  void *updated;
  char v7;
  uint64_t **v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v17;
  char v18;
  float v19;
  unsigned __int16 v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  uint64_t *v33;
  uint64_t *v34;
  char v35;
  float v36;
  CFTypeRef cf;
  char v38;
  char v39;
  CFTypeRef v40;
  char v41;

  v4 = (uint64_t)this;
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1095)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v34, a2 + 4);
    updated = (void *)IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
    if (v7)
      WebKit::RemoteImageBufferSet::endPrepareForDisplay(v4, updated);
    v8 = &v34;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v8);
  }
  if (v5 == 1096)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v33, a2 + 4);
    v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
    if (!v10)
    {
      v22 = *(_QWORD *)a3;
      v23 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v24 = *((_QWORD *)a3 + 3);
      if (v24 && v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
      goto LABEL_29;
    }
    v11 = (uint64_t *)v9;
    ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>((uint64_t *)a3);
    if (ShouldRelaxThirdPartyCookie >= 0x100u)
    {
      v13 = *((_QWORD *)a3 + 1);
      v14 = *(_QWORD *)a3;
      v15 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v13 < v15 || v13 - v15 <= 3)
      {
        v25 = 0;
        v26 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v27 = *((_QWORD *)a3 + 3);
        if (v27)
        {
          if (v13)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v14, v13);
            v26 = *(_QWORD *)a3;
            v25 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v25 = 0;
            v26 = 0;
          }
        }
        goto LABEL_27;
      }
      v17 = (float *)(v14 + v15);
      *((_QWORD *)a3 + 2) = v17 + 1;
      if (!v14)
      {
        v25 = v13;
        v26 = 0;
LABEL_27:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v28 = *((_QWORD *)a3 + 3);
        if (v28 && v25)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
        goto LABEL_28;
      }
      v18 = ShouldRelaxThirdPartyCookie;
      v19 = *v17;
      IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, (uint64_t)&v40);
      if (!v41)
      {
LABEL_28:
        LOBYTE(v34) = 0;
        goto LABEL_29;
      }
      v20 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>((uint64_t *)a3);
      if (v20 >= 0x100u)
      {
        if (v41)
        {
          v34 = v11;
          v35 = v18;
          v36 = v19;
          cf = v40;
          v38 = v20;
          v39 = 1;
          WebKit::RemoteImageBufferSet::updateConfiguration(v4, &v34, v18 != 0, &cf, v20, v19);
          if (v39)
          {
            v21 = cf;
            cf = 0;
            if (v21)
              CFRelease(v21);
          }
          goto LABEL_22;
        }
        __break(1u);
      }
      LOBYTE(v34) = 0;
      if (v41)
      {
        v32 = v40;
        v40 = 0;
        if (v32)
          CFRelease(v32);
      }
    }
LABEL_29:
    v29 = *(_QWORD *)a3;
    v30 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v31 = *((_QWORD *)a3 + 3);
    if (v31 && v30)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
LABEL_22:
    v8 = &v33;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v8);
  }
  return this;
}

IPC::Encoder *WebKit::RemoteRenderingBackend::finalizeRenderingUpdate(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = a1[12];
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1294;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(IPC::Encoder *a1, CFTypeRef *a2)
{
  CGColorSpace *v3;

  v3 = (CGColorSpace *)*a2;
  if (*a2)
    CFRetain(*a2);
  IPC::ArgumentCoder<CGColorSpace *,void>::encode(a1, v3);
  if (v3)
    CFRelease(v3);
}

void sub_196BFC5C4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::DestinationColorSpace>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  CFTypeRef cf;
  char v9;

  IPC::Decoder::decode<WTF::RetainPtr<CGColorSpace *>>(a1, (uint64_t)&cf);
  if (*a1)
  {
    if (!v9)
    {
      __break(1u);
      return;
    }
    v4 = cf;
    cf = 0;
    v6 = v4;
    WebCore::DestinationColorSpace::DestinationColorSpace();
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 1;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v9)
  {
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_196BFC6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf)
    CFRelease(cf);
  if (a12)
  {
    if (a11)
      CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::RetainPtr<CGColorSpace *>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::RetainPtr<CGColorSpace *>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::RetainPtr<CGColorSpace *>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v6[8];
  unsigned int v7;
  char v8;

  result = IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>(a1, v6);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    result = (uint64_t)WebKit::CoreIPCCGColorSpace::toCF((WebKit::CoreIPCCGColorSpace *)v6, &v5);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                          + v7))(&v5, v6);
  }
  return result;
}

void sub_196BFC7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                               + a12))(&a9, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ColorSpace>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 0x14)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

uint64_t IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FontInternalAttributes>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::decode(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteRenderingBackend::workQueueInitialize(WebKit::RemoteRenderingBackend *this)
{
  IPC::Semaphore *v2;
  IPC::Semaphore *v4[2];

  IPC::StreamServerConnection::open(*((IPC::StreamServerConnection **)this + 5), *((IPC::StreamConnectionWorkQueue **)this + 4));
  IPC::StreamServerConnection::startReceivingMessages(*((_QWORD *)this + 5), (uint64_t)this + 8, 0x74u, *((_QWORD *)this + 12));
  v2 = (IPC::Semaphore *)(*((_QWORD *)this + 5) + 136);
  v4[0] = (IPC::Semaphore *)(*((_QWORD *)this + 4) + 32);
  v4[1] = v2;
  return IPC::MessageSender::send<Messages::RemoteRenderingBackendProxy::DidInitialize>((uint64_t)this, v4, *((_QWORD *)this + 12));
}

void sub_196BFD70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;

  CFRelease(*(CFTypeRef *)(v14 + 8));
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v16);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebPreferences::update(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::WebPageProxy *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = this;
  if (*((_DWORD *)this + 26))
  {
    *((_BYTE *)this + 108) = 1;
  }
  else
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v14);
    v2 = v1[11];
    if (v2)
    {
      v3 = *(unsigned int *)(v2 - 4);
      v4 = v2 + 8 * v3;
    }
    else
    {
      v4 = 0;
      v3 = 0;
    }
    v9 = v1 + 11;
    v10 = v4;
    v11 = v4;
    v12 = v4;
    v13 = v2 + 8 * v3;
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
    while (v15 != v10)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      if (v7)
        v8 = (WebKit::WebPageProxy *)(v7 - 16);
      else
        v8 = 0;
      WebKit::WebPageProxy::preferencesDidChange(v8, v5, v6);
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
    }
  }
  return this;
}

_QWORD *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  a2[3] = v8;
  a2[4] = &v6[v7];
  return WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B22C0;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_1,void,IPC::Decoder *>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_1E34CF940;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v3);
}

{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CF940;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

void WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(WebKit::ProcessThrottlerActivity *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebKit::ProcessThrottlerActivity::invalidate((uint64_t)this, 0);
      v3 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)this + 1) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
LABEL_10:
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void sub_196BFDA08(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  unsigned int **v18;
  uint64_t v19;
  uint64_t v21;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (!v7)
        goto LABEL_25;
      v8 = 0;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 8 * --v7);
          if ((unint64_t)(v9 + 1) >= 2 && !*(_QWORD *)(v9 + 8))
            break;
          if (!v7)
            goto LABEL_14;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, a2);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_14:
      v6 = *(_QWORD *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v8;
        v6 = *(_QWORD *)a1;
      }
      if (v6)
      {
        v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v6 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v6 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  if (!*a2 || !*(_QWORD *)(*a2 + 8))
    return 0;
  v21 = *a2;
  v18 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v21);
  if (*(_QWORD *)a1)
  {
    v19 = *(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if ((unsigned int **)v19 == v18)
      return 0;
  }
  else
  {
    if (!v18)
      return 0;
    v19 = 0;
  }
  if ((unsigned int **)v19 != v18)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v18);
  return 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  IPC::Encoder *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char **v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  IPC::Encoder *v28;
  int v29;
  uint64_t v30;
  int v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  IPC::Encoder *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  IPC::Encoder *v58;
  IPC::Encoder *v59;
  uint64_t v60[2];
  IPC::Encoder *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  result = WTF::isMainRunLoop((WTF *)a1);
  if ((result & 1) == 0)
  {
    v15 = (unsigned int *)(a1 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v17 = *a2;
    *a2 = 0;
    v18 = *(unsigned __int8 *)(a4 + 16);
    if (*(_BYTE *)(a4 + 16))
    {
      v19 = *(_QWORD *)a4;
      v5 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)a4 = 0;
    }
    else
    {
      v19 = 0;
    }
    v37 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v37 = off_1E34CF918;
    *(_QWORD *)(v37 + 8) = a1;
    *(_QWORD *)(v37 + 16) = v17;
    *(_BYTE *)(v37 + 24) = a3;
    *(_BYTE *)(v37 + 32) = 0;
    *(_BYTE *)(v37 + 48) = 0;
    if (v18)
    {
      *(_QWORD *)(v37 + 32) = v19;
      *(_QWORD *)(v37 + 40) = v5;
      *(_BYTE *)(v37 + 48) = 1;
      v19 = 0;
    }
    *(_BYTE *)(v37 + 56) = a5;
    v61 = (IPC::Encoder *)v37;
    WTF::callOnMainRunLoop();
    v38 = v61;
    v61 = 0;
    if (v38)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v38 + 8))(v38);
    if (v18 && v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return 1;
  }
  if (*(_BYTE *)(a4 + 16))
  {
    if ((v14 = *(_QWORD *)(a1 + 136)) != 0 && *(_BYTE *)(v14 + 104) || *(_QWORD *)(a1 + 144))
    {
      if (a5)
      {
        v20 = *(_QWORD *)a4;
        *(_QWORD *)a4 = 0;
        v21 = *(unsigned __int16 *)*a2;
        if (v21 >= 0xE98)
          v21 = 3736;
        v22 = &(&IPC::Detail::messageDescriptions)[3 * v21];
        v23 = *v22;
        v24 = (uint64_t)v22[1];
        v25 = WTF::fastMalloc((WTF *)0x28);
        WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v25, a1 + 200, v23, v24, 0, 1);
        result = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)result = off_1E34CF940;
        *(_QWORD *)(result + 8) = v25;
        *(_QWORD *)(result + 16) = v20;
        if (!*(_BYTE *)(a4 + 16))
          goto LABEL_58;
        v26 = *(_QWORD *)a4;
        *(_QWORD *)a4 = result;
        if (v26)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
    }
  }
  v27 = *(_QWORD *)(a1 + 136);
  if (v27 && *(_BYTE *)(v27 + 104))
  {
    v28 = *a2;
    *a2 = 0;
    v61 = v28;
    v62 = a3;
    LOBYTE(v63) = 0;
    v65 = 0;
    v29 = *(unsigned __int8 *)(a4 + 16);
    if (*(_BYTE *)(a4 + 16))
    {
      v30 = *(_QWORD *)a4;
      v13 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)a4 = 0;
      v63 = v30;
      v64 = v13;
      v31 = 1;
      v65 = 1;
    }
    else
    {
      v31 = 0;
    }
    v39 = (uint64_t *)(a1 + 120);
    v40 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v40 == *(_DWORD *)(a1 + 128))
    {
      v41 = WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v61);
      v42 = *(_DWORD *)(a1 + 132);
      v43 = *(_QWORD *)(a1 + 120);
      v44 = v43 + 40 * v42;
      v45 = *(_QWORD *)v41;
      *(_QWORD *)v41 = 0;
      *(_QWORD *)v44 = v45;
      LOBYTE(v45) = *(_BYTE *)(v41 + 8);
      *(_BYTE *)(v44 + 32) = 0;
      v46 = (_BYTE *)(v44 + 32);
      *(v46 - 24) = v45;
      *(v46 - 16) = 0;
      if (*(_BYTE *)(v41 + 32))
      {
        v47 = *(_QWORD *)(v41 + 16);
        *(_QWORD *)(v41 + 16) = 0;
        *((_QWORD *)v46 - 2) = v47;
        *(_QWORD *)(v43 + 40 * v42 + 24) = *(_QWORD *)(v41 + 24);
        *v46 = 1;
      }
      ++*(_DWORD *)(a1 + 132);
      if (!v65)
        goto LABEL_45;
    }
    else
    {
      v48 = *v39;
      v49 = *v39 + 40 * v40;
      v61 = 0;
      *(_QWORD *)v49 = v28;
      *(_BYTE *)(v49 + 8) = a3;
      *(_BYTE *)(v49 + 16) = 0;
      v50 = (_QWORD *)(v49 + 16);
      *(_BYTE *)(v49 + 32) = 0;
      v51 = (_BYTE *)(v49 + 32);
      if (v29)
      {
        v52 = v63;
        v63 = 0;
        *v50 = v52;
        *(_QWORD *)(v48 + 40 * v40 + 24) = v13;
        *v51 = 1;
      }
      ++*(_DWORD *)(a1 + 132);
      if (!v31)
        goto LABEL_45;
    }
    v53 = v63;
    v63 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
LABEL_45:
    v54 = v61;
    v61 = 0;
    if (v54)
    {
      IPC::Encoder::~Encoder(v54, v12);
      WTF::fastFree(v55, v56);
    }
    return 1;
  }
  if (*(_QWORD *)(a1 + 144))
  {
    if (*(_BYTE *)(a4 + 16))
    {
      result = WebKit::AuxiliaryProcessProxy::protectedConnection(a1, (unsigned __int8 ***)&v61);
      if (!*(_BYTE *)(a4 + 16))
        goto LABEL_58;
      v32 = (os_unfair_lock_s *)v61;
      v33 = *(_QWORD *)a4;
      v34 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)a4 = 0;
      v60[0] = v33;
      v60[1] = v34;
      v35 = IPC::Connection::sendMessageWithAsyncReply(v32, a2, v60, a3, 0);
      v36 = v60[0];
      v60[0] = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    else
    {
      WebKit::AuxiliaryProcessProxy::protectedConnection(a1, (unsigned __int8 ***)&v61);
      v35 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)a2, a3, 0);
    }
    result = (uint64_t)v61;
    v61 = 0;
    if (result)
      result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)result);
    if (!v35)
      return 1;
  }
  if (!*(_BYTE *)(a4 + 16) || !*(_QWORD *)a4)
    return 0;
  result = WTF::RunLoop::current((WTF::RunLoop *)result);
  if (*(_BYTE *)(a4 + 16))
  {
    v57 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    v58 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v58 = &off_1E34CF968;
    *((_QWORD *)v58 + 1) = v57;
    v61 = v58;
    WTF::RunLoop::dispatch();
    v59 = v61;
    v61 = 0;
    if (v59)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v59 + 8))(v59);
    return 0;
  }
LABEL_58:
  __break(1u);
  return result;
}

unsigned int *WebKit::ProcessThrottler::updateThrottleStateIfNeeded(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _BOOL8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 189))
  {
    v1 = (uint64_t)this;
    if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 17)
      && WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v1 + 152)))
    {
      if (*(_BYTE *)(v1 + 184))
      {
        WTF::RunLoop::TimerBase::start();
        return WebKit::ProcessThrottler::sendPrepareToSuspendIPC((unsigned int *)v1, 0);
      }
      goto LABEL_21;
    }
    if (*(_BYTE *)(v1 + 184))
    {
      if (!*(_BYTE *)(v1 + 176))
      {
LABEL_21:
        v14 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v1);
        return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v1, v14);
      }
      v2 = qword_1ECE71640;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
LABEL_17:
        v10 = *(unsigned int **)(*(_QWORD *)(v1 + 16) + 8);
        v11 = v10 + 4;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v1) != 2;
        (*(void (**)(unsigned int *, _BOOL8))(*(_QWORD *)v10 + 96))(v10, v13);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10 + 4);
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 40));
        if (*(_BYTE *)(v1 + 176))
          *(_BYTE *)(v1 + 176) = 0;
        goto LABEL_21;
      }
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 136);
      if (v3)
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      v4 = *(_QWORD *)(v1 + 168);
      v15 = 134218496;
      v16 = v1;
      v17 = 1024;
      v18 = v3;
      v19 = 2048;
      v20 = v4;
      v5 = "%p - [PID=%d] ProcessThrottler::updateThrottleStateIfNeeded: sending ProcessDidResume IPC because the WebProc"
           "ess is still processing request to suspend=%llu";
      v6 = v2;
      v7 = 28;
    }
    else
    {
      v8 = qword_1ECE71640;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 136);
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 108);
      v15 = 134218240;
      v16 = v1;
      v17 = 1024;
      v18 = v9;
      v5 = "%p - [PID=%d] ProcessThrottler::updateThrottleStateIfNeeded: sending ProcessDidResume IPC because the process was suspended";
      v6 = v8;
      v7 = 18;
    }
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v15, v7);
    goto LABEL_17;
  }
  return this;
}

uint64_t WebKit::ProcessThrottler::expectedThrottleState(WebKit::ProcessThrottler *this)
{
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 17))
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 19);
  else
    return 2;
}

BOOL WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[5];

  if (!*a1 || !*((_DWORD *)*a1 - 3))
    return 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(a1, v11);
  v2 = *a1;
  if (*a1)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[v3];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v6 = a1;
  v7 = v4;
  v8 = v4;
  v9 = v4;
  v10 = &v2[v3];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v6);
  return v11[1] == (_QWORD)v7;
}

unsigned int *WebKit::ProcessThrottler::setThrottleState(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::RunLoop *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  void *v75;
  char v76;
  _QWORD *v77;
  _QWORD *v78;
  _BYTE buf[12];
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)result + 184) = a2;
  if (a2 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x196BFEA34);
  }
  v3 = (uint64_t)result;
  v4 = 0x30100u >> (8 * a2);
  v5 = *((_QWORD *)result + 3);
  if ((!v5 || *(_BYTE *)(v5 + 48) || *(unsigned __int8 *)(v5 + 16) != v4) && *((_BYTE *)result + 189))
  {
    v6 = *(_QWORD **)(*((_QWORD *)result + 2) + 8);
    v7 = (unsigned int *)(v6 + 2);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 136);
      if (v11)
        v12 = *(_DWORD *)(v11 + 108);
      else
        v12 = 0;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v3;
      v80 = 1024;
      v81 = v12;
      v82 = 1024;
      v83 = v4 & 3;
      v84 = 1024;
      v85 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v3 + 136, v10);
      v86 = 1024;
      v87 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v3 + 152, v13);
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setThrottleState: Updating process assertion type to %u (foregroundActivities=%u, backgroundActivities=%u)", buf, 0x24u);
    }
    v14 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(v3 + 8);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v14 + 8));
      if (!*(_BYTE *)(v15 + 16))
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v16);
        goto LABEL_41;
      }
      v76 = v4;
      v77 = v6;
      v17 = *(unsigned __int8 *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v14 + 64) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v19 = v15;
      ++*(_DWORD *)v15;
      v19[1] = v14;
      v20 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v19);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v21 = off_1E34D1288;
      v21[1] = WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::entryExpired;
      v21[2] = 0;
      v21[3] = v19;
      WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v19 + 2), v20);
      v19[2] = off_1E34ABE00;
      v19[5] = v21;
      WTF::RunLoop::TimerBase::start();
      v24 = *(_QWORD *)(v15 + 8);
      v23 = (uint64_t *)(v15 + 8);
      v22 = v24;
      if (v24
        || (WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(v23),
            (v22 = *v23) != 0))
      {
        v25 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        v25 = 0;
      }
      v26 = 9 * ((~(v17 << 15) + v17) ^ ((~(v17 << 15) + v17) >> 10));
      v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
      v28 = v25 & (v27 ^ HIWORD(v27));
      v29 = (unsigned __int8 *)(v22 + 16 * v28);
      v30 = *v29;
      v6 = v77;
      LOBYTE(v4) = v76;
      if (v30 != 255)
      {
        v31 = 0;
        v32 = 1;
        do
        {
          if (v30 == v17)
          {
            std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100]((uint64_t)v19);
            goto LABEL_41;
          }
          if (v30 == 254)
            v31 = v29;
          v28 = (v28 + v32) & v25;
          v29 = (unsigned __int8 *)(v22 + 16 * v28);
          v30 = *v29;
          ++v32;
        }
        while (v30 != 255);
        if (v31)
        {
          *v31 = -1;
          *((_QWORD *)v31 + 1) = 0;
          --*(_DWORD *)(*v23 - 16);
          v29 = v31;
        }
      }
      *v29 = v17;
      v33 = *((_QWORD *)v29 + 1);
      *((_QWORD *)v29 + 1) = v19;
      if (v33)
        std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v33);
      v34 = *v23;
      if (*v23)
        v35 = *(_DWORD *)(v34 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v34 - 12) = v35;
      v36 = *v23;
      if (*v23)
        v37 = *(_DWORD *)(v36 - 12);
      else
        v37 = 0;
      v38 = (*(_DWORD *)(v36 - 16) + v37);
      v39 = *(unsigned int *)(v36 - 4);
      if (v39 <= 0x400)
      {
        if (3 * v39 > 4 * v38)
          goto LABEL_41;
        goto LABEL_39;
      }
      if (v39 <= 2 * v38)
LABEL_39:
        WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(v23);
    }
LABEL_41:
    v40 = *(_QWORD *)(v3 + 8);
    v43 = *(_QWORD *)(v40 + 8);
    v41 = (uint64_t *)(v40 + 8);
    v42 = v43;
    v44 = WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(v43, v4);
    v45 = (void *)v44;
    if (v43)
      v46 = v42 + 16 * *(unsigned int *)(v42 - 4);
    else
      v46 = 0;
    if (v46 == v44)
      goto LABEL_55;
    v47 = *(_QWORD *)(v44 + 8);
    *(_QWORD *)(v44 + 8) = 0;
    if (*v41)
    {
      v48 = *v41 + 16 * *(unsigned int *)(*v41 - 4);
      if (v48 == v44)
        goto LABEL_52;
    }
    else
    {
      if (!v44)
        goto LABEL_52;
      v48 = 0;
    }
    if (v48 != v44)
      WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(v41, v44);
LABEL_52:
    if (v47)
    {
      v49 = *(_QWORD *)(v47 + 8);
      if (*(_BYTE *)(v49 + 48))
        v49 = 0;
      else
        *(_QWORD *)(v47 + 8) = 0;
      std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v47);
      goto LABEL_58;
    }
LABEL_55:
    v49 = 0;
LABEL_58:
    v50 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v49;
    if (v50)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v50 + 8), v45);
      v49 = *(_QWORD *)(v3 + 24);
    }
    if (!v49)
    {
      if (*(_BYTE *)(v3 + 186))
      {
        WebKit::ProcessThrottler::assertionName(buf, v3, v4);
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v51 = &off_1E34D1308;
        v51[1] = v14;
        v78 = v51;
        v52 = WTF::fastMalloc((WTF *)0xC0);
        v53 = WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(v52, v6, (_DWORD **)buf, v4);
        WebKit::ProcessAssertion::acquireAsync(v53, (uint64_t *)&v78);
        if (v78)
          (*(void (**)(_QWORD *))(*v78 + 8))(v78);
        if (*(_QWORD *)buf)
        {
          if (**(_DWORD **)buf == 2)
            WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, v54);
          else
            **(_DWORD **)buf -= 2;
        }
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
        v60 = *(unsigned int **)v3;
        if (*(_QWORD *)v3)
        {
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
        }
        v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v63 = &off_1E34D1330;
        v63[1] = v60;
        v64 = *(_QWORD *)(v52 + 176);
        *(_QWORD *)(v52 + 176) = v63;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
        v65 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v52;
        if (v65)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v65 + 8), v62);
      }
      else
      {
        WebKit::ProcessThrottler::assertionName(buf, v3, v4);
        v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v55 = &off_1E34D1358;
        v55[1] = v14;
        v78 = v55;
        v56 = WTF::fastMalloc((WTF *)0xB0);
        v57 = WebKit::ProcessAssertion::ProcessAssertion(v56, v6, (_DWORD **)buf, v4);
        WebKit::ProcessAssertion::acquireAsync(v57, (uint64_t *)&v78);
        v59 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v3 + 24) = v56;
        if (v59)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v59 + 8), v58);
        if (v78)
          (*(void (**)(_QWORD *))(*v78 + 8))(v78);
        if (*(_QWORD *)buf)
        {
          if (**(_DWORD **)buf == 2)
            WTF::StringImpl::destroy(*(WTF::StringImpl **)buf, (WTF::StringImpl *)v58);
          else
            **(_DWORD **)buf -= 2;
        }
      }
      v14 = 0;
    }
    v66 = *(_QWORD *)(v3 + 24);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
    v67 = *(unsigned int **)v3;
    if (*(_QWORD *)v3)
    {
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
    }
    v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v69 = &off_1E34D1380;
    v69[1] = v67;
    v70 = *(_QWORD *)(v66 + 64);
    *(_QWORD *)(v66 + 64) = v69;
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    v71 = *(_QWORD *)(v3 + 24);
    if (v71 && !*(_BYTE *)(v71 + 16))
    {
      if (*(_BYTE *)(v3 + 187))
      {
        if (*(_BYTE *)(v3 + 185))
          WTF::RunLoop::TimerBase::start();
      }
      else
      {
        WebKit::ProcessThrottler::clearAssertion((unsigned int *)v3);
      }
    }
    else
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 72));
    }
    v72 = *(unsigned int **)(*(_QWORD *)(v3 + 16) + 8);
    v73 = v72 + 4;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v72 + 104))(v72, a2);
    result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v73);
    if (v14)
      result = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 8), v75);
    if (v6)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v2;
  char *result;

  v2 = *a2;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t WebKit::WebsiteDataStore::networkProcess(WebKit::WebsiteDataStore *this)
{
  uint64_t result;
  WebKit::NetworkProcessProxy *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WebKit::NetworkProcessProxy *v7;
  WebKit::NetworkProcessProxy *v8;

  result = *((_QWORD *)this + 51);
  if (!result)
  {
    WebKit::NetworkProcessProxy::ensureDefaultNetworkProcess(&v8);
    v3 = v8;
    v4 = (unsigned int *)((char *)v8 + 16);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = v3;
    if (v6)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
    v7 = v8;
    WebKit::NetworkProcessProxy::addSession((uint64_t)v8, (unsigned int *)this, 1);
    if (v7)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7 + 4);
    return *((_QWORD *)this + 51);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 136 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::Cookie,void>::encode(a1, v7);
      v7 += 17;
      v8 -= 136;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::Cookie,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 3);
  v4 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, v2 + 5);
  v5 = *((_BYTE *)v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)v2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 9);
  IPC::ArgumentCoder<std::span<unsigned short const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, (const void *)v2[14], *((unsigned int *)v2 + 31));
  LOBYTE(v2) = *((_BYTE *)v2 + 128);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4;
  char *result;
  uint64_t v6;
  WebKit::WebPreferences *v7;
  const WTF::String *v8;
  BOOL v9;
  BOOL v10;

  v4 = *((unsigned __int8 *)a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*((_BYTE *)a2 + 8))
    {
      v6 = *a2;
      result = IPC::Encoder::grow(a1, 8uLL, 8);
      *(_QWORD *)result = v6;
    }
    else
    {
      v7 = (WebKit::WebPreferences *)std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WebKit::WebPreferences::updateBoolValueForKey(v7, v8, v9, v10);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WebKit::WebPreferences::updateBoolValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, const WTF::StringImpl *a3, char a4)
{
  __int16 v4;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (__int16)a3;
  if ((a4 & 1) == 0)
    WebKit::WebPreferences::platformUpdateBoolValueForKey((uint64_t)this, a2, (uint64_t)a3);
  {
    v7 = (const WTF::StringImpl *)WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key;
  }
  else
  {
    v7 = (const WTF::StringImpl *)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WTF::equal(*a2, v7, a3))
    return WebKit::WebPreferences::update(this);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v21);
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v9;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v16 = (char *)this + 88;
  v17 = v10;
  v18 = v10;
  v19 = v10;
  v20 = v8 + 8 * v9;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
  v12 = v22;
  if (v22 != v17)
  {
    v13 = v4 | 0x100;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      if (v14)
        v15 = v14 - 16;
      else
        v15 = 0;
      *(_WORD *)(*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v15 + 48) + 24))
                 + 6)
               + 84) = v13;
      result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
      v12 = v22;
    }
    while (v22 != v17);
  }
  return result;
}

uint64_t WebKit::WebPreferences::platformUpdateBoolValueForKey(uint64_t this, const WTF::String **a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  const WTF::String *v7;

  if (*(_QWORD *)(this + 16))
  {
    v5 = this;
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    return objc_msgSend(v6, "setBool:forKey:", a3, WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7));
  }
  return this;
}

unint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 40 * a2;
      result = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 40 * v4;
        do
        {
          v10 = v7 + v8;
          v11 = (char *)v3 + v8;
          v12 = *(_QWORD *)((char *)v3 + v8);
          *(_QWORD *)((char *)v3 + v8) = 0;
          *(_QWORD *)v10 = v12;
          *(_BYTE *)(v10 + 8) = *((_BYTE *)v3 + v8 + 8);
          *(_BYTE *)(v10 + 16) = 0;
          *(_BYTE *)(v10 + 32) = 0;
          if (*((_BYTE *)v3 + v8 + 32))
          {
            v13 = *((_QWORD *)v11 + 2);
            *((_QWORD *)v11 + 2) = 0;
            *(_QWORD *)(v10 + 16) = v13;
            *(_QWORD *)(v10 + 24) = *((_QWORD *)v11 + 3);
            *(_BYTE *)(v10 + 32) = 1;
            if (v11[32])
            {
              v14 = *((_QWORD *)v11 + 2);
              *((_QWORD *)v11 + 2) = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
          }
          result = (uint64_t)std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)((char *)v3 + v8), 0);
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v14;
  int v15;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_25;
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_24:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v5 = 0;
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 8 * --v4);
      if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
        break;
      if (!v4)
        goto LABEL_13;
    }
    *(_QWORD *)(v3 + 8 * v4) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      WTF::fastFree((WTF *)v6, a2);
    }
    *(_QWORD *)(v3 + 8 * v4) = -1;
    ++v5;
  }
  while (v4);
LABEL_13:
  v3 = *(_QWORD *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v9 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v10 = *(_DWORD *)(v9 - 12);
    else
      v10 = 0;
    *(_DWORD *)(v9 - 12) = v10 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_26:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v11 = *(_DWORD *)(v3 - 4);
  if (v11 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v11)
    goto LABEL_24;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
    goto LABEL_26;
LABEL_28:
  v14 = *(_DWORD *)(v3 - 12);
  if (v14 >= 0x7FFFFFFF)
    v15 = -2;
  else
    v15 = 2 * v14;
  *(_DWORD *)(a1 + 12) = v15;
  return *(unsigned int *)(v3 - 12);
}

uint64_t WebKit::ProcessAssertion::acquireAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  {
    v4 = assertionsWorkQueue(void)::workQueue;
  }
  else
  {
    WTF::WorkQueue::create();
    v4 = v8;
    assertionsWorkQueue(void)::workQueue = v8;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E34C9AE0;
  v6[1] = a1;
  v6[2] = v5;
  v8 = (uint64_t)v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196BFF298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
  }
  else if (!__stxr(1u, v1))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 **)MEMORY[0x19AEABB3C](v1);
LABEL_5:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(uint64_t result, unsigned __int8 a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(unsigned __int8 *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != 255)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(unsigned __int8 *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

void sub_196BFF44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

unsigned int *WTF::makeVector<WTF::String>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  int v5;
  uint64_t v6;
  objc_object *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (unsigned int *)objc_msgSend(a1, "count");
  v5 = (int)result;
  if (!result)
    goto LABEL_4;
  if (!((unint64_t)result >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * (_QWORD)result));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
LABEL_4:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (!v8)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, *(unsigned int *)(a2 + 12));
    v9 = *(_QWORD *)v24;
    while (1)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(a1);
        WTF::makeVectorElement(0, *(const WTF::String **)(*((_QWORD *)&v23 + 1) + 8 * v10), v7);
        if (v22)
        {
          v12 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
          {
            v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v21);
            v17 = *(unsigned int *)(a2 + 12);
            v18 = *(_QWORD *)a2;
            v19 = *v16;
            *v16 = 0;
            *(_QWORD *)(v18 + 8 * v17) = v19;
            LODWORD(v18) = v22;
            *(_DWORD *)(a2 + 12) = v17 + 1;
            if (!(_DWORD)v18)
              goto LABEL_16;
          }
          else
          {
            v13 = *(_QWORD *)a2;
            v14 = v21;
            v21 = 0;
            *(_QWORD *)(v13 + 8 * v12) = v14;
            *(_DWORD *)(a2 + 12) = v12 + 1;
          }
          v15 = v21;
          v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v11);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
LABEL_16:
        ++v10;
      }
      while (v8 != v10);
      v20 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      v8 = v20;
      if (!v20)
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, *(unsigned int *)(a2 + 12));
    }
  }
  __break(0xC471u);
  return result;
}

void sub_196BFF660(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebPreferences::setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldDecidePolicyBeforeLoadingQuickLookPreview(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setInlineMediaPlaybackRequiresPlaysInlineAttribute(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setServiceWorkerEntitlementDisabledForTesting(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setVideoFullscreenRequiresElementFullscreen(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowsInlineMediaPlaybackAfterFullscreen(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMainContentUserGestureOverrideEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setDeviceOrientationPermissionAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowSettingAnyXHRHeaderFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setRequiresUserGestureForVideoPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setRequiresUserGestureForAudioPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setNeedsStorageAccessFromFileURLsQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowsPictureInPictureMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAlternateFormControlDesignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldConvertPositionStyleOnCopy(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowUniversalAccessFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setSuppressesIncrementalRendering(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setRequiresUserGestureToLoadVideo(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setLegacyEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldRespectImageOrientation(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setInvisibleAutoplayNotPermitted(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowsAirPlayForMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldRestrictBaseURLSchemes(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setIncompleteImageBorderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowTopNavigationToDataURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMediaDataLoadsAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAttachmentWideLayoutEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAllowsInlineMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAttachmentElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setJavaScriptMarkupEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setUndoManagerAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSystemLayoutDirection(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setSystemPreviewEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setAppHighlightsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setColorFilterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setHTTPEquivEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setApplePayEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

void sub_196C01540(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void sub_196C01704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebPreferences::setServiceWorkersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

void WebKit::NetworkProcessProxy::ensureDefaultNetworkProcess(WebKit::NetworkProcessProxy **a1@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  WebKit::NetworkProcessProxy *v6;
  WebKit::NetworkProcessProxy *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      v3 = *(unsigned int **)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v3)
      {
        v4 = v3 + 4;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        *a1 = (WebKit::NetworkProcessProxy *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  v6 = (WebKit::NetworkProcessProxy *)WTF::fastMalloc((WTF *)0x250);
  v7 = WebKit::NetworkProcessProxy::NetworkProcessProxy(v6);
  *a1 = v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v7 + 2, (uint64_t)v6);
  v9 = (unsigned int *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = (unsigned int *)WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
  WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = (uint64_t)v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v8);
    }
  }
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (_BYTE *)(v4 + 16 * v11);
      v13 = *v12;
      if (v13 != 254)
      {
        if (v13 != 255)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
          v22 = v16 + 16 * v21;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
            std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v23);
          *(_BYTE *)v22 = *v12;
          v24 = v4 + 16 * v11;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v25;
          v15 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v15)
            goto LABEL_22;
LABEL_21:
          std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v15);
          goto LABEL_22;
        }
        v14 = v4 + 16 * v11;
        v15 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v15)
          goto LABEL_21;
      }
LABEL_22:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(a1, v3);
}

unsigned int *WebKit::ProcessThrottler::sendPrepareToSuspendIPC(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebKit::ProcessAssertion *v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE v25[14];
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)result + 189))
  {
    v3 = (uint64_t)result;
    if (*((_BYTE *)result + 176))
    {
      if ((a2 & 1) != 0)
      {
        v4 = qword_1ECE71640;
        if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 136);
          if (v5)
            LODWORD(v5) = *(_DWORD *)(v5 + 108);
          v6 = *(_QWORD *)(v3 + 168);
          *(_DWORD *)v21 = 134218752;
          *(_QWORD *)&v21[4] = v3;
          v22 = 1024;
          v23 = v5;
          v24 = 1024;
          *(_DWORD *)v25 = 1;
          *(_WORD *)&v25[4] = 2048;
          *(_QWORD *)&v25[6] = v6;
          _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::sendPrepareToSuspendIPC: Not sending PrepareToSuspend(isSuspensionImminent=%d) IPC because there is already one in flight (%llu)", v21, 0x22u);
        }
        return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, a2 ^ 1);
      }
      __break(0xC471u);
    }
    else
    {
      *((_QWORD *)result + 21) = ++WebKit::generatePrepareToSuspendRequestID(void)::prepareToSuspendRequestID;
      *((_BYTE *)result + 176) = 1;
      v7 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
      v8 = (unsigned int *)(v7 + 16);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = *(_QWORD *)(v7 + 136);
      if (v10)
        v11 = (WebKit::ProcessAssertion *)*(unsigned int *)(v10 + 108);
      else
        v11 = 0;
      v12 = WebKit::ProcessAssertion::remainingRunTimeInSeconds(v11);
      v13 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 136);
        if (v14)
          LODWORD(v14) = *(_DWORD *)(v14 + 108);
        if (!*(_BYTE *)(v3 + 176))
          goto LABEL_27;
        v15 = *(_QWORD *)(v3 + 168);
        *(_DWORD *)v21 = 134219008;
        *(_QWORD *)&v21[4] = v3;
        v22 = 1024;
        v23 = v14;
        v24 = 2048;
        *(_QWORD *)v25 = v15;
        *(_WORD *)&v25[8] = 1024;
        *(_DWORD *)&v25[10] = a2;
        v26 = 2048;
        v27 = v12;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::sendPrepareToSuspendIPC: Sending PrepareToSuspend(%llu, isSuspensionImminent=%d) IPC, remainingRunTime=%fs", v21, 0x2Cu);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v3, v3);
      v16 = *(unsigned int **)v3;
      if (*(_QWORD *)v3)
      {
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      if (*(_BYTE *)(v3 + 176))
      {
        v18 = *(_QWORD *)(v3 + 168);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v19 = &off_1E34D13A8;
        v19[1] = v3;
        v19[2] = v16;
        v19[3] = v18;
        *(_QWORD *)v21 = v19;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, double))(*(_QWORD *)v7 + 88))(v7, a2, v21, v12);
        v20 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
        return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, a2 ^ 1);
      }
    }
LABEL_27:
    __break(1u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 16) + 8))(*(_QWORD *)(a1 + 8) - 16);
}

IPC::Encoder *WebKit::WebProcessProxy::sendPrepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *result;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  _BYTE buf[18];
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71640;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    v24 = 1024;
    v25 = a2;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::sendPrepareToSuspend: isSuspensionImminent=%d", buf, 0x18u);
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
  v12 = v11 + a4;
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 2603;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v22 = (IPC::Encoder *)v13;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a2;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v12;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34D7D58;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v16;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 0, (uint64_t)buf, 0);
  if (buf[16])
  {
    v18 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::frameLoadCompleted(WebKit::WebFrame **this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this[2] + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
        WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(this);
    }
  }
}

void sub_196C020F4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::repositionScrollingLayers(id **this)
{
  return WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(this[12]);
}

void sub_196C021BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WebCore::ImageDecoder::MediaType),BOOL,WebCore::ImageDecoder::MediaType>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

unsigned int *WebKit::WebEditorClient::updateEditorStateAfterLayoutIfEditabilityChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged((unsigned int *)(v2 - 16));
  else
    return WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged(0);
}

float WebKit::PlatformCALayerRemote::position(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 104);
}

int8x16_t WebKit::PlatformCALayerRemote::setName(WebKit::PlatformCALayerRemote *this, const WTF::String *a2)
{
  int8x16_t result;

  WTF::String::operator=((WTF::StringImpl **)this + 10, a2);
  result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(1uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

uint64_t WebKit::WebPageDebuggable::hasLocalDebugger(unsigned __int8 **this)
{
  _QWORD *v2;
  _QWORD *v4;
  unsigned __int8 v5;

  v5 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = &off_1E34DD068;
  v2[1] = this;
  v2[2] = this;
  v2[3] = &v5;
  v4 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v5;
}

uint64_t WebCore::ChromeClient::shouldPaintEntireContents(WebCore::ChromeClient *this)
{
  return 0;
}

void sub_196C02B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;

  if (v14)
    CFRelease(v14);
  if (a13)
    CFRelease(*(CFTypeRef *)(a13 + 8));
  _Unwind_Resume(exception_object);
}

void API::PageConfiguration::~PageConfiguration(API::PageConfiguration *this, WTF::StringImpl *a2)
{
  *(_QWORD *)this = &off_1E34DA000;
  API::PageConfiguration::Data::~Data((API::PageConfiguration *)((char *)this + 16), a2);
}

{
  *(_QWORD *)this = &off_1E34DA000;
  API::PageConfiguration::Data::~Data((API::PageConfiguration *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

void API::PageConfiguration::Data::~Data(API::PageConfiguration::Data *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  WTF::StringImpl *v14;
  const void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::BrowsingContextGroup *v38;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 400, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*((_BYTE *)this + 360))
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 42);
    if (v7)
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v7, (WTF::StringImpl *)*((unsigned int *)this + 86));
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl **)*((_QWORD *)this + 38);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 288, v4);
  v11 = *((_QWORD *)this + 35);
  if (v11)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
  v12 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  if (*((_BYTE *)this + 248))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v10);
  v13 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v10);
    }
  }
  v19 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v10);
    }
  }
  v22 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v22)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
  v23 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v10);
    }
  }
  v26 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  v27 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v10);
    }
  }
  v30 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v30)
    CFRelease(*(CFTypeRef *)(v30 + 8));
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v10);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v32)
    CFRelease(*(CFTypeRef *)(v32 + 8));
  v33 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v33)
    CFRelease(*(CFTypeRef *)(v33 + 8));
  v34 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v34)
    CFRelease(*(CFTypeRef *)(v34 + 8));
  v35 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v35)
    CFRelease(*(CFTypeRef *)(v35 + 8));
  v36 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v36)
    CFRelease(*(CFTypeRef *)(v36 + 8));
  v37 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v37)
    CFRelease(*(CFTypeRef *)(v37 + 8));
  v38 = *(WebKit::BrowsingContextGroup **)this;
  *(_QWORD *)this = 0;
  if (v38)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v38, v10);
}

uint64_t API::PageConfiguration::copy@<X0>(API::PageConfiguration *this@<X0>, API::PageConfiguration **a2@<X8>)
{
  API::PageConfiguration *v4;
  API::PageConfiguration *v5;

  v4 = (API::PageConfiguration *)API::Object::newObject(0x1F0uLL, 87);
  v5 = API::PageConfiguration::PageConfiguration(v4);
  *a2 = v5;
  return API::PageConfiguration::Data::operator=((uint64_t)v5 + 16, (uint64_t)this + 16);
}

uint64_t API::PageConfiguration::Data::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  _DWORD *v5;
  WebKit::BrowsingContextGroup *v6;
  WebKit::WebProcessPool *v7;
  uint64_t v8;
  WebKit::WebUserContentControllerProxy *v9;
  uint64_t v10;
  WebKit::WebPreferences *v11;
  uint64_t v12;
  WebKit::VisitedLinkStore *v13;
  uint64_t v14;
  API::WebsitePolicies *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  const void *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  _DWORD *v46;
  unsigned int v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;

  v5 = (_DWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get((uint64_t *)a2);
  ++*v5;
  v6 = *(WebKit::BrowsingContextGroup **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v6, v4);
  v7 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(a2 + 8));
  CFRetain(*((CFTypeRef *)v7 + 1));
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)(a2 + 16));
  CFRetain(*((CFTypeRef *)v9 + 1));
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  v11 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(a2 + 24));
  CFRetain(*((CFTypeRef *)v11 + 1));
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  v13 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get((WebKit::VisitedLinkStore **)(a2 + 32));
  CFRetain(*((CFTypeRef *)v13 + 1));
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v13;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  v15 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(a2 + 40));
  CFRetain(*((CFTypeRef *)v15 + 1));
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v15;
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  v17 = *(_QWORD *)(a2 + 48);
  if (v17)
    CFRetain(*(CFTypeRef *)(v17 + 8));
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v17;
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  v20 = *(_QWORD *)(a2 + 96);
  if (v20)
    CFRetain(*(CFTypeRef *)(v20 + 8));
  v21 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  if (v21)
    CFRelease(*(CFTypeRef *)(v21 + 8));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 104), (unsigned int **)(a2 + 104));
  v22 = *(_QWORD *)(a2 + 112);
  if (v22)
    CFRetain(*(CFTypeRef *)(v22 + 8));
  v23 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v22;
  if (v23)
    CFRelease(*(CFTypeRef *)(v23 + 8));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 120), (unsigned int **)(a2 + 120));
  v24 = *(_QWORD *)(a2 + 128);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 16);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v27 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v24;
  if (v27)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 16));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 136), (unsigned int **)(a2 + 136));
  WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 144), (unsigned int **)(a2 + 144));
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v28 = *(_QWORD *)(a2 + 160);
  if (v28)
    CFRetain(*(CFTypeRef *)(a2 + 160));
  v29 = *(const void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  if (v29)
    CFRelease(v29);
  v30 = *(_OWORD *)(a2 + 168);
  v31 = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v31;
  *(_OWORD *)(a1 + 168) = v30;
  if (*(unsigned __int8 *)(a1 + 212) == *(unsigned __int8 *)(a2 + 212))
  {
    if (*(_BYTE *)(a1 + 212))
      *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  }
  else if (*(_BYTE *)(a1 + 212))
  {
    *(_BYTE *)(a1 + 212) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 212) = 1;
  }
  WTF::String::operator=((WTF::StringImpl **)(a1 + 216), (WTF::StringImpl *)(a2 + 216));
  v32 = *(_QWORD *)(a2 + 224);
  if (v32)
    CFRetain(*(CFTypeRef *)(a2 + 224));
  v33 = *(const void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v32;
  if (v33)
    CFRelease(v33);
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a1 + 232), (unsigned __int8 *)(a2 + 232));
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  v35 = *(_QWORD *)(a2 + 272);
  if (v35)
    CFRetain(*(CFTypeRef *)(v35 + 8));
  v36 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v35;
  if (v36)
    CFRelease(*(CFTypeRef *)(v36 + 8));
  v37 = *(_QWORD *)(a2 + 280);
  if (!v37 || (v38 = *(unsigned int *)(v37 - 12), !(_DWORD)v38))
  {
    v46 = 0;
    goto LABEL_80;
  }
  v39 = (_QWORD *)(a2 + 280);
  v40 = (v38 - 1) | ((v38 - 1) >> 1) | ((((_DWORD)v38 - 1) | ((v38 - 1) >> 1)) >> 2);
  v41 = v40 | (v40 >> 4) | ((v40 | (v40 >> 4)) >> 8);
  v42 = (v41 | HIWORD(v41)) + 1;
  if (v42 > 0x400)
  {
    if (v42 > 2 * v38)
      goto LABEL_56;
  }
  else if (3 * v42 > 4 * v38)
  {
LABEL_53:
    v43 = (double)v38;
    v44 = (double)v42;
    v45 = 0.604166667;
    goto LABEL_57;
  }
  LODWORD(v42) = 2 * v42;
  if (v42 <= 0x400)
    goto LABEL_53;
LABEL_56:
  v43 = (double)v38;
  v44 = (double)v42;
  v45 = 0.416666667;
LABEL_57:
  if (v44 * v45 <= v43)
    LODWORD(v42) = 2 * v42;
  if (v42 <= 8)
    v47 = 8;
  else
    v47 = v42;
  v48 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v47 + 16));
  v46 = v48 + 4;
  v48[2] = v47 - 1;
  v48[3] = v47;
  *v48 = 0;
  v48[1] = v38;
  v49 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a2 + 280));
  v50 = v49;
  v51 = v34;
  if (*v39)
    v52 = *v39 + 16 * *(unsigned int *)(*v39 - 4);
  else
    v52 = 0;
  if ((WTF::StringImpl *)v52 != v49)
  {
    do
    {
      v53 = v48[2];
      v54 = *(_DWORD *)(*(_QWORD *)v50 + 16);
      if (v54 >= 0x100)
        v55 = v54 >> 8;
      else
        v55 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v50);
      v56 = 0;
      do
      {
        v57 = v55 & v53;
        v55 = ++v56 + v57;
      }
      while (*(_QWORD *)&v46[4 * v57]);
      v58 = (WTF::StringImpl **)&v46[4 * v57];
      WTF::String::operator=(v58, v50);
      v59 = (WTF::StringImpl *)*((_QWORD *)v50 + 1);
      ++*((_DWORD *)v59 + 2);
      v60 = v58[1];
      v58[1] = v59;
      if (v60)
      {
        if (*((_DWORD *)v60 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
        else
          --*((_DWORD *)v60 + 2);
      }
      while (1)
      {
        v50 = (WTF::StringImpl *)((char *)v50 + 16);
        if (v50 == v51)
          break;
        if ((unint64_t)(*(_QWORD *)v50 + 1) > 1)
          goto LABEL_79;
      }
      v50 = v51;
LABEL_79:
      ;
    }
    while (v50 != (WTF::StringImpl *)v52);
  }
LABEL_80:
  v61 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v46;
  if (v61)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v61, v34);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 288), a2 + 288);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(a1 + 304), (_QWORD **)(a2 + 304));
  v62 = *(_BYTE *)(a2 + 314);
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  *(_BYTE *)(a1 + 314) = v62;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 320), (WTF::StringImpl *)(a2 + 320));
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)(a1 + 336), a2 + 336);
  v63 = *(_QWORD *)(a2 + 368);
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v63;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 384), (WTF::StringImpl *)(a2 + 384));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 392), (WTF::StringImpl *)(a2 + 392));
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(a1 + 400), (WTF::StringImpl *)(a2 + 400));
  v64 = *(_OWORD *)(a2 + 416);
  v65 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 445) = *(_OWORD *)(a2 + 445);
  *(_OWORD *)(a1 + 416) = v64;
  *(_OWORD *)(a1 + 432) = v65;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 464), (WTF::StringImpl *)(a2 + 464));
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  return a1;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
      a1[3] = v5;
    }
    else
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
      LODWORD(v5) = a1[3];
    }
    v6 = *(WTF::StringImpl **)a2;
    v7 = *(WTF::StringImpl ***)a1;
    if ((_DWORD)v5)
    {
      v8 = 8 * v5;
      do
      {
        WTF::String::operator=(v7, v6);
        v6 = (WTF::StringImpl *)((char *)v6 + 8);
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v6 = *(WTF::StringImpl **)a2;
      v9 = a1[3];
      v7 = *(WTF::StringImpl ***)a1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(unsigned int *)(a2 + 12);
    if (v9 != (_DWORD)v10)
    {
      v11 = &v7[v9];
      v12 = (WTF::StringImpl **)((char *)v6 + 8 * v9);
      v13 = 8 * v10 - 8 * v9;
      do
      {
        v14 = *v12;
        if (*v12)
          *(_DWORD *)v14 += 2;
        *v11++ = v14;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    a1[3] = v10;
  }
  return a1;
}

unsigned int **WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

WTF::StringImpl ***WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(WTF::StringImpl ***a1, _QWORD **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v6;

  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          v13 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, v9);
          WTF::String::operator=(v13, (WTF::StringImpl *)v9);
          while (++v9 != v11)
          {
            if ((unint64_t)*v9 + 1 > 1)
              goto LABEL_11;
          }
          v9 = v11;
LABEL_11:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

uint64_t API::Object::newObject(size_t a1, int a2)
{
  WKNSNumber *v4;
  __objc2_class *v5;
  WKNSNumber *Instance;
  uint64_t result;
  objc_class *v8;

  switch(a2)
  {
    case 1:
      v5 = WKNSArray;
      goto LABEL_73;
    case 8:
      v5 = WKNSData;
      goto LABEL_73;
    case 9:
      v5 = WKNSDictionary;
      goto LABEL_73;
    case 11:
      v5 = _WKFrameHandle;
      goto LABEL_73;
    case 17:
      v5 = _WKResourceLoadInfo;
      goto LABEL_73;
    case 18:
      v5 = WKSecurityOrigin;
      goto LABEL_73;
    case 22:
      v5 = _WKTargetedElementInfo;
      goto LABEL_73;
    case 23:
      v5 = _WKTargetedElementRequest;
      goto LABEL_73;
    case 28:
      v5 = WKUserScript;
      goto LABEL_73;
    case 29:
      v5 = _WKUserStyleSheet;
      goto LABEL_73;
    case 32:
    case 33:
    case 34:
    case 35:
      v4 = [WKNSNumber alloc];
      v4->_type = a2;
      goto LABEL_75;
    case 40:
      v5 = _WKApplicationManifest;
      goto LABEL_73;
    case 41:
      v5 = _WKAttachment;
      goto LABEL_73;
    case 42:
      v5 = _WKAutomationSession;
      goto LABEL_73;
    case 43:
      v5 = WKBackForwardList;
      goto LABEL_73;
    case 44:
      v5 = WKBackForwardListItem;
      goto LABEL_73;
    case 47:
      v5 = WKContentRuleList;
      goto LABEL_73;
    case 48:
      v5 = _WKContentRuleListAction;
      goto LABEL_73;
    case 49:
      v5 = WKContentRuleListStore;
      goto LABEL_73;
    case 50:
      v5 = WKContentWorld;
      goto LABEL_73;
    case 51:
      v5 = WKContextMenuElementInfo;
      goto LABEL_73;
    case 53:
      v5 = _WKCustomHeaderFields;
      goto LABEL_73;
    case 54:
      v5 = _WKDataTask;
      goto LABEL_73;
    case 55:
      v5 = _WKInspectorDebuggableInfo;
      goto LABEL_73;
    case 56:
      v5 = WKDownload;
      goto LABEL_73;
    case 57:
      v5 = _WKFeature;
      goto LABEL_73;
    case 60:
      v5 = WKFrameInfo;
      goto LABEL_73;
    case 62:
      v5 = _WKFrameTreeNode;
      goto LABEL_73;
    case 66:
      v5 = WKHTTPCookieStore;
      goto LABEL_73;
    case 67:
      v5 = _WKHitTestResult;
      goto LABEL_73;
    case 68:
      v5 = _WKGeolocationPosition;
      goto LABEL_73;
    case 71:
      v5 = _WKInspector;
      goto LABEL_73;
    case 72:
      v5 = _WKInspectorConfiguration;
      goto LABEL_73;
    case 76:
      v5 = WKNavigation;
      goto LABEL_73;
    case 77:
      v5 = WKNavigationAction;
      goto LABEL_73;
    case 78:
      v5 = WKNavigationData;
      goto LABEL_73;
    case 79:
      v5 = WKNavigationResponse;
      goto LABEL_73;
    case 87:
      v5 = WKWebViewConfiguration;
      goto LABEL_73;
    case 89:
      v5 = WKProcessPool;
      goto LABEL_73;
    case 90:
      v5 = _WKProcessPoolConfiguration;
      goto LABEL_73;
    case 92:
      v5 = WKPreferences;
      goto LABEL_73;
    case 95:
      v5 = _WKResourceLoadStatisticsFirstParty;
      goto LABEL_73;
    case 96:
      v5 = _WKResourceLoadStatisticsThirdParty;
      goto LABEL_73;
    case 103:
      v5 = WKURLSchemeTaskImpl;
      goto LABEL_73;
    case 104:
      v5 = WKUserContentController;
      goto LABEL_73;
    case 105:
      v5 = _WKUserInitiatedAction;
      goto LABEL_73;
    case 109:
      v5 = _WKVisitedLinkStore;
      goto LABEL_73;
    case 110:
      v5 = _WKWebExtension;
      goto LABEL_73;
    case 111:
      v5 = _WKWebExtensionAction;
      goto LABEL_73;
    case 112:
      v5 = _WKWebExtensionCommand;
      goto LABEL_73;
    case 113:
      v5 = _WKWebExtensionContext;
      goto LABEL_73;
    case 114:
      v5 = _WKWebExtensionController;
      goto LABEL_73;
    case 115:
      v5 = _WKWebExtensionControllerConfiguration;
      goto LABEL_73;
    case 116:
      v5 = _WKWebExtensionDataRecord;
      goto LABEL_73;
    case 117:
      v5 = _WKWebExtensionMatchPattern;
      goto LABEL_73;
    case 118:
      v5 = _WKWebExtensionMessagePort;
      goto LABEL_73;
    case 120:
      v5 = WKWebsiteDataRecord;
      goto LABEL_73;
    case 121:
      v5 = WKWebsiteDataStore;
      goto LABEL_73;
    case 122:
      v5 = _WKWebsiteDataStoreConfiguration;
      goto LABEL_73;
    case 123:
      v5 = WKWebpagePreferences;
      goto LABEL_73;
    case 124:
      v5 = WKWindowFeatures;
      goto LABEL_73;
    case 125:
      v5 = _WKWebAuthenticationAssertionResponse;
      goto LABEL_73;
    case 126:
      v5 = _WKWebAuthenticationPanel;
      goto LABEL_73;
    case 129:
      v5 = WKWebProcessPlugInController;
      goto LABEL_73;
    case 132:
      v5 = WKWebProcessPlugInCSSStyleDeclarationHandle;
      goto LABEL_73;
    case 134:
      v5 = WKWebProcessPlugInFrame;
      goto LABEL_73;
    case 135:
      v5 = WKWebProcessPlugInHitTestResult;
      goto LABEL_73;
    case 136:
      v5 = WKWebProcessPlugInNodeHandle;
      goto LABEL_73;
    case 137:
      v5 = WKWebProcessPlugInBrowserContextController;
      goto LABEL_73;
    case 140:
      v5 = WKWebProcessPlugInRangeHandle;
      goto LABEL_73;
    case 141:
      v5 = WKWebProcessPlugInScriptWorld;
LABEL_73:
      Instance = (WKNSNumber *)[v5 alloc];
      break;
    default:
      v8 = (objc_class *)objc_opt_class();
      Instance = (WKNSNumber *)class_createInstance(v8, a1);
      break;
  }
  v4 = Instance;
LABEL_75:
  result = -[WKNSNumber _apiObject](v4, "_apiObject");
  *(_QWORD *)(result + 8) = v4;
  return result;
}

API::PageConfiguration *API::PageConfiguration::PageConfiguration(API::PageConfiguration *this)
{
  PAL *v2;
  uint64_t IsSmallScreen;
  char v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DA000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v2 = (PAL *)WTF::URL::invalidate((API::PageConfiguration *)((char *)this + 72));
  *((_QWORD *)this + 22) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 154) = 0u;
  IsSmallScreen = PAL::currentUserInterfaceIdiomIsSmallScreen(v2);
  *((_BYTE *)this + 184) = IsSmallScreen ^ 1;
  *((_BYTE *)this + 185) = IsSmallScreen;
  *((_BYTE *)this + 186) = IsSmallScreen;
  *((_BYTE *)this + 187) = IsSmallScreen ^ 1;
  *((_BYTE *)this + 188) = API::PageConfiguration::Data::defaultDragLiftDelay((API::PageConfiguration::Data *)IsSmallScreen);
  *(_DWORD *)((char *)this + 189) = 16842752;
  *(_WORD *)((char *)this + 193) = 1;
  {
    v4 = API::PageConfiguration::Data::defaultShouldDecidePolicyBeforeLoadingQuickLookPreview(void)::shouldDecide;
  }
  else
  {
    v4 = WTF::linkedOnOrAfterSDKWithBehavior();
    API::PageConfiguration::Data::defaultShouldDecidePolicyBeforeLoadingQuickLookPreview(void)::shouldDecide = v4;
  }
  *((_BYTE *)this + 195) = v4;
  *((_WORD *)this + 98) = 257;
  *((_BYTE *)this + 198) = 1;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 228) = 0;
  *((_BYTE *)this + 264) = 0;
  *(_DWORD *)((char *)this + 199) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 272) = 1;
  if (WTF::linkedOnOrAfterSDKWithBehavior())
    v5 = 1;
  else
    v5 = -1;
  *((_QWORD *)this + 35) = v5;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *(_OWORD *)((char *)this + 313) = 0u;
  *(_WORD *)((char *)this + 329) = 257;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 1;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_QWORD *)this + 48) = 0x101000001000000;
  *((_WORD *)this + 196) = 0;
  *((_BYTE *)this + 424) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_BYTE *)this + 416) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0x4014000000000000;
  *((_QWORD *)this + 57) = 0x101010000010001;
  *((_WORD *)this + 232) = 0;
  *((_BYTE *)this + 466) = 1;
  *(_WORD *)((char *)this + 471) = 0;
  *(_DWORD *)((char *)this + 467) = 0;
  *(_DWORD *)((char *)this + 473) = 65793;
  *((_QWORD *)this + 60) = 0;
  *((_BYTE *)this + 488) = 0;
  return this;
}

const void **WTF::RetainPtr<NSString>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_196C0402C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *__src;
  unint64_t v7;
  unsigned int v8;

  if (result[2] > a2)
  {
    v2 = result;
    v3 = result[3];
    if (v3 > a2)
    {
      v7 = a2;
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 8 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 8 * v3));
      a2 = v7;
      v2[3] = v7;
      LODWORD(v3) = v7;
    }
    result = *(unsigned int **)v2;
    if (a2)
    {
      v8 = v3;
      if (v2[2])
      {
        v2[2] = a2;
        result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
        *(_QWORD *)v2 = result;
        return result;
      }
      __src = *(unsigned int **)v2;
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v4 = a2;
      v5 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v2[2] = v4;
      *(_QWORD *)v2 = v5;
      result = __src;
      if (v5 != __src)
      {
        memcpy(v5, __src, 8 * v8);
        result = __src;
      }
    }
    if (result)
    {
      if (*(unsigned int **)v2 == result)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      return (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_196C046C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebsiteDataStore::defaultDataStore(WebKit::WebsiteDataStore *this@<X0>, WebKit::WebsiteDataStore **a2@<X8>)
{
  CFTypeRef *v3;
  uint64_t v4;
  void *v5;
  WebKit::WebsiteDataStore *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WebKit::WebsiteDataStore *v12;
  uint64_t v13;
  uint64_t v14;

  WebKit::InitializeWebKit2(this);
  {
    if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore)
    {
      v3 = *(CFTypeRef **)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8);
      if (v3)
      {
        CFRetain(v3[1]);
        *a2 = (WebKit::WebsiteDataStore *)v3;
        return;
      }
    }
  }
  else
  {
    WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
  v4 = API::Object::newObject(0x220uLL, 122);
  v14 = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v4, 1, 1);
  WebKit::WebsiteDataStore::create(&v14, 1, a2);
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  v6 = *a2;
  if (*a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6 + 4, (uint64_t)*a2);
    v7 = (unsigned int *)*((_QWORD *)v6 + 2);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = (unsigned int *)WebKit::globalDefaultDataStore(void)::globalDefaultDataStore;
  WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = (uint64_t)v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  v12 = *a2;
  {
    if (!v12)
      goto LABEL_21;
    goto LABEL_20;
  }
  WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = 0;
  if (v12)
LABEL_20:
    CFRetain(*((CFTypeRef *)v12 + 1));
LABEL_21:
  v13 = WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore;
  WebKit::protectedDefaultDataStore(void)::globalDefaultDataStore = (uint64_t)v12;
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
}

uint64_t API::Feature::Feature(uint64_t a1, _DWORD **a2, _DWORD **a3, char a4, char a5, _DWORD **a6, char a7, char a8)
{
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9320;
  v16 = *a2;
  if (*a2)
    *v16 += 2;
  *(_QWORD *)(a1 + 16) = v16;
  v17 = *a3;
  if (*a3)
    *v17 += 2;
  *(_QWORD *)(a1 + 24) = v17;
  v18 = *a6;
  if (*a6)
    *v18 += 2;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 41) = a5;
  *(_BYTE *)(a1 + 42) = a7;
  *(_BYTE *)(a1 + 43) = a8;
  return a1;
}

void WebKit::InitializeWebKit2(WebKit *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  v1 = atomic_load(&WebKit::flag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebKit::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::InitializeWebKit2(void)::$_0 &&>>);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100)
    v5 = v4 >> 8;
  else
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 8 * v7));
  return v2 + 8 * v7;
}

void API::SerializedScriptValue::~SerializedScriptValue(unsigned int **this)
{
  *this = (unsigned int *)&off_1E34AD2F8;
  WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::~Ref(this + 2);
}

{
  *this = (unsigned int *)&off_1E34AD2F8;
  WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::~Ref(this + 2);
  JUMPOUT(0x19AEB936CLL);
}

WebCore::SerializedScriptValue *WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WebCore::SerializedScriptValue **a1)
{
  WebCore::SerializedScriptValue *result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    WebCore::SerializedScriptValue::~SerializedScriptValue(result);
    return (WebCore::SerializedScriptValue *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

API::WebsitePolicies *API::WebsitePolicies::WebsitePolicies(API::WebsitePolicies *this)
{
  WebKit::WebPagePreferencesLockdownModeObserver *v2;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34DA490;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 83) = 0u;
  *((_BYTE *)this + 104) = 1;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 118) = 0;
  *((_BYTE *)this + 126) = 1;
  *(_DWORD *)((char *)this + 127) = 0;
  *(_DWORD *)((char *)this + 131) = 65538;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_WORD *)this + 76) = 0;
  v2 = (WebKit::WebPagePreferencesLockdownModeObserver *)WTF::fastMalloc((WTF *)0x18);
  *((_QWORD *)this + 20) = WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(v2, this);
  return this;
}

unsigned int *WebKit::addLockdownModeObserver(_BOOL8 isLockdownModeEnabledBySystemIgnoringCaching)
{
  unsigned int *v1;
  _BYTE v3[24];

  v1 = (unsigned int *)isLockdownModeEnabledBySystemIgnoringCaching;
  if (!HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
  {
    isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
  }
  WebKit::lockdownModeObservers((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
  return WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::LockdownModeObserver>((uint64_t)&qword_1EE3418D0, v1, (uint64_t)v3);
}

uint64_t *WebKit::lockdownModeObservers(WebKit *this)
{
  if ((WTF::isMainRunLoop(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196C04CC8);
  }
  if ((byte_1EE34185A & 1) == 0)
  {
    *(_QWORD *)&dword_1EE3418D8 = 0;
    qword_1EE3418D0 = 0;
    byte_1EE34185A = 1;
  }
  return &qword_1EE3418D0;
}

unsigned int *WebKit::NavigationState::createNavigationClient@<X0>(WebKit::NavigationState *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *result;
  uint64_t v4;

  result = WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::NavigationClient,WebKit::NavigationState&>((uint64_t)this, &v4);
  *a2 = v4;
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::NavigationClient,WebKit::NavigationState&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C7CC0;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v4[1] = v6;
  *a2 = v4;
  return result;
}

void sub_196C04D94(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::NavigationState *WebKit::NavigationState::NavigationState(WebKit::NavigationState *this, WKWebView *a2)
{
  unsigned int *v4;
  WTF::RunLoop *inited;
  WTF::RunLoop *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  WebPageProxy *m_ptr;
  unsigned int v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  unsigned int v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE v42[24];

  *((_QWORD *)this + 1) = 0;
  v4 = (unsigned int *)((char *)this + 8);
  *(_QWORD *)this = off_1E34C7BD8;
  *((_QWORD *)this + 2) = 0;
  inited = (WTF::RunLoop *)objc_initWeak((id *)this + 2, a2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 48) = 0;
  v6 = (WTF::RunLoop *)WTF::RunLoop::current(inited);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34C8C60;
  v7[1] = WebKit::NavigationState::releaseNetworkActivityAfterLoadCompletion;
  v7[2] = 0;
  v7[3] = this;
  v8 = WTF::RunLoop::TimerBase::TimerBase((WebKit::NavigationState *)((char *)this + 64), v6);
  *((_QWORD *)this + 8) = off_1E34ABE00;
  *((_QWORD *)this + 11) = v7;
  m_ptr = a2->_page.m_ptr;
  if (m_ptr)
    v8 = (uint64_t)CFRetain(*((CFTypeRef *)m_ptr + 1));
  {
    v11 = dword_1ECE736B0++;
    if (v11 > dword_1ECE736B4)
      WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v8, v9);
  }
  else
  {
    WebKit::navigationStates(void)::navigationStates = 0;
    *(_QWORD *)&dword_1ECE736B0 = 1;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)m_ptr + 6, (uint64_t)m_ptr + 16);
  v13 = (unsigned int *)*((_QWORD *)m_ptr + 3);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 + 1, v13));
  if (v13)
  {
    do
    {
      v16 = __ldaxr(v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v13));
    if (!v17)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  v18 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(),
        (v18 = WebKit::navigationStates(void)::navigationStates) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
  v21 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = (v23 >> 31) ^ v23;
  for (i = 1; ; ++i)
  {
    v26 = v24 & v19;
    v27 = (unsigned int **)(v18 + 16 * v26);
    v28 = *v27;
    if (*v27 == (unsigned int *)-1)
    {
      v20 = (_QWORD *)(v18 + 16 * v26);
      goto LABEL_22;
    }
    if (!v28)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        --*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16);
        *v20 = v13;
      }
      else
      {
        *v27 = v13;
        v20 = (_QWORD *)(v18 + 16 * v26);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, (uint64_t)this);
      v32 = *(unsigned int **)v4;
      if (*(_QWORD *)v4)
      {
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
      }
      v34 = (unsigned int *)v20[1];
      v20[1] = v32;
      if (v34)
      {
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, v31);
        }
      }
      if (WebKit::navigationStates(void)::navigationStates)
        v37 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) + 1;
      else
        v37 = 1;
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) = v37;
      if (WebKit::navigationStates(void)::navigationStates)
        v38 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
      else
        v38 = 0;
      v39 = (*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) + v38);
      v40 = *(unsigned int *)(WebKit::navigationStates(void)::navigationStates - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
          goto LABEL_45;
      }
      else if (3 * v40 > 4 * v39)
      {
        goto LABEL_45;
      }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand();
      goto LABEL_45;
    }
    if (v28 == v13)
      break;
LABEL_22:
    v24 = i + v26;
  }
  if (v13)
  {
    do
    {
      v29 = __ldaxr(v13);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v13));
    if (!v30)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
LABEL_45:
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*((_QWORD *)m_ptr + 4) + 944, (unsigned int *)this, (uint64_t)v42);
  CFRelease(*((CFTypeRef *)m_ptr + 1));
  return this;
}

void sub_196C051B0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::RunLoop::TimerBase *a10, id *location)
{
  unsigned int **v11;
  id *v12;
  uint64_t v13;
  id *v14;
  WebKit::ProcessThrottlerActivity **v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;

  if (v16)
  {
    do
    {
      v19 = __ldaxr(v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v16));
    if (!v20)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  CFRelease(*(CFTypeRef *)(v17 + 8));
  *(_QWORD *)(v13 + 64) = off_1E34ABE00;
  v21 = *(_QWORD *)(v13 + 88);
  *(_QWORD *)(v13 + 88) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::RunLoop::TimerBase::~TimerBase(a10);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v15, 0);
  objc_destroyWeak(location);
  objc_destroyWeak(v14);
  objc_destroyWeak(v12);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v11, v22);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setApplicationNameForUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = WTF::equal(this[39], *a2, a3);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WTF::String::operator=(this + 39, (WTF::StringImpl *)a2);
    v6 = this[41];
    if (!v6 || !*((_DWORD *)v6 + 1))
    {
      WebCore::standardUserAgentWithApplicationName();
      WebKit::WebPageProxy::setUserAgent((uint64_t)this, (WTF::StringImpl *)&v8, 0);
      result = (uint64_t)v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setForceAlwaysUserScalable(uint64_t this, int a2)
{
  uint64_t v2;
  char v3;

  if (*(unsigned __int8 *)(this + 1005) != a2)
  {
    *(_BYTE *)(this + 1005) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = *(_QWORD *)(this + 208);
        v3 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetForceAlwaysUserScalable>(v2, &v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setFindClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D4090;
  }
  result = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit::UIDelegate *WebKit::UIDelegate::UIDelegate(WebKit::UIDelegate *this, WKWebView *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  objc_initWeak((id *)this + 1, a2);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_196C05418(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void sub_196C054C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196C05560(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void API::String::~String(API::String *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebFramePolicyListenerProxy::~WebFramePolicyListenerProxy(WebKit::WebFramePolicyListenerProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D36D0;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 48))
  {
    v4 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v4)
      WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(v4, a2);
  }
  if (*((_BYTE *)this + 32))
  {
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
      CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

{
  WebKit::WebFramePolicyListenerProxy::~WebFramePolicyListenerProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::AuthenticationDecisionListener::~AuthenticationDecisionListener(WebKit::AuthenticationDecisionListener *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  *(_QWORD *)this = &off_1E34DC228;
  if (*((_QWORD *)this + 2))
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
    cf = 0;
    v2 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, 2, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::AuthenticationDecisionListener::~AuthenticationDecisionListener(this);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::AuthenticationChallengeProxy::~AuthenticationChallengeProxy(WebKit::AuthenticationChallengeProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  *(_QWORD *)this = &off_1E34DC200;
  v3 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = (const void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebKit::AuthenticationChallengeProxy *)((char *)this + 16), a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  *(_QWORD *)this = &off_1E34DC200;
  v3 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = (const void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebKit::AuthenticationChallengeProxy *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

void WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;

  v2 = WebKit::navigationStates(void)::navigationStates;
  if (WebKit::navigationStates(void)::navigationStates)
  {
    v3 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
    if (!v3)
      goto LABEL_19;
    v4 = 0;
    v5 = v3 - 1;
    do
    {
      v6 = v2 + 16 * v5;
      if ((unint64_t)(*(_QWORD *)v6 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v6 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(v6, a2);
        ++v4;
      }
    }
    while ((unint64_t)v5--);
    v2 = WebKit::navigationStates(void)::navigationStates;
    if (v4)
    {
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16) += v4;
      if (WebKit::navigationStates(void)::navigationStates)
        v8 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12);
      else
        v8 = 0;
      *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) = v8 - v4;
      v2 = WebKit::navigationStates(void)::navigationStates;
    }
    if (v2)
    {
      v9 = *(_DWORD *)(v2 - 4);
      v10 = *(unsigned int *)(v2 - 12);
      if (v9 >= 9 && 6 * (int)v10 < v9)
      {
        v14 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
        v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
        v16 = (v15 | HIWORD(v15)) + 1;
        if (v16 > 0x400)
        {
          if (v16 > 2 * v10)
            goto LABEL_30;
        }
        else if (3 * v16 > 4 * v10)
        {
LABEL_28:
          v17 = (double)v10;
          v18 = (double)v16;
          v19 = 0.604166667;
          goto LABEL_31;
        }
        LODWORD(v16) = 2 * v16;
        if (v16 <= 0x400)
          goto LABEL_28;
LABEL_30:
        v17 = (double)v10;
        v18 = (double)v16;
        v19 = 0.416666667;
LABEL_31:
        if (v18 * v19 <= v17)
          LODWORD(v16) = 2 * v16;
        if (v16 <= 8)
          v20 = 8;
        else
          v20 = v16;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v20);
        v2 = WebKit::navigationStates(void)::navigationStates;
        dword_1ECE736B0 = 0;
        if (!WebKit::navigationStates(void)::navigationStates)
        {
          v12 = 0;
          goto LABEL_23;
        }
LABEL_20:
        v12 = *(_DWORD *)(v2 - 12);
        v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF)
          goto LABEL_24;
        goto LABEL_23;
      }
LABEL_19:
      dword_1ECE736B0 = 0;
      goto LABEL_20;
    }
  }
  v12 = 0;
  dword_1ECE736B0 = 0;
LABEL_23:
  v13 = v12;
LABEL_24:
  dword_1ECE736B4 = 2 * v13;
}

void WebKit::WebPagePreferencesLockdownModeObserver::~WebPagePreferencesLockdownModeObserver(unsigned int **this)
{
  unsigned int **v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;

  WebKit::lockdownModeObservers((WebKit *)this);
  if (++dword_1EE3418D8 > dword_1EE3418DC)
  {
    v3 = qword_1EE3418D0;
    if (qword_1EE3418D0)
    {
      v4 = *(_DWORD *)(qword_1EE3418D0 - 4);
      if (!v4)
        goto LABEL_25;
      v5 = 0;
      do
      {
        while (1)
        {
          v6 = *(_QWORD *)(v3 + 8 * --v4);
          if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
            break;
          if (!v4)
            goto LABEL_14;
        }
        *(_QWORD *)(v3 + 8 * v4) = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          WTF::fastFree((WTF *)v6, v2);
        }
        *(_QWORD *)(v3 + 8 * v4) = -1;
        ++v5;
      }
      while (v4);
LABEL_14:
      v3 = qword_1EE3418D0;
      if (v5)
      {
        *(_DWORD *)(qword_1EE3418D0 - 16) += v5;
        if (qword_1EE3418D0)
          v9 = *(_DWORD *)(qword_1EE3418D0 - 12);
        else
          v9 = 0;
        *(_DWORD *)(qword_1EE3418D0 - 12) = v9 - v5;
        v3 = qword_1EE3418D0;
      }
      if (v3)
      {
        v10 = *(_DWORD *)(v3 - 4);
        if (v10 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v10)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EE3418D0);
          v3 = qword_1EE3418D0;
          dword_1EE3418D8 = 0;
          if (!qword_1EE3418D0)
          {
            v12 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        dword_1EE3418D8 = 0;
LABEL_28:
        v12 = *(_DWORD *)(v3 - 12);
        v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF)
        {
LABEL_30:
          dword_1EE3418DC = 2 * v13;
          goto LABEL_31;
        }
LABEL_29:
        v13 = v12;
        goto LABEL_30;
      }
    }
    v12 = 0;
    dword_1EE3418D8 = 0;
    goto LABEL_29;
  }
LABEL_31:
  v14 = this[1];
  if (v14 && *((_QWORD *)v14 + 1))
  {
    v20 = this[1];
    v15 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EE3418D0, &v20);
    v2 = v15;
    if (qword_1EE3418D0)
    {
      v16 = qword_1EE3418D0 + 8 * *(unsigned int *)(qword_1EE3418D0 - 4);
      if ((unsigned int **)v16 == v15)
        goto LABEL_40;
    }
    else
    {
      if (!v15)
        goto LABEL_40;
      v16 = 0;
    }
    if ((unsigned int **)v16 != v15)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&qword_1EE3418D0, v15);
  }
LABEL_40:
  v17 = this[2];
  this[2] = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPagePreferencesLockdownModeObserver::~WebPagePreferencesLockdownModeObserver(this);
  WTF::fastFree(v1, v2);
}

void sub_196C05C0C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(unsigned int **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

void WebKit::WebNotificationManagerProxy::~WebNotificationManagerProxy(WebKit::WebNotificationManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34DE620;
  *((_QWORD *)this + 2) = &unk_1E34DE660;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34DE620;
  *((_QWORD *)this + 2) = &unk_1E34DE660;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D3758;
  *((_QWORD *)this + 2) = &unk_1E34D37B8;
  *((_QWORD *)this + 4) = &unk_1E34D37F0;
  *((_QWORD *)this + 6) = &unk_1E34D3828;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  if (v4)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  *((_QWORD *)this + 4) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, a2);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetForceAlwaysUserScalable>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2390;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_196C05E28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_196C05F4C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebChromeClient::graphicsLayerFactory(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 232))(v3);
  else
    v4 = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::graphicsLayerFactory(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t WebKit::WebChromeClient::preferredScrollbarOverlayStyle(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int16 *)(v2 + 1829);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

uint64_t IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::decode(a1, a2);
  if (!a2[152])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C06080(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 152))
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v1);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  const char **v4;
  char v5;
  char v6;
  const char **v7;
  char v8;
  char v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  WTF::StringImpl *v12;
  const char **v13;
  const char **v14;
  const char **v15;
  const char **v16;
  const char **v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char **v22;
  const char **v23;
  const char **v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  const char **v29;
  char v30;
  char v31;
  const char **v32;
  char v33;
  char v34;
  const char **v35;
  char v36;
  char v37;
  const char **v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  WTF::StringImpl **v44;
  char v45;
  const char **v46;
  char v47;
  const char **v48;
  char v49;
  const char **v50;
  char v51;
  const char **v52;
  char v53;
  const char **v54;
  char v55;
  const char **v56[7];
  char v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  uint64_t v60;
  const char **v61;
  const char **v62;
  char v63;
  const char **v64;
  char v65;
  const char **v66;
  char v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = (const char **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::String>(a1, &v54);
  IPC::Decoder::decode<WTF::String>(a1, &v52);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v50);
  v7 = (const char **)IPC::Decoder::decode<std::array<unsigned char,8ul>>(a1);
  v9 = v8;
  IPC::Decoder::decode<WTF::String>(a1, &v48);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v46);
  v10 = IPC::Decoder::decode<JSC::MessageLevel>(a1);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v44);
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v42);
  IPC::Decoder::decode<WTF::String>(a1, &v40);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v38);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v35);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v32);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v29);
  v11 = IPC::Decoder::decode<BOOL>(a1);
  if (!*a1)
    goto LABEL_48;
  if (!v6)
    goto LABEL_47;
  v56[0] = v4;
  if (!v55)
    goto LABEL_47;
  v13 = v54;
  v54 = 0;
  v56[1] = v13;
  if (!v53)
    goto LABEL_47;
  v14 = v52;
  v52 = 0;
  v56[2] = v14;
  if (!v51)
    goto LABEL_47;
  v15 = v50;
  v50 = 0;
  v56[3] = v15;
  if (!v9)
    goto LABEL_47;
  v56[4] = v7;
  if (!v49)
    goto LABEL_47;
  v16 = v48;
  v48 = 0;
  v56[5] = v16;
  if (!v47)
    goto LABEL_47;
  v17 = v46;
  v46 = 0;
  v56[6] = v17;
  if (v10 <= 0xFFu)
    goto LABEL_47;
  v57 = v10;
  if (!v45)
    goto LABEL_47;
  v18 = v44;
  v44 = 0;
  v58 = v18;
  if (!v43)
    goto LABEL_47;
  v19 = v42;
  v42 = 0;
  v59 = v19;
  if (!v41)
    goto LABEL_47;
  v20 = v40;
  v40 = 0;
  v60 = v20;
  if (!v39)
    goto LABEL_47;
  v21 = v38;
  v38 = 0;
  v61 = v21;
  if (!v37)
    goto LABEL_47;
  LOBYTE(v62) = 0;
  v63 = 0;
  if (v36)
  {
    v22 = v35;
    v35 = 0;
    v62 = v22;
    v63 = 1;
  }
  if (!v34)
    goto LABEL_47;
  LOBYTE(v64) = 0;
  v65 = 0;
  if (v33)
  {
    v23 = v32;
    v32 = 0;
    v64 = v23;
    v65 = 1;
  }
  if (!v31)
    goto LABEL_47;
  LOBYTE(v66) = 0;
  v67 = 0;
  if (v30)
  {
    v24 = v29;
    v29 = 0;
    v66 = v24;
    v67 = 1;
  }
  if (v11 <= 0xFFu)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    *a2 = 0;
    a2[152] = 0;
    goto LABEL_25;
  }
  v68 = v11;
  WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters((uint64_t)a2, (uint64_t *)v56);
  a2[152] = 1;
  WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v56);
LABEL_25:
  if (v31 && v30)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
  if (v34 && v33)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v32);
  if (v37 && v36)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v35);
  if (v39)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v38);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v12);
  if (v43 && v42)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v42, v25);
  if (v45 && v44)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v44, (WTF::StringImpl *)v25);
  if (v47)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v46);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48, (WTF::StringImpl *)v25);
  if (v51)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v50);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v26);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v27);
}

void sub_196C06434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char **a10, char a11, int a12, char a13, const char **a14, char a15, int a16, char a17, const char **a18, char a19, int a20,char a21,const char **a22,char a23,int a24,char a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl **a29,char a30,const char **a31,char a32,int a33,char a34,uint64_t a35,const char **a36,char a37,int a38,char a39,uint64_t a40,char a41,uint64_t a42,const char **a43)
{
  WTF::StringImpl *v44;
  void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(&a43);
  if (a13 && a11)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a10);
  if (a17 && a15)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a14);
  if (a21 && a19)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a18);
  if (a23)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a22);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25, v44);
  if (a28 && a27)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(a27, v45);
  if (a30 && a29)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a29, (WTF::StringImpl *)v45);
  if (a32)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a31);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a34, (WTF::StringImpl *)v45);
  if (a37)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a36);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a39, v46);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a41, v47);
  _Unwind_Resume(a1);
}

void sub_196C06550()
{
  JUMPOUT(0x196C06520);
}

void sub_196C06558()
{
  JUMPOUT(0x196C06528);
}

void sub_196C06564()
{
  JUMPOUT(0x196C06538);
}

void sub_196C0656C()
{
  JUMPOUT(0x196C06540);
}

void sub_196C06574()
{
  JUMPOUT(0x196C06548);
}

WTF::StringImpl *WebKit::WebProcess::platformSetWebsiteDataStoreParameters(uint64_t a1, uint64_t a2)
{
  const WebKit::SandboxExtensionHandle *v4;
  const WebKit::SandboxExtensionHandle *v5;
  WTF::StringImpl *result;
  const WebKit::SandboxExtensionHandle *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  const char *v12;
  JSC *v13;
  const char *v14;
  void *v15;
  WTF *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20[2];

  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 24), (const WebKit::SandboxExtensionHandle *)a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 48), v4);
  result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 88), v5);
  if (*(_BYTE *)(a2 + 104))
    result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 96), v7);
  if (*(_BYTE *)(a2 + 120))
    result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 112), v7);
  if (*(_BYTE *)(a2 + 136))
    result = (WTF::StringImpl *)WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 128), v7);
  v8 = *(WTF::StringImpl **)(a2 + 40);
  if (v8 && *((_DWORD *)v8 + 1))
  {
    *(_DWORD *)v8 += 2;
    v18 = v8;
    v20[0] = (WTF *)"/JSC.config";
    v20[1] = (WTF *)12;
    result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v18, (uint64_t *)v20, &v19);
    if (v19)
    {
      v10 = v18;
      v18 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::String::latin1((WTF::String *)&v19);
      v11 = v20[0];
      WTF::String::latin1((WTF::String *)(a1 + 288));
      if (v11)
        v13 = (WTF *)((char *)v11 + 16);
      else
        v13 = 0;
      if (v17)
        v14 = (char *)v17 + 16;
      else
        v14 = 0;
      JSC::processConfigFile(v13, "com.apple.WebKit.WebContent", v14, v12);
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          WTF::fastFree(v17, v15);
        else
          --*(_DWORD *)v17;
      }
      v16 = v20[0];
      v20[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v15);
        else
          --*(_DWORD *)v16;
      }
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_196C06710(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
      WTF::fastFree(a13, a2);
    else
      --*(_DWORD *)a13;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

const char **WebKit::SandboxExtension::consumePermanently(const char ***this, const WebKit::SandboxExtensionHandle *a2)
{
  const char **result;
  _BOOL8 v4;

  result = *this;
  if (result)
  {
    v4 = WebKit::SandboxExtensionImpl::consume((WebKit::SandboxExtensionImpl *)result);
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this, 0);
    return (const char **)v4;
  }
  return result;
}

void WebKit::WebsiteDataStore::parameters(WebKit::WebsiteDataStore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  const char **v16;
  BOOL HaveTrackingPreventionEnabled;
  WTF::StringImpl **v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  WTF::StringImpl *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const char **v35;
  const char **v36;
  WTF *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const char **v41;
  const char **v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  const char **v49;
  const char **v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl **v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl **v70;
  WTF::StringImpl **v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  const void *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  const char **v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl **v110;
  const char **v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  const char **v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  const char **v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  const char **v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  const char **v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  const char **v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl **v147;
  const char **v148;
  void *v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  const char **v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  BOOL v170;
  WebKit::WebsiteDataStore *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  int v177;
  const char **v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  int v182;
  const char **v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  int v187;
  const char **v188;
  uint64_t v189;
  const char **v190;
  unint64_t v191;
  const char **v192;
  int v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  _OWORD *v199;
  uint64_t v200;
  const char **v201;
  const char **v202;
  const char **v203;
  WTF::StringImpl *v204;
  const char **v205;
  _BYTE v206[7];
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl **v209;
  uint64_t v210;
  WTF::StringImpl **v211;
  const char **v212;
  WTF::StringImpl *v213;
  const char **v214;
  WTF::StringImpl *v215;
  const char **v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF *v219;
  int v220;
  char v221;
  WTF::StringImpl *v222;
  __int128 v223;
  char v224;
  _QWORD v225[5];
  char v226;
  uint64_t v227;
  __int128 v228;
  char v229;
  _QWORD v230[5];
  _QWORD v231[5];
  __int128 v232;
  __int128 v233;
  __int16 v234;
  char v235;
  _BYTE v236[24];
  WTF::StringImpl *v237;
  __int128 v238;
  char v239;
  WTF::StringImpl *v240;
  __int128 v241;
  __int128 v242;
  _BYTE v243[48];
  __int128 v244;
  __int128 v245;
  _BYTE v246[25];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int8 v255;
  __int128 v256;
  _DWORD v257[2];
  __int128 v258;
  __int128 v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 32) = 1;
  v199 = (_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 104) = 0;
  v200 = a2 + 112;
  WTF::URL::invalidate((WTF::URL *)(a2 + 112));
  *(_QWORD *)(a2 + 152) = 0;
  WTF::URL::invalidate((WTF::URL *)(a2 + 152));
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_WORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_QWORD *)(a2 + 344) = 0x100000000;
  *(_DWORD *)(a2 + 352) = 256;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 364) = 0;
  *(_OWORD *)(a2 + 372) = 0u;
  *(_QWORD *)(a2 + 387) = 0;
  *(_BYTE *)(a2 + 395) = 2;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 416) = 0;
  *(_BYTE *)(a2 + 424) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_BYTE *)(a2 + 440) = 0;
  *(_BYTE *)(a2 + 448) = 0;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_DWORD *)(a2 + 552) = 257;
  *(_BYTE *)(a2 + 560) = 0;
  *(_BYTE *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_WORD *)(a2 + 600) = 0;
  *(_BYTE *)(a2 + 602) = 1;
  *(_DWORD *)(a2 + 603) = 0;
  *(_BYTE *)(a2 + 648) = 0;
  *(_BYTE *)(a2 + 656) = 0;
  *(_BYTE *)(a2 + 664) = 0;
  *(_BYTE *)(a2 + 672) = 0;
  *(_BYTE *)(a2 + 680) = 0;
  *(_BYTE *)(a2 + 688) = 0;
  *(_BYTE *)(a2 + 696) = 0;
  *(_BYTE *)(a2 + 640) = 0;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  v4 = WebKit::WebsiteDataStore::resolvedDirectories(this);
  v5 = (_QWORD *)v4;
  v6 = *(WTF::StringImpl **)(v4 + 112);
  if (v6)
    *(_DWORD *)v6 += 2;
  v216 = 0;
  v217 = v6;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v4, (uint64_t *)&v217, &v216, 1);
  v8 = (WTF::StringImpl *)v5[13];
  if (v8)
    *(_DWORD *)v8 += 2;
  v214 = 0;
  v215 = v8;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v7, (uint64_t *)&v215, &v214, 1);
  v10 = (WTF::StringImpl *)v5[7];
  if (v10)
    *(_DWORD *)v10 += 2;
  v212 = 0;
  v213 = v10;
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v9, (uint64_t *)&v213, &v212, 1);
  v12 = 0;
  v13 = atomic_load(WebKit::WebsiteDataStore::isAppBoundITPRelaxationEnabled);
  if ((v13 & 1) != 0)
  {
    v11 = (WebKit *)WebKit::WebsiteDataStore::appBoundDomainsIfInitialized(v225);
    if (LOBYTE(v225[1]))
      v12 = v225[0];
    else
      v12 = 0;
  }
  v211 = 0;
  v14 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v14 & 1) != 0)
  {
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
    v11 = (WebKit *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=(&v211, &WebKit::managedDomains(void)::managedDomains);
  }
  v16 = v216;
  v15 = v217;
  v216 = 0;
  v217 = 0;
  v204 = v15;
  v205 = v16;
  if (*((_BYTE *)this + 265))
  {
    HaveTrackingPreventionEnabled = *((_BYTE *)this + 265) == 2;
  }
  else if (*(unsigned __int16 *)(*((_QWORD *)this + 26) + 536) >= 0x100u)
  {
    HaveTrackingPreventionEnabled = *(_WORD *)(*((_QWORD *)this + 26) + 536) != 0;
  }
  else
  {
    HaveTrackingPreventionEnabled = WebKit::doesAppHaveTrackingPreventionEnabled(v11);
  }
  v206[0] = HaveTrackingPreventionEnabled;
  v206[1] = *((_QWORD *)this + 34) != 0;
  v206[2] = 0;
  v206[3] = *((_BYTE *)this + 264);
  v206[4] = WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(this);
  *(_WORD *)&v206[5] = 0;
  v207 = 0;
  v208 = v12;
  v18 = v211;
  v210 = 0;
  v211 = 0;
  v209 = v18;
  v225[0] = 1;
  memset(&v225[2], 0, 24);
  v226 = 1;
  v230[0] = 0;
  v227 = 0;
  v228 = 0u;
  v229 = 0;
  WTF::URL::invalidate((WTF::URL *)v230);
  v231[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v231);
  v235 = 0;
  v236[0] = 0;
  v236[16] = 0;
  v237 = 0;
  LOBYTE(v238) = 0;
  v239 = 0;
  v232 = 0u;
  v233 = 0u;
  v234 = 0;
  v241 = 0u;
  v240 = 0;
  *(_QWORD *)&v242 = 0x100000000;
  DWORD2(v242) = 256;
  BYTE12(v242) = 0;
  v243[0] = 0;
  memset(&v243[4], 0, 31);
  v243[35] = 2;
  LOBYTE(v244) = 0;
  BYTE8(v244) = 0;
  LOBYTE(v245) = 0;
  BYTE8(v245) = 0;
  v246[0] = 0;
  v246[8] = 0;
  v246[16] = 0;
  v246[24] = 0;
  v250 = 0u;
  v251 = 0u;
  v248 = 0u;
  v249 = 0u;
  v247 = 0u;
  v252 = 257;
  LOBYTE(v253) = 0;
  v255 = 0;
  v256 = 0u;
  LOWORD(v257[0]) = 0;
  BYTE2(v257[0]) = 1;
  *(_DWORD *)((char *)v257 + 3) = 0;
  v258 = 0u;
  v259 = 0u;
  v225[0] = *((_QWORD *)this + 3);
  v19 = *((_QWORD *)this + 26);
  v20 = *(_OWORD *)(v19 + 32);
  LOBYTE(v225[2]) = v20;
  *(_QWORD *)((char *)&v225[2] + 1) = v20 >> 8;
  HIBYTE(v225[3]) = HIBYTE(v20);
  *(_WORD *)((char *)&v225[3] + 5) = HIDWORD(v20) >> 8;
  *(_DWORD *)((char *)&v225[3] + 1) = *((_QWORD *)&v20 + 1) >> 8;
  WTF::String::operator=((WTF::StringImpl **)&v225[4], (WTF::StringImpl *)(v19 + 312));
  v21 = *((_QWORD *)this + 26);
  v226 = *(_BYTE *)(v21 + 411);
  v234 = *(_WORD *)(v21 + 408);
  v22 = *(_BYTE *)(v21 + 410);
  LOBYTE(v218) = v22;
  LOBYTE(v219) = 0;
  v221 = 0;
  v23 = *(WTF::StringImpl **)(v21 + 504);
  if (v23)
    *(_DWORD *)v23 += 2;
  v222 = v23;
  v25 = *(_QWORD *)(v21 + 32);
  v26 = *(_QWORD *)(v21 + 40);
  v24 = (__int128 *)(v21 + 32);
  if (v25 | v26)
  {
    v223 = *v24;
    v27 = 1;
  }
  else
  {
    v27 = 0;
    LOBYTE(v223) = 0;
  }
  v224 = v27;
  v235 = v22;
  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)v236, (uint64_t)&v219);
  v29 = v222;
  v222 = 0;
  v30 = v237;
  v237 = v29;
  if (!v30)
    goto LABEL_28;
  if (*(_DWORD *)v30 != 2)
  {
    *(_DWORD *)v30 -= 2;
LABEL_28:
    v238 = v223;
    v239 = v224;
    v222 = 0;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v30, v28);
  v31 = v222;
  v238 = v223;
  v239 = v224;
  v222 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
  }
LABEL_33:
  if (v221)
  {
    v32 = v219;
    if (v219)
    {
      v219 = 0;
      v220 = 0;
      WTF::fastFree(v32, v28);
    }
  }
  v33 = v215;
  v215 = 0;
  v34 = v240;
  v240 = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v214;
  v214 = 0;
  v36 = (const char **)v241;
  *(_QWORD *)&v241 = v35;
  if (v36)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v36);
    WTF::fastFree(v37, v38);
  }
  v39 = v213;
  v213 = 0;
  v40 = (WTF::StringImpl *)v233;
  *(_QWORD *)&v233 = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v28);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v212;
  v212 = 0;
  v42 = (const char **)*((_QWORD *)&v233 + 1);
  *((_QWORD *)&v233 + 1) = v41;
  if (v42)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v42);
    WTF::fastFree(v43, v44);
  }
  WTF::String::operator=((WTF::StringImpl **)&v241 + 1, (WTF::StringImpl *)(*((_QWORD *)this + 26) + 320));
  v46 = *((_QWORD *)this + 26);
  LOBYTE(v242) = *(_BYTE *)(v46 + 413);
  BYTE1(v242) = *(_BYTE *)(v46 + 288);
  BYTE2(v242) = *(_BYTE *)(v46 + 415);
  BYTE3(v242) = *(_BYTE *)(v46 + 289);
  DWORD1(v242) = *(_DWORD *)(v46 + 432);
  WORD4(v242) = *(_WORD *)(v46 + 416);
  v47 = v204;
  v204 = 0;
  v48 = (WTF::StringImpl *)v256;
  *(_QWORD *)&v256 = v47;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v45);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v205;
  v205 = 0;
  v50 = (const char **)*((_QWORD *)&v256 + 1);
  *((_QWORD *)&v256 + 1) = v49;
  if (v50)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v50);
    WTF::fastFree(v51, v52);
  }
  *(_DWORD *)((char *)v257 + 3) = *(_DWORD *)&v206[3];
  v257[0] = *(_DWORD *)v206;
  v53 = v207;
  v207 = 0;
  v54 = (WTF::StringImpl *)v258;
  *(_QWORD *)&v258 = v53;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v45);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v208;
  v208 = 0;
  v56 = (WTF::StringImpl **)*((_QWORD *)&v258 + 1);
  *((_QWORD *)&v258 + 1) = v55;
  if (v56)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v45);
  v57 = v209;
  v209 = 0;
  v58 = (WTF::StringImpl **)v259;
  *(_QWORD *)&v259 = v57;
  if (v58)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v58, v45);
  v59 = v210;
  v210 = 0;
  v60 = (WTF::StringImpl *)*((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = v59;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v45);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = *((_QWORD *)this + 26);
  WORD5(v242) = *(_WORD *)(v61 + 419);
  v62 = *(_QWORD *)(v61 + 424);
  HIDWORD(v242) = v62;
  v243[0] = BYTE4(v62);
  v243[4] = *(_BYTE *)(v61 + 418);
  v243[7] = *(_BYTE *)(v61 + 481);
  WTF::String::operator=((WTF::StringImpl **)&v243[8], (WTF::StringImpl *)(v61 + 488));
  WTF::String::operator=((WTF::StringImpl **)&v243[16], (WTF::StringImpl *)(*((_QWORD *)this + 26) + 496));
  WTF::String::operator=((WTF::StringImpl **)&v243[24], (WTF::StringImpl *)(*((_QWORD *)this + 26) + 504));
  v243[33] = WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(this);
  v63 = *((_QWORD *)this + 26);
  v243[35] = *(_BYTE *)(v63 + 17);
  *(_QWORD *)&v243[40] = *(_QWORD *)(v63 + 216);
  v64 = *(_QWORD *)(v63 + 232);
  *(_QWORD *)&v244 = *(_QWORD *)(v63 + 224);
  BYTE8(v244) = v64;
  v65 = *(_QWORD *)(v63 + 248);
  *(_QWORD *)&v245 = *(_QWORD *)(v63 + 240);
  BYTE8(v245) = v65;
  v66 = *(_QWORD *)(v63 + 264);
  *(_QWORD *)v246 = *(_QWORD *)(v63 + 256);
  v246[8] = v66;
  v68 = *(_QWORD *)(v63 + 272);
  v67 = *(_QWORD *)(v63 + 280);
  *(_QWORD *)&v246[16] = v68;
  v246[24] = v67;
  v69 = WTF::String::operator=((WTF::StringImpl **)&v247, (WTF::StringImpl *)(v5 + 10));
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v69, (uint64_t *)&v247, (const char ***)&v247 + 1, 1);
  v70 = WTF::String::operator=((WTF::StringImpl **)&v248, (WTF::StringImpl *)(v5 + 8));
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v70, (uint64_t *)&v248, (const char ***)&v248 + 1, 1);
  v71 = WTF::String::operator=((WTF::StringImpl **)&v250, (WTF::StringImpl *)(v5 + 6));
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v71, (uint64_t *)&v250, (const char ***)&v250 + 1, 1);
  v72 = WTF::String::operator=((WTF::StringImpl **)&v249, (WTF::StringImpl *)(v5 + 3));
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v72, (uint64_t *)&v249, (const char ***)&v249 + 1, 1);
  v73 = WTF::String::operator=((WTF::StringImpl **)&v251, (WTF::StringImpl *)(v5 + 16));
  WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)v73, (uint64_t *)&v251, (const char ***)&v251 + 1, 1);
  v75 = *((_QWORD *)this + 26);
  LOBYTE(v252) = *(_BYTE *)(v75 + 414);
  BYTE1(v252) = *((_BYTE *)this + 456);
  BYTE2(v252) = *((_BYTE *)this + 496);
  HIBYTE(v252) = *(_BYTE *)(v75 + 483);
  if (v255 == *((unsigned __int8 *)this + 488))
  {
    v76 = (uint64_t *)((char *)this + 472);
    if ((uint64_t *)((char *)this + 472) != &v253 && v255)
    {
      v77 = HIDWORD(v254);
      v78 = *((unsigned int *)this + 121);
      if (HIDWORD(v254) <= v78)
      {
        if (v78 > v254)
        {
          WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v253, 0);
          WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v253, *((unsigned int *)this + 121));
          v77 = HIDWORD(v254);
        }
        v78 = v77;
      }
      else
      {
        v79 = v253 + 32 * v78;
        v80 = 32 * HIDWORD(v254) - 32 * v78;
        do
        {
          v81 = *(WTF **)v79;
          if (*(_QWORD *)v79)
          {
            *(_QWORD *)v79 = 0;
            *(_DWORD *)(v79 + 8) = 0;
            WTF::fastFree(v81, v74);
          }
          v79 += 32;
          v80 -= 32;
        }
        while (v80);
        HIDWORD(v254) = v78;
        v77 = v78;
      }
      v87 = *v76;
      if (v77)
      {
        v88 = v87 + 32 * v78;
        v89 = v253;
        do
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v89, v87);
          *(_OWORD *)(v89 + 16) = *(_OWORD *)(v87 + 16);
          v87 += 32;
          v89 += 32;
        }
        while (v87 != v88);
        v87 = *v76;
        v77 = HIDWORD(v254);
      }
      v90 = *((unsigned int *)this + 121);
      if (v77 != (_DWORD)v90)
      {
        v91 = v253 + 32 * v77;
        v92 = v87 + 32 * v77;
        v93 = 32 * v90 - 32 * v77;
        do
        {
          v91 = std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](v91, v92)+ 32;
          v92 += 32;
          v93 -= 32;
        }
        while (v93);
        v77 = *((_DWORD *)this + 121);
      }
      HIDWORD(v254) = v77;
    }
  }
  else if (v255)
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v253, v74);
    v255 = 0;
  }
  else
  {
    v82 = *((unsigned int *)this + 121);
    v253 = 0;
    LODWORD(v254) = 0;
    HIDWORD(v254) = v82;
    if ((_DWORD)v82)
    {
      if (v82 >> 27)
      {
        __break(0xC471u);
        return;
      }
      v83 = WTF::fastMalloc((WTF *)(32 * v82));
      LODWORD(v254) = v82;
      v253 = v83;
      v84 = *((unsigned int *)this + 121);
      if ((_DWORD)v84)
      {
        v85 = *((_QWORD *)this + 59);
        v86 = 32 * v84;
        do
        {
          v83 = std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>::pair[abi:sn180100](v83, v85)+ 32;
          v85 += 32;
          v86 -= 32;
        }
        while (v86);
      }
    }
    v255 = 1;
  }
  v94 = *(_OWORD *)&v225[2];
  *v199 = *(_OWORD *)v225;
  v199[1] = v94;
  v95 = v225[4];
  v225[4] = 0;
  v96 = *(WTF::StringImpl **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v95;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)v96 -= 2;
  }
  *(_BYTE *)(a2 + 72) = v226;
  v97 = v227;
  v227 = 0;
  v98 = *(const void **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v97;
  if (v98)
    CFRelease(v98);
  v99 = v228;
  *(_QWORD *)&v228 = 0;
  v100 = *(WTF::StringImpl **)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v99;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)v100 -= 2;
  }
  v101 = *((_QWORD *)&v228 + 1);
  *((_QWORD *)&v228 + 1) = 0;
  v102 = *(WTF::StringImpl **)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v101;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v74);
    else
      *(_DWORD *)v102 -= 2;
  }
  *(_BYTE *)(a2 + 104) = v229;
  WTF::URL::operator=(v200, (WTF::StringImpl *)v230);
  WTF::URL::operator=(a2 + 152, (WTF::StringImpl *)v231);
  v104 = v232;
  *(_QWORD *)&v232 = 0;
  v105 = *(WTF::StringImpl **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v104;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, v103);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (const char **)*((_QWORD *)&v232 + 1);
  *((_QWORD *)&v232 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 200), v106);
  v108 = v233;
  *(_QWORD *)&v233 = 0;
  v109 = *(WTF::StringImpl **)(a2 + 208);
  *(_QWORD *)(a2 + 208) = v108;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v107);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = (WTF::StringImpl **)(a2 + 320);
  v111 = (const char **)*((_QWORD *)&v233 + 1);
  *((_QWORD *)&v233 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 216), v111);
  *(_WORD *)(a2 + 224) = v234;
  *(_BYTE *)(a2 + 240) = v235;
  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a2 + 248, (uint64_t)v236);
  v113 = v237;
  v237 = 0;
  v114 = *(WTF::StringImpl **)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v113;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v112);
    else
      *(_DWORD *)v114 -= 2;
  }
  *(_OWORD *)(a2 + 288) = v238;
  *(_BYTE *)(a2 + 304) = v239;
  v115 = v240;
  v240 = 0;
  v116 = *v110;
  *v110 = v115;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, v112);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (const char **)v241;
  *(_QWORD *)&v241 = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 328), v117);
  v119 = *((_QWORD *)&v241 + 1);
  *((_QWORD *)&v241 + 1) = 0;
  v120 = *(WTF::StringImpl **)(a2 + 336);
  *(_QWORD *)(a2 + 336) = v119;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, v118);
    else
      *(_DWORD *)v120 -= 2;
  }
  *(_OWORD *)(a2 + 344) = v242;
  v121 = *(_QWORD *)&v243[8];
  *(_QWORD *)&v243[8] = 0;
  v122 = *(WTF::StringImpl **)(a2 + 368);
  *(_QWORD *)(a2 + 360) = *(_QWORD *)v243;
  *(_QWORD *)(a2 + 368) = v121;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v118);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = *(_QWORD *)&v243[16];
  *(_QWORD *)&v243[16] = 0;
  v124 = *(WTF::StringImpl **)(a2 + 376);
  *(_QWORD *)(a2 + 376) = v123;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, v118);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = *(_QWORD *)&v243[24];
  *(_QWORD *)&v243[24] = 0;
  v126 = *(WTF::StringImpl **)(a2 + 384);
  *(_QWORD *)(a2 + 384) = v125;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, v118);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = *(_OWORD *)v246;
  *(_OWORD *)(a2 + 424) = v245;
  *(_OWORD *)(a2 + 440) = v127;
  *(_OWORD *)(a2 + 449) = *(_OWORD *)&v246[9];
  v128 = v244;
  *(_OWORD *)(a2 + 392) = *(_OWORD *)&v243[32];
  *(_OWORD *)(a2 + 408) = v128;
  v129 = v247;
  *(_QWORD *)&v247 = 0;
  v130 = *(WTF::StringImpl **)(a2 + 472);
  *(_QWORD *)(a2 + 472) = v129;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, v118);
    else
      *(_DWORD *)v130 -= 2;
  }
  v131 = (const char **)*((_QWORD *)&v247 + 1);
  *((_QWORD *)&v247 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 480), v131);
  v133 = v248;
  *(_QWORD *)&v248 = 0;
  v134 = *(WTF::StringImpl **)(a2 + 488);
  *(_QWORD *)(a2 + 488) = v133;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, v132);
    else
      *(_DWORD *)v134 -= 2;
  }
  v135 = (const char **)*((_QWORD *)&v248 + 1);
  *((_QWORD *)&v248 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 496), v135);
  v137 = v249;
  *(_QWORD *)&v249 = 0;
  v138 = *(WTF::StringImpl **)(a2 + 504);
  *(_QWORD *)(a2 + 504) = v137;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, v136);
    else
      *(_DWORD *)v138 -= 2;
  }
  v139 = (const char **)*((_QWORD *)&v249 + 1);
  *((_QWORD *)&v249 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 512), v139);
  v141 = v250;
  *(_QWORD *)&v250 = 0;
  v142 = *(WTF::StringImpl **)(a2 + 520);
  *(_QWORD *)(a2 + 520) = v141;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, v140);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = (const char **)*((_QWORD *)&v250 + 1);
  *((_QWORD *)&v250 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 528), v143);
  v145 = v251;
  *(_QWORD *)&v251 = 0;
  v146 = *(WTF::StringImpl **)(a2 + 536);
  *(_QWORD *)(a2 + 536) = v145;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, v144);
    else
      *(_DWORD *)v146 -= 2;
  }
  v147 = (WTF::StringImpl **)(a2 + 584);
  v148 = (const char **)*((_QWORD *)&v251 + 1);
  *((_QWORD *)&v251 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 544), v148);
  *(_DWORD *)(a2 + 552) = v252;
  if (*(unsigned __int8 *)(a2 + 576) == v255)
  {
    if (*(_BYTE *)(a2 + 576))
    {
      v150 = *(unsigned int *)(a2 + 572);
      v151 = *(WTF **)(a2 + 560);
      if ((_DWORD)v150)
      {
        v152 = 32 * v150;
        do
        {
          v153 = *(WTF **)v151;
          if (*(_QWORD *)v151)
          {
            *(_QWORD *)v151 = 0;
            *((_DWORD *)v151 + 2) = 0;
            WTF::fastFree(v153, v149);
          }
          v151 = (WTF *)((char *)v151 + 32);
          v152 -= 32;
        }
        while (v152);
        v151 = *(WTF **)(a2 + 560);
      }
      if (v151)
      {
        *(_QWORD *)(a2 + 560) = 0;
        *(_DWORD *)(a2 + 568) = 0;
        WTF::fastFree(v151, v149);
      }
      v154 = v253;
      v253 = 0;
      *(_QWORD *)(a2 + 560) = v154;
      v155 = v254;
      v254 = 0;
      *(_QWORD *)(a2 + 568) = v155;
    }
  }
  else if (*(_BYTE *)(a2 + 576))
  {
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 560, v149);
    *(_BYTE *)(a2 + 576) = 0;
  }
  else
  {
    v156 = v253;
    v253 = 0;
    *(_QWORD *)(a2 + 560) = v156;
    v157 = v254;
    v254 = 0;
    *(_QWORD *)(a2 + 568) = v157;
    *(_BYTE *)(a2 + 576) = 1;
  }
  v158 = (WTF::StringImpl *)v256;
  *(_QWORD *)&v256 = 0;
  v159 = *v147;
  *v147 = v158;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
      WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v149);
    else
      *(_DWORD *)v159 -= 2;
  }
  v160 = (const char **)*((_QWORD *)&v256 + 1);
  *((_QWORD *)&v256 + 1) = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 592), v160);
  *(_DWORD *)(a2 + 600) = v257[0];
  *(_DWORD *)(a2 + 603) = *(_DWORD *)((char *)v257 + 3);
  v162 = v258;
  *(_QWORD *)&v258 = 0;
  v163 = *(WTF::StringImpl **)(a2 + 608);
  *(_QWORD *)(a2 + 608) = v162;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
      WTF::StringImpl::destroy(v163, v161);
    else
      *(_DWORD *)v163 -= 2;
  }
  v164 = *((_QWORD *)&v258 + 1);
  *((_QWORD *)&v258 + 1) = 0;
  v165 = *(WTF::StringImpl ***)(a2 + 616);
  *(_QWORD *)(a2 + 616) = v164;
  if (v165)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v165, v161);
  v166 = v259;
  *(_QWORD *)&v259 = 0;
  v167 = *(WTF::StringImpl ***)(a2 + 624);
  *(_QWORD *)(a2 + 624) = v166;
  if (v167)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v167, v161);
  v168 = *((_QWORD *)&v259 + 1);
  *((_QWORD *)&v259 + 1) = 0;
  v169 = *(WTF::StringImpl **)(a2 + 632);
  *(_QWORD *)(a2 + 632) = v168;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      v169 = (WTF::StringImpl *)WTF::StringImpl::destroy(v169, v161);
    else
      *(_DWORD *)v169 -= 2;
  }
  if (*((_BYTE *)this + 265))
  {
    v170 = *((_BYTE *)this + 265) == 2;
  }
  else if (*(unsigned __int16 *)(*((_QWORD *)this + 26) + 536) >= 0x100u)
  {
    v170 = *(_WORD *)(*((_QWORD *)this + 26) + 536) != 0;
  }
  else
  {
    v170 = WebKit::doesAppHaveTrackingPreventionEnabled(v169);
  }
  *(_BYTE *)(a2 + 600) = v170;
  v171 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::platformSetNetworkParameters(this, (WebKit::WebsiteDataStoreParameters *)a2);
  *(_WORD *)(a2 + 365) = WebKit::WebsiteDataStore::useNetworkLoader(v171);
  v173 = *((_QWORD *)this + 3);
  if ((v173 & 0x8000000000000000) == 0 || v173 == -1)
  {
    v203 = 0;
    v174 = WebKit::WebsiteDataStore::resolvedCookieStorageDirectory((uint64_t)this, &v218);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v174, (uint64_t *)&v218, &v203, 1);
    v176 = v218;
    v218 = 0;
    if (v176)
    {
      if (*(_DWORD *)v176 == 2)
        WTF::StringImpl::destroy(v176, v175);
      else
        *(_DWORD *)v176 -= 2;
    }
    v177 = *(unsigned __int8 *)(a2 + 648);
    v178 = v203;
    v203 = 0;
    if (v177)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 640), v178);
    }
    else
    {
      *(_QWORD *)(a2 + 640) = v178;
      *(_BYTE *)(a2 + 648) = 1;
    }
    v202 = 0;
    v179 = WebKit::WebsiteDataStore::resolvedContainerCachesNetworkingDirectory((uint64_t)this, &v218);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v179, (uint64_t *)&v218, &v202, 1);
    v181 = v218;
    v218 = 0;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v180);
      else
        *(_DWORD *)v181 -= 2;
    }
    v182 = *(unsigned __int8 *)(a2 + 664);
    v183 = v202;
    v202 = 0;
    if (v182)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 656), v183);
    }
    else
    {
      *(_QWORD *)(a2 + 656) = v183;
      *(_BYTE *)(a2 + 664) = 1;
    }
    v201 = 0;
    v184 = WebKit::WebsiteDataStore::parentBundleDirectory((uint64_t)this, &v218);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(v184, (uint64_t *)&v218, &v201, 0);
    v186 = v218;
    v218 = 0;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2)
        WTF::StringImpl::destroy(v186, v185);
      else
        *(_DWORD *)v186 -= 2;
    }
    v187 = *(unsigned __int8 *)(a2 + 680);
    v188 = v201;
    v201 = 0;
    if (v187)
    {
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 672), v188);
    }
    else
    {
      *(_QWORD *)(a2 + 672) = v188;
      *(_BYTE *)(a2 + 680) = 1;
    }
    v189 = *MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      v190 = *(const char ***)(v189 + 8);
      v191 = *(unsigned int *)(v189 + 4) | ((unint64_t)((*(_DWORD *)(v189 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v190 = 0;
      v191 = 0x100000000;
    }
    WebKit::SandboxExtension::createHandleForTemporaryFile(v190, (const char **)v191, 1, (uint64_t)&v218);
    if ((_BYTE)v220)
    {
      v193 = *(unsigned __int8 *)(a2 + 696);
      v192 = (const char **)v218;
      v218 = 0;
      if (v193)
      {
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a2 + 688), v192);
      }
      else
      {
        *(_QWORD *)(a2 + 688) = v192;
        *(_BYTE *)(a2 + 696) = 1;
      }
    }
    std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)&v218, (WTF::StringImpl *)v192);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v201);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v202);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v203);
  }
  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v225, v172);
  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v204, v194);
  if (v211)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v211, v195);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v212);
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, v196);
    else
      *(_DWORD *)v213 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v214);
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, v197);
    else
      *(_DWORD *)v215 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v216);
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
      WTF::StringImpl::destroy(v217, v198);
    else
      *(_DWORD *)v217 -= 2;
  }
}

void WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible(uint64_t a1, uint64_t *a2, const char ***a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  const char **v7;
  const char **v8;
  char v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = *(unsigned int *)(v4 + 4);
    if ((_DWORD)v5)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v4 + 8), (WebKit::SandboxExtensionImpl *)(v5 | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32)), a4, (uint64_t)&v8);
      if (v9)
      {
        v7 = v8;
        v8 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a3, v7);
        if (v9)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
      }
    }
  }
}

void WebKit::SandboxExtension::createHandleWithoutResolvingPath(WebKit::SandboxExtensionImpl *a1@<X0>, WebKit::SandboxExtensionImpl *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v6;
  void *v7;
  const char **v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WebKit::SandboxExtensionImpl *v12;
  char v13;
  NSObject *v14;
  char *v15;
  void *v16;
  WTF *v17;
  _BYTE v18[36];
  WTF *v19;
  WebKit::SandboxExtensionImpl *v20[3];
  _BYTE buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20[1] = a1;
  v20[2] = a2;
  v20[0] = 0;
  WTF::StringView::utf8();
  if (v19)
    v6 = (char *)v19 + 16;
  else
    v6 = 0;
  v18[0] = 0;
  v18[32] = 0;
  WebKit::SandboxExtensionImpl::create((uint64_t)v6, a3, (uint64_t)v18, (uint64_t *)buf);
  v8 = (const char **)v20[0];
  v20[0] = *(WebKit::SandboxExtensionImpl **)buf;
  if (v8)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v8);
    WTF::fastFree(v9, v10);
  }
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v7);
    else
      --*(_DWORD *)v11;
  }
  v12 = v20[0];
  if (v20[0])
  {
    v20[0] = 0;
    *(_QWORD *)a4 = v12;
    v13 = 1;
  }
  else
  {
    v14 = qword_1ECE71780;
    if (os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_ERROR))
    {
      WTF::StringView::utf8();
      if (v19)
        v15 = (char *)v19 + 16;
      else
        v15 = 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v15;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s'", buf, 0xCu);
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          WTF::fastFree(v17, v16);
        else
          --*(_DWORD *)v17;
      }
    }
    v13 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 8) = v13;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v20);
}

void sub_196C07CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, const char **a16)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a16);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::SandboxExtensionImpl::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  _BYTE *result;
  WTF *v11;
  void *v12;
  _OWORD v13[2];
  int v14;

  v8 = WTF::fastMalloc((WTF *)0x10);
  v9 = *(_OWORD *)(a3 + 16);
  v13[0] = *(_OWORD *)a3;
  v13[1] = v9;
  v14 = *(_DWORD *)(a3 + 32);
  result = (_BYTE *)WebKit::SandboxExtensionImpl::sandboxExtensionForType(v8, a1, a2, (uint64_t)v13);
  *(_QWORD *)v8 = result;
  *(_QWORD *)(v8 + 8) = 0;
  if (result && *result)
  {
    *a4 = v8;
  }
  else
  {
    *a4 = 0;
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl((const char **)v8);
    return (_BYTE *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_196C07DB4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::SandboxExtensionImpl::sandboxExtensionForType(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  switch(a3)
  {
    case 0:
    case 1:
      result = sandbox_extension_issue_file();
      break;
    case 2:
      if (*(_BYTE *)(a4 + 32))
        result = sandbox_extension_issue_mach_to_process();
      else
        result = sandbox_extension_issue_mach();
      break;
    case 3:
      if (*(_BYTE *)(a4 + 32))
        result = sandbox_extension_issue_iokit_registry_entry_class_to_process();
      else
        result = sandbox_extension_issue_iokit_registry_entry_class();
      break;
    case 4:
      result = sandbox_extension_issue_generic();
      break;
    case 5:
      if (*(_BYTE *)(a4 + 32))
        result = sandbox_extension_issue_file_to_process();
      else
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters(WebKit::NetworkSessionCreationParameters *this, WTF::StringImpl *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const void *v30;
  WTF::StringImpl *v31;

  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::NetworkSessionCreationParameters *)((char *)this + 552), a2);
  if (*((_BYTE *)this + 544))
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 528, v3);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 64);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 62);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 60);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 58);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 56);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 37);
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_BYTE *)this + 232))
  {
    v21 = (WTF *)*((_QWORD *)this + 27);
    if (v21)
    {
      *((_QWORD *)this + 27) = 0;
      *((_DWORD *)this + 56) = 0;
      WTF::fastFree(v21, v18);
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 23);
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 21);
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v24);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
    CFRelease(v30);
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v24);
    else
      *(_DWORD *)v31 -= 2;
  }
}

void WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(const char ***this)
{
  if (*this)
  {
    (*this)[1] = 0;
    sandbox_extension_release();
  }
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this, 0);
}

void sub_196C0827C(_Unwind_Exception *a1)
{
  const char ***v1;

  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WebKit::SandboxExtensionImpl *v4;
  const char **v5;
  WTF *v6;
  void *v7;
  const char **v8;
  WebKit::SandboxExtensionImpl *v9;
  char v10;

  IPC::Decoder::decode<std::unique_ptr<WebKit::SandboxExtensionImpl>>(a1, &v9);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    v4 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v10)
  {
    v5 = (const char **)v9;
    v9 = 0;
    if (v5)
    {
      WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v5);
      WTF::fastFree(v6, v7);
    }
  }
}

void IPC::Decoder::decode<std::unique_ptr<WebKit::SandboxExtensionImpl>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C083C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)v1, 0);
  _Unwind_Resume(exception_object);
}

const char **IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(IPC::Encoder *a1, const char ***a2)
{
  const char **v3;
  const char **result;
  WTF *v5;
  void *v6;
  WebKit::SandboxExtensionImpl *v7;

  v3 = *a2;
  *a2 = 0;
  v7 = (WebKit::SandboxExtensionImpl *)v3;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a2, 0);
  IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::SandboxExtensionImpl>>(a1, (const char ***)&v7);
  result = (const char **)v7;
  v7 = 0;
  if (result)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(result);
    return (const char **)WTF::fastFree(v5, v6);
  }
  return result;
}

void sub_196C08444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char **a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::SandboxExtensionImpl>>(IPC::Encoder *a1, const char ***a2)
{
  const char **v4;
  char *v5;
  const char *v6;
  size_t v7;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    v6 = **a2;
    if (v6)
      v7 = strlen(v6);
    else
      v7 = 0;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v6, v7);
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::unique_ptr<WebKit::SandboxExtensionImpl>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16[2];
  char v17;
  const char *v18[3];
  const char *v19[2];
  char v20;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
LABEL_12:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    v9 = (_QWORD *)a1[3];
    if (!v9)
    {
LABEL_14:
      *a2 = 0;
      a2[8] = 0;
      return;
    }
LABEL_17:
    if (v4)
      (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(v9, v5);
    goto LABEL_14;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_13;
  if (!v8)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return;
  }
  v9 = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v19);
  v5 = *a1;
  if (!*a1)
  {
    v4 = a1[1];
    goto LABEL_13;
  }
  if (!v20)
  {
    __break(1u);
    goto LABEL_17;
  }
  v18[0] = 0;
  v18[1] = 0;
  v16[0] = strndup(v19[0], (size_t)v19[1]);
  v17 = 1;
  WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v18);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v11 = v16[0];
  v16[0] = 0;
  v16[1] = 0;
  *v10 = v11;
  v10[1] = 0;
  *(_QWORD *)a2 = v10;
  a2[8] = 1;
  if (v17)
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v16);
}

void sub_196C08674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char *a10, uint64_t a11, char a12)
{
  if (a12)
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(&a10);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(const char **this)
{
  char *v2;
  size_t v3;

  v2 = (char *)*this;
  if (*this)
  {
    v3 = strlen(*this);
    memset_s(v2, v3, 0, v3);
    free((void *)*this);
  }
}

void WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters(WebKit::ResourceLoadStatisticsParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 1);
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebKit::WebsiteDataStore::parentBundleDirectory@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;

  v3 = *(_QWORD *)(this + 24);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundlePath"), "stringByStandardizingPath");
    JUMPOUT(0x19AEABCC8);
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a2 = v4;
  return this;
}

uint64_t WebKit::WebsiteDataStore::platformSetNetworkParameters(WebKit::WebsiteDataStore *this, WebKit::WebsiteDataStoreParameters *a2)
{
  CFURLRef v4;
  unint64_t v5;
  unsigned __int16 v6;
  char v7;
  unsigned __int16 v8;
  char v9;
  void *v10;
  char v11;
  CFTypeRef v12;
  void *v13;
  int v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t result;
  uint64_t v21;
  const char **v22;
  const char *CStringPtr;
  size_t Length;
  const char *v25;
  uint64_t i;
  __int16 v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::IOSApplication *v33;
  char v34;
  uint64_t v35;
  _DWORD *v36;
  __int128 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t isMobileSafari;
  char v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  const char **v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF **v65;
  const UInt8 *v66;
  CFIndex v67;
  uint64_t v68;
  const void *v69;
  void *v70;
  WTF *v71;
  WTF *v72;
  unsigned __int16 v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81[5];
  WTF::StringImpl *v82;
  __int128 v83;
  __int128 v84;
  CFTypeRef cf;
  __int128 v86;
  __int128 v87;
  const char **v88[2];
  CFRange v89;

  v4 = (CFURLRef)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    goto LABEL_146;
  while (1)
  {
    v6 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, 0x100uLL);
    v7 = v6;
    v5 = v6;
    if (v6 <= 0xFFu)
      goto LABEL_145;
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    v8 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, 0x100uLL);
    v5 = v8;
    if (v8 <= 0xFFu)
      goto LABEL_145;
    if ((_BYTE)v8)
    {
      v9 = 1;
      goto LABEL_21;
    }
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v10 = (void *)MEMORY[0x1E0CB3940];
    WTF::String::createCFString((WTF::String *)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key);
    v11 = -[__CFURL BOOLForKey:](v4, "BOOLForKey:", objc_msgSend(v10, "stringWithFormat:", CFSTR("InternalDebug%@"), cf));
    v12 = cf;
    cf = 0;
    if (v12)
    {
      CFRelease(v12);
      if ((v11 & 1) != 0)
      {
LABEL_12:
        v9 = 3;
        goto LABEL_21;
      }
    }
    else if ((v11 & 1) != 0)
    {
      goto LABEL_12;
    }
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v13 = (void *)MEMORY[0x1E0CB3940];
    WTF::String::createCFString((WTF::String *)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key);
    v14 = -[__CFURL BOOLForKey:](v4, "BOOLForKey:", objc_msgSend(v13, "stringWithFormat:", CFSTR("InternalDebug%@"), cf));
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    v9 = v14 ? 2 : 0;
LABEL_21:
    v16 = (WTF::StringImpl *)-[__CFURL stringForKey:](v4, "stringForKey:", CFSTR("ITPManualPrevalentResource"));
    if (v16)
    {
      WTF::URL::URL((WTF::URL *)&v82);
      MEMORY[0x19AEABCC8](v81, v16);
      MEMORY[0x19AEABB24](&cf, &v82, v81, 0);
      v18 = v81[0];
      v81[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v82;
      v82 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      if ((v86 & 1) != 0)
        goto LABEL_55;
      WTF::URL::URL((WTF::URL *)v81);
      result = CFStringGetLength((CFStringRef)v16);
      if ((result & 0x80000000) != 0 || (v21 = (result + 7), __OFADD__((_DWORD)result, 7)))
      {
LABEL_147:
        v80 = 0;
        __break(0xC471u);
        return result;
      }
      result = (uint64_t)CFStringGetCStringPtr((CFStringRef)v16, 0x201u);
      if (result)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
        v22 = v88[0];
        if (!v88[0])
          goto LABEL_147;
        *(_DWORD *)v88[0] = 2;
        *((_DWORD *)v22 + 1) = v21;
        v22[1] = (char *)v22 + 20;
        v22[2] = (const char *)0x7074746800000004;
        *(_DWORD *)((char *)v22 + 23) = 791624304;
        CStringPtr = CFStringGetCStringPtr((CFStringRef)v16, 0x201u);
        Length = CFStringGetLength((CFStringRef)v16);
        memcpy((char *)v22 + 27, CStringPtr, Length);
      }
      else
      {
        if (v21 > 0x7FFFFFEF)
          goto LABEL_147;
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20));
        v22 = v88[0];
        if (!v88[0])
          goto LABEL_147;
        *(_DWORD *)v88[0] = 2;
        *((_DWORD *)v22 + 1) = v21;
        v22[1] = (char *)v22 + 20;
        *((_DWORD *)v22 + 4) = 0;
        v25 = "http://";
        for (i = 20; i != 34; i += 2)
        {
          v27 = *(unsigned __int8 *)v25++;
          *(_WORD *)((char *)v22 + i) = v27;
        }
        v89.length = CFStringGetLength((CFStringRef)v16);
        v89.location = 0;
        CFStringGetCharacters((CFStringRef)v16, v89, (UniChar *)v22 + 17);
      }
      v80 = (WTF::StringImpl *)v22;
      MEMORY[0x19AEABB24](&v82, v81, &v80, 0);
      WTF::URL::operator=((uint64_t)&cf, (WTF::StringImpl *)&v82);
      v29 = v82;
      v82 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v80;
      v80 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v28);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v81[0];
      v81[0] = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v28);
        else
          *(_DWORD *)v31 -= 2;
      }
      if ((v86 & 1) != 0)
      {
LABEL_55:
        WebCore::RegistrableDomain::RegistrableDomain(&v82, (const WTF::URL *)&cf);
        v16 = v82;
      }
      else
      {
        v16 = 0;
      }
      v32 = (WTF::StringImpl *)cf;
      cf = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v28);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    v33 = (WebCore::IOSApplication *)-[__CFURL BOOLForKey:](v4, "BOOLForKey:", CFSTR("WebKitLogCookieInformation"));
    v34 = (char)v33;
    v35 = *((_QWORD *)this + 26);
    v36 = *(_DWORD **)(v35 + 328);
    if (v36)
      *v36 += 2;
    cf = v36;
    v37 = *(_OWORD *)(v35 + 352);
    v86 = *(_OWORD *)(v35 + 336);
    v87 = v37;
    v38 = *(WTF::StringImpl **)(v35 + 368);
    if (v38)
      *(_DWORD *)v38 += 2;
    v82 = v38;
    v39 = v35 + 368;
    v83 = *(_OWORD *)(v39 + 8);
    v84 = *(_OWORD *)(v39 + 24);
    isMobileSafari = WebCore::IOSApplication::isMobileSafari(v33);
    v41 = isMobileSafari;
    v42 = isMobileSafari | WebCore::IOSApplication::isMiniBrowser((WebCore::IOSApplication *)isMobileSafari);
    if ((v86 & 1) == 0 && v42)
    {
      MEMORY[0x19AEABCC8](v88, -[__CFURL stringForKey:](v4, "stringForKey:", 0x1E35247F8));
      MEMORY[0x19AEABB0C](v81, v88, 0);
      WTF::URL::operator=((uint64_t)&cf, (WTF::StringImpl *)v81);
      v44 = v81[0];
      v81[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v43);
        else
          *(_DWORD *)v44 -= 2;
      }
      v45 = (WTF::StringImpl *)v88[0];
      v88[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v43);
        else
          *(_DWORD *)v45 -= 2;
      }
    }
    if ((v83 & 1) != 0)
      v46 = 0;
    else
      v46 = v42;
    if (v46 == 1)
    {
      MEMORY[0x19AEABCC8](v88, -[__CFURL stringForKey:](v4, "stringForKey:", 0x1E3524818));
      MEMORY[0x19AEABB0C](v81, v88, 0);
      WTF::URL::operator=((uint64_t)&v82, (WTF::StringImpl *)v81);
      v48 = v81[0];
      v81[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = (WTF::StringImpl *)v88[0];
      v88[0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v47);
        else
          *(_DWORD *)v49 -= 2;
      }
    }
    v4 = (CFURLRef)WebKit::WebsiteDataStore::resolvedDirectories(this);
    v88[0] = 0;
    v50 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
    if (v50)
      *(_DWORD *)v50 += 2;
    v80 = v50;
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)this, (uint64_t *)&v80, v88, 1);
    v51 = *((_QWORD *)this + 26);
    v52 = *(_QWORD *)(v51 + 512);
    if (v52)
      CFRetain(*(CFTypeRef *)(v51 + 512));
    v53 = (const void *)*((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = v52;
    if (v53)
      CFRelease(v53);
    WTF::String::operator=((WTF::StringImpl **)a2 + 11, (WTF::StringImpl *)(*((_QWORD *)this + 26) + 296));
    WTF::String::operator=((WTF::StringImpl **)a2 + 12, (WTF::StringImpl *)(*((_QWORD *)this + 26) + 304));
    *((_BYTE *)a2 + 104) = v34;
    WTF::URL::operator=((uint64_t)a2 + 112, (WTF::StringImpl *)&cf);
    WTF::URL::operator=((uint64_t)a2 + 152, (WTF::StringImpl *)&v82);
    v80 = 0;
    v55 = (WTF::StringImpl *)*((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 24) = v50;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v54);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = v88[0];
    v88[0] = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a2 + 25, v56);
    *((_BYTE *)a2 + 602) = v41;
    *((_BYTE *)a2 + 605) = v7 != 0;
    *((_BYTE *)a2 + 606) = v9;
    WebCore::RegistrableDomain::RegistrableDomain(v81, (const WTF::URL *)(*((_QWORD *)this + 26) + 440));
    v58 = v81[0];
    v81[0] = 0;
    v59 = (WTF::StringImpl *)*((_QWORD *)a2 + 76);
    *((_QWORD *)a2 + 76) = v58;
    if (v59)
    {
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 != 2)
        goto LABEL_100;
      WTF::StringImpl::destroy(v59, v57);
      v59 = v81[0];
      v81[0] = 0;
      if (!v59)
        goto LABEL_101;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v57);
      else
LABEL_100:
        *(_DWORD *)v59 = v60;
    }
LABEL_101:
    v61 = (WTF::StringImpl *)*((_QWORD *)a2 + 79);
    *((_QWORD *)a2 + 79) = v16;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v57);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
    if (v62)
      *(_DWORD *)v62 += 2;
    v79 = v62;
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v79, v57);
    WebKit::WebsiteDataStore::createHandleFromResolvedPathIfPossible((uint64_t)this, (uint64_t *)v81, (const char ***)a2 + 2, 1);
    v64 = v81[0];
    v81[0] = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v63);
      else
        *(_DWORD *)v64 -= 2;
    }
    v65 = (WTF **)((char *)this + 288);
    if (!*((_DWORD *)this + 75))
    {
      WTF::String::utf8();
      if (v78)
        v66 = (const UInt8 *)v78 + 16;
      else
        v66 = 0;
      if (v78)
        v67 = *((_QWORD *)v78 + 1);
      else
        v67 = 0;
      v4 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v66, v67, 1u);
      v68 = CFHTTPCookieStorageCreateFromFile();
      v69 = (const void *)*((_QWORD *)this + 38);
      *((_QWORD *)this + 38) = v68;
      if (v69)
        CFRelease(v69);
      WebKit::identifyingDataFromCookieStorage((uint64_t)v81);
      v71 = *v65;
      if (*v65)
      {
        *((_QWORD *)this + 36) = 0;
        *((_DWORD *)this + 74) = 0;
        WTF::fastFree(v71, v70);
      }
      *((WTF::StringImpl **)this + 36) = v81[0];
      *((WTF::StringImpl **)this + 37) = v81[1];
      if (v4)
        CFRelease(v4);
      v72 = v78;
      v78 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
          WTF::fastFree(v72, v70);
        else
          --*(_DWORD *)v72;
      }
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a2, (uint64_t)this + 288);
    {
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v73 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, 0x100uLL);
    v5 = v73;
    if (v73 > 0xFFu)
      break;
LABEL_145:
    __break(1u);
LABEL_146:
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
    *(_BYTE *)(v5 + 1856) = 1;
  }
  *((_BYTE *)a2 + 392) = v73 != 0;
  v75 = v79;
  v79 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v74);
    else
      *(_DWORD *)v75 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v88);
  v77 = v82;
  v82 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v76);
    else
      *(_DWORD *)v77 -= 2;
  }
  result = (uint64_t)cf;
  cf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v76);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196C09238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::optionalExperimentalFeatureEnabled(_QWORD *a1, unint64_t a2)
{
  id v4;
  const __CFString *v5;
  const void *v6;
  unint64_t v7;

  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (*a1)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v6 = (const void *)objc_msgSend(v4, "initWithFormat:", CFSTR("WebKitExperimental%@"), v5);
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", v6))
  {
    v7 = a2 >> 8;
    if (!v6)
      return a2 | ((_DWORD)v7 << 8);
    goto LABEL_5;
  }
  LOBYTE(a2) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", v6);
  LODWORD(v7) = 1;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return a2 | ((_DWORD)v7 << 8);
}

void sub_196C095E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::identifyingDataFromCookieStorage(uint64_t a1@<X8>)
{
  const __CFData *IdentifyingData;
  char *BytePtr;
  CFIndex Length;

  IdentifyingData = (const __CFData *)CFHTTPCookieStorageCreateIdentifyingData();
  BytePtr = (char *)CFDataGetBytePtr(IdentifyingData);
  Length = CFDataGetLength(IdentifyingData);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a1, BytePtr, (WTF *)Length);
    if (IdentifyingData)
      CFRelease(IdentifyingData);
  }
}

void sub_196C09680(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::SandboxExtension::createHandleForTemporaryFile(const char **a1@<X0>, const char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const WTF::String *v6;
  char *v7;
  WTF *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  char *v15;
  char *v16;
  char v17;
  char *v18;
  char *v19;
  void *v20;
  const char **v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  const char **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char *v29;
  WTF *v30[2];
  _BYTE v31[36];
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char *__s;
  unsigned int v35;
  unsigned int v36;
  const char **v37[3];

  v37[1] = a1;
  v37[2] = a2;
  v37[0] = 0;
  v36 = 1024;
  v35 = 1024;
  __s = (char *)WTF::fastMalloc((WTF *)0x400);
  if (confstr(65537, __s, 0x400uLL))
  {
    v36 = strlen(__s);
    WTF::StringView::utf8();
    v8 = v30[0];
    if (!v30[0])
      goto LABEL_22;
    v9 = *((_QWORD *)v30[0] + 1);
    if (v9)
    {
      v10 = v36;
      v11 = v9 + v36;
      if (v11 > v35)
      {
        v12 = v35 + ((unint64_t)v35 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v11)
          v14 = (WTF *)(v9 + v36);
        else
          v14 = (WTF *)v13;
        WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&__s, v14);
        v10 = v36;
      }
      if (v11 < v10)
      {
        __break(0xC471u);
        return;
      }
      v15 = (char *)v30[0] + 16;
      v16 = &__s[v10];
      do
      {
        v17 = *v15++;
        *v16++ = v17;
        --v9;
      }
      while (v9);
      v36 = v11;
      v8 = v30[0];
      v30[0] = 0;
      if (!v8)
      {
LABEL_22:
        LOBYTE(v30[0]) = 0;
        if (v36 == v35)
        {
          v18 = (char *)WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__s, (WTF *)(v36 + 1), (unint64_t)v30);
          __s[v36] = *v18;
        }
        else
        {
          __s[v36] = 0;
        }
        ++v36;
        WTF::String::fromUTF8((uint64_t *)&v33, (WTF::String *)__s, v7);
        if (v33)
        {
          WTF::FileSystemImpl::fileSystemRepresentation((WTF::FileSystemImpl *)&v33, v6);
          if (v32)
            v19 = (char *)v32 + 16;
          else
            v19 = 0;
          v31[0] = 0;
          v31[32] = 0;
          WebKit::SandboxExtensionImpl::create((uint64_t)v19, a3, (uint64_t)v31, (uint64_t *)v30);
          v21 = v37[0];
          v37[0] = (const char **)v30[0];
          if (v21)
          {
            WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v21);
            WTF::fastFree(v22, v23);
          }
          v24 = v32;
          v32 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree(v24, v20);
            else
              --*(_DWORD *)v24;
          }
          if (v37[0])
          {
            WTF::String::fromUTF8((uint64_t *)&v32, (WTF::String *)__s, (const char *)v20);
            v25 = v37[0];
            v37[0] = 0;
            v26 = v32;
            v32 = 0;
            *(_QWORD *)a4 = v25;
            *(_QWORD *)(a4 + 8) = v26;
            *(_BYTE *)(a4 + 16) = 1;
            v30[0] = 0;
            v30[1] = 0;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v30);
            v27 = v32;
            v32 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v6);
              else
                *(_DWORD *)v27 -= 2;
            }
            goto LABEL_41;
          }
          WTFLogAlways();
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 16) = 0;
LABEL_41:
        v28 = v33;
        v33 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v6);
          else
            *(_DWORD *)v28 -= 2;
        }
        goto LABEL_45;
      }
    }
    else
    {
      v30[0] = 0;
    }
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v7);
    else
      --*(_DWORD *)v8;
    goto LABEL_22;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
LABEL_45:
  v29 = __s;
  if (__s)
  {
    __s = 0;
    v35 = 0;
    WTF::fastFree((WTF *)v29, v6);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v37);
}

void sub_196C09960(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, WTF::StringImpl *a19, WTF *a20,int a21)
{
  uint64_t v21;

  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a20)
    WTF::fastFree(a20, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v21 - 72));
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, (WTF::FastMalloc *)*(unsigned int *)(a2 + 12));
        v4 = a1[3];
      }
    }
    else
    {
      a1[3] = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, v4);
      v6 = a1[3];
    }
    else
    {
      v6 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + v6), (const void *)(*(_QWORD *)a2 + v6), *(_QWORD *)a2 + *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + v6));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, WTF::FastMalloc *a2)
{
  void *v3;
  uint64_t v5;
  void *v6;

  if ((unint64_t)a2 > WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    v6 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1, a2);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    v3 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v5, v3);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, (WTF::FastMalloc *)v6);
  }
  return 1;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(uint64_t a1)
{
  return WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity(a1);
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + a1[3];
}

unsigned int *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  unsigned int *v2;

  if (result[2] > (unint64_t)a2)
  {
    v2 = result;
    if (result[3] > (unint64_t)a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, a2);
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void *WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(const void *a1, uint64_t a2, void *a3)
{
  return WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(a1, a2, a3);
}

void *WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(const void *a1, uint64_t a2, void *a3)
{
  return memcpy(a3, a1, a2 - (_QWORD)a1);
}

unint64_t IPC::Decoder::decode<std::array<unsigned char,8ul>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

__n128 __copy_helper_block_e8_32c83_ZTSKZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void WebKit::WebLocalFrameLoaderClient::updateGlobalHistory(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE v24[192];
  CFTypeRef cf;
  _BYTE v26[138];
  char v27;
  CFTypeRef v28;
  char v29;
  IPC::Encoder *v30;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 88);
    if (v4)
      ++*(_DWORD *)(v4 + 24);
    v22 = 0;
    v23 = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v24);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v26);
    v28 = 0;
    v29 = 0;
    v27 = v27 & 0xF1 | 4;
    v5 = (WTF::StringImpl *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 872));
    WTF::String::operator=(&v22, v5);
    WTF::String::operator=(&v23, (WTF::StringImpl *)(v4 + 1608));
    WebCore::ResourceRequestBase::operator=((uint64_t)v24, v4 + 672);
    v6 = *(const void **)(v4 + 864);
    if (v6)
      CFRetain(*(CFTypeRef *)(v4 + 864));
    v7 = cf;
    cf = v6;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceResponseBase::operator=((uint64_t)v26, v4 + 1272);
    v8 = *(const void **)(v4 + 1512);
    if (v8)
      CFRetain(*(CFTypeRef *)(v4 + 1512));
    v9 = v28;
    v28 = v8;
    if (v9)
      CFRelease(v9);
    v29 = *(_BYTE *)(v4 + 1520);
    v21 = *((_OWORD *)this[2] + 5);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 56))(v3 + 32);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1900;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v30 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::encode((IPC::Encoder *)v11, (uint64_t *)&v22);
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, (uint64_t *)&v21);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 32) + 32))(v3 + 32, &v30, 0);
    v13 = v30;
    v30 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
    v16 = v28;
    v28 = 0;
    if (v16)
      CFRelease(v16);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v26, (WTF::StringImpl *)v12);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v24);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      --*(_DWORD *)(v4 + 24);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 2));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 27));
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::MimeClassInfo *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::MimeClassInfo **)a1;
    v5 = 32 * v3;
    do
    {
      WebCore::MimeClassInfo::~MimeClassInfo(v4, a2);
      v4 = (WebCore::MimeClassInfo *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::PDFPluginBase::pluginInfo(uint64_t a1@<X8>)
{
  WebCore *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14[2];
  WTF::StringImpl *v15[2];
  __int128 v16;
  WTF::StringImpl *v17[2];
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 26) = 0u;
  v3 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)a1 = v17[0];
  WebCore::pdfDocumentTypeDescription(v3);
  *(WTF::StringImpl **)(a1 + 16) = v17[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)(a1 + 8) = v17[0];
  *(_WORD *)(a1 + 40) = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)(a1 + 48) = v17[0];
  v18 = 0u;
  WTF::AtomStringImpl::add();
  v17[0] = v15[0];
  WebCore::pdfDocumentTypeDescription(0);
  v17[1] = v15[0];
  v15[0] = (WTF::StringImpl *)"pdf";
  v15[1] = (WTF::StringImpl *)4;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v18, (uint64_t *)v15);
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(a1 + 24, (unint64_t)v17);
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  WTF::AtomStringImpl::add();
  v5 = v15[0];
  v15[0] = v14[0];
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::pdfDocumentTypeDescription(v5);
  v7 = v14[0];
  v14[0] = 0;
  v8 = v15[1];
  v15[1] = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      v14[0] = 0;
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v14[0] = (WTF::StringImpl *)"pdf";
  v14[1] = (WTF::StringImpl *)4;
  v9 = HIDWORD(v16);
  if (HIDWORD(v16) == DWORD2(v16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v16, (uint64_t *)v14);
  }
  else
  {
    v13 = v16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(v13 + 8 * v9) = v19;
    ++HIDWORD(v16);
  }
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(a1 + 24, (unint64_t)v15);
  }
  else
  {
    WebCore::MimeClassInfo::MimeClassInfo((_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * v10), (uint64_t)v15);
    *(_DWORD *)(a1 + 36) = v10 + 1;
  }
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)v15, v11);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)v17, v12);
}

void sub_196C0A390(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  WebCore::PluginInfo *v4;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)va, a2);
  WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)va1, v6);
  WebCore::PluginInfo::~PluginInfo(v4, v7);
  _Unwind_Resume(a1);
}

void sub_196C0A3D4()
{
  JUMPOUT(0x196C0A3C4);
}

void WebCore::MimeClassInfo::~MimeClassInfo(WebCore::MimeClassInfo *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  WTF::String::String((uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), *a2, a2[1]);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_196C0A524(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebUserContentControllerProxy::addContentRuleList(WebKit::WebUserContentControllerProxy *this, API::ContentRuleList *a2, const WTF::URL *a3)
{
  uint64_t *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 *v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  API::ContentRuleList *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  WTF::StringImpl *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  IPC::Encoder *v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *result;
  uint64_t k;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned int *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  WTF::StringImpl *v69;
  __int128 v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unsigned int *v74;
  WTF::StringImpl *v75;
  uint64_t *v76;
  WTF::StringImpl **v77;
  uint64_t v78[2];
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86[2];
  char v87;
  IPC::Encoder *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  WTF::StringImpl *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)((char *)this + 104);
  v7 = *((_QWORD *)a2 + 2);
  CFRetain(*((CFTypeRef *)a2 + 1));
  v89 = a2;
  v77 = (WTF::StringImpl **)a3;
  v9 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v9 += 2;
  v10 = (WTF::StringImpl **)(v7 + 16);
  v90 = v9;
  v11 = *(_OWORD *)((char *)a3 + 24);
  v91 = *(_OWORD *)((char *)a3 + 8);
  v92 = v11;
  v12 = *v6;
  v76 = v6;
  if (*v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v6),
        (v12 = *v6) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*v10 + 4);
  if (v14 >= 0x100)
    v15 = v14 >> 8;
  else
    v15 = WTF::StringImpl::hashSlowCase(*v10);
  v16 = 0;
  v17 = (__int128 *)((char *)a3 + 8);
  for (i = 1; ; ++i)
  {
    v19 = v15 & v13;
    v20 = v12 + 56 * (v15 & v13);
    v21 = *(WTF **)v20;
    if (*(_QWORD *)v20 == -1)
    {
      v16 = v12 + 56 * v19;
      goto LABEL_15;
    }
    if (!v21)
      break;
    if (WTF::equal(v21, *v10, v8))
    {
      std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100]((uint64_t *)(v12 + 56 * v19 + 8), (uint64_t *)&v89);
      v25 = a2;
      goto LABEL_27;
    }
LABEL_15:
    v15 = i + v19;
  }
  if (v16)
  {
    *(_QWORD *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)v16 = 0u;
    --*(_DWORD *)(*v76 - 16);
    v20 = v16;
  }
  WTF::String::operator=((WTF::StringImpl **)v20, (WTF::StringImpl *)v10);
  std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>::operator=[abi:sn180100]((uint64_t *)(v20 + 8), (uint64_t *)&v89);
  v22 = *v76;
  v25 = a2;
  if (*v76)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v26 = *v76;
  if (*v76)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
LABEL_26:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v76);
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_26;
  }
LABEL_27:
  v30 = v90;
  v90 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v89;
  v89 = 0;
  if (v31)
    CFRelease(*((CFTypeRef *)v31 + 1));
  v32 = *((_QWORD *)v25 + 2);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v84);
  v33 = *((_QWORD *)this + 5);
  if (v33)
  {
    v34 = *(unsigned int *)(v33 - 4);
    v35 = v33 + 8 * v34;
  }
  else
  {
    v35 = 0;
    v34 = 0;
  }
  v79 = (char *)this + 40;
  v80 = v35;
  v81 = v35;
  v82 = v35;
  v83 = v33 + 8 * v34;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v79);
  for (j = v85; v85 != v80; j = v85)
  {
    v37 = *(_QWORD *)(*(_QWORD *)j + 8);
    v38 = *(WTF::StringImpl **)(v32 + 16);
    if (v38)
      *(_DWORD *)v38 += 2;
    v89 = v38;
    v39 = *(unsigned int **)(v32 + 24);
    if (v39)
    {
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
    v90 = (WTF::StringImpl *)v39;
    v41 = *(_OWORD *)(v32 + 32);
    v42 = *(_OWORD *)(v32 + 48);
    v43 = *(_OWORD *)(v32 + 80);
    v93 = *(_OWORD *)(v32 + 64);
    v94 = v43;
    v91 = v41;
    v92 = v42;
    v44 = *v77;
    if (*v77)
      *(_DWORD *)v44 += 2;
    v95 = v44;
    v45 = v17[1];
    v96 = *v17;
    v97 = v45;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v78, (uint64_t)&v89, 1uLL);
    v46 = *((_QWORD *)this + 4);
    v47 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v47 = 2804;
    *(_QWORD *)(v47 + 8) = v46;
    *(_QWORD *)(v47 + 528) = v47 + 16;
    *(_QWORD *)(v47 + 536) = v47 + 16;
    *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v47 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
    v88 = (IPC::Encoder *)v47;
    IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v47, (uint64_t)v78);
    LOBYTE(v86[0]) = 0;
    v87 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v37, &v88, 0, (uint64_t)v86, 1);
    if (v87)
    {
      v49 = v86[0];
      v86[0] = 0;
      if (v49)
        (*(void (**)(uint64_t *))(*v49 + 8))(v49);
    }
    v50 = v88;
    v88 = 0;
    if (v50)
    {
      IPC::Encoder::~Encoder(v50, v48);
      WTF::fastFree(v51, v52);
    }
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v78, (WTF::StringImpl *)v48);
    v54 = v95;
    v95 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v53);
      else
        *(_DWORD *)v54 -= 2;
    }
    v55 = (unsigned int *)v90;
    v90 = 0;
    if (v55)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v55);
    v56 = v89;
    v89 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v53);
      else
        *(_DWORD *)v56 -= 2;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v84);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v84);
  v57 = *((_QWORD *)this + 11);
  if (v57)
  {
    v58 = *(unsigned int *)(v57 - 4);
    v59 = v57 + 8 * v58;
  }
  else
  {
    v59 = 0;
    v58 = 0;
  }
  v79 = (char *)this + 88;
  v80 = v59;
  v81 = v59;
  v82 = v59;
  v83 = v57 + 8 * v58;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v79);
  for (k = v85; v85 != v80; k = v85)
  {
    v62 = *(_QWORD *)(*(_QWORD *)k + 8);
    v88 = (IPC::Encoder *)*((_QWORD *)this + 4);
    v63 = *(WTF::StringImpl **)(v32 + 16);
    if (v63)
      *(_DWORD *)v63 += 2;
    v89 = v63;
    v64 = *(unsigned int **)(v32 + 24);
    if (v64)
    {
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
    }
    v90 = (WTF::StringImpl *)v64;
    v66 = *(_OWORD *)(v32 + 32);
    v67 = *(_OWORD *)(v32 + 48);
    v68 = *(_OWORD *)(v32 + 80);
    v93 = *(_OWORD *)(v32 + 64);
    v94 = v68;
    v91 = v66;
    v92 = v67;
    v69 = *v77;
    if (*v77)
      *(_DWORD *)v69 += 2;
    v95 = v69;
    v70 = v17[1];
    v96 = *v17;
    v97 = v70;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v78, (uint64_t)&v89, 1uLL);
    v86[0] = (uint64_t *)&v88;
    v86[1] = v78;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>(v62, v86, 0, 0);
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v78, v71);
    v73 = v95;
    v95 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v72);
      else
        *(_DWORD *)v73 -= 2;
    }
    v74 = (unsigned int *)v90;
    v90 = 0;
    if (v74)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v74);
    v75 = v89;
    v89 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v72);
      else
        *(_DWORD *)v75 -= 2;
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v84);
  }
  return result;
}

void sub_196C0B334(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::FocusedElementInformation *WebKit::FocusedElementInformation::FocusedElementInformation(WebKit::FocusedElementInformation *this)
{
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_1978D0900;
  *(_OWORD *)((char *)this + 120) = xmmword_1978D0910;
  *((_BYTE *)this + 136) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_BYTE *)this + 156) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = -1;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_WORD *)this + 124) = 0;
  WTF::URL::URL((WebKit::FocusedElementInformation *)((char *)this + 256));
  *((_WORD *)this + 148) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_WORD *)this + 164) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_WORD *)this + 180) = 0;
  *((_BYTE *)this + 362) = 1;
  *(_DWORD *)((char *)this + 363) = 0;
  *(_WORD *)((char *)this + 367) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  return this;
}

void sub_196C0B458(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v7 = *(WTF::StringImpl **)(v2 + 240);
  *(_QWORD *)(v2 + 240) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v5;
  *v5 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  v10 = *v4;
  *v4 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(a1);
}

double WebKit::WKSelectionDrawingInfo::WKSelectionDrawingInfo(WebKit::WKSelectionDrawingInfo *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t *WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(WebKit::ResourceLoadStatisticsStore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  char v66;
  WTF::StringImpl *v67[2];
  char v68;
  _QWORD v69[2];
  WTF::StringImpl *v70;
  uint64_t v71;
  char v72;
  WTF::StringImpl *v73[2];
  char v74;
  _QWORD v75[2];
  WTF::StringImpl *v76;
  uint64_t v77;
  char v78;
  WTF::StringImpl *v79[2];
  char v80;
  _QWORD v81[2];
  WTF::StringImpl *v82;
  uint64_t v83;
  char v84;
  WTF::StringImpl *v85[2];
  char v86;
  _QWORD v87[2];
  WTF::StringImpl *v88;
  uint64_t v89;
  char v90;
  WTF::StringImpl *v91[2];
  char v92;
  _QWORD v93[2];
  WTF::StringImpl *v94;
  uint64_t v95;
  char v96;
  WTF::StringImpl *v97[2];
  char v98;
  _QWORD v99[2];
  WTF::StringImpl *v100;
  uint64_t v101;
  char v102;
  WTF::StringImpl *v103[2];
  char v104;
  _QWORD v105[2];
  WTF::StringImpl *v106;
  uint64_t v107;
  char v108;
  WTF::StringImpl *v109[2];
  char v110;
  _QWORD v111[2];
  WTF::StringImpl *v112;
  uint64_t v113;
  char v114;
  WTF::StringImpl *v115[2];
  char v116;
  _QWORD v117[2];
  WTF::StringImpl *v118;
  uint64_t v119;
  char v120;
  WTF::StringImpl *v121[2];
  char v122;
  _QWORD v123[2];
  WTF::StringImpl *v124;
  uint64_t v125;
  char v126;
  WTF::StringImpl *v127[2];
  char v128;
  _QWORD v129[2];
  _BYTE v130[16];
  WTF::StringImpl *v131;
  char v132;
  char v133;
  _QWORD v134[2];
  _BYTE v135[16];
  WTF::StringImpl *v136;
  char v137;
  char v138;
  _QWORD v139[2];
  WTF::StringImpl *v140;
  uint64_t v141;
  int v142;
  char v143;
  WTF::StringImpl *v144[4];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[5];

  v156[4] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_67 & 1) == 0)
  {
    v139[0] = "ObservedDomains";
    v139[1] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v135[0] = 0;
    v135[8] = 0;
    v136 = v144[0];
    v137 = 0;
    v138 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v144, (uint64_t)v139, (uint64_t *)&v136);
    v134[0] = "TopLevelDomains";
    v134[1] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v130[0] = 0;
    v130[8] = 0;
    v131 = v140;
    v132 = 0;
    v133 = 0;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v145, (uint64_t)v134, (uint64_t *)&v131);
    v129[0] = "StorageAccessUnderTopFrameDomains";
    v129[1] = 34;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS StorageAccessUnderTopFrameDomains_domainID_topLevelDomainID on StorageAccessUnderTopFrameDomains(domainID, topLevelDomainID)", &v124);
    v3 = v124;
    v124 = 0;
    v126 = 1;
    v125 = 0;
    v127[0] = v2;
    v127[1] = v3;
    v128 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v146, (uint64_t)v129, (uint64_t *)v127);
    v123[0] = "TopFrameUniqueRedirectsTo";
    v123[1] = 26;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsTo_sourceDomainID_toDomainID on TopFrameUniqueRedirectsTo(sourceDomainID, toDomainID)", &v118);
    v5 = v118;
    v118 = 0;
    v120 = 1;
    v119 = 0;
    v121[0] = v4;
    v121[1] = v5;
    v122 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v147, (uint64_t)v123, (uint64_t *)v121);
    v117[0] = "TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement";
    v117[1] = 56;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement_sourceDomainID_toDomainID on TopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement(sourceDomainID, toDomainID)", &v112);
    v7 = v112;
    v112 = 0;
    v114 = 1;
    v113 = 0;
    v115[0] = v6;
    v115[1] = v7;
    v116 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v148, (uint64_t)v117, (uint64_t *)v115);
    v111[0] = "TopFrameUniqueRedirectsFrom";
    v111[1] = 28;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameUniqueRedirectsFrom_targetDomainID_fromDomainID on TopFrameUniqueRedirectsFrom(targetDomainID, fromDomainID)", &v106);
    v9 = v106;
    v106 = 0;
    v107 = 0;
    v108 = 1;
    v109[0] = v8;
    v109[1] = v9;
    v110 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v149, (uint64_t)v111, (uint64_t *)v109);
    v105[0] = "TopFrameLinkDecorationsFrom";
    v105[1] = 28;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameLinkDecorationsFrom_toDomainID_fromDomainID on TopFrameLinkDecorationsFrom(toDomainID, fromDomainID)", &v100);
    v11 = v100;
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103[0] = v10;
    v103[1] = v11;
    v104 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v150, (uint64_t)v105, (uint64_t *)v103);
    v99[0] = "TopFrameLoadedThirdPartyScripts";
    v99[1] = 32;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS TopFrameLoadedThirdPartyScripts_topFrameDomainID_subresourceDomainID on TopFrameLoadedThirdPartyScripts(topFrameDomainID, subresourceDomainID)", &v94);
    v13 = v94;
    v94 = 0;
    v95 = 0;
    v96 = 1;
    v97[0] = v12;
    v97[1] = v13;
    v98 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v151, (uint64_t)v99, (uint64_t *)v97);
    v93[0] = "SubframeUnderTopFrameDomains";
    v93[1] = 29;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubframeUnderTopFrameDomains_subFrameDomainID_topFrameDomainID on SubframeUnderTopFrameDomains(subFrameDomainID, topFrameDomainID)", &v88);
    v15 = v88;
    v88 = 0;
    v89 = 0;
    v90 = 1;
    v91[0] = v14;
    v91[1] = v15;
    v92 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v152, (uint64_t)v93, (uint64_t *)v91);
    v87[0] = "SubresourceUnderTopFrameDomains";
    v87[1] = 32;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUnderTopFrameDomains_subresourceDomainID_topFrameDomainID on SubresourceUnderTopFrameDomains(subresourceDomainID, topFrameDomainID)", &v82);
    v17 = v82;
    v82 = 0;
    v83 = 0;
    v84 = 1;
    v85[0] = v16;
    v85[1] = v17;
    v86 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v153, (uint64_t)v87, (uint64_t *)v85);
    v81[0] = "SubresourceUniqueRedirectsTo";
    v81[1] = 29;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUniqueRedirectsTo_subresourceDomainID_toDomainID on SubresourceUniqueRedirectsTo(subresourceDomainID, toDomainID)", &v76);
    v19 = v76;
    v76 = 0;
    v77 = 0;
    v78 = 1;
    v79[0] = v18;
    v79[1] = v19;
    v80 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v154, (uint64_t)v81, (uint64_t *)v79);
    v75[0] = "SubresourceUniqueRedirectsFrom";
    v75[1] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS SubresourceUniqueRedirectsFrom_subresourceDomainID_fromDomainID on SubresourceUniqueRedirectsFrom(subresourceDomainID, fromDomainID)", &v70);
    v21 = v70;
    v70 = 0;
    v71 = 0;
    v72 = 1;
    v73[0] = v20;
    v73[1] = v21;
    v74 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)&v155, (uint64_t)v75, (uint64_t *)v73);
    v69[0] = "OperatingDates";
    v69[1] = 15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = v140;
    WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue("CREATE UNIQUE INDEX IF NOT EXISTS OperatingDates_year_month_monthDay on OperatingDates(year, month, monthDay)", &v64);
    v23 = v64;
    v64 = 0;
    v65 = 0;
    v66 = 1;
    v67[0] = v22;
    v67[1] = v23;
    v68 = 1;
    WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>((uint64_t)v156, (uint64_t)v69, (uint64_t *)v67);
    WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(&v140, v144, 13);
    v25 = (uint64_t)v140;
    v140 = 0;
    qword_1ECE72978 = v25;
    v26 = v141;
    v141 = 0;
    qword_1ECE72980 = v26;
    LODWORD(v25) = v142;
    v142 = 0;
    dword_1ECE72988 = v25;
    byte_1ECE7298C = v143;
    v27 = 48;
    v143 = 0;
    do
    {
      WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair(&v144[v27], v24);
      v27 -= 4;
    }
    while (v27 != -4);
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v67, v24);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v28);
    v30 = v64;
    v64 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v73, v29);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v71, v31);
    v33 = v70;
    v70 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v79, v32);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v77, v34);
    v36 = v76;
    v76 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v85, v35);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v37);
    v39 = v82;
    v82 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v38);
      else
        *(_DWORD *)v39 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v91, v38);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v89, v40);
    v42 = v88;
    v88 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v97, v41);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v43);
    v45 = v94;
    v94 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v44);
      else
        *(_DWORD *)v45 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v103, v44);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v101, v46);
    v48 = v100;
    v100 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v109, v47);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v107, v49);
    v51 = v106;
    v106 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v115, v50);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v52);
    v54 = v112;
    v112 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v53);
      else
        *(_DWORD *)v54 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v121, v53);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v119, v55);
    v57 = v118;
    v118 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v56);
      else
        *(_DWORD *)v57 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(v127, v56);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v125, v58);
    v60 = v124;
    v124 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v59);
      else
        *(_DWORD *)v60 -= 2;
    }
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(&v131, v59);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v130, v61);
    std::pair<WTF::String,std::optional<WTF::String>>::~pair(&v136, v62);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v135, v63);
    _MergedGlobals_67 = 1;
  }
  return &qword_1ECE72978;
}

void sub_196C0BDC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::PageLoadState::activeURL@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  if (v3 || (v3 = (_DWORD *)*((_QWORD *)this + 9)) != 0 && v3[1])
  {
LABEL_9:
    *v3 += 2;
    goto LABEL_10;
  }
  if (*this - 1 < 2)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 4);
    if (!v3)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*this)
  {
    v3 = 0;
    goto LABEL_10;
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  if (v3)
    goto LABEL_9;
LABEL_10:
  *a2 = v3;
  return this;
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this)
{
  _QWORD v3[6];

  v3[5] = this;
  WTF::URL::URL((WTF::URL *)v3);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)this, (const WTF::URL *)v3, 0);
  WTF::URL::~URL((WTF::URL *)v3);
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable((_QWORD *)this + 24);
  return this;
}

{
  WebCore::ResourceRequest::ResourceRequest(this);
  return this;
}

uint64_t WebCore::ResourceRequestBase::ResourceRequestBase(uint64_t a1, const WTF::URL *a2, char a3)
{
  WTF *v4;
  const WTF::String *v5;

  WebCore::ResourceRequestBase::RequestData::RequestData(a1, a2, a3);
  v4 = (WTF *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((_QWORD *)(a1 + 152));
  v5 = (const WTF::String *)WTF::emptyString(v4);
  WTF::String::String((WTF::String *)(a1 + 160), v5);
  *(_QWORD *)(a1 + 168) = 0;
  std::optional<int>::optional[abi:sn180100]((_BYTE *)(a1 + 176));
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 184) & 0xFE | 1;
  *(_BYTE *)(a1 + 184) &= ~2u;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 184) & 0xFB | 4;
  *(_BYTE *)(a1 + 184) &= ~8u;
  *(_BYTE *)(a1 + 184) &= ~0x10u;
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a1 + 148) & 0xFD | 2;
  return a1;
}

_BYTE *std::__optional_move_assign_base<int,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<int,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<int,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<int,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<int,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<int,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<int,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<int,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<int,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<int,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

uint64_t WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, const WTF::URL *a2, char a3)
{
  WebCore::ResourceRequestBase::RequestData::RequestData(a1, a2, a3);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  WTF::URL::URL((WTF::URL *)a1, a2);
  WTF::URL::URL((WTF::URL *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = *MEMORY[0x1E0DD1D20];
  v4 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"GET", (const char *)3);
  WTF::String::String((uint64_t *)(a1 + 88), v4, v5);
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 96));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 128);
  *(_BYTE *)(a1 + 144) = a3;
  *(_BYTE *)(a1 + 145) = 0;
  *(_BYTE *)(a1 + 146) = 1;
  *(_BYTE *)(a1 + 147) = 0;
  *(_BYTE *)(a1 + 148) &= ~1u;
  *(_BYTE *)(a1 + 148) &= ~2u;
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a1 + 148) & 0xFB | 4;
  *(_BYTE *)(a1 + 148) &= ~8u;
  *(_BYTE *)(a1 + 148) &= ~0x10u;
  *(_BYTE *)(a1 + 148) &= ~0x20u;
  *(_BYTE *)(a1 + 148) &= ~0x40u;
  return a1;
}

uint64_t *WTF::String::String(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return WTF::String::String(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8[2];
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = a3;
  v8[1] = (uint64_t)a1;
  v10 = a1;
  v7 = 0;
  if (WTF::ASCIILiteral::isNull((WTF::ASCIILiteral *)&v9))
  {
    v12 = a1;
    v11 = 0;
    v18 = a1;
    v17 = 0;
    *a1 = 0;
  }
  else
  {
    v16 = v8;
    v15 = v9;
    v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)&v15);
    v14 = v5;
    v13 = v4;
    WTF::StringImpl::createWithoutCopying(v4, v5, v8);
    v7 = 1;
    WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, v8);
  }
  if ((v7 & 1) != 0)
    WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(v8);
  return v10;
}

uint64_t WTF::ASCIILiteral::length(WTF::ASCIILiteral *this)
{
  if (std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)this))
    return 0;
  else
    return std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)this) - 1;
}

BOOL WTF::ASCIILiteral::isNull(WTF::ASCIILiteral *this)
{
  return std::span<char const,18446744073709551615ul>::empty[abi:sn180100]((uint64_t)this);
}

uint64_t WTF::bitwise_cast<unsigned char const*,char const*>(uint64_t a1)
{
  uint64_t v2;
  uint64_t __src;

  __src = a1;
  memcpy(&v2, &__src, sizeof(v2));
  return v2;
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1)
{
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1);
  return a1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1)
{
  WTF::VectorBuffer<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::FastMalloc>::VectorBuffer(a1);
  return a1;
}

uint64_t WTF::StringLiterals::operator"" _s(WTF::ASCIILiteral *a1, const char *a2)
{
  return WTF::ASCIILiteral::fromLiteralUnsafe(a1, a2);
}

uint64_t WTF::VectorBuffer<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1)
{
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  return a1;
}

uint64_t WTF::ASCIILiteral::fromLiteralUnsafe(WTF::ASCIILiteral *this, const char *a2)
{
  uint64_t v3;

  WTF::ASCIILiteral::ASCIILiteral((WTF::ASCIILiteral *)&v3, (const char *)this);
  return v3;
}

WTF::ASCIILiteral *WTF::ASCIILiteral::ASCIILiteral(WTF::ASCIILiteral *this, const char *a2)
{
  WTF::ASCIILiteral::ASCIILiteral(this, a2);
  return this;
}

{
  size_t v4;

  v4 = std::char_traits<char>::length[abi:sn180100](a2);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(this, (uint64_t)a2, v4 + 1);
  return this;
}

uint64_t WTF::emptyString(WTF *this)
{
  return MEMORY[0x1E0CBF738];
}

void sub_196C0C668(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::URL *WTF::URL::URL(WTF::URL *this)
{
  WTF::URL::URL(this);
  return this;
}

{
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(this);
  WTF::URL::invalidate(this);
  return this;
}

_QWORD *WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(_QWORD *a1)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>::WeakPtrFactory(a1);
  return a1;
}

_QWORD *WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>::WeakPtrFactory(_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(_QWORD *a1)
{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  return a1;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(_QWORD *result)
{
  *result = 0;
  return result;
}

WTF::StringImpl **std::pair<WTF::String,std::optional<WTF::String>>::~pair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1), a2);
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::KeyValuePair<WTF::ASCIILiteral,std::pair<WTF::String,std::optional<WTF::String>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v10;
    }
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a3 + 16))
  {
    v8 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::DatabaseUtilities::stripIndexQueryToMatchStoredValue@<X0>(const char *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WTF::String::String((WTF::String *)&v6, a1);
  result = v6;
  if (v6)
  {
    WTF::StringImpl::replace();
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WTF::Persistence::Coder<WebKit::NetworkCache::Key>::decodeForPersistence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  _OWORD v21[2];
  _BYTE v22[19];
  char v23;
  _BYTE v24[19];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  LOBYTE(v19) = 0;
  v20 = 0;
  result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v19);
  if (v20)
  {
    v5 = v19;
    v19 = 0;
    LOBYTE(v17) = 0;
    v18 = 0;
    result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v17);
    if (v18)
    {
      v7 = v17;
      v17 = 0;
      LOBYTE(v15) = 0;
      v16 = 0;
      result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v15);
      if (v16)
      {
        v8 = v15;
        v15 = 0;
        LOBYTE(v13) = 0;
        v14 = 0;
        result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v13);
        if (v14)
        {
          v9 = v13;
          v13 = 0;
          result = (WTF::StringImpl *)WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence();
          v10 = v23;
          *(_OWORD *)v22 = *(_OWORD *)v24;
          *(_DWORD *)&v22[15] = *(_DWORD *)&v24[15];
          if (v25)
          {
            result = (WTF::StringImpl *)WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence();
            v11 = v23;
            v21[0] = *(_OWORD *)v24;
            *(_DWORD *)((char *)v21 + 15) = *(_DWORD *)&v24[15];
            v12 = v25;
            if (v25)
            {
              *(_OWORD *)(a2 + 53) = v21[0];
              *(_DWORD *)(a2 + 68) = *(_DWORD *)((char *)v21 + 15);
              *(_QWORD *)a2 = v5;
              *(_QWORD *)(a2 + 8) = v7;
              *(_QWORD *)(a2 + 16) = v8;
              *(_QWORD *)(a2 + 24) = v9;
              *(_BYTE *)(a2 + 32) = v10;
              *(_OWORD *)(a2 + 33) = *(_OWORD *)v22;
              v12 = 1;
              *(_DWORD *)(a2 + 48) = *(_DWORD *)&v22[15];
              *(_BYTE *)(a2 + 52) = v11;
              v8 = 0;
              v7 = 0;
              v5 = 0;
              v9 = 0;
            }
            else
            {
              *(_BYTE *)a2 = 0;
            }
            *(_BYTE *)(a2 + 72) = v12;
          }
          else
          {
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 72) = 0;
          }
          if (v14)
          {
            result = v13;
            v13 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
        else
        {
          v9 = 0;
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 72) = 0;
        }
        if (v16)
        {
          result = v15;
          v15 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 72) = 0;
      }
      if (v18)
      {
        result = v17;
        v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      v9 = 0;
      v7 = 0;
      v8 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (v20)
    {
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  WTF::Persistence::Coder<WTF::String>::decodeForPersistence();
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a2, (uint64_t)&v7);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::HashMap(_QWORD *a1, WTF::StringImpl **a2, uint64_t a3)
{
  WTF::StringImpl **v6;
  _BYTE v8[24];

  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)((char *)a1 + 13) = 0;
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity((uint64_t)a1, a3);
  if (a3)
  {
    v6 = &a2[4 * a3];
    do
    {
      WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<std::pair<WTF::String,std::optional<WTF::String>> const&>((uint64_t)a1, a2, (uint64_t)(a2 + 1), (uint64_t)v8);
      a2 += 4;
    }
    while (a2 != v6);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<std::pair<WTF::String,std::optional<WTF::String>> const&>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _BYTE *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46[2];
  uint64_t v47;
  char v48;

  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (20 * v7 >= 19 * (unint64_t)v8 || (v8 <= 2 * (int)v7 ? (v9 = *(_BYTE *)(a1 + 20) == 0) : (v9 = 1), !v9))
  {
    if (v8)
      v26 = 2 * v8;
    else
      v26 = 8;
    v27 = a3;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v26);
    a3 = v27;
    v8 = *(_DWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *((_DWORD *)*a2 + 4);
  if (v12 >= 0x100)
  {
    v15 = v12 >> 8;
  }
  else
  {
    v13 = a3;
    v14 = WTF::StringImpl::hashSlowCase(*a2);
    a3 = v13;
    v15 = v14;
  }
  v16 = (v15 ^ v11) & v10;
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD *)a1 + 32 * v16;
  v19 = *(WTF **)v18;
  if (*(_QWORD *)v18)
  {
    v23 = 0;
    v45 = (WTF::StringImpl *)a3;
    while (1)
    {
      v24 = *((_DWORD *)v19 + 4);
      if (v24 >= 0x100)
      {
        v25 = v24 >> 8;
      }
      else
      {
        v43 = v23;
        v25 = WTF::StringImpl::hashSlowCase(v19);
        v23 = v43;
      }
      if (v23 > (((_DWORD)v16 + v8 - ((v25 ^ v11) & v10)) & v10))
        break;
      a3 = (uint64_t)v45;
      if (v25 == v15)
      {
        v44 = v23;
        result = WTF::equal(*(WTF **)v18, *a2, v45);
        v17 = *(_QWORD *)a1;
        if ((result & 1) != 0)
        {
          v21 = 0;
          goto LABEL_12;
        }
        a3 = (uint64_t)v45;
        v23 = v44;
      }
      else
      {
        v17 = *(_QWORD *)a1;
      }
      v16 = ((_DWORD)v16 + 1) & v10;
      ++v23;
      v18 = v17 + 32 * v16;
      v19 = *(WTF **)v18;
      if (!*(_QWORD *)v18)
      {
        if (v23 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        goto LABEL_10;
      }
    }
    v28 = (v16 + v8 - ((v25 ^ v11) & v10)) & v10;
    if (v23 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v29 = *(WTF::StringImpl **)v18;
    *(_QWORD *)v18 = 0;
    v46[0] = v29;
    v30 = v17 + 32 * v16;
    v31 = *(WTF::StringImpl **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = 0;
    v46[1] = v31;
    LOBYTE(v47) = 0;
    v48 = 0;
    v32 = (_BYTE *)(v30 + 24);
    if (*(_BYTE *)(v30 + 24))
    {
      v33 = *(_QWORD *)(v30 + 16);
      *(_QWORD *)(v30 + 16) = 0;
      v47 = v33;
      v48 = 1;
    }
    v34 = WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair((WTF::StringImpl **)v18, (WTF::StringImpl *)a2);
    *v32 = 0;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>(v34, (WTF::StringImpl *)a2, (uint64_t)v45);
    v35 = ((_DWORD)v16 + 1) & v10;
    v36 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v35);
    v37 = *v36;
    if (*v36)
    {
      v38 = v28;
      do
      {
        v39 = *((_DWORD *)v37 + 4);
        if (v39 >= 0x100)
          v40 = v39 >> 8;
        else
          v40 = WTF::StringImpl::hashSlowCase(v37);
        ++v38;
        v41 = (v35 + v8 - ((v40 ^ v11) & v10)) & v10;
        if (v38 > v41)
        {
          std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>((uint64_t)v46, v36);
          v38 = v41;
        }
        v35 = ((_DWORD)v35 + 1) & v10;
        v36 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v35);
        v37 = *v36;
      }
      while (*v36);
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(v36, (uint64_t)v46);
    result = (uint64_t)WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>::~KeyValuePair(v46, v42);
  }
  else
  {
LABEL_10:
    result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>((WTF::StringImpl **)v18, (WTF::StringImpl *)a2, a3);
  }
  ++*(_DWORD *)(a1 + 12);
  v17 = *(_QWORD *)a1;
  v21 = 1;
LABEL_12:
  v22 = v17 + 32 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = v21;
  return result;
}

WTF::StringImpl **WTF::HashMapTranslator<WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::String const&,std::pair<WTF::String,std::optional<WTF::String>> const&>(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::String::operator=(a1, a2);
  WTF::String::operator=(a1 + 1, (WTF::StringImpl *)a3);
  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>(a1 + 2, (WTF::StringImpl *)(a3 + 8));
}

unint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  WTF *Table;
  unint64_t result;

  v3 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  Table = (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(v4);
  *(_QWORD *)a1 = Table;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  result = WTF::IntHash<unsigned long>::hash(Table);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WTF::fastMalloc((WTF *)(32 * a1));
  if (a1)
  {
    v3 = a1;
    v4 = result;
    do
    {
      *(_BYTE *)(v4 + 24) = 0;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 16) = 0;
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = ((v2 | HIWORD(v2)) + 1) << (20 * (unint64_t)a1 >= 19 * (unint64_t)((v2 | HIWORD(v2)) + 1));
  v4 = v3 << ((double)v3 * 0.754166667 <= (double)a1);
  if (v4 <= 8)
    return 8;
  else
    return v4;
}

_QWORD *__copy_helper_block_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(_QWORD *result, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 32);
  result[4] = v2;
  if (v2)
    return v2;
  return result;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)

}

uint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)a2);
  v5 = a1[2];
  v6 = *a1 + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 8);
      a1[2] = v11;
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordScale(WTF::ApproximateTime *this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  WebKit::RemoteImageBufferProxy *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  unsigned int v44;
  WTF *v45;
  void *v46;
  int v47;
  int v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  _BYTE *v52;
  int *v53;
  WebKit::RemoteImageBufferProxy *v54;
  IPC::StreamClientConnection *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  _BYTE buf[24];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v53 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (v2)
  {
    v3 = this;
    this = *(WTF::ApproximateTime **)(v2 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v55);
      if (v55)
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
        if (v4)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v54);
          v4 = (unsigned __int8 *)v54;
          if (v54)
            v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v54);
        }
        else
        {
          v54 = 0;
        }
        v5 = v55;
        v6 = *((_QWORD *)v3 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
        v8 = v7 + 15.0;
        if (*((_QWORD *)v5 + 6) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v56, v8);
            if (!v58)
            {
              v47 = 15;
              goto LABEL_73;
            }
            *(_QWORD *)buf = v56;
            *(_QWORD *)&buf[8] = v57;
            *(_QWORD *)&buf[16] = 0;
            v9 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v10 = v9 >= v56;
            v11 = v9 - v56;
            if (v10)
            {
              if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v57)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v56 + v11) = 847;
                *(_QWORD *)&buf[16] = v11 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v53);
            if (*(_QWORD *)&buf[8])
            {
              v15 = *(_QWORD *)&buf[16];
              v16 = *((_QWORD *)v5 + 8);
              v17 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v18 = *((_QWORD *)v5 + 7);
              if (v17 + 16 >= v18)
                v17 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v15 = 16;
              v19 = v17 + v15;
              if (v18 <= v19)
                v19 = 0;
              *((_QWORD *)v5 + 9) = v19;
              v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v19, v20));
              v22 = *((_DWORD *)v5 + 27);
              if (v21 == 0x80000000 || v22 != 0)
              {
                v27 = v22 + 1;
                *((_DWORD *)v5 + 27) = v27;
                if (v27 >= *((_DWORD *)v5 + 26))
                {
                  if (*((_BYTE *)v5 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
                  *((_DWORD *)v5 + 27) = 0;
                }
              }
              goto LABEL_29;
            }
            v28 = v58;
            if (v58)
              break;
            __break(1u);
LABEL_84:
            v32 = 0;
            v31 = v14;
LABEL_45:
            v33 = (v28 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v33 >= v28 + v32)
            {
              v34 = v33 - v28;
              v35 = 17;
              if (v34 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_82;
              v32 = v34 + 8;
              if (v34 + 8 > v31)
                goto LABEL_82;
              *(_QWORD *)(v28 + v34) = v6;
            }
            if (!v31)
            {
              v35 = 17;
              goto LABEL_82;
            }
            v36 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v37 = *((_QWORD *)v5 + 7);
            if (v36 + 16 >= v37)
              v36 = 0;
            if (v32 <= 0x10)
              v32 = 16;
            v38 = v36 + v32;
            if (v37 <= v38)
              v39 = 0;
            else
              v39 = v38;
            *((_QWORD *)v5 + 9) = v39;
            v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v39, v40));
            v42 = *((_DWORD *)v5 + 27);
            if (v41 == 0x80000000 || v42 != 0)
            {
              v44 = v42 + 1;
              *((_DWORD *)v5 + 27) = v44;
              if (v44 >= *((_DWORD *)v5 + 26))
              {
                if (*((_BYTE *)v5 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
                *((_DWORD *)v5 + 27) = 0;
              }
            }
            *((_QWORD *)v5 + 6) = v6;
          }
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v56, v57);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
          v48 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Scale>(*(uint64_t *)buf, &v53, v6);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
          v47 = v48;
          if (!v48)
            goto LABEL_29;
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
          if (buf[16])
          {
            v28 = *(_QWORD *)buf;
            v14 = *(_QWORD *)&buf[8];
            v29 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v30 = v29 - *(_QWORD *)buf;
            if (v29 < *(_QWORD *)buf)
              goto LABEL_84;
            v31 = 0;
            if (v30 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v32 = 0;
            }
            else
            {
              v32 = 0;
              if (v30 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v30) = 2822;
                v31 = v14;
                v32 = v30 + 2;
              }
            }
            goto LABEL_45;
          }
          v35 = 15;
LABEL_82:
          v47 = v35;
        }
LABEL_73:
        v49 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v50 = IPC::errorAsString(v47);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Scale";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v50;
          _os_log_impl(&dword_196BCC000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v51 = *((_QWORD *)v3 + 481);
        if (v51)
        {
          v52 = *(_BYTE **)(v51 + 8);
          if (v52)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
        }
LABEL_29:
        v24 = v54;
        v54 = 0;
        if (v24)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v24 + 1, v13);
        this = v55;
        v55 = 0;
        if (this)
        {
          do
          {
            v25 = __ldaxr((unsigned int *)this);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, (unsigned int *)this));
          if (!v26)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v45, v46);
          }
        }
      }
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordSetState(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::GraphicsContextState *a2)
{
  void *v3;
  uint64_t v4;
  WebKit::RemoteRenderingBackendProxy *v5;
  WTF::ApproximateTime *v6;
  IPC::StreamClientConnection *v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  int v71;
  IPC::Encoder *v72;
  WTF *v73;
  void *v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  WebKit::RemoteImageBufferProxy *v80;
  IPC::StreamClientConnection *v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  uint8_t v86[344];
  _BYTE buf[24];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEAC958](v86, a2);
  v4 = *((_QWORD *)this + 481);
  if (!v4)
    goto LABEL_42;
  v5 = *(WebKit::RemoteRenderingBackendProxy **)(v4 + 8);
  if (!v5)
    goto LABEL_42;
  WebKit::RemoteRenderingBackendProxy::connection(v5, (unsigned int **)&v81);
  if (!v81)
    goto LABEL_42;
  v6 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v6)
    goto LABEL_115;
  v80 = 0;
  while (1)
  {
    v7 = v81;
    v8 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v6);
    v10 = v9 + 15.0;
    if (*((_QWORD *)v7 + 6) == v8)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 56, buf, v9 + 15.0);
    if (!buf[16])
    {
      v47 = 15;
      goto LABEL_118;
    }
    v36 = *(_QWORD *)buf;
    v37 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = v38 - *(_QWORD *)buf;
    v40 = v38 >= *(_QWORD *)buf;
    v41 = v38 - *(_QWORD *)buf + 2;
    v43 = v39 < 0xFFFFFFFFFFFFFFFELL && v41 <= *(_QWORD *)&buf[8];
    if (v40 && v43)
      goto LABEL_64;
    if (!v40)
    {
      v41 = 0;
      goto LABEL_65;
    }
    v44 = 0;
    if (v39 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v41 = 0;
      goto LABEL_66;
    }
    v41 = 0;
    if (v39 + 2 <= *(_QWORD *)&buf[8])
    {
      v41 = v39 + 2;
LABEL_64:
      *(_WORD *)(*(_QWORD *)buf + v39) = 2822;
LABEL_65:
      v44 = v37;
    }
LABEL_66:
    v45 = (v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v45 >= v36 + v41)
    {
      v46 = v45 - v36;
      v47 = 17;
      if (v46 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_118;
      v41 = v46 + 8;
      if (v46 + 8 > v44)
        goto LABEL_118;
      *(_QWORD *)(v36 + v46) = v8;
    }
    if (!v44)
    {
      v47 = 17;
LABEL_118:
      v71 = v47;
LABEL_108:
      v75 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v76 = IPC::errorAsString(v71);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetState";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v76;
        _os_log_impl(&dword_196BCC000, v75, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v77 = *((_QWORD *)this + 481);
      if (v77)
      {
        v78 = *(_BYTE **)(v77 + 8);
        if (v78)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v78);
      }
      goto LABEL_29;
    }
    v48 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = *((_QWORD *)v7 + 7);
    if (v48 + 16 >= v49)
      v48 = 0;
    if (v41 <= 0x10)
      v41 = 16;
    v50 = v48 + v41;
    if (v49 <= v50)
      v51 = 0;
    else
      v51 = v50;
    *((_QWORD *)v7 + 9) = v51;
    v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v51, v52));
    v54 = *((_DWORD *)v7 + 27);
    if (v53 == 0x80000000 || v54 != 0)
    {
      v56 = v54 + 1;
      *((_DWORD *)v7 + 27) = v56;
      if (v56 >= *((_DWORD *)v7 + 26))
      {
        if (*((_BYTE *)v7 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v7 + 21));
        *((_DWORD *)v7 + 27) = 0;
      }
    }
    *((_QWORD *)v7 + 6) = v8;
LABEL_7:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 56, &v83, v10);
    if (!v85)
    {
      v71 = 15;
      goto LABEL_108;
    }
    *(_QWORD *)buf = v83;
    *(_QWORD *)&buf[8] = v84;
    *(_QWORD *)&buf[16] = 0;
    v11 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = v11 >= v83;
    v13 = v11 - v83;
    if (v12)
    {
      if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v84)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v83 + v13) = 857;
        *(_QWORD *)&buf[16] = v13 + 2;
      }
    }
    v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode((uint64_t *)buf, (uint64_t)v86);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v7 + 8);
      v17 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v7 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v19 = 0;
      *((_QWORD *)v7 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      v22 = *((_DWORD *)v7 + 27);
      if (v21 == 0x80000000 || v22 != 0)
      {
        v35 = v22 + 1;
        *((_DWORD *)v7 + 27) = v35;
        if (v35 >= *((_DWORD *)v7 + 26))
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v7 + 21));
          *((_DWORD *)v7 + 27) = 0;
        }
      }
      goto LABEL_29;
    }
    v79 = v8;
    if (v85)
      break;
    __break(1u);
LABEL_115:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v6, *((_QWORD *)this + 480), &v80);
    v6 = v80;
    if (v80)
      v6 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v80);
  }
  v60 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v61 = v60 - v83;
  if (v60 < v83)
  {
    v62 = 0;
  }
  else
  {
    v62 = 0;
    if (v61 <= 0xFFFFFFFFFFFFFFFDLL && v61 + 2 <= v84)
    {
      *(_WORD *)(v83 + v61) = 2821;
      v62 = v61 + 2;
    }
  }
  v63 = *((_QWORD *)v7 + 8);
  v64 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *((_QWORD *)v7 + 7);
  if (v64 + 16 >= v65)
    v64 = 0;
  if (v62 <= 0x10)
    v62 = 16;
  v66 = v64 + v62;
  if (v65 <= v66)
    v66 = 0;
  *((_QWORD *)v7 + 9) = v66;
  v67 = (unint64_t *)(*(_QWORD *)(v63 + 16) + 128);
  do
    __ldaxr(v67);
  while (__stlxr(v66, v67));
  *((_DWORD *)v7 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)v7 + 1);
  v68 = v82;
  v69 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v69 = 857;
  *(_QWORD *)(v69 + 8) = v79;
  *(_QWORD *)(v69 + 528) = v69 + 16;
  *(_QWORD *)(v69 + 536) = v69 + 16;
  *(_OWORD *)(v69 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v69 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v69);
  *(_QWORD *)buf = v69;
  IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode((IPC::Encoder *)v69, (uint64_t)v86);
  v71 = IPC::Connection::sendMessageImpl((uint64_t)v68, (uint64_t *)buf, 1, 0);
  v72 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v72)
  {
    IPC::Encoder::~Encoder(v72, v70);
    WTF::fastFree(v73, v74);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
  if (v71)
    goto LABEL_108;
LABEL_29:
  v24 = v80;
  v80 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
      goto LABEL_32;
    }
    if (__stxr(1u, (unsigned __int8 *)v25))
LABEL_32:
      MEMORY[0x19AEABB3C](v25);
    v27 = *(_QWORD *)(v25 + 8);
    v28 = v27 - 1;
    *(_QWORD *)(v25 + 8) = v27 - 1;
    if (v27 == 1)
    {
      v59 = *(_QWORD *)(v25 + 16);
      v29 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v25 + 24) = 0;
      v30 = v59 != 0;
    }
    else
    {
      v29 = 0;
      v30 = 1;
    }
    v31 = __ldxr((unsigned __int8 *)v25);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
      {
LABEL_37:
        if (!v28)
        {
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          if (!v30)
            WTF::fastFree((WTF *)v25, v3);
        }
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
    goto LABEL_37;
  }
LABEL_38:
  v32 = (unsigned int *)v81;
  v81 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v32);
      WTF::fastFree(v57, v58);
    }
  }
LABEL_42:
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v86, v3);
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordTranslate(WTF::ApproximateTime *this, float a2, float a3)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  unsigned __int8 *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  WebKit::RemoteImageBufferProxy *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  unsigned int v45;
  WTF *v46;
  void *v47;
  int v48;
  int v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  _BYTE *v53;
  int v54[2];
  WebKit::RemoteImageBufferProxy *v55;
  IPC::StreamClientConnection *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  _BYTE buf[24];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(float *)v54 = a2;
  *(float *)&v54[1] = a3;
  v3 = *((_QWORD *)this + 481);
  if (v3)
  {
    v4 = this;
    this = *(WTF::ApproximateTime **)(v3 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v56);
      if (v56)
      {
        v5 = (unsigned __int8 *)*((_QWORD *)v4 + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)v4 + 480), &v55);
          v5 = (unsigned __int8 *)v55;
          if (v55)
            v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v55);
        }
        else
        {
          v55 = 0;
        }
        v6 = v56;
        v7 = *((_QWORD *)v4 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
        v9 = v8 + 15.0;
        if (*((_QWORD *)v6 + 6) == v7)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v57, v9);
            if (!v59)
            {
              v48 = 15;
              goto LABEL_73;
            }
            *(_QWORD *)buf = v57;
            *(_QWORD *)&buf[8] = v58;
            *(_QWORD *)&buf[16] = 0;
            v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v11 = v10 >= v57;
            v12 = v10 - v57;
            if (v11)
            {
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v57 + v12) = 868;
                *(_QWORD *)&buf[16] = v12 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v54);
            if (*(_QWORD *)&buf[8])
            {
              v16 = *(_QWORD *)&buf[16];
              v17 = *((_QWORD *)v6 + 8);
              v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v19 = *((_QWORD *)v6 + 7);
              if (v18 + 16 >= v19)
                v18 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v16 = 16;
              v20 = v18 + v16;
              if (v19 <= v20)
                v20 = 0;
              *((_QWORD *)v6 + 9) = v20;
              v21 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v20, v21));
              v23 = *((_DWORD *)v6 + 27);
              if (v22 == 0x80000000 || v23 != 0)
              {
                v28 = v23 + 1;
                *((_DWORD *)v6 + 27) = v28;
                if (v28 >= *((_DWORD *)v6 + 26))
                {
                  if (*((_BYTE *)v6 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                  *((_DWORD *)v6 + 27) = 0;
                }
              }
              goto LABEL_29;
            }
            v29 = v59;
            if (v59)
              break;
            __break(1u);
LABEL_84:
            v33 = 0;
            v32 = v15;
LABEL_45:
            v34 = (v29 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v34 >= v29 + v33)
            {
              v35 = v34 - v29;
              v36 = 17;
              if (v35 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_82;
              v33 = v35 + 8;
              if (v35 + 8 > v32)
                goto LABEL_82;
              *(_QWORD *)(v29 + v35) = v7;
            }
            if (!v32)
            {
              v36 = 17;
              goto LABEL_82;
            }
            v37 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v38 = *((_QWORD *)v6 + 7);
            if (v37 + 16 >= v38)
              v37 = 0;
            if (v33 <= 0x10)
              v33 = 16;
            v39 = v37 + v33;
            if (v38 <= v39)
              v40 = 0;
            else
              v40 = v39;
            *((_QWORD *)v6 + 9) = v40;
            v41 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v40, v41));
            v43 = *((_DWORD *)v6 + 27);
            if (v42 == 0x80000000 || v43 != 0)
            {
              v45 = v43 + 1;
              *((_DWORD *)v6 + 27) = v45;
              if (v45 >= *((_DWORD *)v6 + 26))
              {
                if (*((_BYTE *)v6 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
                *((_DWORD *)v6 + 27) = 0;
              }
            }
            *((_QWORD *)v6 + 6) = v7;
          }
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v57, v58);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
          v49 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Translate>(*(uint64_t *)buf, v54, v7);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
          v48 = v49;
          if (!v49)
            goto LABEL_29;
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
          if (buf[16])
          {
            v29 = *(_QWORD *)buf;
            v15 = *(_QWORD *)&buf[8];
            v30 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v31 = v30 - *(_QWORD *)buf;
            if (v30 < *(_QWORD *)buf)
              goto LABEL_84;
            v32 = 0;
            if (v31 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v33 = 0;
            }
            else
            {
              v33 = 0;
              if (v31 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v31) = 2822;
                v32 = v15;
                v33 = v31 + 2;
              }
            }
            goto LABEL_45;
          }
          v36 = 15;
LABEL_82:
          v48 = v36;
        }
LABEL_73:
        v50 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v51 = IPC::errorAsString(v48);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Translate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v51;
          _os_log_impl(&dword_196BCC000, v50, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v52 = *((_QWORD *)v4 + 481);
        if (v52)
        {
          v53 = *(_BYTE **)(v52 + 8);
          if (v53)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v53);
        }
LABEL_29:
        v25 = v55;
        v55 = 0;
        if (v25)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v25 + 1, v14);
        this = v56;
        v56 = 0;
        if (this)
        {
          do
          {
            v26 = __ldaxr((unsigned int *)this);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, (unsigned int *)this));
          if (!v27)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v46, v47);
          }
        }
      }
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordClip(WTF::ApproximateTime *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  int v53;
  int v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  _BYTE *v58;
  int *v59;
  WebKit::RemoteImageBufferProxy *v60;
  IPC::StreamClientConnection *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  _BYTE buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v59 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v61);
  if (!v61)
    return this;
  v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v60);
    v4 = (unsigned __int8 *)v60;
    if (v60)
      v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v60);
  }
  else
  {
    v60 = 0;
  }
  v5 = v61;
  v6 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v5 + 6) == v6)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v62, v8);
      if (!v64)
      {
        v53 = 15;
        goto LABEL_86;
      }
      *(_QWORD *)buf = v62;
      *(_QWORD *)&buf[8] = v63;
      *(_QWORD *)&buf[16] = 0;
      v9 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= v62;
      v11 = v9 - v62;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v63)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v62 + v11) = 800;
          *(_QWORD *)&buf[16] = v11 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v59);
      if (*(_QWORD *)&buf[8])
      {
        v15 = *(_QWORD *)&buf[16];
        v16 = *((_QWORD *)v5 + 8);
        v17 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *((_QWORD *)v5 + 7);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v15 = 16;
        v19 = v17 + v15;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *((_QWORD *)v5 + 9) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 == 0x80000000 || *((_DWORD *)v5 + 27))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
        goto LABEL_27;
      }
      v33 = v64;
      if (v64)
        break;
      __break(1u);
LABEL_97:
      v37 = 0;
      v36 = v14;
LABEL_57:
      v38 = (v33 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v38 >= v33 + v37)
      {
        v39 = v38 - v33;
        v40 = 17;
        if (v39 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_95;
        v37 = v39 + 8;
        if (v39 + 8 > v36)
          goto LABEL_95;
        *(_QWORD *)(v33 + v39) = v6;
      }
      if (!v36)
      {
        v40 = 17;
        goto LABEL_95;
      }
      v41 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v42 = *((_QWORD *)v5 + 7);
      if (v41 + 16 >= v42)
        v41 = 0;
      if (v37 <= 0x10)
        v37 = 16;
      v43 = v41 + v37;
      if (v42 <= v43)
        v44 = 0;
      else
        v44 = v43;
      *((_QWORD *)v5 + 9) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = *((_DWORD *)v5 + 27);
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        *((_DWORD *)v5 + 27) = v49;
        if (v49 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v62, v63);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
    v54 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::Clip>(*(uint64_t *)buf, &v59, v6);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    v53 = v54;
    if (!v54)
      goto LABEL_27;
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
    if (buf[16])
    {
      v33 = *(_QWORD *)buf;
      v14 = *(_QWORD *)&buf[8];
      v34 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v35 = v34 - *(_QWORD *)buf;
      if (v34 < *(_QWORD *)buf)
        goto LABEL_97;
      v36 = 0;
      if (v35 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v37 = 0;
      }
      else
      {
        v37 = 0;
        if (v35 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v35) = 2822;
          v36 = v14;
          v37 = v35 + 2;
        }
      }
      goto LABEL_57;
    }
    v40 = 15;
LABEL_95:
    v53 = v40;
  }
LABEL_86:
  v55 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v56 = IPC::errorAsString(v53);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Clip";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v56;
    _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v57 = *((_QWORD *)v3 + 481);
  if (v57)
  {
    v58 = *(_BYTE **)(v57 + 8);
    if (v58)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
  }
LABEL_27:
  v23 = v60;
  v60 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v52 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v13);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  this = v61;
  v61 = 0;
  if (this)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)this);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)this));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v50, v51);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSave(WTF::ApproximateTime *this)
{
  uint64_t v1;
  WTF::ApproximateTime *v2;
  unsigned __int8 *v3;
  IPC::StreamClientConnection *v4;
  uint64_t v5;
  double v6;
  double v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  WebKit::RemoteImageBufferProxy *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  unsigned int v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  _BYTE *v64;
  WebKit::RemoteImageBufferProxy *v65;
  IPC::StreamClientConnection *v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  _BYTE buf[22];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 481);
  if (v1)
  {
    v2 = this;
    this = *(WTF::ApproximateTime **)(v1 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v66);
      if (v66)
      {
        v3 = (unsigned __int8 *)*((_QWORD *)v2 + 479);
        if (v3)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, *((_QWORD *)v2 + 480), &v65);
          v3 = (unsigned __int8 *)v65;
          if (v65)
            v3 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v65);
        }
        else
        {
          v65 = 0;
        }
        v4 = v66;
        v5 = *((_QWORD *)v2 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v3);
        v7 = v6 + 15.0;
        if (*((_QWORD *)v4 + 6) == v5)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 56, buf, v7);
            if (!buf[16])
              goto LABEL_74;
            v9 = *(_QWORD *)buf;
            v10 = *(_QWORD *)&buf[8];
            v11 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v12 = v11 - *(_QWORD *)buf;
            if (v11 < *(_QWORD *)buf)
            {
              v13 = 0;
            }
            else
            {
              v13 = v12 + 2;
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
                goto LABEL_87;
              LOBYTE(v11) = 78;
              *(_WORD *)(*(_QWORD *)buf + v12) = 846;
            }
            if (v10)
            {
              v15 = *((_QWORD *)v4 + 8);
              v16 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v17 = *((_QWORD *)v4 + 7);
              if (v16 + 16 >= v17)
                v16 = 0;
              if (v13 <= 0x10)
                v13 = 16;
              v18 = v16 + v13;
              if (v17 <= v18)
                v18 = 0;
              *((_QWORD *)v4 + 9) = v18;
              v19 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v18, v19));
              v21 = *((_DWORD *)v4 + 27);
              if (v20 == 0x80000000 || v21 != 0)
              {
                v26 = v21 + 1;
                *((_DWORD *)v4 + 27) = v26;
                if (v26 >= *((_DWORD *)v4 + 26))
                {
                  if (*((_BYTE *)v4 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v4 + 21));
                  *((_DWORD *)v4 + 27) = 0;
                }
              }
              goto LABEL_28;
            }
            v27 = buf[16];
            if (buf[16])
            {
              v9 = *(_QWORD *)buf;
              v11 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
LABEL_87:
              v47 = 0;
              v48 = v11 >= v9;
              v49 = v11 - v9;
              if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(v9 + v49) = 2821;
                v47 = v49 + 2;
              }
              v50 = *((_QWORD *)v4 + 8);
              v51 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v52 = *((_QWORD *)v4 + 7);
              if (v51 + 16 >= v52)
                v51 = 0;
              if (v47 <= 0x10)
                v47 = 16;
              v53 = v51 + v47;
              if (v52 <= v53)
                v53 = 0;
              *((_QWORD *)v4 + 9) = v53;
              v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
              do
                __ldaxr(v54);
              while (__stlxr(v53, v54));
              *((_DWORD *)v4 + 27) = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v4 + 1);
              v55 = v67;
              v56 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v56 = 846;
              *(_QWORD *)(v56 + 8) = v5;
              *(_QWORD *)(v56 + 528) = v56 + 16;
              *(_QWORD *)(v56 + 536) = v56 + 16;
              *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v56 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
              v68 = (IPC::Encoder *)v56;
              v35 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v68, 1, 0);
              v58 = v68;
              v68 = 0;
              if (v58)
              {
                IPC::Encoder::~Encoder(v58, v57);
                WTF::fastFree(v59, v60);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
              if (!v35)
                goto LABEL_28;
              goto LABEL_103;
            }
            __break(1u);
LABEL_80:
            if ((v11 & 1) == 0)
              break;
            v32 = 0;
            if (v12 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v29 = 0;
            }
            else
            {
              v29 = 0;
              if (v12 + 2 <= v10)
              {
                v29 = v12 + 2;
LABEL_48:
                *(_WORD *)(v27 + v12) = 2822;
                goto LABEL_49;
              }
            }
LABEL_50:
            v33 = (_QWORD *)((v27 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v33 >= v27 + v29)
            {
              v34 = (char *)v33 - v27;
              v35 = 17;
              if ((unint64_t)v33 - v27 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_103;
              v29 = (unint64_t)(v34 + 8);
              if ((unint64_t)(v34 + 8) > v32)
                goto LABEL_103;
              *v33 = v5;
            }
            if (!v32)
            {
              v35 = 17;
              goto LABEL_103;
            }
            v36 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v37 = *((_QWORD *)v4 + 7);
            if (v36 + 16 >= v37)
              v36 = 0;
            if (v29 <= 0x10)
              v29 = 16;
            v38 = v36 + v29;
            if (v37 <= v38)
              v39 = 0;
            else
              v39 = v38;
            *((_QWORD *)v4 + 9) = v39;
            v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 16) + 128);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v39, v40));
            v42 = *((_DWORD *)v4 + 27);
            if (v41 == 0x80000000 || v42 != 0)
            {
              v44 = v42 + 1;
              *((_DWORD *)v4 + 27) = v44;
              if (v44 >= *((_DWORD *)v4 + 26))
              {
                if (*((_BYTE *)v4 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v4 + 21));
                *((_DWORD *)v4 + 27) = 0;
              }
            }
            *((_QWORD *)v4 + 6) = v5;
          }
          v29 = 0;
LABEL_49:
          v32 = v10;
          goto LABEL_50;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 56, buf, v6 + 15.0);
        if (buf[16])
        {
          v27 = *(_QWORD *)buf;
          v10 = *(_QWORD *)&buf[8];
          v28 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v12 = v28 - *(_QWORD *)buf;
          LOBYTE(v11) = v28 >= *(_QWORD *)buf;
          v29 = v28 - *(_QWORD *)buf + 2;
          v31 = v12 < 0xFFFFFFFFFFFFFFFELL && v29 <= *(_QWORD *)&buf[8];
          if ((v11 & 1) == 0 || !v31)
            goto LABEL_80;
          goto LABEL_48;
        }
LABEL_74:
        v35 = 15;
LABEL_103:
        v61 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v62 = IPC::errorAsString(v35);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Save";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v62;
          _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v63 = *((_QWORD *)v2 + 481);
        if (v63)
        {
          v64 = *(_BYTE **)(v63 + 8);
          if (v64)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v64);
        }
LABEL_28:
        v23 = v65;
        v65 = 0;
        if (v23)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v23 + 1, v8);
        this = v66;
        v66 = 0;
        if (this)
        {
          do
          {
            v24 = __ldaxr((unsigned int *)this);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, (unsigned int *)this));
          if (!v25)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v45, v46);
          }
        }
      }
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordRestore(WTF::ApproximateTime *this)
{
  uint64_t v1;
  WTF::ApproximateTime *v2;
  unsigned __int8 *v3;
  IPC::StreamClientConnection *v4;
  uint64_t v5;
  double v6;
  double v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  WebKit::RemoteImageBufferProxy *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  unsigned int v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  _BYTE *v64;
  WebKit::RemoteImageBufferProxy *v65;
  IPC::StreamClientConnection *v66;
  uint64_t *v67;
  IPC::Encoder *v68;
  _BYTE buf[22];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 481);
  if (v1)
  {
    v2 = this;
    this = *(WTF::ApproximateTime **)(v1 + 8);
    if (this)
    {
      this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v66);
      if (v66)
      {
        v3 = (unsigned __int8 *)*((_QWORD *)v2 + 479);
        if (v3)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, *((_QWORD *)v2 + 480), &v65);
          v3 = (unsigned __int8 *)v65;
          if (v65)
            v3 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v65);
        }
        else
        {
          v65 = 0;
        }
        v4 = v66;
        v5 = *((_QWORD *)v2 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v3);
        v7 = v6 + 15.0;
        if (*((_QWORD *)v4 + 6) == v5)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 56, buf, v7);
            if (!buf[16])
              goto LABEL_74;
            v9 = *(_QWORD *)buf;
            v10 = *(_QWORD *)&buf[8];
            v11 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v12 = v11 - *(_QWORD *)buf;
            if (v11 < *(_QWORD *)buf)
            {
              v13 = 0;
            }
            else
            {
              v13 = v12 + 2;
              if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
                goto LABEL_87;
              LOBYTE(v11) = 76;
              *(_WORD *)(*(_QWORD *)buf + v12) = 844;
            }
            if (v10)
            {
              v15 = *((_QWORD *)v4 + 8);
              v16 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v17 = *((_QWORD *)v4 + 7);
              if (v16 + 16 >= v17)
                v16 = 0;
              if (v13 <= 0x10)
                v13 = 16;
              v18 = v16 + v13;
              if (v17 <= v18)
                v18 = 0;
              *((_QWORD *)v4 + 9) = v18;
              v19 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v18, v19));
              v21 = *((_DWORD *)v4 + 27);
              if (v20 == 0x80000000 || v21 != 0)
              {
                v26 = v21 + 1;
                *((_DWORD *)v4 + 27) = v26;
                if (v26 >= *((_DWORD *)v4 + 26))
                {
                  if (*((_BYTE *)v4 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v4 + 21));
                  *((_DWORD *)v4 + 27) = 0;
                }
              }
              goto LABEL_28;
            }
            v27 = buf[16];
            if (buf[16])
            {
              v9 = *(_QWORD *)buf;
              v11 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
LABEL_87:
              v47 = 0;
              v48 = v11 >= v9;
              v49 = v11 - v9;
              if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(v9 + v49) = 2821;
                v47 = v49 + 2;
              }
              v50 = *((_QWORD *)v4 + 8);
              v51 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v52 = *((_QWORD *)v4 + 7);
              if (v51 + 16 >= v52)
                v51 = 0;
              if (v47 <= 0x10)
                v47 = 16;
              v53 = v51 + v47;
              if (v52 <= v53)
                v53 = 0;
              *((_QWORD *)v4 + 9) = v53;
              v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
              do
                __ldaxr(v54);
              while (__stlxr(v53, v54));
              *((_DWORD *)v4 + 27) = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v67, (uint64_t **)v4 + 1);
              v55 = v67;
              v56 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v56 = 844;
              *(_QWORD *)(v56 + 8) = v5;
              *(_QWORD *)(v56 + 528) = v56 + 16;
              *(_QWORD *)(v56 + 536) = v56 + 16;
              *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v56 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
              v68 = (IPC::Encoder *)v56;
              v35 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v68, 1, 0);
              v58 = v68;
              v68 = 0;
              if (v58)
              {
                IPC::Encoder::~Encoder(v58, v57);
                WTF::fastFree(v59, v60);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v67);
              if (!v35)
                goto LABEL_28;
              goto LABEL_103;
            }
            __break(1u);
LABEL_80:
            if ((v11 & 1) == 0)
              break;
            v32 = 0;
            if (v12 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v29 = 0;
            }
            else
            {
              v29 = 0;
              if (v12 + 2 <= v10)
              {
                v29 = v12 + 2;
LABEL_48:
                *(_WORD *)(v27 + v12) = 2822;
                goto LABEL_49;
              }
            }
LABEL_50:
            v33 = (_QWORD *)((v27 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v33 >= v27 + v29)
            {
              v34 = (char *)v33 - v27;
              v35 = 17;
              if ((unint64_t)v33 - v27 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_103;
              v29 = (unint64_t)(v34 + 8);
              if ((unint64_t)(v34 + 8) > v32)
                goto LABEL_103;
              *v33 = v5;
            }
            if (!v32)
            {
              v35 = 17;
              goto LABEL_103;
            }
            v36 = (*((_QWORD *)v4 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v37 = *((_QWORD *)v4 + 7);
            if (v36 + 16 >= v37)
              v36 = 0;
            if (v29 <= 0x10)
              v29 = 16;
            v38 = v36 + v29;
            if (v37 <= v38)
              v39 = 0;
            else
              v39 = v38;
            *((_QWORD *)v4 + 9) = v39;
            v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 16) + 128);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v39, v40));
            v42 = *((_DWORD *)v4 + 27);
            if (v41 == 0x80000000 || v42 != 0)
            {
              v44 = v42 + 1;
              *((_DWORD *)v4 + 27) = v44;
              if (v44 >= *((_DWORD *)v4 + 26))
              {
                if (*((_BYTE *)v4 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v4 + 21));
                *((_DWORD *)v4 + 27) = 0;
              }
            }
            *((_QWORD *)v4 + 6) = v5;
          }
          v29 = 0;
LABEL_49:
          v32 = v10;
          goto LABEL_50;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v4 + 56, buf, v6 + 15.0);
        if (buf[16])
        {
          v27 = *(_QWORD *)buf;
          v10 = *(_QWORD *)&buf[8];
          v28 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v12 = v28 - *(_QWORD *)buf;
          LOBYTE(v11) = v28 >= *(_QWORD *)buf;
          v29 = v28 - *(_QWORD *)buf + 2;
          v31 = v12 < 0xFFFFFFFFFFFFFFFELL && v29 <= *(_QWORD *)&buf[8];
          if ((v11 & 1) == 0 || !v31)
            goto LABEL_80;
          goto LABEL_48;
        }
LABEL_74:
        v35 = 15;
LABEL_103:
        v61 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v62 = IPC::errorAsString(v35);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_Restore";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v62;
          _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v63 = *((_QWORD *)v2 + 481);
        if (v63)
        {
          v64 = *(_BYTE **)(v63 + 8);
          if (v64)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v64);
        }
LABEL_28:
        v23 = v65;
        v65 = 0;
        if (v23)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v23 + 1, v8);
        this = v66;
        v66 = 0;
        if (this)
        {
          do
          {
            v24 = __ldaxr((unsigned int *)this);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, (unsigned int *)this));
          if (!v25)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection(this);
            return (WTF::ApproximateTime *)WTF::fastFree(v45, v46);
          }
        }
      }
    }
  }
  return this;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int **v3;
  _BYTE v4[8];
  _QWORD v5[3];
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9[4];
  char v10;

  if (!*((_QWORD *)this + 5))
  {
    v3 = (unsigned int **)(this + 10);
    v1 = (uint64_t)this;
    this = IPC::StreamClientConnection::create((IPC::StreamClientConnection *)0x15, v9);
    if (v10)
    {
      IPC::StreamClientConnection::StreamConnectionPair::StreamConnectionPair(&v7, v9);
      WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=<IPC::StreamClientConnection>(v3, &v7);
      IPC::StreamClientConnection::open(*(_QWORD *)(v1 + 40), (void *)v1, v1 + 16);
      *(_BYTE *)(v1 + 248) = 1;
      IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)v4, (uint64_t)&v8);
      v5[2] = v1;
      WTF::Function<void ()(void)>::Function<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>(&v6, (uint64_t)v4);
      WTF::callOnMainRunLoopAndWait();
      v2 = v6;
      v6 = 0;
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
      IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(&v7);
      return (unsigned int *)std::__optional_destruct_base<IPC::StreamClientConnection::StreamConnectionPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t IPC::StreamClientConnection::trySendDestinationIDIfNeeded(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v13;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unsigned int v25;
  unint64_t v26;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  char v38;

  if (*(_QWORD *)(a1 + 48) == a2)
    return 0;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v36, a3);
  if (!v38)
    return 15;
  v7 = v36;
  v6 = v37;
  v8 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v36;
  v10 = v8 >= v36;
  v11 = v8 - v36 + 2;
  v13 = v9 < 0xFFFFFFFFFFFFFFFELL && v11 <= v37;
  if (!v10 || !v13)
  {
    if (v10)
    {
      v26 = v9 + 2;
      if (v9 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= v37)
      {
        *(_WORD *)(v36 + v9) = 2822;
LABEL_45:
        v28 = (_QWORD *)((v7 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v28 >= v7 + v26)
        {
          v26 = (unint64_t)v28 - v7 + 8;
          if ((unint64_t)v28 - v7 > 0xFFFFFFFFFFFFFFF7 || v26 > v6)
            return 17;
          *v28 = a2;
        }
        if (v6)
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v32 = *(_QWORD *)(a1 + 56);
          if (v31 + 16 >= v32)
            v31 = 0;
          v33 = 16;
          if (v26 > 0x10)
            v33 = v26;
          v34 = v31 + v33;
          if (v32 <= v34)
            v34 = 0;
          *(_QWORD *)(a1 + 72) = v34;
          v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
          do
            v22 = __ldaxr(v35);
          while (__stlxr(v34, v35));
          goto LABEL_28;
        }
        return 17;
      }
      v6 = 0;
    }
    v26 = 0;
    goto LABEL_45;
  }
  *(_WORD *)(v36 + v9) = 2822;
  v14 = (_QWORD *)((v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v14 >= v7 + v11)
  {
    v11 = (unint64_t)v14 - v7 + 8;
    if ((unint64_t)v14 - v7 > 0xFFFFFFFFFFFFFFF7 || v11 > v6)
      return 17;
    *v14 = a2;
  }
  if (!v6)
    return 17;
  v16 = *(_QWORD *)(a1 + 64);
  v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v18 = *(_QWORD *)(a1 + 56);
  if (v17 + 16 >= v18)
    v17 = 0;
  v19 = 16;
  if (v11 > 0x10)
    v19 = v11;
  v20 = v17 + v19;
  if (v18 <= v20)
    v20 = 0;
  *(_QWORD *)(a1 + 72) = v20;
  v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v20, v21));
LABEL_28:
  v23 = *(_DWORD *)(a1 + 108);
  if (v22 == 0x80000000 || v23 != 0)
  {
    v25 = v23 + 1;
    *(_DWORD *)(a1 + 108) = v25;
    if (v25 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  result = 0;
  *(_QWORD *)(a1 + 48) = a2;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(uint64_t *result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v23;
  unint64_t v24;

  v2 = a2[1];
  v3 = *result;
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *a2;
      result[2] = v10;
      v3 = *result;
      v4 = v10;
    }
  }
  v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    v14 = v12 - v3;
    v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      v3 = *result;
      v4 = v15;
    }
  }
  v17 = a2[3];
  v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    v20 = v18 - v3;
    v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v20) = a2[2];
      result[2] = v21;
      v3 = *result;
      v4 = v21;
    }
  }
  v23 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v3 + v4)
  {
    v24 = (unint64_t)v23 - v3 + 4;
    if ((unint64_t)v23 - v3 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v23 = v17;
      result[2] = v24;
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  unint64_t v12;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v2 + v3)
  {
    v12 = (unint64_t)v11 - v2 + 4;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DisplayList::SetState,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[344];
  _BYTE v10[344];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::decode(a1, v10);
  if (!v11)
  {
    v4 = (void *)*a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 16))(v7, v4);
  }
  if (*a1)
  {
    if (!v11)
      __break(1u);
    MEMORY[0x19AEAC958](v9, v10);
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)a2, (uint64_t)v9);
    a2[344] = 1;
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v9, v5);
  }
  else
  {
    *a2 = 0;
    a2[344] = 0;
  }
  if (v11)
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v10, v4);
}

void sub_196C0F4D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (LOBYTE(STACK[0x2B0]))
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&a52, a2);
  _Unwind_Resume(a1);
}

void WebCore::GraphicsContextState::~GraphicsContextState(WebCore::GraphicsContextState *this, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  char v16;

  if (*((_BYTE *)this + 320))
  {
    v3 = *((unsigned int *)this + 78);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3])(&v14, (char *)this + 232);
    *((_DWORD *)this + 78) = -1;
  }
  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 192, a2);
  v5 = *((unsigned int *)this + 42);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v15, (char *)this + 104);
  *((_DWORD *)this + 42) = -1;
  v6 = *((_QWORD *)this + 11);
  if ((v6 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v4);
    }
  }
  v7 = *((unsigned int *)this + 20);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v16, (char *)this + 16);
  *((_DWORD *)this + 20) = -1;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v4);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  void *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  char v58;
  char v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  char v65;
  char v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  char v72;
  char v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  char v79;
  char v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  char v86;
  char v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  char v93;
  unint64_t v94;
  int v95;
  char v96;
  int v97;
  char *v98;
  unsigned int v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  char v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  char v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  char v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  char v206;
  int v207;
  int v208;
  char v209;
  int v210;
  int v211;
  char v212;
  int v213;
  int v214;
  char v215;
  int v216;
  int v217;
  int v218;
  char v219;
  int v220;
  int v221;
  int v222;
  int v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  int v246;
  int v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  char v264;
  int v265;
  char v266;
  char v267;
  char v268;
  char v269;
  int v270;
  int v271;
  int v272;
  int v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  char v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  char v288;
  char v289;
  char v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  char v308;
  char v309;
  char v310;
  char v311;
  char v312;
  char v313;
  char v314;
  char v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  char v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  char v371;
  char v372;
  char v373;
  char v374;
  char v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  char v382;
  char v383;
  char v384;
  char v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  unsigned __int16 v408;
  uint64_t v410;
  int v411;
  uint64_t v412;
  char v413;
  char v414;
  _BYTE *v415;
  uint64_t v416;
  int v417;
  _QWORD v418[2];
  char v419;
  int v420;
  char v421;
  _DWORD v422[20];
  char v423;
  char v424;
  __int16 v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  char v429;
  _BYTE v430[80];
  int v431;
  char v432;
  int v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  char v440;
  char v441;
  char v442;
  _BYTE v443[80];
  int v444;
  char v445;
  char v446;
  _BYTE v447[16];
  uint64_t v448;
  char v449;
  _BYTE v450[16];
  uint64_t v451;
  char v452;
  uint64_t v453;

  v2 = a1;
  v453 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(v450, a1);
  if (!v452)
  {
    v104 = *v2;
    v105 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v106 = v2[3];
    if (v106 && v105 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
  }
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(v447, v2);
  if (!v449)
  {
    v108 = *v2;
    v109 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v110 = v2[3];
    if (v110)
    {
      if (v109)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v108);
    }
  }
  v3 = v2[1];
  v4 = *v2;
  v5 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    v111 = 0;
    v112 = 0;
    *v2 = 0;
    v2[1] = 0;
    v113 = v2[3];
    if (v113)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
        v112 = *v2;
        v111 = v2[1];
      }
      else
      {
        v111 = 0;
        v112 = 0;
      }
    }
    goto LABEL_152;
  }
  v7 = (unsigned int *)(v4 + v5);
  v2[2] = (uint64_t)(v7 + 1);
  if (!v4)
  {
    v111 = v3;
    v112 = 0;
LABEL_152:
    v3 = 0;
    v4 = 0;
    *v2 = 0;
    v2[1] = 0;
    v114 = v2[3];
    if (v114)
    {
      if (v111)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v112, v111);
        v4 = *v2;
        v3 = v2[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_153;
  }
  v8 = *v7;
  if (v8 < 0x20000)
  {
    v9 = (_BYTE *)(v8 | 0x100000000);
    v10 = v4;
    goto LABEL_11;
  }
LABEL_153:
  *v2 = 0;
  v2[1] = 0;
  v115 = v2[3];
  if (v115)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 16))(v115, v4);
      v9 = 0;
      v10 = *v2;
      v3 = v2[1];
      v4 = *v2;
      goto LABEL_11;
    }
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v3 = 0;
  }
  v4 = 0;
  v9 = 0;
LABEL_11:
  v11 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
  if (v3 < v11 || v3 - v11 <= 3)
  {
    v13 = 0;
    v10 = 0;
    *v2 = 0;
    v2[1] = 0;
    v121 = v2[3];
    if (v121)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v121 + 16))(v121);
        v10 = *v2;
        v13 = v2[1];
      }
      else
      {
        v13 = 0;
        v10 = 0;
      }
    }
  }
  else
  {
    v12 = (_DWORD *)((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v2[2] = (uint64_t)(v12 + 1);
    v13 = v3;
    if (v4)
    {
      LODWORD(v14) = 0;
      LODWORD(v15) = *v12;
      goto LABEL_15;
    }
  }
  *v2 = 0;
  v2[1] = 0;
  v122 = v2[3];
  if (v122 && v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v122 + 16))(v122, v10, v13);
  LODWORD(v15) = 0;
  LODWORD(v14) = 1;
LABEL_15:
  v408 = IPC::Decoder::decode<WebCore::RotationDirection>(v2);
  v16 = v2[1];
  v17 = *v2;
  v18 = v2[2] - *v2;
  if (v16 <= v18)
  {
    v116 = 0;
    v117 = 0;
    *v2 = 0;
    v2[1] = 0;
    v118 = v2[3];
    if (v118)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
        v117 = *v2;
        v116 = v2[1];
      }
      else
      {
        v116 = 0;
        v117 = 0;
      }
    }
    goto LABEL_157;
  }
  v19 = (unsigned __int8 *)(v17 + v18);
  v2[2] = (uint64_t)(v19 + 1);
  if (!v17)
  {
    v116 = v16;
    v117 = 0;
LABEL_157:
    v16 = 0;
    v17 = 0;
    *v2 = 0;
    v2[1] = 0;
    v119 = v2[3];
    if (v119)
    {
      if (v116)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v119 + 16))(v119, v117, v116);
        v17 = *v2;
        v16 = v2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_158;
  }
  v20 = *v19;
  if (v20 < 6)
  {
    v21 = 0;
    goto LABEL_19;
  }
LABEL_158:
  *v2 = 0;
  v2[1] = 0;
  v120 = v2[3];
  if (v120 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, v17);
  LOBYTE(v20) = 0;
  v21 = 1;
LABEL_19:
  v22 = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(v2);
  v23 = v2[1];
  v407 = v22;
  if ((v22 & 0xFF0000) == 0)
  {
    v123 = *v2;
    *v2 = 0;
    v2[1] = 0;
    v124 = v2[3];
    if (!v124 || !v23)
    {
      v23 = 0;
      v24 = *v2;
LABEL_165:
      *v2 = 0;
      v2[1] = 0;
      v125 = v2[3];
      if (v125)
      {
        if (v23)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v24);
          v126 = *v2;
          v23 = v2[1];
        }
        else
        {
          v126 = 0;
        }
      }
      else
      {
        v126 = 0;
        v23 = 0;
      }
      goto LABEL_167;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 16))(v124, v123);
    v23 = v2[1];
  }
  v24 = *v2;
  v25 = v2[2] - *v2;
  if (v23 <= v25)
    goto LABEL_165;
  v26 = (unsigned __int8 *)(v24 + v25);
  v2[2] = (uint64_t)(v26 + 1);
  if (!v24)
  {
    v126 = 0;
LABEL_167:
    *v2 = 0;
    v2[1] = 0;
    v127 = v2[3];
    if (v127)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 16))(v127, v126);
        v24 = *v2;
        v23 = v2[1];
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    goto LABEL_169;
  }
  v27 = *v26;
  if (v27 >= 2)
  {
LABEL_169:
    *v2 = 0;
    v2[1] = 0;
    v128 = v2[3];
    if (v128 && v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v24);
    LOBYTE(v410) = 0;
    v414 = 0;
    goto LABEL_26;
  }
  if (v27)
    goto LABEL_141;
  LOBYTE(v416) = 0;
  v419 = 0;
  std::__optional_move_base<WebCore::GraphicsDropShadow,false>::__optional_move_base[abi:sn180100]((uint64_t)&v410, &v416);
  v29 = 1;
  while (1)
  {
    v414 = v29;
    std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v416, v28);
LABEL_26:
    v30 = v2[1];
    if (!v414)
    {
      v129 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v130 = v2[3];
      if (!v130 || !v30)
      {
        v30 = 0;
        v31 = *v2;
LABEL_173:
        v131 = 0;
        v132 = 0;
        *v2 = 0;
        v2[1] = 0;
        v133 = v2[3];
        if (v133)
        {
          if (v30)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v31);
            v132 = *v2;
            v131 = v2[1];
          }
          else
          {
            v131 = 0;
            v132 = 0;
          }
        }
LABEL_174:
        v30 = 0;
        v31 = 0;
        *v2 = 0;
        v2[1] = 0;
        v134 = v2[3];
        if (v134)
        {
          if (v131)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v132, v131);
            v31 = *v2;
            v30 = v2[1];
          }
          else
          {
            v30 = 0;
            v31 = 0;
          }
        }
LABEL_175:
        *v2 = 0;
        v2[1] = 0;
        v135 = v2[3];
        if (v135 && v30)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, v31);
LABEL_176:
        v443[0] = 0;
        v446 = 0;
        goto LABEL_35;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, v129);
      v30 = v2[1];
    }
    v31 = *v2;
    v32 = v2[2] - *v2;
    if (v30 <= v32)
      goto LABEL_173;
    v33 = (unsigned __int8 *)(v31 + v32);
    v2[2] = (uint64_t)(v33 + 1);
    if (!v31)
    {
      v131 = v30;
      v132 = 0;
      goto LABEL_174;
    }
    v34 = *v33;
    if (v34 >= 2)
      goto LABEL_175;
    if (v34)
    {
      IPC::Decoder::decode<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>(&v416, (unint64_t *)v2);
      if (!v421)
        goto LABEL_176;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v443, (uint64_t)&v416);
      v445 = 1;
    }
    else
    {
      LOBYTE(v416) = 0;
      v421 = 0;
      std::__optional_move_base<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,false>::__optional_move_base[abi:sn180100](v443, (uint64_t)&v416);
    }
    v446 = 1;
    if (v421 && v420 != -1)
      ((void (*)(_BYTE **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v420])(&v415, &v416);
LABEL_35:
    v35 = v2[1];
    if (v446)
    {
      v36 = v2[1];
    }
    else
    {
      v36 = 0;
      v136 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v137 = v2[3];
      if (v137)
      {
        if (v35)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v136, v35);
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
        }
      }
    }
    v37 = (char *)*v2;
    v38 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
    if (v36 < v38 || v36 - v38 <= 3)
    {
      v138 = 0;
      v139 = 0;
      *v2 = 0;
      v2[1] = 0;
      v140 = v2[3];
      if (v140)
      {
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v140 + 16))(v140);
          v139 = *v2;
          v138 = v2[1];
        }
        else
        {
          v138 = 0;
          v139 = 0;
        }
      }
    }
    else
    {
      v39 = &v37[v38];
      v40 = (uint64_t)&v37[v38 + 4];
      v2[2] = v40;
      if (v37)
      {
        v41 = 0;
        v42 = *(_DWORD *)v39;
        goto LABEL_41;
      }
      v138 = v36;
      v139 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v141 = v2[3];
    if (!v141)
    {
      v42 = 0;
      v138 = 0;
LABEL_183:
      v37 = 0;
      v41 = 1;
      goto LABEL_184;
    }
    if (!v138)
    {
      v42 = 0;
      goto LABEL_183;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v139, v138);
    v42 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v41 = 1;
    v40 = v2[2];
LABEL_41:
    v43 = v40 - (_QWORD)v37;
    if (v36 <= v43)
    {
      v222 = v41;
      v223 = v42;
      v138 = 0;
      v224 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v224 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v224 + 16))(v224);
        v37 = (char *)*v2;
        v138 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v223;
      v41 = v222;
      goto LABEL_184;
    }
    v44 = &v37[v43];
    v45 = (uint64_t)&v37[v43 + 1];
    v2[2] = v45;
    if (!v37)
    {
      v138 = v36;
LABEL_184:
      *v2 = 0;
      v2[1] = 0;
      v142 = v2[3];
      if (v142)
      {
        v182 = v41;
        v183 = v42;
        if (v138)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v142 + 16))(v142, v37, v138);
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
        v42 = v183;
        v41 = v182;
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      goto LABEL_186;
    }
    v46 = *v44;
    if (v46 < 5)
    {
      v47 = 0;
      goto LABEL_45;
    }
LABEL_186:
    *v2 = 0;
    v2[1] = 0;
    v143 = v2[3];
    if (!v143)
    {
      v144 = 0;
      v145 = 0;
      v37 = 0;
      v47 = 1;
      goto LABEL_188;
    }
    v171 = v41;
    v172 = v42;
    if (!v36)
    {
      v144 = 0;
      v145 = 0;
      v37 = 0;
      v47 = 1;
LABEL_188:
      *v2 = 0;
      v2[1] = 0;
      v146 = v2[3];
      if (v146)
      {
        v187 = v47;
        v188 = v144;
        v189 = v41;
        v190 = v42;
        if (v145)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v146 + 16))(v146, v37, v145);
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
        v42 = v190;
        v41 = v189;
        v144 = v188;
        v47 = v187;
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      goto LABEL_190;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v143 + 16))(v143, v37);
    LOBYTE(v46) = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v47 = 1;
    v45 = v2[2];
    v42 = v172;
    v41 = v171;
LABEL_45:
    v385 = v46;
    v48 = v45 - (_QWORD)v37;
    if (v36 <= v48)
    {
      v260 = v47;
      v261 = v41;
      v262 = v42;
      v145 = 0;
      v263 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v263 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v263 + 16))(v263);
        v37 = (char *)*v2;
        v145 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v262;
      v41 = v261;
      v144 = v385;
      v47 = v260;
      goto LABEL_188;
    }
    v49 = &v37[v48];
    v50 = (uint64_t)&v37[v48 + 1];
    v2[2] = v50;
    if (!v37)
    {
      v145 = v36;
      v144 = v385;
      goto LABEL_188;
    }
    v51 = *v49;
    if (v51 < 4)
    {
      v52 = 0;
      goto LABEL_49;
    }
    v144 = v385;
LABEL_190:
    *v2 = 0;
    v2[1] = 0;
    v147 = v2[3];
    if (!v147)
    {
      LOBYTE(v51) = 0;
      v148 = 0;
      v37 = 0;
      v52 = 1;
      goto LABEL_192;
    }
    v173 = v47;
    v385 = v144;
    v174 = v41;
    v175 = v42;
    if (!v36)
    {
      LOBYTE(v51) = 0;
      v148 = 0;
      v37 = 0;
      v52 = 1;
LABEL_192:
      *v2 = 0;
      v2[1] = 0;
      v149 = v2[3];
      if (v149)
      {
        v391 = v52;
        v371 = v51;
        v401 = v47;
        v194 = v144;
        v195 = v41;
        v196 = v42;
        if (v148)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v149 + 16))(v149, v37, v148);
          v56 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v56 = 0;
        }
        v42 = v196;
        v41 = v195;
        v144 = v194;
        v47 = v401;
        LOBYTE(v51) = v371;
        v52 = v391;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v56 = 0;
      }
      goto LABEL_194;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v147 + 16))(v147, v37);
    LOBYTE(v51) = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v52 = 1;
    v50 = v2[2];
    v42 = v175;
    v41 = v174;
    v47 = v173;
LABEL_49:
    v53 = v50 - (_QWORD)v37;
    if (v36 <= v53)
    {
      v255 = v52;
      v384 = v51;
      v256 = v47;
      v257 = v41;
      v258 = v42;
      v148 = 0;
      v259 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v259 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v259 + 16))(v259);
        v37 = (char *)*v2;
        v148 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v258;
      v41 = v257;
      LOBYTE(v51) = v384;
      v144 = v385;
      v47 = v256;
      v52 = v255;
      goto LABEL_192;
    }
    v54 = &v37[v53];
    v55 = (uint64_t)&v37[v53 + 1];
    v2[2] = v55;
    if (!v37)
    {
      v148 = v36;
      v144 = v385;
      goto LABEL_192;
    }
    v56 = *v54;
    if (v56 < 2)
    {
      v57 = 0;
      v58 = 1;
      goto LABEL_53;
    }
    v144 = v385;
LABEL_194:
    *v2 = 0;
    v2[1] = 0;
    v150 = v2[3];
    if (!v150)
    {
      v59 = 0;
      v151 = 0;
      v37 = 0;
      v57 = 1;
      goto LABEL_196;
    }
    v385 = v144;
    v387 = v52;
    v367 = v51;
    v176 = v47;
    v177 = v41;
    v178 = v42;
    if (!v36)
    {
      v59 = 0;
      v151 = 0;
      v37 = 0;
      v57 = 1;
LABEL_196:
      *v2 = 0;
      v2[1] = 0;
      v152 = v2[3];
      if (v152)
      {
        v339 = v59;
        v355 = v57;
        v393 = v52;
        v373 = v51;
        v402 = v47;
        v200 = v144;
        v201 = v41;
        v202 = v42;
        if (v151)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v152 + 16))(v152, v37, v151);
          v63 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v63 = 0;
        }
        v42 = v202;
        v41 = v201;
        v144 = v200;
        v47 = v402;
        v57 = v355;
        LOBYTE(v51) = v373;
        v52 = v393;
        v59 = v339;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v63 = 0;
      }
      goto LABEL_198;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v150 + 16))(v150, v37);
    v58 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v55 = v2[2];
    v42 = v178;
    v41 = v177;
    v47 = v176;
    v57 = 1;
    LOBYTE(v51) = v367;
    v52 = v387;
LABEL_53:
    if (v56)
      v59 = v58;
    else
      v59 = 0;
    v60 = v55 - (_QWORD)v37;
    if (v36 <= v60)
    {
      v349 = v59;
      v365 = v57;
      v250 = v52;
      v383 = v51;
      v251 = v47;
      v252 = v41;
      v253 = v42;
      v151 = 0;
      v254 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v254 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v254 + 16))(v254);
        v37 = (char *)*v2;
        v151 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v253;
      v41 = v252;
      LOBYTE(v51) = v383;
      v144 = v385;
      v47 = v251;
      v52 = v250;
      v59 = v349;
      v57 = v365;
      goto LABEL_196;
    }
    v61 = &v37[v60];
    v62 = (uint64_t)&v37[v60 + 1];
    v2[2] = v62;
    if (!v37)
    {
      v151 = v36;
      v144 = v385;
      goto LABEL_196;
    }
    v63 = *v61;
    if (v63 < 2)
    {
      v64 = 0;
      v65 = 1;
      goto LABEL_60;
    }
    v144 = v385;
LABEL_198:
    *v2 = 0;
    v2[1] = 0;
    v153 = v2[3];
    if (!v153)
    {
      v66 = 0;
      v154 = 0;
      v37 = 0;
      v64 = 1;
      goto LABEL_200;
    }
    v335 = v59;
    v351 = v57;
    v385 = v144;
    v388 = v52;
    v368 = v51;
    v179 = v47;
    v180 = v41;
    v181 = v42;
    if (!v36)
    {
      v66 = 0;
      v154 = 0;
      v37 = 0;
      v64 = 1;
LABEL_200:
      *v2 = 0;
      v2[1] = 0;
      v155 = v2[3];
      if (v155)
      {
        v313 = v66;
        v326 = v64;
        v341 = v59;
        v357 = v57;
        v395 = v52;
        v375 = v51;
        v403 = v47;
        v206 = v144;
        v207 = v41;
        v208 = v42;
        if (v154)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v155 + 16))(v155, v37, v154);
          v70 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v70 = 0;
        }
        v42 = v208;
        v41 = v207;
        v144 = v206;
        v47 = v403;
        v57 = v357;
        LOBYTE(v51) = v375;
        v52 = v395;
        v64 = v326;
        v59 = v341;
        v66 = v313;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v70 = 0;
      }
      goto LABEL_202;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v153 + 16))(v153, v37);
    v65 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v62 = v2[2];
    v42 = v181;
    v41 = v180;
    v47 = v179;
    v64 = 1;
    v57 = v351;
    LOBYTE(v51) = v368;
    v52 = v388;
    v59 = v335;
LABEL_60:
    if (v63)
      v66 = v65;
    else
      v66 = 0;
    v67 = v62 - (_QWORD)v37;
    if (v36 <= v67)
    {
      v320 = v66;
      v333 = v64;
      v348 = v59;
      v364 = v57;
      v245 = v52;
      v382 = v51;
      v246 = v47;
      v247 = v41;
      v248 = v42;
      v154 = 0;
      v249 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v249 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 16))(v249);
        v37 = (char *)*v2;
        v154 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v248;
      v41 = v247;
      LOBYTE(v51) = v382;
      v144 = v385;
      v47 = v246;
      v52 = v245;
      v59 = v348;
      v57 = v364;
      v66 = v320;
      v64 = v333;
      goto LABEL_200;
    }
    v68 = &v37[v67];
    v69 = (uint64_t)&v37[v67 + 1];
    v2[2] = v69;
    if (!v37)
    {
      v154 = v36;
      v144 = v385;
      goto LABEL_200;
    }
    v70 = *v68;
    if (v70 < 2)
    {
      v71 = 0;
      v72 = 1;
      goto LABEL_67;
    }
    v144 = v385;
LABEL_202:
    *v2 = 0;
    v2[1] = 0;
    v156 = v2[3];
    if (!v156)
    {
      v73 = 0;
      v157 = 0;
      v37 = 0;
      v71 = 1;
      goto LABEL_204;
    }
    v309 = v66;
    v322 = v64;
    v336 = v59;
    v352 = v57;
    v385 = v144;
    v389 = v52;
    v369 = v51;
    v184 = v47;
    v185 = v41;
    v186 = v42;
    if (!v36)
    {
      v73 = 0;
      v157 = 0;
      v37 = 0;
      v71 = 1;
LABEL_204:
      *v2 = 0;
      v2[1] = 0;
      v158 = v2[3];
      if (v158)
      {
        v292 = v73;
        v302 = v71;
        v314 = v66;
        v327 = v64;
        v342 = v59;
        v358 = v57;
        v396 = v52;
        v376 = v51;
        v404 = v47;
        v209 = v144;
        v210 = v41;
        v211 = v42;
        if (v157)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v158 + 16))(v158, v37, v157);
          v77 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v77 = 0;
        }
        v42 = v211;
        v41 = v210;
        v144 = v209;
        v47 = v404;
        v57 = v358;
        LOBYTE(v51) = v376;
        v52 = v396;
        v64 = v327;
        v59 = v342;
        v71 = v302;
        v66 = v314;
        v73 = v292;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v77 = 0;
      }
      goto LABEL_206;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v156 + 16))(v156, v37);
    v72 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v69 = v2[2];
    v42 = v186;
    v41 = v185;
    v47 = v184;
    v71 = 1;
    v57 = v352;
    LOBYTE(v51) = v369;
    v52 = v389;
    v64 = v322;
    v59 = v336;
    v66 = v309;
LABEL_67:
    if (v70)
      v73 = v72;
    else
      v73 = 0;
    v74 = v69 - (_QWORD)v37;
    if (v36 <= v74)
    {
      v297 = v73;
      v307 = v71;
      v319 = v66;
      v332 = v64;
      v347 = v59;
      v363 = v57;
      v240 = v52;
      v381 = v51;
      v241 = v47;
      v242 = v41;
      v243 = v42;
      v157 = 0;
      v244 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v244 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v244 + 16))(v244);
        v37 = (char *)*v2;
        v157 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v243;
      v41 = v242;
      LOBYTE(v51) = v381;
      v144 = v385;
      v47 = v241;
      v52 = v240;
      v59 = v347;
      v57 = v363;
      v66 = v319;
      v64 = v332;
      v73 = v297;
      v71 = v307;
      goto LABEL_204;
    }
    v75 = &v37[v74];
    v76 = (uint64_t)&v37[v74 + 1];
    v2[2] = v76;
    if (!v37)
    {
      v157 = v36;
      v144 = v385;
      goto LABEL_204;
    }
    v77 = *v75;
    if (v77 < 2)
    {
      v78 = 0;
      v79 = 1;
      goto LABEL_74;
    }
    v144 = v385;
LABEL_206:
    *v2 = 0;
    v2[1] = 0;
    v159 = v2[3];
    if (!v159)
    {
      v80 = 0;
      v160 = 0;
      v37 = 0;
      v78 = 1;
      goto LABEL_208;
    }
    v289 = v73;
    v299 = v71;
    v310 = v66;
    v323 = v64;
    v337 = v59;
    v353 = v57;
    v385 = v144;
    v390 = v52;
    v370 = v51;
    v191 = v47;
    v192 = v41;
    v193 = v42;
    if (!v36)
    {
      v80 = 0;
      v160 = 0;
      v37 = 0;
      v78 = 1;
LABEL_208:
      *v2 = 0;
      v2[1] = 0;
      v161 = v2[3];
      if (v161)
      {
        v277 = v80;
        v284 = v78;
        v293 = v73;
        v303 = v71;
        v315 = v66;
        v328 = v64;
        v343 = v59;
        v359 = v57;
        v397 = v52;
        v377 = v51;
        v405 = v47;
        v212 = v144;
        v213 = v41;
        v214 = v42;
        if (v160)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v161 + 16))(v161, v37, v160);
          v84 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v84 = 0;
        }
        v42 = v214;
        v41 = v213;
        v144 = v212;
        v47 = v405;
        v57 = v359;
        LOBYTE(v51) = v377;
        v52 = v397;
        v64 = v328;
        v59 = v343;
        v71 = v303;
        v66 = v315;
        v78 = v284;
        v73 = v293;
        v80 = v277;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v84 = 0;
      }
      goto LABEL_210;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v159 + 16))(v159, v37);
    v79 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v76 = v2[2];
    v42 = v193;
    v41 = v192;
    v47 = v191;
    v78 = 1;
    v57 = v353;
    LOBYTE(v51) = v370;
    v52 = v390;
    v64 = v323;
    v59 = v337;
    v71 = v299;
    v66 = v310;
    v73 = v289;
LABEL_74:
    if (v77)
      v80 = v79;
    else
      v80 = 0;
    v81 = v76 - (_QWORD)v37;
    if (v36 <= v81)
    {
      v280 = v80;
      v287 = v78;
      v296 = v73;
      v306 = v71;
      v318 = v66;
      v331 = v64;
      v346 = v59;
      v362 = v57;
      v235 = v52;
      v380 = v51;
      v236 = v47;
      v237 = v41;
      v238 = v42;
      v160 = 0;
      v239 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v239 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v239 + 16))(v239);
        v37 = (char *)*v2;
        v160 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v238;
      v41 = v237;
      LOBYTE(v51) = v380;
      v144 = v385;
      v47 = v236;
      v52 = v235;
      v59 = v346;
      v57 = v362;
      v66 = v318;
      v64 = v331;
      v73 = v296;
      v71 = v306;
      v80 = v280;
      v78 = v287;
      goto LABEL_208;
    }
    v82 = &v37[v81];
    v83 = (uint64_t)&v37[v81 + 1];
    v2[2] = v83;
    if (!v37)
    {
      v160 = v36;
      v144 = v385;
      goto LABEL_208;
    }
    v84 = *v82;
    if (v84 < 2)
    {
      v85 = 0;
      v86 = 1;
      goto LABEL_81;
    }
    v144 = v385;
LABEL_210:
    *v2 = 0;
    v2[1] = 0;
    v162 = v2[3];
    if (!v162)
    {
      v87 = 0;
      v163 = 0;
      v37 = 0;
      v85 = 1;
      goto LABEL_212;
    }
    v275 = v80;
    v282 = v78;
    v290 = v73;
    v300 = v71;
    v311 = v66;
    v324 = v64;
    v338 = v59;
    v354 = v57;
    v385 = v144;
    v392 = v52;
    v372 = v51;
    v197 = v47;
    v198 = v41;
    v199 = v42;
    if (!v36)
    {
      v163 = 0;
      v37 = 0;
      v87 = 0;
      v85 = 1;
LABEL_212:
      *v2 = 0;
      v2[1] = 0;
      v164 = v2[3];
      if (v164)
      {
        v268 = v87;
        v272 = v85;
        v278 = v80;
        v285 = v78;
        v294 = v73;
        v304 = v71;
        v316 = v66;
        v329 = v64;
        v344 = v59;
        v360 = v57;
        v398 = v52;
        v378 = v51;
        v406 = v47;
        v215 = v144;
        v216 = v41;
        v217 = v42;
        if (v163)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v164 + 16))(v164, v37, v163);
          v91 = 0;
          v37 = (char *)*v2;
          v36 = v2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v91 = 0;
        }
        v42 = v217;
        v41 = v216;
        v144 = v215;
        v47 = v406;
        v57 = v360;
        LOBYTE(v51) = v378;
        v52 = v398;
        v64 = v329;
        v59 = v344;
        v71 = v304;
        v66 = v316;
        v78 = v285;
        v73 = v294;
        v85 = v272;
        v80 = v278;
        v87 = v268;
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v91 = 0;
      }
      goto LABEL_214;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v162 + 16))(v162, v37);
    v86 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v83 = v2[2];
    v42 = v199;
    v41 = v198;
    v47 = v197;
    v85 = 1;
    v57 = v354;
    LOBYTE(v51) = v372;
    v52 = v392;
    v64 = v324;
    v59 = v338;
    v71 = v300;
    v66 = v311;
    v78 = v282;
    v73 = v290;
    v80 = v275;
LABEL_81:
    if (v84)
      v87 = v86;
    else
      v87 = 0;
    v88 = v83 - (_QWORD)v37;
    if (v36 <= v88)
    {
      v269 = v87;
      v273 = v85;
      v279 = v80;
      v286 = v78;
      v295 = v73;
      v305 = v71;
      v317 = v66;
      v330 = v64;
      v345 = v59;
      v361 = v57;
      v230 = v52;
      v379 = v51;
      v231 = v47;
      v232 = v41;
      v233 = v42;
      v163 = 0;
      v234 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v234 && v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v234 + 16))(v234);
        v37 = (char *)*v2;
        v163 = v2[1];
      }
      else
      {
        v37 = 0;
      }
      v42 = v233;
      v41 = v232;
      LOBYTE(v51) = v379;
      v144 = v385;
      v47 = v231;
      v52 = v230;
      v59 = v345;
      v57 = v361;
      v66 = v317;
      v64 = v330;
      v73 = v295;
      v71 = v305;
      v80 = v279;
      v78 = v286;
      v87 = v269;
      v85 = v273;
      goto LABEL_212;
    }
    v89 = &v37[v88];
    v90 = (uint64_t)&v37[v88 + 1];
    v2[2] = v90;
    if (!v37)
    {
      v163 = v36;
      v144 = v385;
      goto LABEL_212;
    }
    v91 = *v89;
    if (v91 < 2)
    {
      v92 = 0;
      v93 = 1;
      goto LABEL_88;
    }
    v144 = v385;
LABEL_214:
    *v2 = 0;
    v2[1] = 0;
    v165 = v2[3];
    if (!v165)
    {
      v166 = 0;
      v167 = 0;
      v37 = 0;
      v168 = 1;
      goto LABEL_216;
    }
    v267 = v87;
    v271 = v85;
    v276 = v80;
    v283 = v78;
    v291 = v73;
    v301 = v71;
    v312 = v66;
    v325 = v64;
    v340 = v59;
    v356 = v57;
    v385 = v144;
    v394 = v52;
    v374 = v51;
    v203 = v47;
    v204 = v41;
    v205 = v42;
    if (!v36)
    {
      v167 = 0;
      v37 = 0;
      v166 = 0;
      v168 = 1;
      v87 = v267;
      v85 = v271;
      goto LABEL_216;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v165 + 16))(v165, v37);
    v93 = 0;
    v37 = (char *)*v2;
    v36 = v2[1];
    v90 = v2[2];
    v42 = v205;
    v41 = v204;
    v47 = v203;
    v92 = 1;
    v57 = v356;
    LOBYTE(v51) = v374;
    v52 = v394;
    v64 = v325;
    v59 = v340;
    v71 = v301;
    v66 = v312;
    v78 = v283;
    v73 = v291;
    v85 = v271;
    v80 = v276;
    v87 = v267;
LABEL_88:
    if (!v91)
      v93 = 0;
    v94 = v90 - (_QWORD)v37;
    v350 = v57;
    v366 = v51;
    v321 = v64;
    v334 = v59;
    v298 = v71;
    v308 = v66;
    v281 = v78;
    v288 = v73;
    v270 = v85;
    v274 = v80;
    v265 = v92;
    v266 = v87;
    v264 = v93;
    if (v36 <= v94)
    {
      v225 = v52;
      v226 = v47;
      v227 = v41;
      v228 = v42;
      v167 = 0;
      v229 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (!v229)
        goto LABEL_396;
      if (v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v229 + 16))(v229);
        v37 = (char *)*v2;
        v167 = v2[1];
      }
      else
      {
LABEL_396:
        v37 = 0;
      }
      v42 = v228;
      v41 = v227;
      LOBYTE(v51) = v366;
      v144 = v385;
      v47 = v226;
      v52 = v225;
    }
    else
    {
      v386 = v52;
      v399 = v42;
      v400 = v47;
      v95 = v41;
      v96 = v20;
      v20 = v14;
      v97 = v15;
      v15 = (unint64_t)v9;
      v98 = &v37[v94];
      v2[2] = (uint64_t)(v98 + 1);
      if (v37)
      {
        v99 = *v98;
        if (v99 < 3)
        {
          v2 = 0;
          goto LABEL_94;
        }
        LODWORD(v15) = v97;
        LOBYTE(v20) = v96;
        v144 = v385;
        goto LABEL_302;
      }
      v167 = v36;
      LODWORD(v15) = v97;
      LOBYTE(v20) = v96;
      v144 = v385;
    }
    v59 = v334;
    v57 = v350;
    v66 = v308;
    v64 = v321;
    v73 = v288;
    v71 = v298;
    v80 = v274;
    v78 = v281;
    v87 = v266;
    v85 = v270;
    v166 = v264;
    v168 = v265;
LABEL_216:
    *v2 = 0;
    v2[1] = 0;
    v169 = v2[3];
    if (v169)
    {
      v264 = v166;
      v265 = v168;
      v266 = v87;
      v270 = v85;
      v274 = v80;
      v281 = v78;
      v288 = v73;
      v298 = v71;
      v308 = v66;
      v321 = v64;
      v334 = v59;
      v350 = v57;
      v386 = v52;
      v366 = v51;
      v218 = v47;
      v219 = v144;
      v220 = v41;
      v221 = v42;
      if (v167)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v169 + 16))(v169, v37, v167);
        v37 = (char *)*v2;
        v36 = v2[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      v42 = v221;
      v41 = v220;
      v144 = v219;
      v47 = v218;
LABEL_302:
      v57 = v350;
      LOBYTE(v51) = v366;
      v52 = v386;
      v64 = v321;
      v59 = v334;
      v71 = v298;
      v66 = v308;
      v78 = v281;
      v73 = v288;
      v85 = v270;
      v80 = v274;
      v168 = v265;
      v87 = v266;
      v166 = v264;
      goto LABEL_218;
    }
    v36 = 0;
    v37 = 0;
LABEL_218:
    *v2 = 0;
    v2[1] = 0;
    v170 = v2[3];
    if (!v170)
      break;
    if (!v36)
      break;
    v264 = v166;
    v265 = v168;
    v266 = v87;
    v270 = v85;
    v274 = v80;
    v281 = v78;
    v288 = v73;
    v298 = v71;
    v308 = v66;
    v321 = v64;
    v334 = v59;
    v350 = v57;
    v385 = v144;
    v386 = v52;
    v366 = v51;
    v399 = v42;
    v400 = v47;
    v95 = v41;
    v96 = v20;
    v20 = v14;
    v97 = v15;
    v15 = (unint64_t)v9;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v170 + 16))(v170, v37);
    if (!*v2)
      break;
    LOBYTE(v99) = 0;
    v2 = (uint64_t *)1;
LABEL_94:
    LODWORD(v415) = 0;
    WebCore::GraphicsContextState::GraphicsContextState();
    if (!v452)
      goto LABEL_140;
    v14 = &v416;
    v9 = v450;
    WebCore::Color::operator=();
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v418, (uint64_t)&v451);
    if (!v449)
      goto LABEL_140;
    v14 = &v416;
    v9 = v447;
    WebCore::Color::operator=();
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v422, (uint64_t)&v448);
    if ((v15 & 0x100000000) == 0)
      goto LABEL_140;
    v422[18] = v15;
    if (v20)
      goto LABEL_140;
    v422[19] = v97;
    if (v408 <= 0xFFu)
      goto LABEL_140;
    v423 = v408;
    if (v21)
      goto LABEL_140;
    v424 = v96;
    if ((v407 & 0xFF0000) == 0)
      goto LABEL_140;
    v425 = v407;
    if (!v414)
      goto LABEL_140;
    if (v429 == v413)
    {
      if (v429)
      {
        v426 = v410;
        v427 = v411;
        WebCore::Color::operator=();
        v428 = v412;
      }
    }
    else if (v429)
    {
      std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::reset[abi:sn180100]((uint64_t)&v426, v100);
    }
    else
    {
      v426 = v410;
      v427 = v411;
      WebCore::Color::Color();
      v428 = v412;
      v429 = 1;
    }
    if (!v446)
      goto LABEL_140;
    if (v432 == v445)
    {
      if (v432)
      {
        if (v431 == -1)
        {
          if (v444 == -1)
            goto LABEL_117;
        }
        else if (v444 == -1)
        {
          ((void (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v431])(&v415, v430);
          v431 = -1;
          goto LABEL_117;
        }
        v415 = v430;
        ((void (*)(_BYTE **, _BYTE *, _BYTE *))off_1E34AE080[v444])(&v415, v430, v443);
      }
    }
    else if (v432)
    {
      if (v431 != -1)
        ((void (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v431])(&v415, v430);
      v431 = -1;
      v432 = 0;
    }
    else
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v430, (uint64_t)v443);
      v432 = 1;
    }
LABEL_117:
    if (!v95)
    {
      v433 = v399;
      if (!v400)
      {
        v434 = v385;
        if (!v386)
        {
          v435 = v366;
          if (!v350)
          {
            v436 = v334;
            if (!v321)
            {
              v437 = v308;
              if (!v298)
              {
                v438 = v288;
                if (!v281)
                {
                  v439 = v274;
                  if (!v270)
                  {
                    v440 = v266;
                    if (!v265)
                    {
                      v441 = v264;
                      if (!(_DWORD)v2)
                      {
                        v442 = v99;
                        WebCore::GraphicsContextState::GraphicsContextState((uint64_t)a2, (uint64_t)&v416);
                        a2[344] = 1;
                        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)&v416, v101);
                        goto LABEL_128;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_140:
    __break(1u);
LABEL_141:
    IPC::Decoder::decode<WebCore::GraphicsDropShadow>((uint64_t)&v416, (unint64_t *)v2);
    v29 = v419;
    if (v419)
    {
      v410 = v416;
      v411 = v417;
      WebCore::Color::Color();
      v412 = v418[1];
      v29 = 1;
      v413 = 1;
    }
    else
    {
      LOBYTE(v410) = 0;
    }
  }
  *a2 = 0;
  a2[344] = 0;
LABEL_128:
  if (v446 && v445 && v444 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v444])(&v416, v443);
  if (v414)
    std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v410, v37);
  std::__optional_destruct_base<WebCore::SourceBrush,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v447, v37);
  return std::__optional_destruct_base<WebCore::SourceBrush,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v450, v102);
}

void sub_196C11184(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,char a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,char a41)
{
  uint64_t v41;
  void *v43;

  if (a41 && a39 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a39])(&a27, &a29);
  if (a25)
    std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20, a2);
  std::__optional_destruct_base<WebCore::SourceBrush,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x250], a2);
  std::__optional_destruct_base<WebCore::SourceBrush,false>::~__optional_destruct_base[abi:sn180100](v41 - 192, v43);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::SourceBrush,void>::decode(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[8];
  char v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[3];
  unsigned __int8 v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  int v69;
  char v70[8];
  _OWORD v71[4];
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v50);
  if (!v51)
  {
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v22 != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  }
  v4 = a2[1];
  v5 = (_BYTE *)*a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v25 = 0;
    v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a2;
        v25 = a2[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_52;
  }
  v7 = &v5[v6];
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v25 = v4;
    v26 = 0;
LABEL_52:
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v25)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
    goto LABEL_53;
  }
  v8 = *v7;
  if (v8 >= 3)
  {
LABEL_53:
    v70[0] = 0;
    v73 = 0;
    goto LABEL_7;
  }
  if (!*v7)
  {
    v72 = 0;
    v73 = 1;
    goto LABEL_7;
  }
  if (v8 != 1)
    goto LABEL_89;
  if (v4 <= v7 + 1 - v5)
  {
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v44 = *a2;
      v45 = a2[1];
      v46 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v46)
      {
        if (v45)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
      }
    }
  }
  else
  {
    v10 = v7 + 2;
    a2[2] = (uint64_t)(v7 + 2);
    v11 = v7[1];
    if (v11 < 2)
    {
      if (v11)
      {
        v12 = ((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
        if (v4 < v12 || v4 - v12 <= 7)
        {
          v40 = 0;
          v41 = 0;
          *a2 = 0;
          a2[1] = 0;
          v42 = a2[3];
          if (v42)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
            v40 = 0;
            v47 = *a2;
            v48 = a2[1];
            v49 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            v41 = 0;
            if (v49)
            {
              if (v48)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, v47, v48, 0);
                if (*a2)
                  goto LABEL_88;
                v41 = 0;
                v40 = a2[1];
              }
            }
          }
        }
        else
        {
          v13 = *(_QWORD *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
          a2[2] = ((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((unint64_t)(v13 - 1) < 0xFFFFFFFFFFFFFFFELL)
          {
            v59 = v13;
            v14 = 1;
            v60 = 1;
            goto LABEL_26;
          }
          v40 = v4;
          v41 = v5;
        }
        *a2 = 0;
        a2[1] = 0;
        v43 = a2[3];
        if (v43 && v40)
          (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v43 + 16))(v43, v41, v40);
        v14 = 0;
      }
      else
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>((unint64_t *)a2, (uint64_t)&v52);
        v14 = v53;
        if ((_BYTE)v53)
        {
          v17 = v52;
          v52 = 0;
          v59 = v17;
          v60 = 0;
          WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v52, v16);
          v14 = 1;
          goto LABEL_26;
        }
      }
      LOBYTE(v59) = 0;
LABEL_26:
      v61 = v14;
      if (v14)
        goto LABEL_27;
      goto LABEL_60;
    }
  }
  LOBYTE(v59) = 0;
  v61 = 0;
LABEL_60:
  v32 = *a2;
  v33 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v34 = a2[3];
  if (v34 && v33)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
LABEL_27:
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a2, (uint64_t)v57);
  v15 = v58;
  if (!v58)
  {
    v35 = *a2;
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
    }
  }
  if (*a2)
  {
    if (!v61)
      goto LABEL_88;
    std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100]((uint64_t)&v52, (uint64_t)&v59);
    if (!v15)
      goto LABEL_88;
    v54 = v57[0];
    v55 = v57[1];
    v56 = v57[2];
    std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100]((uint64_t)&v63, (uint64_t)&v52);
    v65 = v54;
    v66 = v55;
    v67 = v56;
    v68 = 1;
    if (v53 != -1)
      ((void (*)(char *, uint64_t *))off_1E34AE060[v53])(&v62, &v52);
  }
  else
  {
    LOBYTE(v63) = 0;
    v68 = 0;
  }
  if (v61 && v60 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34AE060[v60])(&v52, &v59);
  if (!v68)
  {
    v5 = (_BYTE *)*a2;
    v38 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v39 = a2[3];
    if (!v39)
      goto LABEL_53;
    if (!v38)
      goto LABEL_53;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v39 + 16))(v39, v5);
    if (!v68)
      goto LABEL_53;
  }
  std::__variant_detail::__impl<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>::__impl[abi:sn180100]((uint64_t)v71, (uint64_t)&v63);
  v71[1] = v65;
  v71[2] = v66;
  v71[3] = v67;
  v72 = 1;
  v73 = 1;
  if (v68 && v64 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34AE060[v64])(&v52, &v63);
  while (1)
  {
LABEL_7:
    if (!v73)
    {
      v5 = (_BYTE *)*a2;
      v29 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v30 = a2[3];
      if (v30)
      {
        if (v29)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v30 + 16))(v30, v5);
      }
    }
    if (!*a2)
    {
      *a1 = 0;
      a1[88] = 0;
      goto LABEL_14;
    }
    if (v51 && v73)
      break;
LABEL_88:
    __break(1u);
LABEL_89:
    IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::decode<IPC::Decoder,0ul,1ul>((uint64_t)v70, a2);
  }
  WebCore::SourceBrush::SourceBrush();
  WebCore::Color::Color();
  std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100]((uint64_t)(a1 + 16), (uint64_t)&v65);
  a1[88] = 1;
  if (v69 != -1)
    ((void (*)(uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v69])(&v52, &v65);
  v69 = -1;
  if ((v63 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v5);
    }
  }
LABEL_14:
  if (v73 && v72 != -1)
    ((void (*)(uint64_t *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v72])(&v63, v71);
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v5);
}

void sub_196C11868(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a39)
  {
    if (a32 != -1)
      ((void (*)(char *, char *))off_1E34AE060[a32])(&a11, &a30);
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_196C11998()
{
  JUMPOUT(0x196C11988);
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = WebCore::Color::Color();
  std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](v4 + 16, a2 + 16);
  WebCore::Color::Color();
  std::__variant_detail::__impl<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>::__impl[abi:sn180100](a1 + 104, a2 + 104);
  v5 = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v5;
  std::__optional_move_base<WebCore::GraphicsDropShadow,false>::__optional_move_base[abi:sn180100](a1 + 192, (uint64_t *)(a2 + 192));
  std::__optional_move_base<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 232), a2 + 232);
  v6 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 333) = *(_QWORD *)(a2 + 333);
  *(_QWORD *)(a1 + 328) = v6;
  return a1;
}

void sub_196C11A54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100](v16, a2);
  v19 = *(unsigned int *)(v13 + 168);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v19])(&a12, v15);
  *(_DWORD *)(v13 + 168) = -1;
  v20 = *(_QWORD *)(v13 + 88);
  if ((v20 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v18);
    }
  }
  v24 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v24])(&a13, v14);
  *(_DWORD *)(v13 + 80) = -1;
  if ((*(_QWORD *)v13 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(*(_QWORD *)v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::GraphicsDropShadow>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  char v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE v45[8];
  unsigned __int8 v46;

  v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v6 = v5;
  v7 = a2[1];
  v8 = *a2;
  v9 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    v11 = (int *)(v8 + v9);
    a2[2] = (unint64_t)(v11 + 1);
    if (v8)
    {
      v12 = 0;
      v13 = *v11;
      goto LABEL_8;
    }
    v29 = v7;
    v30 = 0;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v8, v7);
        v30 = *a2;
        v29 = a2[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v32 = a2[3];
  if (v32 && v29)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
  v13 = 0;
  v12 = 1;
LABEL_8:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, v45);
  if (!v46)
  {
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v27)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    }
  }
  LOWORD(v41) = 0;
  IPC::Decoder::operator>><BOOL>(a2, &v41);
  v14 = BYTE1(v41);
  v15 = a2[1];
  if (BYTE1(v41))
  {
    v16 = v41;
  }
  else
  {
    v33 = *a2;
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34)
    {
      if (v15)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
        v16 = 0;
        v15 = a2[1];
        goto LABEL_11;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 0;
  }
LABEL_11:
  v17 = (void *)*a2;
  v18 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v15 < v18 || v15 - v18 <= 3)
  {
    v35 = 0;
    v36 = 0;
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v15)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *a2;
        v35 = a2[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
  }
  else
  {
    v19 = (unint64_t)v17 + v18;
    a2[2] = v19 + 4;
    if (v17)
    {
      v20 = 0;
      v21 = *(_DWORD *)v19;
      goto LABEL_15;
    }
    v35 = v15;
    v36 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v38 = a2[3];
  if (!v38
    || !v35
    || ((*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35), (v19 = *a2) == 0))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_21;
  }
  v21 = 0;
  v20 = 1;
LABEL_15:
  if (v6
    && (v41 = v4, !v12)
    && (v42 = v13, (v19 = v46) != 0)
    && (WebCore::Color::Color(), v14)
    && (LOBYTE(v44) = v16, !v20))
  {
    HIDWORD(v44) = v21;
    *(_QWORD *)a1 = v41;
    *(_DWORD *)(a1 + 8) = v42;
    WebCore::Color::Color();
    v19 = v43;
    *(_QWORD *)(a1 + 24) = v44;
    *(_BYTE *)(a1 + 32) = 1;
    if ((v19 & 0x8000000000000) == 0)
      goto LABEL_21;
  }
  else
  {
    __break(1u);
  }
  v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v17);
  }
LABEL_21:
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v45, v17);
  if (!*(_BYTE *)(a1 + 32))
  {
    v39 = *a2;
    v40 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v40)
        return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v39);
    }
  }
  return result;
}

void sub_196C11EA8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *IPC::StreamClientConnection::StreamConnectionPair::StreamConnectionPair(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  a1[3] = a2[3];
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::cancelPolicyCheck(CFTypeRef **this)
{
  WebKit::WebFrame::invalidatePolicyListeners(this[2]);
}

uint64_t WebKit::GPUProcessPreferences::copyEnabledWebPreferences(WebKit::GPUProcessPreferences *this, const WebKit::WebPreferences *a2, const WTF::StringImpl *a3)
{
  WebKit::WebPreferencesStore *v4;
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t result;

  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v4 = (const WebKit::WebPreferences *)((char *)a2 + 40);
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, a3))*(_WORD *)this = 257;
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, v5))*((_WORD *)this + 1) = 257;
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, v6))*((_WORD *)this + 2) = 257;
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, v7))*((_WORD *)this + 3) = 257;
  {
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key, v8))*((_WORD *)this + 4) = 257;
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, v9))*((_WORD *)this + 5) = 257;
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, v10))*((_WORD *)this + 6) = 257;
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v11))*((_WORD *)this + 7) = 257;
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v12))*((_WORD *)this + 8) = 257;
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, v13);
  if ((_DWORD)result)
    *((_BYTE *)this + 18) = 1;
  return result;
}

uint64_t WebKit::WebPreferencesStore::getBoolValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v5;
  uint64_t v6;

  {
    WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
  }
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&WebKit::BOOLTestRunnerOverridesMap(void)::map, a2, a3);
  {
    v6 = WebKit::BOOLTestRunnerOverridesMap(void)::map;
    if (WebKit::BOOLTestRunnerOverridesMap(void)::map)
      v6 = WebKit::BOOLTestRunnerOverridesMap(void)::map
         + 16 * *(unsigned int *)(WebKit::BOOLTestRunnerOverridesMap(void)::map - 4);
  }
  else
  {
    v6 = 0;
    WebKit::BOOLTestRunnerOverridesMap(void)::map = 0;
  }
  if ((WTF *)v6 == v5)
    return WebKit::valueForKey<BOOL>((uint64_t)this, (uint64_t)this + 24, a2);
  else
    return *((unsigned __int8 *)v5 + 8);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *result;
  uint64_t v5;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  v5 = *a1;
  if (!result)
  {
    if (v5)
      return (WTF *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 != (uint64_t *)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    v6 = *a2;
    if (v4)
    {
      v7 = v6 + 24 * v4;
      v8 = *(WTF::StringImpl ***)a1;
      do
      {
        WTF::String::operator=(v8, (WTF::StringImpl *)v6);
        WTF::String::operator=(v8 + 1, (WTF::StringImpl *)(v6 + 8));
        WTF::String::operator=(v8 + 2, (WTF::StringImpl *)(v6 + 16));
        v6 += 24;
        v8 += 3;
      }
      while (v6 != v7);
      v6 = *a2;
      v4 = *(_DWORD *)(a1 + 12);
    }
    v9 = *((_DWORD *)a2 + 3);
    if (v4 != v9)
    {
      v10 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
      v11 = v6 + 24 * v4;
      v12 = 24 * v9 - 24 * v4;
      do
      {
        v10 = WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(v10, v11) + 3;
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
      v4 = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

_QWORD *WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(_QWORD *result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *result = v2;
  v3 = *(_DWORD **)(a2 + 8);
  if (v3)
    *v3 += 2;
  result[1] = v3;
  v4 = *(_DWORD **)(a2 + 16);
  if (v4)
    *v4 += 2;
  result[2] = v4;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  WTF *v7;
  uint64_t v8;
  int v9;
  char v10;

  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  v3 = *(WTF **)a1;
  *(_QWORD *)a1 = v7;
  v7 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v8 = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  v9 = v5;
  LOBYTE(v5) = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(a1 + 20) = v10;
  v10 = v5;
  if (v3)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  return a1;
}

uint64_t WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t result;
  _QWORD v3[2];

  if ((byte_1ECE72D44 & 1) == 0)
  {
    v3[0] = 0;
    qword_1ECE72D80 = 0;
    v3[1] = 0;
    unk_1ECE72D88 = 0;
    result = WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1ECE72D44 = 1;
  }
  return result;
}

void WebKit::WebPageCreationParameters::~WebPageCreationParameters(const char ***this)
{
  void *v2;
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 185);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 183), v2);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 181), v3);
  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 149), v4);
  v6 = (WTF::StringImpl *)this[145];
  this[145] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*((_BYTE *)this + 1144))
  {
    v7 = (WTF::StringImpl **)this[140];
    if (v7)
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v7, (WTF::StringImpl *)*((unsigned int *)this + 282));
  }
  v8 = (WTF::StringImpl **)this[138];
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 136), v5);
  v10 = (WTF::StringImpl *)this[135];
  this[135] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 131), v9);
  if (*((_BYTE *)this + 1040))
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 128), v11);
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 124), (WTF::StringImpl *)v11);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 122), v12);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 120), v13);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)this + 236, v14);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 116), v15);
  if (*((_BYTE *)this + 904))
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)(this + 80), v16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 78), v16);
  v18 = (WTF::StringImpl **)this[77];
  if (v18)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v17);
  v19 = (WTF::StringImpl *)this[74];
  this[74] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 71), v17);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 69), v20);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 67), v21);
  v23 = (unint64_t)this[65];
  if ((v23 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v22);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 44), v22);
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 29), v24);
  v26 = (WTF::StringImpl *)this[27];
  this[27] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (unint64_t)this[14];
  if ((v27 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v25);
    }
  }
  v28 = (WTF::StringImpl *)this[11];
  this[11] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF *)this[5];
  if (v29)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v29, (WTF::StringImpl *)*((unsigned int *)this + 12));
  v30 = (WTF *)this[2];
  if (v30)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v30, (WTF::StringImpl *)*((unsigned int *)this + 6));
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 120 * v3;
    do
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)v6 + 10);
      *((_QWORD *)v6 + 10) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (unsigned int *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v9)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
      v10 = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v6 = (WTF *)((char *)v6 + 120);
      v7 -= 120;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 120 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 312 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

BOOL WebKit::defaultDisallowSyncXHRDuringPageDismissalEnabled(WebKit *this)
{
  _BOOL4 v1;

  v1 = WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(this);
  if (v1)
    WTFLogAlways();
  return !v1;
}

BOOL WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(WebKit *this)
{
  _BOOL8 result;
  int v2;

  {
    if (HIBYTE(WebKit::cachedAllowsRequest(void)::allowsRequest))
      return (_BYTE)WebKit::cachedAllowsRequest(void)::allowsRequest != 0;
  }
  else
  {
    WebKit::cachedAllowsRequest(void)::allowsRequest = 0;
  }
  v2 = objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(WebKit *))*MEMORY[0x1E0DCE080])(this), "sharedConnection"), "effectiveBoolValueForSetting:", CFSTR("allowDeprecatedWebKitSynchronousXHRLoads"));
  result = v2 == 1;
  WebKit::cachedAllowsRequest(void)::allowsRequest = (v2 == 1) | 0x100;
  return result;
}

void WebKit::PageClientImpl::insertionPointColor(id *this@<X0>, uint64_t *a2@<X8>)
{
  id WeakRetained;
  WebCore *v4;
  CGColor *v5;
  uint64_t v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v4 = (WebCore *)objc_msgSend((id)objc_msgSend(WeakRetained, "_insertionPointColor"), "CGColor");
  v6 = WebCore::roundAndClampToSRGBALossy(v4, v5);
  v7 = bswap32(v6) | 0x1104000000000000;
  if (!BYTE4(v6))
    v7 = 0;
  *a2 = v7;
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C12B64(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;

  v3 = result;
  if (*a2)
  {
    v4 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)v3 + 2) = v4;
      *v3 = v5;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v7 = *a2;
  if (*a2)
    v7 += *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    v8 = *v3;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = (_DWORD *)*result;
      if (*result)
        *v10 += 2;
      *(_QWORD *)(v8 + 8 * v9) = v10;
      while (++result != v6)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_16;
      }
      result = v6;
LABEL_16:
      ++v9;
    }
    while (result != v7);
    *((_DWORD *)v3 + 3) = v9;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WebKit::PageClientImpl::hasResizableWindows(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v2 = objc_msgSend(WeakRetained, "_isWindowResizingEnabled");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_196C12D50(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebUserContentControllerProxy::parameters@<X0>(WebKit::WebUserContentControllerProxy *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  _OWORD *v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t *v63;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  unsigned int *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  uint64_t v84;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  __int128 v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  __int128 v105;
  char v106;
  uint64_t v107;

  *(_OWORD *)(a3 + 8) = 0u;
  v4 = (WTF::StringImpl **)(a3 + 8);
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = *((_QWORD *)this + 4);
  v94 = 0uLL;
  v5 = (uint64_t *)*((_QWORD *)this + 10);
  if (v5)
  {
    v6 = *((unsigned int *)v5 - 3);
    if ((_DWORD)v6)
    {
      if (v6 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x196C134FCLL);
      }
      v18 = WTF::fastMalloc((WTF *)(16 * v6));
      DWORD2(v94) = v6;
      *(_QWORD *)&v94 = v18;
      v5 = (uint64_t *)*((_QWORD *)this + 10);
      if (!v5)
        goto LABEL_25;
      v7 = v18;
    }
    else
    {
      v7 = 0;
    }
    if (*((_DWORD *)v5 - 3))
    {
      v8 = *((unsigned int *)v5 - 1);
      v9 = v5;
      if ((_DWORD)v8)
      {
        v10 = 8 * v8;
        v9 = v5;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          ++v9;
          v10 -= 8;
          if (!v10)
            goto LABEL_25;
        }
      }
      v11 = &v5[v8];
      if (v11 != v9)
      {
        v12 = 0;
        while (1)
        {
          v107 = *v9;
          {
            API::sharedWorldIdentifierMap(void)::sharedMap = 0;
          }
          v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&API::sharedWorldIdentifierMap(void)::sharedMap, &v107);
          if (!v13)
            break;
          v15 = *(_QWORD *)(v13 + 24);
          v14 = *(_DWORD **)(v13 + 32);
          if (v14)
            *v14 += 2;
          v16 = (_QWORD *)(v7 + 16 * v12);
          *v16 = v15;
          v16[1] = v14;
          ++v12;
          do
          {
            if (++v9 == v11)
              goto LABEL_26;
          }
          while ((unint64_t)(*v9 + 1) <= 1);
          if (v9 == v11)
            goto LABEL_26;
        }
        __break(0xC471u);
LABEL_133:
        JUMPOUT(0x196C134F4);
      }
    }
  }
LABEL_25:
  v12 = 0;
LABEL_26:
  v19 = *(unsigned int *)(a3 + 20);
  v20 = *(WTF::StringImpl **)(a3 + 8);
  if ((_DWORD)v19)
  {
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(v20, (WTF::StringImpl *)((char *)v20 + 16 * v19));
    v20 = *v4;
  }
  if (v20)
    WTF::fastFree(v20, a2);
  *(_QWORD *)(a3 + 8) = v94;
  v21 = DWORD2(v94);
  v94 = 0uLL;
  *(_DWORD *)(a3 + 16) = v21;
  *(_DWORD *)(a3 + 20) = v12;
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, a2);
  v23 = *((_QWORD *)this + 7);
  v24 = *(uint64_t **)(v23 + 16);
  v25 = *(unsigned int *)(v23 + 28);
  v26 = &v24[v25];
  if ((_DWORD)v25)
  {
    v27 = 8 * v25;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v24 + 16))(*v24) != 28)
    {
      ++v24;
      v27 -= 8;
      if (!v27)
      {
        v24 = v26;
        break;
      }
    }
    v28 = v24;
    v24 = *(uint64_t **)(v23 + 16);
    v29 = *(unsigned int *)(v23 + 28);
  }
  else
  {
    v29 = 0;
    v28 = *(uint64_t **)(v23 + 16);
  }
  v30 = &v24[v29];
  while (v28 != v30)
  {
    v31 = *v28;
    v32 = *(_QWORD *)(*(_QWORD *)(*v28 + 112) + 24);
    *(_QWORD *)&v94 = *(_QWORD *)(*v28 + 16);
    *((_QWORD *)&v94 + 1) = v32;
    WebCore::UserScript::UserScript((uint64_t)&v95, v31 + 24);
    v33 = *(_DWORD *)(a3 + 36);
    if (v33 == *(_DWORD *)(a3 + 32))
    {
      WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>(a3 + 24, (unint64_t)&v94);
    }
    else
    {
      v35 = (_OWORD *)(*(_QWORD *)(a3 + 24) + 104 * v33);
      *v35 = v94;
      WebCore::UserScript::UserScript((uint64_t)(v35 + 1), (uint64_t *)&v95);
      ++*(_DWORD *)(a3 + 36);
    }
    WebCore::UserScript::~UserScript((WebCore::UserScript *)&v95, v34);
    v36 = v28 + 1;
    while (v36 - 1 != v26 && v36 != v26)
    {
      v38 = *v36++;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38) == 28)
      {
        v28 = v36 - 1;
        goto LABEL_49;
      }
    }
    v28 = v26;
LABEL_49:
    ;
  }
  v39 = *((_QWORD *)this + 8);
  v40 = *(uint64_t **)(v39 + 16);
  v41 = *(unsigned int *)(v39 + 28);
  v42 = &v40[v41];
  if ((_DWORD)v41)
  {
    v43 = 8 * v41;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v40 + 16))(*v40) != 29)
    {
      ++v40;
      v43 -= 8;
      if (!v43)
      {
        v40 = v42;
        break;
      }
    }
    v44 = v40;
    v40 = *(uint64_t **)(v39 + 16);
    v45 = *(unsigned int *)(v39 + 28);
  }
  else
  {
    v45 = 0;
    v44 = *(uint64_t **)(v39 + 16);
  }
  v46 = &v40[v45];
  while (v44 != v46)
  {
    v47 = *v44;
    v48 = *(_QWORD *)(*(_QWORD *)(*v44 + 128) + 24);
    v49 = *(WTF::StringImpl **)(*v44 + 24);
    *(_QWORD *)&v94 = *(_QWORD *)(*v44 + 16);
    *((_QWORD *)&v94 + 1) = v48;
    if (v49)
      *(_DWORD *)v49 += 2;
    v95 = v49;
    v50 = *(WTF::StringImpl **)(v47 + 32);
    if (v50)
      *(_DWORD *)v50 += 2;
    v96 = v50;
    v51 = *(_OWORD *)(v47 + 56);
    v97 = *(_OWORD *)(v47 + 40);
    v98 = v51;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v99, v47 + 72);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v102, v47 + 88);
    v52 = *(_OWORD *)(v47 + 104);
    v106 = *(_BYTE *)(v47 + 120);
    v105 = v52;
    v53 = *(_DWORD *)(a3 + 52);
    if (v53 == *(_DWORD *)(a3 + 48))
    {
      WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>(a3 + 40, (unint64_t)&v94);
    }
    else
    {
      v55 = *(_QWORD *)(a3 + 40) + 120 * v53;
      *(_OWORD *)v55 = v94;
      v56 = v95;
      v95 = 0;
      *(_QWORD *)(v55 + 16) = v56;
      WTF::URL::URL(v55 + 24, (uint64_t *)&v96);
      *(_QWORD *)(v55 + 64) = 0;
      *(_QWORD *)(v55 + 72) = 0;
      v57 = v99;
      v99 = 0;
      *(_QWORD *)(v55 + 64) = v57;
      LODWORD(v57) = v100;
      v100 = 0;
      *(_DWORD *)(v55 + 72) = v57;
      LODWORD(v57) = v101;
      v101 = 0;
      *(_DWORD *)(v55 + 76) = v57;
      *(_QWORD *)(v55 + 80) = 0;
      *(_QWORD *)(v55 + 88) = 0;
      v58 = v102;
      v102 = 0;
      *(_QWORD *)(v55 + 80) = v58;
      LODWORD(v58) = v103;
      v103 = 0;
      *(_DWORD *)(v55 + 88) = v58;
      LODWORD(v58) = v104;
      v104 = 0;
      *(_DWORD *)(v55 + 92) = v58;
      v59 = v105;
      *(_BYTE *)(v55 + 112) = v106;
      *(_OWORD *)(v55 + 96) = v59;
      ++*(_DWORD *)(a3 + 52);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v102, v54);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v60);
    v61 = v96;
    v96 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v22);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = v95;
    v95 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v22);
      else
        *(_DWORD *)v62 -= 2;
    }
    v63 = v44 + 1;
    while (v63 - 1 != v42 && v63 != v42)
    {
      v65 = *v63++;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65) == 29)
      {
        v44 = v63 - 1;
        goto LABEL_81;
      }
    }
    v44 = v42;
LABEL_81:
    ;
  }
  v66 = (_QWORD *)*((_QWORD *)this + 9);
  if (!v66)
  {
    v68 = 0;
    v69 = 0;
    goto LABEL_92;
  }
  v67 = *((unsigned int *)v66 - 3);
  if ((_DWORD)v67)
  {
    if (v67 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      goto LABEL_133;
    }
    v92 = 24 * v67;
    v68 = WTF::fastMalloc((WTF *)(24 * v67));
    v69 = (v92 & 0xFFFFFFF8) / 0x18;
    v66 = (_QWORD *)*((_QWORD *)this + 9);
    if (!v66)
      goto LABEL_92;
  }
  else
  {
    v68 = 0;
    v69 = 0;
  }
  if (!*((_DWORD *)v66 - 3))
    goto LABEL_92;
  v70 = *((unsigned int *)v66 - 1);
  v71 = v66;
  if ((_DWORD)v70)
  {
    v72 = 16 * v70;
    v71 = v66;
    while ((unint64_t)(*v71 + 1) <= 1)
    {
      v71 += 2;
      v72 -= 16;
      if (!v72)
        goto LABEL_92;
    }
  }
  v86 = &v66[2 * v70];
  if (v86 == v71)
  {
LABEL_92:
    v73 = 0;
    goto LABEL_93;
  }
  v73 = 0;
LABEL_115:
  v87 = v71[1];
  if (v87)
    ++*(_DWORD *)(v87 + 8);
  v88 = *(_QWORD *)(v87 + 16);
  v89 = *(_DWORD **)(v87 + 32);
  v90 = *(_QWORD *)(*(_QWORD *)(v87 + 40) + 24);
  if (v89)
    *v89 += 2;
  v91 = (_QWORD *)(v68 + 24 * v73);
  *v91 = v88;
  v91[1] = v90;
  v91[2] = v89;
  if (*(_DWORD *)(v87 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  else
    --*(_DWORD *)(v87 + 8);
  ++v73;
  while (1)
  {
    v71 += 2;
    if (v71 == v86)
      break;
    if ((unint64_t)(*v71 + 1) > 1)
    {
      if (v71 != v86)
        goto LABEL_115;
      break;
    }
  }
LABEL_93:
  v74 = *(_DWORD *)(a3 + 68);
  if (v74)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)(a3 + 56), (WTF::StringImpl *)(*(_QWORD *)(a3 + 56) + 24 * v74));
  v75 = *(WTF **)(a3 + 56);
  if (v75)
  {
    *(_QWORD *)(a3 + 56) = 0;
    *(_DWORD *)(a3 + 64) = 0;
    WTF::fastFree(v75, v22);
  }
  v94 = 0uLL;
  *(_QWORD *)(a3 + 56) = v68;
  *(_DWORD *)(a3 + 64) = v69;
  *(_DWORD *)(a3 + 68) = v73;
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v22);
  WebKit::WebUserContentControllerProxy::contentRuleListData(this, (uint64_t)&v94);
  v77 = *(unsigned int *)(a3 + 84);
  if ((_DWORD)v77)
  {
    v78 = *(_QWORD *)(a3 + 72);
    v79 = 120 * v77;
    do
    {
      v80 = *(WTF::StringImpl **)(v78 + 80);
      *(_QWORD *)(v78 + 80) = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v76);
        else
          *(_DWORD *)v80 -= 2;
      }
      v81 = *(unsigned int **)(v78 + 8);
      *(_QWORD *)(v78 + 8) = 0;
      if (v81)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v81);
      v82 = *(WTF::StringImpl **)v78;
      *(_QWORD *)v78 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v76);
        else
          *(_DWORD *)v82 -= 2;
      }
      v78 += 120;
      v79 -= 120;
    }
    while (v79);
  }
  v83 = *(WTF **)(a3 + 72);
  if (v83)
  {
    *(_QWORD *)(a3 + 72) = 0;
    *(_DWORD *)(a3 + 80) = 0;
    WTF::fastFree(v83, v76);
  }
  *(_QWORD *)(a3 + 72) = v94;
  v84 = *((_QWORD *)&v94 + 1);
  v94 = 0uLL;
  *(_QWORD *)(a3 + 80) = v84;
  return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v76);
}

_QWORD *WebKit::WebUserContentControllerProxy::contentRuleListData@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;

  v4 = (_QWORD **)(this + 13);
  v3 = this[13];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >= 0x2222223)
      {
        __break(0xC471u);
        return this;
      }
      v6 = 120 * v5;
      v7 = WTF::fastMalloc((WTF *)(120 * v5));
      *(_DWORD *)(a2 + 8) = (v6 & 0xFFFFFFF8) / 0x78;
      *(_QWORD *)a2 = v7;
    }
  }
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  v8 = (uint64_t)this;
  v10 = v9;
  if (*v4)
    v11 = (uint64_t)&(*v4)[7 * *((unsigned int *)*v4 - 1)];
  else
    v11 = 0;
  if ((_QWORD *)v11 != this)
  {
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
      v13 = *(WTF::StringImpl **)(v12 + 16);
      if (v13)
        *(_DWORD *)v13 += 2;
      v22 = v13;
      v14 = *(unsigned int **)(v12 + 24);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v25 = *(_OWORD *)(v12 + 64);
      v26 = *(_OWORD *)(v12 + 80);
      v23 = *(_OWORD *)(v12 + 32);
      v24 = *(_OWORD *)(v12 + 48);
      v16 = *(WTF::StringImpl **)(v8 + 16);
      if (v16)
        *(_DWORD *)v16 += 2;
      v27 = v16;
      v17 = *(_OWORD *)(v8 + 40);
      v28 = *(_OWORD *)(v8 + 24);
      v29 = v17;
      v18 = *(_DWORD *)(a2 + 12);
      v19 = *(_QWORD *)a2 + 120 * v18;
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v19 + 8) = v14;
      *(_OWORD *)(v19 + 48) = v25;
      *(_OWORD *)(v19 + 64) = v26;
      *(_OWORD *)(v19 + 16) = v23;
      *(_OWORD *)(v19 + 32) = v24;
      WTF::URL::URL(v19 + 80, (uint64_t *)&v27);
      *(_DWORD *)(a2 + 12) = v18 + 1;
      v21 = v27;
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      this = 0;
      while (1)
      {
        v8 += 56;
        if (v8 == v10)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_24;
      }
      v8 = v10;
LABEL_24:
      ;
    }
    while (v8 != v11);
  }
  return this;
}

uint64_t WebKit::WebBackForwardList::itemStates@<X0>(WebKit::WebBackForwardList *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34D2DE0;
  v6 = v4;
  WebKit::WebBackForwardList::filteredItemStates((uint64_t)this, &v6, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::WebBackForwardList::filteredItemStates@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  WebKit::ViewSnapshot *v17;
  WTF::StringImpl *v18;
  WebKit::ViewSnapshot *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  WebKit::ViewSnapshot *v24;
  WebKit::ViewSnapshot *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[31];
  char v34;
  unsigned int *v35;
  char v36;
  char v37;
  WebKit::ViewSnapshot *v38;
  __int128 v39;
  WTF::StringImpl *v40;
  uint64_t v41[31];
  char v42;
  unsigned int *v43;
  char v44;
  char v45;
  WebKit::ViewSnapshot *v46;
  char v47;
  WebCore::SerializedScriptValue *v48;

  v5 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_DWORD *)(result + 36);
  if (!v6)
    return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, v5);
  if (v6 < 0xD20D21)
  {
    v7 = result;
    v8 = 312 * v6;
    v9 = WTF::fastMalloc((WTF *)(312 * v6));
    *(_DWORD *)(a3 + 8) = v8 / 0x138;
    *(_QWORD *)a3 = v9;
    v10 = *(unsigned int *)(v7 + 36);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD **)(v7 + 24);
      v12 = &v11[v10];
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v11) & 1) != 0)
        {
          v13 = *v11;
          v39 = *(_OWORD *)(*v11 + 32);
          v14 = *(WTF::StringImpl **)(v13 + 48);
          if (v14)
            *(_DWORD *)v14 += 2;
          v40 = v14;
          WebKit::FrameState::FrameState((WebKit::FrameState *)v41, (const WebKit::FrameState *)(v13 + 56));
          v42 = *(_BYTE *)(v13 + 304);
          v15 = *(unsigned int **)(v13 + 312);
          if (v15)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          v43 = v15;
          v44 = *(_BYTE *)(v13 + 320);
          v45 = *(_BYTE *)(v13 + 328);
          v17 = *(WebKit::ViewSnapshot **)(v13 + 336);
          if (v17)
            ++*(_DWORD *)v17;
          v47 = 1;
          v31 = v39;
          v18 = v40;
          v46 = v17;
          v40 = 0;
          v32 = v18;
          WebKit::FrameState::FrameState((uint64_t)v33, v41);
          v34 = v42;
          v35 = v43;
          v36 = v44;
          v37 = v45;
          v19 = v46;
          v43 = 0;
          v46 = 0;
          v38 = v19;
          v20 = *(_DWORD *)(a3 + 12);
          if (v20 == *(_DWORD *)(a3 + 8))
          {
            WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>(a3, (unint64_t)&v31);
          }
          else
          {
            v21 = *(_QWORD *)a3 + 312 * v20;
            *(_OWORD *)v21 = v31;
            v22 = v32;
            v32 = 0;
            *(_QWORD *)(v21 + 16) = v22;
            WebKit::FrameState::FrameState(v21 + 24, (uint64_t *)v33);
            *(_BYTE *)(v21 + 272) = v34;
            v23 = v35;
            v35 = 0;
            *(_QWORD *)(v21 + 280) = v23;
            *(_BYTE *)(v21 + 288) = v36;
            *(_BYTE *)(v21 + 296) = v37;
            v24 = v38;
            v38 = 0;
            *(_QWORD *)(v21 + 304) = v24;
            ++*(_DWORD *)(a3 + 12);
          }
          v25 = v38;
          v38 = 0;
          if (v25)
            WTF::RefCounted<WebKit::ViewSnapshot>::deref(v25);
          v26 = v35;
          v35 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              v48 = (WebCore::SerializedScriptValue *)v26;
              WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v48);
            }
          }
          WebKit::FrameState::~FrameState(v33);
          v30 = v32;
          v32 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v29);
            else
              *(_DWORD *)v30 -= 2;
          }
        }
        else
        {
          LOBYTE(v39) = 0;
          v47 = 0;
        }
        std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39);
        ++v11;
      }
      while (v11 != v12);
      v5 = *(unsigned int *)(a3 + 12);
    }
    else
    {
      v5 = 0;
    }
    return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, v5);
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::PageClientImpl::effectiveUserInterfaceLevelIsElevated(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v2 = objc_msgSend(WeakRetained, "_effectiveUserInterfaceLevelIsElevated");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_196C13AAC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::effectiveAppearanceIsDark(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v2 = objc_msgSend(WeakRetained, "_effectiveAppearanceIsDark");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_196C13B00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled(WebKit::WebPageProxy *this)
{
  void *v2;
  const WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE v20[24];
  WebKit::WebPageProxy *v21;
  uint64_t *v22;

  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("WebKit2GPUProcessForDOMRendering"));
  if (v2)
    return objc_msgSend(v2, "BOOLValue");
  v5 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v3) & 1) != 0)return 1;
  v22 = 0;
  CFRetain(*((CFTypeRef *)this + 1));
  v21 = this;
  WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v20, (uint64_t *)&v22, (uint64_t *)&v21);
  if (v21)
    CFRelease(*((CFTypeRef *)v21 + 1));
  v9 = *(_QWORD *)(*((_QWORD *)this + 6) + 136);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    while (1)
    {
      v11 = v10 - 16;
      if (v22)
      {
        v12 = *((_DWORD *)v22 - 2);
        v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = v22[v16];
        if (v17 == v11)
          goto LABEL_24;
        v18 = 1;
        while (v17)
        {
          v16 = (v16 + v18) & v12;
          v17 = v22[v16];
          ++v18;
          if (v17 == v11)
            goto LABEL_24;
        }
      }
      {
        WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(_QWORD *)(v10 + 208) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v8) & 1) != 0)break;
      CFRetain(*(CFTypeRef *)(v10 - 8));
      v21 = (WebKit::WebPageProxy *)(v10 - 16);
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v20, (uint64_t *)&v22, (uint64_t *)&v21);
      if (v21)
        CFRelease(*((CFTypeRef *)v21 + 1));
      v19 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 136);
      if (v19)
      {
        v10 = *(_QWORD *)(v19 + 8);
        if (v10)
          continue;
      }
      goto LABEL_24;
    }
    v6 = 1;
  }
  else
  {
LABEL_24:
    v6 = 0;
  }
  if (v22)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v22, v7);
  return v6;
}

void sub_196C13D5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a13)
    CFRelease(*(CFTypeRef *)(a13 + 8));
  if (a14)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

uint64_t API::UIClient::canRunBeforeUnloadConfirmPanel(API::UIClient *this)
{
  return 0;
}

uint64_t WebKit::UserContentControllerParameters::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  WebCore::UserScript *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;

  v4 = (_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (WTF::StringImpl **)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(*v5, (WTF::StringImpl *)((char *)*v5 + 16 * v6));
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v5, v4);
  v8 = *(_DWORD *)(a1 + 36);
  if (v8)
  {
    v9 = 104 * v8;
    v10 = (WebCore::UserScript *)(*(_QWORD *)(a1 + 24) + 16);
    do
    {
      WebCore::UserScript::~UserScript(v10, v7);
      v10 = (WebCore::UserScript *)(v11 + 104);
      v9 -= 104;
    }
    while (v9);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 24, (_DWORD *)(a2 + 24));
  v12 = *(_DWORD *)(a1 + 52);
  if (v12)
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(*(WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(*(_QWORD *)(a1 + 40) + 120 * v12));
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 40, (_DWORD *)(a2 + 40));
  v13 = *(_DWORD *)(a1 + 68);
  if (v13)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(*(_QWORD *)(a1 + 56) + 24 * v13));
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 56, (_DWORD *)(a2 + 56));
  v15 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 72);
    v17 = 120 * v15;
    do
    {
      v18 = *(WTF::StringImpl **)(v16 + 80);
      *(_QWORD *)(v16 + 80) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(unsigned int **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      if (v19)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
      v20 = *(WTF::StringImpl **)v16;
      *(_QWORD *)v16 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
      v16 += 120;
      v17 -= 120;
    }
    while (v17);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 72, (_DWORD *)(a2 + 72));
  return a1;
}

unsigned int *WebKit::WebUserContentControllerProxy::addProcess(WebKit::WebUserContentControllerProxy *this, WebKit::WebProcessProxy *a2)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6[2];
  char v7;
  _QWORD v8[2];

  result = WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 40, (unsigned int *)a2, (uint64_t)v6);
  if (v7)
  {
    v5 = *((_QWORD *)this + 4);
    v8[0] = 206;
    v8[1] = v5;
    return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)a2 + 20, (unsigned __int8 *)v8, (uint64_t)this + 16, v6);
  }
  return result;
}

uint64_t WebKit::DrawingAreaProxy::DrawingAreaProxy(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t IdentifierInternal;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_1E34B0558;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = off_1E351EF70;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34CF758;
  *(_QWORD *)(a1 + 16) = &unk_1E34CF8B8;
  *(_QWORD *)(a1 + 24) = IdentifierInternal;
  *(_BYTE *)(a1 + 32) = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 24), a3 + 16);
  v9 = *(unsigned int **)(a3 + 24);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = v9;
  v11 = (unsigned int *)(a4 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 48) = a4;
  v13 = *(_QWORD *)(a3 + 40);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

WebKit::DrawingAreaProxy *WebKit::WebPageProxy::setDrawingArea(uint64_t a1, WebKit::DrawingAreaProxy **a2)
{
  uint64_t v4;
  WebKit::DrawingAreaProxy *v5;
  WebKit::DrawingAreaProxy *result;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  IntSize v11;
  double v12;
  int32x4_t v13;
  IntSize v14;
  int32x2_t v15;
  IntSize v16;

  v4 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WebKit::DrawingAreaProxy **)(a1 + 184);
  if (v5)
    WebKit::DrawingAreaProxy::stopReceivingMessages(v5, *(WebKit::WebProcessProxy **)(a1 + 208));
  result = *a2;
  *a2 = 0;
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = result;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = *(WebKit::DrawingAreaProxy **)(a1 + 184);
  }
  if (result)
  {
    WebKit::DrawingAreaProxy::startReceivingMessages(result, *(WebKit::WebProcessProxy **)(a1 + 208));
    v8 = *(int32x2_t **)(a1 + 184);
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
    v11 = (IntSize)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    v12 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
    v15 = 0;
    v16 = v11;
    WebKit::DrawingAreaProxy::setSize(v8, &v16, &v15, v12, v13);
    result = *(WebKit::DrawingAreaProxy **)(a1 + 184);
    if (result)
    {
      if (!*((_BYTE *)result + 32))
      {
        (*(void (**)(IntSize *__return_ptr))(*(_QWORD *)result + 352))(&v16);
        v14 = v16;
        v16 = 0;
        result = *(WebKit::DrawingAreaProxy **)(a1 + 200);
        *(IntSize *)(a1 + 200) = v14;
        if (result)
        {
          (*(void (**)(WebKit::DrawingAreaProxy *))(*(_QWORD *)result + 8))(result);
          result = (WebKit::DrawingAreaProxy *)v16;
          v16 = 0;
          if (result)
            return (WebKit::DrawingAreaProxy *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PageClientImpl::viewSize(id *this)
{
  id WeakRetained;
  CGFloat v2;
  CGFloat v3;
  CGSize v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "bounds");
  v5.width = v2;
  v5.height = v3;
  WebCore::IntSize::IntSize((WebCore::IntSize *)&v6, &v5);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v6;
}

void sub_196C14204(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::RemoteScrollingCoordinatorProxy *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::createScrollingCoordinatorProxy@<X0>(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this@<X0>, WebKit::RemoteScrollingCoordinatorProxy **a2@<X8>)
{
  WebKit::RemoteScrollingCoordinatorProxy *v4;
  uint64_t v5;
  WebKit::WebPageProxy *v6;
  WebKit::RemoteScrollingCoordinatorProxy *result;

  v4 = (WebKit::RemoteScrollingCoordinatorProxy *)WTF::fastMalloc((WTF *)0xA0);
  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v5)
    v6 = (WebKit::WebPageProxy *)(v5 - 16);
  else
    v6 = 0;
  result = WebKit::RemoteScrollingCoordinatorProxy::RemoteScrollingCoordinatorProxy(v4, v6);
  *(_QWORD *)result = off_1E34CBC00;
  *((_QWORD *)result + 18) = 0;
  *((_QWORD *)result + 19) = 0;
  *a2 = result;
  return result;
}

WebKit::RemoteScrollingCoordinatorProxy *WebKit::RemoteScrollingCoordinatorProxy::RemoteScrollingCoordinatorProxy(WebKit::RemoteScrollingCoordinatorProxy *this, WebKit::WebPageProxy *a2)
{
  WebKit::RemoteScrollingTree *v3;
  WebKit::RemoteScrollingTree *v4;

  *(_QWORD *)this = off_1E34DE6F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  v3 = (WebKit::RemoteScrollingTree *)WTF::fastMalloc((WTF *)0x168);
  v4 = WebKit::RemoteScrollingTree::RemoteScrollingTree(v3, this);
  *(_QWORD *)v4 = off_1E34DE978;
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 116) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 124) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 112) = 0;
  return this;
}

WebKit::RemoteScrollingTree *WebKit::RemoteScrollingTree::RemoteScrollingTree(WebKit::RemoteScrollingTree *this, WebKit::RemoteScrollingCoordinatorProxy *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)WebCore::ScrollingTree::ScrollingTree(this) = off_1E34DE7E8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 43) = v4;
  *((_BYTE *)this + 352) = 0;
  return this;
}

unsigned int *WebKit::DrawingAreaProxy::startReceivingMessages(WebKit::DrawingAreaProxy *this, WebKit::WebProcessProxy *a2)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD v12[2];

  result = (unsigned int *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(_QWORD *)this + 40))(this);
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = (uint64_t *)((char *)a2 + 160);
    do
    {
      v9 = *(unsigned __int8 *)v6;
      v6 = (unsigned int *)((char *)v6 + 1);
      v10 = *((_QWORD *)this + 3);
      v12[0] = v9;
      v12[1] = v10;
      result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v8, (unsigned __int8 *)v12, (uint64_t)this, &v11);
      --v7;
    }
    while (v7);
  }
  return result;
}

__int16 *WebKit::RemoteLayerTreeDrawingAreaProxy::messageReceiverNames(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  if ((_MergedGlobals_80 & 1) == 0)
  {
    word_1ECE72B5A = 22790;
    _MergedGlobals_80 = 1;
  }
  return &word_1ECE72B5A;
}

void WebKit::PageClientImpl::mimeTypesWithCustomContentProviders(id *this@<X0>, _QWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v4 = (void *)objc_msgSend(WeakRetained, "_contentProviderRegistry");
  if (v4)
  {
    objc_msgSend(v4, "_mimeTypesWithCustomContentProviders");
    if (!WeakRetained)
      return;
    goto LABEL_3;
  }
  *a2 = 0;
  a2[1] = 0;
  if (WeakRetained)
LABEL_3:
    CFRelease(WeakRetained);
}

void sub_196C1444C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 312 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 312 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0xD20D21)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(312 * a2);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0x138;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebKit::BackForwardListItemState>::move(v5, (WTF::StringImpl *)((char *)v5 + 312 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF *WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *result;
  uint64_t v5;

  result = *(WTF **)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

void sub_196C146F4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)(v3 + 16 * v10);
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::~RemoteScrollingCoordinatorProxyIOS(WebKit::RemoteScrollingCoordinatorProxyIOS *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteScrollingCoordinatorProxyIOS::~RemoteScrollingCoordinatorProxyIOS(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 19);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 18);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  WebKit::RemoteScrollingCoordinatorProxy::~RemoteScrollingCoordinatorProxy(this);
}

void WebKit::RemoteScrollingCoordinatorProxy::~RemoteScrollingCoordinatorProxy(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E34DE6F0;
  WebKit::RemoteScrollingTree::invalidate(*((WebKit::RemoteScrollingTree **)this + 3));
  v3 = *((_QWORD *)this + 17);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), v2);
  v4 = *((_QWORD *)this + 13);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v2);
  v5 = *((_QWORD *)this + 12);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v2);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v2);
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

void WebKit::RemoteScrollingTreeIOS::~RemoteScrollingTreeIOS(WebKit::RemoteScrollingTreeIOS *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteScrollingTree::~RemoteScrollingTree(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::RemoteScrollingTree::~RemoteScrollingTree(WebKit::RemoteScrollingTree *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34DE7E8;
  v3 = (unsigned int *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::ScrollingTree::~ScrollingTree(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteScrollingTree::~RemoteScrollingTree(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemoteScrollingTree::invalidate(WebKit::RemoteScrollingTree *this)
{
  unsigned __int8 *v2;
  void *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 12);
LABEL_5:
  WebCore::ScrollingTree::removeAllNodes(this);
  result = (unsigned int *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)27>::type()
{
  return 27;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3508AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<float>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::tuple<float>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF *WebKit::ViewUpdateDispatcher::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[11];
  char v14;
  _OWORD v15[11];
  char v16;

  if (*((_WORD *)a3 + 25) == 1517)
  {
    v4 = (uint64_t)this;
    v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (!v6)
      goto LABEL_6;
    v7 = v5;
    IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::decode((unint64_t *)a3, (uint64_t)v15);
    if (v16
      || (v8 = *(_QWORD *)a3,
          v9 = *((_QWORD *)a3 + 1),
          *(_QWORD *)a3 = 0,
          *((_QWORD *)a3 + 1) = 0,
          (v10 = *((_QWORD *)a3 + 3)) != 0)
      && v9
      && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8), v16))
    {
      v13[6] = v15[6];
      v13[7] = v15[7];
      v13[8] = v15[8];
      v13[9] = v15[9];
      v13[10] = v15[10];
      v13[3] = v15[3];
      v13[4] = v15[4];
      v13[5] = v15[5];
      v13[0] = v15[0];
      v13[1] = v15[1];
      v13[2] = v15[2];
      v14 = 1;
      return WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(v4, v7, v13);
    }
    else
    {
LABEL_6:
      v11 = *(_QWORD *)a3;
      v12 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (WTF *)*((_QWORD *)a3 + 3);
      if (this)
      {
        if (v12)
          return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
      }
    }
  }
  return this;
}

unint64_t IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  char v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  char v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  int v58;
  unint64_t result;
  char v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  char v129;
  uint64_t v130;
  unsigned __int8 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  __int128 v153;
  char v154;
  __int128 v155;
  char v156;
  __int128 v157;
  char v158;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_83;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v67 = *a1;
      v68 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v69 = a1[3];
      if (v69)
      {
        if (v68)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v69 + 16))(v69, v67);
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_82;
      v11 = v4 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v4 = 0;
      v11 = 0;
      v70 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v71 = a1[3];
      if (v71)
      {
        if (v70)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v71 + 16))(v71, 0);
        v4 = 0;
        v11 = 0;
      }
    }
    v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v13;
    if (!v13)
    {
      v72 = *a1;
      v73 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v74 = a1[3];
      if (v74)
      {
        if (v73)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v74 + 16))(v74, v72);
      }
    }
    v14 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v16 = v15;
    if (!v15)
    {
      v75 = *a1;
      v76 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v77 = a1[3];
      if (v77)
      {
        if (v76)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v77 + 16))(v77, v75);
      }
    }
    v17 = *a1;
    v149 = *a1;
    if (*a1)
    {
      if (!v6 || !v16)
        goto LABEL_82;
      v17 = v12 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v12) = 0;
      v78 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v79 = a1[3];
      if (v79)
      {
        if (v78)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v79 + 16))(v79, 0);
        LOBYTE(v12) = 0;
        v17 = 0;
      }
    }
    v144 = v17;
    IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v157);
    v152 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v18;
    if (!v18)
    {
      v80 = *a1;
      v81 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v82 = a1[3];
      if (v82)
      {
        if (v81)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v82 + 16))(v82, v80);
      }
    }
    v19 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v21 = v20;
    v143 = v19;
    if (!v20)
    {
      v83 = *a1;
      v84 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v85 = a1[3];
      if (v85)
      {
        if (v84)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v85 + 16))(v85, v83);
      }
    }
    v148 = *a1;
    if (*a1)
    {
      if (!v6 || !v21)
        goto LABEL_82;
      v22 = v152 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v152) = 0;
      v22 = 0;
      v86 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v87 = a1[3];
      if (v87)
      {
        if (v86)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v87 + 16))(v87, 0);
        LOBYTE(v152) = 0;
        v22 = 0;
      }
    }
    v140 = v22;
    v151 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v23;
    if (!v23)
    {
      v88 = *a1;
      v89 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v90 = a1[3];
      if (v90)
      {
        if (v89)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v88);
      }
    }
    v24 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v26 = v25;
    v139 = v24;
    if (!v25)
    {
      v91 = *a1;
      v92 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v93 = a1[3];
      if (v93)
      {
        if (v92)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v91);
      }
    }
    v147 = *a1;
    if (*a1)
    {
      if (!v6 || !v26)
        goto LABEL_82;
      v27 = v151 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v151) = 0;
      v27 = 0;
      v94 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v94)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v95 + 16))(v95, 0);
        LOBYTE(v151) = 0;
        v27 = 0;
      }
    }
    v136 = v27;
    v150 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v6 = v28;
    if (!v28)
    {
      v96 = *a1;
      v97 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v98 = a1[3];
      if (v98)
      {
        if (v97)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v98 + 16))(v98, v96);
      }
    }
    v29 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v31 = v30;
    v135 = v29;
    if (!v30)
    {
      v99 = *a1;
      v100 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v101 = a1[3];
      if (v101)
      {
        if (v100)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v101 + 16))(v101, v99);
      }
    }
    v146 = *a1;
    if (*a1)
    {
      if (!v6 || !v31)
        goto LABEL_82;
      v134 = v150 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v150) = 0;
      v134 = 0;
      v102 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v103 = a1[3];
      if (v103)
      {
        if (v102)
          (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v103 + 16))(v103, 0);
        LOBYTE(v150) = 0;
        v134 = 0;
      }
    }
    IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v155);
    IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a1, (uint64_t)&v153);
    v32 = a1[1];
    v33 = *a1;
    v34 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    v131 = v12;
    v132 = v14;
    if (v32 < v34 || v32 - v34 <= 7)
    {
      v106 = 0;
      v107 = 0;
      *a1 = 0;
      a1[1] = 0;
      v108 = a1[3];
      if (v108)
      {
        if (v32)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v108 + 16))(v108);
          v107 = *a1;
          v106 = a1[1];
        }
        else
        {
          v106 = 0;
          v107 = 0;
        }
      }
    }
    else
    {
      v35 = (uint64_t *)(v33 + v34);
      a1[2] = (unint64_t)(v35 + 1);
      if (v33)
      {
        v145 = 0;
        v130 = *v35;
        goto LABEL_35;
      }
      v106 = v32;
      v107 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v109 = a1[3];
    if (!v109 || !v106)
    {
      v33 = 0;
      v130 = 0;
      v32 = 0;
      v145 = 1;
LABEL_140:
      *a1 = 0;
      a1[1] = 0;
      v110 = a1[3];
      if (v110)
      {
        if (v32)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v110 + 16))(v110, v33);
          v111 = *a1;
          v32 = a1[1];
        }
        else
        {
          v111 = 0;
        }
      }
      else
      {
        v111 = 0;
        v32 = 0;
      }
LABEL_142:
      *a1 = 0;
      a1[1] = 0;
      v112 = a1[3];
      if (v112)
      {
        if (v32)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v112 + 16))(v112, v111);
          v33 = *a1;
          v32 = a1[1];
        }
        else
        {
          v33 = 0;
        }
      }
      else
      {
        v33 = 0;
        v32 = 0;
      }
      goto LABEL_144;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v109 + 16))(v109, v107, v106);
    v130 = 0;
    v33 = *a1;
    v32 = a1[1];
    v145 = 1;
LABEL_35:
    if (v32 <= a1[2] - v33)
      goto LABEL_140;
    v36 = (unsigned __int8 *)a1[2];
    a1[2] = (unint64_t)(v36 + 1);
    if (!v33)
    {
      v111 = 0;
      goto LABEL_142;
    }
    v37 = *v36;
    if (v37 < 0x20)
    {
      v142 = v37 | 0x100;
      goto LABEL_39;
    }
LABEL_144:
    *a1 = 0;
    a1[1] = 0;
    v113 = a1[3];
    if (!v113)
    {
      v33 = 0;
      v142 = 0;
      v32 = 0;
      goto LABEL_146;
    }
    if (!v32)
    {
      v33 = 0;
      v142 = 0;
LABEL_146:
      *a1 = 0;
      a1[1] = 0;
      v114 = a1[3];
      if (v114)
      {
        if (v32)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v114 + 16))(v114, v33);
          v115 = *a1;
          v32 = a1[1];
        }
        else
        {
          v115 = 0;
        }
      }
      else
      {
        v115 = 0;
        v32 = 0;
      }
      goto LABEL_148;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v113 + 16))(v113, v33);
    v142 = 0;
    v33 = *a1;
    v32 = a1[1];
LABEL_39:
    if (v32 <= a1[2] - v33)
      goto LABEL_146;
    v38 = (unsigned __int8 *)a1[2];
    v39 = v38 + 1;
    a1[2] = (unint64_t)(v38 + 1);
    if (v33)
    {
      v40 = *v38;
      if (v40 < 2)
      {
        v141 = 0;
        v41 = 1;
        goto LABEL_43;
      }
      goto LABEL_151;
    }
    v115 = 0;
LABEL_148:
    *a1 = 0;
    a1[1] = 0;
    v116 = a1[3];
    if (!v116)
    {
      v32 = 0;
LABEL_150:
      v33 = 0;
      v40 = 0;
      goto LABEL_151;
    }
    if (!v32)
      goto LABEL_150;
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v116 + 16))(v116, v115);
    v40 = 0;
    v33 = *a1;
    v32 = a1[1];
LABEL_151:
    *a1 = 0;
    a1[1] = 0;
    v117 = a1[3];
    if (!v117 || !v32)
    {
      v129 = 0;
      v118 = 0;
      v33 = 0;
      v141 = 1;
LABEL_153:
      *a1 = 0;
      a1[1] = 0;
      v119 = a1[3];
      if (v119 && v118)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v119 + 16))(v119, v33, v118);
        v45 = 0;
        v33 = *a1;
        v32 = a1[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v45 = 0;
      }
      goto LABEL_155;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v117 + 16))(v117, v33);
    v41 = 0;
    v33 = *a1;
    v32 = a1[1];
    v141 = 1;
    v39 = (unsigned __int8 *)a1[2];
LABEL_43:
    if (!v40)
      v41 = 0;
    v129 = v41;
    v42 = &v39[-v33];
    if (v32 <= (unint64_t)v42)
    {
      v118 = 0;
      v124 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v124 && v32)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v124 + 16))(v124);
        v33 = *a1;
        v118 = a1[1];
      }
      else
      {
        v33 = 0;
      }
      goto LABEL_153;
    }
    v43 = &v42[v33];
    v44 = (uint64_t)&v42[v33 + 1];
    a1[2] = v44;
    if (!v33)
    {
      v118 = v32;
      goto LABEL_153;
    }
    v45 = *v43;
    if (v45 < 2)
    {
      v46 = 0;
      v47 = 1;
      goto LABEL_49;
    }
LABEL_155:
    *a1 = 0;
    a1[1] = 0;
    v120 = a1[3];
    if (!v120 || !v32)
    {
      v128 = 0;
      v121 = 0;
      v33 = 0;
      v138 = 1;
LABEL_157:
      *a1 = 0;
      a1[1] = 0;
      v122 = a1[3];
      if (v122 && v121)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v122 + 16))(v122, v33, v121);
        v51 = 0;
        v33 = *a1;
        v32 = a1[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v51 = 0;
      }
      goto LABEL_159;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v120 + 16))(v120, v33);
    v47 = 0;
    v33 = *a1;
    v32 = a1[1];
    v46 = 1;
    v44 = a1[2];
LABEL_49:
    if (v45)
      v48 = v47;
    else
      v48 = 0;
    v49 = v44 - v33;
    v128 = v48;
    v138 = v46;
    if (v32 <= v49)
    {
      v121 = 0;
      v125 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v125 && v32)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v125 + 16))(v125);
        v33 = *a1;
        v121 = a1[1];
      }
      else
      {
        v33 = 0;
      }
      goto LABEL_157;
    }
    v50 = (unsigned __int8 *)(v33 + v49);
    a1[2] = (unint64_t)(v50 + 1);
    if (!v33)
    {
      v121 = v32;
      goto LABEL_157;
    }
    v51 = *v50;
    if (v51 < 2)
    {
      v137 = 0;
      v52 = 1;
      goto LABEL_56;
    }
LABEL_159:
    *a1 = 0;
    a1[1] = 0;
    v123 = a1[3];
    if (v123 && v32)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v123 + 16))(v123, v33);
    v52 = 0;
    v137 = 1;
LABEL_56:
    if (!v51)
      v52 = 0;
    v127 = v52;
    v53 = IPC::Decoder::decode<float>(a1);
    v54 = IPC::Decoder::decode<float>(a1);
    v6 = IPC::Decoder::decode<float>(a1);
    v55 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a1);
    v57 = *a1;
    v133 = v7;
    v126 = v55;
    if (*a1)
    {
      if ((v53 & 0xFF00000000) == 0 || (v54 & 0xFF00000000) == 0 || (v6 & 0xFF00000000) == 0 || !v56)
        goto LABEL_82;
      v58 = v53 & 0xFFFFFF00;
    }
    else
    {
      v104 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v105 = a1[3];
      if (v105 && v104)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v105 + 16))(v105, 0);
      LOBYTE(v53) = 0;
      v58 = 0;
    }
    result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>((uint64_t *)a1);
    v61 = *a1;
    if (!*a1)
      break;
    if (v10
      && v149
      && v158
      && v148
      && v147
      && v146
      && v156
      && v154
      && !v145
      && v142 > 0xFF
      && !v141
      && !v138
      && !v137
      && v57
      && v60)
    {
      *(_OWORD *)(a2 + 32) = v157;
      v62 = v153;
      *(_OWORD *)(a2 + 96) = v155;
      *(_OWORD *)(a2 + 112) = v62;
      *(_DWORD *)(a2 + 128) = v58 | v53;
      *(_DWORD *)(a2 + 132) = v54;
      *(_DWORD *)(a2 + 136) = v6;
      *(_QWORD *)a2 = v11 | v4;
      *(_QWORD *)(a2 + 8) = v133;
      *(_QWORD *)(a2 + 16) = v144 | v131;
      *(_QWORD *)(a2 + 24) = v132;
      *(_QWORD *)(a2 + 48) = v136 | v151;
      *(_QWORD *)(a2 + 56) = v139;
      *(_QWORD *)(a2 + 64) = v140 | v152;
      *(_QWORD *)(a2 + 72) = v143;
      *(_QWORD *)(a2 + 80) = v134 | v150;
      *(_QWORD *)(a2 + 88) = v135;
      *(_QWORD *)(a2 + 144) = v126;
      *(_QWORD *)(a2 + 152) = result;
      *(_QWORD *)(a2 + 160) = v130;
      *(_BYTE *)(a2 + 168) = v142;
      *(_BYTE *)(a2 + 169) = v129;
      *(_BYTE *)(a2 + 170) = v128;
      LOBYTE(v61) = 1;
      *(_BYTE *)(a2 + 171) = v127;
      goto LABEL_81;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    v63 = *a1;
    v64 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
      v66 = v64 == 0;
    else
      v66 = 1;
    if (!v66)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v65 + 16))(v65, v63);
  }
  *(_BYTE *)a2 = 0;
LABEL_81:
  *(_BYTE *)(a2 + 176) = v61;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::RectEdges<float>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithGradient(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  WebKit::RemoteImageBufferProxy *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  uint64_t v58;
  char *v59;
  WebKit::RemoteImageBufferProxy *v60;
  unsigned int *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  _BYTE buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient();
  v59 = &v57;
  v3 = a1[481];
  if (!v3)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v58, v2);
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v4)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v58, v2);
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v61);
  if (!v61)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v58, v2);
  v5 = (WTF::ApproximateTime *)a1[479];
  if (v5)
    goto LABEL_93;
  v60 = 0;
  while (1)
  {
    v6 = v61;
    v7 = a1[478];
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v62, v9);
    if (!v64)
      goto LABEL_83;
    *(_QWORD *)buf = v62;
    *(_QWORD *)&buf[8] = v63;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v62;
    v12 = v10 - v62;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v63)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v62 + v12) = 837;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::encode((uint64_t *)buf, (uint64_t)v59);
    if (*(_QWORD *)&buf[8])
    {
      v14 = *(_QWORD *)&buf[16];
      v15 = *((_QWORD *)v6 + 8);
      v16 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = *((_QWORD *)v6 + 7);
      if (v16 + 16 >= v17)
        v16 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v14 = 16;
      v18 = v16 + v14;
      if (v17 <= v18)
        v19 = 0;
      else
        v19 = v18;
      *((_QWORD *)v6 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      if (v21 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v64)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, a1[480], &v60);
    v5 = v60;
    if (v60)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v60);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v62, v63);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithGradient>(*(uint64_t *)buf, (int **)&v59, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRectWithGradient";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = a1[481];
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v22 = v60;
  v60 = 0;
  if (v22)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
LABEL_31:
      v25 = *(_QWORD *)(v23 + 8);
      v26 = v25 - 1;
      *(_QWORD *)(v23 + 8) = v25 - 1;
      if (v25 == 1)
      {
        v52 = *(_QWORD *)(v23 + 16);
        v27 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        v28 = v52 != 0;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = __ldxr((unsigned __int8 *)v23);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_35:
      if (!v26)
      {
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v2);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_31;
  }
LABEL_36:
  v30 = v61;
  v61 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      *(_QWORD *)buf = v30;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v58, v2);
}

_QWORD *IPC::ArgumentCoder<WebCore::Gradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v46;

  v5 = *(unsigned __int8 *)(a2 + 76);
  v6 = a1[2];
  if (v6 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v6++) = v5;
    a1[2] = v6;
  }
  v7 = (_DWORD *)(a2 + 48);
  if ((_DWORD)v5)
  {
    IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(a1, v7, v5);
    v6 = a1[2];
  }
  else
  {
    if (*(_DWORD *)(a2 + 76))
    {
LABEL_73:
      v29 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_74:
      IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(v29, BYTE4(v28));
      v6 = a1[2];
      goto LABEL_32;
    }
    v8 = *a1;
    v9 = *a1 + v6;
    v10 = (v9 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = v10 >= v9;
    v12 = v10 - v9;
    if (v11)
    {
      v13 = v12 + v6;
      v14 = v12 + v6 + 4;
      if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v13) = *v7;
        a1[2] = v14;
        v8 = *a1;
        v6 = v14;
      }
    }
    v16 = (v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v17 = v16 - (v8 + v6);
    if (v16 >= v8 + v6)
    {
      v18 = v16 - v8;
      v19 = v17 + v6 + 4;
      if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v18) = *(_DWORD *)(a2 + 52);
        a1[2] = v19;
        v8 = *a1;
        v6 = v19;
      }
    }
    v21 = (v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v21 - (v8 + v6);
    if (v21 >= v8 + v6)
    {
      v23 = v21 - v8;
      v24 = v22 + v6 + 4;
      if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v8 + v23) = *(_DWORD *)(a2 + 56);
        a1[2] = v24;
        v8 = *a1;
        v6 = v24;
      }
    }
    v26 = (_DWORD *)((v8 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v8 + v6)
    {
      v27 = (char *)v26 - v8;
      if ((unint64_t)v26 - v8 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *v26 = *(_DWORD *)(a2 + 60);
        a1[2] = (uint64_t)(v27 + 4);
        v6 = (unint64_t)(v27 + 4);
      }
    }
  }
  v28 = *(_QWORD *)(a2 + 80);
  v2 = *(_DWORD *)(a2 + 88);
  v29 = HIDWORD(v28);
  if (v6 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v6++) = BYTE4(v28);
    a1[2] = v6;
  }
  if (BYTE4(v28) == 6)
  {
    if (HIDWORD(v28) == 6)
      goto LABEL_32;
    goto LABEL_73;
  }
  switch(BYTE4(v28))
  {
    case 0:
      if (HIDWORD(v28))
        goto LABEL_73;
      goto LABEL_70;
    case 1:
      if (HIDWORD(v28) != 1)
        goto LABEL_73;
      goto LABEL_70;
    case 2:
      if (HIDWORD(v28) != 2)
        goto LABEL_73;
      goto LABEL_70;
    case 3:
      if (HIDWORD(v28) != 3)
        goto LABEL_73;
      break;
    case 4:
      if (HIDWORD(v28) != 4)
        goto LABEL_73;
LABEL_70:
      if (v6 >= a1[1])
      {
        a1[1] = 0;
      }
      else
      {
        *(_BYTE *)(*a1 + v6++) = v28;
        a1[2] = v6;
      }
      break;
    case 5:
      if (HIDWORD(v28) != 5)
        goto LABEL_73;
      break;
    default:
      goto LABEL_74;
  }
LABEL_32:
  if (v6 < a1[1])
  {
    v30 = v6 + 1;
    *(_BYTE *)(*a1 + v6) = v2;
    a1[2] = v6 + 1;
    if (v6 + 1 < a1[1])
    {
      v6 += 2;
      *(_BYTE *)(*a1 + v30) = *(_BYTE *)(a2 + 92);
      a1[2] = v6;
      goto LABEL_35;
    }
    ++v6;
  }
  a1[1] = 0;
LABEL_35:
  v31 = *(unsigned int *)(a2 + 108);
  v32 = *a1 + v6;
  v33 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v33 >= v32;
  v34 = v33 - v32;
  if (v11)
  {
    v35 = v34 + v6;
    if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v35) = v31;
      a1[2] = v35 + 8;
      v31 = *(unsigned int *)(a2 + 108);
    }
  }
  if ((_DWORD)v31)
  {
    v36 = *(_DWORD **)(a2 + 96);
    v37 = &v36[4 * v31];
    do
    {
      v38 = a1[2];
      v39 = *a1 + v38;
      v40 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v11 = v40 >= v39;
      v41 = v40 - v39;
      if (v11)
      {
        v42 = v41 + v38;
        v43 = v42 + 4;
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v43 > a1[1])
        {
          a1[1] = 0;
        }
        else
        {
          *(_DWORD *)(*a1 + v42) = *v36;
          a1[2] = v43;
        }
      }
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v36 + 2));
      v36 += 4;
    }
    while (v36 != v37);
  }
  v46 = *(_OWORD *)(a2 + 32);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v46);
}

void *IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  v4 = *(unsigned __int8 *)(a2 + 80);
  v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v5) = v4;
    a1[2] = v5 + 1;
  }
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 1)
    {
      if (*(_DWORD *)(a2 + 80) != 1)
        goto LABEL_66;
      IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(a1, a2 + 16);
    }
    else
    {
      IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(a1, *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 80), v4);
    }
  }
  else if (*(_DWORD *)(a2 + 80))
  {
    goto LABEL_66;
  }
  result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 88));
  v7 = *(unsigned __int8 *)(a2 + 168);
  v8 = a1[2];
  if (v8 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v8) = v7;
    a1[2] = v8 + 1;
  }
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 != 1)
    {
      result = IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(a1, *(_QWORD *)(a2 + 104), *(_DWORD *)(a2 + 168), v7);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a2 + 168) == 1)
    {
      result = IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(a1, a2 + 104);
      goto LABEL_9;
    }
LABEL_66:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_67;
  }
  if (*(_DWORD *)(a2 + 168))
    goto LABEL_66;
LABEL_9:
  v10 = a1[1];
  v9 = a1[2];
  v11 = *a1;
  v12 = *a1 + v9;
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + v9;
    if (v15 + v9 > 0xFFFFFFFFFFFFFFFBLL || v16 + 4 > v10)
    {
      v10 = 0;
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v11 + v16) = *(_DWORD *)(a2 + 176);
      a1[2] = v16 + 4;
      v11 = *a1;
      v10 = a1[1];
      v9 = v16 + 4;
    }
  }
  v17 = (_DWORD *)((v11 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v17 >= v11 + v9)
  {
    v18 = (char *)v17 - v11;
    if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v18 + 4) > v10)
    {
      v10 = 0;
      a1[1] = 0;
    }
    else
    {
      *v17 = *(_DWORD *)(a2 + 180);
      a1[2] = (uint64_t)(v18 + 4);
      v10 = a1[1];
      v9 = (unint64_t)(v18 + 4);
    }
  }
  if (v9 >= v10)
  {
    v19 = 0;
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v9++) = *(_BYTE *)(a2 + 184);
    a1[2] = v9;
    v19 = a1[1];
  }
  if (v9 >= v19)
  {
    v20 = 0;
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v9++) = *(_BYTE *)(a2 + 185);
    a1[2] = v9;
    v20 = a1[1];
  }
  if (v9 >= v20)
    goto LABEL_75;
  v21 = v9 + 1;
  *(_BYTE *)(*a1 + v9) = *(_BYTE *)(a2 + 186);
  a1[2] = v9 + 1;
  if (v9 + 1 >= a1[1])
    goto LABEL_74;
  v9 += 2;
  *(_BYTE *)(*a1 + v21) = *(_BYTE *)(a2 + 187);
  a1[2] = v9;
  for (i = a1[1]; ; i = 0)
  {
    if (*(_BYTE *)(a2 + 224))
    {
      if (v9 >= i)
      {
LABEL_67:
        a1[1] = 0;
      }
      else
      {
        *(_BYTE *)(*a1 + v9) = 1;
        a1[2] = v9 + 1;
        if (!*(_BYTE *)(a2 + 224))
          goto LABEL_73;
      }
      result = IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(a1, a2 + 192);
      v9 = a1[2];
    }
    else if (v9 >= i)
    {
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)(*a1 + v9++) = 0;
      a1[2] = v9;
    }
    v23 = a1[1];
    if (!*(_BYTE *)(a2 + 320))
      break;
    if (v9 >= v23)
    {
      a1[1] = 0;
LABEL_70:
      result = IPC::ArgumentCoder<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(a1, (_DWORD *)(a2 + 232));
      v9 = a1[2];
      goto LABEL_31;
    }
    *(_BYTE *)(*a1 + v9) = 1;
    a1[2] = v9 + 1;
    if (*(_BYTE *)(a2 + 320))
      goto LABEL_70;
LABEL_73:
    result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_74:
    v9 = v21;
LABEL_75:
    a1[1] = 0;
  }
  if (v9 >= v23)
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v9++) = 0;
    a1[2] = v9;
  }
LABEL_31:
  v24 = a1[1];
  v25 = *a1 + v9;
  v26 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v26 >= v25;
  v27 = v26 - v25;
  if (v14)
  {
    v28 = v27 + v9;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > v24)
    {
      v24 = 0;
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v28) = *(_DWORD *)(a2 + 328);
      a1[2] = v28 + 4;
      v24 = a1[1];
      v9 = v28 + 4;
    }
  }
  if (v9 >= v24)
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v9) = *(_BYTE *)(a2 + 332);
    a1[2] = v9 + 1;
    if (v9 + 1 < a1[1])
    {
      *(_BYTE *)(*a1 + v9 + 1) = *(_BYTE *)(a2 + 333);
      a1[2] = v9 + 2;
      if (v9 + 2 < a1[1])
      {
        *(_BYTE *)(*a1 + v9 + 2) = *(_BYTE *)(a2 + 334);
        a1[2] = v9 + 3;
        if (v9 + 3 < a1[1])
        {
          *(_BYTE *)(*a1 + v9 + 3) = *(_BYTE *)(a2 + 335);
          a1[2] = v9 + 4;
          if (v9 + 4 < a1[1])
          {
            *(_BYTE *)(*a1 + v9 + 4) = *(_BYTE *)(a2 + 336);
            a1[2] = v9 + 5;
            if (v9 + 5 < a1[1])
            {
              *(_BYTE *)(*a1 + v9 + 5) = *(_BYTE *)(a2 + 337);
              a1[2] = v9 + 6;
              if (v9 + 6 < a1[1])
              {
                *(_BYTE *)(*a1 + v9 + 6) = *(_BYTE *)(a2 + 338);
                a1[2] = v9 + 7;
                if (v9 + 7 < a1[1])
                {
                  *(_BYTE *)(*a1 + v9 + 7) = *(_BYTE *)(a2 + 339);
                  a1[2] = v9 + 8;
                  if (v9 + 8 < a1[1])
                  {
                    *(_BYTE *)(*a1 + v9 + 8) = *(_BYTE *)(a2 + 340);
                    a1[2] = v9 + 9;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  a1[1] = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::ColorDataForIPC>>(uint64_t *result, _BYTE *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v17;

  v2 = result[1];
  v3 = result[2];
  if (!a2[28])
  {
    if (v3 < v2)
    {
      *(_BYTE *)(*result + v3) = 0;
      result[2] = v3 + 1;
      return result;
    }
    goto LABEL_20;
  }
  if (v3 >= v2)
    goto LABEL_26;
  v4 = v3 + 1;
  *(_BYTE *)(*result + v3) = 1;
  result[2] = v3 + 1;
  if (!a2[28])
  {
LABEL_22:
    result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(result, (uint64_t)v9, v7);
  }
  if (v4 >= result[1])
  {
    ++v3;
LABEL_26:
    v17 = a2[24];
    v6 = a2 + 24;
    v7 = v17;
    v9 = v6 - 5;
    v5 = v3;
    goto LABEL_27;
  }
  *(_BYTE *)(*result + v4) = *a2;
  result[2] = v3 + 2;
  if (v3 + 2 >= result[1])
  {
    v3 += 2;
    goto LABEL_26;
  }
  v5 = v3 + 3;
  *(_BYTE *)(*result + v3 + 2) = a2[1];
  result[2] = v3 + 3;
  v8 = a2[24];
  v6 = a2 + 24;
  v7 = v8;
  v9 = v6 - 5;
  if (v3 + 3 < result[1])
  {
    *(_BYTE *)(*result + v5) = v7;
    v5 = v3 + 4;
    result[2] = v3 + 4;
    goto LABEL_8;
  }
LABEL_27:
  result[1] = 0;
LABEL_8:
  if (v7)
    return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(result, (uint64_t)v9, v7);
  if (*v6)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  v10 = *result + v5;
  v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 >= v10;
  v13 = v11 - v10;
  if (!v12)
    return result;
  v14 = v13 + v5;
  v15 = v14 + 4;
  if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
  {
LABEL_20:
    result[1] = 0;
    return result;
  }
  *(_DWORD *)(*result + v14) = *v9;
  result[2] = v15;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *a1;
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = v6 >= v5;
  v7 = v6 - v5;
  if (v11)
  {
    v8 = v7 + v4;
    v9 = v7 + v4 + 4;
    v10 = a1[1];
    if (v8 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v11 = v9 >= v10;
      v12 = v9 == v10;
    }
    else
    {
      v11 = 1;
      v12 = 0;
    }
    if (!v12 && v11)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)a2;
      a1[2] = v9;
      v3 = *a1;
      v4 = v9;
    }
  }
  v13 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 - (v3 + v4);
  if (v13 >= v3 + v4)
  {
    v15 = v13 - v3;
    v16 = v14 + v4 + 4;
    v17 = a1[1];
    if (v15 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v18 = v16 >= v17;
      v19 = v16 == v17;
    }
    else
    {
      v18 = 1;
      v19 = 0;
    }
    if (!v19 && v18)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v15) = v2;
      a1[2] = v16;
      v3 = *a1;
      v4 = v16;
    }
  }
  v20 = *(_DWORD *)(a2 + 12);
  v21 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v21 - (v3 + v4);
  if (v21 >= v3 + v4)
  {
    v23 = v21 - v3;
    v24 = v22 + v4 + 4;
    v25 = a1[1];
    if (v23 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v26 = v24 >= v25;
      v27 = v24 == v25;
    }
    else
    {
      v26 = 1;
      v27 = 0;
    }
    if (!v27 && v26)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v23) = *(_DWORD *)(a2 + 8);
      a1[2] = v24;
      v3 = *a1;
      v4 = v24;
    }
  }
  v28 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v28 >= v3 + v4)
  {
    v29 = v28 - v3;
    v30 = v28 - v3 + 4;
    v31 = a1[1];
    if (v29 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v32 = v30 >= v31;
      v33 = v30 == v31;
    }
    else
    {
      v32 = 1;
      v33 = 0;
    }
    if (!v33 && v32)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v29) = v20;
      a1[2] = v30;
    }
  }
  return IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, *(_QWORD *)(a2 + 16));
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t *v26;
  char v27;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v13 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  result = (uint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v9 = v8;
  if (!(_BYTE)v8)
  {
    v8 = (void *)*a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v16)
      {
        v20 = result;
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v17 + 16))(v17, v8);
        v9 = 0;
        result = v20;
      }
    }
  }
  if (!*a1)
  {
    LOBYTE(v25) = 0;
    v27 = 0;
    v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19 && v18)
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    result = IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(a1, (uint64_t)&v23);
    if (!*a1)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!v6 || !v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v25 = v4;
  v26 = result;
  v27 = 1;
  result = IPC::Decoder::decode<WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>>(a1, (uint64_t)&v23);
  if (*a1)
  {
    if (v24)
    {
      WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient();
      *(_OWORD *)a2 = v21;
      v10 = v22;
      v22 = 0;
      *(_QWORD *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 24) = 1;
      result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v22, v11);
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_23:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
LABEL_9:
  if (v24)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v23, v8);
  return result;
}

void sub_196C16860(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16, char a17)
{
  if ((_BYTE)a15)
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&a14, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<WebCore::Gradient,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  _QWORD *result;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[56];
  char v15;
  _BYTE v16[36];

  IPC::Decoder::decode<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>>(a1, (uint64_t)v16);
  IPC::Decoder::decode<WebCore::ColorInterpolationMethod>((uint64_t *)a1);
  v5 = v4;
  v6 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>((uint64_t *)a1);
  IPC::Decoder::decode<WebCore::GradientColorStops>((uint64_t *)a1, (uint64_t)v14);
  result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a1, &v12);
  if (*a1)
  {
    if (v16[32] && (v5 & 0xFF00000000) != 0 && v6 > 0xFFu && v15 && v13)
    {
      WebCore::Gradient::create();
      v9 = v11;
      v11 = 0;
      *(_QWORD *)a2 = v9;
      *(_BYTE *)(a2 + 8) = 1;
      result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v11, v10);
      goto LABEL_8;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
LABEL_8:
  if (v15)
    return (_QWORD *)WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
  return result;
}

void sub_196C16980(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::Decoder::decode<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::ColorInterpolationMethod>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::decode(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::GradientColorStops>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::GradientColorStops,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C16ABC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 56))
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::decode(uint64_t *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = (unsigned __int8 *)a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if ((unint64_t)v2 <= v4)
  {
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v27 + 16))(v27, v3, v2);
        v26 = *a1;
        v25 = (unsigned __int8 *)a1[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_18;
  }
  v5 = (_BYTE *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
    goto LABEL_60;
  v6 = *v5;
  if (v6 > 0xD)
    goto LABEL_49;
  if ((_DWORD)v6 == 6)
  {
    v7 = 0;
    v8 = 0x600000000;
    LOBYTE(v9) = 1;
LABEL_6:
    v10 = v9;
    v11 = v8 & 0xFFFFFFFFFFFFFF00;
LABEL_7:
    v12 = v11 | v8;
    LOBYTE(v13) = v7 | v10;
    v14 = v7 & 0xFFFFFF00;
LABEL_8:
    v13 = v13;
    v15 = v12 & 0xFFFFFFFFFFFFFF00;
LABEL_9:
    v12 = v12;
    v16 = v14 & 0xFFFFFF00;
LABEL_10:
    v17 = v15 | v12;
    v18 = v17 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    switch(*v5)
    {
      case 0:
        v35 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        v16 = 0;
        v18 = 0;
        v13 = v35 > 0xFFu;
        if ((v35 & 0xFF00) != 0)
          LOBYTE(v17) = v35;
        else
          LOBYTE(v17) = 0;
        break;
      case 1:
        v36 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if (v36 >= 0x100u)
        {
          v16 = 0;
          v12 = v36;
          v15 = 0x100000000;
          v13 = 1;
        }
        else
        {
          v13 = 0;
          v12 = 0;
          v16 = 0;
          v15 = 0;
        }
        goto LABEL_10;
      case 2:
        v37 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if (v37 >= 0x100u)
        {
          v14 = 0;
          v15 = 0x200000000;
          LOBYTE(v12) = v37;
          v13 = 1;
        }
        else
        {
          v13 = 0;
          LOBYTE(v12) = 0;
          v14 = 0;
          v15 = 0;
        }
        goto LABEL_9;
      case 3:
        v38 = IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1);
        v14 = 0;
        LOBYTE(v13) = v38 > 0xFFu;
        v12 = 0x300000000;
        goto LABEL_8;
      case 4:
        LOWORD(v8) = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if ((unsigned __int16)v8 >= 0x100u)
        {
          v7 = 0;
          v11 = 0x400000000;
          v10 = 1;
        }
        else
        {
          v10 = 0;
          LOBYTE(v8) = 0;
          v7 = 0;
          v11 = 0;
        }
        goto LABEL_7;
      case 5:
        v39 = IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1);
        v7 = 0;
        LOBYTE(v9) = v39 > 0xFFu;
        v8 = 0x500000000;
        goto LABEL_6;
      default:
        v8 = IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(a1, v6);
        v7 = v9 & 0xFFFFFF00;
        goto LABEL_6;
    }
  }
  result = v18 | v17;
  v20 = v16 | v13;
  if (!v13)
    goto LABEL_20;
  while (1)
  {
    v21 = a1[1];
    v22 = *a1;
    v23 = a1[2] - *a1;
    if (v21 <= v23)
      break;
    v24 = (unsigned __int8 *)(v22 + v23);
    v2 = v24 + 1;
    a1[2] = (uint64_t)(v24 + 1);
    if (!v22)
    {
      v31 = v21;
      v32 = 0;
      goto LABEL_25;
    }
    v3 = *v24;
    if (v3 >= 2)
      goto LABEL_26;
    if ((_BYTE)v20)
      return result;
LABEL_59:
    __break(1u);
LABEL_60:
    v25 = v2;
    v26 = v3;
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v25)
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
LABEL_49:
      result = 0;
    }
    v20 = 0;
LABEL_20:
    v28 = *a1;
    v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      v40 = result;
      v41 = v20;
      if (v29)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      result = v40;
      v20 = v41;
    }
  }
  v31 = 0;
  v32 = 0;
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33)
  {
    v44 = v20;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v32 = *a1;
      v31 = a1[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v20 = v44;
  }
LABEL_25:
  v21 = 0;
  v22 = 0;
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34)
  {
    v43 = v20;
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
      v22 = *a1;
      v21 = a1[1];
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v20 = v43;
  }
LABEL_26:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (!result)
    return result;
  v42 = v20;
  if (v21)
  {
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
    if (*a1)
    {
      v3 = v42;
      goto LABEL_59;
    }
  }
  return 0;
}

uint64_t IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v8 = v1;
    v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 >= 3)
  {
LABEL_8:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebCore::GradientColorStops,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _OWORD *v17;
  uint64_t v18;
  char v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _OWORD *v31;
  uint64_t v32;
  _OWORD v33[2];
  _OWORD *v34;
  uint64_t v35;
  _OWORD v36[2];
  char v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD v40[2];
  char v41;
  _DWORD v42[4];
  char v43;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (unint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v25 = v4;
      v26 = 0;
      goto LABEL_39;
    }
    v9 = *v8;
    v34 = v36;
    v35 = 2;
    if (v9 >= 0x10000)
    {
      do
      {
        IPC::Decoder::decode<WebCore::GradientColorStop>(v42, a1);
        if (!v43)
          goto LABEL_51;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GradientColorStop>((unsigned int *)&v34, (unint64_t)v42);
        }
        else
        {
          LODWORD(v34[HIDWORD(v35)]) = v42[0];
          WebCore::Color::Color();
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v30);
        --v9;
      }
      while (v9);
      WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
      WTF::VectorBuffer<WebCore::GradientColorStop,2ul,WTF::FastMalloc>::VectorBuffer((uint64_t)&v38, (uint64_t)&v34);
      goto LABEL_18;
    }
    if (v9 >= 3)
    {
      LODWORD(v35) = v9;
      v34 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    }
    else if (!v9)
    {
      v14 = 0;
      v38 = v40;
      v39 = 2;
      goto LABEL_16;
    }
    do
    {
      IPC::Decoder::decode<WebCore::GradientColorStop>(v42, a1);
      if (!v43)
        goto LABEL_51;
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GradientColorStop>((unsigned int *)&v34, (unint64_t)v42);
      }
      else
      {
        LODWORD(v34[HIDWORD(v35)]) = v42[0];
        WebCore::Color::Color();
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v11);
      --v9;
    }
    while (v9);
    v13 = v34;
    v38 = v40;
    v39 = 2;
    if (v34 != v36)
    {
      v34 = v36;
      v38 = v13;
      v24 = v35;
      LODWORD(v35) = 2;
      LODWORD(v39) = v24;
      goto LABEL_17;
    }
    v14 = HIDWORD(v35);
LABEL_16:
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v36, (unsigned int *)&v36[v14], (unsigned int *)v40);
LABEL_17:
    v15 = HIDWORD(v35);
    HIDWORD(v35) = 0;
    HIDWORD(v39) = v15;
LABEL_18:
    v41 = 1;
    goto LABEL_19;
  }
  v25 = 0;
  v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  v27 = a1[3];
  if (v27)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v5, v4);
      v26 = *a1;
      v25 = a1[1];
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
  }
LABEL_39:
  *a1 = 0;
  a1[1] = 0;
  v28 = a1[3];
  if (v28 && v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
  LOBYTE(v38) = 0;
  v41 = 0;
LABEL_41:
  v10 = (void *)*a1;
  v29 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v29)
    result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v10);
  while (1)
  {
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      goto LABEL_29;
    }
    if (v41)
      break;
    __break(1u);
LABEL_51:
    LOBYTE(v38) = 0;
    v41 = 0;
    std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v10);
LABEL_19:
    result = WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v12);
    if (!v41)
      goto LABEL_41;
  }
  v31 = v33;
  v32 = 2;
  v17 = v38;
  if (v38 == v40)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v40, (unsigned int *)&v40[HIDWORD(v39)], (unsigned int *)v33);
    v17 = v31;
  }
  else
  {
    v38 = v40;
    v31 = v17;
    v21 = v39;
    LODWORD(v39) = 2;
    LODWORD(v32) = v21;
  }
  v18 = HIDWORD(v39);
  HIDWORD(v39) = 0;
  HIDWORD(v32) = v18;
  v34 = v36;
  v35 = 2;
  if (v17 == v33)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v33, (unsigned int *)&v33[v18], (unsigned int *)v36);
    LODWORD(v18) = HIDWORD(v32);
    v17 = v34;
  }
  else
  {
    v31 = v33;
    v34 = v17;
    v22 = v32;
    LODWORD(v32) = 2;
    LODWORD(v35) = v22;
  }
  HIDWORD(v32) = 0;
  HIDWORD(v35) = v18;
  v37 = 0;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 2;
  if (v17 == v36)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v36, (unsigned int *)&v36[v18], (unsigned int *)(a2 + 16));
    LODWORD(v18) = HIDWORD(v35);
    v19 = v37;
  }
  else
  {
    v19 = 0;
    v34 = v36;
    *(_QWORD *)a2 = v17;
    v23 = v35;
    LODWORD(v35) = 2;
    *(_DWORD *)(a2 + 8) = v23;
  }
  HIDWORD(v35) = 0;
  *(_DWORD *)(a2 + 12) = v18;
  *(_BYTE *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 1;
  WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v10);
  result = WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v20);
LABEL_29:
  if (v41)
    return WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
  return result;
}

void sub_196C173BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29)
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v5 = result;
    WTF::VectorDestructor<true,WebCore::GradientColorStop>::destruct(*(_QWORD **)result, (_QWORD *)(*(_QWORD *)result + 16 * v2));
    result = v5;
  }
  v3 = *(WTF **)result;
  if (result + 16 != *(_QWORD *)result && v3 != 0)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v6 = result;
    WTF::fastFree(v3, a2);
    return v6;
  }
  return result;
}

unsigned int *WTF::VectorMover<false,WebCore::GradientColorStop>::move(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *a3 = *v5;
      result = (unsigned int *)WebCore::Color::Color();
      v7 = *((_QWORD *)v5 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(result);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, result));
        if (!v9)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
        }
      }
      a3 += 4;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::GradientColorStop>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  int v10;
  void *v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[7];
  _BYTE v25[8];
  char v26;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (int *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = 0;
      v10 = *v8;
      goto LABEL_8;
    }
    v18 = v4;
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5, v4);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = 0;
  v21 = a2[3];
  if (v21 && v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  v9 = 1;
LABEL_8:
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v25);
  if (!v26)
    goto LABEL_20;
  while (1)
  {
    if (!*a2)
    {
      *a1 = 0;
      a1[16] = 0;
      goto LABEL_13;
    }
    if (!v9 && v26)
      break;
    __break(1u);
LABEL_20:
    v11 = (void *)*a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v16)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v17 + 16))(v17, v11);
  }
  WebCore::Color::Color();
  *(_DWORD *)a1 = v10;
  WebCore::Color::Color();
  a1[16] = 1;
  if ((*(_QWORD *)v24 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(*(_QWORD *)v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v11);
    }
  }
LABEL_13:
  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v11);
  if (!a1[16])
  {
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v23)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
    }
  }
  return result;
}

void sub_196C176F4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = IPC::Decoder::decode<float>(a1);
  v5 = IPC::Decoder::decode<float>(a1);
  v6 = IPC::Decoder::decode<float>(a1);
  result = IPC::Decoder::decode<float>(a1);
  v8 = *a1;
  if (!*a1)
    goto LABEL_9;
  if ((v4 & 0xFF00000000) == 0
    || (v5 & 0xFF00000000) == 0
    || (v6 & 0xFF00000000) == 0
    || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_9:
    *(_BYTE *)a2 = 0;
    goto LABEL_7;
  }
  *(_DWORD *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  LOBYTE(v8) = 1;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = result;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
LABEL_13:
    v14 = 0;
    v15 = 0;
    *v2 = 0;
    v2[1] = 0;
    v16 = v2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *v2;
        v14 = v2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = (_BYTE *)(v5 + v6);
  result[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_14:
    *v2 = 0;
    v2[1] = 0;
    result = (unint64_t *)v2[3];
    if (result)
    {
      if (v14)
        result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v15);
    }
    goto LABEL_15;
  }
  v8 = *v7;
  if (v8 >= 3)
  {
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  if (!*v7)
  {
    v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(result);
    v11 = v10;
    if (!v10)
    {
      v17 = *v2;
      v18 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v19 = v2[3];
      if (v19)
      {
        if (v18)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
      }
    }
    result = (unint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(v2);
    v4 = v12;
    if (!v12)
    {
      v20 = *v2;
      v21 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v22 = v2[3];
      if (v22)
      {
        if (v21)
        {
          v24 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
          v4 = 0;
          result = v24;
        }
      }
    }
    v5 = *v2;
    if (!*v2)
    {
      v23 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      result = (unint64_t *)v2[3];
      if (result && v23)
        result = (unint64_t *)(*(uint64_t (**)(unint64_t *, _QWORD))(*result + 16))(result, 0);
      v13 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_11;
    }
    if (v11 && v4)
    {
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = result;
      v13 = 1;
      *(_DWORD *)(a2 + 28) = 0;
LABEL_11:
      *(_BYTE *)(a2 + 32) = v13;
      return result;
    }
    __break(1u);
    goto LABEL_13;
  }
  return (unint64_t *)IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder,0ul>(a2, result, v8);
}

unint64_t IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _OWORD v52[3];
  FloatSize v53;
  int v54;
  FloatSize v55;
  int v56;
  FloatSize v57;
  int v58;
  FloatSize v59;
  int v60;
  FloatRect v61;
  char v62;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_20;
  while (1)
  {
    v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v30 = *a1;
      v31 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v32 = a1[3];
      if (v32)
      {
        if (v31)
        {
          v33 = v7;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v32 + 16))(a1[3], v30);
          v7 = v33;
        }
      }
    }
    v10 = *a1;
    if (*a1)
    {
      if (!v6 || !v9)
        goto LABEL_19;
      v61.m_location = (FloatPoint)v4;
      v61.m_size = (FloatSize)v7;
      v62 = 1;
    }
    else
    {
      LOBYTE(v61.m_location.m_x) = 0;
      v62 = 0;
      v34 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v35 = a1[3];
      if (v35 && v34)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, 0);
    }
    v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v13 = v12;
    v6 = v12;
    if (!(_BYTE)v12)
    {
      v36 = *a1;
      v37 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (v38)
      {
        if (v37)
        {
          v39 = v11;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v38 + 16))(a1[3], v36);
          v11 = v39;
        }
      }
    }
    v59 = (FloatSize)v11;
    v60 = v13;
    v14 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v16 = v15;
    v17 = v15;
    if (!(_BYTE)v15)
    {
      v40 = *a1;
      v41 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (v42)
      {
        if (v41)
        {
          v43 = v14;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v42 + 16))(a1[3], v40);
          v14 = v43;
        }
      }
    }
    v57 = (FloatSize)v14;
    v58 = v16;
    v18 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v20 = v19;
    v21 = v19;
    if (!(_BYTE)v19)
    {
      v44 = *a1;
      v45 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v46 = a1[3];
      if (v46)
      {
        if (v45)
        {
          v50 = v18;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
          v18 = v50;
        }
      }
    }
    v55 = (FloatSize)v18;
    v56 = v20;
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v4 = v23;
    v24 = v23;
    if (!(_BYTE)v23)
    {
      v47 = *a1;
      v48 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49)
      {
        if (v48)
        {
          v51 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
          v24 = 0;
          result = v51;
        }
      }
    }
    v53 = (FloatSize)result;
    v54 = v4;
    if (!*a1)
      break;
    if (v10 && v6 && v17 && v21 && v24)
    {
      result = WebCore::FloatRoundedRect::FloatRoundedRect((WebCore::FloatRoundedRect *)v52, &v61, &v59, &v57, &v55, &v53);
      v25 = v52[1];
      *(_OWORD *)a2 = v52[0];
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v52[2];
      *(_BYTE *)(a2 + 48) = 1;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    v26 = *a1;
    v27 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
      v29 = v27 == 0;
    else
      v29 = 1;
    if (!v29)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatPoint>(unint64_t *a1)
{
  unint64_t result;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v6 = v5;
  if (!v5)
    goto LABEL_9;
  while (1)
  {
    result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v9 = v8;
    if (!v8)
    {
      v15 = *a1;
      v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          v18 = result;
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
          v9 = 0;
          result = v18;
        }
      }
    }
    v10 = *a1;
    if (!*a1)
      break;
    if (v6 && v9)
    {
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  *(_BYTE *)a2 = 0;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

uint64_t IPC::Decoder::decode<float>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v6 = *v5;
      v7 = 0x100000000;
      return v7 | v6;
    }
    v9 = v1;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v13;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  v6 = 0;
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    v6 = 0;
    v7 = 0;
  }
  return v7 | v6;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteLayerTreeDrawingArea::*&)(void),WebKit::RemoteLayerTreeDrawingArea*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebKit::PlatformCALayerRemote::setOpaque(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((_BYTE *)this + 660) = a2;
  *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x800000000uLL));
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

uint64_t WebKit::PageClientImpl::isViewFocused(id *this)
{
  id WeakRetained;
  uint64_t v3;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (WebKit::PageClientImpl::isViewInWindow(this)
    && (objc_msgSend(WeakRetained, "_isBackground") & 1) == 0
    && (objc_msgSend(WeakRetained, "_contentViewIsFirstResponder") & 1) != 0)
  {
    v3 = 1;
    if (!WeakRetained)
      return v3;
    goto LABEL_7;
  }
  v3 = objc_msgSend(WeakRetained, "_isRetainingActiveFocusedState");
  if (WeakRetained)
LABEL_7:
    CFRelease(WeakRetained);
  return v3;
}

void sub_196C180E0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::updateActivityState(_QWORD *a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(_WORD *)(a1[4] + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  *(_WORD *)(a1[4] + 48) &= ~a2;
  if ((a2 & 2) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5))
    *(_WORD *)(a1[4] + 48) |= 2u;
  if ((a2 & 1) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5))
    *(_WORD *)(a1[4] + 48) |= 1u;
  if ((a2 & 4) != 0)
  {
    v7 = v6 & 4;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    v9 = v8;
    if (v8)
      *(_WORD *)(a1[4] + 48) |= 4u;
    if ((v7 != 0) != v8)
    {
      v10 = qword_1ECE71A28;
      if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
      {
        v11 = a1[4];
        v12 = *(_QWORD *)(v11 + 744);
        v13 = *(_QWORD *)(v11 + 1896);
        v14 = *(_QWORD *)(a1[26] + 136);
        if (v14)
          LODWORD(v14) = *(_DWORD *)(v14 + 108);
        v20 = 134219264;
        v21 = a1;
        v22 = 2048;
        v23 = v12;
        v24 = 2048;
        v25 = v13;
        v26 = 1024;
        v27 = v14;
        v28 = 1024;
        v29 = v7 >> 2;
        v30 = 1024;
        v31 = v9;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateActivityState: view visibility state changed %d -> %d", (uint8_t *)&v20, 0x32u);
      }
    }
  }
  if ((a2 & 8) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5))
    *(_WORD *)(a1[4] + 48) |= 8u;
  if ((a2 & 0x10) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5))
    *(_WORD *)(a1[4] + 48) |= 0x10u;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  if ((a2 & 0x20) != 0 && v15)
    *(_WORD *)(a1[4] + 48) |= 0x20u;
  if ((a2 & 0x40) != 0)
  {
    v16 = a1[4];
    if ((*(_BYTE *)(v16 + 808) & 1) != 0 && (*(_BYTE *)(v16 + 872) & 1) == 0)
      *(_WORD *)(v16 + 48) |= 0x40u;
  }
  if ((a2 & 0x80) != 0)
  {
    v17 = a1[4];
    if (*(_QWORD *)(v17 + 984) || *(unsigned __int8 *)(v17 + 968) <= 1u)
      *(_WORD *)(v17 + 48) |= 0x80u;
  }
  if ((a2 & 0x100) != 0)
  {
    v18 = a1[4];
    if ((*(_DWORD *)(v18 + 808) & 0x1241800) != 0)
      *(_WORD *)(v18 + 48) |= 0x100u;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
}

uint64_t WebKit::PageClientImpl::isViewVisible(id *this)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (!WeakRetained)
    return 0;
  v3 = WeakRetained;
  if (WebKit::PageClientImpl::isViewInWindow(this) && !objc_msgSend(v3, "_isBackground")
    || (objc_msgSend(v3, "_isShowingVideoPictureInPicture") & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = objc_msgSend(v3, "_mayAutomaticallyShowVideoPictureInPicture");
  }
  CFRelease(v3);
  return v4;
}

void sub_196C18464(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::PageClientImpl::isViewInWindow(id *this)
{
  id WeakRetained;
  id v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_msgSend(WeakRetained, "window");
LABEL_4:
    CFRelease(v3);
    return v4 != 0;
  }
  v3 = objc_loadWeakRetained(this + 5);
  v4 = objc_msgSend(v3, "window");
  if (v3)
    goto LABEL_4;
  return v4 != 0;
}

void sub_196C184D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isViewWindowActive(id *this)
{
  uint64_t v2;
  id WeakRetained;

  if ((WebKit::PageClientImpl::isViewVisible(this) & 1) != 0)
    return 1;
  WeakRetained = objc_loadWeakRetained(this + 2);
  v2 = objc_msgSend(WeakRetained, "_isRetainingActiveFocusedState");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_196C185BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isVisuallyIdle(id *this)
{
  return WebKit::PageClientImpl::isViewVisible(this) ^ 1;
}

void sub_196C1915C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::hasActiveSnapPoint(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  uint64_t v1;
  WebCore::ScrollingTreeScrollingNode *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *((_QWORD *)this + 3);
  v2 = *(WebCore::ScrollingTreeScrollingNode **)(v1 + 16);
  if (!v2)
    return 0;
  v4 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v1 + 16));
  v5 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v2);
  v6 = *(_DWORD *)(v4 + 20);
  if (v6)
  {
    if (*((_BYTE *)this + 116) && v6 <= *((_DWORD *)this + 28))
      return 0;
  }
  else if (!*(_DWORD *)(v5 + 36))
  {
    return 0;
  }
  v7 = *(_DWORD *)(v5 + 36);
  return !v7 || !*((_BYTE *)this + 124) || v7 > *((_DWORD *)this + 30);
}

uint64_t WebKit::WebPageProxy::setMinimumUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;

  v2 = *(_QWORD *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 828) || *((float *)a2 + 1) != *(float *)(v2 + 832))
  {
    *(_QWORD *)(v2 + 828) = *(_QWORD *)a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v4 = *(_QWORD *)(this + 32);
        v5 = (int *)(v4 + 828);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMinimumUnobscuredSize>(*(_QWORD *)(this + 208), &v5, *(_QWORD *)(v4 + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMaximumUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;

  v2 = *(_QWORD *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 800) || *((float *)a2 + 1) != *(float *)(v2 + 804))
  {
    *(_QWORD *)(v2 + 800) = *(_QWORD *)a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v4 = *(_QWORD *)(this + 32);
        v5 = (int *)(v4 + 800);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMaximumUnobscuredSize>(*(_QWORD *)(this + 208), &v5, *(_QWORD *)(v4 + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setDefaultUnobscuredSize(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;

  v2 = *(_QWORD *)(this + 32);
  if (*(float *)a2 != *(float *)(v2 + 216) || *((float *)a2 + 1) != *(float *)(v2 + 220))
  {
    *(_QWORD *)(v2 + 216) = *(_QWORD *)a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v4 = *(_QWORD *)(this + 32);
        v5 = (int *)(v4 + 216);
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDefaultUnobscuredSize>(*(_QWORD *)(this + 208), &v5, *(_QWORD *)(v4 + 1896), 0);
      }
    }
  }
  return this;
}

BOOL WebKit::DrawingAreaProxy::setSize(int32x2_t *this, const IntSize *a2, int32x2_t *a3, double a4, int32x4_t a5)
{
  int32x4_t v5;
  int32x4_t v6;
  int v7;

  *(int32x2_t *)v5.i8 = this[7];
  *(IntSize *)a5.i8 = *a2;
  v5.u64[1] = (unint64_t)*a3;
  v6 = vceqq_s32(v5, a5);
  v7 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v6, 0x1FuLL)), (int8x16_t)xmmword_1978D0490));
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(v6), 0xFuLL))) & 1) == 0)
  {
    this[7] = (int32x2_t)*a2;
    this[8] = vadd_s32(*a3, this[8]);
    (*(void (**)(int32x2_t *))(*(_QWORD *)this + 304))(this);
  }
  return (~v7 & 0xF) != 0;
}

void sub_196C1A67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::scalesAreEssentiallyEqual(WebKit *this, float a2, float a3)
{
  float v4;
  float v5;
  BOOL v7;
  float v8;

  if (a2 == a3)
    return 1;
  v4 = vabds_f32(a2, a3);
  v5 = fabsf(a2);
  if (v5 < 1.0 && (float)(v5 * 3.4028e38) < v4)
    return 0;
  v7 = (float)(v5 * 1.1755e-38) <= v4 || v5 <= 1.0;
  if (v7 && (float)(v4 / v5) > 0.01)
    return 0;
  v8 = fabsf(a3);
  if (v8 < 1.0 && (float)(v8 * 3.4028e38) < v4)
    return 0;
  if (v8 > 1.0 && (float)(v8 * 1.1755e-38) > v4)
    return 1;
  return (float)(v4 / v8) <= 0.01;
}

uint64_t contentOffsetBoundedInValidRange(UIScrollView *a1, CGPoint a2)
{
  -[UIScrollView adjustedContentInset](a1, "adjustedContentInset");
  -[UIScrollView contentSize](a1, "contentSize");
  return -[UIScrollView bounds](a1, "bounds");
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior(void *a1, int a2, int a3, int a4)
{
  char isKindOfClass;
  _BOOL8 v9;
  uint64_t result;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v9 = a2 != 2;
  if ((isKindOfClass & 1) != 0)
  {
    result = objc_msgSend(a1, "_setBouncesInternal:vertical:", v9, a3 != 2);
    if (!a4)
      return result;
LABEL_5:
    objc_msgSend(a1, "_wk_setTransfersHorizontalScrollingToParent:", a2 == 0);
    return objc_msgSend(a1, "_wk_setTransfersVerticalScrollingToParent:", a3 == 0);
  }
  objc_msgSend(a1, "setBouncesHorizontally:", v9);
  result = objc_msgSend(a1, "setBouncesVertically:", a3 != 2);
  if (a4)
    goto LABEL_5;
  return result;
}

BOOL WebKit::RemoteScrollingCoordinatorProxy::hasScrollableOrZoomedMainFrame(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(*((_QWORD *)this + 3) + 16);
  if (!v1)
    return 0;
  if ((!WebCore::IOSApplication::isEventbrite(this) || WTF::linkedOnOrAfterSDKWithBehavior())
    && v1[250] == 1
    && v1[251] == 1)
  {
    return v1[406] != 0;
  }
  return 1;
}

uint64_t WebKit::WebPageProxy::setViewportConfigurationViewLayoutSize(uint64_t this, const WebCore::FloatSize *a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  const WebCore::FloatSize *v17;
  double v18;
  double v19;
  IPC::Encoder *v20;

  v7 = this;
  *(_QWORD *)(*(_QWORD *)(this + 32) + 2116) = *(_QWORD *)a2;
  *(double *)(this + 1008) = a3;
  *(double *)(this + 1016) = a4;
  v8 = *(_QWORD *)(this + 1120);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 16);
    v9 = v8 + 16;
    v17 = a2;
    v18 = a3;
    v19 = a4;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2442;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v20 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>((IPC::Encoder *)v12, (uint64_t)&v17);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v20, 0);
    this = (uint64_t)v20;
    v20 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v13);
      this = WTF::fastFree(v14, v15);
    }
  }
  if (!*(_BYTE *)(v7 + 729))
  {
    if (*(_BYTE *)(v7 + 728))
    {
      v16 = *(_QWORD *)(v7 + 208);
      v17 = a2;
      v18 = a3;
      v19 = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(v16, (uint64_t)&v17, *(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896), 0);
    }
  }
  return this;
}

void sub_196C1B784(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2442;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_196C1B888(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, *(int **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

char *IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v5;
  return result;
}

uint64_t changeContentOffsetBoundedInValidRange(UIScrollView *a1)
{
  CGPoint v3;

  WebCore::FloatPoint::operator CGPoint();
  contentOffsetBoundedInValidRange(a1, v3);
  return -[UIScrollView setContentOffset:](a1, "setContentOffset:");
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sizeDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollingTree *v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728))
  {
    v4 = *(_QWORD *)(v2 + 200);
    if (v4)
    {
      v5 = *(WebCore::ScrollingTree **)(v4 + 24);
      if (v5)
        WebCore::ScrollingTree::viewSizeDidChange(v5);
    }
    if (!*((_BYTE *)this + 80))
      WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
  }
}

void sub_196C1C074(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, WTF *a12, id location, WTF *a14)
{
  unsigned int *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;

  if (a11)
    (*(void (**)(id))(*(_QWORD *)a11 + 8))(a11);
  v16 = (unsigned int *)a14;
  a14 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  objc_destroyWeak(&location);
  do
  {
    v20 = __ldaxr(v14);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v14));
  if (!v21)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v19);
  }
  _Unwind_Resume(a1);
}

void sub_196C1C1B4()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x196C1C178);
}

uint64_t WebKit::PlatformCALayerRemote::layerPool(WebKit::PlatformCALayerRemote *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 104);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 + 96;
  else
    return 0;
}

uint64_t WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction(uint64_t a1)
{
  atomic_store(1u, **(unsigned __int8 ***)(a1 + 16));
  return 1;
}

void IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  char v43;
  char v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  const void *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  CFTypeRef v94;
  _BYTE *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  int v109;
  char v110;
  unint64_t v111;
  int v112;
  unsigned __int8 v113;
  char v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  CFTypeRef cf;
  char v122;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 < v7 || v5 - v7 <= 3)
  {
    v70 = 0;
    v71 = 0;
    *a1 = 0;
    a1[1] = 0;
    v72 = a1[3];
    if (v72)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v72 + 16))(v72, v6, v5);
        v71 = *a1;
        v70 = a1[1];
      }
      else
      {
        v70 = 0;
        v71 = 0;
      }
    }
    goto LABEL_91;
  }
  v9 = (int *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v70 = v5;
    v71 = 0;
LABEL_91:
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (v73)
    {
      if (v70)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
    }
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  v10 = 0;
  v11 = *v9;
  v120 = 0;
  if (!v11)
  {
LABEL_73:
    *(_QWORD *)a2 = v10;
    a2[8] = 1;
    return;
  }
  v108 = a2;
  v12 = 0;
  v109 = v11;
  while (1)
  {
    v13 = a1[1];
    v14 = (char *)*a1;
    v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v13 < v15 || v13 - v15 <= 3)
    {
      *a1 = 0;
      a1[1] = 0;
      v74 = a1[3];
      if (v74)
        v75 = v13 == 0;
      else
        v75 = 1;
      if (!v75)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v74 + 16))(v74);
        v14 = (char *)*a1;
        v13 = a1[1];
LABEL_130:
        v98 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (v98)
          v99 = v13 == 0;
        else
          v99 = 1;
        if (!v99)
          (*(void (**)(unint64_t, char *, unint64_t))(*(_QWORD *)v98 + 16))(v98, v14, v13);
      }
      *v108 = 0;
      v108[8] = 0;
      goto LABEL_88;
    }
    v17 = &v14[v15];
    a1[2] = (unint64_t)(v17 + 4);
    if (!v14)
      goto LABEL_130;
    v119 = *(_DWORD *)v17;
    v18 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v20 = v19;
    if (!v19)
    {
      v76 = *a1;
      v77 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v78 = a1[3];
      if (v78)
      {
        if (v77)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v78 + 16))(v78, v76);
      }
    }
    v21 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v22 = v14;
    if (!(_BYTE)v14)
    {
      v14 = (char *)*a1;
      v79 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v80 = a1[3];
      if (!v80)
        goto LABEL_103;
      if (v79)
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v80 + 16))(v80, v14);
    }
    if (*a1)
    {
      if (!v20 || !v22)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        *v108 = 0;
        v108[8] = 0;
        if (v2)
          CFRelease((CFTypeRef)v2);
        goto LABEL_88;
      }
      v116 = 0;
      v23 = v18 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v18) = 0;
      v100 = a1[3];
      v101 = a1[1];
      v116 = 1;
      *a1 = 0;
      a1[1] = 0;
      v23 = 0;
      if (v100 && v101)
      {
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v100 + 16))(v100, 0);
LABEL_103:
        LOBYTE(v18) = 0;
        v23 = 0;
        v116 = 1;
      }
    }
    v24 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v26 = v25;
    if (!v25)
    {
      v81 = *a1;
      v82 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v83 = a1[3];
      if (v83)
      {
        if (v82)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v83 + 16))(v83, v81);
      }
    }
    v27 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v28 = v14;
    if (!(_BYTE)v14)
    {
      v14 = (char *)*a1;
      v84 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v85 = a1[3];
      if (!v85)
      {
        LOBYTE(v24) = 0;
        v29 = 0;
        v2 = 1;
        goto LABEL_27;
      }
      if (v84)
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v85 + 16))(v85, v14);
    }
    if (*a1)
    {
      if (!v26 || !v28)
        goto LABEL_85;
      v2 = 0;
      v29 = v24 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v24) = 0;
      v102 = a1[3];
      v103 = a1[1];
      v2 = 1;
      *a1 = 0;
      a1[1] = 0;
      v29 = 0;
      if (v102 && v103)
      {
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v102 + 16))(v102, 0);
        LOBYTE(v24) = 0;
        v29 = 0;
      }
    }
LABEL_27:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a1, (uint64_t)&cf);
    v118 = IPC::Decoder::decode<unsigned int>(a1);
    v117 = IPC::Decoder::decode<unsigned int>(a1);
    v30 = a1[1];
    v31 = *a1;
    v32 = a1[2] - *a1;
    v113 = v24;
    v112 = v12;
    v111 = v29;
    if (v30 <= v32)
    {
      *a1 = 0;
      a1[1] = 0;
      v86 = a1[3];
      if (!v86 || !v30)
      {
LABEL_110:
        v87 = 0;
        v88 = 0;
        *a1 = 0;
        a1[1] = 0;
        v114 = 0;
        v115 = 1;
        goto LABEL_111;
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v86 + 16))(v86);
      v31 = *a1;
      v30 = a1[1];
LABEL_155:
      v104 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (!v104 || !v30)
        goto LABEL_110;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v104 + 16))(v104, v31);
      v35 = 0;
      v31 = *a1;
      v30 = a1[1];
      goto LABEL_158;
    }
    v33 = (unsigned __int8 *)(v31 + v32);
    v34 = v31 + v32 + 1;
    a1[2] = v34;
    if (!v31)
      goto LABEL_155;
    v35 = *v33;
    if (v35 < 2)
    {
      v115 = 0;
      v36 = 1;
      goto LABEL_31;
    }
LABEL_158:
    v87 = 0;
    v105 = a1[3];
    v114 = 0;
    v115 = 1;
    *a1 = 0;
    a1[1] = 0;
    if (!v105)
      goto LABEL_172;
    v88 = 0;
    if (!v30)
      goto LABEL_111;
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v105 + 16))(v105, v31);
    v36 = 0;
    v31 = *a1;
    v30 = a1[1];
    v115 = 1;
    v34 = a1[2];
LABEL_31:
    if (v35)
      v37 = v36;
    else
      v37 = 0;
    v38 = v34 - v31;
    v114 = v37;
    if (v30 <= v38)
    {
      v87 = 0;
      v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v30 && v107)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v107 + 16))(v107);
        v88 = *a1;
        v87 = a1[1];
      }
      else
      {
LABEL_172:
        v88 = 0;
      }
LABEL_111:
      *a1 = 0;
      a1[1] = 0;
      v89 = a1[3];
      if (v89 && v87)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v89 + 16))(v89, v88, v87);
        v41 = 0;
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v41 = 0;
      }
      goto LABEL_113;
    }
    v39 = (unsigned __int8 *)(v31 + v38);
    v40 = v31 + v38 + 1;
    a1[2] = v40;
    if (!v31)
    {
      v87 = v30;
      v88 = 0;
      goto LABEL_111;
    }
    v41 = *v39;
    if (v41 < 2)
    {
      v42 = 0;
      v43 = 1;
      goto LABEL_38;
    }
LABEL_113:
    *a1 = 0;
    a1[1] = 0;
    v90 = a1[3];
    if (!v90 || !v30)
    {
      v110 = 0;
      v91 = 0;
      v31 = 0;
      v42 = 1;
LABEL_115:
      *a1 = 0;
      a1[1] = 0;
      v92 = a1[3];
      if (v92 && v91)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v92 + 16))(v92, v31, v91);
        v47 = 0;
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v47 = 0;
      }
      goto LABEL_117;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v90 + 16))(v90, v31);
    v43 = 0;
    v31 = *a1;
    v30 = a1[1];
    v42 = 1;
    v40 = a1[2];
LABEL_38:
    if (v41)
      v44 = v43;
    else
      v44 = 0;
    v45 = v40 - v31;
    v110 = v44;
    if (v30 <= v45)
    {
      v91 = 0;
      v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v30 && v106)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v106 + 16))(v106);
        v31 = *a1;
        v91 = a1[1];
      }
      else
      {
        v31 = 0;
      }
      goto LABEL_115;
    }
    v46 = (unsigned __int8 *)(v31 + v45);
    a1[2] = (unint64_t)(v46 + 1);
    if (!v31)
    {
      v91 = v30;
      goto LABEL_115;
    }
    v47 = *v46;
    if (v47 < 2)
    {
      v48 = v27;
      v49 = v21;
      v50 = v18;
      v51 = 0;
      v52 = 1;
      goto LABEL_45;
    }
LABEL_117:
    *a1 = 0;
    a1[1] = 0;
    v93 = a1[3];
    if (v93)
    {
      v48 = v27;
      v49 = v21;
      v50 = v18;
      if (v30)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v31);
    }
    else
    {
      v48 = v27;
      v49 = v21;
      v50 = v18;
    }
    v52 = 0;
    v51 = 1;
LABEL_45:
    v53 = v47 ? v52 : 0;
    v54 = IPC::Decoder::decode<float>(a1);
    v14 = (char *)*a1;
    if (!*a1)
      break;
    if (v116)
      goto LABEL_85;
    if ((_DWORD)v2)
      goto LABEL_85;
    if (!v122)
      goto LABEL_85;
    v2 = (uint64_t)cf;
    cf = 0;
    if ((v118 & 0xFF00000000) == 0)
      goto LABEL_85;
    if ((v117 & 0xFF00000000) == 0)
      goto LABEL_85;
    if (v115)
      goto LABEL_85;
    if (v42)
      goto LABEL_85;
    if (v51)
      goto LABEL_85;
    v55 = v54;
    if ((v54 & 0xFF00000000) == 0)
      goto LABEL_85;
    if ((v119 - 1) > 0xFFFFFFFD)
      goto LABEL_86;
    v56 = v120;
    if (v120
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(&v120),
          (v56 = v120) != 0))
    {
      v57 = *(_DWORD *)(v56 - 8);
    }
    else
    {
      v57 = 0;
    }
    v58 = 9 * ((v119 + ~(v119 << 15)) ^ ((v119 + ~(v119 << 15)) >> 10));
    v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
    v60 = v57 & (v59 ^ HIWORD(v59));
    v61 = (_DWORD *)(v56 + (v60 << 6));
    v62 = *v61;
    if (*v61)
    {
      v68 = 0;
      v69 = 1;
      while (v62 != v119)
      {
        if (v62 == -1)
          v68 = v61;
        v60 = ((_DWORD)v60 + v69) & v57;
        v61 = (_DWORD *)(v56 + (v60 << 6));
        v62 = *v61;
        ++v69;
        if (!*v61)
        {
          if (v68)
          {
            *v68 = 0;
            WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue((uint64_t)(v68 + 2));
            --*(_DWORD *)(v120 - 16);
            v61 = v68;
          }
          goto LABEL_63;
        }
      }
      goto LABEL_86;
    }
LABEL_63:
    *v61 = v119;
    *((_QWORD *)v61 + 1) = v23 | v50;
    *((_QWORD *)v61 + 2) = v49;
    *((_QWORD *)v61 + 3) = v111 | v113;
    *((_QWORD *)v61 + 4) = v48;
    v63 = (const void *)*((_QWORD *)v61 + 5);
    *((_QWORD *)v61 + 5) = v2;
    if (v63)
      CFRelease(v63);
    v61[12] = v118;
    v61[13] = v117;
    *((_BYTE *)v61 + 56) = v114;
    *((_BYTE *)v61 + 57) = v110;
    *((_BYTE *)v61 + 58) = v53;
    v61[15] = v55;
    v64 = v120;
    if (v120)
      v65 = *(_DWORD *)(v120 - 12) + 1;
    else
      v65 = 1;
    *(_DWORD *)(v120 - 12) = v65;
    v66 = (*(_DWORD *)(v64 - 16) + v65);
    v67 = *(unsigned int *)(v64 - 4);
    if (v67 > 0x400)
    {
      if (v67 <= 2 * v66)
LABEL_84:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(&v120);
    }
    else if (3 * v67 <= 4 * v66)
    {
      goto LABEL_84;
    }
    v12 = v112 + 1;
    if (v112 + 1 == v109)
    {
      v10 = v120;
      a2 = v108;
      goto LABEL_73;
    }
  }
  if (v122)
  {
    v94 = cf;
    cf = 0;
    v95 = v108;
    if (v94)
    {
      CFRelease(v94);
      v14 = (char *)*a1;
    }
  }
  else
  {
    v95 = v108;
  }
  v96 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v97 = a1[3];
  if (v97 && v96)
    (*(void (**)(unint64_t))(*(_QWORD *)v97 + 16))(v97);
  *v95 = 0;
  v95[8] = 0;
LABEL_88:
  if (v120)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v120, v14);
}

void sub_196C1CB64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,char a22)
{
  if (a20)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a20, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  const void *v13;

  v2 = *a1;
  if (!*a1)
  {
    LODWORD(v3) = 0;
    v4 = 0;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  LODWORD(v3) = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!(_DWORD)v3)
    goto LABEL_3;
  v5 = (_DWORD)v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  v6 = v5;
  result = WTF::fastMalloc((WTF *)(((unint64_t)v5 << 6) | 0x10));
  v9 = result;
  v10 = result + 16;
  if (v5)
  {
    v11 = result + 24;
    do
    {
      *(_DWORD *)(v11 - 8) = 0;
      result = (uint64_t)WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue(v11);
      v11 += 64;
      --v6;
    }
    while (v6);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if ((_DWORD)v3)
  {
    v3 = v3;
    for (i = v2; ; i += 64)
    {
      if (*(_DWORD *)i != -1)
      {
        if (*(_DWORD *)i)
        {
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, (int *)i);
          v13 = *(const void **)(i + 40);
          *(_QWORD *)(i + 40) = 0;
          if (v13)
LABEL_18:
            CFRelease(v13);
        }
        else
        {
          v13 = *(const void **)(i + 40);
          *(_QWORD *)(i + 40) = 0;
          if (v13)
            goto LABEL_18;
        }
      }
      if (!--v3)
        return WTF::fastFree((WTF *)(v2 - 16), v8);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v8);
  return result;
}

CFTypeRef WTF::GenericHashTraits<WebCore::ScreenData>::emptyValue(uint64_t a1)
{
  CFTypeRef result;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  result = *(CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    result = CFRetain(result);
  *(_DWORD *)(a1 + 47) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 1065353216;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v9);
  if (v10
    && (result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v11), v12))
  {
    if (v10)
    {
      v5 = v11;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v5;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = *a1;
  if (!*a1)
    goto LABEL_7;
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(_BYTE *)a2 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(_BYTE *)(a2 + 16) = v9;
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  char v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char v51;
  char v52;
  char v53;
  char v54;
  unsigned int v55;
  char v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v4 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  v5 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  v6 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  v7 = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  result = IPC::Decoder::decode<WebKit::WebKitAXValueState>(a1);
  v9 = a1[1];
  v10 = *a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
    goto LABEL_28;
  v12 = (unsigned __int8 *)(v10 + v11);
  v13 = v10 + v11 + 1;
  a1[2] = v13;
  if (!v10)
  {
    v28 = v9;
    v29 = 0;
    goto LABEL_29;
  }
  v14 = *v12;
  if (v14 < 2)
  {
    v15 = 0;
    v16 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (!v32)
    {
      v16 = 0;
      v10 = 0;
      v15 = 1;
      goto LABEL_33;
    }
    v55 = v14;
    v62 = result;
    if (!v9)
    {
      v16 = 0;
      v32 = 0;
      v10 = 0;
      v15 = 1;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      v18 = (unsigned __int8 *)a1[3];
      if (v18)
      {
        v48 = v15;
        v54 = v16;
        v61 = result;
        if (v32)
        {
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v10, v32);
          LODWORD(v18) = 0;
          v10 = *a1;
          v9 = a1[1];
        }
        else
        {
          v9 = 0;
          v10 = 0;
          LODWORD(v18) = 0;
        }
        result = v61;
        v15 = v48;
        v16 = v54;
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v10);
    v16 = 0;
    v10 = *a1;
    v9 = a1[1];
    v15 = 1;
    v13 = a1[2];
    result = v62;
    v14 = v55;
LABEL_5:
    if (!v14)
      v16 = 0;
    v17 = v13 - v10;
    if (v9 <= v17)
    {
      v49 = v15;
      v56 = v16;
      v65 = result;
      v32 = 0;
      v36 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v36 && v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v10 = *a1;
        v32 = a1[1];
      }
      else
      {
        v10 = 0;
      }
      result = v65;
      v15 = v49;
      v16 = v56;
      goto LABEL_33;
    }
    v18 = (unsigned __int8 *)(v10 + v17);
    v19 = v10 + v17 + 1;
    a1[2] = v19;
    if (!v10)
    {
      v32 = v9;
      goto LABEL_33;
    }
    LODWORD(v18) = *v18;
    if (v18 < 2)
    {
      v20 = 0;
      v21 = 1;
      goto LABEL_11;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (!v33)
    {
      v21 = 0;
      v10 = 0;
      v20 = 1;
      goto LABEL_37;
    }
    v43 = (int)v18;
    v47 = v15;
    v53 = v16;
    v60 = result;
    if (!v9)
    {
      v21 = 0;
      v33 = 0;
      v10 = 0;
      v20 = 1;
      goto LABEL_37;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v10);
    v21 = 0;
    v10 = *a1;
    v9 = a1[1];
    v20 = 1;
    v19 = a1[2];
    result = v60;
    v15 = v47;
    v16 = v53;
    LODWORD(v18) = v43;
LABEL_11:
    if (!(_DWORD)v18)
      v21 = 0;
    v22 = v19 - v10;
    if (v9 <= v22)
      break;
    v23 = (unsigned __int8 *)(v10 + v22);
    a1[2] = (uint64_t)(v23 + 1);
    if (!v10)
    {
      v33 = v9;
      goto LABEL_37;
    }
    v24 = *v23;
    if (v24 > 1)
      goto LABEL_39;
    v25 = 0;
    v26 = v24 != 0;
LABEL_17:
    if (HIDWORD(v4) && HIDWORD(v5) && HIDWORD(v6) && HIDWORD(v7) && HIDWORD(result) && !v15 && !v20 && !v25)
    {
      *(_DWORD *)a2 = v4;
      *(_DWORD *)(a2 + 4) = v5;
      *(_DWORD *)(a2 + 8) = v6;
      *(_DWORD *)(a2 + 12) = v7;
      *(_DWORD *)(a2 + 16) = result;
      *(_BYTE *)(a2 + 20) = v16;
      *(_BYTE *)(a2 + 21) = v21;
      v27 = 1;
      *(_BYTE *)(a2 + 22) = v26;
      goto LABEL_26;
    }
    __break(1u);
LABEL_28:
    v28 = 0;
    v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      v64 = result;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v29 = *a1;
        v28 = a1[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      result = v64;
    }
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31)
    {
      v63 = result;
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
        v14 = 0;
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v14 = 0;
      }
      result = v63;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v14 = 0;
    }
  }
  v40 = v21;
  v44 = v20;
  v50 = v15;
  v57 = v16;
  v66 = result;
  v33 = 0;
  v37 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v37 && v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    v10 = *a1;
    v33 = a1[1];
  }
  else
  {
    v10 = 0;
  }
  result = v66;
  v15 = v50;
  v16 = v57;
  v21 = v40;
  v20 = v44;
LABEL_37:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34)
  {
    v39 = v21;
    v42 = v20;
    v46 = v15;
    v52 = v16;
    v59 = result;
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v10, v33);
      v10 = *a1;
      v9 = a1[1];
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    result = v59;
    v15 = v46;
    v16 = v52;
    v21 = v39;
    v20 = v42;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
LABEL_39:
  *a1 = 0;
  a1[1] = 0;
  v35 = a1[3];
  if (v35)
  {
    if (v9)
    {
      v58 = result;
      v45 = v15;
      v51 = v16;
      v38 = v21;
      v41 = v20;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v10);
      v21 = v38;
      v20 = v41;
      v15 = v45;
      v16 = v51;
      result = v58;
      if (*a1)
      {
        v26 = 0;
        v25 = 1;
        goto LABEL_17;
      }
    }
  }
  v27 = 0;
  *(_BYTE *)a2 = 0;
LABEL_26:
  *(_BYTE *)(a2 + 24) = v27;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebKitAXValueState>(uint64_t *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  int v11;

  v2 = IPC::Decoder::decode<unsigned int>(a1);
  v4 = (v2 & 0xFF00000000) == 0 || (v2 - 2) < 0xFFFFFFFC;
  if (v4)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8 && v7 != 0)
    {
      v11 = v2;
      v10 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
      v4 = v10;
      LODWORD(v2) = v11;
    }
  }
  if (v4)
    return 0;
  else
    return v2 | 0x100000000;
}

void IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::decode(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v9;
  int v10;
  int v11;
  void *v12;
  WebKit::LayerProperties *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  unsigned __int8 v55;
  char v56;
  char v57;
  char v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  unint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned int v90;
  char v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  char v102;
  char v103;
  unint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  char v109;
  char v110;
  unint64_t v111;
  unsigned __int8 *v112;
  unsigned int v113;
  int v114;
  char v115;
  char v116;
  unsigned __int8 *v117;
  unsigned int v118;
  void *v119;
  char v120;
  WTF *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  WTF *v137;
  unsigned int v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  unsigned int v230;
  WTF *v231;
  WTF *v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  int v244;
  char v245;
  int v246;
  char v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  unint64_t v252;
  char v253;
  uint64_t v254;
  int v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  unint64_t v270;
  char v271;
  unint64_t v272;
  char v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  char v279;
  uint64_t v281;
  char v282;
  char v283;
  char v284[8];
  char v285;
  char v286[8];
  char v287;
  char v288[8];
  char v289;
  WTF *v290;
  uint64_t v291;
  char v292;
  WTF *v293;
  uint64_t v294;
  char v295;
  WTF *v296;
  uint64_t v297;
  char v298;
  WTF *v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305[2];
  char v306;
  _BYTE v307[31];
  char v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  WTF *v313;
  uint64_t v314;
  WTF *v315;
  uint64_t v316;
  WTF *v317;
  uint64_t v318;
  WTF *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  int v335;
  int v336;
  char v337[208];
  char v338;
  char v339;
  char v340;
  uint64_t v341;
  char v342;
  WTF *v343;
  __int128 v344;
  char v345;
  char v346;
  uint64_t v347;

  v2 = a1;
  v347 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v307);
  v4 = (uint64_t)v307;
  v5 = v2[1];
  v6 = *v2;
  v7 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v5 < v7 || v5 - v7 <= 3)
  {
    v145 = 0;
    v146 = 0;
    *v2 = 0;
    v2[1] = 0;
    v147 = v2[3];
    if (v147)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v147 + 16))(v147, v6, v5);
        v146 = *v2;
        v145 = v2[1];
      }
      else
      {
        v145 = 0;
        v146 = 0;
      }
    }
    goto LABEL_241;
  }
  v9 = (int *)(v6 + v7);
  v2[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v302 = 0;
    if (!v10)
    {
      v39 = 0;
LABEL_53:
      v309 = 0uLL;
      v305[0] = 0;
      v305[1] = v39;
      v306 = 1;
      WebKit::ChangedLayers::~ChangedLayers((WebKit::ChangedLayers *)&v309, v3);
      goto LABEL_54;
    }
    v11 = 0;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v2, (uint64_t)&v344);
      if (!v345)
        goto LABEL_45;
      IPC::ArgumentCoder<WebKit::LayerProperties,void>::decode((WTF::StringImpl **)&v309, v2);
      if (!v339)
      {
        v12 = (void *)*v2;
        v28 = v2[1];
        *v2 = 0;
        v2[1] = 0;
        v29 = v2[3];
        if (!v29 || !v28)
        {
          *v2 = 0;
          v2[1] = 0;
          goto LABEL_45;
        }
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v29 + 16))(v29, v12);
        if (!v339)
        {
          v30 = v2[3];
          v12 = (void *)*v2;
          v31 = v2[1];
          *v2 = 0;
          v2[1] = 0;
          if (v30 && v31)
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v30 + 16))(v30, v12);
          goto LABEL_45;
        }
      }
      v13 = (WebKit::LayerProperties *)WTF::fastMalloc((WTF *)0x2D8);
      v14 = (WTF *)WebKit::LayerProperties::LayerProperties((uint64_t)v13, (uint64_t)&v309);
      if (v339)
        WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)&v309);
      if (!v345)
        goto LABEL_236;
      if (*((_QWORD *)&v344 + 1) == -1 || v344 == 0)
        goto LABEL_44;
      v16 = v302;
      if (v302
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&v302),
            (v16 = v302) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      LODWORD(v309) = -1640531527;
      WORD2(v309) = 0;
      BYTE6(v309) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v309, &v344);
      v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v309) & v17;
      v19 = (_QWORD *)(v16 + 24 * v18);
      v21 = *v19;
      v20 = v19[1];
      if (*(_OWORD *)v19 != 0)
      {
        v22 = 0;
        v23 = 1;
        while (__PAIR128__(v20, v21) != v344)
        {
          if (v20 == -1)
            v22 = v19;
          v18 = (v18 + v23) & v17;
          v19 = (_QWORD *)(v16 + 24 * v18);
          v21 = *v19;
          v20 = v19[1];
          ++v23;
          if (*(_OWORD *)v19 == 0)
          {
            if (v22)
            {
              *v22 = 0;
              v22[1] = 0;
              v22[2] = 0;
              --*(_DWORD *)(v16 - 16);
              v19 = v22;
            }
            goto LABEL_27;
          }
        }
LABEL_44:
        WebKit::LayerProperties::~LayerProperties(v13);
        WTF::fastFree(v32, v33);
LABEL_45:
        if (v302)
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v302, v12);
        goto LABEL_47;
      }
LABEL_27:
      *(_OWORD *)v19 = v344;
      std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100]((WebKit::LayerProperties **)v19 + 2, v13);
      v24 = v302;
      v25 = v302 ? *(_DWORD *)(v302 - 12) + 1 : 1;
      *(_DWORD *)(v302 - 12) = v25;
      v26 = (*(_DWORD *)(v24 - 16) + v25);
      v27 = *(unsigned int *)(v24 - 4);
      if (v27 > 0x400)
        break;
      if (3 * v27 <= 4 * v26)
        goto LABEL_32;
LABEL_33:
      if (++v11 == v10)
      {
        v39 = v302;
        v3 = (void *)*v2;
        if (*v2)
          goto LABEL_53;
        LOBYTE(v305[0]) = 0;
        v306 = 0;
        if (v302)
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v302, 0);
          v3 = (void *)*v2;
        }
        goto LABEL_49;
      }
    }
    if (v27 > 2 * v26)
      goto LABEL_33;
LABEL_32:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(&v302);
    goto LABEL_33;
  }
  v145 = v5;
  v146 = 0;
LABEL_241:
  *v2 = 0;
  v2[1] = 0;
  v148 = v2[3];
  if (v148 && v145)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v146);
LABEL_47:
  v3 = 0;
  v35 = *v2;
  v34 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v36 = v2[3];
  if (v36)
  {
    if (v34)
    {
      v14 = (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v35);
      v3 = (void *)*v2;
      if (*v2)
        goto LABEL_236;
    }
    else
    {
      v3 = 0;
    }
  }
  LOBYTE(v305[0]) = 0;
  v306 = 0;
LABEL_49:
  v37 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v38 = v2[3];
  if (v38 && v37)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v38 + 16))(v38, v3);
LABEL_54:
  v40 = v2[1];
  v41 = *v2;
  v42 = v2[2] - *v2;
  if (v40 <= v42)
  {
    v149 = 0;
    v150 = 0;
    *v2 = 0;
    v2[1] = 0;
    v151 = v2[3];
    if (v151)
    {
      if (v40)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 16))(v151);
        v150 = *v2;
        v149 = v2[1];
      }
      else
      {
        v149 = 0;
        v150 = 0;
      }
    }
    goto LABEL_245;
  }
  v43 = (unsigned __int8 *)(v41 + v42);
  v2[2] = (uint64_t)(v43 + 1);
  if (!v41)
  {
    v149 = v40;
    v150 = 0;
LABEL_245:
    v40 = 0;
    v41 = 0;
    *v2 = 0;
    v2[1] = 0;
    v152 = v2[3];
    if (v152)
    {
      if (v149)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v150, v149);
        v41 = *v2;
        v40 = v2[1];
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
    }
    goto LABEL_246;
  }
  v44 = *v43;
  if (v44 >= 2)
  {
LABEL_246:
    *v2 = 0;
    v2[1] = 0;
    v153 = v2[3];
    if (v153 && v40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v41);
    goto LABEL_247;
  }
  if (!v44)
  {
    v46 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v2);
    if (v47)
    {
      v45 = v46;
      goto LABEL_61;
    }
LABEL_247:
    v154 = *v2;
    v155 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    v156 = v2[3];
    if (v156 && v155)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v154);
    v45 = 0;
    v279 = 0;
    goto LABEL_62;
  }
  v45 = 0;
LABEL_61:
  v279 = 1;
LABEL_62:
  v48 = IPC::Decoder::decode<unsigned long long>(v2);
  v278 = v45;
  if ((_BYTE)v49)
  {
    v50 = v48;
    v344 = 0uLL;
    if (v48 < 0x3333)
    {
      if (v48)
      {
        v138 = 80 * v48;
        v139 = WTF::fastMalloc((WTF *)(80 * v48));
        DWORD2(v344) = v138 / 0x50;
        *(_QWORD *)&v344 = v139;
        do
        {
          IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v309, v2);
          if (!(_BYTE)v316)
            goto LABEL_341;
          if (HIDWORD(v344) == DWORD2(v344))
          {
            WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v344, (unint64_t)&v309);
          }
          else
          {
            v141 = v344 + 80 * HIDWORD(v344);
            v142 = v309;
            v143 = v310;
            v144 = v311;
            *(_BYTE *)(v141 + 48) = v312;
            *(_OWORD *)(v141 + 16) = v143;
            *(_OWORD *)(v141 + 32) = v144;
            *(_OWORD *)v141 = v142;
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(v141 + 56, (uint64_t)&v313);
            ++HIDWORD(v344);
          }
          if ((_BYTE)v316 && (_DWORD)v315 != -1)
            ((void (*)(WTF **, WTF **))off_1E34AE220[v315])(&v299, &v313);
          --v50;
        }
        while (v50);
        v52 = *((_QWORD *)&v344 + 1);
        v51 = v344;
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
      v344 = 0uLL;
      v302 = v51;
      v303 = v52;
LABEL_67:
      v304 = 1;
      WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v344, v49);
      goto LABEL_70;
    }
    while (1)
    {
      IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v309, v2);
      if (!(_BYTE)v316)
        break;
      if (HIDWORD(v344) == DWORD2(v344))
      {
        WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v344, (unint64_t)&v309);
      }
      else
      {
        v226 = v344 + 80 * HIDWORD(v344);
        v227 = v309;
        v228 = v310;
        v229 = v311;
        *(_BYTE *)(v226 + 48) = v312;
        *(_OWORD *)(v226 + 16) = v228;
        *(_OWORD *)(v226 + 32) = v229;
        *(_OWORD *)v226 = v227;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(v226 + 56, (uint64_t)&v313);
        ++HIDWORD(v344);
      }
      if ((_BYTE)v316 && (_DWORD)v315 != -1)
        ((void (*)(WTF **, WTF **))off_1E34AE220[v315])(&v299, &v313);
      if (!--v50)
      {
        v230 = HIDWORD(v344);
        v231 = (WTF *)v344;
        if (DWORD2(v344) > HIDWORD(v344))
        {
          v232 = (WTF *)v344;
          if (HIDWORD(v344))
          {
            if (HIDWORD(v344) >= 0x3333334)
            {
              __break(0xC471u);
              JUMPOUT(0x196C1EEB8);
            }
            v233 = 80 * HIDWORD(v344);
            v234 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v344)));
            DWORD2(v344) = v233 / 0x50;
            *(_QWORD *)&v344 = v234;
            v232 = v231;
            if ((WTF *)v234 != v231)
            {
              WTF::VectorMover<false,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>::move((uint64_t)v231, (uint64_t)v231 + 80 * v230, v234);
              v232 = (WTF *)v344;
            }
          }
          if (v231)
          {
            if (v232 == v231)
            {
              *(_QWORD *)&v344 = 0;
              DWORD2(v344) = 0;
            }
            WTF::fastFree(v231, v49);
            v231 = (WTF *)v344;
          }
          else
          {
            v231 = v232;
          }
        }
        v302 = (uint64_t)v231;
        v235 = *((_QWORD *)&v344 + 1);
        v344 = 0uLL;
        v303 = v235;
        goto LABEL_67;
      }
    }
LABEL_341:
    LOBYTE(v302) = 0;
    v304 = 0;
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v344, v140);
  }
  else
  {
    LOBYTE(v302) = 0;
    v304 = 0;
  }
  v3 = (void *)*v2;
  v15 = v2[1];
  *v2 = 0;
  v2[1] = 0;
  v14 = (WTF *)v2[3];
  if (v14)
    goto LABEL_237;
  while (1)
  {
LABEL_70:
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v299, v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v296, v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v293, v2);
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v53, (uint64_t)&v290);
    v276 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v2);
    v277 = v54;
    v274 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    v275 = v55;
    if (!v55)
    {
      v157 = *v2;
      v158 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v159 = v2[3];
      if (v159)
      {
        if (v158)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v159 + 16))(v159, v157);
      }
    }
    v272 = IPC::Decoder::decode<WebCore::LayoutPoint>(v2);
    v273 = v56;
    v270 = IPC::Decoder::decode<WebCore::LayoutPoint>(v2);
    v271 = v57;
    v268 = IPC::Decoder::decode<WebCore::LayoutPoint>(v2);
    v269 = v58;
    v266 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    v267 = v59;
    if (!v59)
    {
      v160 = *v2;
      v161 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v162 = v2[3];
      if (v162)
      {
        if (v161)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v160);
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v288);
    if (!v289)
    {
      v163 = *v2;
      v164 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v165 = v2[3];
      if (v165)
      {
        if (v164)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, v163);
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v286);
    if (!v287)
    {
      v166 = *v2;
      v167 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v168 = v2[3];
      if (v168)
      {
        if (v167)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v168 + 16))(v168, v166);
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, v284);
    v60 = v2[1];
    if (v285)
    {
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v169 = *v2;
      *v2 = 0;
      v2[1] = 0;
      v170 = v2[3];
      if (v170)
      {
        if (v60)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v169, v60);
          v61 = v2[1];
        }
        else
        {
          v61 = 0;
        }
      }
    }
    v62 = *v2;
    v63 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v61 < v63 || v61 - v63 <= 7)
    {
      v171 = 0;
      v172 = 0;
      *v2 = 0;
      v2[1] = 0;
      v173 = v2[3];
      if (v173)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
          v172 = *v2;
          v171 = v2[1];
        }
        else
        {
          v171 = 0;
          v172 = 0;
        }
      }
    }
    else
    {
      v64 = (uint64_t *)(v62 + v63);
      v2[2] = (uint64_t)(v64 + 1);
      if (v62)
      {
        v265 = 0;
        v264 = *v64;
        goto LABEL_80;
      }
      v171 = v61;
      v172 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v174 = v2[3];
    if (v174 && v171)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v174 + 16))(v174, v172, v171);
      v264 = 0;
      v62 = *v2;
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v264 = 0;
    }
    v265 = 1;
LABEL_80:
    v65 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v62;
    if (v61 < v65 || v61 - v65 <= 7)
    {
      v175 = 0;
      v176 = 0;
      *v2 = 0;
      v2[1] = 0;
      v177 = v2[3];
      if (v177)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v177 + 16))(v177);
          v176 = *v2;
          v175 = v2[1];
        }
        else
        {
          v175 = 0;
          v176 = 0;
        }
      }
    }
    else
    {
      v66 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v66 + 1);
      if (v62)
      {
        v263 = 0;
        v262 = *v66;
        goto LABEL_84;
      }
      v175 = v61;
      v176 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v178 = v2[3];
    if (v178 && v175)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v178 + 16))(v178, v176, v175);
      v262 = 0;
      v62 = *v2;
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v262 = 0;
    }
    v263 = 1;
LABEL_84:
    v67 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v62;
    if (v61 < v67 || v61 - v67 <= 7)
    {
      v179 = 0;
      v180 = 0;
      *v2 = 0;
      v2[1] = 0;
      v181 = v2[3];
      if (v181)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v181 + 16))(v181);
          v180 = *v2;
          v179 = v2[1];
        }
        else
        {
          v179 = 0;
          v180 = 0;
        }
      }
    }
    else
    {
      v68 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v68 + 1);
      if (v62)
      {
        v261 = 0;
        v260 = *v68;
        goto LABEL_88;
      }
      v179 = v61;
      v180 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v182 = v2[3];
    if (v182 && v179)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 16))(v182, v180, v179);
      v260 = 0;
      v62 = *v2;
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v260 = 0;
    }
    v261 = 1;
LABEL_88:
    v69 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v62;
    if (v61 < v69 || v61 - v69 <= 7)
    {
      v183 = 0;
      v184 = 0;
      *v2 = 0;
      v2[1] = 0;
      v185 = v2[3];
      if (v185)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v185 + 16))(v185);
          v184 = *v2;
          v183 = v2[1];
        }
        else
        {
          v183 = 0;
          v184 = 0;
        }
      }
    }
    else
    {
      v70 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v70 + 1);
      if (v62)
      {
        v259 = 0;
        v258 = *v70;
        goto LABEL_92;
      }
      v183 = v61;
      v184 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v186 = v2[3];
    if (v186 && v183)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v186 + 16))(v186, v184, v183);
      v258 = 0;
      v62 = *v2;
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v258 = 0;
    }
    v259 = 1;
LABEL_92:
    v71 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v62;
    if (v61 < v71 || v61 - v71 <= 7)
    {
      v187 = 0;
      v188 = 0;
      *v2 = 0;
      v2[1] = 0;
      v189 = v2[3];
      if (v189)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v189 + 16))(v189);
          v188 = *v2;
          v187 = v2[1];
        }
        else
        {
          v187 = 0;
          v188 = 0;
        }
      }
    }
    else
    {
      v72 = (unint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v72 + 1);
      if (v62)
      {
        v257 = 0;
        v256 = *v72;
        goto LABEL_96;
      }
      v187 = v61;
      v188 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v190 = v2[3];
    if (v190 && v187)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v188, v187);
      v256 = 0;
      v62 = *v2;
      v61 = v2[1];
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v256 = 0;
    }
    v257 = 1;
LABEL_96:
    v73 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v62;
    if (v61 < v73 || v61 - v73 <= 7)
    {
      v191 = 0;
      v192 = 0;
      *v2 = 0;
      v2[1] = 0;
      v193 = v2[3];
      if (v193)
      {
        if (v61)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v193 + 16))(v193);
          v192 = *v2;
          v191 = v2[1];
        }
        else
        {
          v191 = 0;
          v192 = 0;
        }
      }
    }
    else
    {
      v74 = (uint64_t *)((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (uint64_t)(v74 + 1);
      if (v62)
      {
        v255 = 0;
        v254 = *v74;
        goto LABEL_100;
      }
      v191 = v61;
      v192 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v194 = v2[3];
    if (v194 && v191)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v194 + 16))(v194, v192, v191);
    v254 = 0;
    v255 = 1;
LABEL_100:
    v252 = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>(v2);
    v253 = v75;
    v76 = *v2;
    v77 = v2[1];
    v78 = ((v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v2;
    if (v77 < v78 || v77 - v78 <= 7)
    {
      v219 = 0;
      v220 = 0;
      *v2 = 0;
      v2[1] = 0;
      v221 = v2[3];
      if (v221)
      {
        if (v77)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
          v220 = *v2;
          v219 = v2[1];
        }
        else
        {
          v219 = 0;
          v220 = 0;
        }
      }
    }
    else
    {
      v79 = (uint64_t *)(v76 + v78);
      v2[2] = (uint64_t)(v79 + 1);
      if (v76)
      {
        v251 = 0;
        v250 = *v79;
        goto LABEL_104;
      }
      v219 = v77;
      v220 = 0;
    }
    *v2 = 0;
    v2[1] = 0;
    v222 = v2[3];
    if (v222 && v219)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v220);
    v250 = 0;
    v251 = 1;
LABEL_104:
    v249 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>(v2);
    v80 = v2[1];
    v81 = *v2;
    v82 = v2[2] - *v2;
    if (v80 <= v82)
    {
      v195 = 0;
      v196 = 0;
      *v2 = 0;
      v2[1] = 0;
      v197 = v2[3];
      if (v197)
      {
        if (v80)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v197 + 16))(v197);
          v196 = *v2;
          v195 = v2[1];
        }
        else
        {
          v195 = 0;
          v196 = 0;
        }
      }
      goto LABEL_288;
    }
    v83 = (unsigned __int8 *)(v81 + v82);
    v84 = v81 + v82 + 1;
    v2[2] = v84;
    if (!v81)
    {
      v195 = v80;
      v196 = 0;
LABEL_288:
      *v2 = 0;
      v2[1] = 0;
      v198 = v2[3];
      if (v198 && v195)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v198 + 16))(v198, v196, v195);
        v85 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v85 = 0;
      }
      goto LABEL_290;
    }
    v85 = *v83;
    if (v85 < 2)
    {
      v248 = 0;
      v86 = 1;
      goto LABEL_108;
    }
LABEL_290:
    *v2 = 0;
    v2[1] = 0;
    v199 = v2[3];
    if (!v199 || !v80)
    {
      v200 = 0;
      v81 = 0;
      v247 = 0;
      v248 = 1;
LABEL_292:
      *v2 = 0;
      v2[1] = 0;
      v201 = v2[3];
      if (v201 && v200)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v201 + 16))(v201, v81, v200);
        v90 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v90 = 0;
      }
      goto LABEL_294;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v199 + 16))(v199, v81);
    v86 = 0;
    v81 = *v2;
    v80 = v2[1];
    v248 = 1;
    v84 = v2[2];
LABEL_108:
    if (!v85)
      v86 = 0;
    v247 = v86;
    v87 = v84 - v81;
    if (v80 <= v87)
    {
      v200 = 0;
      v242 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v242 && v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v242 + 16))(v242);
        v81 = *v2;
        v200 = v2[1];
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_292;
    }
    v88 = (unsigned __int8 *)(v81 + v87);
    v89 = v81 + v87 + 1;
    v2[2] = v89;
    if (!v81)
    {
      v200 = v80;
      goto LABEL_292;
    }
    v90 = *v88;
    if (v90 < 2)
    {
      v246 = 0;
      v91 = 1;
      goto LABEL_114;
    }
LABEL_294:
    *v2 = 0;
    v2[1] = 0;
    v202 = v2[3];
    if (!v202 || !v80)
    {
      v203 = 0;
      v81 = 0;
      v245 = 0;
      v246 = 1;
LABEL_296:
      *v2 = 0;
      v2[1] = 0;
      v204 = v2[3];
      if (v204 && v203)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v81, v203);
        v95 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v95 = 0;
      }
      goto LABEL_298;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v202 + 16))(v202, v81);
    v91 = 0;
    v81 = *v2;
    v80 = v2[1];
    v246 = 1;
    v89 = v2[2];
LABEL_114:
    if (!v90)
      v91 = 0;
    v245 = v91;
    v92 = v89 - v81;
    if (v80 <= v92)
    {
      v203 = 0;
      v241 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v241 && v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v241 + 16))(v241);
        v81 = *v2;
        v203 = v2[1];
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_296;
    }
    v93 = (unsigned __int8 *)(v81 + v92);
    v94 = v81 + v92 + 1;
    v2[2] = v94;
    if (!v81)
    {
      v203 = v80;
      goto LABEL_296;
    }
    v95 = *v93;
    if (v95 < 2)
    {
      v244 = 0;
      v96 = 1;
      goto LABEL_120;
    }
LABEL_298:
    *v2 = 0;
    v2[1] = 0;
    v205 = v2[3];
    if (!v205 || !v80)
    {
      v206 = 0;
      v81 = 0;
      v243 = 0;
      v244 = 1;
LABEL_300:
      *v2 = 0;
      v2[1] = 0;
      v207 = v2[3];
      if (v207 && v206)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, v81, v206);
        v100 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v100 = 0;
      }
      goto LABEL_302;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v205 + 16))(v205, v81);
    v96 = 0;
    v81 = *v2;
    v80 = v2[1];
    v244 = 1;
    v94 = v2[2];
LABEL_120:
    if (!v95)
      v96 = 0;
    v243 = v96;
    v97 = v94 - v81;
    if (v80 <= v97)
    {
      v206 = 0;
      v240 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v240 && v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v240 + 16))(v240);
        v81 = *v2;
        v206 = v2[1];
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_300;
    }
    v98 = (unsigned __int8 *)(v81 + v97);
    v99 = v81 + v97 + 1;
    v2[2] = v99;
    if (!v81)
    {
      v206 = v80;
      goto LABEL_300;
    }
    v100 = *v98;
    if (v100 < 2)
    {
      v101 = 0;
      v102 = 1;
      goto LABEL_126;
    }
LABEL_302:
    *v2 = 0;
    v2[1] = 0;
    v208 = v2[3];
    if (!v208 || !v80)
    {
      v103 = 0;
      v209 = 0;
      v81 = 0;
      v101 = 1;
LABEL_304:
      *v2 = 0;
      v2[1] = 0;
      v210 = v2[3];
      if (v210 && v209)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210 + 16))(v210, v81, v209);
        v107 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v107 = 0;
      }
      goto LABEL_306;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 16))(v208, v81);
    v102 = 0;
    v81 = *v2;
    v80 = v2[1];
    v101 = 1;
    v99 = v2[2];
LABEL_126:
    if (v100)
      v103 = v102;
    else
      v103 = 0;
    v104 = v99 - v81;
    if (v80 <= v104)
    {
      v209 = 0;
      v239 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v239 && v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v239 + 16))(v239);
        v81 = *v2;
        v209 = v2[1];
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_304;
    }
    v105 = (unsigned __int8 *)(v81 + v104);
    v106 = v81 + v104 + 1;
    v2[2] = v106;
    if (!v81)
    {
      v209 = v80;
      goto LABEL_304;
    }
    v107 = *v105;
    if (v107 < 2)
    {
      v108 = 0;
      v109 = 1;
      goto LABEL_133;
    }
LABEL_306:
    *v2 = 0;
    v2[1] = 0;
    v211 = v2[3];
    if (!v211 || !v80)
    {
      v110 = 0;
      v212 = 0;
      v81 = 0;
      v108 = 1;
LABEL_308:
      *v2 = 0;
      v2[1] = 0;
      v213 = v2[3];
      if (v213 && v212)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213 + 16))(v213, v81, v212);
        v113 = 0;
        v81 = *v2;
        v80 = v2[1];
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v113 = 0;
      }
      goto LABEL_310;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v211 + 16))(v211, v81);
    v109 = 0;
    v81 = *v2;
    v80 = v2[1];
    v108 = 1;
    v106 = v2[2];
LABEL_133:
    if (v107)
      v110 = v109;
    else
      v110 = 0;
    v111 = v106 - v81;
    if (v80 <= v111)
    {
      v212 = 0;
      v238 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v238 && v80)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v238 + 16))(v238);
        v81 = *v2;
        v212 = v2[1];
      }
      else
      {
        v81 = 0;
      }
      goto LABEL_308;
    }
    v112 = (unsigned __int8 *)(v81 + v111);
    v2[2] = (uint64_t)(v112 + 1);
    if (!v81)
    {
      v212 = v80;
      goto LABEL_308;
    }
    v113 = *v112;
    if (v113 < 2)
    {
      v114 = 0;
      v115 = 1;
      goto LABEL_140;
    }
LABEL_310:
    *v2 = 0;
    v2[1] = 0;
    v214 = v2[3];
    if (!v214 || !v80)
    {
      v81 = 0;
      v116 = 0;
      v80 = 0;
      v114 = 1;
LABEL_312:
      *v2 = 0;
      v2[1] = 0;
      v215 = v2[3];
      if (v215)
      {
        if (v80)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v215 + 16))(v215, v81);
          v216 = *v2;
          v80 = v2[1];
        }
        else
        {
          v216 = 0;
        }
      }
      else
      {
        v216 = 0;
        v80 = 0;
      }
LABEL_314:
      *v2 = 0;
      v2[1] = 0;
      v217 = v2[3];
      if (v217)
      {
        if (v80)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v217 + 16))(v217, v216);
          v81 = *v2;
          v80 = v2[1];
        }
        else
        {
          v81 = 0;
        }
      }
      else
      {
        v81 = 0;
        v80 = 0;
      }
      goto LABEL_316;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v81);
    v115 = 0;
    v81 = *v2;
    v80 = v2[1];
    v114 = 1;
LABEL_140:
    if (v113)
      v116 = v115;
    else
      v116 = 0;
    if (v80 <= v2[2] - v81)
      goto LABEL_312;
    v117 = (unsigned __int8 *)v2[2];
    v2[2] = (uint64_t)(v117 + 1);
    if (!v81)
    {
      v216 = 0;
      goto LABEL_314;
    }
    v118 = *v117;
    if (v118 < 2)
    {
      if (v118)
      {
        IPC::Decoder::decode<WebKit::EditorState>(v2, (uint64_t)&v309);
        v120 = v338;
        if (!v338)
        {
          LOBYTE(v344) = 0;
          goto LABEL_152;
        }
        std::__optional_destruct_base<WebKit::EditorState,false>::__optional_destruct_base[abi:sn180100]<WebKit::EditorState>((uint64_t)&v344, &v309);
      }
      else
      {
        LOBYTE(v309) = 0;
        v338 = 0;
        std::__optional_move_base<WebKit::EditorState,false>::__optional_move_base[abi:sn180100](&v344, (uint64_t)&v309);
      }
      v120 = 1;
LABEL_152:
      v346 = v120;
      std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v309, v119);
      goto LABEL_153;
    }
LABEL_316:
    *v2 = 0;
    v2[1] = 0;
    v218 = v2[3];
    if (v218 && v80)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v81);
    LOBYTE(v344) = 0;
    v346 = 0;
LABEL_153:
    if (!v346)
    {
      v223 = *v2;
      v224 = v2[1];
      *v2 = 0;
      v2[1] = 0;
      v225 = v2[3];
      if (v225)
      {
        if (v224)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v225 + 16))(v225, v223);
      }
    }
    IPC::Decoder::decode<std::optional<unsigned long long>>(v2, (uint64_t)&v281);
    v14 = (WTF *)IPC::Decoder::decode<WTF::MonotonicTime>(v2);
    if (!*v2)
      break;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v4 + 224) = _Q0;
    *(_OWORD *)(v4 + 240) = _Q0;
    v331 = 0xBFF0000000000000;
    v332 = 0;
    v334 = 0;
    v333 = 0;
    v335 = 0;
    v336 = 1;
    v337[0] = 0;
    v340 = 0;
    LOBYTE(v341) = 0;
    v342 = 0;
    v343 = 0;
    if (v307[16])
    {
      *(_OWORD *)(v4 + 32) = *(_OWORD *)v4;
      if (v306)
      {
        v126 = v14;
        v127 = (char)v3;
        v14 = (WTF *)WebKit::ChangedLayers::operator=((uint64_t)&v310, v305);
        if (v279)
        {
          *(_QWORD *)&v311 = v278;
          if (v304)
          {
            v14 = (WTF *)*((_QWORD *)&v311 + 1);
            if (HIDWORD(v312))
            {
              v4 = 80 * HIDWORD(v312);
              v236 = *((_QWORD *)&v311 + 1) + 56;
              do
              {
                v237 = *(unsigned int *)(v236 + 16);
                if ((_DWORD)v237 != -1)
                  ((void (*)(char *, uint64_t))off_1E34AE220[v237])(&v308, v236);
                *(_DWORD *)(v236 + 16) = -1;
                v236 += 80;
                v4 -= 80;
              }
              while (v4);
              v14 = (WTF *)*((_QWORD *)&v311 + 1);
            }
            v2 = a2;
            if (v14)
            {
              *((_QWORD *)&v311 + 1) = 0;
              LODWORD(v312) = 0;
              v14 = (WTF *)WTF::fastFree(v14, v3);
            }
            *((_QWORD *)&v311 + 1) = v302;
            v128 = v303;
            v302 = 0;
            v303 = 0;
            v312 = v128;
            if (v301)
            {
              v14 = v313;
              if (v313)
              {
                v313 = 0;
                LODWORD(v314) = 0;
                v14 = (WTF *)WTF::fastFree(v14, v3);
              }
              v313 = v299;
              v129 = v300;
              v299 = 0;
              v300 = 0;
              v314 = v129;
              if (v298)
              {
                v14 = v315;
                if (v315)
                {
                  v315 = 0;
                  LODWORD(v316) = 0;
                  v14 = (WTF *)WTF::fastFree(v14, v3);
                }
                v315 = v296;
                v130 = v297;
                v296 = 0;
                v297 = 0;
                v316 = v130;
                if (v295)
                {
                  v14 = v317;
                  if (v317)
                  {
                    v317 = 0;
                    LODWORD(v318) = 0;
                    v14 = (WTF *)WTF::fastFree(v14, v3);
                  }
                  v317 = v293;
                  v131 = v294;
                  v293 = 0;
                  v294 = 0;
                  v318 = v131;
                  if (v292)
                  {
                    v14 = v319;
                    if (v319)
                    {
                      v319 = 0;
                      LODWORD(v320) = 0;
                      v14 = (WTF *)WTF::fastFree(v14, v3);
                    }
                    v319 = v290;
                    v132 = v291;
                    v290 = 0;
                    v291 = 0;
                    v320 = v132;
                    if (v277)
                    {
                      v321 = v276;
                      if (v275)
                      {
                        v322 = v274;
                        if (v273)
                        {
                          v323 = v272;
                          if (v271)
                          {
                            v324 = v270;
                            if (v269)
                            {
                              v325 = v268;
                              if (v267)
                              {
                                v326 = v266;
                                if (v289)
                                {
                                  v14 = (WTF *)WebCore::Color::operator=();
                                  if (v287)
                                  {
                                    v14 = (WTF *)WebCore::Color::operator=();
                                    if (v285)
                                    {
                                      v14 = (WTF *)WebCore::Color::operator=();
                                      if (!v265)
                                      {
                                        v327 = v264;
                                        if (!v263)
                                        {
                                          v328 = v262;
                                          if (!v261)
                                          {
                                            v329 = v260;
                                            if (!v259)
                                            {
                                              v330 = v258;
                                              if (!v257)
                                              {
                                                v331 = v256;
                                                if (!v255)
                                                {
                                                  v332 = v254;
                                                  if (v253)
                                                  {
                                                    v333 = v252;
                                                    if (!v251)
                                                    {
                                                      v334 = v250;
                                                      if ((v249 & 0xFF0000) != 0)
                                                      {
                                                        LOWORD(v335) = v249;
                                                        if (!v248)
                                                        {
                                                          BYTE2(v335) = v247;
                                                          if (!v246)
                                                          {
                                                            HIBYTE(v335) = v245;
                                                            if (!v244)
                                                            {
                                                              LOBYTE(v336) = v243;
                                                              if (!v101)
                                                              {
                                                                BYTE1(v336) = v103;
                                                                if (!v108)
                                                                {
                                                                  BYTE2(v336) = v110;
                                                                  if (!v114)
                                                                  {
                                                                    HIBYTE(v336) = v116;
                                                                    if (v346)
                                                                    {
                                                                      std::__optional_storage_base<WebKit::EditorState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState,false>>((uint64_t)v337, (unsigned __int8 *)&v344);
                                                                      if (v283)
                                                                      {
                                                                        v341 = v281;
                                                                        v342 = v282;
                                                                        if (v127)
                                                                        {
                                                                          v343 = v126;
                                                                          WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)a2, (uint64_t)&v309);
                                                                          *((_BYTE *)a2 + 800) = 1;
                                                                          WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)&v309, v133);
                                                                          goto LABEL_202;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_236:
    __break(1u);
LABEL_237:
    if (v15)
      (*(void (**)(WTF *, void *))(*(_QWORD *)v14 + 16))(v14, v3);
  }
  *(_BYTE *)a2 = 0;
  *((_BYTE *)a2 + 800) = 0;
LABEL_202:
  if (v346)
    std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v344, v3);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v284, v3);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v286, v134);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v288, v135);
  if (v292)
  {
    v137 = v290;
    if (v290)
    {
      v290 = 0;
      LODWORD(v291) = 0;
      WTF::fastFree(v137, v136);
    }
  }
  if (v295 && v293)
    WTF::fastFree(v293, v136);
  if (v298 && v296)
    WTF::fastFree(v296, v136);
  if (v301 && v299)
    WTF::fastFree(v299, v136);
  if (v304)
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v302, v136);
  if (v306)
    WebKit::ChangedLayers::~ChangedLayers((WebKit::ChangedLayers *)v305, v136);
}

void sub_196C1EEE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF *a53,uint64_t a54,uint64_t a55,WTF *a56,uint64_t a57,uint64_t a58,WTF *a59,uint64_t a60,uint64_t a61,WTF *a62,uint64_t a63)
{
  uint64_t a65;

  if (a65)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(a65, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(WebKit::RemoteLayerTreeTransaction *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100]((_BYTE *)this + 272, a2);
  v4 = *((_QWORD *)this + 23);
  if ((v4 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v3);
    }
  }
  v5 = *((_QWORD *)this + 22);
  if ((v5 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v3);
    }
  }
  v6 = *((_QWORD *)this + 21);
  if ((v6 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v3);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 13);
  if (v7)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v7, v3);
  }
  v8 = (WTF *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v8, v3);
  }
  v9 = (WTF *)*((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v9, v3);
  }
  v10 = (WTF *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v10, v3);
  }
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v3);
  WebKit::ChangedLayers::~ChangedLayers((WebKit::RemoteLayerTreeTransaction *)((char *)this + 16), v11);
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v6 = 80 * v3;
    v7 = (char *)v4 + 56;
    do
    {
      v8 = *((unsigned int *)v7 + 4);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, char *))off_1E34AE220[v8])(&v9, v7);
      *((_DWORD *)v7 + 4) = -1;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::ChangedLayers::~ChangedLayers(WebKit::ChangedLayers *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(*(uint64_t **)this, a2);
}

uint64_t IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t result;
  char v6;
  BOOL v7;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  _BOOL4 v29;
  int *v30;
  int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE v81[7];
  __int128 v82;
  char v83;
  WTF::StringImpl *v84;
  __int128 v85;
  __int128 v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  uint64_t v91;
  char v92;
  _BYTE v93[48];
  char v94;
  _BYTE v95[7];
  _BYTE v96[16];
  int v97;
  unint64_t v98;
  int v99;
  int v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v82);
  *(_WORD *)v93 = 0;
  result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, v93);
  v6 = v93[0];
  if (v93[1])
    v7 = v93[0] > 0xFu;
  else
    v7 = 1;
  v8 = v7;
  if (v8 == 1)
  {
    v44 = *a2;
    v45 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v45)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v44);
    v6 = 0;
  }
  v9 = a2[1];
  v10 = (WTF::StringImpl *)*a2;
  v11 = a2[2] - *a2;
  if (v9 <= v11)
  {
    v46 = 0;
    v47 = 0;
    *a2 = 0;
    a2[1] = 0;
    v48 = a2[3];
    if (v48)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
        v47 = *a2;
        v46 = a2[1];
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
    }
    goto LABEL_93;
  }
  v12 = (unsigned __int8 *)v10 + v11;
  a2[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v46 = v9;
    v47 = 0;
LABEL_93:
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v49 = a2[3];
    if (v49)
    {
      if (v46)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47, v46);
        v10 = (WTF::StringImpl *)*a2;
        v9 = a2[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_94;
  }
  v13 = *v12;
  if (v13 >= 2)
  {
LABEL_94:
    *a2 = 0;
    a2[1] = 0;
    v50 = a2[3];
    if (v50 && v9)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v50 + 16))(v50, v10);
    goto LABEL_107;
  }
  if (!v13)
  {
    LOBYTE(v14) = 0;
    v16 = 0;
    v18 = 0;
    v2 = 0;
    goto LABEL_18;
  }
  v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v16 = v15;
  v80 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  v18 = v17;
  result = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  v79 = result;
  v21 = v20;
  v10 = (WTF::StringImpl *)*a2;
  if (!*a2)
  {
    v57 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (v58 && v57)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 16))(v58, 0);
LABEL_107:
    v59 = *a2;
    v60 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result && v60)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v59);
      LOBYTE(v14) = 0;
      v16 = 0;
      v10 = (WTF::StringImpl *)*a2;
    }
    else
    {
      v10 = 0;
      LOBYTE(v14) = 0;
      v16 = 0;
    }
    v18 = 1;
    goto LABEL_18;
  }
  if (!(_BYTE)v16 || !(_BYTE)v18 || !v21)
    goto LABEL_87;
  v18 = 0;
  v16 = v14 & 0xFFFFFFFFFFFFFF00;
  v2 = 1;
LABEL_18:
  v19 = a2[1];
  if (v19 <= a2[2] - (uint64_t)v10)
  {
    v51 = 0;
    v52 = 0;
    *a2 = 0;
    a2[1] = 0;
    v53 = a2[3];
    if (v53)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        v52 = *a2;
        v51 = a2[1];
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
    }
    goto LABEL_98;
  }
  v22 = (unsigned __int8 *)a2[2];
  v23 = v22 + 1;
  a2[2] = (uint64_t)(v22 + 1);
  if (!v10)
  {
    v51 = v19;
    v52 = 0;
LABEL_98:
    *a2 = 0;
    a2[1] = 0;
    v54 = a2[3];
    if (v54 && v51)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
    goto LABEL_21;
  }
  v24 = *v22;
  if (v24 > 3)
    goto LABEL_21;
  if (!v24)
  {
    v37 = 0;
    goto LABEL_74;
  }
  if (v24 != 1)
  {
    if (v24 == 2)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, (uint64_t)&v91);
      IPC::Decoder::decode<WTF::String>(a2, &v89);
      result = (uint64_t)IPC::Decoder::decode<WTF::URL>(a2, v93);
      v38 = *a2;
      if (*a2)
      {
        if (!v92)
          goto LABEL_87;
        if (!v90)
          goto LABEL_87;
        v39 = v89;
        v89 = 0;
        v87 = v39;
        if (!v93[40])
          goto LABEL_87;
        v40 = *(WTF::StringImpl **)v93;
        *(_QWORD *)v93 = 0;
        v84 = v40;
        v85 = *(_OWORD *)&v93[8];
        v86 = *(_OWORD *)&v93[24];
        *(_DWORD *)&v93[8] &= ~1u;
        WebCore::Model::create();
        v78 = v88;
        v88 = 0;
        v41 = v84;
        v84 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v10);
          else
            *(_DWORD *)v41 -= 2;
        }
        result = (uint64_t)v87;
        v87 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v78 = 0;
      }
      if (v93[40])
      {
        result = *(_QWORD *)v93;
        *(_QWORD *)v93 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v90)
      {
        result = (uint64_t)v89;
        v89 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (v92)
      {
        result = v91;
        v91 = 0;
        if (result)
          result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v10);
      }
      if (!v38)
      {
        v69 = *a2;
        v70 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v71 = a2[3];
        if (v71 && v70)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, v69);
        goto LABEL_21;
      }
      v98 = v78;
      v37 = 2;
    }
    else
    {
      result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
      if (!(_BYTE)v10)
        goto LABEL_21;
      v98 = result;
      v37 = 3;
    }
LABEL_74:
    v26 = 0;
    v100 = v37;
    v25 = 1;
    v101 = 1;
    goto LABEL_75;
  }
  v27 = ((unint64_t)(v23 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v10;
  v29 = v19 < v27 || v19 - v27 < 4;
  v77 = v29;
  if (!v29)
  {
    v30 = (int *)((char *)v10 + v27);
    v31 = *v30;
    a2[2] = (uint64_t)(v30 + 1);
    LODWORD(v76) = v31;
    HIDWORD(v76) = v31 & 0xFFFFFF00;
    goto LABEL_33;
  }
  *a2 = 0;
  a2[1] = 0;
  v61 = a2[3];
  if (!v61)
    goto LABEL_111;
  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
  HIDWORD(v76) = 0;
  v72 = *a2;
  v73 = a2[1];
  v74 = a2[3];
  *a2 = 0;
  a2[1] = 0;
  if (v74)
  {
    LODWORD(v76) = 0;
    if (v73)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72);
LABEL_111:
      v76 = 0;
    }
  }
  else
  {
    LODWORD(v76) = 0;
  }
LABEL_33:
  result = IPC::Decoder::decode<float>(a2);
  v19 = a2[1];
  v10 = (WTF::StringImpl *)*a2;
  v32 = a2[2] - *a2;
  if (v19 <= v32)
  {
    v75 = result;
    v62 = 0;
    v63 = 0;
    *a2 = 0;
    a2[1] = 0;
    v64 = a2[3];
    if (v64)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
        v63 = *a2;
        v62 = a2[1];
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
    }
  }
  else
  {
    v33 = (unsigned __int8 *)v10 + v32;
    a2[2] = (uint64_t)(v33 + 1);
    if (v10)
    {
      v34 = *v33;
      if (v34 < 2)
      {
        v35 = 0;
        v36 = 1;
        goto LABEL_37;
      }
      v75 = result;
      goto LABEL_115;
    }
    v75 = result;
    v62 = v19;
    v63 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  v65 = a2[3];
  if (v65 && v62)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v62);
    v34 = 0;
    v10 = (WTF::StringImpl *)*a2;
    v19 = a2[1];
  }
  else
  {
    v19 = 0;
    v10 = 0;
    v34 = 0;
  }
LABEL_115:
  *a2 = 0;
  a2[1] = 0;
  v66 = a2[3];
  if (v66 && v19)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v66 + 16))(v66, v10);
    result = v75;
    if (*a2)
    {
      v36 = 0;
      v35 = 1;
LABEL_37:
      if (v77 || (result & 0xFF00000000) == 0 || v35)
        goto LABEL_87;
      if (!v34)
        v36 = 0;
      v98 = v76 | HIDWORD(v76) | (unint64_t)(result << 32);
      v99 = v36;
      v37 = 1;
      goto LABEL_74;
    }
    v67 = a2[3];
    v68 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (v67 && v68)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 16))(v67, 0);
  }
LABEL_21:
  LOBYTE(v98) = 0;
  v101 = 0;
  v10 = (WTF::StringImpl *)*a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    goto LABEL_88;
  while (1)
  {
    v25 = 0;
    v26 = 1;
LABEL_75:
    if (!*a2)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 80) = 0;
      if (!v25)
        goto LABEL_85;
      goto LABEL_83;
    }
    if (v83 && !v8 && !v18 && !v26)
      break;
LABEL_87:
    __break(1u);
LABEL_88:
    if (v19)
      result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v10);
  }
  *(_OWORD *)v93 = v82;
  v93[16] = v6;
  *(_QWORD *)&v93[24] = v16 | v14;
  *(_QWORD *)&v93[32] = v80;
  *(_QWORD *)&v93[40] = v79;
  v94 = v2;
  *(_DWORD *)v95 = *(_DWORD *)v81;
  *(_DWORD *)&v95[3] = *(_DWORD *)&v81[3];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v96, (uint64_t)&v98);
  v42 = *(_OWORD *)&v93[16];
  v43 = *(_OWORD *)&v93[32];
  *(_OWORD *)a1 = *(_OWORD *)v93;
  *(_OWORD *)(a1 + 16) = v42;
  *(_OWORD *)(a1 + 32) = v43;
  *(_BYTE *)(a1 + 48) = v94;
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 56, (uint64_t)v96);
  *(_BYTE *)(a1 + 80) = 1;
  if (v97 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34AE220[v97])(&v84, v96);
  if (v101)
  {
LABEL_83:
    if (v100 != -1)
      result = ((uint64_t (*)(_BYTE *, unint64_t *))off_1E34AE220[v100])(v93, &v98);
  }
LABEL_85:
  if (!*(_BYTE *)(a1 + 80))
  {
    v55 = *a2;
    v56 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v56)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v55);
    }
  }
  return result;
}

void sub_196C1FB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,char a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v36;

  if (*(_BYTE *)(v34 + 80))
  {
    v36 = *(unsigned int *)(v34 + 72);
    if ((_DWORD)v36 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t))off_1E34AE220[v36])(&a29, v34 + 56);
    *(_DWORD *)(v34 + 72) = -1;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::LayoutPoint>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebCore::LayoutPoint,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::LayoutPoint,void>::decode(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = IPC::Decoder::decode<WebCore::LayoutUnit>(a1);
  v3 = IPC::Decoder::decode<WebCore::LayoutUnit>(a1);
  if (!*a1)
    return 0;
  if ((v2 & 0xFF00000000) == 0 || (v3 & 0xFF00000000) == 0)
  {
    __break(1u);
    return 0;
  }
  return v2 | ((unint64_t)v3 << 32);
}

unint64_t IPC::Decoder::decode<WebCore::LayoutUnit>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(a1);
  if (!HIDWORD(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = (uint64_t)(v5 + 1);
    if (!v2)
    {
      v7 = v1;
      v8 = 0;
      goto LABEL_10;
    }
    return *v5 | 0x100000000;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
      goto LABEL_14;
LABEL_10:
    while (1)
    {
      v2 = 0;
      *a1 = 0;
      a1[1] = 0;
      v10 = a1[3];
      if (!v10)
        break;
      v11 = a1;
      if (!v7)
        return 0;
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      v2 = *v11;
      if (!*v11)
        return v2;
      __break(1u);
LABEL_14:
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebCore::IntRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];

  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  v6 = v5;
  if (!v5)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v13 != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  v8 = result;
  v10 = v9;
  if (!v9)
  {
    v16 = *a1;
    v17 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v17)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
        v10 = 0;
      }
    }
  }
  if (!*a1)
    goto LABEL_11;
  if (!v6 || !v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  v18[0] = v4;
  v18[1] = v8;
  result = WebCore::IntRect::isValid((WebCore::IntRect *)v18);
  if ((result & 1) == 0)
  {
LABEL_11:
    LOBYTE(v11) = 0;
    goto LABEL_12;
  }
  v11 = *a1;
  if (!*a1)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    goto LABEL_9;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v8;
  LOBYTE(v11) = 1;
LABEL_9:
  *(_BYTE *)(a2 + 16) = v11;
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::IntSize>(unint64_t *a1)
{
  unint64_t result;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (int *)(v2 + v3);
    a1[2] = (unint64_t)(v5 + 1);
    if (v2)
    {
      v6 = 0;
      v7 = *v5;
      LODWORD(v8) = v7 & 0xFFFFFF00;
      v9 = v7;
      v10 = v2;
      goto LABEL_8;
    }
    goto LABEL_32;
  }
  v10 = 0;
  v17 = 0;
  *a1 = 0;
  a1[1] = 0;
  v18 = a1[3];
  if (v18)
  {
    v23 = a1;
    if (v1)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18);
      a1 = v23;
      v17 = *v23;
      v10 = v23[1];
    }
    else
    {
      v10 = 0;
      v17 = 0;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8)
    {
      v22 = a1;
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v8 + 16))(v8, v17, v10);
        LODWORD(v8) = 0;
        v9 = 0;
        a1 = v22;
        v10 = *v22;
        v1 = v22[1];
        v6 = 1;
        v2 = *v22;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        LODWORD(v8) = 0;
        v9 = 0;
        v6 = 1;
      }
    }
    else
    {
      v10 = 0;
      v1 = 0;
      v2 = 0;
      v9 = 0;
      v6 = 1;
    }
LABEL_8:
    v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 < v11 || v1 - v11 <= 3)
      break;
    v13 = (unsigned int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (unint64_t)(v13 + 1);
    v14 = v1;
    if (!v2)
      goto LABEL_21;
    if (!v6)
      return v9 | v8 | ((unint64_t)*v13 << 32);
LABEL_31:
    __break(1u);
LABEL_32:
    v10 = v1;
    v17 = v2;
  }
  v14 = 0;
  v10 = 0;
  *a1 = 0;
  a1[1] = 0;
  v19 = a1[3];
  if (v19)
  {
    v24 = a1;
    if (v1)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v19 + 16))(v19);
      a1 = v24;
      v10 = *v24;
      v14 = v24[1];
    }
    else
    {
      v14 = 0;
      v10 = 0;
    }
  }
LABEL_21:
  v15 = 0;
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (!v20)
    return v15;
  v21 = a1;
  if (v14)
  {
    a1 = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v10, v14);
    if (*v21)
      goto LABEL_31;
  }
  return 0;
}

_QWORD *IPC::Decoder::decode<std::optional<unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_10:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_11;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (result && v3)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v4);
    goto LABEL_12;
  }
  if (v7)
  {
    result = (_QWORD *)IPC::Decoder::decode<unsigned long long>(result);
    if (v9)
    {
      *(_QWORD *)a2 = result;
      v8 = 1;
      *(_BYTE *)(a2 + 8) = 1;
      goto LABEL_6;
    }
LABEL_12:
    v8 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_6;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v8 = 1;
LABEL_6:
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>(uint64_t *a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  __int16 v10;

  v2 = IPC::Decoder::decode<unsigned short>(a1);
  v3 = (v2 & 0xFE08) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v10 = v2;
      v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3)
    return 0;
  else
    return (unsigned __int16)v2 | 0x10000u;
}

uint64_t WebKit::ChangedLayers::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *(uint64_t **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(v5, a2);
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v7, a2);
  return a1;
}

uint64_t WebCore::PlatformCALayer::setOwner(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  unint64_t v5;
  _BYTE v7[32];

  IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)v7);
  if (v7[24])
  {
    IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder,IPC::SharedBufferReference>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
}

_QWORD *IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference,unsigned long long>,void>::decode<IPC::Decoder,IPC::SharedBufferReference>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v4);
        result = v13;
        a4 = v15;
        a2 = *v13;
        a3 = v13[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v11 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v14 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v14;
    }
    goto LABEL_12;
  }
  v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 24))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  v10 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 24) = v9;
  v11 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 32) = v11;
  return result;
}

void IPC::Decoder::decode<IPC::SharedBufferReference>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<IPC::SharedBufferReference,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[8];
  _BYTE v9[32];
  char v10;

  IPC::Decoder::decode<std::optional<IPC::SharedBufferReference::SerializableBuffer>>(a1, v8);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    IPC::SharedBufferReference::SharedBufferReference(&v6, (uint64_t)v8);
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  if (v10)
    v4 = v9[24] == 0;
  else
    v4 = 1;
  if (!v4 && v9[16] != 0)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
}

_QWORD *IPC::SharedBufferReference::SharedBufferReference(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  WebCore::SharedBuffer *v6;
  void *v7;
  unsigned int *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!*(_BYTE *)(a2 + 32))
    return a1;
  if (*(_QWORD *)a2)
  {
    if (!*(_BYTE *)(a2 + 24))
      return a1;
    WebCore::SharedMemory::map();
    if (!v9)
      return a1;
    if (*(_BYTE *)(a2 + 32))
    {
      if (*(_QWORD *)(v9 + 8) >= *(_QWORD *)a2)
      {
        *a1 = *(_QWORD *)a2;
        v4 = (unsigned int *)a1[2];
        a1[2] = v9;
        if (v4)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
        return a1;
      }
    }
    else
    {
      __break(1u);
    }
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v9);
    return a1;
  }
  v6 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v6);
  v8 = (unsigned int *)a1[1];
  a1[1] = v6;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
  return a1;
}

void IPC::Decoder::decode<std::optional<IPC::SharedBufferReference::SerializableBuffer>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C208C4(_Unwind_Exception *a1)
{
  _BYTE *v1;

  std::optional<std::optional<IPC::SharedBufferReference::SerializableBuffer>>::~optional(v1);
  _Unwind_Resume(a1);
}

void sub_196C212D8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14)
{
  WTF::StringImpl *v14;

  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, a2);
  else
    *(_DWORD *)v14 -= 2;
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a14)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a14 + 8));
  _Unwind_Resume(a1);
}

void sub_196C21764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a11 + 8));
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 == 1)
  {
    if (!__stlxr(0, v1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_8:
  if (!v4)
  {
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E34B61A8;
    *(_QWORD *)(v8 + 8) = v1;
    *(_QWORD *)(v8 + 16) = v5;
    *(_BYTE *)(v8 + 24) = v6;
    v10 = (unsigned __int8 *)v8;
    WTF::ensureOnMainThread();
    result = v10;
    if (v10)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

void sub_196C21890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_196C219C4(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 *v2;

  WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v7;

  v5 = (_QWORD *)result;
  if (__ldaxr((unsigned __int8 *)a2))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](a2);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a2))
    goto LABEL_3;
LABEL_4:
  if (*(_QWORD *)(a2 + 24))
    ++*(_QWORD *)(a2 + 8);
  else
    a3 = 0;
  *v5 = a3;
  v7 = __ldxr((unsigned __int8 *)a2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)a2);
  }
  if (__stlxr(0, (unsigned __int8 *)a2))
    return WTF::Lock::unlockSlow((WTF::Lock *)a2);
  return result;
}

double WebKit::NetworkResourceLoader::didReceiveBuffer(WebKit::NetworkResourceLoader *this, const WebCore::FragmentedSharedBuffer *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int v18;
  WebKit::NetworkResourceLoader *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 523);
  if (!v6)
  {
    v7 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)this + 10);
      v9 = *((_QWORD *)this + 11);
      v10 = *((_QWORD *)this + 12);
      v11 = *((_QWORD *)this + 379);
      v12 = *((unsigned __int8 *)this + 315) == 1;
      v13 = *((unsigned __int8 *)this + 3072);
      v14 = *((_QWORD *)this + 519) != 0;
      v18 = 134220032;
      v19 = this;
      v20 = 2048;
      v21 = v8;
      v22 = 2048;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      v26 = 2048;
      v27 = v11;
      v28 = 1024;
      v29 = v12;
      v30 = 1024;
      v31 = v13;
      v32 = 1024;
      v33 = v14;
      v34 = 2048;
      v35 = a3;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveData: Started receiving data (reportedEncodedDataLength=%llu)", (uint8_t *)&v18, 0x50u);
      v6 = *((_QWORD *)this + 523);
    }
    else
    {
      v6 = 0;
    }
  }
  v15 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 523) = v15 + v6;
  v16 = *((_QWORD *)this + 533);
  if (v16)
  {
    if ((unint64_t)(*(_QWORD *)(v16 + 48) + v15) > *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 532) + 8) + 40) >> 3)
    {
      *((_QWORD *)this + 533) = 0;
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v16, a2);
    }
    else
    {
      WebCore::SharedBufferBuilder::ensureBuffer((WebKit::NetworkResourceLoader *)((char *)this + 4264));
      WebCore::FragmentedSharedBuffer::append();
    }
  }
  if ((WebKit::NetworkResourceLoader::isCrossOriginPrefetch(this) & 1) == 0)
  {
    if (*((_QWORD *)this + 517))
    {
      WebCore::SharedBufferBuilder::ensureBuffer((WebKit::NetworkResourceLoader *)((char *)this + 4136));
      WebCore::FragmentedSharedBuffer::append();
      *((_QWORD *)this + 516) += a3;
      if (!*((_QWORD *)this + 519))
      {
        if ((*((_QWORD *)this + 529) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*((_QWORD *)this + 529) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          WebCore::TimerBase::start();
        }
      }
    }
    else
    {
      WebKit::NetworkResourceLoader::sendBuffer(this, (WebCore::SharedBuffer **)a2, a3);
    }
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::isCrossOriginPrefetch(WebKit::NetworkResourceLoader *this)
{
  WebCore::ResourceRequestBase *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;

  v1 = (WebKit::NetworkResourceLoader *)((char *)this + 168);
  WebCore::ResourceRequestBase::httpHeaderField();
  if (MEMORY[0x19AEABBCC](v5, "prefetch", 8))
  {
    WebCore::ResourceRequestBase::url(v1);
    v3 = WebCore::SecurityOrigin::canRequest() ^ 1;
  }
  else
  {
    v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WebKit::NetworkLoad::didReceiveData(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a2 + 48));
}

unsigned int *WebKit::NetworkResourceLoader::sendBuffer(WebKit::NetworkResourceLoader *this, WebCore::SharedBuffer **a2, uint64_t a3)
{
  WebCore::ContentFilter *v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  unsigned int *v15;
  unsigned int *result;
  void *v17;
  int v18;
  WebCore::SharedBuffer *v19;
  unsigned int *v20;
  unsigned int *v21;
  IPC::Encoder *v22;

  v6 = (WebCore::ContentFilter *)*((_QWORD *)this + 599);
  if (!v6)
    goto LABEL_2;
  WebCore::FragmentedSharedBuffer::makeContiguous((WebCore::FragmentedSharedBuffer *)a2);
  v18 = WebCore::ContentFilter::continueAfterDataReceived(v6, v19);
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
    result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
  if (v18)
  {
LABEL_2:
    v7 = (char *)this + 16;
    v19 = a2[6];
    do
      v8 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v8 + 1, (unsigned int *)a2));
    v20 = (unsigned int *)a2;
    v21 = 0;
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 2667;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v22 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v10, (IPC::SharedBufferReference *)&v19);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = a3;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v22, 0);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    v15 = v21;
    v21 = 0;
    if (v15)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
    result = v20;
    v20 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (WTF *)result;
  do
  {
    v3 = __ldaxr(result);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, result));
  if (!v4)
  {
    atomic_store(1u, result);
    WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 2, a2);
    return (unsigned int *)WTF::fastFree(v2, v5);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (unsigned int **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v6, a2);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char v6;

  v2 = this;
  do
  {
    v3 = __ldaxr(this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, this));
  if (!v4)
  {
    atomic_store(1u, this);
    v5 = this[6];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v6, this + 2);
    v2[6] = -1;
    return (unsigned int *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

BOOL IPC::MessageSender::sendMessage(uint64_t a1, uint64_t *a2, char a3)
{
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  int v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (!v5)
  {
    v10 = IPC::Connection::sendMessageImpl(0, a2, a3, 0);
    return v10 == 0;
  }
  v6 = v5;
  v7 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v7);
    goto LABEL_5;
  }
  if (__stxr(1u, v7))
    goto LABEL_4;
LABEL_5:
  ++*((_QWORD *)v7 + 1);
  v9 = __ldxr(v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v7))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v10 = IPC::Connection::sendMessageImpl((uint64_t)v6, a2, a3, 0);
  v11 = *v6;
  if (__ldaxr(*v6))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEABB3C](v11);
    goto LABEL_13;
  }
  if (__stxr(1u, v11))
    goto LABEL_12;
LABEL_13:
  v13 = *((_QWORD *)v11 + 1);
  v14 = v13 - 1;
  *((_QWORD *)v11 + 1) = v13 - 1;
  if (v13 == 1)
  {
    v20 = *((_QWORD *)v11 + 2);
    v16 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v11 + 3) = 0;
    v15 = v20 == 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = __ldxr(v11);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v11))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (!v14)
  {
    v19 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v19 = off_1E34ACA48;
    *(_QWORD *)(v19 + 8) = v11;
    *(_QWORD *)(v19 + 16) = v16;
    *(_BYTE *)(v19 + 24) = v15;
    v21 = v19;
    WTF::ensureOnMainRunLoop();
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  return v10 == 0;
}

uint64_t `non-virtual thunk to'WebKit::WebPage::messageSenderConnection(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((_QWORD *)v1 + 4);
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::messageSenderConnection(WebKit::NetworkResourceLoader *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 480) + 64);
}

uint64_t `non-virtual thunk to'WebKit::NetworkResourceLoader::messageSenderDestinationID(WebKit::NetworkResourceLoader *this)
{
  return *((_QWORD *)this + 377);
}

void IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(IPC::Encoder *a1, IPC::SharedBufferReference *this)
{
  BOOL v3;
  uint64_t v4;
  _BYTE v5[32];

  IPC::SharedBufferReference::serializableBuffer(this, &v4);
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference::SerializableBuffer>>(a1, &v4);
  if (v5[24])
    v3 = v5[16] == 0;
  else
    v3 = 1;
  if (!v3)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void sub_196C22240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  BOOL v18;

  if ((_BYTE)a15)
    v18 = a13 == 0;
  else
    v18 = 1;
  if (!v18)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Encoder::addAttachment(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 572) == *(_DWORD *)(a1 + 568))
    return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>(a1 + 560, a2);
  result = WTF::MachSendRight::MachSendRight();
  ++*(_DWORD *)(a1 + 572);
  return result;
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::MachSendRight>(uint64_t a1, unint64_t a2)
{
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::MachSendRight::MachSendRight();
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::MachSendRight *v4;
  WTF::MachSendRight *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x196C22434);
    }
    v4 = *(WTF::MachSendRight **)a1;
    v5 = (WTF::MachSendRight *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WTF::MachSendRight>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::MachSendRight **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::MachSendRight *WTF::VectorMover<false,WTF::MachSendRight>::move(WTF::MachSendRight *result, WTF::MachSendRight *a2, uint64_t a3)
{
  uint64_t v3;
  WTF::MachSendRight *v4;
  WTF::MachSendRight *v5;

  if (result != a2)
  {
    do
    {
      v3 = a3;
      v4 = a2;
      v5 = result;
      WTF::MachSendRight::MachSendRight();
      WTF::MachSendRight::~MachSendRight(v5);
      a2 = v4;
      a3 = v3 + 4;
      result = (WTF::MachSendRight *)((char *)v5 + 4);
    }
    while ((WTF::MachSendRight *)((char *)v5 + 4) != v4);
  }
  return result;
}

void IPC::SharedBufferReference::serializableBuffer(IPC::SharedBufferReference *this@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  _BYTE v11[16];
  char v12;

  if (*(_QWORD *)this)
  {
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    if (v4)
    {
      do
        v8 = __ldaxr(v4);
      while (__stlxr(v8 + 1, v4));
      v9 = v4;
    }
    else
    {
      v5 = (unsigned int *)*((_QWORD *)this + 1);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WebCore::SharedMemory::copyBuffer();
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v7);
      }
      else
      {
        WebCore::SharedMemory::copyBuffer();
      }
    }
    v10 = *(_QWORD *)this;
    WebCore::SharedMemory::createHandle();
    std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>((uint64_t)a2, (uint64_t)&v10);
    if (v12)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
  }
  else if (*((_QWORD *)this + 1))
  {
    v10 = 0;
    v11[0] = 0;
    v12 = 0;
    std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>((uint64_t)a2, (uint64_t)&v10);
    if (v12)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
}

void IPC::Decoder::takeLastAttachment(IPC::Decoder *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE v7[4];

  if (*((_DWORD *)this + 11))
  {
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)this + 32);
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
  }
  else
  {
    v3 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v5 = *((_QWORD *)this + 3);
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
    *a2 = 0;
    a2[4] = 0;
  }
}

void WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (!*(_DWORD *)(a1 + 12) || (WTF::MachSendRight::MachSendRight(), v2 = *(unsigned int *)(a1 + 12), !(_DWORD)v2))
  {
    __break(0xC471u);
    JUMPOUT(0x196C22694);
  }
  v3 = v2 - 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(*(_QWORD *)a1 + 4 * (v2 - 1)));
  *(_DWORD *)(a1 + 12) = v3;
}

void IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference::SerializableBuffer>>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE *v8;

  v4 = *((unsigned __int8 *)a2 + 32);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*((_BYTE *)a2 + 32))
    {
      v6 = *a2;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
      IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, (unint64_t)(a2 + 1));
    }
    else
    {
      v7 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  char v28;
  char v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE v32[24];
  char v33;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_26;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  v8 = v5 + v6 + 1;
  a1[2] = v8;
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_26:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_27;
  }
  v9 = *v7;
  if (v9 >= 2)
  {
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v5);
    goto LABEL_35;
  }
  if (!v9)
  {
    LOBYTE(v26) = 0;
    v29 = 0;
    std::__optional_move_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)&v26);
    a2[40] = 1;
    if (v29 && v28)
      goto LABEL_20;
    return;
  }
  v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v10 || v4 - v10 <= 7)
  {
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v23 = *a1;
      v24 = a1[1];
      v25 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v25)
      {
        if (v24)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
      }
    }
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v32);
    if (!*a1)
      goto LABEL_33;
    goto LABEL_32;
  }
  v12 = (uint64_t *)(v5 + v10);
  v13 = *v12;
  a1[2] = (uint64_t)(v12 + 1);
  IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v32);
  if (!*a1)
  {
LABEL_33:
    LOBYTE(v26) = 0;
    v29 = 0;
    goto LABEL_14;
  }
  v30 = v13;
  if (!v33)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100]((uint64_t)v31, (uint64_t)v32);
  v26 = v30;
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100]((uint64_t)v27, (uint64_t)v31);
  v29 = 1;
  if (v31[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v31);
LABEL_14:
  if (v33 && v32[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v32);
  if (!v29)
  {
    v20 = *a1;
    v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (!v22 || !v21 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20), !v29))
    {
LABEL_35:
      *a2 = 0;
      a2[40] = 0;
      return;
    }
  }
  *(_QWORD *)a2 = v26;
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100]((uint64_t)(a2 + 8), (uint64_t)v27);
  a2[32] = 1;
  a2[40] = 1;
  if (v29 && v28)
LABEL_20:
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v27);
}

void sub_196C229E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if ((_BYTE)a15)
  {
    if (a13)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (const void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::AuthenticationChallengeBase *)((char *)this + 80), a2);
  v9 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t WebKit::RemoteRenderingBackend::messageSenderConnection(WebKit::RemoteRenderingBackend *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 32);
}

uint64_t `non-virtual thunk to'WebKit::AuxiliaryProcess::messageSenderConnection(WebKit::AuxiliaryProcess *this)
{
  return *((_QWORD *)this + 2);
}

CFDataRef WebKit::NetworkProcess::sourceApplicationAuditData(WebKit::NetworkProcess *this, uint64_t a2)
{
  CFDataRef result;
  UInt8 bytes[36];

  if (a2 && *(_QWORD *)(a2 + 352))
  {
    xpc_connection_get_audit_token();
    bytes[32] = 1;
    result = CFDataCreate(0, bytes, 32);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

void WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(this, a2);
  WTF::fastFree(v2, v3);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v26;
  WTF::StringImpl *v27;
  const void *v28;
  const char ***v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  const void *v40;
  os_signpost_id_t v41;
  _DWORD v42[2];
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 76))
    goto LABEL_24;
  if (kdebug_is_enabled())
  {
    if (*MEMORY[0x1E0CBE150])
    {
      v36 = WTFSignpostLogHandle();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = *((_QWORD *)this + 76);
        v42[0] = 67109888;
        v42[1] = 2;
        v43 = 1024;
        v44 = 0;
        v45 = 2048;
        v46 = v37;
        v47 = 2048;
        v48 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_196BCC000, v36, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", (uint8_t *)v42, 0x22u);
      }
    }
    else
    {
      v38 = WTFSignpostLogHandle();
      v39 = v38;
      v40 = (const void *)*((_QWORD *)this + 76);
      if (v40)
      {
        v41 = os_signpost_id_make_with_pointer(v38, v40);
        if (v41 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_3;
      }
      else
      {
        v41 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v39))
      {
        LOWORD(v42[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v39, OS_SIGNPOST_INTERVAL_END, v41, "DataTask", (const char *)&unk_1979B1919, (uint8_t *)v42, 2u);
      }
    }
  }
LABEL_3:
  v3 = (void *)*((_QWORD *)this + 76);
  if (v3)
  {
    v4 = *((_QWORD *)this + 74);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = objc_msgSend(v3, "taskIdentifier");
        v9 = *(_QWORD *)(v5 + 24);
        v8 = (uint64_t *)(v5 + 24);
        v7 = v9;
        if (!v9)
          goto LABEL_45;
        v10 = *(_DWORD *)(v7 - 8);
        v11 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = (uint64_t *)(v7 + 24 * v14);
        v16 = *v15;
        if (*v15 != v6)
        {
          v17 = 1;
          while (v16)
          {
            v14 = (v14 + v17) & v10;
            v15 = (uint64_t *)(v7 + 24 * v14);
            v16 = *v15;
            ++v17;
            if (*v15 == v6)
              goto LABEL_13;
          }
          v15 = (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
        }
LABEL_13:
        if ((uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4)) == v15)
        {
LABEL_45:
          __break(0xC471u);
          JUMPOUT(0x196C23080);
        }
        v18 = (unsigned __int8 *)v15[1];
        *v15 = -1;
        v15[1] = 0;
        if (v18)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2);
        ++*(_DWORD *)(*v8 - 16);
        v19 = *v8;
        if (*v8)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v8;
        if (*v8)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v8, v23 >> 1);
        }
      }
    }
  }
LABEL_24:
  v25 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, (WTF::StringImpl *)a2);
  v26 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v26)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v26);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (const void *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v28)
    CFRelease(v28);
  v29 = (const char ***)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v29)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v29);
  v30 = (unsigned int *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  *((_QWORD *)this + 69) = off_1E34B61D0;
  v33 = (unsigned int *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
  WebKit::NetworkDataTask::~NetworkDataTask(this, (WTF::StringImpl *)a2);
}

void sub_196C231B4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  const void *v6;
  const char ***v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  v4 = v2[98];
  v2[98] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v2 + 77), a2);
  v6 = (const void *)v2[76];
  v2[76] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const char ***)v2[75];
  v2[75] = 0;
  if (v7)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v7);
  v8 = (unsigned int *)v2[74];
  v2[74] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa((WebKit::NetworkTaskCocoa *)(v2 + 69), v5);
  WebKit::NetworkDataTask::~NetworkDataTask((WebKit::NetworkDataTask *)v2, v11);
  _Unwind_Resume(a1);
}

void WebKit::NetworkTaskCocoa::~NetworkTaskCocoa(WebKit::NetworkTaskCocoa *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34B61D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void WebKit::NetworkDataTask::~NetworkDataTask(WebKit::NetworkDataTask *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  *(_QWORD *)this = off_1E34BDB70;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::remove<WebKit::NetworkDataTask,(void *)0>(v4 + 40, this);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkDataTask *)((char *)this + 328));
  v7 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkDataTask *)((char *)this + 128));
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v8);
    }
  }
  v20 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v8);
    }
  }
  v23 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v8);
    }
  }
}

uint64_t WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::remove<WebKit::NetworkDataTask,(void *)0>(uint64_t a1, void *a2)
{
  unsigned __int8 *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  WTF::ThreadSafeWeakPtrControlBlock *v16;
  unsigned __int8 **v17;
  BOOL HasStartedDeletion;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  WTF::ThreadSafeWeakPtrControlBlock *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;

  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEABB3C](a1 + 16);
LABEL_4:
  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)a1;
  if (v7 <= v6)
    goto LABEL_5;
  if (!v8)
    goto LABEL_66;
  v29 = *(_DWORD *)(v8 - 4);
  if (!v29)
  {
LABEL_51:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_52;
  }
  v30 = 0;
  v31 = v29 - 1;
  do
  {
    v32 = v31;
    v33 = (_QWORD *)(v8 + 16 * v31);
    if ((unint64_t)(*v33 + 1) >= 2)
    {
      v34 = v8 + 16 * v31;
      v36 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v34 + 8);
      v35 = (unsigned __int8 **)(v34 + 8);
      if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v36))
      {
        *v33 = -1;
        v37 = *v35;
        *v35 = 0;
        if (v37)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v37, a2);
        ++v30;
      }
    }
    --v31;
  }
  while (v32);
  v8 = *(_QWORD *)a1;
  if (v30)
  {
    *(_DWORD *)(v8 - 16) += v30;
    v42 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v43 = *(_DWORD *)(v42 - 12);
    else
      v43 = 0;
    *(_DWORD *)(v42 - 12) = v43 - v30;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_66:
    v8 = 0;
    v40 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_53;
  }
  v38 = *(_DWORD *)(v8 - 4);
  if (v38 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v38)
    goto LABEL_51;
  WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v40 = 0;
    goto LABEL_53;
  }
LABEL_52:
  v40 = *(_DWORD *)(v8 - 12);
  v41 = 0x7FFFFFFF;
  if (v40 < 0x7FFFFFFF)
LABEL_53:
    v41 = v40;
  *(_DWORD *)(a1 + 12) = 2 * v41;
LABEL_5:
  if (!v8)
    goto LABEL_22;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(void **)(v8 + 16 * v13);
  if (v14 != a2)
  {
    v28 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v28) & v9;
      v14 = *(void **)(v8 + 16 * v13);
      ++v28;
      if (v14 == a2)
        goto LABEL_7;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_7:
  if (v13 != *(_DWORD *)(v8 - 4))
  {
    v15 = (_QWORD *)(v8 + 16 * v13);
    v17 = (unsigned __int8 **)(v15 + 1);
    v16 = (WTF::ThreadSafeWeakPtrControlBlock *)v15[1];
    if (v16)
    {
      HasStartedDeletion = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v16);
      v8 = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
      {
        v19 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      HasStartedDeletion = 0;
    }
    v19 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v19 == v15)
    {
      v8 = 0;
      goto LABEL_20;
    }
LABEL_11:
    if (v19 == v15)
      goto LABEL_61;
    *v15 = -1;
    v20 = *v17;
    *v17 = 0;
    if (v20)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, a2);
    ++*(_DWORD *)(*(_QWORD *)a1 - 16);
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD *)a1 ? *(_DWORD *)(v21 - 12) - 1 : -1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_61:
      v8 = 1;
    }
    else
    {
      v24 = 6 * *(_DWORD *)(v23 - 12);
      v25 = *(_DWORD *)(v23 - 4);
      v8 = 1;
      if (v24 < v25 && v25 >= 9)
        WTF::HashTable<WebKit::NetworkDataTask const*,WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashMap<WebKit::NetworkDataTask const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::NetworkDataTask const*>,WTF::HashTraits<WebKit::NetworkDataTask const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkDataTask const*>>::rehash((uint64_t *)a1, v25 >> 1);
    }
LABEL_20:
    if (!HasStartedDeletion)
      goto LABEL_22;
  }
  v8 = 0;
LABEL_22:
  v26 = __ldxr(v4);
  if (v26 == 1)
  {
    if (!__stlxr(0, v4))
      return v8;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v8;
}

uint64_t `non-virtual thunk to'WebKit::WebSWClientConnection::messageSenderConnection(WebKit::WebSWClientConnection *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t WebKit::WebResourceLoader::messageSenderConnection(WebKit::WebResourceLoader *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

_QWORD *__copy_helper_block_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(_QWORD *result, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 40);
  result[5] = v2;
  if (v2)
    return v2;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setAnchorPoint(uint64_t a1, uint64_t *a2)
{
  int8x16_t result;
  uint64_t v3;

  if (*(float *)a2 != *(float *)(a1 + 428)
    || *((float *)a2 + 1) != *(float *)(a1 + 432)
    || (result.i32[0] = *((_DWORD *)a2 + 2), *(float *)result.i32 != *(float *)(a1 + 436)))
  {
    v3 = *a2;
    *(_DWORD *)(a1 + 436) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 428) = v3;
    result = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x80uLL));
    *(int8x16_t *)(a1 + 64) = result;
  }
  return result;
}

void WebKit::PlatformCALayerRemote::setContentsScale(WebKit::PlatformCALayerRemote *this, float a2)
{
  if (*((_BYTE *)this + 12) != 3)
  {
    *((float *)this + 153) = a2;
    *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore(this);
  }
}

int8x16_t WebKit::PlatformCALayerRemote::setBorderWidth(int8x16_t *this, int8x16_t result)
{
  if (*(float *)&this[38].i32[3] != *(float *)result.i32)
  {
    this[38].i32[3] = result.i32[0];
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x80000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::NetworkOriginAccessPatterns::anyPatternMatches(WebKit::NetworkOriginAccessPatterns *this, const WTF::URL *a2)
{
  uint64_t v2;
  WebCore::UserContentURLPattern *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    return 0;
  v4 = (WebCore::UserContentURLPattern *)*((_QWORD *)this + 1);
  v5 = 32 * v2 - 32;
  do
  {
    result = WebCore::UserContentURLPattern::matches<WTF::URL>(v4, a2);
    if ((result & 1) != 0)
      break;
    v4 = (WebCore::UserContentURLPattern *)((char *)v4 + 32);
    v7 = v5;
    v5 -= 32;
  }
  while (v7);
  return result;
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::call(_QWORD *a1)
{
  WTF::RunLoop *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (**v9)();
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *object;
  __int128 v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  _OWORD v34[4];
  uint64_t v35;
  void *v36;
  __int128 v37;
  char v38;
  char v39;

  API::openAndMapContentRuleList((API *)v34, (const WTF::String *)(a1 + 2));
  if (v39)
  {
    if (LODWORD(v34[0]) == 17)
    {
      WTF::RunLoop::main(v2);
      v3 = a1[1];
      a1[1] = 0;
      v17 = v3;
      WTF::String::isolatedCopy();
      v25 = v34[2];
      v26 = v34[3];
      *(_OWORD *)v22 = v34[0];
      v24 = v34[1];
      v27 = v35;
      object = v36;
      if (v36)
        os_retain(v36);
      v29 = v37;
      v30 = v38;
      v4 = a1[4];
      a1[4] = 0;
      v31 = v4;
      v5 = WTF::fastMalloc((WTF *)0x88);
      *(_QWORD *)v5 = &off_1E34D9568;
      *(_QWORD *)(v5 + 8) = v17;
      *(_QWORD *)(v5 + 16) = v20;
      *(_OWORD *)(v5 + 56) = v25;
      *(_OWORD *)(v5 + 72) = v26;
      *(_OWORD *)(v5 + 40) = v24;
      *(_QWORD *)(v5 + 88) = v27;
      *(_OWORD *)(v5 + 24) = *(_OWORD *)v22;
      *(_QWORD *)(v5 + 96) = object;
      if (object)
        os_retain(object);
      *(_BYTE *)(v5 + 120) = v30;
      *(_OWORD *)(v5 + 104) = v29;
      *(_QWORD *)(v5 + 128) = v31;
      WTF::RunLoop::dispatch();
      v33 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (object)
        os_release(object);
      goto LABEL_28;
    }
    API::getContentRuleListSourceFromMappedFile(&v33, (uint64_t)v34);
    v11 = v33;
    if (v33)
    {
      if (*((_DWORD *)v33 + 1))
      {
        WTF::RunLoop::main(v33);
        v12 = a1[1];
        a1[1] = 0;
        v18 = v12;
        WTF::String::isolatedCopy();
        WTF::String::isolatedCopy();
        v13 = a1[4];
        a1[4] = 0;
        v23 = v13;
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v14 = &off_1E34D9518;
        v14[1] = v18;
        v14[2] = v20;
        v14[3] = v21;
        v14[4] = v23;
        v32 = v14;
        WTF::RunLoop::dispatch();
        if (v32)
          (*(void (**)(_QWORD *))(*v32 + 8))(v32);
        v16 = v33;
        v33 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        goto LABEL_28;
      }
      v33 = 0;
      if (*(_DWORD *)v11 == 2)
        v11 = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::RunLoop::main(v11);
    v6 = a1[1];
    a1[1] = 0;
    v7 = a1[4];
    a1[4] = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v9 = &off_1E34D9540;
  }
  else
  {
    WTF::RunLoop::main(v2);
    v6 = a1[1];
    a1[1] = 0;
    v7 = a1[4];
    a1[4] = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v9 = &off_1E34D94F0;
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = v7;
  v19 = v8;
  WTF::RunLoop::dispatch();
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
LABEL_28:
  if (v39)
  {
    if (v36)
      os_release(v36);
  }
}

void API::openAndMapContentRuleList(API *this, const WTF::String *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  void *v11;
  void *object;
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  char v32;
  __int128 v33;
  char v34;
  _BYTE v35[20];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(a2, a2) & 1) == 0
    || (WebKit::NetworkCache::mapFile((uint64_t)&object), !object))
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 104) = 0;
    return;
  }
  WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)&object);
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v31) = 0;
  v32 = 0;
  WTF::Persistence::Decoder::operator>>();
  if (v32)
  {
    v3 = v31;
    LOBYTE(v29) = 0;
    v30 = 0;
    WTF::Persistence::Decoder::operator>>();
    if (v30)
    {
      v4 = v29;
      LOBYTE(v27) = 0;
      v28 = 0;
      WTF::Persistence::Decoder::operator>>();
      if (v28)
      {
        v5 = v27;
        LOBYTE(v25) = 0;
        v26 = 0;
        WTF::Persistence::Decoder::operator>>();
        if (v26)
        {
          v6 = v25;
          LOBYTE(v23) = 0;
          v24 = 0;
          WTF::Persistence::Decoder::operator>>();
          if (v24)
          {
            v7 = v23;
            LOBYTE(v21) = 0;
            v22 = 0;
            WTF::Persistence::Decoder::operator>>();
            if (v22)
            {
              v8 = v21;
              v19 = 0;
              v20 = 0;
              WTF::Persistence::Decoder::operator>>();
              if (v20)
              {
                if (v3 <= 0xB)
                {
                  *(_QWORD *)&v35[12] = 0;
                  *(_QWORD *)&v35[4] = 0;
                  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
                  v9 = 0;
LABEL_16:
                  v10 = v9 | v3;
                  v11 = object;
                  if (object)
                    os_retain(object);
                  v33 = v13;
                  v34 = v14;
                  *(_DWORD *)this = v10;
                  *((_QWORD *)this + 1) = v4;
                  *((_QWORD *)this + 2) = v5;
                  *((_QWORD *)this + 3) = v6;
                  *((_QWORD *)this + 4) = v7;
                  *((_QWORD *)this + 5) = v8;
                  *((_DWORD *)this + 12) = 0;
                  *(_OWORD *)((char *)this + 52) = *(_OWORD *)v35;
                  *((_DWORD *)this + 17) = *(_DWORD *)&v35[16];
                  *((_QWORD *)this + 9) = v11;
                  if (v11)
                  {
                    os_retain(v11);
                    *((_OWORD *)this + 5) = v33;
                    *((_BYTE *)this + 96) = v34;
                    os_release(v11);
                  }
                  else
                  {
                    *((_OWORD *)this + 5) = v13;
                    *((_BYTE *)this + 96) = v14;
                  }
                  *((_BYTE *)this + 104) = 1;
                  goto LABEL_22;
                }
                v17 = 0;
                v18 = 0;
                WTF::Persistence::Decoder::operator>>();
                if (v18)
                {
                  v15 = 0;
                  v16 = 0;
                  WTF::Persistence::Decoder::operator>>();
                  if (v16)
                  {
                    v9 = v3 & 0xFFFFFF00;
                    *(_QWORD *)&v35[12] = 0;
                    *(_QWORD *)&v35[4] = 0;
                    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
                    goto LABEL_16;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v33);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 104) = 0;
LABEL_22:
  if (object)
    os_release(object);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  void *v5;

  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    WebKit::NetworkCache::IOChannel::~IOChannel((WebKit::NetworkCache::IOChannel *)result, a2);
    return (unsigned int *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::recordPathForKey(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WebKit::NetworkCache::Storage::recordDirectoryPathForKey((uint64_t)&v8, (uint64_t)a2, a3);
  WebKit::NetworkCache::Key::hashAsString(a3 + 32, &v7);
  v4 = v7;
  if (v7)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  else
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Key::hashAsString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t i;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  char v26;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v22);
  for (i = 0; i != 20; ++i)
  {
    v6 = *(unsigned __int8 *)(a1 + i);
    if (v6 >= 0xA0)
      v7 = 55;
    else
      v7 = 48;
    v8 = v7 + (v6 >> 4);
    v26 = v8;
    if (v23 && ((v9 = v24, v24 < *((_DWORD *)v23 + 1)) ? (v10 = v22 == 0) : (v10 = 0), v10))
    {
      v11 = *((_DWORD *)v23 + 4);
      v12 = *((_QWORD *)v23 + 1);
      ++v24;
      if ((v11 & 4) != 0)
        *(_BYTE *)(v12 + v9) = v8;
      else
        *(_WORD *)(v12 + 2 * v9) = v8;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if ((v6 & 0xF) >= 0xA)
      v13 = 55;
    else
      v13 = 48;
    v14 = v13 + (v6 & 0xF);
    v26 = v13 + (v6 & 0xF);
    if (v23 && ((v15 = v24, v24 < *((_DWORD *)v23 + 1)) ? (v16 = v22 == 0) : (v16 = 0), v16))
    {
      v17 = *((_DWORD *)v23 + 4);
      v18 = *((_QWORD *)v23 + 1);
      ++v24;
      if ((v17 & 4) != 0)
        *(_BYTE *)(v18 + v15) = v14;
      else
        *(_WORD *)(v18 + 2 * v15) = v14;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  v19 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v19 = v22) != 0))
  {
    *(_DWORD *)v19 += 2;
  }
  *a2 = v19;
  v20 = v23;
  v23 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v4);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::recordDirectoryPathForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  WTF::String::isolatedCopy();
  WebKit::NetworkCache::Key::hashAsString(a3 + 52, &v8);
  v4 = v8;
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::pathByAppendingComponent();
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkCache::IOChannel::~IOChannel(WebKit::NetworkCache::IOChannel *this, WTF::StringImpl *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  void *v5;
  WTF::StringImpl *v6;

  v3 = (unsigned __int8 *)this + 24;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(1u, v3));
  if ((v4 & 1) != 0)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (v5)

    v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

uint64_t WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(uint64_t *a1, WebKit::NetworkCache::Storage::Record **a2)
{
  uint64_t v2;
  WebKit::NetworkCache::Storage::Record *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebKit::NetworkCache::Storage::Record *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WebKit::NetworkCache::Storage::Record *v11;
  uint64_t v12;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v11 = v3;
  v12 = v2;
  v5 = WTF::Function<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(&v12, &v11);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    WebKit::NetworkCache::Storage::Record::~Record(v6, v4);
    WTF::fastFree(v7, v8);
  }
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v5;
}

uint64_t WTF::Function<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(uint64_t *a1, WebKit::NetworkCache::Storage::Record **a2)
{
  uint64_t v2;
  WebKit::NetworkCache::Storage::Record *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WebKit::NetworkCache::Storage::Record *v6;
  WTF *v7;
  void *v8;
  WebKit::NetworkCache::Storage::Record *v10;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v10 = v3;
  v5 = (*(uint64_t (**)(uint64_t, WebKit::NetworkCache::Storage::Record **))(*(_QWORD *)v2 + 16))(v2, &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    WebKit::NetworkCache::Storage::Record::~Record(v6, v4);
    WTF::fastFree(v7, v8);
  }
  return v5;
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::Cache::completeRetrieve(WTF::MonotonicTime *a1, WebKit::NetworkCache::Entry **a2, uint64_t a3)
{
  uint64_t v6;
  WebKit::NetworkCache::Entry *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebKit::NetworkCache::Entry *result;
  WTF *v11;
  void *v12;
  WebKit::NetworkCache::Entry *v13;

  WTF::MonotonicTime::now(a1);
  *(_QWORD *)(a3 + 8) = v6;
  v7 = *a2;
  *a2 = 0;
  v8 = *(_QWORD *)a1;
  v13 = v7;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Entry **, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v13, a3);
  result = v13;
  v13 = 0;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, v9);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v11, v12);
  }
  return result;
}

unsigned int *WebKit::NetworkCache::IOChannel::read(uint64_t a1, off_t a2, size_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;

  if (a1)
  {
    do
      v8 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v8 + 1, (unsigned int *)a1));
  }
  v9 = *(NSObject **)(a1 + 32);
  v10 = *(NSObject **)(a4 + 16);
  do
    v11 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v11 + 1, (unsigned int *)a1));
  v12 = *a5;
  *a5 = 0;
  v13 = malloc_type_malloc(0x38uLL, 0x10E00407D41841AuLL);
  *v13 = MEMORY[0x1E0C809A0];
  v13[1] = 50331650;
  v13[2] = WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke;
  v13[3] = &WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::descriptor;
  v13[4] = a1;
  v13[5] = v12;
  *((_BYTE *)v13 + 48) = 0;
  dispatch_io_read(v9, a2, a3, v10, v13);
  _Block_release(v13);
  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref((unsigned int *)a1, v14);
}

void sub_196C247A8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  WTF::StringImpl *v5;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v2, a2);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v2, v5);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::NetworkCache::IOChannel::open(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = WTF::fastMalloc((WTF *)0x28);
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::IOChannel::IOChannel(v5, (const WTF::String *)&v8, a3, 0);
  *a1 = v5;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::IOChannel::IOChannel(uint64_t a1, const WTF::String *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  const char *v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  dispatch_fd_t v13;
  uint64_t v14;
  intptr_t v15;
  NSObject *global_queue;
  NSObject *v17;
  void *v18;
  void *v19;
  WTF *v20;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  _QWORD cleanup_handler[4];
  dispatch_fd_t v28;
  char *v29;

  *(_DWORD *)a1 = 1;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  WTF::FileSystemImpl::fileSystemRepresentation((WTF::FileSystemImpl *)(a1 + 8), a2);
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 2)
  {
    if (v29)
      v8 = v29 + 16;
    else
      v8 = 0;
    unlink(v8);
    if (BYTE4(a4))
      v9 = a4;
    else
      v9 = 4;
    v10 = 384;
    v11 = 518;
  }
  else
  {
    if (BYTE4(a4))
      v22 = a4;
    else
      v22 = 2;
    if (BYTE4(a4))
      v23 = a4;
    else
      v23 = 4;
    if (v7 == 1)
      v24 = 5;
    else
      v24 = 0;
    if (v7 == 1)
      v25 = 384;
    else
      v25 = 0;
    if (v7 != 1)
      v23 = 0;
    v26 = v7 == 0;
    if (v7)
      v11 = v24;
    else
      v11 = 4;
    if (v7)
      v10 = v25;
    else
      v10 = 0;
    if (v26)
      v9 = v22;
    else
      v9 = v23;
  }
  if (v29)
    v12 = v29 + 16;
  else
    v12 = 0;
  v13 = open(v12, v11, v10);
  *(_DWORD *)(a1 + 20) = v13;
  v14 = -2;
  if (v9 != 3)
    v14 = 0;
  if (v9 == 4)
    v15 = -32768;
  else
    v15 = v14;
  global_queue = dispatch_get_global_queue(v15, 0);
  cleanup_handler[0] = MEMORY[0x1E0C809B0];
  cleanup_handler[1] = 3321888768;
  cleanup_handler[2] = ___ZN6WebKit12NetworkCache9IOChannelC2EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEE_block_invoke;
  cleanup_handler[3] = &__block_descriptor_36_e8_32c105_ZTSKZN6WebKit12NetworkCache9IOChannelC1EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEEE3__0_e8_v12__0i8l;
  v28 = v13;
  v17 = dispatch_io_create(1uLL, v13, global_queue, cleanup_handler);
  v18 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  if (v18)
  {

    v17 = *(NSObject **)(a1 + 32);
  }
  dispatch_io_set_low_water(v17, 0xFFFFFFFFFFFFFFFFLL);
  v20 = (WTF *)v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, v19);
    else
      --*(_DWORD *)v20;
  }
  return a1;
}

void sub_196C24A08(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF *v6;
  void *v7;
  WTF::StringImpl *v8;

  v6 = *(WTF **)(v4 - 40);
  *(_QWORD *)(v4 - 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = *(void **)(v2 + 32);
  if (v7)

  v8 = *v3;
  *v3 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkResourceLoader::retrieveCacheEntryInternal(uint64_t a1, uint64_t *a2, WebCore::ResourceRequestBase *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  CFTypeRef v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  int v39;
  _BOOL4 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  int v50;
  _BOOL4 v51;
  WebKit::NetworkCache::Entry *v52;
  WTF::StringImpl *v53;
  WTF *v54;
  void *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  int v62;
  _BOOL4 v63;
  WTF::StringImpl *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  _BOOL4 v72;
  WebKit::NetworkCache::Entry *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint8_t buf[4];
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  _BOOL4 v87;
  __int16 v88;
  int v89;
  __int16 v90;
  _BOOL4 v91;
  CFTypeRef cf;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 3032);
    v11 = *(unsigned __int8 *)(a1 + 315) == 1;
    v12 = *(unsigned __int8 *)(a1 + 3072);
    v13 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    v77 = a1;
    v78 = 2048;
    v79 = v7;
    v80 = 2048;
    v81 = v8;
    v82 = 2048;
    v83 = v9;
    v84 = 2048;
    v85 = v10;
    v86 = 1024;
    v87 = v11;
    v88 = 1024;
    v89 = v12;
    v90 = 1024;
    v91 = v13;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal:", buf, 0x46u);
  }
  if (WebKit::NetworkCache::Entry::hasReachedPrevalentResourceAgeCap((WebKit::NetworkCache::Entry *)*a2))
  {
    v56 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v57 = *(_QWORD *)(a1 + 80);
      v58 = *(_QWORD *)(a1 + 88);
      v59 = *(_QWORD *)(a1 + 96);
      v60 = *(_QWORD *)(a1 + 3032);
      v61 = *(unsigned __int8 *)(a1 + 315) == 1;
      v62 = *(unsigned __int8 *)(a1 + 3072);
      v63 = *(_QWORD *)(a1 + 4152) != 0;
      *(_DWORD *)buf = 134219776;
      v77 = a1;
      v78 = 2048;
      v79 = v57;
      v80 = 2048;
      v81 = v58;
      v82 = 2048;
      v83 = v59;
      v84 = 2048;
      v85 = v60;
      v86 = 1024;
      v87 = v61;
      v88 = 1024;
      v89 = v62;
      v90 = 1024;
      v91 = v63;
      _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Revalidating cached entry because it reached the prevalent resource age cap", buf, 0x46u);
    }
    v64 = (WTF::StringImpl *)*a2;
    *a2 = 0;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4280), v64);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)(a1 + 168));
    WebKit::NetworkResourceLoader::startNetworkLoad(a1, (uint64_t)buf, 1);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
  }
  else
  {
    v14 = *a2;
    if (*(_BYTE *)(*a2 + 552))
    {
      v65 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v66 = *(_QWORD *)(a1 + 80);
        v67 = *(_QWORD *)(a1 + 88);
        v68 = *(_QWORD *)(a1 + 96);
        v69 = *(_QWORD *)(a1 + 3032);
        v70 = *(unsigned __int8 *)(a1 + 315) == 1;
        v71 = *(unsigned __int8 *)(a1 + 3072);
        v72 = *(_QWORD *)(a1 + 4152) != 0;
        *(_DWORD *)buf = 134219776;
        v77 = a1;
        v78 = 2048;
        v79 = v66;
        v80 = 2048;
        v81 = v67;
        v82 = 2048;
        v83 = v68;
        v84 = 2048;
        v85 = v69;
        v86 = 1024;
        v87 = v70;
        v88 = 1024;
        v89 = v71;
        v90 = 1024;
        v91 = v72;
        _os_log_impl(&dword_196BCC000, v65, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is a redirect", buf, 0x46u);
      }
      WebKit::NetworkResourceLoader::dispatchWillSendRequestForCacheEntry(a1, (uint64_t)a3, a2);
    }
    else if (!*(_BYTE *)(a1 + 373) || *(_BYTE *)(v14 + 208))
    {
      if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)(v14 + 80)) == 3
        || WebCore::ResourceRequestBase::cachePolicy(a3) == 5)
      {
        v15 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(a1 + 80);
          v17 = *(_QWORD *)(a1 + 88);
          v18 = *(_QWORD *)(a1 + 96);
          v19 = *(_QWORD *)(a1 + 3032);
          v20 = *(unsigned __int8 *)(a1 + 315) == 1;
          v21 = *(unsigned __int8 *)(a1 + 3072);
          v22 = *(_QWORD *)(a1 + 4152) != 0;
          *(_DWORD *)buf = 134219776;
          v77 = a1;
          v78 = 2048;
          v79 = v16;
          v80 = 2048;
          v81 = v17;
          v82 = 2048;
          v83 = v18;
          v84 = 2048;
          v85 = v19;
          v86 = 1024;
          v87 = v20;
          v88 = 1024;
          v89 = v21;
          v90 = 1024;
          v91 = v22;
          _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry needs revalidation", buf, 0x46u);
        }
        v23 = (WTF::StringImpl *)*a2;
        *a2 = 0;
        v24 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(_QWORD *)(a1 + 80);
          v26 = *(_QWORD *)(a1 + 88);
          v27 = *(_QWORD *)(a1 + 96);
          v28 = *(_QWORD *)(a1 + 3032);
          v29 = *(unsigned __int8 *)(a1 + 315) == 1;
          v30 = *(unsigned __int8 *)(a1 + 3072);
          v31 = *(_QWORD *)(a1 + 4152) != 0;
          *(_DWORD *)buf = 134219776;
          v77 = a1;
          v78 = 2048;
          v79 = v25;
          v80 = 2048;
          v81 = v26;
          v82 = 2048;
          v83 = v27;
          v84 = 2048;
          v85 = v28;
          v86 = 1024;
          v87 = v29;
          v88 = 1024;
          v89 = v30;
          v90 = 1024;
          v91 = v31;
          _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::validateCacheEntry:", buf, 0x46u);
        }
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)(a1 + 168));
        if ((WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)buf) & 1) == 0)
        {
          WebCore::ResourceResponseBase::httpHeaderField();
          WebCore::ResourceResponseBase::httpHeaderField();
          if (v75 && *((_DWORD *)v75 + 1))
            WebCore::ResourceRequestBase::setHTTPHeaderField();
          v42 = v74;
          if (v74)
          {
            if (*((_DWORD *)v74 + 1))
            {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
              v42 = v74;
            }
            v74 = 0;
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = v75;
          v75 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v41);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4272), v23);
        WebKit::NetworkResourceLoader::startNetworkLoad(a1, (uint64_t)buf, 1);
        v32 = cf;
        cf = 0;
        if (v32)
          CFRelease(v32);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      }
      else
      {
        v44 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v45 = *(_QWORD *)(a1 + 80);
          v46 = *(_QWORD *)(a1 + 88);
          v47 = *(_QWORD *)(a1 + 96);
          v48 = *(_QWORD *)(a1 + 3032);
          v49 = *(unsigned __int8 *)(a1 + 315) == 1;
          v50 = *(unsigned __int8 *)(a1 + 3072);
          v51 = *(_QWORD *)(a1 + 4152) != 0;
          *(_DWORD *)buf = 134219776;
          v77 = a1;
          v78 = 2048;
          v79 = v45;
          v80 = 2048;
          v81 = v46;
          v82 = 2048;
          v83 = v47;
          v84 = 2048;
          v85 = v48;
          v86 = 1024;
          v87 = v49;
          v88 = 1024;
          v89 = v50;
          v90 = 1024;
          v91 = v51;
          _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is directly usable", buf, 0x46u);
        }
        v52 = (WebKit::NetworkCache::Entry *)*a2;
        *a2 = 0;
        v73 = v52;
        WebKit::NetworkResourceLoader::didRetrieveCacheEntry(a1, &v73);
        if (v73)
        {
          WebKit::NetworkCache::Entry::~Entry(v73, v53);
          WTF::fastFree(v54, v55);
        }
      }
    }
    else
    {
      v33 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)(a1 + 80);
        v35 = *(_QWORD *)(a1 + 88);
        v36 = *(_QWORD *)(a1 + 96);
        v37 = *(_QWORD *)(a1 + 3032);
        v38 = *(unsigned __int8 *)(a1 + 315) == 1;
        v39 = *(unsigned __int8 *)(a1 + 3072);
        v40 = *(_QWORD *)(a1 + 4152) != 0;
        *(_DWORD *)buf = 134219776;
        v77 = a1;
        v78 = 2048;
        v79 = v34;
        v80 = 2048;
        v81 = v35;
        v82 = 2048;
        v83 = v36;
        v84 = 2048;
        v85 = v37;
        v86 = 1024;
        v87 = v38;
        v88 = 1024;
        v89 = v39;
        v90 = 1024;
        v91 = v40;
        _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntryInternal: Cached entry is missing certificate information so we are not using it", buf, 0x46u);
      }
      WebKit::NetworkResourceLoader::startNetworkLoad(a1, (uint64_t)a3, 1);
    }
  }
}

BOOL WebKit::NetworkCache::Entry::hasReachedPrevalentResourceAgeCap(WebKit::NetworkCache::Entry *this)
{
  double v3;

  if (!*((_BYTE *)this + 752))
    return 0;
  WebCore::computeCurrentAge();
  return v3 > *((double *)this + 93) || *((_BYTE *)this + 752) == 0;
}

void WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(WebKit::NetworkCache::Storage::ReadOperation *this)
{
  void *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
    os_release(v2);
  std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::Record **)this + 13, 0);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v9);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34C4478;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::blobPathForKey(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WebKit::NetworkCache::Storage::recordPathForKey((WebKit::NetworkCache::Storage *)&v6, a2, a3);
  WebKit::NetworkCache::blobPathForRecordPath(this, v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::blobPathForRecordPath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6[2];

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = a2;
  v6[0] = (uint64_t)"-blob";
  v6[1] = 6;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(_QWORD *)this)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WebKit::NetworkCache::BlobStorage::get(WebKit::NetworkCache::BlobStorage *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  void *object;
  __int128 v7;
  char v8;

  WebKit::NetworkCache::mapFile((uint64_t)&object);
  v5 = object;
  *(_QWORD *)a2 = object;
  if (v5)
    os_retain(v5);
  *(_OWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  WebKit::NetworkCache::computeSHA1((uint64_t)&object, (uint64_t)this + 8);
  if (object)
    os_release(object);
}

void WebKit::NetworkCache::mapFile(uint64_t a1@<X8>)
{
  WTF::FileSystemImpl *v4;
  WebKit::NetworkCache *v5;
  uint64_t v6;
  int *v7;
  int v8;

  v4 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
  v8 = (int)v4;
  if ((_DWORD)v4 != -1)
  {
    v5 = v4;
    v6 = WTF::FileSystemImpl::fileSize(v4);
    if ((_BYTE)v7)
    {
      WebKit::NetworkCache::adoptAndMapFile(v5, v7, v6, a1);
      return;
    }
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v7);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void WebKit::NetworkCache::adoptAndMapFile(WebKit::NetworkCache *this@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v8 = this;
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    if ((WTF::FileSystemImpl::MappedFileData::mapFileHandle() & 1) != 0)
    {
      WebKit::NetworkCache::Data::adoptMap((uint64_t)&v6, (int *)v8, a4);
    }
    else
    {
      WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v5);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v6);
  }
  else
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, a2);
    WebKit::NetworkCache::Data::empty(a4);
  }
}

NSObject *WebKit::NetworkCache::Data::adoptMap@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4;
  const void *v5;
  NSObject *global_queue;
  NSObject *result;
  BOOL v8;
  _QWORD destructor[6];
  int v10;

  v10 = (int)a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v10, a2);
  global_queue = dispatch_get_global_queue(0, 0);
  destructor[0] = MEMORY[0x1E0C809B0];
  destructor[1] = 3321888768;
  destructor[2] = ___ZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEi_block_invoke;
  destructor[3] = &__block_descriptor_48_e8_32c88_ZTSKZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEiE3__0_e5_v8__0l;
  destructor[4] = v5;
  destructor[5] = v4;
  result = dispatch_data_create(v5, v4, global_queue, destructor);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  if (result)
  {
    result = dispatch_data_get_size(result);
    v8 = result != 0;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

uint64_t WebKit::WebProcessProxy::didChangeThrottleState(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  CFTypeRef **v20;
  uint64_t v21;
  CFTypeRef *v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  CFTypeRef **v53;
  uint64_t v54;
  CFTypeRef *v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE v75[12];
  _BYTE v76[6];
  __int16 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  WebKit::AuxiliaryProcessProxy::didChangeThrottleState(a1, a2);
  if (!*(_BYTE *)(a1 + 680))
    return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 136);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    *(_DWORD *)v75 = 134218496;
    *(_QWORD *)&v75[4] = a1;
    *(_WORD *)v76 = 1024;
    *(_DWORD *)&v76[2] = v5;
    v77 = 1024;
    v78 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState: type=%u", v75, 0x18u);
  }
  if (!*(_BYTE *)(a1 + 872) || (v6 = *(_QWORD *)(a1 + 552)) != 0 && *(_DWORD *)(v6 - 12))
  {
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        if (!a2)
        {
          v7 = qword_1ECE71640;
          if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
          {
            v8 = *(_QWORD *)(a1 + 136);
            if (v8)
              LODWORD(v8) = *(_DWORD *)(v8 + 108);
            *(_DWORD *)v75 = 134218240;
            *(_QWORD *)&v75[4] = a1;
            *(_WORD *)v76 = 1024;
            *(_DWORD *)&v76[2] = v8;
            _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Suspended) Release all assertions for network process", v75, 0x12u);
          }
          v9 = *(_QWORD *)(a1 + 664);
          *(_QWORD *)(a1 + 664) = 0;
          if (v9)
          {
            v10 = *(uint64_t **)v9;
            v11 = *(_QWORD *)(v9 + 8) - 1;
            *(_QWORD *)(v9 + 8) = v11;
            if (v10)
            {
              v12 = *v10;
              if (!*v10)
                goto LABEL_23;
              v13 = *(_BYTE *)(v9 + 16);
              *(_BYTE *)(v9 + 16) = 1;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
              *(_BYTE *)(v9 + 16) = v13;
              if (*(_QWORD *)v9)
                goto LABEL_23;
              v11 = *(_QWORD *)(v9 + 8);
            }
            if (!v11)
              MEMORY[0x19AEB936C](v9, 0x1020C40545B2139);
          }
LABEL_23:
          v14 = *(_QWORD *)(a1 + 672);
          *(_QWORD *)(a1 + 672) = 0;
          if (v14)
          {
            v15 = *(uint64_t **)v14;
            v16 = *(_QWORD *)(v14 + 8) - 1;
            *(_QWORD *)(v14 + 8) = v16;
            if (!v15)
              goto LABEL_28;
            v17 = *v15;
            if (*v15)
            {
              v18 = *(_BYTE *)(v14 + 16);
              *(_BYTE *)(v14 + 16) = 1;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
              *(_BYTE *)(v14 + 16) = v18;
              if (!*(_QWORD *)v14)
              {
                v16 = *(_QWORD *)(v14 + 8);
LABEL_28:
                if (!v16)
                  MEMORY[0x19AEB936C](v14, 0x1020C40545B2139);
              }
            }
          }
          WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)v75);
          if (*(_DWORD *)v76)
          {
            v20 = *(CFTypeRef ***)v75;
            v21 = 8 * *(unsigned int *)v76;
            do
            {
              v22 = *v20++;
              CFRetain(v22[1]);
              WebKit::WebPageProxy::processWillBecomeSuspended((WebKit::WebPageProxy *)v22, v23, v24);
              CFRelease(v22[1]);
              v21 -= 8;
            }
            while (v21);
          }
LABEL_80:
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v75, v19);
        }
LABEL_81:
        WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
        return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
      }
      v59 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *(_QWORD *)(a1 + 136);
        if (v60)
          LODWORD(v60) = *(_DWORD *)(v60 + 108);
        *(_DWORD *)v75 = 134218240;
        *(_QWORD *)&v75[4] = a1;
        *(_WORD *)v76 = 1024;
        *(_DWORD *)&v76[2] = v60;
        _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Background) Taking background assertion for network process", v75, 0x12u);
      }
      v61 = *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8);
      if (v61)
        v62 = v61 - 16;
      else
        v62 = 0;
      v63 = *(_QWORD *)(v62 + 752);
      if (v63)
      {
        v64 = *(_QWORD **)v63;
        ++*(_QWORD *)(v63 + 8);
        if (v64)
        {
          if (*v64)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v64 + 16))(*v64, 1);
        }
      }
      v65 = *(_QWORD *)(a1 + 672);
      *(_QWORD *)(a1 + 672) = v63;
      if (v65)
      {
        v66 = *(uint64_t **)v65;
        v67 = *(_QWORD *)(v65 + 8) - 1;
        *(_QWORD *)(v65 + 8) = v67;
        if (v66)
        {
          v68 = *v66;
          if (!*v66)
            goto LABEL_101;
          v69 = *(_BYTE *)(v65 + 16);
          *(_BYTE *)(v65 + 16) = 1;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 16))(v68, 0);
          *(_BYTE *)(v65 + 16) = v69;
          if (*(_QWORD *)v65)
            goto LABEL_101;
          v67 = *(_QWORD *)(v65 + 8);
        }
        if (!v67)
          MEMORY[0x19AEB936C](v65, 0x1020C40545B2139);
      }
LABEL_101:
      v70 = *(_QWORD *)(a1 + 664);
      *(_QWORD *)(a1 + 664) = 0;
      if (v70)
      {
        v71 = *(uint64_t **)v70;
        v72 = *(_QWORD *)(v70 + 8) - 1;
        *(_QWORD *)(v70 + 8) = v72;
        if (v71)
        {
          v73 = *v71;
          if (!*v71)
            goto LABEL_81;
          v74 = *(_BYTE *)(v70 + 16);
          *(_BYTE *)(v70 + 16) = 1;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, 0);
          *(_BYTE *)(v70 + 16) = v74;
          if (*(_QWORD *)v70)
            goto LABEL_81;
          v72 = *(_QWORD *)(v70 + 8);
        }
        if (!v72)
          MEMORY[0x19AEB936C](v70, 0x1020C40545B2139);
        goto LABEL_81;
      }
      goto LABEL_81;
    }
    v37 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(a1 + 136);
      if (v38)
        LODWORD(v38) = *(_DWORD *)(v38 + 108);
      *(_DWORD *)v75 = 134218240;
      *(_QWORD *)&v75[4] = a1;
      *(_WORD *)v76 = 1024;
      *(_DWORD *)&v76[2] = v38;
      _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Foreground) Taking foreground assertion for network process", v75, 0x12u);
    }
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8);
    if (v39)
      v40 = v39 - 16;
    else
      v40 = 0;
    v41 = *(_QWORD *)(v40 + 736);
    if (v41)
    {
      v42 = *(_QWORD **)v41;
      ++*(_QWORD *)(v41 + 8);
      if (v42)
      {
        if (*v42)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v42 + 16))(*v42, 1);
      }
    }
    v43 = *(_QWORD *)(a1 + 664);
    *(_QWORD *)(a1 + 664) = v41;
    if (v43)
    {
      v44 = *(uint64_t **)v43;
      v45 = *(_QWORD *)(v43 + 8) - 1;
      *(_QWORD *)(v43 + 8) = v45;
      if (v44)
      {
        v46 = *v44;
        if (!*v44)
          goto LABEL_70;
        v47 = *(_BYTE *)(v43 + 16);
        *(_BYTE *)(v43 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 16))(v46, 0);
        *(_BYTE *)(v43 + 16) = v47;
        if (*(_QWORD *)v43)
          goto LABEL_70;
        v45 = *(_QWORD *)(v43 + 8);
      }
      if (!v45)
        MEMORY[0x19AEB936C](v43, 0x1020C40545B2139);
    }
LABEL_70:
    v48 = *(_QWORD *)(a1 + 672);
    *(_QWORD *)(a1 + 672) = 0;
    if (v48)
    {
      v49 = *(uint64_t **)v48;
      v50 = *(_QWORD *)(v48 + 8) - 1;
      *(_QWORD *)(v48 + 8) = v50;
      if (!v49)
        goto LABEL_75;
      v51 = *v49;
      if (*v49)
      {
        v52 = *(_BYTE *)(v48 + 16);
        *(_BYTE *)(v48 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 16))(v51, 0);
        *(_BYTE *)(v48 + 16) = v52;
        if (!*(_QWORD *)v48)
        {
          v50 = *(_QWORD *)(v48 + 8);
LABEL_75:
          if (!v50)
            MEMORY[0x19AEB936C](v48, 0x1020C40545B2139);
        }
      }
    }
    WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)v75);
    if (*(_DWORD *)v76)
    {
      v53 = *(CFTypeRef ***)v75;
      v54 = 8 * *(unsigned int *)v76;
      do
      {
        v55 = *v53++;
        CFRetain(v55[1]);
        WebKit::WebPageProxy::processWillBecomeForeground((WebKit::WebPageProxy *)v55, v56, v57);
        CFRelease(v55[1]);
        v54 -= 8;
      }
      while (v54);
    }
    goto LABEL_80;
  }
  v25 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(_QWORD *)(a1 + 136);
    if (v26)
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    *(_DWORD *)v75 = 134218240;
    *(_QWORD *)&v75[4] = a1;
    *(_WORD *)v76 = 1024;
    *(_DWORD *)&v76[2] = v26;
    _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState: Release all assertions for network process because this is a service worker process without page", v75, 0x12u);
  }
  v27 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v27)
  {
    v28 = *(uint64_t **)v27;
    v29 = *(_QWORD *)(v27 + 8) - 1;
    *(_QWORD *)(v27 + 8) = v29;
    if (!v28)
      goto LABEL_43;
    v30 = *v28;
    if (*v28)
    {
      v31 = *(_BYTE *)(v27 + 16);
      *(_BYTE *)(v27 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, 0);
      *(_BYTE *)(v27 + 16) = v31;
      if (!*(_QWORD *)v27)
      {
        v29 = *(_QWORD *)(v27 + 8);
LABEL_43:
        if (!v29)
          MEMORY[0x19AEB936C](v27, 0x1020C40545B2139);
      }
    }
  }
  v32 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (!v32)
    return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  v33 = *(uint64_t **)v32;
  v34 = *(_QWORD *)(v32 + 8) - 1;
  *(_QWORD *)(v32 + 8) = v34;
  if (v33)
  {
    v35 = *v33;
    if (!*v33)
      return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
    v36 = *(_BYTE *)(v32 + 16);
    *(_BYTE *)(v32 + 16) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, 0);
    *(_BYTE *)(v32 + 16) = v36;
    if (*(_QWORD *)v32)
      return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
    v34 = *(_QWORD *)(v32 + 8);
  }
  if (!v34)
    MEMORY[0x19AEB936C](v32, 0x1020C40545B2139);
  return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
}

uint64_t WebKit::WebProcessPool::updateProcessAssertions(WebKit::WebProcessPool *this)
{
  WebKit::NetworkProcessProxy *v1;
  unsigned int *v2;
  unsigned int v3;
  WebKit::GPUProcessProxy *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      v1 = *(WebKit::NetworkProcessProxy **)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v1)
      {
        v2 = (unsigned int *)((char *)v1 + 16);
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 + 1, v2));
        WebKit::NetworkProcessProxy::updateProcessAssertion(v1);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  {
    if (WebKit::singleton(void)::singleton)
    {
      v4 = *(WebKit::GPUProcessProxy **)(WebKit::singleton(void)::singleton + 8);
      if (v4)
      {
        v5 = (unsigned int *)((char *)v4 + 16);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WebKit::GPUProcessProxy::updateProcessAssertion(v4);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34D79C0;
  v9 = (uint64_t)v7;
  WTF::callOnMainRunLoop();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

WebKit::NetworkProcessProxy *WebKit::NetworkProcessProxy::NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
  char v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  _BYTE buf[12];
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(this);
  WebKit::WebProcessPool::allProcessPools((uint64_t)buf);
  if (v25)
  {
    v4 = *(uint64_t **)buf;
    v5 = 8 * v25 - 8;
    do
    {
      v6 = *v4++;
      v7 = *(_BYTE *)(v6 + 520) != 0;
      if (*(_BYTE *)(v6 + 520))
        v8 = 1;
      else
        v8 = v5 == 0;
      v5 -= 8;
    }
    while (!v8);
  }
  else
  {
    v7 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v3);
  WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy((uint64_t)this, v2, v7, 6.0);
  *(_QWORD *)this = off_1E34DD1B0;
  *((_QWORD *)this + 3) = &unk_1E34DD2B8;
  *((_QWORD *)this + 4) = &unk_1E34DD310;
  *((_QWORD *)this + 52) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34C7790;
  v9[1] = 0;
  *((_QWORD *)this + 53) = v9;
  *((_QWORD *)this + 54) = &off_1E34DD360;
  *((_QWORD *)this + 55) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 56) = v10;
  LOBYTE(v23) = 18;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 19, &v23, (uint64_t)this + 432, (unsigned int **)buf);
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  v12 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::NetworkProcessProxy", buf, 0xCu);
  }
  WebKit::AuxiliaryProcessProxy::connect(this);
  WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(this);
  WebKit::NetworkProcessProxy::updateProcessAssertion(this);
  {
    WebKit::networkProcessesSet(void)::set = 0;
    unk_1ECE73950 = 0;
  }
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::networkProcessesSet(void)::set, (unsigned int *)this, (uint64_t)buf);
  WebKit::NetworkProcessProxy::addBackgroundStateObservers(this);
  {
    xmmword_1ECE73558 = 0u;
    unk_1ECE73568 = 0u;
    WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD520;
  v15[1] = v13;
  v23 = v15;
  WebKit::StorageAccessPromptQuirkController::observeUpdates((uint64_t)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance, (uint64_t *)&v23, (uint64_t *)buf);
  v17 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v18 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = v17;
  if (v18)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v18, v16);
    v20 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v20)
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v20, v19);
  }
  v21 = (uint64_t)v23;
  v23 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return this;
}

BOOL WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(WebKit::WebProcessPool *this)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;
  uint64_t *v8;
  unsigned int v9;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v2 = v8;
    v3 = 8 * v9 - 8;
    do
    {
      v4 = *v2++;
      v5 = *(_BYTE *)(v4 + 521) != 0;
      if (*(_BYTE *)(v4 + 521))
        v6 = 1;
      else
        v6 = v3 == 0;
      v3 -= 8;
    }
    while (!v6);
  }
  else
  {
    v5 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  return v5;
}

WebKit::ProcessThrottlerActivity *WebKit::NetworkProcessProxy::updateProcessAssertion(WebKit::NetworkProcessProxy *this)
{
  void *v2;
  WebKit::ProcessThrottlerActivity *v3;
  uint64_t v4;
  void *v5;
  WebKit::ProcessThrottlerActivity *v6;
  uint64_t v7;
  WebKit::ProcessThrottlerActivity *result;
  uint64_t v9;
  WebKit::ProcessThrottlerActivity *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  _BYTE v20[8];
  int v21;
  WebKit::ProcessThrottlerActivity *v22;
  unsigned int v23;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (v23)
  {
    v3 = v22;
    v4 = 8 * v23;
    while (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 736) + 8))
    {
      v3 = (WebKit::ProcessThrottlerActivity *)((char *)v3 + 8);
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
    result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
    v10 = (WebKit::NetworkProcessProxy *)((char *)this + 456);
    if (*((_DWORD *)this + 116) != 1
      || (v11 = *(_QWORD *)(*(_QWORD *)v10 + 8)) == 0
      || !*(_QWORD *)(v11 + 8)
      || !*(_BYTE *)(*(_QWORD *)v10 + 32))
    {
      v12 = WTF::fastMalloc((WTF *)0x28);
      v13 = "Networking for foreground view(s)";
      v14 = (char *)this + 200;
      v15 = 1;
      goto LABEL_22;
    }
    return result;
  }
LABEL_5:
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (!v23)
  {
LABEL_9:
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
    v20[0] = 0;
    v21 = -1;
    result = (WebKit::ProcessThrottlerActivity *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)this + 456);
    v9 = *((unsigned int *)this + 116);
    if ((_DWORD)v9 != -1)
    {
      if (!(_DWORD)v9)
      {
        *((_QWORD *)this + 57) = 0;
        goto LABEL_26;
      }
      result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, char *))off_1E34DD408[v9])(&v22, (char *)this + 456);
    }
    *((_QWORD *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
LABEL_26:
    if (v21 != -1)
      return (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, _BYTE *))off_1E34DD408[v21])(&v22, v20);
    return result;
  }
  v6 = v22;
  v7 = 8 * v23;
  while (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 752) + 8))
  {
    v6 = (WebKit::ProcessThrottlerActivity *)((char *)v6 + 8);
    v7 -= 8;
    if (!v7)
      goto LABEL_9;
  }
  result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
  v10 = (WebKit::NetworkProcessProxy *)((char *)this + 456);
  if (*((_DWORD *)this + 116) != 1
    || (v16 = *(_QWORD *)(*(_QWORD *)v10 + 8)) == 0
    || !*(_QWORD *)(v16 + 8)
    || *(_BYTE *)(*(_QWORD *)v10 + 32))
  {
    v12 = WTF::fastMalloc((WTF *)0x28);
    v13 = "Networking for background view(s)";
    v14 = (char *)this + 200;
    v15 = 0;
LABEL_22:
    v22 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v12, (uint64_t)v14, v13, 34, v15, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v10, (WebKit::ProcessThrottlerActivity **)v10, &v22);
    result = v22;
    v22 = 0;
    if (result)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, v17);
      return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void WebKit::WebProcessPool::allProcessPools(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  {
    v3 = dword_1ECE73864;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = WTF::fastMalloc((WTF *)(8 * v3));
        *(_DWORD *)(a1 + 8) = v3;
        *(_QWORD *)a1 = v4;
        if (dword_1ECE73864)
        {
          v5 = v4;
          v6 = 0;
          v7 = WebKit::processPools(void)::processPools;
          v8 = 8 * dword_1ECE73864;
          do
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 8);
            if (v9)
              v10 = v9 - 16;
            else
              v10 = 0;
            CFRetain(*(CFTypeRef *)(v10 + 8));
            *(_QWORD *)(v5 + 8 * v6++) = v10;
            *(_DWORD *)(a1 + 12) = v6;
            v8 -= 8;
          }
          while (v8);
        }
      }
    }
  }
  else
  {
    WebKit::processPools(void)::processPools = 0;
    *(_QWORD *)&dword_1ECE73860 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void WebKit::NetworkProcessProxy::addBackgroundStateObservers(WebKit::NetworkProcessProxy *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  const void *v20;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  v7 = MEMORY[0x1E0C809A0];
  v8 = *MEMORY[0x1E0CEB288];
  *v6 = MEMORY[0x1E0C809A0];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void *,NSNotification *)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::descriptor;
  v6[4] = v4;
  v9 = (const void *)objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v8, v3, 0, v6);
  v10 = v9;
  if (v9)
    CFRetain(v9);
  v11 = (const void *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = v10;
  if (v11)
    CFRelease(v11);
  _Block_release(v6);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v13 = objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v14 = (unsigned int *)*((_QWORD *)this + 1);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  v17 = *MEMORY[0x1E0CEB350];
  *v16 = v7;
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void *,NSNotification *)#1}::__invoke;
  v16[3] = &WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::descriptor;
  v16[4] = v14;
  v18 = (const void *)objc_msgSend(v12, "addObserverForName:object:queue:usingBlock:", v17, v13, 0, v16);
  v19 = v18;
  if (v18)
    CFRetain(v18);
  v20 = (const void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v19;
  if (v20)
    CFRelease(v20);
  _Block_release(v16);
}

void sub_196C266C4(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::ApplicationStateTracker *WebKit::ApplicationStateTracker::ApplicationStateTracker(WebKit::ApplicationStateTracker *this, UIView *a2, objc_selector *a3, objc_selector *a4, objc_selector *a5, objc_selector *a6)
{
  WKUIWindowSceneObserver *v11;
  void *v12;
  unsigned int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[24];
  WTF *v39;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = 0;
  objc_initWeak((id *)this + 1, a2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v11 = -[WKUIWindowSceneObserver initWithParent:]([WKUIWindowSceneObserver alloc], "initWithParent:", this);
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 5) = v11;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = a3;
  *((_QWORD *)this + 8) = a4;
  *((_QWORD *)this + 9) = a5;
  *((_QWORD *)this + 10) = a6;
  *((_BYTE *)this + 88) = 1;
  *((_OWORD *)this + 7) = 0u;
  {
    v14 = dword_1ECE73660;
    v13 = dword_1ECE73664;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(_QWORD *)&dword_1ECE73660 = 0;
  }
  dword_1ECE73660 = v14 + 1;
  if (v14 + 1 <= v13)
    goto LABEL_34;
  v15 = &_MergedGlobals_106;
  v16 = WebKit::allApplicationStateTrackers(void)::trackers;
  if (!WebKit::allApplicationStateTrackers(void)::trackers)
    goto LABEL_29;
  v17 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
  if (!v17)
  {
LABEL_28:
    dword_1ECE73660 = 0;
    goto LABEL_31;
  }
  v18 = 0;
  do
  {
    v19 = *(_QWORD *)(v16 + 8 * --v17);
    if ((unint64_t)(v19 + 1) >= 2 && !*(_QWORD *)(v19 + 8))
    {
      *(_QWORD *)(v16 + 8 * v17) = 0;
      do
      {
        v20 = __ldaxr((unsigned int *)v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unsigned int *)v19));
      if (!v21)
      {
        atomic_store(1u, (unsigned int *)v19);
        WTF::fastFree((WTF *)v19, v12);
        v15 = &_MergedGlobals_106;
      }
      *(_QWORD *)(v16 + 8 * v17) = -1;
      ++v18;
    }
  }
  while (v17);
  v16 = *((_QWORD *)v15 + 203);
  if (v18)
  {
    *(_DWORD *)(v16 - 16) += v18;
    v22 = *((_QWORD *)v15 + 203);
    if (v22)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    *(_DWORD *)(v22 - 12) = v23 - v18;
    v16 = *((_QWORD *)v15 + 203);
  }
  if (!v16)
  {
LABEL_29:
    v26 = 0;
    dword_1ECE73660 = 0;
LABEL_32:
    v27 = v26;
    goto LABEL_33;
  }
  v24 = *(_DWORD *)(v16 - 4);
  if (v24 < 9 || 6 * *(_DWORD *)(v16 - 12) >= v24)
    goto LABEL_28;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::allApplicationStateTrackers(void)::trackers);
  v16 = WebKit::allApplicationStateTrackers(void)::trackers;
  dword_1ECE73660 = 0;
  if (!WebKit::allApplicationStateTrackers(void)::trackers)
  {
    v26 = 0;
    goto LABEL_32;
  }
LABEL_31:
  v26 = *(_DWORD *)(v16 - 12);
  v27 = 0x7FFFFFFF;
  if (v26 < 0x7FFFFFFF)
    goto LABEL_32;
LABEL_33:
  dword_1ECE73664 = 2 * v27;
LABEL_34:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  v28 = *(unsigned int **)this;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 + 1, v28));
  v39 = (WTF *)v28;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&WebKit::allApplicationStateTrackers(void)::trackers, &v39, (uint64_t)v38);
  v32 = (unsigned int *)v39;
  v39 = 0;
  if (v32)
  {
    do
    {
      v36 = __ldaxr(v32);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v32));
    if (!v37)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v31);
    }
  }
  if (v28)
  {
    do
    {
      v33 = __ldaxr(v28);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v28));
    if (!v34)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v31);
    }
  }
  return this;
}

void sub_196C26A34(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  uint64_t v14;
  id *v15;
  id *v16;
  id *v17;
  id *v18;
  id *v19;
  id *v20;
  unsigned int *v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  const void *v27;
  void *v28;

  if (a14)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)a14);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)a14));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)a14);
      WTF::fastFree(a14, a2);
    }
  }
  if (v21)
  {
    do
    {
      v23 = __ldaxr(v21);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v21));
    if (!v24)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  objc_destroyWeak(v19 + 3);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19 + 1);
  objc_destroyWeak(v19);
  v27 = *(const void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = 0;
  if (v27)
    CFRelease(v27);
  objc_destroyWeak(v17);
  objc_destroyWeak(v18);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v14, v28);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::activityStateDidChange(uint64_t a1, __int16 a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  WTF::RunLoop *v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v25[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_WORD *)(v10 + 1320) | a2;
  *(_WORD *)(v10 + 1320) = v11;
  if (*(_BYTE *)(a1 + 960))
    v12 = 1;
  else
    v12 = a4;
  *(_BYTE *)(a1 + 960) = v12;
  if ((v11 & 4) != 0)
  {
    if (*(_BYTE *)(a1 + 858))
    {
      v13 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      if ((_DWORD)v13)
      {
        WTF::RunLoop::main(v13);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
        v14 = *(unsigned int **)(a1 + 24);
        if (v14)
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v16 = &off_1E34D46E0;
        v16[1] = a1;
        v16[2] = v14;
        *(_QWORD *)v25 = v16;
        WTF::RunLoop::dispatch();
        v17 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 881) || (a3 & 1) != 0)
  {
    v23 = 0;
    if ((a2 & 0x10) != 0 && (*(_WORD *)(*(_QWORD *)(a1 + 32) + 48) & 0x10) == 0)
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
    if ((a3 & 1) != 0 || v23)
      WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)a1);
    else
      WebKit::WebPageProxy::scheduleActivityStateUpdate((WebKit::WebPageProxy *)a1);
  }
  else
  {
    v18 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(v19 + 744);
      v21 = *(_QWORD *)(v19 + 1896);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      *(_DWORD *)v25 = 134218752;
      *(_QWORD *)&v25[4] = a1;
      v26 = 2048;
      v27 = v20;
      v28 = 2048;
      v29 = v21;
      v30 = 1024;
      v31 = v22;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::activityStateDidChange: Returning early due to m_suppressVisibilityUpdates", v25, 0x26u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
}

unsigned int *WebKit::WebPageProxy::scheduleActivityStateUpdate(WebKit::WebPageProxy *this)
{
  int isScheduled;
  unsigned int *result;
  int v4;
  BOOL v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[4];
  WTF *v16;

  isScheduled = WebCore::RunLoopObserver::isScheduled(*((WebCore::RunLoopObserver **)this + 113));
  result = (unsigned int *)objc_msgSend(MEMORY[0x1E0CD28B0], "currentState");
  v4 = (int)result;
  if (isScheduled)
    v5 = (_DWORD)result == 0;
  else
    v5 = 1;
  if (!v5)
  {
    *((_BYTE *)this + 921) = 0;
    result = (unsigned int *)WebCore::RunLoopObserver::invalidate(*((WebCore::RunLoopObserver **)this + 113));
  }
  if (!*((_BYTE *)this + 921))
  {
    *((_BYTE *)this + 921) = 1;
    if (v4)
    {
      v6 = (void *)MEMORY[0x1E0CD28B0];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3321888768;
      v15[2] = ___ZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEv_block_invoke;
      v15[3] = &__block_descriptor_40_e8_32c64_ZTSKZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEvE3__0_e5_v8__0l;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
      v7 = (unsigned int *)*((_QWORD *)this + 3);
      if (v7)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 + 1, v7));
      }
      v16 = (WTF *)v7;
      objc_msgSend(v6, "addCommitHandler:forPhase:", v15, 2);
      if (v7)
      {
        do
        {
          v11 = __ldaxr(v7);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v7));
        if (!v12)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v10);
        }
      }
      result = (unsigned int *)v16;
      v16 = 0;
      if (result)
      {
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, v10);
        }
      }
    }
    else
    {
      return (unsigned int *)WebCore::RunLoopObserver::schedule();
    }
  }
  return result;
}

void sub_196C26F7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a14)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if (!v14)
      goto LABEL_8;
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_196C2731C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::setOrientationForMediaCapture(unsigned int *this, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  this[250] = a2;
  if (!*((_BYTE *)this + 729))
  {
    v3 = this;
    if (*((_BYTE *)this + 728))
    {
      v5 = *((_QWORD *)this + 26);
      v6 = *(_QWORD *)(v5 + 768);
      if (v6)
      {
        *(_DWORD *)(v6 + 56) = a2;
        v7 = *(unsigned int *)(v6 + 52);
        if ((_DWORD)v7)
        {
          v14 = *(uint64_t **)(v6 + 40);
          v15 = 8 * v7;
          do
          {
            v16 = *v14++;
            this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a2);
            v15 -= 8;
          }
          while (v15);
          v5 = *((_QWORD *)v3 + 26);
        }
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 512) + 8);
      if (v8)
        v9 = v8 - 16;
      else
        v9 = 0;
      v10 = *(_QWORD *)(v9 + 176);
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 16);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = *((_QWORD *)v3 + 28);
        {
          WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v13 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3))WebKit::GPUProcessProxy::setOrientationForMediaCapture(v10, a2);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
      }
    }
  }
  return this;
}

_BYTE *WebKit::WebPageProxy::setDeviceOrientation(WebKit::WebPageProxy *this, int a2)
{
  _BYTE *result;
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;

  v9 = a2;
  result = (_BYTE *)*((_QWORD *)this + 156);
  if (result)
  {
    if (a2 == 90)
      v5 = 2;
    else
      v5 = a2 == 180;
    if (a2 == -90)
      v6 = 3;
    else
      v6 = v5;
    result = WebKit::WebScreenOrientationManagerProxy::setCurrentOrientation(result, v6);
  }
  if (*((_DWORD *)this + 99) != a2)
  {
    *((_DWORD *)this + 99) = a2;
    if (!*((_BYTE *)this + 729))
    {
      if (*((_BYTE *)this + 728))
      {
        v7 = *((_QWORD *)this + 26);
        v8 = &v9;
        return (_BYTE *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDeviceOrientation>(v7, &v8, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
      }
    }
  }
  return result;
}

_BYTE *WebKit::WebScreenOrientationManagerProxy::setCurrentOrientation(_BYTE *result, int a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7[8];
  WTF::StringImpl *v8;
  char v9;

  if (result[24] != a2)
  {
    v2 = result;
    result[24] = a2;
    if (result[40])
    {
      v3 = *((_QWORD *)result + 2);
      v4 = *(_QWORD *)(v3 + 208);
      v7[0] = a2;
      result = WebKit::AuxiliaryProcessProxy::send<Messages::WebScreenOrientationManager::OrientationDidChange>(v4, v7, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), 0);
      v5 = *((_QWORD *)v2 + 4);
      if (v5)
      {
        v7[0] = 0;
        v9 = 0;
        *((_QWORD *)v2 + 4) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v7);
        result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        if (v9)
        {
          result = v8;
          v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void sub_196C27ACC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::webViewDidMoveToWindow(WebKit::WebPageProxy *this)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  v2 = (uint64_t *)((char *)this + 1160);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34D5C88;
  v10 = v3;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v10);
  v4 = v10;
  v10 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  v9 = *((_QWORD *)this + 4);
  if (*(unsigned __int8 *)(v9 + 1904) != v7)
  {
    *(_BYTE *)(v9 + 1904) = v7;
    result = *((_QWORD *)this + 23);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::windowKindDidChange(uint64_t this, CALayer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit *v6;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(_BYTE *)(*(_QWORD *)(v3 + 32) + 1904) == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(this + 72) + 8);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      v6 = *(WebKit **)(v5 + 40);
    else
      v6 = 0;
    return WebKit::recursivelyMapIOSurfaceBackingStore(v6, a2);
  }
  return this;
}

uint64_t WebKit::PageClientImplCocoa::windowKind(id *this)
{
  if (objc_msgSend(objc_loadWeak(this + 2), "window"))
  {
    NSClassFromString(CFSTR("_SCNSnapshotWindow"));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return 2;
    else
      return 1;
  }
  else
  {
    return 0;
  }
}

_QWORD *WebKit::updateApplicationBackgroundState(WebKit *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  {
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(_QWORD *)&dword_1ECE73660 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::allApplicationStateTrackers(void)::trackers, &v12);
  if (WebKit::allApplicationStateTrackers(void)::trackers)
  {
    v1 = *(unsigned int *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
    v2 = WebKit::allApplicationStateTrackers(void)::trackers + 8 * v1;
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  v7 = &WebKit::allApplicationStateTrackers(void)::trackers;
  v8 = v2;
  v9 = v2;
  v10 = v2;
  v11 = WebKit::allApplicationStateTrackers(void)::trackers + 8 * v1;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  v4 = v13;
  if (v13 == v8)
  {
    v6 = 1;
  }
  else
  {
    do
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 88);
      v6 = v5 != 0;
      if (!v5)
        break;
      result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
      v4 = v13;
    }
    while (v13 != v8);
  }
  if (WebKit::updateApplicationBackgroundState(void)::s_isApplicationInBackground != v6)
  {
    WebKit::updateApplicationBackgroundState(void)::s_isApplicationInBackground = v6;
    return (_QWORD *)WebKit::ProcessAndUIAssertion::setProcessStateMonitorEnabled((WebKit::ProcessAndUIAssertion *)v6);
  }
  return result;
}

void WebKit::WebPageProxy::processWillBecomeForeground(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    if (*((_BYTE *)this + 400))
    {
      WebKit::WebPageProxy::setNetworkRequestsInProgress(this, 1, a3);
      *((_BYTE *)this + 400) = 0;
    }
  }
}

uint64_t WebKit::GPUProcessProxy::setOrientationForMediaCapture(uint64_t this, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = a2;
  if (*(_DWORD *)(this + 436) != a2)
  {
    *(_DWORD *)(this + 436) = a2;
    v2 = &v3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetOrientationForMediaCapture>(this, &v2, 0, 0);
  }
  return this;
}

void WebKit::WebPageProxy::processWillBecomeSuspended(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  int v3;

  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 4) + 1120);
    *((_BYTE *)this + 400) = v3;
    if (v3)
      WebKit::WebPageProxy::setNetworkRequestsInProgress(this, 0, a3);
  }
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setNeedsDisplayInRect(WebKit::PlatformCALayerRemoteTiledBacking *this, const WebCore::FloatRect *a2)
{
  WebCore::TileController *v2;
  IntSize v3;
  IntRect v5;

  v2 = (WebCore::TileController *)*((_QWORD *)this + 105);
  v5.m_location = (IntPoint)WebCore::enclosingIntRect(a2, (const FloatRect *)a2);
  v5.m_size = v3;
  return WebCore::TileController::setNeedsDisplayInRect(v2, &v5);
}

uint64_t WebKit::PlatformCAAnimationRemote::setAdditive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 82) = a2;
  return this;
}

unsigned __int8 *WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction(uint64_t a1)
{
  unsigned __int8 *result;
  int v2;

  result = **(unsigned __int8 ***)(a1 + 16);
  v2 = __ldxr(result);
  if (v2 == 1)
  {
    if (!__stlxr(0, result))
      return result;
  }
  else
  {
    __clrex();
  }
  return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
}

int8x16_t *WebKit::PlatformCALayerRemote::setBackingStoreAttached(int8x16_t *this, int a2)
{
  uint64_t v2;

  if (this[41].u8[0] != a2)
  {
    this[41].i8[0] = a2;
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x80000000uLL));
    if (a2)
    {
      return (int8x16_t *)(*(uint64_t (**)(int8x16_t *))(this->i64[0] + 72))(this);
    }
    else
    {
      v2 = this[29].i64[1];
      this[29].i64[1] = 0;
      if (v2)
        return (int8x16_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return this;
}

uint64_t WebCore::SecurityOriginData::host(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  WebKit::WebChromeClient *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebKit::WebChromeClient *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebChromeClient::scheduleRenderingUpdate(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebKit::WebChromeClient::scheduleRenderingUpdate(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
  else
    v4 = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(WebKit::RemoteLayerTreeDrawingArea *this)
{
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  if (!*((_BYTE *)this + 360))
  {
    kdebug_trace();
    *((_BYTE *)this + 360) = 1;
    if (*((_BYTE *)this + 348))
    {
      if (!*((_BYTE *)this + 227))
      {
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
        v3 = (unsigned int *)*((_QWORD *)this + 1);
        if (v3)
        {
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 + 1, v3));
        }
        v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v5 = &off_1E34B3718;
        v5[1] = v3;
        v6 = v5;
        WTF::callOnMainRunLoop();
        if (v6)
          (*(void (**)(_QWORD *))(*v6 + 8))(v6);
      }
    }
    else
    {
      WebCore::TimerBase::start();
    }
  }
  return 1;
}

void sub_196C28278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebCore::TileController **WebKit::PlatformCALayerRemoteTiledBacking::customSublayers(WebCore::TileController **this)
{
  void *v2;
  WTF **v3;
  uint64_t v4;
  WTF *v5;
  WebCore::TileController *v6;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::TileController *v11;
  WebCore::TileController *v12;

  WebCore::TileController::containerLayers(this[105]);
  v3 = this + 106;
  v4 = *((unsigned int *)this + 215);
  if ((_DWORD)v4)
  {
    v8 = *v3;
    v9 = 8 * v4;
    do
    {
      v10 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  v5 = *v3;
  if (*v3)
  {
    this[106] = 0;
    *((_DWORD *)this + 214) = 0;
    WTF::fastFree(v5, v2);
  }
  this[106] = v11;
  v6 = v12;
  v11 = 0;
  v12 = 0;
  this[107] = v6;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v2);
  return this + 106;
}

void WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(WebKit::PlatformCALayerRemote *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);
  WTF::fastFree(v2, v3);
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteLayerTreeContext *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34D6898;
  v3 = (char *)this + 792;
  v4 = *((unsigned int *)this + 201);
  if ((_DWORD)v4)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 99);
    v13 = 8 * v4;
    while (1)
    {
      v14 = *v12;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 32))(*v12) - 1) >= 4u)
        break;
      *(_QWORD *)(v14 + 808) = 0;
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_2;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_2:
    v5 = *((_QWORD *)this + 104);
    if (v5)
    {
      v6 = *(WebKit::RemoteLayerTreeContext **)(v5 + 8);
      if (v6)
      {
        ++*((_DWORD *)v6 + 2);
        WebKit::RemoteLayerTreeContext::layerWillLeaveContext(v6, this);
        if (*((_DWORD *)v6 + 2) == 1)
          (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(_QWORD *)v6 + 8))(v6);
        else
          --*((_DWORD *)v6 + 2);
      }
      v7 = (unsigned int *)*((_QWORD *)this + 104);
      *((_QWORD *)this + 104) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)this + 104) = 0;
    }
    v10 = *((_QWORD *)this + 102);
    if (v10)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)a2);
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    WebKit::LayerProperties::~LayerProperties((WebKit::PlatformCALayerRemote *)((char *)this + 64));
    WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v11);
    WebCore::PlatformCALayer::~PlatformCALayer(this);
  }
}

void sub_196C284DC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;

  v5 = *(unsigned int **)(v2 + 832);
  *(_QWORD *)(v2 + 832) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *(_QWORD *)(v2 + 816);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)(v2 + 64));
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 56), v9);
  WebCore::PlatformCALayer::~PlatformCALayer((WebCore::PlatformCALayer *)v2);
  _Unwind_Resume(a1);
}

void sub_196C28548()
{
  _DWORD *v0;

  if (v0[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v0 + 8))(v0);
  else
    --v0[2];
  JUMPOUT(0x196C284E0);
}

uint64_t WebKit::PlatformCALayerRemote::appendSublayer(int8x16_t *this, WebCore::PlatformCALayer *a2)
{
  unsigned int *v4;
  unsigned int v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  __int32 v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v4 = (unsigned int *)((char *)a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 112))(a2);
  v6 = (void **)&this[49].i64[1];
  v7 = this[50].u32[1];
  if ((_DWORD)v7 == this[50].i32[0])
  {
    v12 = v7 + (v7 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v7 + 1)
      v14 = v7 + 1;
    else
      v14 = v13;
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v6, v14);
    v15 = this[50].u32[1];
    v16 = this[49].i64[1];
    do
      v17 = __ldaxr(v4);
    while (__stlxr(v17 + 1, v4));
    v10 = this[50].i32[1];
    *(_QWORD *)(v16 + 8 * v15) = a2;
  }
  else
  {
    v8 = *v6;
    do
      v9 = __ldaxr(v4);
    while (__stlxr(v9 + 1, v4));
    v8[v7] = a2;
    v10 = this[50].i32[1];
  }
  this[50].i32[1] = v10 + 1;
  if (((*(uint64_t (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 32))(a2) - 1) >= 4u)
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 101) = this;
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v4);
  }
  return result;
}

void sub_196C2869C(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

int8x16_t WebKit::PlatformCALayerRemote::setSublayers(int8x16_t *a1, int8x16_t *a2)
{
  WTF **v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t result;
  WTF *v29;

  (*(void (**)(int8x16_t *))(a1->i64[0] + 136))(a1);
  v4 = (WTF **)&a1[49].i64[1];
  if (&a1[49].u64[1] != (unint64_t *)a2)
  {
    v5 = a1[50].u32[1];
    v6 = a2->u32[3];
    if (v5 > v6)
    {
      WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(&a1[49].u32[2], v6);
    }
    else
    {
      v7 = a1[50].u32[0];
      if (v6 > v7)
      {
        if (v7)
        {
          if (v5)
            WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(&a1[49].u32[2], 0);
          v29 = *v4;
          if (*v4)
          {
            a1[49].i64[1] = 0;
            a1[50].i32[0] = 0;
            WTF::fastFree(v29, (void *)v6);
          }
        }
        WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&a1[49].i64[1], a2->u32[3]);
      }
    }
    v8 = (uint64_t *)a2->i64[0];
    v9 = a1[50].u32[1];
    if ((_DWORD)v9)
    {
      v10 = &v8[v9];
      v11 = *v4;
      do
      {
        v12 = *v8;
        if (*v8)
        {
          v13 = (unsigned int *)(v12 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
        v15 = *(_QWORD *)v11;
        *(_QWORD *)v11 = v12;
        if (v15)
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
        ++v8;
        v11 = (WTF *)((char *)v11 + 8);
      }
      while (v8 != v10);
      v8 = (uint64_t *)a2->i64[0];
      v16 = a1[50].u32[1];
    }
    else
    {
      v16 = 0;
    }
    v17 = a2->u32[3];
    if (v16 != (_DWORD)v17)
    {
      v18 = &v8[v17];
      v19 = (_QWORD *)((char *)*v4 + 8 * v16);
      v20 = &v8[v16];
      do
      {
        v21 = *v20;
        if (*v20)
        {
          v22 = (unsigned int *)(v21 + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
        *v19++ = v21;
        ++v20;
      }
      while (v20 != v18);
      v16 = a2->u32[3];
    }
    a1[50].i32[1] = v16;
  }
  v24 = a2->u32[3];
  if ((_DWORD)v24)
  {
    v25 = (_QWORD *)a2->i64[0];
    v26 = 8 * v24;
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 112))(*v25);
      v27 = *v25;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v25 + 32))(*v25) - 1 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x196C28878);
      }
      *(_QWORD *)(v27 + 808) = a1;
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x10uLL));
  a1[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::removeFromSuperlayer(WebKit::PlatformCALayerRemote *this)
{
  int8x16_t *v1;
  uint64_t v3;
  WebKit::PlatformCALayerRemote **v4;
  WebKit::PlatformCALayerRemote **v5;
  uint64_t v6;
  int8x16_t result;

  v1 = (int8x16_t *)*((_QWORD *)this + 101);
  if (v1)
  {
    v3 = v1[50].u32[1];
    if ((_DWORD)v3)
    {
      v4 = (WebKit::PlatformCALayerRemote **)v1[49].i64[1];
      v5 = v4 + 1;
      v6 = v1[50].u32[1];
      while (*v4 != this)
      {
        ++v4;
        ++v5;
        if (!--v6)
          goto LABEL_10;
      }
      *v4 = 0;
      if (this)
      {
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)this + 2);
        v3 = v1[50].u32[1];
      }
      memmove(v4, v4 + 1, v1[49].i64[1] + 8 * v3 - (_QWORD)v5);
      --v1[50].i32[1];
    }
LABEL_10:
    *((_QWORD *)this + 101) = 0;
    result = vorrq_s8(v1[4], (int8x16_t)vdupq_n_s64(0x10uLL));
    v1[4] = result;
  }
  return result;
}

void **WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::removeAllSublayers(int8x16_t *this)
{
  void *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;

  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v6, (uint64_t)&this[49].i64[1]);
  if (v7)
  {
    v4 = v6;
    v5 = 8 * v7;
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 112))(*v4);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));
  return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
}

void sub_196C28A64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = *(_QWORD *)a2 + 8 * v6;
      do
      {
        v9 = *v7;
        if (*v7)
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *v5++ = v9;
        ++v7;
      }
      while (v7 != (uint64_t *)v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::RemoteLayerTreeContext::layerWillLeaveContext(WebKit::RemoteLayerTreeContext *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t *v26;
  __int128 *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v35;
  WebKit::VideoPresentationManager *v36;
  __int128 v37;
  unsigned int v38;
  __int16 v39;
  char v40;

  v37 = *((_OWORD *)a2 + 1);
  v3 = (uint64_t *)((char *)this + 72);
  v4 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 9, &v37);
  v5 = (uint64_t *)*((_QWORD *)this + 9);
  if (v5)
    v5 += 3 * *((unsigned int *)v5 - 1);
  if (v5 != v4)
  {
    v35 = v4;
    v36 = WebKit::WebPage::videoPresentationManager(*((WebKit::WebPage **)this + 3));
    WebKit::VideoPresentationManager::willRemoveLayerForID(v36, v35[2]);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::remove(v3, v35);
  }
  v6 = (uint64_t **)((char *)this + 32);
  v7 = *((_QWORD *)this + 4);
  if (!v7)
    goto LABEL_6;
  v18 = *(_DWORD *)(v7 - 8);
  v38 = -1640531527;
  v39 = 0;
  v40 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v38, &v37);
  v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v38) & v18;
  v20 = (uint64_t *)(v7 + 96 * v19);
  v21 = *v20;
  v22 = v20[1];
  if (*v20 == (_QWORD)v37 && v22 == *((_QWORD *)&v37 + 1))
  {
LABEL_34:
    v26 = *v6;
    if (!*v6)
    {
LABEL_40:
      if (v26 != v20)
      {
        *(_OWORD *)v20 = xmmword_1978CF7D0;
        v28 = *((unsigned int *)v20 + 22);
        if ((_DWORD)v28 != -1)
          ((void (*)(unsigned int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v28])(&v38, v20 + 9);
        v29 = -1;
        *((_DWORD *)v20 + 22) = -1;
        ++*((_DWORD *)*v6 - 4);
        v30 = *v6;
        if (*v6)
          v29 = *((_DWORD *)v30 - 3) - 1;
        *((_DWORD *)v30 - 3) = v29;
        v31 = *v6;
        if (*v6)
        {
          v32 = 6 * *((_DWORD *)v31 - 3);
          v33 = *((_DWORD *)v31 - 1);
          if (v32 < v33 && v33 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)this + 4, v33 >> 1, 0);
        }
      }
      goto LABEL_6;
    }
LABEL_39:
    v26 += 12 * *((unsigned int *)v26 - 1);
    if (v26 == v20)
      goto LABEL_6;
    goto LABEL_40;
  }
  v24 = 1;
  while (v21 | v22)
  {
    v19 = (v19 + v24) & v18;
    v20 = (uint64_t *)(v7 + 96 * v19);
    v21 = *v20;
    v22 = v20[1];
    ++v24;
    if (*v20 == (_QWORD)v37 && v22 == *((_QWORD *)&v37 + 1))
      goto LABEL_34;
  }
  v26 = *v6;
  if (*v6)
  {
    v20 = &v26[12 * *((unsigned int *)v26 - 1)];
    goto LABEL_39;
  }
LABEL_6:
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 7, &v37);
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v10 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
    if (v10 == v8)
      goto LABEL_13;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v10 = 0;
  }
  if (v10 != v8)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)this + 7, v8);
LABEL_13:
  v11 = (uint64_t *)((char *)this + 40);
  v12 = *((unsigned int *)this + 13);
  if ((_DWORD)v12 == *((_DWORD *)this + 12))
  {
    v27 = (__int128 *)WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v37);
    v12 = *((unsigned int *)this + 13);
    v13 = *((_QWORD *)this + 5);
    v14 = *v27;
  }
  else
  {
    v13 = *v11;
    v14 = v37;
  }
  *(_OWORD *)(v13 + 16 * v12) = v14;
  ++*((_DWORD *)this + 13);
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 8, &v37);
  v16 = *((_QWORD *)this + 8);
  if (v16)
  {
    v17 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
    if (v17 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v17 = 0;
  }
  if (v17 != result)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)this + 8, result);
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::LockHistory>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v20;
        v11 = *v20;
        v10 = v20[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v10 = v1;
    v11 = 0;
LABEL_8:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v19 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v19;
        v2 = *v19;
        v1 = v19[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    v7 = 1;
    goto LABEL_5;
  }
LABEL_9:
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (v6)
  {
    v18 = a1;
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
    LODWORD(v6) = 0;
    v7 = 0;
    a1 = v18;
  }
  else
  {
    v7 = 0;
  }
LABEL_5:
  v8 = v6 | (v7 << 8);
  if (v8 <= 0xFF)
  {
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v15)
      {
        v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
        return v17;
      }
    }
  }
  return v8;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<__CFDictionary const*>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFDictionary const*>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WebKit::CoreIPCCFType **v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WebKit::CoreIPCCFType **v9;
  char v10;

  IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>(a1, (uint64_t)&v9);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCFDictionary::createCFDictionary(&v9, &v8);
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v10)
  {
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      v6 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
      WTF::fastFree(v6, v7);
    }
  }
}

void sub_196C29104(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    if (a11)
    {
      v13 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a11, a2);
      WTF::fastFree(v13, v14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<WTF::RetainPtr<void const*>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::RetainPtr<void const*>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WTF::RetainPtr<void const*>,void>::decode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v7, a1);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    result = WebKit::CoreIPCCFType::toCFType(&v6, (WebKit::CoreIPCCFType *)&v7);
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
      return (uint64_t *)std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v7, v5);
  }
  return result;
}

void sub_196C2920C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v13;

  if (a12)
  {
    v13 = a11;
    a11 = 0;
    if (v13)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a11, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WTF::RetainPtr<__CFNumber const*>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  result = IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, v6);
  if (*a1)
  {
    if (v6[16])
    {
      result = (uint64_t)WebKit::CoreIPCNumber::createCFNumber((WebKit::CoreIPCNumber *)v6);
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCNumber>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::decode(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  char v7;

  result = IPC::Decoder::decode<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, (uint64_t)&v6);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 16) - *(_QWORD *)result;
  if (v3 <= v5)
  {
    v24 = 0;
    v25 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v26 = *(_QWORD *)(result + 24);
    if (v26)
    {
      v35 = (uint64_t *)result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        result = (uint64_t)v35;
        v25 = *v35;
        v24 = v35[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_34;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  v7 = v4 + v5 + 1;
  *(_QWORD *)(result + 16) = v7;
  if (!v4)
  {
    v24 = v3;
    v25 = 0;
LABEL_34:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    result = *(_QWORD *)(result + 24);
    if (result && v24)
      result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v25, v24);
    goto LABEL_38;
  }
  v8 = *v6;
  if (v8 >= 0xC)
    goto LABEL_38;
  switch(v8)
  {
    case 0u:
      result = IPC::Decoder::decode<char>((uint64_t *)result);
      if ((unsigned __int16)result > 0xFFu)
      {
        *(_BYTE *)a2 = result;
        *(_DWORD *)(a2 + 8) = 0;
        goto LABEL_18;
      }
      goto LABEL_38;
    case 1u:
      result = IPC::Decoder::decode<unsigned char>((_QWORD *)result);
      if ((unsigned __int16)result > 0xFFu)
      {
        *(_BYTE *)a2 = result;
        v13 = 1;
        *(_DWORD *)(a2 + 8) = 1;
        goto LABEL_19;
      }
      goto LABEL_38;
    case 2u:
      result = IPC::Decoder::decode<short>((uint64_t *)result);
      if ((result & 0xFF0000) != 0)
      {
        *(_WORD *)a2 = result;
        v12 = 2;
        goto LABEL_17;
      }
      goto LABEL_38;
    case 3u:
      result = IPC::Decoder::decode<unsigned short>((_QWORD *)result);
      if ((result & 0xFF0000) != 0)
      {
        *(_WORD *)a2 = result;
        v12 = 3;
        goto LABEL_17;
      }
      goto LABEL_38;
    case 4u:
      v20 = ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
      if (v3 >= v20 && v3 - v20 > 3)
      {
        v22 = (int *)(v4 + v20);
        v23 = *v22;
        *(_QWORD *)(result + 16) = v22 + 1;
        *(_DWORD *)a2 = v23;
        v12 = 4;
        goto LABEL_17;
      }
      goto LABEL_39;
    case 5u:
      result = IPC::Decoder::decode<unsigned int>((_QWORD *)result);
      if ((result & 0xFF00000000) != 0)
      {
        *(_DWORD *)a2 = result;
        v12 = 5;
        goto LABEL_17;
      }
      goto LABEL_38;
    case 6u:
      result = IPC::Decoder::decode<long>((_QWORD *)result);
      if (v30)
      {
        *(_QWORD *)a2 = result;
        v12 = 6;
        goto LABEL_17;
      }
      goto LABEL_38;
    case 7u:
      result = IPC::Decoder::decode<unsigned long long>((_QWORD *)result);
      if (v31)
      {
        *(_QWORD *)a2 = result;
        v12 = 7;
        goto LABEL_17;
      }
      goto LABEL_38;
    case 8u:
      result = IPC::Decoder::decode<long long>((uint64_t *)result);
      if (v32)
      {
        *(_QWORD *)a2 = result;
        v12 = 8;
        goto LABEL_17;
      }
      goto LABEL_38;
  }
  if (v8 != 9)
  {
    if (v8 == 10)
    {
      v14 = ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
      if (v3 >= v14 && v3 - v14 > 3)
      {
        v15 = (int *)(v4 + v14);
        v16 = *v15;
        *(_QWORD *)(result + 16) = v15 + 1;
        *(_DWORD *)a2 = v16;
        v12 = 10;
        goto LABEL_17;
      }
LABEL_37:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v27 = *(_QWORD *)(result + 24);
      if (v27)
      {
        v33 = (uint64_t *)result;
        (*(void (**)(_QWORD))(*(_QWORD *)v27 + 16))(*(_QWORD *)(result + 24));
        v28 = *v33;
        v29 = v33[1];
        result = v33[3];
        *v33 = 0;
        v33[1] = 0;
        if (result)
          goto LABEL_61;
      }
      goto LABEL_38;
    }
    v17 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v17 && v3 - v17 > 7)
    {
      v18 = (uint64_t *)(v4 + v17);
      v19 = *v18;
      *(_QWORD *)(result + 16) = v18 + 1;
      *(_QWORD *)a2 = v19;
      v12 = 11;
      goto LABEL_17;
    }
LABEL_39:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v34 = (uint64_t *)result;
    result = *(_QWORD *)(result + 24);
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v28 = *v34;
      v29 = v34[1];
      result = v34[3];
      *v34 = 0;
      v34[1] = 0;
      if (result)
      {
LABEL_61:
        if (v29)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
      }
    }
LABEL_38:
    v13 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_19;
  }
  v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v3 < v9 || v3 - v9 <= 7)
    goto LABEL_37;
  v10 = (uint64_t *)(v4 + v9);
  v11 = *v10;
  *(_QWORD *)(result + 16) = v10 + 1;
  *(_QWORD *)a2 = v11;
  v12 = 9;
LABEL_17:
  *(_DWORD *)(a2 + 8) = v12;
LABEL_18:
  v13 = 1;
LABEL_19:
  *(_BYTE *)(a2 + 16) = v13;
  return result;
}

WTF::StringImpl *WebKit::CoreIPCNumber::createCFNumber(WebKit::CoreIPCNumber *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1 == -1)
  {
    v3 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (WTF::StringImpl *)((uint64_t (*)(char **, WebKit::CoreIPCNumber *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit13CoreIPCNumber14createCFNumberEvEUlRKcE_JZNKS9_14createCFNumberEvEUlRKhE_ZNKS9_14createCFNumberEvEUlRKsE_ZNKS9_14createCFNumberEvEUlRKtE_ZNKS9_14createCFNumberEvEUlRKiE_ZNKS9_14createCFNumberEvEUlRKjE_ZNKS9_14createCFNumberEvEUlRKlE_ZNKS9_14createCFNumberEvEUlRKmE_ZNKS9_14createCFNumberEvEUlRKxE_ZNKS9_14createCFNumberEvEUlRKyE_ZNKS9_14createCFNumberEvEUlRKfE_ZNKS9_14createCFNumberEvEUlRKdE_EEEEEJRKNS0_6__implIJchstijlmxyfdEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::RetainPtr<__CFString const*>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::RetainPtr<__CFString const*>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    result = (WTF::StringImpl *)WTF::String::createCFString((WTF::String *)&v7);
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C2982C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE v22[56];

  v4 = a1[1];
  v5 = (char *)*a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a1;
        v10 = a1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = &v5[v6];
  a1[2] = (uint64_t)(v8 + 8);
  if (!v5)
  {
    v10 = v4;
    v11 = 0;
LABEL_13:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (!v13)
      goto LABEL_14;
    if (!v10)
    {
      v4 = 0;
      v5 = 0;
      goto LABEL_14;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
    v5 = (char *)*a1;
    if (!*a1)
    {
      v4 = a1[1];
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if ((unint64_t)(*(_QWORD *)v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14 && v4)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 16))(v14, v5);
    IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v22);
    if (!*a1)
      goto LABEL_17;
    goto LABEL_16;
  }
  IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v22);
  if (!*a1)
  {
LABEL_17:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v5);
  }
  if (!v22[48])
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  WebCore::DisplayList::DrawGlyphs::DrawGlyphs();
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + 48) = v21;
  *(_BYTE *)(a2 + 56) = 1;
  return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v5);
}

void sub_196C29A00(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::PositionedGlyphs>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C29A68(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v5;
  char *v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF **v12;
  WTF *v13;
  __n128 v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  WTF *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  char v51;
  __n128 v52;
  char v53;
  WTF *v54;
  uint64_t v55;

  v5 = IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v49, a1);
  v8 = a1[1];
  v9 = *a1;
  v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    v12 = (WTF **)(v9 + v10);
    a1[2] = (uint64_t)(v12 + 1);
    if (!v9)
    {
      v31 = v8;
      v32 = 0;
      goto LABEL_44;
    }
    v2 = (unint64_t)*v12;
    v54 = 0;
    v55 = 0;
    if (v2 >= 0x10000)
    {
      do
      {
        v5 = (uint64_t)IPC::Decoder::decode<CGSize>((uint64_t)&v52, a1, v7);
        if (!v53)
          goto LABEL_38;
        v41 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          v7 = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>((uint64_t)&v54, (unint64_t)&v52);
        }
        else
        {
          v7 = v52;
          *((__n128 *)v54 + HIDWORD(v55)) = v52;
          HIDWORD(v55) = v41 + 1;
        }
        --v2;
      }
      while (v2);
      v17 = v55;
      v16 = HIDWORD(v55);
      v2 = (unint64_t)v54;
      if (v55 > HIDWORD(v55))
      {
        if (HIDWORD(v55))
        {
          v5 = WTF::fastRealloc(v54, (void *)(16 * HIDWORD(v55)));
          v2 = v5;
          v17 = v16;
        }
        else if (v54)
        {
          v54 = 0;
          v5 = WTF::fastFree((WTF *)v2, v6);
          v16 = 0;
          v17 = 0;
          v2 = 0;
        }
        else
        {
          v16 = 0;
        }
      }
    }
    else
    {
      if (v2)
      {
        v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
        LODWORD(v55) = v2;
        v54 = v13;
        goto LABEL_10;
      }
      v16 = 0;
      v17 = 0;
    }
LABEL_15:
    if (!*a1)
      goto LABEL_42;
    if (!v51)
      goto LABEL_56;
    if (HIDWORD(v50) != v16)
      goto LABEL_42;
    v5 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a1);
    v18 = a1[1];
    v20 = v19;
    if (!v19)
    {
      v35 = *a1;
      *a1 = 0;
      a1[1] = 0;
      v36 = a1[3];
      if (!v36 || !v18)
      {
        v18 = 0;
        v6 = (char *)*a1;
        goto LABEL_49;
      }
      v47 = v5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v35);
      v5 = v47;
      v18 = a1[1];
      v20 = 0;
    }
    v6 = (char *)*a1;
    v21 = a1[2] - *a1;
    if (v18 > v21)
    {
      v22 = (unsigned __int8 *)&v6[v21];
      a1[2] = (uint64_t)(v22 + 1);
      if (v6)
      {
        LODWORD(v22) = *v22;
        if (v22 < 4)
        {
          v23 = 0;
          goto LABEL_23;
        }
LABEL_52:
        v6 = (char *)*a1;
        v40 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v22 = (unsigned __int8 *)a1[3];
        if (v22)
        {
          v42 = v20;
          v45 = v5;
          if (!v40)
          {
            LOBYTE(v22) = 0;
            v23 = 1;
LABEL_23:
            if (*a1)
            {
              if (!v20 || v23)
                goto LABEL_56;
              v24 = v49;
              v25 = v50;
              v49 = 0;
              v50 = 0;
              *(_QWORD *)a2 = v24;
              *(_DWORD *)(a2 + 8) = v25;
              *(_DWORD *)(a2 + 12) = v16;
              *(_QWORD *)(a2 + 16) = v2;
              *(_DWORD *)(a2 + 24) = v17;
              *(_DWORD *)(a2 + 28) = v16;
              *(_QWORD *)(a2 + 32) = v5;
              v26 = 1;
              *(_BYTE *)(a2 + 40) = (_BYTE)v22;
              v2 = 0;
              goto LABEL_27;
            }
LABEL_42:
            v26 = 0;
            *(_BYTE *)a2 = 0;
LABEL_27:
            *(_BYTE *)(a2 + 48) = v26;
            if (v2)
              WTF::fastFree((WTF *)v2, v6);
            goto LABEL_29;
          }
          (*(void (**)(unsigned __int8 *, char *))(*(_QWORD *)v22 + 16))(v22, v6);
          v20 = v42;
          v5 = v45;
          LOBYTE(v22) = 0;
        }
        v23 = 1;
        goto LABEL_23;
      }
      v38 = 0;
LABEL_51:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39)
      {
        v43 = v20;
        v46 = v5;
        if (v18)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v38);
        v20 = v43;
        v5 = v46;
      }
      goto LABEL_52;
    }
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      v44 = v20;
      v48 = v5;
      if (v18)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v37 + 16))(v37, v6);
        v20 = v44;
        v5 = v48;
        v38 = *a1;
        v18 = a1[1];
      }
      else
      {
        v38 = 0;
      }
    }
    else
    {
      v38 = 0;
      v18 = 0;
    }
    goto LABEL_51;
  }
  v31 = 0;
  v32 = 0;
  *a1 = 0;
  a1[1] = 0;
  v33 = a1[3];
  if (v33)
  {
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v9, v8);
      v32 = *a1;
      v31 = a1[1];
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (v34 && v31)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
  while (1)
  {
    v6 = (char *)*a1;
    v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (!v30)
      break;
    if (!v29)
      break;
    v5 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v30 + 16))(v30, v6);
    if (!*a1)
      break;
LABEL_56:
    __break(1u);
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v6);
      if (!v53)
        break;
      do
      {
        v15 = HIDWORD(v55);
        if (HIDWORD(v55) == (_DWORD)v55)
        {
          v14 = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>((uint64_t)&v54, (unint64_t)&v52);
        }
        else
        {
          v14 = v52;
          *((__n128 *)v54 + HIDWORD(v55)) = v52;
          HIDWORD(v55) = v15 + 1;
        }
        if (!--v2)
        {
          v2 = (unint64_t)v54;
          v17 = v55;
          v16 = HIDWORD(v55);
          goto LABEL_15;
        }
LABEL_10:
        v5 = (uint64_t)IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v52, v14);
      }
      while (v53);
      v6 = (char *)*a1;
      v27 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v5 = a1[3];
    }
    while (v5 && v27 != 0);
LABEL_38:
    if (v54)
      WTF::fastFree(v54, v6);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
LABEL_29:
  if (v51)
  {
    if (v49)
      WTF::fastFree(v49, v6);
  }
}

_QWORD *IPC::Decoder::decode<CGSize>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<CGSize,void>::decode(a2, a1, a3);
  if (!*(_BYTE *)(a1 + 16))
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v6);
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unsigned __int8 *v56;
  unsigned int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  _OWORD v130[5];
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v136;
  unsigned __int8 v137;
  WTF::StringImpl *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v160 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v161 = v4;
  v129 = v4;
  v158 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v159 = v5;
  v128 = v5;
  v156 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v157 = v6;
  v127 = v6;
  v154 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v155 = v7;
  v126 = v7;
  v152 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v153 = v8;
  v125 = v8;
  v150 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v151 = v9;
  v124 = v9;
  v148 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v149 = v10;
  v123 = v10;
  v146 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v147 = v11;
  v122 = v11;
  v144 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v145 = v12;
  v121 = v12;
  v142 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v143 = v13;
  v120 = v13;
  v140 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v141 = v14;
  v119 = v14;
  IPC::Decoder::decode<WTF::String>(a1, &v138);
  result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::decode<unsigned short>(a1);
  v118 = (int)result;
  v16 = a1[1];
  v17 = *a1;
  v18 = a1[2] - *a1;
  if (v16 <= v18)
    goto LABEL_88;
  v19 = (unsigned __int8 *)(v17 + v18);
  v20 = v17 + v18 + 1;
  a1[2] = v20;
  if (!v17)
  {
    v63 = v16;
    v64 = 0;
    goto LABEL_89;
  }
  v21 = *v19;
  if (v21 >= 2)
    goto LABEL_91;
  v117 = 0;
LABEL_5:
  v22 = v20 - v17;
  if (v16 <= v22)
  {
    i = 0;
    v110 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v110 && v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
      v17 = *a1;
      i = a1[1];
    }
    else
    {
      v17 = 0;
    }
    goto LABEL_93;
  }
  v23 = (unsigned __int8 *)(v17 + v22);
  v24 = v17 + v22 + 1;
  a1[2] = v24;
  if (v17)
  {
    v25 = *v23;
    if (v25 >= 2)
      goto LABEL_95;
    v116 = 0;
LABEL_9:
    v26 = v24 - v17;
    if (v16 <= v26)
    {
      v71 = 0;
      v109 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v109 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
        v17 = *a1;
        v71 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_97;
    }
    v27 = (unsigned __int8 *)(v17 + v26);
    v28 = v17 + v26 + 1;
    a1[2] = v28;
    if (!v17)
    {
      v71 = v16;
      goto LABEL_97;
    }
    v29 = *v27;
    if (v29 >= 2)
      goto LABEL_99;
    v115 = 0;
LABEL_13:
    v30 = v28 - v17;
    if (v16 <= v30)
    {
      v74 = 0;
      v108 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v108 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
        v17 = *a1;
        v74 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_101;
    }
    v31 = (unsigned __int8 *)(v17 + v30);
    v32 = v17 + v30 + 1;
    a1[2] = v32;
    if (!v17)
    {
      v74 = v16;
      goto LABEL_101;
    }
    v33 = *v31;
    if (v33 >= 2)
      goto LABEL_103;
    v114 = 0;
LABEL_17:
    v34 = v32 - v17;
    if (v16 <= v34)
    {
      v77 = 0;
      v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v107 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
        v17 = *a1;
        v77 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_105;
    }
    v35 = (unsigned __int8 *)(v17 + v34);
    v36 = v17 + v34 + 1;
    a1[2] = v36;
    if (!v17)
    {
      v77 = v16;
      goto LABEL_105;
    }
    v37 = *v35;
    if (v37 >= 2)
      goto LABEL_107;
    v113 = 0;
LABEL_21:
    v38 = v36 - v17;
    if (v16 <= v38)
    {
      v80 = 0;
      v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v106 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
        v17 = *a1;
        v80 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_109;
    }
    v39 = (unsigned __int8 *)(v17 + v38);
    v40 = v17 + v38 + 1;
    a1[2] = v40;
    if (!v17)
    {
      v80 = v16;
      goto LABEL_109;
    }
    v41 = *v39;
    if (v41 >= 2)
      goto LABEL_111;
    v112 = 0;
LABEL_25:
    v42 = v40 - v17;
    if (v16 <= v42)
    {
      v83 = 0;
      v105 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v105 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105);
        v17 = *a1;
        v83 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_113;
    }
    v43 = (unsigned __int8 *)(v17 + v42);
    v44 = v17 + v42 + 1;
    a1[2] = v44;
    if (!v17)
    {
      v83 = v16;
      goto LABEL_113;
    }
    v45 = *v43;
    if (v45 >= 2)
      goto LABEL_115;
    v111 = 0;
LABEL_29:
    v46 = v44 - v17;
    if (v16 <= v46)
    {
      v86 = 0;
      v104 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v104 && v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
        v17 = *a1;
        v86 = a1[1];
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_117;
    }
    v47 = (unsigned __int8 *)(v17 + v46);
    a1[2] = (uint64_t)(v47 + 1);
    if (!v17)
    {
      v86 = v16;
      goto LABEL_117;
    }
    if (*v47 >= 2u)
      goto LABEL_119;
    v48 = 0;
LABEL_33:
    if (v16 > a1[2] - v17)
    {
      v49 = (unsigned __int8 *)a1[2];
      a1[2] = (uint64_t)(v49 + 1);
      if (v17)
      {
        if (*v49 < 6u)
        {
          v50 = 0;
          goto LABEL_37;
        }
        goto LABEL_126;
      }
      v90 = 0;
      goto LABEL_124;
    }
    goto LABEL_122;
  }
  for (i = v16; ; i = 0)
  {
LABEL_93:
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69 && i)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v17, i);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_95:
    *a1 = 0;
    a1[1] = 0;
    v70 = a1[3];
    if (v70 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v17);
      v17 = *a1;
      v16 = a1[1];
      v116 = 1;
      v24 = a1[2];
      goto LABEL_9;
    }
    v71 = 0;
    v17 = 0;
    v116 = 1;
LABEL_97:
    *a1 = 0;
    a1[1] = 0;
    v72 = a1[3];
    if (v72 && v71)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v17, v71);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_99:
    *a1 = 0;
    a1[1] = 0;
    v73 = a1[3];
    if (v73 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v17);
      v17 = *a1;
      v16 = a1[1];
      v115 = 1;
      v28 = a1[2];
      goto LABEL_13;
    }
    v74 = 0;
    v17 = 0;
    v115 = 1;
LABEL_101:
    *a1 = 0;
    a1[1] = 0;
    v75 = a1[3];
    if (v75 && v74)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v17, v74);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_103:
    *a1 = 0;
    a1[1] = 0;
    v76 = a1[3];
    if (v76 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v17);
      v17 = *a1;
      v16 = a1[1];
      v114 = 1;
      v32 = a1[2];
      goto LABEL_17;
    }
    v77 = 0;
    v17 = 0;
    v114 = 1;
LABEL_105:
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (v78 && v77)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v17, v77);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_107:
    *a1 = 0;
    a1[1] = 0;
    v79 = a1[3];
    if (v79 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v17);
      v17 = *a1;
      v16 = a1[1];
      v113 = 1;
      v36 = a1[2];
      goto LABEL_21;
    }
    v80 = 0;
    v17 = 0;
    v113 = 1;
LABEL_109:
    *a1 = 0;
    a1[1] = 0;
    v81 = a1[3];
    if (v81 && v80)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v17, v80);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_111:
    *a1 = 0;
    a1[1] = 0;
    v82 = a1[3];
    if (v82 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v17);
      v17 = *a1;
      v16 = a1[1];
      v112 = 1;
      v40 = a1[2];
      goto LABEL_25;
    }
    v83 = 0;
    v17 = 0;
    v112 = 1;
LABEL_113:
    *a1 = 0;
    a1[1] = 0;
    v84 = a1[3];
    if (v84 && v83)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v17, v83);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_115:
    *a1 = 0;
    a1[1] = 0;
    v85 = a1[3];
    if (v85 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v17);
      v17 = *a1;
      v16 = a1[1];
      v111 = 1;
      v44 = a1[2];
      goto LABEL_29;
    }
    v86 = 0;
    v17 = 0;
    v111 = 1;
LABEL_117:
    *a1 = 0;
    a1[1] = 0;
    v87 = a1[3];
    if (v87 && v86)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v17, v86);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_119:
    *a1 = 0;
    a1[1] = 0;
    v88 = a1[3];
    if (v88)
    {
      if (v16)
      {
        result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v17);
        v17 = *a1;
        v16 = a1[1];
        v48 = 1;
        goto LABEL_33;
      }
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v48 = 1;
LABEL_122:
    *a1 = 0;
    a1[1] = 0;
    v89 = a1[3];
    if (v89)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v17);
        v90 = *a1;
        v16 = a1[1];
      }
      else
      {
        v90 = 0;
      }
    }
    else
    {
      v90 = 0;
      v16 = 0;
    }
LABEL_124:
    *a1 = 0;
    a1[1] = 0;
    v91 = a1[3];
    if (v91)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v90);
        v16 = a1[1];
      }
    }
    else
    {
      v16 = 0;
    }
LABEL_126:
    v92 = *a1;
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result)
    {
      if (v16)
      {
        result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, uint64_t))(*(_QWORD *)result + 16))(result, v92);
        v16 = a1[1];
      }
    }
    else
    {
      v16 = 0;
    }
    v50 = 1;
LABEL_37:
    v51 = (WTF::StringImpl *)*a1;
    v52 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v16 < v52 || v16 - v52 <= 7)
    {
      v93 = 0;
      v94 = 0;
      *a1 = 0;
      a1[1] = 0;
      v95 = a1[3];
      if (v95)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
          v94 = *a1;
          v93 = a1[1];
        }
        else
        {
          v93 = 0;
          v94 = 0;
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)v51 + v52 + 8;
      if (v51)
      {
        v53 = 0;
        goto LABEL_41;
      }
      v93 = v16;
      v94 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result && v93)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v94, v93);
      v51 = (WTF::StringImpl *)*a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v51 = 0;
    }
    v53 = 1;
LABEL_41:
    v54 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v51;
    if (v16 < v54 || v16 - v54 <= 7)
    {
      v96 = 0;
      v97 = 0;
      *a1 = 0;
      a1[1] = 0;
      v98 = a1[3];
      if (v98)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
          v97 = *a1;
          v96 = a1[1];
        }
        else
        {
          v96 = 0;
          v97 = 0;
        }
      }
    }
    else
    {
      a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v51)
      {
        v55 = 0;
        goto LABEL_45;
      }
      v96 = v16;
      v97 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v99 = a1[3];
    if (!v99 || !v96)
    {
      v51 = 0;
      v16 = 0;
      v55 = 1;
LABEL_137:
      *a1 = 0;
      a1[1] = 0;
      v100 = a1[3];
      if (v100)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v100 + 16))(v100, v51);
          v101 = *a1;
          v16 = a1[1];
        }
        else
        {
          v101 = 0;
        }
      }
      else
      {
        v101 = 0;
        v16 = 0;
      }
      goto LABEL_139;
    }
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97, v96);
    v51 = (WTF::StringImpl *)*a1;
    v16 = a1[1];
    v55 = 1;
LABEL_45:
    if (v16 <= a1[2] - (uint64_t)v51)
      goto LABEL_137;
    v56 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v56 + 1);
    if (!v51)
    {
      v101 = 0;
LABEL_139:
      *a1 = 0;
      a1[1] = 0;
      v102 = a1[3];
      if (v102)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v101);
          v51 = (WTF::StringImpl *)*a1;
          v16 = a1[1];
        }
        else
        {
          v51 = 0;
        }
      }
      else
      {
        v51 = 0;
        v16 = 0;
      }
LABEL_141:
      *a1 = 0;
      a1[1] = 0;
      v103 = a1[3];
      if (v103 && v16)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v103 + 16))(v103, v51);
      LOBYTE(v136) = 0;
      v137 = 0;
      goto LABEL_143;
    }
    v57 = *v56;
    if (v57 >= 2)
      goto LABEL_141;
    if (!v57)
    {
      v136 = 0;
LABEL_50:
      v58 = 1;
      v137 = 1;
      goto LABEL_51;
    }
    result = IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::decode((uint64_t)v130, a1);
    LOBYTE(v136) = 0;
    v137 = 0;
    if (BYTE8(v130[0]))
    {
      v57 = 0;
      v136 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)&v130[0];
      goto LABEL_50;
    }
LABEL_143:
    v51 = (WTF::StringImpl *)*a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result && v16)
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v51);
    v58 = 0;
    v57 = 1;
LABEL_51:
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 128) = 0;
      goto LABEL_78;
    }
    if (v129
      && v128
      && v127
      && v126
      && v125
      && v124
      && v123
      && v122
      && v121
      && v120
      && v119
      && v139
      && (v118 & 0xFF0000) != 0
      && !v117
      && !v116
      && !v115
      && !v114
      && !v113
      && !v112
      && !v111
      && !v48
      && !v50
      && !v53
      && !v55
      && !v57)
    {
      break;
    }
    __break(1u);
LABEL_88:
    v63 = 0;
    v64 = 0;
    *a1 = 0;
    a1[1] = 0;
    v65 = a1[3];
    if (v65)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
        v64 = *a1;
        v63 = a1[1];
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
    }
LABEL_89:
    *a1 = 0;
    a1[1] = 0;
    v66 = a1[3];
    if (v66 && v63)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v64, v63);
      v17 = *a1;
      v16 = a1[1];
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
LABEL_91:
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67 && v16)
    {
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v17);
      v17 = *a1;
      v16 = a1[1];
      v117 = 1;
      v20 = a1[2];
      goto LABEL_5;
    }
    v17 = 0;
    v117 = 1;
  }
  result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WebCore::NetworkLoadMetrics::NetworkLoadMetrics();
  v59 = v130[3];
  *(_OWORD *)(a2 + 32) = v130[2];
  *(_OWORD *)(a2 + 48) = v59;
  *(_OWORD *)(a2 + 64) = v130[4];
  v60 = v130[1];
  *(_OWORD *)a2 = v130[0];
  *(_OWORD *)(a2 + 16) = v60;
  v61 = v132;
  *(_QWORD *)(a2 + 80) = v131;
  *(_QWORD *)(a2 + 88) = v61;
  *(_OWORD *)(a2 + 96) = v133;
  v62 = v135;
  *(_QWORD *)(a2 + 112) = v134;
  *(_QWORD *)(a2 + 120) = v62;
  *(_BYTE *)(a2 + 128) = 1;
  v58 = v137;
LABEL_78:
  if (v58)
  {
    result = v136;
    v136 = 0;
    if (result)
      result = WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result);
  }
  if (v139)
  {
    result = v138;
    v138 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WTF::StringImpl::destroy(result, v51);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C2AE10(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a56, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::MonotonicTime>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (!v2)
    {
      v8 = v1;
      v9 = 0;
      goto LABEL_10;
    }
    return *(_QWORD *)v5;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
      goto LABEL_14;
LABEL_10:
    while (1)
    {
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        break;
      v12 = a1;
      if (!v8)
        return 0;
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v2 = *v12;
      if (!*v12)
        return 0;
      __break(1u);
LABEL_14:
      v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v13;
        v9 = *v13;
        v8 = v13[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  return v6;
}

_QWORD *IPC::ArgumentCoder<CGSize,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  int v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (unint64_t *)(v5 + v6);
    result[2] = v8 + 1;
    if (v5)
    {
      v9 = 0;
      a3.n128_u64[0] = *v8;
      goto LABEL_8;
    }
    v15 = v4;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    *result = 0;
    result[1] = 0;
    v3 = result[3];
    if (v3)
      goto LABEL_28;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    a3.n128_u64[0] = 0;
    v3 = result[3];
    if (v3)
    {
      v22 = result;
      v25 = a2;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v3 + 16))(v3, v16, v15, 0.0);
        result = v22;
        a2 = v25;
        v5 = *v22;
        v4 = v22[1];
        v9 = 1;
        a3.n128_u64[0] = 0;
      }
      else
      {
        v4 = 0;
        v5 = 0;
        v9 = 1;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v9 = 1;
    }
LABEL_8:
    v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 < v10 || v4 - v10 <= 7)
      break;
    v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v12 + 1;
    if (!v5)
    {
      v17 = v4;
      v18 = 0;
      goto LABEL_21;
    }
    if (!v9)
    {
      v13 = *v12;
      *(_QWORD *)a2 = a3.n128_u64[0];
      *(_QWORD *)(a2 + 8) = v13;
      v14 = 1;
      goto LABEL_16;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    v23 = result;
    v27 = a2;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      result = v23;
      a2 = v27;
      v16 = *v23;
      v15 = v23[1];
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  v17 = 0;
  v18 = 0;
  *result = 0;
  result[1] = 0;
  v19 = result[3];
  if (v19)
  {
    v24 = result;
    v28 = a2;
    if (v4)
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v19 + 16))(v19, a3);
      result = v24;
      a2 = v28;
      v18 = *v24;
      v17 = v24[1];
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
  }
LABEL_21:
  *result = 0;
  result[1] = 0;
  v20 = result[3];
  if (v20)
  {
    if (v17)
    {
      v21 = result;
      v26 = a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t, __n128))(*(_QWORD *)v20 + 16))(result[3], v18, v17, a3);
      a2 = v26;
      if (*v21)
        goto LABEL_27;
    }
  }
  v14 = 0;
  *(_BYTE *)a2 = 0;
LABEL_16:
  *(_BYTE *)(a2 + 16) = v14;
  return result;
}

void WebKit::WebValidationMessageClient::updateValidationBubbleStateIfNeeded(WebKit::WebValidationMessageClient *this)
{
  uint64_t v1;
  WebCore::Element *v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(WebCore::Element **)(v1 + 8);
    if (v2)
    {
      v5 = WebCore::Element::boundingBoxInRootViewCoordinates(v2);
      v6 = *((_DWORD *)this + 6) == (_DWORD)v5 && *((_DWORD *)this + 7) == HIDWORD(v5);
      if (!v6 || (*((_DWORD *)this + 8) == v3 ? (v7 = *((_DWORD *)this + 9) == v4) : (v7 = 0), !v7))
        WebKit::WebValidationMessageClient::hideValidationMessage(this, *(const WebCore::Element **)(*((_QWORD *)this + 2) + 8));
    }
  }
}

unint64_t IPC::Decoder::decode<std::tuple<double>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<double>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(WebKit::RemoteLayerBackingStoreCollection *this)
{
  int v2;
  int v3;
  void *v4;
  __int16 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile((uint64_t *)this, 2, 0);
  v11 = 0;
  v12 = 0;
  v3 = WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile((uint64_t *)this, 2u, 0, (uint64_t)&v11);
  if (HIDWORD(v12))
  {
    if (v3)
      v5 = 256;
    else
      v5 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = &off_1E34B8C38;
    *(_WORD *)(v8 + 8) = v5 | v2;
    *(_QWORD *)(v8 + 16) = v6;
    v10 = v8;
    WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((_QWORD *)this + 2) + 24), (uint64_t)&v11, &v10, 0);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else if ((v2 & v3) == 1 && (*((_QWORD *)this + 15) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88));
  }
  return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
}

void sub_196C2B458(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile(uint64_t *a1, char a2, char a3)
{
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t i;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v7 = v6;
  v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, a1 + 3, v8, v9);
  v10 = (_QWORD *)a1[3];
  if (v10)
  {
    v11 = *((unsigned int *)v10 - 1);
    v12 = &v10[v11];
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, a1 + 3, v12, &v10[v11]);
  v13 = v28;
  v14 = v26;
  v15 = 1;
  while (v13 != v14)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
      v15 &= WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)a1, v16, a2, v7);
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
    v13 = v28;
    v14 = v26;
  }
  v17 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, a1 + 5, v17, v18);
  v19 = (_QWORD *)a1[5];
  if (v19)
  {
    v20 = *((unsigned int *)v19 - 1);
    v21 = &v19[v20];
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, a1 + 5, v21, &v19[v20]);
  for (i = v28; v28 != v26; i = v28)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
      v15 &= WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)a1, v23, a3, v7);
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
  }
  return v15 & 1;
}

uint64_t WebKit::PlatformCALayerRemote::recursiveBuildTransaction(WebKit::PlatformCALayerRemote *this, WebKit::RemoteLayerTreeContext *a2, WebKit::RemoteLayerTreeTransaction *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int8x16_t *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  WebKit::PlatformCALayerRemote *v14;
  uint64_t *v15;
  int8x16_t v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  CALayer *v26;
  double v27;

  while (1)
  {
    v6 = *((_QWORD *)this + 104);
    if (!v6 || *(WebKit::RemoteLayerTreeContext **)(v6 + 8) != a2)
      goto LABEL_56;
    v7 = *((_QWORD *)this + 6);
    if (!v7)
      goto LABEL_45;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7))
      return WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(this);
    v8 = *((_QWORD *)this + 6);
    if (v8)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8))
      {
        v10 = (int8x16_t *)((char *)this + 64);
        v15 = (uint64_t *)((char *)this + 472);
LABEL_20:
        result = *v15;
        goto LABEL_10;
      }
      v9 = (*(uint64_t (**)(_QWORD, WebKit::PlatformCALayerRemote *))(**((_QWORD **)this + 6) + 112))(*((_QWORD *)this + 6), this);
    }
    else
    {
LABEL_45:
      v9 = 0;
    }
    v10 = (int8x16_t *)((char *)this + 64);
    result = *((_QWORD *)this + 59);
    if (result && (v9 & 1) == 0)
    {
      v15 = (uint64_t *)((char *)this + 472);
      *((_QWORD *)this + 59) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *v10 = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x400uLL));
      goto LABEL_20;
    }
LABEL_10:
    if (result
      && *((_BYTE *)this + 656)
      && (result = WebKit::RemoteLayerBackingStore::layerWillBeDisplayed((WebKit::RemoteLayerBackingStore *)result),
          (_DWORD)result))
    {
      v16 = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x400uLL));
      *v10 = v16;
      LOBYTE(v12) = v16.i8[0];
    }
    else
    {
      v12 = v10->i64[0];
      if (!v10->i64[0])
        goto LABEL_12;
    }
    if ((v12 & 0x10) != 0)
    {
      v17 = *((unsigned int *)this + 201);
      v18 = v17;
      if (*((_DWORD *)this + 31) < v17)
      {
        v19 = (_QWORD *)((char *)this + 112);
        v20 = *((unsigned int *)this + 30);
        if (v20 < v17)
        {
          v21 = v20 + (v20 >> 2);
          if (v21 >= 0x10)
            v22 = v21 + 1;
          else
            v22 = 16;
          if (v22 <= v17)
            v23 = *((unsigned int *)this + 201);
          else
            v23 = v22;
          WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 112, v23);
        }
        if (*v19)
        {
          v24 = *((unsigned int *)this + 31);
          if ((_DWORD)v24 != (_DWORD)v17)
            bzero((void *)(*v19 + 16 * v24), ((16 * v17 - 16 * v24 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        v18 = *((_DWORD *)this + 201);
      }
      *((_DWORD *)this + 31) = v17;
      if (v18)
      {
        v25 = 0;
        while (v25 < *((unsigned int *)this + 31))
        {
          *(_OWORD *)(*((_QWORD *)this + 14) + 16 * v25) = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 99) + 8 * v25)
                                                                     + 16);
          if (++v25 >= *((unsigned int *)this + 201))
            goto LABEL_42;
        }
LABEL_56:
        __break(0xC471u);
        JUMPOUT(0x196C2B8B8);
      }
    }
LABEL_42:
    if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 32))(this) == 2)
    {
      if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 32))(this) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x196C2B9DCLL);
      }
      if (!*((_BYTE *)this + 840))
        break;
    }
    result = (uint64_t)WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(a3, this);
LABEL_12:
    if (*((_DWORD *)this + 201))
    {
      v13 = 0;
      do
      {
        v14 = *(WebKit::PlatformCALayerRemote **)(*((_QWORD *)this + 99) + 8 * v13);
        if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)v14 + 32))(v14) - 1 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x196C2B904);
        }
        result = WebKit::PlatformCALayerRemote::recursiveBuildTransaction(v14, a2, a3);
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 201));
    }
    this = (WebKit::PlatformCALayerRemote *)*((_QWORD *)this + 5);
    if (!this)
      return result;
    if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 32))(this) - 1 >= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x196C2B9BCLL);
    }
  }
  v26 = (CALayer *)(*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(_QWORD *)this + 40))(this);
  WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(v26, 0, 0, (float *)v10->i32, 1, v27);
  return (uint64_t)WebKit::PlatformCALayerRemote::didCommit(this);
}

uint64_t WebKit::PlatformCALayerRemote::type(WebKit::PlatformCALayerRemote *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerDrawsContent(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 5) & 1;
}

uint64_t *WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(WebKit::RemoteLayerTreeTransaction *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  WebKit::PlatformCALayerRemote *v8;

  v2 = (uint64_t *)((char *)this + 16);
  v3 = (unsigned int *)((char *)a2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v8 = a2;
  result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::add(v2, (uint64_t *)&v8, (uint64_t)&v7);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return result;
}

void sub_196C2BA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(a12 + 8));
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t *v12[5];
  _OWORD v13[2];
  uint64_t v14;

  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, (unsigned int *)a2, (uint64_t)v13);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (uint64_t)a2, (uint64_t **)v13);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(v12, (uint64_t *)this + 5, v6, (uint64_t *)(v4 + 8 * v5));
  v7 = (uint64_t *)*((_QWORD *)&v13[0] + 1);
  v8 = v12[1];
  if (WebKit::RemoteLayerBackingStore::needsDisplay(a2) || v7 != v8)
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 72, (unsigned int *)a2, (uint64_t)v12);
  if (v7 != v8)
  {
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (unsigned int *)a2, (uint64_t)v12);
    v10[0] = v13[0];
    v10[1] = v13[1];
    v11 = v14;
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove((uint64_t)this + 40, (uint64_t)v10);
  }
  return v7 != v8;
}

unsigned int *WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  unsigned int **v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (!*(_QWORD *)result)
  {
    v3 = (unsigned int **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (unsigned int *)v5;
    if (result)
    {
      do
      {
        v6 = __ldaxr(result);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, result));
      if (!v7)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

BOOL WebKit::RemoteLayerBackingStore::needsDisplay(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_QWORD *)(v1 + 832);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || !*(_QWORD *)(v3 + 88))
    return 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 112))(*(_QWORD *)(v1 + 48)) & 1) != 0)
    return 1;
  result = 0;
  if (*((float *)this + 7) > 0.0 && *((float *)this + 8) > 0.0)
    return !(*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 72))(this)
        || ((*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 80))(this) & 1) != 0
        || *((int *)this + 16) >= 1
        && *((int *)this + 17) >= 1
        && *((float *)this + 7) > 0.0
        && *((float *)this + 8) > 0.0;
  return result;
}

BOOL WebKit::RemoteLayerWithRemoteRenderingBackingStore::hasFrontBuffer(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return *((_BYTE *)this + 176) || *((_BYTE *)this + 456) == 0;
}

uint64_t **WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  ++*(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v12 = *(_QWORD *)(a2 + 8);
    v6 = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v12);
    return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(a3, (uint64_t *)a1, v6, v7);
  }
  else
  {
    v9 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v10 = *(unsigned int *)(v9 - 4);
      v11 = (uint64_t *)(v9 + 8 * v10);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(a3, (uint64_t *)a1, v11, (uint64_t *)(v9 + 8 * v10));
  }
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::frontBufferMayBeVolatile(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 40);
  if (v1)
    return *(_BYTE *)(v1 + 64) & 1;
  else
    return 0;
}

WTF *WebKit::RemoteLayerTreeTransaction::setCreatedLayers(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = (_QWORD *)(a1 + 40);
  v4 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v4)
  {
    v6 = 80 * v4;
    v7 = *v3 + 56;
    do
    {
      v8 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v8])(&v9, v7);
      *(_DWORD *)(v7 + 16) = -1;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
  }
  return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::paintReachableBackingStoreContents(WebKit::RemoteLayerBackingStoreCollection *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  WTF::MonotonicTime *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  const FloatRect *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  WTF *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;

  v2 = (uint64_t *)((char *)this + 72);
  v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 9);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v29, v2, v3, v4);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, v2, v7, (uint64_t *)(v5 + 8 * v6));
  v8 = v30;
  if (v30 != v28)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if (*(int *)(v10 + 64) >= 1
        && *(int *)(v10 + 68) >= 1
        && *(float *)(v10 + 28) > 0.0
        && *(float *)(v10 + 32) > 0.0)
      {
        v9 = 1;
      }
      v11 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 16) + 48) + 112))(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 48));
      if ((v11 & 1) != 0)
        goto LABEL_32;
      if (*(int *)(v10 + 64) < 1
        || *(int *)(v10 + 68) < 1
        || *(float *)(v10 + 28) <= 0.0
        || *(float *)(v10 + 32) <= 0.0)
      {
        (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 64))(&v34, v10, 0);
        v22 = v34;
        if (v34)
        {
          v23 = *(unsigned int *)(v10 + 212);
          if ((_DWORD)v23 == *(_DWORD *)(v10 + 208))
          {
            WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>>(v10 + 200, (unint64_t)&v34);
          }
          else
          {
            v26 = *(_QWORD *)(v10 + 200);
            v34 = 0;
            *(_QWORD *)(v26 + 8 * v23) = v22;
            *(_DWORD *)(v10 + 212) = v23 + 1;
          }
          v24 = v34;
          v34 = 0;
          if (v24)
            (*(void (**)(WTF *))(*(_QWORD *)v24 + 8))(v24);
        }
        goto LABEL_32;
      }
      WTF::MonotonicTime::now(v11);
      *(_QWORD *)(v10 + 312) = v12;
      v13 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)&v38 = *(_QWORD *)(v10 + 56);
      *((_QWORD *)&v38 + 1) = v13;
      WebCore::Region::rects((WebCore::Region *)(v10 + 56));
      if (v36 <= 5
        && (float)((float)((float)(int)v13 * 0.75) * (float)SHIDWORD(v13)) >= (float)(unint64_t)WebCore::Region::totalArea((WebCore::Region *)(v10 + 56)))
      {
        goto LABEL_37;
      }
      WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v34, 0);
      if (v36 == v35)
        break;
      *((_OWORD *)v34 + v36) = v38;
      v14 = ++v36;
LABEL_19:
      if (v14)
      {
        v15 = v34;
        v16 = 16 * v14;
        do
        {
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v33, v15);
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v33, *(float *)(v10 + 48), *(float *)(v10 + 48));
          v31[0] = WebCore::enclosingIntRect((WebCore *)&v33, v17);
          v31[1] = v18;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v32, (const WebCore::IntRect *)v31);
          v33 = v32;
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v33, 1.0 / *(float *)(v10 + 48), 1.0 / *(float *)(v10 + 48));
          v19 = *(unsigned int *)(v10 + 228);
          if ((_DWORD)v19 == *(_DWORD *)(v10 + 224))
          {
            WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v10 + 216, (unint64_t)&v33);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(v10 + 216) + 16 * v19) = v33;
            ++*(_DWORD *)(v10 + 228);
          }
          v15 = (WTF *)((char *)v15 + 16);
          v16 -= 16;
        }
        while (v16);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      v21 = v34;
      if (&v37 != (uint64_t *)v34 && v34)
      {
        v34 = 0;
        v35 = 0;
        WTF::fastFree(v21, v20);
      }
LABEL_32:
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
      v8 = v30;
      if (v30 == v28)
        return v9 & 1;
    }
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>((uint64_t)&v34, (unint64_t)&v38);
LABEL_37:
    v14 = v36;
    goto LABEL_19;
  }
  v9 = 0;
  return v9 & 1;
}

void sub_196C2C160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26)
{
  if (a25)
    (*(void (**)(WTF *))(*(_QWORD *)a25 + 8))(a25);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::RemoteLayerWithRemoteRenderingBackingStore::createContextAndPaintContents(unsigned __int8 *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  WebCore::GraphicsContext *v3;

  v1 = *((_QWORD *)this + 40);
  if (v1)
  {
    v2 = this;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v1 + 16));
    v3 = *(WebCore::GraphicsContext **)(v1 + 48);
    if (v3)
    {
      WebKit::RemoteLayerBackingStore::drawInContext((WebKit::RemoteLayerBackingStore *)v2, v3);
      v2[456] = 0;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v1 + 16), v3);
  }
  return this;
}

void sub_196C2C214(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::RemoteLayerBackingStore::drawInContext(WebKit::RemoteLayerBackingStore *this, WebCore::GraphicsContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v20 = *(_OWORD *)((char *)this + 56);
  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 832);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (*(_BYTE *)(v6 + 208))
      v7 = 2;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  switch(*(_BYTE *)(v4 + 12))
  {
    case 1:
    case 0xA:
      WebCore::PlatformCALayer::drawLayerContents();
      break;
    case 2:
    case 6:
      v8 = *(_QWORD *)(v4 + 48);
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v19, (const WebCore::IntRect *)&v20);
      (*(void (**)(uint64_t, uint64_t, WebCore::GraphicsContext *, _QWORD *, uint64_t))(*(_QWORD *)v8 + 56))(v8, v4, a2, v19, v7);
      break;
    default:
      break;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  WebCore::Region::Region((WebCore::Region *)v19);
  WebCore::Region::operator=();
  WebCore::Region::~Region((WebCore::Region *)v19);
  WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF **)this + 27, v9);
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 128))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
  v10 = *((unsigned __int8 *)this + 96);
  *((_OWORD *)this + 5) = v20;
  if (!v10)
    *((_BYTE *)this + 96) = 1;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, WebKit::RemoteLayerBackingStore *, uint64_t))(*(_QWORD *)this + 64))(v19, this, 1);
  v12 = v19[0];
  if (v19[0])
  {
    v13 = (uint64_t *)((char *)this + 200);
    v14 = *((unsigned int *)this + 53);
    if ((_DWORD)v14 == *((_DWORD *)this + 52))
    {
      v15 = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)v19);
      v14 = *((unsigned int *)this + 53);
      v16 = *((_QWORD *)this + 25);
      v17 = *v15;
      *v15 = 0;
      *(_QWORD *)(v16 + 8 * v14) = v17;
    }
    else
    {
      v18 = *v13;
      v19[0] = 0;
      *(_QWORD *)(v18 + 8 * v14) = v12;
    }
    *((_DWORD *)this + 53) = v14 + 1;
    result = (_QWORD *)v19[0];
    v19[0] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_196C2C400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::ApproximateTime *WebKit::RemoteLayerWithRemoteRenderingBackingStore::createFlusher@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WTF::ApproximateTime *result;

  result = *(WTF::ApproximateTime **)(a1 + 320);
  if (result)
    return WebKit::RemoteImageBufferSetProxy::flushFrontBufferAsync(result, a2);
  *a2 = 0;
  return result;
}

WTF::ApproximateTime *WebKit::RemoteImageBufferSetProxy::flushFrontBufferAsync@<X0>(WTF::ApproximateTime *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WebKit::RemoteRenderingBackendProxy *v14;
  WTF::ApproximateTime *v15;
  unsigned int *v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v60;
  WTF *v61;
  void *v62;
  WTF *v63;
  void *v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t *v70;
  IPC::StreamClientConnection *v71;
  unsigned int *v72;
  uint64_t *v73;
  _BYTE buf[22];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 4);
  if (!v3
    || (v4 = result, (result = *(WTF::ApproximateTime **)(v3 + 8)) == 0)
    || (result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v71), !v71))
  {
    *a2 = 0;
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 4) + 8) + 232);
  v6 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)v6 = 1;
  *(_WORD *)(v6 + 4) = 0;
  *(_BYTE *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = v5;
  kdebug_trace();
  v8 = (unsigned __int8 *)v4 + 97;
  if (__ldaxr((unsigned __int8 *)v4 + 97))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEABB3C]((char *)v4 + 97);
    goto LABEL_7;
  }
  if (__stxr(1u, v8))
    goto LABEL_6;
  do
LABEL_7:
    v10 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v10 + 1, (unsigned int *)v6));
  v11 = *((_QWORD *)v4 + 13);
  *((_QWORD *)v4 + 13) = v6;
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v11, v7);
  v12 = __ldxr(v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::ApproximateTime *)((char *)v4 + 97));
LABEL_15:
  v13 = *((_QWORD *)v4 + 4);
  if (!v13)
    goto LABEL_103;
  v14 = *(WebKit::RemoteRenderingBackendProxy **)(v13 + 8);
  v69 = *((_QWORD *)v14 + 29);
  v70 = &v69;
  v15 = WebKit::RemoteRenderingBackendProxy::connection(v14, &v72);
  v16 = v72;
  if (!v72)
    goto LABEL_103;
  v17 = *((_QWORD *)v4 + 3);
  WTF::ApproximateTime::now(v15);
  v19 = v18 + 15.0;
  if (*((_QWORD *)v16 + 6) != v17)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 14), buf, v18 + 15.0);
    if (!buf[16])
      goto LABEL_100;
    v43 = *(_QWORD *)buf;
    v44 = *(_QWORD *)&buf[8];
    v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - *(_QWORD *)buf;
    if (v45 < *(_QWORD *)buf)
    {
      v48 = 0;
      v47 = *(_QWORD *)&buf[8];
    }
    else
    {
      v47 = 0;
      if (v46 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v48 = 0;
      }
      else
      {
        v48 = 0;
        if (v46 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v46) = 2822;
          v47 = v44;
          v48 = v46 + 2;
        }
      }
    }
    v49 = (_QWORD *)((v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v49 >= v43 + v48)
    {
      v50 = (char *)v49 - v43;
      v51 = 17;
      if ((unint64_t)v49 - v43 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_92;
      v48 = (unint64_t)(v50 + 8);
      if ((unint64_t)(v50 + 8) > v47)
        goto LABEL_92;
      *v49 = v17;
    }
    if (!v47)
    {
      v51 = 17;
      goto LABEL_92;
    }
    v52 = (*((_QWORD *)v16 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v53 = *((_QWORD *)v16 + 7);
    if (v52 + 16 >= v53)
      v52 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v54 = v52 + v48;
    if (v53 <= v54)
      v55 = 0;
    else
      v55 = v54;
    *((_QWORD *)v16 + 9) = v55;
    v56 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v16 + 8) + 16) + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v55, v56));
    v58 = v16[27];
    if (v57 == 0x80000000 || v58 != 0)
    {
      v60 = v58 + 1;
      v16[27] = v60;
      if (v60 >= v16[26])
      {
        if (*((_BYTE *)v16 + 96))
          MEMORY[0x19AEBA1A0](v16[21]);
        v16[27] = 0;
      }
    }
    *((_QWORD *)v16 + 6) = v17;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 14), buf, v19);
  if (!buf[16])
  {
LABEL_100:
    v51 = 15;
    goto LABEL_92;
  }
  v21 = *(_QWORD *)buf;
  v20 = *(_QWORD *)&buf[8];
  v22 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - *(_QWORD *)buf;
  if (v22 >= *(_QWORD *)buf)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v23) = 1095;
      goto LABEL_25;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_25:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 < v21 + v24)
    goto LABEL_31;
  v24 = (unint64_t)v26 - v21 + 8;
  if ((unint64_t)v26 - v21 <= 0xFFFFFFFFFFFFFFF7 && v24 <= v20)
  {
    *v26 = *v70;
LABEL_31:
    if (v20)
    {
      v28 = *((_QWORD *)v16 + 8);
      v29 = (*((_QWORD *)v16 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v30 = *((_QWORD *)v16 + 7);
      if (v29 + 16 >= v30)
        v29 = 0;
      if (v24 <= 0x10)
        v24 = 16;
      v31 = v29 + v24;
      if (v30 <= v31)
        v32 = 0;
      else
        v32 = v31;
      *((_QWORD *)v16 + 9) = v32;
      v33 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v32, v33));
      if (v34 == 0x80000000 || v16[27])
      {
        if (*((_BYTE *)v16 + 96))
          MEMORY[0x19AEBA1A0](v16[21]);
        v16[27] = 0;
      }
LABEL_43:
      v35 = 1;
      goto LABEL_44;
    }
  }
  if (!buf[16])
  {
    __break(1u);
    goto LABEL_103;
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v16, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)v16 + 1);
  v51 = IPC::Connection::send<Messages::RemoteImageBufferSet::EndPrepareForDisplay>((uint64_t)v73, &v70, v17);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
  if (!v51)
    goto LABEL_43;
LABEL_92:
  v65 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v66 = IPC::errorAsString(v51);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteImageBufferSet_EndPrepareForDisplay";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v66;
    _os_log_impl(&dword_196BCC000, v65, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v67 = *((_QWORD *)v4 + 4);
  if (v67)
  {
    v68 = *(_BYTE **)(v67 + 8);
    if (v68)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v68);
  }
  v35 = 0;
LABEL_44:
  v72 = 0;
  do
  {
    v36 = __ldaxr(v16);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v16));
  if (!v37)
  {
    atomic_store(1u, v16);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v16);
    WTF::fastFree(v61, v62);
  }
  if (v35)
  {
    v38 = *((_QWORD *)v4 + 3);
    v39 = WTF::fastMalloc((WTF *)0x20);
    v40 = *((_DWORD *)v4 + 23);
    *(_QWORD *)v39 = off_1E34E34F0;
    *(_QWORD *)(v39 + 8) = v38;
    *(_QWORD *)(v39 + 16) = v6;
    *(_DWORD *)(v39 + 24) = v40;
    *a2 = v39;
    goto LABEL_50;
  }
LABEL_103:
  *a2 = 0;
  WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v6, v7);
LABEL_50:
  result = v71;
  v71 = 0;
  if (result)
  {
    do
    {
      v41 = __ldaxr((unsigned int *)result);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)result));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v63, v64);
    }
  }
  return result;
}

WTF **WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF **result, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF **v4;
  WTF **v5;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v3 = (WTF *)(result + 2);
    v2 = *result;
    if (result + 2 != (WTF **)*result)
    {
      if (!v2)
        goto LABEL_8;
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      v4 = result + 2;
      v5 = result;
      WTF::fastFree(v2, a2);
      v3 = (WTF *)v4;
      result = v5;
      v2 = *v5;
    }
    if (v2)
      return result;
LABEL_8:
    *result = v3;
    *((_DWORD *)result + 2) = 5;
  }
  return result;
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::prepareBackingStoresForDisplay(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  uint64_t *v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  WebCore::ImageBuffer *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  BOOL v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t v51;
  WebKit::RemoteLayerBackingStore *v52;
  int8x16_t v53;
  uint64_t v54;
  _BYTE v55[24];
  __int16 v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v4 = (uint64_t *)((char *)this + 72);
  v5 = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 72, a2);
  if (v5)
  {
    if (v5 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196C2CEACLL);
    }
    LODWORD(v65) = 40 * v5 / 0x28;
    v64 = WTF::fastMalloc((WTF *)(40 * v5));
  }
  v62 = 0;
  v63 = 0;
  v7 = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v4, v6);
  if (v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_77;
    }
    LODWORD(v63) = v7;
    v62 = WTF::fastMalloc((WTF *)(8 * v7));
  }
  v8 = (unsigned int *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(*(WebKit::WebPage **)(*((_QWORD *)this + 2)
                                                                                              + 24));
  v9 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v4);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator((uint64_t **)&v60, v4, v9, v10);
  v11 = (_QWORD *)*v4;
  if (*v4)
  {
    v12 = *((unsigned int *)v11 - 1);
    v13 = &v11[v12];
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v58, v4, v13, &v11[v12]);
  v15 = v61;
  if (v61 != v59)
  {
    v53 = (int8x16_t)vdupq_n_s64(0x400uLL);
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      v17 = *(int8x16_t **)(v16 + 16);
      v17[4] = vorrq_s8(v17[4], v53);
      WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(a2, (WebKit::PlatformCALayerRemote *)v17);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
      {
        if ((WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay((WebKit::RemoteLayerBackingStore *)v16) & 1) != 0)
          goto LABEL_51;
        v18 = *(_QWORD *)(v16 + 320);
        if (!v18)
          goto LABEL_51;
        v19 = (unsigned __int8 **)(v18 + 16);
        v20 = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v18 + 16));
        if (!*(_BYTE *)(v16 + 176) && *(_BYTE *)(v16 + 456))
          goto LABEL_23;
        v21 = WebCore::ImageBuffer::calculateBackendSize((WebCore::ImageBuffer *)v20, *(FloatSize *)(v16 + 28), *(float *)(v16 + 48));
        v22 = HIDWORD(v21);
        if ((int)v21 >= 0)
          v23 = v21;
        else
          v23 = -(int)v21;
        if (v21 < 0)
          LODWORD(v22) = -HIDWORD(v21);
        v24 = v23 * (unint64_t)v22;
        if ((v24 & 0xFFFFFFFF00000000) == 0 && v24 <= 0x1000)
LABEL_23:
          WebKit::RemoteLayerBackingStore::setNeedsDisplay((WebKit::RemoteLayerBackingStore *)v16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v18 + 16));
        v54 = v18;
        v25 = (WebCore::ImageBuffer *)WebCore::Region::Region((WebCore::Region *)v55, (const WebCore::Region *)(v16 + 56));
        v26 = WebCore::ImageBuffer::calculateBackendSize(v25, *(FloatSize *)(v16 + 28), *(float *)(v16 + 48));
        v27 = HIDWORD(v26);
        if ((int)v26 >= 0)
          v28 = v26;
        else
          v28 = -(int)v26;
        if (v26 < 0)
          LODWORD(v27) = -HIDWORD(v26);
        v29 = v28 * (unint64_t)v27;
        v31 = (v29 & 0xFFFFFFFF00000000) != 0 || v29 > 0x1000;
        LOBYTE(v56) = v31;
        v32 = *(int *)(v16 + 64) < 1
           || *(int *)(v16 + 68) < 1
           || *(float *)(v16 + 28) <= 0.0
           || *(float *)(v16 + 32) <= 0.0;
        HIBYTE(v56) = v32;
        if (*(_BYTE *)(v16 + 53))
          v33 = 0;
        else
          v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 16) + 48) + 232))(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 48)) ^ 1;
        v57 = v33;
        v34 = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData>((uint64_t)&v64, (unint64_t)&v54);
        }
        else
        {
          v35 = v64;
          v36 = v54;
          v54 = 0;
          *(_QWORD *)(v64 + 40 * HIDWORD(v65)) = v36;
          WebCore::Region::Region();
          v37 = v35 + 40 * v34;
          v38 = v56;
          *(_BYTE *)(v37 + 34) = v57;
          *(_WORD *)(v37 + 32) = v38;
          ++HIDWORD(v65);
        }
        WebCore::Region::~Region((WebCore::Region *)v55);
        v40 = v54;
        v54 = 0;
        if (v40)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v40 + 16), v39);
        v41 = HIDWORD(v63);
        if (HIDWORD(v63) == (_DWORD)v63)
        {
          WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerWithRemoteRenderingBackingStore&>((uint64_t)&v62, v16);
        }
        else
        {
          v42 = v62;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v16 + 8), v16);
          v44 = *(unsigned int **)(v16 + 8);
          if (v44)
          {
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 + 1, v44));
          }
          *(_QWORD *)(v42 + 8 * v41) = v44;
          ++HIDWORD(v63);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v19, v43);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
LABEL_51:
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v60);
      v15 = v61;
    }
    while (v61 != v59);
  }
  if (HIDWORD(v65))
  {
    WebKit::RemoteRenderingBackendProxy::prepareImageBufferSetsForDisplay(v8, (uint64_t)&v64, (uint64_t)&v60);
    v46 = HIDWORD(v61);
    if (HIDWORD(v61) == (unint64_t)HIDWORD(v63))
    {
      if (HIDWORD(v61))
      {
        v47 = 0;
        do
        {
          if (v47 >= HIDWORD(v63))
          {
            __break(0xC471u);
            JUMPOUT(0x196C2CEA4);
          }
          if (!*((_BYTE *)v60 + v47))
          {
            v51 = *(_QWORD *)(v62 + 8 * v47);
            if (v51)
              v52 = *(WebKit::RemoteLayerBackingStore **)(v51 + 8);
            else
              v52 = 0;
            WebKit::RemoteLayerBackingStore::setNeedsDisplay(v52);
            v46 = HIDWORD(v61);
          }
          ++v47;
        }
        while (v47 < v46);
      }
      goto LABEL_62;
    }
    if (!HIDWORD(v61))
    {
LABEL_62:
      v48 = v60;
      if (v60)
      {
        v60 = 0;
        LODWORD(v61) = 0;
        WTF::fastFree(v48, v14);
      }
      goto LABEL_64;
    }
    __break(0xC471u);
LABEL_77:
    JUMPOUT(0x196C2CE74);
  }
LABEL_64:
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v14);
  return WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v64, v49);
}

void sub_196C2CEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  unsigned __int8 **v22;
  uint64_t v23;
  void *v25;
  void *v26;
  void *v27;

  WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData::~LayerPrepareBuffersData((WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData *)&a11);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v22, v25);
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 - 120, v26);
  WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v23 - 104), v27);
  _Unwind_Resume(a1);
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 **)MEMORY[0x19AEABB3C](v1);
    goto LABEL_4;
  }
  if (__stxr(1u, v1))
    goto LABEL_3;
LABEL_4:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(unsigned __int8 *result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v7)
      return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::isRemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return 1;
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_24;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_19:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_20;
  }
  v5 = 0;
  do
  {
    v6 = --v4;
    v7 = *(_QWORD *)(v3 + 8 * v4);
    if ((unint64_t)(v7 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
    {
      *(_QWORD *)(v3 + 8 * v4) = 0;
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v18 = v4;
        v19 = v3;
        v17 = v5;
        v20 = v4;
        WTF::fastFree((WTF *)v7, a2);
        v3 = v19;
        v6 = v20;
        v4 = v18;
        v5 = v17;
      }
      *(_QWORD *)(v3 + 8 * v6) = -1;
      ++v5;
    }
  }
  while (v6);
  v3 = *(_QWORD *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v15 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_24:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v10 = *(_DWORD *)(v3 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v10)
    goto LABEL_19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
    goto LABEL_25;
LABEL_20:
  v12 = *(_DWORD *)(v3 - 12);
  if (v12 >= 0x7FFFFFFF)
    v13 = -2;
  else
    v13 = 2 * v12;
  *(_DWORD *)(a1 + 12) = v13;
  return *(unsigned int *)(v3 - 12);
}

void WebKit::RemoteLayerBackingStore::setNeedsDisplay(WebKit::RemoteLayerBackingStore *a1, IntPoint a2, IntSize a3)
{
  IntSize v3;
  IntRect v4;
  _BYTE v5[24];
  IntRect v6;
  IntRect v7;

  v6.m_location = a2;
  v6.m_size = a3;
  v7.m_location = (IntPoint)WebKit::RemoteLayerBackingStore::layerBounds(a1);
  v7.m_size = v3;
  WebCore::IntRect::intersect((WebCore::IntRect *)&v7, &v6);
  v4 = v7;
  WebCore::Region::Region((WebCore::Region *)v5, &v4);
  WebCore::Region::unite();
  WebCore::Region::~Region((WebCore::Region *)v5);
}

void sub_196C2D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerBackingStore::setNeedsDisplay(WebKit::RemoteLayerBackingStore *this)
{
  IntSize v1;
  IntRect v2;
  _BYTE v3[24];

  v2.m_location = (IntPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
  v2.m_size = v1;
  WebCore::Region::Region((WebCore::Region *)v3, &v2);
  WebCore::Region::unite();
  WebCore::Region::~Region((WebCore::Region *)v3);
}

void sub_196C2D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStore::layerBounds(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::prepareToDisplay(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (*(_BYTE *)(this + 176))
  {
    v1 = this;
    v2 = *(unsigned int *)(this + 168);
    if ((_DWORD)v2 != -1)
      this = off_1E34B91A0[v2]((int)&v3, (WTF::MachSendRight *)(this + 104));
    *(_DWORD *)(v1 + 168) = -1;
    *(_BYTE *)(v1 + 176) = 0;
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  if ((_DWORD)result)
  {
    v4 = result;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 120))(v2, *((_QWORD *)this + 2));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 128))(v2, *((_QWORD *)this + 2));
    return v4;
  }
  return result;
}

WTF *WebKit::RemoteLayerBackingStoreCollection::willCommitLayerTree(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  WTF *result;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v4 = (uint64_t *)((char *)this + 24);
  v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, v4, v5, v6);
  v7 = *v4;
  if (*v4)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = (uint64_t *)(v7 + 8 * v8);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v23, v4, v9, (uint64_t *)(v7 + 8 * v8));
  v11 = v26;
  if (v26 == v24)
  {
    v15 = 0;
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v12 = (char *)this + 56;
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>((uint64_t)v12, *(_QWORD *)(v13 + 8)) & 1) == 0)
    {
      v22 = *(_OWORD *)(*(_QWORD *)(v13 + 16) + 16);
      if (HIDWORD(v28) == (_DWORD)v28)
      {
        WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)&v27, (unint64_t)&v22);
      }
      else
      {
        *((_OWORD *)v27 + HIDWORD(v28)) = v22;
        ++HIDWORD(v28);
      }
    }
    result = (WTF *)WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v25);
    v11 = v26;
  }
  while (v26 != v24);
  v15 = HIDWORD(v28);
  if (!HIDWORD(v28))
    goto LABEL_8;
  if (HIDWORD(v28) >> 28)
  {
    __break(0xC471u);
    return result;
  }
  v18 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v28)));
  v16 = v18;
  if (HIDWORD(v28))
  {
    v19 = 0;
    v20 = v27;
    v21 = 16 * HIDWORD(v28);
    do
    {
      *(_OWORD *)(v18 + v19) = *(_OWORD *)((char *)v20 + v19);
      v19 += 16;
    }
    while (v21 != v19);
  }
LABEL_9:
  v17 = (WTF *)*((_QWORD *)a2 + 11);
  if (v17)
  {
    *((_QWORD *)a2 + 11) = 0;
    *((_DWORD *)a2 + 24) = 0;
    WTF::fastFree(v17, v10);
  }
  *((_QWORD *)a2 + 11) = v16;
  *((_DWORD *)a2 + 24) = v15;
  *((_DWORD *)a2 + 25) = v15;
  result = v27;
  if (v27)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

void sub_196C2D5CC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)(v2 - 48);
  if (v4)
  {
    *(_QWORD *)(v2 - 48) = 0;
    *(_DWORD *)(v2 - 40) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result[2];
  v2 = result[1] + 8;
  result[1] = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 8;
      result[1] = v2;
      if (v2 == v1)
      {
        v2 = v1;
        break;
      }
    }
  }
  v3 = result[3];
LABEL_6:
  while (v2 != v3 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v4 = v2 + 8;
    result[1] = v2 + 8;
    v2 = v1;
    if (v4 != v1)
    {
      v2 = v4;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v1)
        {
          v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*result + 8);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Region *v5;
  uint64_t v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WebCore::Region *)(*(_QWORD *)a1 + 8);
    do
    {
      WebCore::Region::~Region(v5);
      v6 = *((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
      v5 = (WebCore::Region *)((char *)v5 + 40);
      v4 -= 40;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B9290;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_196C2D840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShouldPaintUsingCompositeCopy(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this - 429) >> 4) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerLayerDidDisplay(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  return WebCore::GraphicsLayerCA::layerDidDisplay((WebCore::GraphicsLayerCA *)((char *)this - 608), a2);
}

void WebKit::RemoteImageBufferSetProxy::~RemoteImageBufferSetProxy(WebKit::RemoteImageBufferSetProxy *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteImageBufferSetProxy::~RemoteImageBufferSetProxy(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned __int8 *v3;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  IPC::StreamClientConnection *v15;

  *(_QWORD *)this = off_1E34E2EC0;
  v3 = (unsigned __int8 *)this + 97;
  if (__ldaxr((unsigned __int8 *)this + 97))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C]((char *)this + 97);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_9:
  v6 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v15 = (IPC::StreamClientConnection *)v6;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15);
    }
  }
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v9, a2);
  v10 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

unsigned int **WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 16))(*(_QWORD *)(a1 + 8) - 8);
}

BOOL WebKit::WebChromeClient::isInStableState(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 1293);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 != 0;
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, __int16 a2)
{
  unsigned __int8 **v2;

  v2 = *(unsigned __int8 ***)(a1 + 16);
  if ((a2 & 0x100) == 0)
    atomic_store(0, *v2);
  *v2[1] = a2 & 1;
  return 0;
}

uint64_t WebKit::defaultWriteRichTextDataWhenCopyingOrDragging(WebKit *this)
{
  return WebKit::isAsyncTextInputFeatureFlagEnabled(this) ^ 1;
}

uint64_t WebKit::isAsyncTextInputFeatureFlagEnabled(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::isAsyncTextInputFeatureFlagEnabled(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::isAsyncTextInputFeatureFlagEnabled(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::isAsyncTextInputFeatureFlagEnabled(void)::$_0 &&>>);
  }
  return WebKit::isAsyncTextInputFeatureFlagEnabled(void)::enabled;
}

uint64_t IPC::Connection::resumeSendSource(IPC::Connection *this, void *a2)
{
  WTF *v3;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = (WTF *)*((_QWORD *)this + 43);
  if (v3)
  {
    *((_QWORD *)this + 43) = 0;
    v7 = v3;
    IPC::Connection::sendMessage((uint64_t *)this, (unsigned __int16 **)&v7);
    v5 = v7;
    if (v7)
    {
      if (*((_BYTE *)v7 + 16))
      {
        v6 = v7;
        mach_msg_destroy((mach_msg_header_t *)((char *)v7 + 20));
        v5 = v6;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return IPC::Connection::sendOutgoingMessages((uint64_t)this, a2);
}

void sub_196C2DB94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*((_BYTE *)a10 + 16))
      mach_msg_destroy((mach_msg_header_t *)((char *)a10 + 20));
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LinearTimingFunction::type(WebCore::LinearTimingFunction *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::needsPixelAligment(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::contentsScale(WebCore::TileController **this)
{
  return WebCore::TileController::contentsScale(this[105]);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setAcceleratesDrawing(WebCore::TileController **this)
{
  return WebCore::TileController::setAcceleratesDrawing(this[105]);
}

uint64_t WebKit::PlatformCAAnimationRemote::setDuration(uint64_t this, double a2)
{
  *(double *)(this + 40) = a2;
  return this;
}

WTF::StringImpl **WebKit::GraphicsLayerCARemote::createPlatformCAAnimation@<X0>(char a1@<W1>, WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  return WebKit::PlatformCAAnimationRemote::create(a3, a1, a2);
}

void WebKit::WebChromeClient::isAnyAnimationAllowedToPlayDidChange(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  WebKit::WebPage::isAnyAnimationAllowedToPlayDidChange((IPC::Encoder *)v4, a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

IPC::Encoder *WebKit::WebPage::isAnyAnimationAllowedToPlayDidChange(IPC::Encoder *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 704) & 0x8000000000) != 0)
  {
    v4 = a2;
    v2 = (uint64_t)this + 32;
    v3 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 4) + 56))((uint64_t)this + 32);
    return IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>(v2, &v4, v3);
  }
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::IsAnyAnimationAllowedToPlayDidChange>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1959;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebChromeClient::scroll(WebKit::WebChromeClient *this, const WebCore::IntSize *a2, const WebCore::IntRect *a3, const IntRect *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;

  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::pageDidScroll((WebKit::WebPage *)v8, v9);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = *(_OWORD *)a3;
  WebCore::IntRect::intersect((WebCore::IntRect *)&v11, a4);
  (*(void (**)(uint64_t, __int128 *, const WebCore::IntSize *))(*(_QWORD *)v10 + 56))(v10, &v11, a2);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

_DWORD *WebKit::WebPage::pageDidScroll(WebKit::WebPage *this, void *a2)
{
  uint64_t v3;
  _DWORD *result;
  _DWORD *v5;
  IPC::Encoder *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;

  if (!*((_BYTE *)this + 1493))
  {
    v3 = *((_QWORD *)this + 187);
    if (v3)
    {
      *((_QWORD *)this + 187) = 0;
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  (*(void (**)(_QWORD, WebKit::WebPage *))(**((_QWORD **)this + 47) + 72))(*((_QWORD *)this + 47), this);
  PAL::HysteresisActivity::impulse((_BYTE *)this + 736);
  WebCore::Page::protectedMainFrame(*((WebCore::Page **)this + 6));
  result = (_DWORD *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)v15 + 56))(v15);
  v5 = result;
  if (result)
    ++result[2];
  v6 = v15;
  v15 = 0;
  if (v6)
    result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v6 + 2);
  if (v5)
  {
    v14 = WebCore::ScrollableArea::visibleContentRect();
    v8 = *((_QWORD *)this + 4);
    v7 = (char *)this + 32;
    v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 1987;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v15 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v10, &v14);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v15, 0);
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      result = (_DWORD *)WTF::fastFree(v12, v13);
    }
    if (v5[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return result;
}

_BYTE *PAL::HysteresisActivity::impulse(_BYTE *this)
{
  _BYTE *v1;

  if (!this[48])
  {
    v1 = this;
    if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 16)) & 1) == 0)
    {
      v1[48] = 1;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 16))(*(_QWORD *)v1, 0);
      v1[48] = 0;
    }
    return (_BYTE *)WTF::RunLoop::TimerBase::start();
  }
  return this;
}

char *IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = v2[1];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

void WebKit::WebChromeClient::invalidateContentsAndRootView(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 160);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_17;
  v7 = (unsigned int *)(v5 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_QWORD *)(v5 + 296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    if (*(_BYTE *)(v9 + 3382))
    {
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      goto LABEL_16;
    }
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
  }
  (*(void (**)(_QWORD, const WebCore::IntRect *))(**(_QWORD **)(v4 + 72) + 48))(*(_QWORD *)(v4 + 72), a2);
LABEL_16:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
LABEL_17:
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

WTF::StringImpl **WebKit::NetworkSchemeRegistry::registerURLSchemeAsCORSEnabled(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  _BYTE v3[24];

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 8), a2, (uint64_t)v3);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v7;
    v12 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = v9;
      }
      result = WTF::String::operator=(v12, (WTF::StringImpl *)a2);
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v17 - 16) + v18);
      v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_14;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_14:
        v21 = v17 + 8 * v20;
        v22 = 1;
        goto LABEL_15;
      }
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v12);
      v12 = result;
      v17 = *a1;
      if (*a1)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_14;
    }
    if (v13 == (WTF::StringImpl *)-1)
    {
      v9 = (WTF::StringImpl **)(v6 + 8 * v11);
      goto LABEL_21;
    }
    result = (WTF::StringImpl **)WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v13, (uint64_t)*a2);
    if ((_DWORD)result)
      break;
LABEL_21:
    v8 = i + v11;
  }
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  v22 = 0;
  v21 = v23 + 8 * v24;
LABEL_15:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v7;
    v12 = (WTF::StringImpl **)(v6 + 8 * (v8 & v7));
    v13 = *v12;
    if (!*v12)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = v9;
      }
      result = WTF::String::operator=(v12, (WTF::StringImpl *)a2);
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v17 - 16) + v18);
      v20 = *(unsigned int *)(v17 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_17;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_17:
        v21 = v17 + 8 * v20;
        v22 = 1;
        goto LABEL_18;
      }
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v12);
      v12 = result;
      v17 = *a1;
      if (*a1)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
      goto LABEL_17;
    }
    if (v13 != (WTF::StringImpl *)-1)
      break;
    v9 = (WTF::StringImpl **)(v6 + 8 * v11);
LABEL_8:
    v8 = i + v11;
  }
  result = (WTF::StringImpl **)WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>((uint64_t)v13, (uint64_t)*a2);
  if (!(_DWORD)result)
    goto LABEL_8;
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  v22 = 0;
  v21 = v23 + 8 * v24;
LABEL_18:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

void WebKit::WebChromeClient::attachRootGraphicsLayer(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::GraphicsLayer *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (a3)
    WebKit::WebPage::enterAcceleratedCompositingMode(v6);
  else
    WebKit::WebPage::exitAcceleratedCompositingMode(v6, (uint64_t)a2);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

double WebKit::RemoteLayerTreeDrawingArea::setRootCompositingLayer(WebKit::RemoteLayerTreeDrawingArea *this, WebCore::Frame *a2, WebCore::GraphicsLayer *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v12;

  v4 = *((_QWORD *)this + 11);
  v5 = *((unsigned int *)this + 25);
  if ((_DWORD)v5)
  {
    v9 = 40 * v5;
    v10 = (_QWORD *)(v4 + 24);
    do
    {
      if (*v10 == *((_QWORD *)a2 + 4) && v10[1] == *((_QWORD *)a2 + 5))
      {
        if (a3)
          ++*((_DWORD *)a3 + 2);
        v12 = (_DWORD *)*(v10 - 2);
        *(v10 - 2) = a3;
        if (v12)
        {
          if (v12[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
          else
            --v12[2];
        }
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    v4 = *((_QWORD *)this + 11);
    v6 = *((_DWORD *)this + 25);
  }
  else
  {
    v6 = 0;
  }
  WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(v4, v6);
  return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v2 = 40 * a2;
    v3 = (uint64_t *)(this + 16);
    do
    {
      v9 = 0;
      v10 = 0;
      v4 = *(v3 - 1);
      if (v4)
      {
        WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>((uint64_t)&v9, v4);
        v5 = *v3;
        if (*v3)
        {
          v7 = HIDWORD(v10);
          if (HIDWORD(v10) == (_DWORD)v10)
          {
            WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>((uint64_t)&v9, v5);
          }
          else
          {
            v8 = v9;
            ++*(_DWORD *)(v5 + 8);
            *(_QWORD *)(v8 + 8 * v7) = v5;
            HIDWORD(v10) = v7 + 1;
          }
        }
      }
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*(v3 - 2) + 56))(*(v3 - 2), &v9);
      this = WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return this;
}

void sub_196C2E5F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::enterAcceleratedCompositingMode(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72));
}

uint64_t WebKit::WebPage::exitAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 240))(*(_QWORD *)(a1 + 72), a2, 0);
}

void WebKit::WebChromeClient::contentsSizeChanged(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WebCore::IntSize *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18[2];
  IPC::Encoder *v19;

  v6 = *((_QWORD *)a2 + 36);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  if (*(WebCore::LocalFrame **)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 160) == a2)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 56))(v8 + 32);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 1862;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v19 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v10, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v8 + 32) + 32))(v8 + 32, &v19, 0);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, const WebCore::IntSize *))(**(_QWORD **)(v8 + 72) + 112))(*(_QWORD *)(v8 + 72), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), a3);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 312) != 1)
      {
        v15 = *(_QWORD *)(v6 + 152) != 0;
        v16 = *(_QWORD *)(v6 + 160) != 0;
        if (*((unsigned __int8 *)this + 8) != v15 || *((unsigned __int8 *)this + 9) != v16)
        {
          v18[0] = *(_QWORD *)(v6 + 152) != 0;
          v18[1] = v16;
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 56))(v8 + 32);
          IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(v8 + 32, v18, v17);
          *((_BYTE *)this + 8) = v15;
          *((_BYTE *)this + 9) = v16;
        }
      }
    }
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidLayout(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebFrame *v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *))(**(_QWORD **)(v3 + 360) + 152))(*(_QWORD *)(v3 + 360), v3, this[2]);
    WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState((IPC::Encoder *)v3);
    WebKit::WebPage::updateSelectionAppearance((WebCore::Page **)v3);
    v4 = this[2];
    if (v4 == *(WebKit::WebFrame **)(WebKit::WebFrame::page(v4) + 88))
    {
      v5 = v3 + 32;
      v6 = *(WebCore::Page **)(v3 + 48);
      if (v6)
        v7 = WebCore::Page::renderTreeSize(v6);
      else
        v7 = 0;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v3 + 32);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 2045;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v14 = (IPC::Encoder *)v9;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v7;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v3 + 32, &v14, 0);
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v12, v13);
      }
      WebKit::WebPage::mainFrameDidLayout((WebCore::Page **)v3);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

IPC::Encoder *WebKit::WebPage::recomputeShortCircuitHorizontalWheelEventsState(IPC::Encoder *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  WebCore::ScrollableArea *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;

  v1 = (uint64_t)this;
  if (*((_BYTE *)this + 853))
  {
LABEL_2:
    v2 = 0;
    goto LABEL_3;
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 160);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v5 = *(_QWORD *)(v4 + 288);
        if (!v5
          || ((v6 = *(_QWORD *)(v5 + 64),
               ++*(_DWORD *)(v5 + 8),
               (this = (IPC::Encoder *)(*(uint64_t (**)(void))(v6 + 392))()) == 0)
           || !*((_BYTE *)this + 136)
            ? (v7 = 0)
            : (v7 = 1),
              *(_DWORD *)(v5 + 8) == 1
            ? (this = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
            : (IPC::Encoder *)--*(_DWORD *)(v5 + 8),
              (v7 & 1) == 0))
        {
          while (1)
          {
            if (!*(_BYTE *)(v4 + 144))
            {
              v8 = (unsigned int *)(v4 + 8);
              do
                v9 = __ldaxr(v8);
              while (__stlxr(v9 + 1, v8));
              v10 = *(_QWORD *)(v4 + 288);
              if (v10)
              {
                ++*(_DWORD *)(v10 + 8);
                v11 = *(_QWORD **)(v10 + 1288);
                if (v11)
                {
                  v13 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(*(_QWORD ***)(v10 + 1288));
                  v31 = v11;
                  v32 = v13;
                  v33 = v14;
                  v15 = *v11;
                  if (*v11)
                  {
                    v16 = *(unsigned int *)(v15 - 4);
                    v17 = (_QWORD *)(v15 + 8 * v16);
                    v34 = v17;
                    v35 = v17;
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
                  }
                  else
                  {
                    v34 = 0;
                    v35 = 0;
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
                    v17 = 0;
                    v16 = 0;
                  }
                  v26 = v11;
                  v27 = v17;
                  v28 = v17;
                  v29 = v17;
                  v30 = v15 + 8 * v16;
                  WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
                  v18 = v32;
                  v19 = v27;
                  while (1)
                  {
                    if (v18 == v19)
                    {
                      v12 = 0;
                      goto LABEL_22;
                    }
                    v20 = *(WebCore::ScrollableArea **)(*v18 + 8);
                    (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v20 + 16))(v20);
                    if (WebCore::ScrollableArea::scrollbarsCanBeActive(v20))
                    {
                      v21 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v20 + 392))(v20);
                      if (v21)
                      {
                        if (*(_BYTE *)(v21 + 136))
                          break;
                      }
                    }
                    (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v20 + 24))(v20);
                    v22 = v18 + 1;
                    v32 = v18 + 1;
                    if (v18 + 1 != v33)
                    {
                      while ((unint64_t)(*v22 + 1) <= 1)
                      {
                        if (++v22 == v33)
                        {
                          v22 = v33;
                          break;
                        }
                      }
                      v32 = v22;
                    }
                    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
                    v18 = v32;
                    ++*((_DWORD *)v31 + 2);
                  }
                  (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v20 + 24))(v20);
                  v12 = 1;
                }
                else
                {
                  v12 = 4;
                }
LABEL_22:
                if (*(_DWORD *)(v10 + 8) == 1)
                  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
                else
                  --*(_DWORD *)(v10 + 8);
                this = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
                if ((v12 | 4) != 4)
                  goto LABEL_2;
              }
              else
              {
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
              }
            }
            this = (IPC::Encoder *)WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v4 + 48), 0);
            v4 = (uint64_t)this;
            v2 = 1;
            if (!this)
              goto LABEL_3;
          }
        }
        goto LABEL_2;
      }
    }
  }
  v2 = 1;
LABEL_3:
  if (*(unsigned __int8 *)(v1 + 852) != v2)
  {
    *(_BYTE *)(v1 + 852) = v2;
    LOBYTE(v31) = v2;
    v24 = *(_QWORD *)(v1 + 32);
    v23 = v1 + 32;
    v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v23);
    return IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>(v23, &v31, v25);
  }
  return this;
}

uint64_t WebKit::WebPage::updateSelectionAppearance(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Editor *v6;
  WebCore::Editor *v7;
  uint64_t v8;
  uint64_t (*v9)();
  WebCore::FocusController *v10;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v10);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    v7 = v6;
    if (!*((_BYTE *)v6 + 88))
    {
      if (!WebCore::Editor::client(v6)
        || (v8 = WebCore::Editor::client(v7), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8)))
      {
        if (*((_QWORD *)v7 + 4))
          v9 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
        else
          v9 = 0;
        if (v9 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 3064) + 153))
          WebKit::WebPage::didChangeSelection((WebKit::WebPage *)this, (WebCore::LocalFrame *)v3);
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_196C2ED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x196C2ED7CLL);
    }
    --*a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebEditorClient::shouldRevealCurrentSelectionAfterInsertion(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(unsigned __int8 *)(v2 + 1294);
}

_QWORD *WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::mainFrameDidLayout(WebCore::Page **this)
{
  _DWORD *v2;
  int IsUpToDate;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  WebCore::Page *v11;
  _DWORD *result;
  _DWORD *v13;
  IntSize v14;

  v2 = (_DWORD *)MEMORY[0x1E0DD2760];
  ++*MEMORY[0x1E0DD2760];
  IsUpToDate = WebCore::Page::pageCountAssumingLayoutIsUpToDate(this[6]);
  if (IsUpToDate != *((_DWORD *)this + 214))
  {
    v4 = IsUpToDate;
    v5 = (*((uint64_t (**)(char *))this[4] + 7))((char *)this + 32);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1866;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v14 = (IntSize)v6;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v4;
    (*((void (**)(char *, IntSize *, _QWORD))this[4] + 4))((char *)this + 32, &v14, 0);
    v8 = (IPC::Encoder *)v14;
    v14 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    *((_DWORD *)this + 214) = v4;
  }
  v11 = this[34];
  if (v11 && *((_BYTE *)v11 + 40))
    *((_BYTE *)v11 + 40) = 0;
  result = (_DWORD *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)this);
  if (result)
  {
    v13 = result;
    ++result[2];
    v14 = (IntSize)WebCore::ScrollView::contentsSize((WebCore::ScrollView *)result);
    result = (_DWORD *)WebCore::ViewportConfiguration::setContentsSize((WebCore::ViewportConfiguration *)(this + 118), &v14);
    if ((_DWORD)result)
      result = WebKit::WebPage::viewportConfigurationChanged((uint64_t)this, 0);
    if (v13[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  --*v2;
  return result;
}

unsigned __int8 *WebKit::WebPage::viewportConfigurationChanged(uint64_t a1, char a2)
{
  WebCore::ViewportConfiguration *v4;
  double v5;
  double v6;
  float *v7;
  float v8;
  double v9;
  uint64_t v10;
  float v11;
  uint64_t v13;
  BOOL v14;
  WebCore::Settings *v15;
  unint64_t v16;
  WebCore::LocalFrame *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  WebCore::Page *v24;
  double v25;
  unsigned __int8 *result;
  WebCore::ScrollView *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  WTF::MonotonicTime *v34;
  uint64_t v35;
  uint64_t v36;
  const WebCore::LayoutRect *v37;
  IntSize v38;
  float v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  IntSize v43;
  _QWORD v44[2];
  IntRect v45;
  uint64_t v46;
  IntPoint v47;

  v4 = (WebCore::ViewportConfiguration *)(a1 + 944);
  WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(a1 + 944));
  v6 = v5;
  WebCore::ViewportConfiguration::initialScaleIgnoringContentSize(v4);
  v7 = *(float **)(a1 + 48);
  v8 = v7[115];
  *(float *)&v9 = v9;
  WebCore::Page::setInitialScaleIgnoringContentSize((WebCore::Page *)v7, *(float *)&v9);
  v10 = *(_QWORD *)(a1 + 48);
  if ((~*(_QWORD *)(*(_QWORD *)(v10 + 112) + 712) & 0x500000000000) == 0)
  {
    v11 = *(float *)(v10 + 460);
    if (vabdd_f64(v8, v11) >= 0.00999999978 && (v8 < 1.0 || v11 < 1.0))
    {
      v13 = *(_QWORD *)(v10 + 160);
      v14 = v13 && *(_BYTE *)(v13 + 144) == 0;
      if (v14 && *(_QWORD *)(v13 + 288))
      {
        WebCore::TimerBase::start();
        v10 = *(_QWORD *)(a1 + 48);
      }
    }
  }
  v15 = *(WebCore::Settings **)(v10 + 112);
  v16 = *((_QWORD *)v15 + 89);
  if ((v16 & 0x200000000000) == 0 && v6 <= 1.0 != ((v16 >> 44) & 1))
    WebCore::Settings::setTextAutosizingEnabled(v15);
  v45.m_location = (IntPoint)WebCore::ViewportConfiguration::layoutSize(v4);
  if (WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)a1, (IntSize *)&v45))
    WebKit::WebPage::resetTextAutosizing(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 160));
  if (*(_BYTE *)(a1 + 1291) && (a2 & 1) == 0)
  {
    WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)a1, v17);
    v19 = v18 / *(float *)(*(_QWORD *)(a1 + 48) + 368);
    if (*(_BYTE *)(a1 + 1177))
    {
      WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)v4);
      v21 = v20 * 5.0;
    }
    else
    {
      v21 = *(double *)(a1 + 984);
    }
    WebCore::ViewportConfiguration::minimumScale(v4);
    if (v21 >= v19)
      v23 = v19;
    else
      v23 = v21;
    if (v23 >= v22)
      v6 = v23;
    else
      v6 = v22;
  }
  v24 = *(WebCore::Page **)(a1 + 48);
  WebCore::ViewportConfiguration::minimumScale(v4);
  *(float *)&v25 = v25;
  WebCore::Page::setZoomedOutPageScaleFactor(v24, *(float *)&v25);
  WebKit::WebPage::updateSizeForCSSDefaultViewportUnits((WebKit::WebPage *)a1);
  WebKit::WebPage::updateSizeForCSSSmallViewportUnits((WebKit::WebPage *)a1);
  WebKit::WebPage::updateSizeForCSSLargeViewportUnits((WebKit::WebPage *)a1);
  result = (unsigned __int8 *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
  {
    v27 = (WebCore::ScrollView *)result;
    v47 = (IntPoint)WebCore::ScrollableArea::visibleContentRect();
    if (!*(_BYTE *)(a1 + 1288))
    {
      v28 = 1.0 / v6;
      v29 = roundf(*(float *)(a1 + 1072) * v28);
      v30 = -2147500000.0;
      if (v29 > -2147500000.0)
        v30 = (float)(int)v29;
      if (v29 < 2147500000.0)
        v31 = v30;
      else
        v31 = 2147500000.0;
      v32 = roundf(*(float *)(a1 + 1076) * v28);
      v33 = 2147500000.0;
      if (v32 < 2147500000.0)
      {
        v33 = -2147500000.0;
        if (v32 > -2147500000.0)
          v33 = (float)(int)v32;
      }
      *(float *)&v45.m_location.m_x = v31;
      *(float *)&v45.m_location.m_y = v33;
      v34 = (WTF::MonotonicTime *)WebCore::ScrollView::setUnobscuredContentSize(v27, (const FloatSize *)&v45);
      WTF::MonotonicTime::now(v34);
      v45.m_location = 0;
      v45.m_size.m_width = 0;
      v46 = v35;
      WebCore::LocalFrameView::setScrollVelocity();
      if (!*(_BYTE *)(a1 + 1289))
      {
        v36 = *(_QWORD *)(a1 + 72);
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v44, &v47);
        v45.m_location = (IntPoint)v44[0];
        *(float *)&v45.m_size.m_width = v31;
        *(float *)&v45.m_size.m_height = v33;
        (*(void (**)(uint64_t, IntRect *))(*(_QWORD *)v36 + 168))(v36, &v45);
      }
    }
    result = WebKit::WebPage::scalePage((WebKit::WebPage *)a1, v6, (const WebCore::IntPoint *)&v47);
    if (!*(_BYTE *)(a1 + 1288))
    {
      v44[0] = WebCore::LocalFrameView::viewportConstrainedObjectsRect(v27);
      v44[1] = v37;
      v45.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v44, v37);
      v45.m_size = v38;
      WebCore::LocalFrameView::setCustomFixedPositionLayoutRect(v27, &v45);
      v39 = ceilf(*(float *)(a1 + 1064));
      if (v39 >= 2147500000.0)
      {
        v40 = 0x7FFFFFFFLL;
      }
      else if (v39 <= -2147500000.0)
      {
        v40 = 0x80000000;
      }
      else
      {
        v40 = (int)v39;
      }
      v41 = ceilf(*(float *)(a1 + 1068));
      if (v41 >= 2147500000.0)
      {
        v42 = 0x7FFFFFFF00000000;
      }
      else if (v41 <= -2147500000.0)
      {
        v42 = 0x8000000000000000;
      }
      else
      {
        v42 = (unint64_t)(int)v41 << 32;
      }
      v43 = (IntSize)(v42 | v40);
      return (unsigned __int8 *)WebCore::LocalFrameView::setCustomSizeForResizeEvent(v27, v43);
    }
  }
  return result;
}

WebCore::LocalFrameView *WebKit::WebPage::updateSizeForCSSDefaultViewportUnits(WebKit::WebPage *this)
{
  WebCore::LocalFrameView *result;
  WebCore::LocalFrameView *v3;
  float v4;
  float v5;
  double v6;
  float v7;
  float v8;

  result = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    v3 = result;
    ++*((_DWORD *)result + 2);
    v4 = *((float *)this + 32);
    if (v4 <= 0.0 || (v5 = *((float *)this + 33), v5 <= 0.0))
    {
      v4 = *((float *)this + 268);
      v5 = *((float *)this + 269);
    }
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 944));
    v7 = 1.0 / v6;
    *(float *)&v6 = v4 * v7;
    v8 = v5 * v7;
    result = (WebCore::LocalFrameView *)WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits(v3, *(FloatSize *)&v6);
    if (*((_DWORD *)v3 + 2) == 1)
      return (WebCore::LocalFrameView *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  return result;
}

WebCore::LocalFrameView *WebKit::WebPage::updateSizeForCSSSmallViewportUnits(WebKit::WebPage *this)
{
  WebCore::LocalFrameView *result;
  WebCore::LocalFrameView *v3;
  float v4;
  float v5;
  double v6;
  float v7;
  float v8;

  result = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    v3 = result;
    ++*((_DWORD *)result + 2);
    v4 = *((float *)this + 34);
    if (v4 <= 0.0 || (v5 = *((float *)this + 35), v5 <= 0.0))
    {
      v4 = *((float *)this + 268);
      v5 = *((float *)this + 269);
    }
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 944));
    v7 = 1.0 / v6;
    *(float *)&v6 = v4 * v7;
    v8 = v5 * v7;
    result = (WebCore::LocalFrameView *)WebCore::LocalFrameView::setSizeForCSSSmallViewportUnits(v3, *(FloatSize *)&v6);
    if (*((_DWORD *)v3 + 2) == 1)
      return (WebCore::LocalFrameView *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::localMainFrameView(WebKit::WebPage *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 160);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
    if (result)
    {
      v3 = result;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 704))(result))
        return 0;
      else
        return v3;
    }
  }
  return result;
}

WebCore::LocalFrameView *WebKit::WebPage::updateSizeForCSSLargeViewportUnits(WebKit::WebPage *this)
{
  WebCore::LocalFrameView *result;
  WebCore::LocalFrameView *v3;
  float v4;
  float v5;
  double v6;
  float v7;
  float v8;

  result = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    v3 = result;
    ++*((_DWORD *)result + 2);
    v4 = *((float *)this + 36);
    if (v4 <= 0.0 || (v5 = *((float *)this + 37), v5 <= 0.0))
    {
      v4 = *((float *)this + 268);
      v5 = *((float *)this + 269);
    }
    WebCore::ViewportConfiguration::initialScaleIgnoringContentSize((WebKit::WebPage *)((char *)this + 944));
    v7 = 1.0 / v6;
    *(float *)&v6 = v4 * v7;
    v8 = v5 * v7;
    result = (WebCore::LocalFrameView *)WebCore::LocalFrameView::setSizeForCSSLargeViewportUnits(v3, *(FloatSize *)&v6);
    if (*((_DWORD *)v3 + 2) == 1)
      return (WebCore::LocalFrameView *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  return result;
}

unsigned __int8 *WebKit::WebPage::scalePage(WebKit::WebPage *this, double a2, const WebCore::IntPoint *a3)
{
  double v6;
  void *v7;
  double v8;
  double v9;
  uint64_t v10;
  unsigned __int8 *v11;
  float *v12;
  unsigned __int8 *result;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  IPC::Encoder *v29;
  uint64_t v30;

  v6 = *(float *)(*((_QWORD *)this + 6) + 368) * a2;
  WebKit::WebPage::totalScaleFactor(this, a3);
  v9 = v8;
  if (v6 != v8)
  {
    if (!*((_BYTE *)this + 1493))
    {
      v10 = *((_QWORD *)this + 187);
      if (v10)
      {
        *((_QWORD *)this + 187) = 0;
        WTF::fastFree((WTF *)(v10 - 16), v7);
      }
    }
    *((_BYTE *)this + 1290) = 0;
  }
  v11 = (unsigned __int8 *)WebKit::WebPage::mainFramePlugIn(this, (WebCore::LocalFrame *)v7);
  v12 = (float *)*((_QWORD *)this + 6);
  if (v11)
  {
    if (v12[89] != 1.0)
      WebCore::Page::setPageScaleFactor((WebCore::Page *)v12, 1.0, (const IntPoint *)a3);
    return WebKit::PluginView::setPageScaleFactor(v11, *(_QWORD *)a3, 1u, v6);
  }
  else
  {
    v14 = v6;
    result = (unsigned __int8 *)WebCore::Page::setPageScaleFactor((WebCore::Page *)v12, v14, (const IntPoint *)a3);
    if (v6 != v9)
    {
      WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, &v29);
      v15 = *((_QWORD *)this + 20);
      if (v15)
      {
        v17 = *(unsigned int *)(v15 - 4);
        v16 = v15 + 8 * v17;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v24 = (char *)this + 160;
      v25 = v16;
      v26 = v16;
      v27 = v16;
      v28 = v15 + 8 * v17;
      WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
      while (v30 != v25)
      {
        WebKit::PluginView::setPageScaleFactor(*(unsigned __int8 **)(*(_QWORD *)v30 + 8), *(_QWORD *)a3, 1u, v6);
        WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
      }
      v18 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
      v19 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v19 = 1989;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v19 + 528) = v19 + 16;
      *(_QWORD *)(v19 + 536) = v19 + 16;
      *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v19 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
      v29 = (IPC::Encoder *)v19;
      *(double *)IPC::Encoder::grow((IPC::Encoder *)v19, 8uLL, 8) = a2;
      (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 4) + 32))((char *)this + 32, &v29, 0);
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v20);
        WTF::fastFree(v22, v23);
      }
      return (unsigned __int8 *)WebKit::WebPage::platformDidScalePage((uint64_t)this);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebPage::messageSenderDestinationID(WebKit::WebPage *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 8;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setFixedLayoutSize(WebKit::WebPage *this, IntSize *a2)
{
  WebCore::ScrollView *v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v4 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(this);
  if (!v4)
    return 0;
  v5 = v4;
  ++*((_DWORD *)v4 + 2);
  v6 = WebCore::ScrollView::fixedLayoutSize(v4);
  v7 = a2->m_width == (_DWORD)v6 && a2->m_height == HIDWORD(v6);
  v8 = !v7;
  if (!v7)
  {
    WebCore::ScrollView::setFixedLayoutSize(v5, a2);
    v10 = *((_QWORD *)this + 4);
    v9 = (char *)this + 32;
    v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1936;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v18 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, a2);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v18, 0);
    v14 = v18;
    v18 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v15, v16);
    }
  }
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  return v8;
}

_QWORD *WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = v5;
  v6 = *a1;
  if (*a1)
  {
    v8 = *((unsigned int *)v6 - 1);
    v7 = &v6[v8];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  a2[3] = v7;
  a2[4] = &v6[v8];
  return WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a2);
}

uint64_t WebKit::WebPage::platformDidScalePage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 72);
  if (*(_BYTE *)(v1 + 24))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 248);
    v3 = *(_QWORD *)(this + 1568);
    if (!*(_BYTE *)(this + 1672))
      *(_BYTE *)(this + 1672) = 1;
    *(_QWORD *)(this + 1656) = v2;
    *(_QWORD *)(this + 1664) = v3;
  }
  return this;
}

void WebKit::RemoteLayerTreeDrawingArea::setExposedContentRect(WebKit::RemoteLayerTreeDrawingArea *this, const FloatRect *a2)
{
  uint64_t v4;
  WebKit::WebPage *v5;
  WebCore::ScrollView *v6;
  WebCore::ScrollView *v7;
  __n128 v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  BOOL v13;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v4)
    v5 = (WebKit::WebPage *)(v4 - 16);
  else
    v5 = 0;
  v6 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(v5);
  if (v6)
  {
    v7 = v6;
    ++*((_DWORD *)v6 + 2);
    WebCore::ScrollView::exposedContentRect(v6);
    v12 = v8.n128_f32[0] == a2->m_location.m_x && v9 == a2->m_location.m_y;
    if (!v12
      || ((v8.n128_u32[0] = LODWORD(a2->m_size.m_width), v10 == v8.n128_f32[0])
        ? (v13 = v11 == a2->m_size.m_height)
        : (v13 = 0),
          !v13))
    {
      WebCore::ScrollView::setExposedContentRect(v7, a2);
      v8.n128_f64[0] = WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
    }
    if (*((_DWORD *)v7 + 2) == 1)
      (*(void (**)(WebCore::ScrollView *, __n128))(*(_QWORD *)v7 + 8))(v7, v8);
    else
      --*((_DWORD *)v7 + 2);
  }
}

void sub_196C2FA64(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

double WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(WebKit::RemoteLayerTreeDrawingArea *this)
{
  double result;

  if (*((_BYTE *)this + 224))
  {
    *((_BYTE *)this + 225) = 1;
  }
  else if ((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) == 0
         || (result = *(double *)((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::WebPage::resetTextAutosizing(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RenderElement *v3;

  if (this)
  {
    v1 = this;
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v2 = *(_QWORD *)(v1 + 296);
        if (v2)
        {
          v3 = *(WebCore::RenderElement **)(v2 + 1944);
          if (v3)
            WebCore::RenderElement::resetTextAutosizing(v3);
        }
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didLayoutForFrame(uint64_t this, WebKit::WebPage *a2, WebFrame *a3)
{
  uint64_t (*v3)(_QWORD, WebFramePrivate *, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, WebFramePrivate *, _QWORD))(this + 168);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3->_private, *(_QWORD *)(this + 16));
  return this;
}

void didLayoutForFrame(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a3 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didLayoutForFrame:", a3, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C2FBC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::SetCanShortCircuitHorizontalWheelEvents>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2030;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::didLoadFromRegistrableDomain(uint64_t a1, WTF **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              WebKit::WebPage::didLoadFromRegistrableDomain(v8 - 16, a2);
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

unsigned int *WebKit::WebResourceLoadObserver::logSubresourceLoading(unsigned int *result, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceResponseBase *this, int a5)
{
  WebKit::WebResourceLoadObserver *v5;
  uint64_t v7;
  _BOOL4 v11;
  const WTF::URL *v12;
  uint64_t v13;
  const WTF::URL *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  const WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  _BYTE v39[24];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;

  if (a2)
  {
    v5 = (WebKit::WebResourceLoadObserver *)result;
    if (!*((_BYTE *)result + 8))
    {
      v7 = *(_QWORD *)(a2 + 24);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
        {
          v11 = (int)WebCore::ResourceResponseBase::httpStatusCode(this) >= 300
             && (int)WebCore::ResourceResponseBase::httpStatusCode(this) < 400;
          v12 = (const WTF::URL *)WebCore::ResourceResponseBase::url(this);
          result = (unsigned int *)WebCore::ResourceRequestBase::url(a3);
          v13 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8);
          if (v13)
          {
            if (!*(_BYTE *)(v13 + 144))
            {
              v14 = (const WTF::URL *)result;
              v15 = (unsigned int *)(v13 + 8);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
              v17 = *(_QWORD *)(v13 + 296);
              v18 = *(WTF::StringImpl **)(v17 + 736);
              if (v18)
                *(_DWORD *)v18 += 2;
              v43 = v18;
              v19 = v17 + 736;
              v20 = *(_OWORD *)(v19 + 24);
              v44 = *(_OWORD *)(v19 + 8);
              v45 = v20;
              v21 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)result);
              v23 = v22;
              v24 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)&v43);
              if ((_DWORD)v23)
              {
                if (!WTF::operator==(v21, v23, v24, (uint64_t)v25))
                {
                  if (!v11 || (v27 = (unsigned __int8 *)WTF::URL::host(v12), !WTF::operator==(v21, v23, v27, v28)))
                  {
                    WebCore::RegistrableDomain::RegistrableDomain(&v42, v14);
                    WebCore::RegistrableDomain::RegistrableDomain(&v41, (const WTF::URL *)&v43);
                    WebCore::RegistrableDomain::RegistrableDomain(&v40, v12);
                    if ((WTF::equal(v42, v41, v29) & 1) == 0 && (!v11 || (WTF::equal(v42, v40, v30) & 1) == 0))
                    {
                      v34 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v42);
                      WTF::WallTime::now(v34);
                      WebCore::ResourceLoadStatistics::reduceTimeResolution();
                      *((_QWORD *)v34 + 1) = v35;
                      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v34 + 13, &v41, (uint64_t)v39);
                      WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2 && a5)
                      {
                        v36 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v41);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v36 + 11, &v42, (uint64_t)v39);
                        WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      }
                      if (v11)
                      {
                        v37 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v40);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v37 + 14, &v42, (uint64_t)v39);
                        v38 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v42);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v38 + 15, &v40, (uint64_t)v39);
                        WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      }
                    }
                    v31 = v40;
                    v40 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, v25);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    v32 = v41;
                    v41 = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2)
                        WTF::StringImpl::destroy(v32, v25);
                      else
                        *(_DWORD *)v32 -= 2;
                    }
                    v33 = v42;
                    v42 = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, v25);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                  }
                }
              }
              v26 = v43;
              v43 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v25);
                else
                  *(_DWORD *)v26 -= 2;
              }
              return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::didLoadFromRegistrableDomain(uint64_t a1, WTF **a2)
{
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9[5];
  WTF::StringImpl *v10;

  WebKit::WebFrame::url(*(WebKit::WebFrame **)(a1 + 88), (uint64_t)v9);
  WebCore::RegistrableDomain::RegistrableDomain(&v10, (const WTF::URL *)v9);
  v6 = WTF::equal(*a2, v10, v4);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v6 & 1) == 0)
    return (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 2224), a2, (uint64_t)v9);
  return result;
}

WTF::StringImpl **WebCore::RegistrableDomain::RegistrableDomain(WTF::StringImpl **this, const WTF::URL *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[2];

  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::RegistrableDomain::registrableDomainFromHost((WebCore::RegistrableDomain *)&v8, v9);
  if (v9[0] && *((_DWORD *)v9[0] + 1))
  {
    *this = v9[0];
    v9[0] = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v9[0];
    *this = v9[1];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return this;
}

void sub_196C301BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::RegistrableDomain::RegistrableDomain(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a2;
  if (*a2 && *(_DWORD *)(v3 + 4))
  {
    *a2 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v5;
  }
  *a1 = v3;
  return a1;
}

WTF::StringImpl *WebCore::RegistrableDomain::registrableDomainFromHost@<X0>(WebCore::RegistrableDomain *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WebCore::PublicSuffixStore::singleton(this);
  result = (WTF::StringImpl *)WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    if (!*a2 || !*((_DWORD *)*a2 + 1))
      return (WTF::StringImpl *)WTF::String::operator=(a2, this);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = *a2;
    *a2 = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C30340(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF **v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v7;
  v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        v12 = v9;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*v9, *a2, v11);
        if ((_DWORD)result)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(unsigned int *)(v15 - 4);
          else
            v16 = 0;
          v17 = 0;
          v18 = v15 + 8 * v16;
          goto LABEL_10;
        }
      }
      v8 = (v8 + v13) & v7;
      v9 = (WTF **)(v6 + 8 * v8);
      ++v13;
    }
    while (!WTF::equal(*v9, 0, v11));
    if (v12)
    {
      *v12 = 0;
      --*(_DWORD *)(*a1 - 16);
      v9 = v12;
    }
  }
  result = (uint64_t)WTF::String::operator=(v9, (WTF::StringImpl *)a2);
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_24;
LABEL_28:
    result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v9);
    v9 = (WTF **)result;
    v21 = *a1;
    if (*a1)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
    goto LABEL_24;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_28;
LABEL_24:
  v18 = v21 + 8 * v24;
  v17 = 1;
LABEL_10:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF **v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  WTF **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v7;
  v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        v21 = v9;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*v9, *a2, v11);
        if ((_DWORD)result)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(unsigned int *)(v23 - 4);
          else
            v24 = 0;
          v20 = 0;
          v19 = v23 + 8 * v24;
          goto LABEL_12;
        }
      }
      v8 = (v8 + v22) & v7;
      v9 = (WTF **)(v6 + 8 * v8);
      ++v22;
    }
    while (!WTF::equal(*v9, 0, v11));
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a1 - 16);
      v9 = v21;
    }
  }
  result = (uint64_t)WTF::String::operator=(v9, (WTF::StringImpl *)a2);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_11;
LABEL_26:
    result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v9);
    v9 = (WTF **)result;
    v15 = *a1;
    if (*a1)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_26;
LABEL_11:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_12:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
  return result;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash(WTF::ASCIICaseInsensitiveHash *this, const WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 1);
  if ((*((_BYTE *)this + 16) & 4) == 0)
    return WTF::ASCIICaseInsensitiveHash::hash<char16_t>(v3, v4);
  v5 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::ASCIICaseInsensitiveHash::FoldCase>(v3, v4);
  v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
  v8 = (v7 ^ (v7 << 10)) & 0xFFFFFF;
  if (v8)
    return v8;
  else
    return 0x800000;
}

unsigned int *WebKit::WebFrame::url@<X0>(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(_DWORD **)(*(_QWORD *)(v4 + 280) + 88);
    if (v8)
    {
      ++v8[6];
      v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 218));
      v10 = *(_DWORD **)v9;
      if (*(_QWORD *)v9)
        *v10 += 2;
      *(_QWORD *)a2 = v10;
      v11 = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(a2 + 8) = v11;
      if (v8[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
      else
        --v8[6];
    }
    else
    {
      *(_QWORD *)a2 = 0;
      WTF::URL::invalidate((WTF::URL *)a2);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    return (unsigned int *)WTF::URL::invalidate((WTF::URL *)a2);
  }
}

uint64_t WebKit::WebPage::mainFramePlugIn(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 160);
  if (!v3 || *(_BYTE *)(v3 + 144))
    return 0;
  v5 = (unsigned int *)(v3 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WebKit::WebPage::pluginViewForFrame(v3, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  return v7;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34AEA40;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::WebPage::pluginViewForFrame(uint64_t this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (this)
  {
    v2 = *(_QWORD *)(this + 296);
    if (v2 && (*(_WORD *)(v2 + 3358) & 8) != 0)
    {
      *(_DWORD *)(v2 + 24) += 2;
      this = WebCore::PluginDocument::pluginWidget((WebCore::PluginDocument *)v2);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        v3 = this;
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
        return v3;
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return this;
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int8x16_t *v4;
  unsigned int v5;
  _BOOL8 result;
  int8x16_t *v8;
  unsigned int v9;
  __int32 v10;
  unsigned __int8 *v11;
  __int32 v12;
  BOOL v13;
  int16x8_t *v14;
  unsigned int v15;
  uint8x8_t *v16;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;
  uint8x8_t *v21;
  unsigned int v22;
  uint16x8_t v23;
  unsigned int v24;
  uint16x8_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint16x8_t v29;
  uint8x16_t v30;
  unsigned int v31;
  unsigned int v32;
  uint8x16_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int32 v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  __int32 v51;
  uint64_t v52;
  int v53;
  int v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  BOOL v58;

  result = (_DWORD)a2 == (_DWORD)a4 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != (_DWORD)a4)
    return result;
  if (!(_DWORD)a2)
    return 1;
  v8 = (int8x16_t *)(a4 & 0xFF00000000);
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v8)
    {
      if ((_DWORD)a4)
      {
        if (*a1 != *a3)
          return 0;
        v5 = a4 - 1;
        if ((_DWORD)a4 != 1)
        {
          v4 = (int8x16_t *)(a1 + 1);
          v8 = (int8x16_t *)(a3 + 1);
          if ((_DWORD)a4 != 2)
          {
            v9 = 32 - __clz(a4 - 2);
            if (v9 != 3)
            {
              switch(v9)
              {
                case 1u:
                  goto LABEL_60;
                case 2u:
                  if (v4->u16[0] != v8->u16[0])
                    return 0;
                  v10 = *(unsigned __int16 *)&a1[a4 - 2];
                  v12 = *(unsigned __int16 *)&a3[a4 - 2];
                  return v10 == v12;
                case 4u:
                  if (v4->i64[0] != v8->i64[0])
                    return 0;
                  v27 = *(_QWORD *)&a1[a4 - 8];
                  v28 = &a3[a4];
                  return v27 == *((_QWORD *)v28 - 1);
                case 5u:
                  v29 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
                  v29.i8[0] = vminvq_u8((uint8x16_t)v29);
                  return v29.i32[0] != 0;
                default:
                  v30 = (uint8x16_t)vceqq_s8(*v4, *v8);
                  v30.i8[0] = vminvq_u8(v30);
                  if (!v30.i32[0])
                    return 0;
                  if (v5 < 0x10)
                    return 1;
                  goto LABEL_62;
              }
            }
            if (v4->i32[0] == v8->i32[0])
            {
              v10 = *(_DWORD *)&a1[a4 - 4];
              v11 = &a3[a4];
LABEL_16:
              v12 = *((_DWORD *)v11 - 1);
              return v10 == v12;
            }
            return 0;
          }
          v10 = v4->u8[0];
          v12 = v8->u8[0];
          return v10 == v12;
        }
        return 1;
      }
      goto LABEL_61;
    }
    if ((_DWORD)a4)
    {
      if (*(_WORD *)a3 != *a1)
        return 0;
      v21 = (uint8x8_t *)(a1 + 1);
      v22 = a4 - 1;
      v14 = (int16x8_t *)(a3 + 2);
      if ((a4 - 1) >= 8)
      {
        v23 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v21));
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0])
          return 0;
        v24 = v22 & 7;
        do
        {
          v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v24), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v21 + v24)));
          v25.i16[0] = vminvq_u16(v25);
          result = v25.i32[0] != 0;
          v24 += 8;
          if (v25.i32[0])
            v26 = v24 >= v22;
          else
            v26 = 1;
        }
        while (!v26);
        return result;
      }
      if (v22 >= 4)
      {
        v35 = (v21->u32[0] | ((unint64_t)v21->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v13 = ((v35 | (v35 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
        v36 = v22 & 3;
        v37 = (*(unsigned int *)((char *)v21->u32 + v36) | ((unint64_t)*(unsigned int *)((char *)v21->u32 + v36) << 16)) & 0xFFFF0000FFFFLL;
        v38 = (v37 | (v37 << 8)) & 0xFF00FF00FF00FFLL;
        v39 = *(uint64_t *)((char *)v14->i64 + 2 * v36);
        return v13 && v38 == v39;
      }
      if (v22 >= 2)
      {
        v45 = (v21->u16[0] | (v21->u16[0] << 8)) & 0xFF00FF;
        v46 = v14->i32[0];
        v47 = v22 & 1;
        v48 = (*(unsigned __int16 *)((char *)v21->u16 + v47) | (*(unsigned __int16 *)((char *)v21->u16 + v47) << 8)) & 0xFF00FF;
        v49 = *(__int32 *)((char *)v14->i32 + 2 * v47);
        return v45 == v46 && v48 == v49;
      }
      if ((_DWORD)a4 != 2)
        return 1;
      v12 = v21->u8[0];
LABEL_89:
      v10 = v14->u16[0];
      return v10 == v12;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    v32 = v5 & 0xF;
    do
    {
      v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v32), *(int8x16_t *)((char *)v8 + v32));
      v33.i8[0] = vminvq_u8(v33);
      result = v33.i32[0] != 0;
      v32 += 16;
      if (v33.i32[0])
        v34 = v32 >= v5;
      else
        v34 = 1;
    }
    while (!v34);
    return result;
  }
  if (v8)
  {
    if (!(_DWORD)a4)
      goto LABEL_61;
    if (*(_WORD *)a1 != *a3)
      return 0;
    v14 = (int16x8_t *)(a1 + 2);
    v15 = a4 - 1;
    v16 = (uint8x8_t *)(a3 + 1);
    if ((a4 - 1) < 8)
    {
      if (v15 >= 4)
      {
        v40 = (v16->u32[0] | ((unint64_t)v16->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        v13 = ((v40 | (v40 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
        v41 = v15 & 3;
        v42 = (*(unsigned int *)((char *)v16->u32 + v41) | ((unint64_t)*(unsigned int *)((char *)v16->u32 + v41) << 16)) & 0xFFFF0000FFFFLL;
        v43 = (v42 | (v42 << 8)) & 0xFF00FF00FF00FFLL;
        v44 = *(uint64_t *)((char *)v14->i64 + 2 * v41);
        return v13 && v43 == v44;
      }
      if (v15 >= 2)
      {
        v50 = (v16->u16[0] | (v16->u16[0] << 8)) & 0xFF00FF;
        v51 = v14->i32[0];
        v52 = v15 & 1;
        v53 = (*(unsigned __int16 *)((char *)v16->u16 + v52) | (*(unsigned __int16 *)((char *)v16->u16 + v52) << 8)) & 0xFF00FF;
        v54 = *(__int32 *)((char *)v14->i32 + 2 * v52);
        return v50 == v51 && v53 == v54;
      }
      if ((_DWORD)a4 != 2)
        return 1;
      v12 = v16->u8[0];
      goto LABEL_89;
    }
    v17 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v16));
    v17.i16[0] = vminvq_u16(v17);
    if (!v17.i32[0])
      return 0;
    v18 = v15 & 7;
    do
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v16 + v18)));
      v19.i16[0] = vminvq_u16(v19);
      result = v19.i32[0] != 0;
      v18 += 8;
      if (v19.i32[0])
        v20 = v18 >= v15;
      else
        v20 = 1;
    }
    while (!v20);
  }
  else
  {
    if (!(_DWORD)a4)
      goto LABEL_61;
    if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a3)
      return 0;
    v31 = a4 - 1;
    if ((_DWORD)a4 == 1)
      return 1;
    v4 = (int8x16_t *)(a1 + 2);
    v8 = (int8x16_t *)(a3 + 2);
    if ((_DWORD)a4 == 2)
    {
LABEL_60:
      v10 = v4->u16[0];
      v12 = v8->u16[0];
      return v10 == v12;
    }
    switch(31 - __clz(a4 - 2))
    {
      case 0u:
        v10 = v4->i32[0];
        v12 = v8->i32[0];
        return v10 == v12;
      case 1u:
        if (v4->i32[0] != v8->i32[0])
          return 0;
        v10 = *(_DWORD *)&a1[2 * a4 - 4];
        v11 = &a3[2 * a4];
        goto LABEL_16;
      case 2u:
        if (v4->i64[0] != v8->i64[0])
          return 0;
        v27 = *(_QWORD *)&a1[2 * a4 - 8];
        v28 = &a3[2 * a4];
        return v27 == *((_QWORD *)v28 - 1);
      case 3u:
        v29 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&a1[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(a1 + 2), *(int16x8_t *)(a3 + 2)));
        v29.i16[0] = vminvq_u16(v29);
        return v29.i32[0] != 0;
      default:
        v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, *(int16x8_t *)v8);
        v55.i16[0] = vminvq_u16(v55);
        if (!v55.i32[0])
          return 0;
        if (v31 < 8)
          return 1;
        v56 = v31 & 7;
        do
        {
          v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v4 + 2 * v56), *(int16x8_t *)((char *)v8 + 2 * v56));
          v57.i16[0] = vminvq_u16(v57);
          result = v57.i32[0] != 0;
          v56 += 8;
          if (v57.i32[0])
            v58 = v56 >= v31;
          else
            v58 = 1;
        }
        while (!v58);
        break;
    }
  }
  return result;
}

{
  int8x16_t *v4;
  int v6;
  int8x16_t *v7;
  _BOOL8 result;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int16x8_t *v14;
  unsigned int v15;
  uint8x8_t *v16;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;
  uint8x16_t v21;
  uint8x16_t v22;
  unsigned int v23;
  uint8x16_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int32 v32;
  uint64_t v33;
  int v34;
  int v35;

  v6 = a4 - 1;
  if (!a4)
    v6 = 0;
  v7 = (int8x16_t *)(a1 == a3);
  result = (_DWORD)a2 == v6 && a1 == a3;
  if (a1 == a3 || (_DWORD)a2 != v6)
    return result;
  if (!(_DWORD)a2)
    return 1;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!v6)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      v11 = v4->u16[0];
      v12 = v7->u16[0];
      return v11 == v12;
    }
    if (*(_WORD *)a1 != *a3)
      return 0;
    v14 = (int16x8_t *)(a1 + 2);
    v15 = v6 - 1;
    v16 = (uint8x8_t *)(a3 + 1);
    if (v15 >= 8)
    {
      v17 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v16));
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        return 0;
      v18 = v15 & 7;
      do
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v16 + v18)));
        v19.i16[0] = vminvq_u16(v19);
        result = v19.i32[0] != 0;
        v18 += 8;
        if (v19.i32[0])
          v20 = v18 >= v15;
        else
          v20 = 1;
      }
      while (!v20);
      return result;
    }
    if (v15 >= 4)
    {
      v26 = (v16->u32[0] | ((unint64_t)v16->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v13 = ((v26 | (v26 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
      v27 = v15 & 3;
      v28 = (*(unsigned int *)((char *)v16->u32 + v27) | ((unint64_t)*(unsigned int *)((char *)v16->u32 + v27) << 16)) & 0xFFFF0000FFFFLL;
      v29 = (v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL;
      v30 = *(uint64_t *)((char *)v14->i64 + 2 * v27);
      return v13 && v29 == v30;
    }
    if (v15 >= 2)
    {
      v31 = (v16->u16[0] | (v16->u16[0] << 8)) & 0xFF00FF;
      v32 = v14->i32[0];
      v33 = v15 & 1;
      v34 = (*(unsigned __int16 *)((char *)v16->u16 + v33) | (*(unsigned __int16 *)((char *)v16->u16 + v33) << 8)) & 0xFF00FF;
      v35 = *(__int32 *)((char *)v14->i32 + 2 * v33);
      return v31 == v32 && v34 == v35;
    }
    if (v15 == 1)
    {
      v12 = v16->u8[0];
      v11 = v14->u16[0];
      return v11 == v12;
    }
    return 1;
  }
  if (!v6)
    goto LABEL_37;
  if (*a1 != *a3)
    return 0;
  v9 = v6 - 1;
  if (v6 == 1)
    return 1;
  v4 = (int8x16_t *)(a1 + 1);
  v7 = (int8x16_t *)(a3 + 1);
  if (v6 == 2)
  {
    v11 = v4->u8[0];
    v12 = v7->u8[0];
    return v11 == v12;
  }
  v10 = 32 - __clz(v6 - 2);
  if (v10 == 3)
  {
    if (v4->i32[0] == v7->i32[0])
    {
      v11 = *(_DWORD *)&a1[v6 - 4];
      v12 = *(_DWORD *)&a3[v6 - 4];
      return v11 == v12;
    }
    return 0;
  }
  switch(v10)
  {
    case 1u:
      goto LABEL_38;
    case 2u:
      if (v4->u16[0] != v7->u16[0])
        return 0;
      v11 = *(unsigned __int16 *)&a1[v6 - 2];
      v12 = *(unsigned __int16 *)&a3[v6 - 2];
      return v11 == v12;
    case 4u:
      if (v4->i64[0] != v7->i64[0])
        return 0;
      return *(_QWORD *)&a1[v6 - 8] == *(_QWORD *)&a3[v6 - 8];
    case 5u:
      v21 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v6 - 16], *(int8x16_t *)&a3[v6 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v21.i8[0] = vminvq_u8(v21);
      return v21.i32[0] != 0;
    default:
      v22 = (uint8x16_t)vceqq_s8(*v4, *v7);
      v22.i8[0] = vminvq_u8(v22);
      if (!v22.i32[0])
        return 0;
      if (v9 < 0x10)
        return 1;
      v23 = v9 & 0xF;
      do
      {
        v24 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v23), *(int8x16_t *)((char *)v7 + v23));
        v24.i8[0] = vminvq_u8(v24);
        result = v24.i32[0] != 0;
        v23 += 16;
        if (v24.i32[0])
          v25 = v23 >= v9;
        else
          v25 = 1;
      }
      while (!v25);
      break;
  }
  return result;
}

WTF *WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  int v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  WTF *result;

  if (!*((_BYTE *)this + 8))
  {
    v3 = (uint64_t *)((char *)this + 16);
    v4 = *((_QWORD *)this + 2);
    if (v4
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 2, 0), (v4 = *v3) != 0))
    {
      v5 = *(_DWORD *)(v4 - 8);
    }
    else
    {
      v5 = 0;
    }
    v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
    v7 = (WTF **)(v4 + 16 * v6);
    if ((WTF::equal(*v7, 0, v8) & 1) == 0)
    {
      v10 = 0;
      v11 = 1;
      do
      {
        if (*v7 == (WTF *)-1)
        {
          v10 = v7;
        }
        else if ((WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) != 0)
        {
          return v7[1];
        }
        v6 = (v6 + v11) & v5;
        v7 = (WTF **)(v4 + 16 * v6);
        ++v11;
      }
      while (!WTF::equal(*v7, 0, v9));
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(*v3 - 16);
        v7 = v10;
      }
    }
    WTF::String::operator=(v7, (WTF::StringImpl *)a2);
    v12 = WTF::fastMalloc((WTF *)0xC8);
    v13 = *a2;
    if (*a2)
      *(_DWORD *)v13 += 2;
    *(_QWORD *)v12 = v13;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0xBFF0000000000000;
    *(_BYTE *)(v12 + 32) = 0;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 65) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 114) = 0u;
    *(_OWORD *)(v12 + 132) = 0u;
    *(_OWORD *)(v12 + 148) = 0u;
    *(_OWORD *)(v12 + 161) = 0u;
    *(_QWORD *)(v12 + 184) = 0;
    *(_QWORD *)(v12 + 192) = 0;
    std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v7 + 1, (WTF::StringImpl *)v12);
    v14 = *v3;
    if (*v3)
      v15 = *(_DWORD *)(v14 - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *v3;
    if (*v3)
      v17 = *(_DWORD *)(v16 - 12);
    else
      v17 = 0;
    v18 = (*(_DWORD *)(v16 - 16) + v17);
    v19 = *(unsigned int *)(v16 - 4);
    if (v19 > 0x400)
    {
      if (v19 > 2 * v18)
        return v7[1];
    }
    else if (3 * v19 > 4 * v18)
    {
      return v7[1];
    }
    v7 = (WTF **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v3, v7);
    return v7[1];
  }
  result = (WTF *)93;
  __break(0xC471u);
  return result;
}

double WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(WebKit::WebResourceLoadObserver *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 2);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      WebCore::TimerBase::start();
    }
  }
  else if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **result;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v12 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (WTF::StringImpl **)v6;
    do
    {
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::equal(*v15, 0, v11))
        {
          WebCore::RegistrableDomain::~RegistrableDomain(v15, v16);
        }
        else
        {
          v17 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(a1, v15);
          WebCore::RegistrableDomain::~RegistrableDomain(v15, v18);
          if (v15 == a3)
            v12 = v17;
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t **__copy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1(uint64_t a1, uint64_t a2)
{
  uint64_t **result;

  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 32), (uint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t IPC::Connection::platformOpen(IPC::Connection *this)
{
  ipc_space_t *v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  NSObject *v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  unsigned __int8 **v42;
  unsigned __int8 *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  unsigned __int8 **v50;
  unsigned __int8 *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[4];
  unsigned __int8 **v73;
  int v74;
  IPC::Encoder *v75[2];
  _QWORD handler[5];
  unsigned __int8 **v77;
  uint64_t v78;

  v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if (*((_BYTE *)this + 32))
  {
    IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), *((_DWORD *)this + 82));
  }
  else
  {
    result = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)this + 82);
    if ((_DWORD)result)
    {
      __break(0xC471u);
      return result;
    }
    mach_port_guard(*v2, *((_DWORD *)this + 82), (mach_port_context_t)this, 1);
    *((_BYTE *)this + 72) = 1;
    WTF::MachSendRight::createFromReceiveRight((WTF::MachSendRight *)*((unsigned int *)this + 82));
    IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), *((_DWORD *)this + 82));
    IPC::Connection::initializeSendSource(this);
    if (*((_DWORD *)this + 78) != -1)
    {
      v4 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v4 = 2819;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 528) = v4 + 16;
      *(_QWORD *)(v4 + 536) = v4 + 16;
      *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v4 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
      v75[0] = (IPC::Encoder *)v4;
      IPC::Encoder::addAttachment(v4, (unint64_t)&v78);
      IPC::Connection::sendMessageImpl((uint64_t)this, (uint64_t *)v75, 0, 0);
      v6 = v75[0];
      v75[0] = 0;
      if (v6)
      {
        IPC::Encoder::~Encoder(v6, v5);
        WTF::fastFree(v7, v8);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v78);
  }
  v9 = *((unsigned int *)this + 82);
  LODWORD(v75[0]) = 128;
  MEMORY[0x19AEB981C](*v2, v9, 1, v75, 1);
  v10 = dispatch_source_create(MEMORY[0x1E0C80D98], *((unsigned int *)this + 82), 0, *(dispatch_queue_t *)(*((_QWORD *)this + 8) + 16));
  v11 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v10;
  if (v11)
  {

    v10 = *((_QWORD *)this + 42);
  }
  v12 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN3IPC10Connection12platformOpenEv_block_invoke;
  handler[3] = &__block_descriptor_48_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0_e5_v8__0l;
  v75[0] = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v75[1], (unsigned __int8 **)this);
  handler[4] = v75[0];
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v77, (uint64_t **)&v75[1]);
  dispatch_source_set_event_handler(v10, handler);
  v13 = (unsigned __int8 **)v75[1];
  v75[1] = 0;
  if (v13)
  {
    v14 = *v13;
    if (__ldaxr(*v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
LABEL_13:
      v16 = *((_QWORD *)v14 + 1);
      v17 = v16 - 1;
      *((_QWORD *)v14 + 1) = v16 - 1;
      if (v16 == 1)
      {
        v66 = *((_QWORD *)v14 + 2);
        v18 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        v19 = v66 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, v14))
        {
LABEL_17:
          if (!v17)
          {
            v58 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v58 = off_1E34ACA48;
            *(_QWORD *)(v58 + 8) = v14;
            *(_QWORD *)(v58 + 16) = v18;
            *(_BYTE *)(v58 + 24) = v19;
            v78 = v58;
            WTF::ensureOnMainRunLoop();
            v59 = v78;
            v78 = 0;
            if (v59)
              (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          }
          goto LABEL_18;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      goto LABEL_17;
    }
    MEMORY[0x19AEABB3C](v14);
    goto LABEL_13;
  }
LABEL_18:
  v21 = *((_QWORD *)this + 42);
  v72[0] = v12;
  v72[1] = 3321888768;
  v72[2] = ___ZN3IPC10Connection12platformOpenEv_block_invoke_2;
  v72[3] = &__block_descriptor_48_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1_e5_v8__0l;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v75, (unsigned __int8 **)this);
  LODWORD(v75[1]) = *((_DWORD *)this + 82);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v73, (uint64_t **)v75);
  v74 = (int)v75[1];
  dispatch_source_set_cancel_handler(v21, v72);
  v22 = (unsigned __int8 **)v75[0];
  v75[0] = 0;
  if (!v22)
    goto LABEL_27;
  v23 = *v22;
  if (__ldaxr(*v22))
  {
    __clrex();
LABEL_21:
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_22;
  }
  if (__stxr(1u, v23))
    goto LABEL_21;
LABEL_22:
  v25 = *((_QWORD *)v23 + 1);
  v26 = v25 - 1;
  *((_QWORD *)v23 + 1) = v25 - 1;
  if (v25 == 1)
  {
    v67 = *((_QWORD *)v23 + 2);
    v27 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v23 + 3) = 0;
    v28 = v67 == 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v29 = __ldxr(v23);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stlxr(0, v23))
LABEL_60:
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  if (!v26)
  {
    v60 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v60 = off_1E34ACA48;
    *(_QWORD *)(v60 + 8) = v23;
    *(_QWORD *)(v60 + 16) = v27;
    *(_BYTE *)(v60 + 24) = v28;
    v78 = v60;
    WTF::ensureOnMainRunLoop();
    v61 = v78;
    v78 = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
LABEL_27:
  v30 = *((_QWORD *)this + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v75, (unsigned __int8 **)this);
  v75[1] = this;
  v31 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v31 = off_1E3508AF8;
  v32 = *(_OWORD *)v75;
  v75[0] = 0;
  *(_OWORD *)(v31 + 8) = v32;
  v71 = v31;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 32))(v30, &v71);
  v33 = v71;
  v71 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (unsigned __int8 **)v75[0];
  v75[0] = 0;
  if (v34)
  {
    v35 = *v34;
    if (__ldaxr(*v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, v35))
    {
LABEL_33:
      v37 = *((_QWORD *)v35 + 1);
      v38 = v37 - 1;
      *((_QWORD *)v35 + 1) = v37 - 1;
      if (v37 == 1)
      {
        v68 = *((_QWORD *)v35 + 2);
        v39 = *((_QWORD *)v35 + 3);
        *((_QWORD *)v35 + 3) = 0;
        v40 = v68 == 0;
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      v41 = __ldxr(v35);
      if (v41 == 1)
      {
        if (!__stlxr(0, v35))
        {
LABEL_37:
          if (!v38)
          {
            v62 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v62 = off_1E34ACA48;
            *(_QWORD *)(v62 + 8) = v35;
            *(_QWORD *)(v62 + 16) = v39;
            *(_BYTE *)(v62 + 24) = v40;
            v78 = v62;
            WTF::ensureOnMainRunLoop();
            v63 = v78;
            v78 = 0;
            if (v63)
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
          }
          goto LABEL_38;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v35);
      goto LABEL_37;
    }
    MEMORY[0x19AEABB3C](v35);
    goto LABEL_33;
  }
LABEL_38:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 56))(v30);
  v42 = v73;
  v73 = 0;
  if (!v42)
    goto LABEL_47;
  v43 = *v42;
  if (__ldaxr(*v42))
  {
    __clrex();
LABEL_41:
    result = MEMORY[0x19AEABB3C](v43);
    goto LABEL_42;
  }
  if (__stxr(1u, v43))
    goto LABEL_41;
LABEL_42:
  v45 = *((_QWORD *)v43 + 1);
  v46 = v45 - 1;
  *((_QWORD *)v43 + 1) = v45 - 1;
  if (v45 == 1)
  {
    v69 = *((_QWORD *)v43 + 2);
    v47 = *((_QWORD *)v43 + 3);
    *((_QWORD *)v43 + 3) = 0;
    v48 = v69 == 0;
  }
  else
  {
    v47 = 0;
    v48 = 0;
  }
  v49 = __ldxr(v43);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stlxr(0, v43))
LABEL_64:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v43);
  if (!v46)
  {
    v64 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v64 = off_1E34ACA48;
    *(_QWORD *)(v64 + 8) = v43;
    *(_QWORD *)(v64 + 16) = v47;
    *(_BYTE *)(v64 + 24) = v48;
    v75[0] = (IPC::Encoder *)v64;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v75[0];
    v75[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
LABEL_47:
  v50 = v77;
  v77 = 0;
  if (!v50)
    return result;
  v51 = *v50;
  if (__ldaxr(*v50))
  {
    __clrex();
LABEL_50:
    result = MEMORY[0x19AEABB3C](v51);
    goto LABEL_51;
  }
  if (__stxr(1u, v51))
    goto LABEL_50;
LABEL_51:
  v53 = *((_QWORD *)v51 + 1);
  v54 = v53 - 1;
  *((_QWORD *)v51 + 1) = v53 - 1;
  if (v53 == 1)
  {
    v70 = *((_QWORD *)v51 + 2);
    v55 = *((_QWORD *)v51 + 3);
    *((_QWORD *)v51 + 3) = 0;
    v56 = v70 == 0;
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  v57 = __ldxr(v51);
  if (v57 == 1)
  {
    if (!__stlxr(0, v51))
      goto LABEL_55;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v51);
LABEL_55:
  if (!v54)
  {
    v65 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v65 = off_1E34ACA48;
    *(_QWORD *)(v65 + 8) = v51;
    *(_QWORD *)(v65 + 16) = v55;
    *(_BYTE *)(v65 + 24) = v56;
    v75[0] = (IPC::Encoder *)v65;
    WTF::ensureOnMainRunLoop();
    result = (uint64_t)v75[0];
    v75[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196C31764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

void sub_196C317FC()
{
  JUMPOUT(0x196C317D4);
}

void sub_196C31804()
{
  JUMPOUT(0x196C317E4);
}

void sub_196C3180C()
{
  JUMPOUT(0x196C317E8);
}

void sub_196C31818()
{
  JUMPOUT(0x196C317ECLL);
}

void sub_196C31820()
{
  JUMPOUT(0x196C317F0);
}

unsigned __int8 ***WebKit::RemoteDisplayListRecorder::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v4;
  WebCore::GraphicsContext *v5;
  WebCore::GraphicsContext *v6;
  uint64_t **v7;
  WebCore::GraphicsContext *v8;
  WebCore::GraphicsContext *v9;
  WebCore::GraphicsContext *v10;
  WebCore::GraphicsContext *v11;
  WebCore::GraphicsContext *v12;
  WebCore::GraphicsContext *v13;
  WebCore::GraphicsContext *v14;
  void *v15;
  void *v16;
  WebCore::GraphicsContext *v17;
  void *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WebCore::GraphicsContext *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  int v39;
  char v40;
  char v41;
  WebCore::GraphicsContext *v42;
  void *v43;
  WTF *v44;
  unsigned int v45;
  BOOL v46;
  WebCore::GraphicsContext *v47;
  WebCore::GraphicsContext *v48;
  WebCore::GraphicsContext *v49;
  WebCore::GraphicsContext *v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  int v57;
  char v58;
  WebCore::GraphicsContext *v59;
  unint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  WebCore::GraphicsContext *v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  int v70;
  char v71;
  unsigned int v72;
  WebCore::GraphicsContext *v73;
  unsigned __int16 v74;
  WebCore::GraphicsContext *v75;
  unsigned __int16 v76;
  WebCore::GraphicsContext *v77;
  uint64_t v78;
  WebCore::GraphicsContext *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  char v86;
  WebCore::GraphicsContext *v87;
  WebCore::GraphicsContext *v88;
  unint64_t v89;
  char v90;
  WebCore::GraphicsContext *v91;
  WebCore::GraphicsContext *v92;
  WebCore::GraphicsContext *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::GraphicsContext *v100;
  WebCore::GraphicsContext *v101;
  void *v102;
  char v103;
  unsigned int v104;
  void *v105;
  uint64_t v106;
  WebCore::GraphicsContext *v107;
  void *v108;
  WebCore::GraphicsContext *v109;
  WebCore::GraphicsContext *v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int *v118;
  int v119;
  void *v120;
  char v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  void *v125;
  _DWORD *v126;
  _DWORD *v127;
  WebCore::GraphicsContext *v128;
  WebCore::GraphicsContext *v129;
  uint64_t v130;
  WebCore::GraphicsContext *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::GraphicsContext *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  char v159;
  void *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t *v177;
  void *v178;
  void *v179;
  void *v180;
  unint64_t v181;
  char *v182;
  unint64_t v183;
  char *v185;
  unint64_t v186;
  int v188;
  int v189;
  uint64_t v190;
  void *v191;
  char v192;
  WTF *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WebCore::GraphicsContext *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t m_colorAndFlags_low;
  _BYTE *v252;
  uint64_t (**v253)();
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t *v288;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  char v293;
  _BYTE v294[32];
  __int128 v295;
  uint64_t v296;
  char v297;
  int v298;
  char v299;
  int v300;
  char v301[64];
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  char v308;
  char v309[80];
  int v310;
  char v311;
  _QWORD v312[2];
  char v313;
  _BYTE v314[64];
  Color v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  char v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  char v326;
  _BYTE v327[96];
  _QWORD v328[2];
  char v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x319:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v268 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v268 & 0xFF00000000) != 0)
        WebKit::RemoteDisplayListRecorder::applyDeviceScaleFactor((WebKit::RemoteDisplayListRecorder *)v4, *(float *)&v268);
      goto LABEL_23;
    case 0x31A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      WebKit::RemoteDisplayListRecorder::applyFillPattern((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x31B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      WebKit::RemoteDisplayListRecorder::applyStrokePattern((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x31C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v130 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v130 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v294 = v130;
        v131 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::BeginTransparencyLayer::apply((WebCore::DisplayList::BeginTransparencyLayer *)v294, v131);
      }
      goto LABEL_23;
    case 0x31D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v254 = IPC::Decoder::decode<std::tuple<WebCore::CompositeMode>>((uint64_t *)a3);
      if ((v254 & 0xFFFFFF) >= 0x10000)
        WebKit::RemoteDisplayListRecorder::beginTransparencyLayerWithCompositeMode((uint64_t)v4, v254);
      goto LABEL_23;
    case 0x31E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      WebKit::RemoteDisplayListRecorder::clearDropShadow((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x31F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      WebKit::RemoteDisplayListRecorder::clearRect((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v294);
      goto LABEL_8;
    case 0x320:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      WebKit::RemoteDisplayListRecorder::clip((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v294);
      goto LABEL_8;
    case 0x321:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      WebKit::RemoteDisplayListRecorder::clipOut((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v294);
      goto LABEL_8;
    case 0x322:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[48])
      {
        *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
        v295 = *(_OWORD *)&v314[32];
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v138 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClipOutRoundedRect::apply((WebCore::DisplayList::ClipOutRoundedRect *)v294, v138);
      }
      goto LABEL_8;
    case 0x323:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v314, (unint64_t *)a3);
      if (!(_BYTE)v316)
        goto LABEL_44;
      WebKit::RemoteDisplayListRecorder::clipOutToPath((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::Path *)v314);
      goto LABEL_403;
    case 0x324:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::Path,void>::decode((unint64_t *)a3, v55, v294);
      if (v299
        || (v197 = *(_QWORD *)a3,
            v198 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v199 = *((_QWORD *)a3 + 3)) != 0)
        && v198
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v199 + 16))(v199, v197), v299))
      {
        v22 = IPC::Decoder::decode<WebCore::RotationDirection>(a3);
        if ((unsigned __int16)v22 <= 0xFFu)
        {
          v57 = 0;
          v314[0] = 0;
        }
        else
        {
          if (!v299)
            goto LABEL_377;
          v56 = v22;
          v314[8] = 0;
          LODWORD(v315.m_colorAndFlags) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v314[8], (uint64_t)&v294[8]);
          LOBYTE(v316) = v56;
          v57 = 1;
        }
        LOBYTE(v317) = v57;
        if (v299 && v298 != -1)
        {
          ((void (*)(uint64_t **, _BYTE *))off_1E34B4D38[v298])(&v288, &v294[8]);
          v57 = v317;
        }
        if (v57)
          goto LABEL_90;
      }
      else
      {
        v314[0] = 0;
        LOBYTE(v317) = 0;
      }
      v200 = *(_QWORD *)a3;
      v201 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v202 = *((_QWORD *)a3 + 3);
      if (!v202)
        goto LABEL_8;
      if (!v201)
        goto LABEL_8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v202 + 16))(v202, v200);
      if (!(_BYTE)v317)
        goto LABEL_8;
LABEL_90:
      v58 = v316;
      WebCore::Path::Path((WebCore::Path *)v294, (const WebCore::Path *)v314);
      v299 = v58;
      v59 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::ClipPath::apply((WebCore::DisplayList::ClipPath *)v294, v59);
      if (v298 != -1)
        ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v298])(&v288, &v294[8]);
      if ((_BYTE)v317)
      {
LABEL_19:
        if (LODWORD(v315.m_colorAndFlags) != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B4D38[LODWORD(v315.m_colorAndFlags)])(v294, &v314[8]);
      }
      goto LABEL_8;
    case 0x325:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[48])
      {
        *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
        v295 = *(_OWORD *)&v314[32];
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v101 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::ClipRoundedRect::apply((WebCore::DisplayList::ClipRoundedRect *)v294, v101);
      }
      goto LABEL_8;
    case 0x326:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[24])
        WebKit::RemoteDisplayListRecorder::clipToImageBuffer((uint64_t)v4, *(uint64_t *)v314, (__int128 *)&v314[8]);
      goto LABEL_44;
    case 0x327:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a3, (uint64_t)v314);
      if (!v314[48])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
      v295 = *(_OWORD *)&v314[32];
      v10 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::ConcatenateCTM::apply((WebCore::DisplayList::ConcatenateCTM *)v294, v10);
      goto LABEL_8;
    case 0x328:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v287, a2 + 4);
      IPC::Decoder::decode<WTF::Ref<WebCore::ControlPart,WTF::RawPtrTraits<WebCore::ControlPart>,WTF::DefaultRefDerefTraits<WebCore::ControlPart>>>((uint64_t *)a3, &v288, v111, v112, v113);
      if (!v289)
      {
        v314[0] = 0;
        v320 = 0;
        goto LABEL_197;
      }
      IPC::Decoder::decode<WebCore::FloatRoundedRect>((uint64_t)&v290, (unint64_t *)a3);
      if (!v293)
        goto LABEL_374;
      v114 = *((_QWORD *)a3 + 1);
      v115 = *(_QWORD *)a3;
      v116 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v114 >= v116 && v114 - v116 > 3)
      {
        v118 = (int *)(v115 + v116);
        *((_QWORD *)a3 + 2) = v118 + 1;
        if (v115)
        {
          v119 = *v118;
          v22 = IPC::Decoder::decode<WebCore::ControlStyle>((uint64_t *)a3, (uint64_t)v294);
          v121 = v296;
          if ((_BYTE)v296)
          {
            if (!v289)
              goto LABEL_377;
            *(_OWORD *)&v314[8] = v290;
            v122 = v288;
            v288 = 0;
            *(_QWORD *)v314 = v122;
            *(_OWORD *)&v314[24] = v291;
            *(_OWORD *)&v314[40] = v292;
            v315.m_colorAndFlags = *(_QWORD *)v294;
            v316 = *(_DWORD *)&v294[8];
            *(_DWORD *)&v314[56] = v119;
            WebCore::Color::Color();
            WebCore::Color::Color();
            v319 = v295;
            v121 = 1;
          }
          else
          {
            v314[0] = 0;
          }
          v320 = v121;
          std::__optional_destruct_base<WebCore::ControlStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v294, v120);
          goto LABEL_193;
        }
        v246 = v114;
        v247 = 0;
      }
      else
      {
        v246 = 0;
        v247 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v248 = *((_QWORD *)a3 + 3);
        if (v248)
        {
          if (v114)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v248 + 16))(v248, v115, v114);
            v247 = *(_QWORD *)a3;
            v246 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v246 = 0;
            v247 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v249 = *((_QWORD *)a3 + 3);
      if (v249 && v246)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, v247);
LABEL_374:
      v314[0] = 0;
      v320 = 0;
LABEL_193:
      if (v289)
      {
        v123 = v288;
        v288 = 0;
        if (v123)
        {
          if (*((_DWORD *)v123 + 2) == 1)
            (*(void (**)(uint64_t *))(*v123 + 8))(v123);
          else
            --*((_DWORD *)v123 + 2);
        }
      }
LABEL_197:
      if (v320
        || (v243 = *(_QWORD *)a3,
            v244 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v245 = *((_QWORD *)a3 + 3)) != 0)
        && v244
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v245 + 16))(v245, v243), v320))
      {
        v124 = *(_QWORD *)v314;
        *(_QWORD *)v314 = 0;
        *(_QWORD *)v294 = v124;
        WebKit::RemoteDisplayListRecorder::drawControlPart((WebKit::RemoteDisplayListRecorder *)v4);
        v126 = *(_DWORD **)v294;
        *(_QWORD *)v294 = 0;
        if (v126)
        {
          if (v126[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v126 + 8))(v126);
          else
            --v126[2];
        }
        if (v320)
        {
          if ((v318 & 0x8000000000000) != 0)
          {
            v237 = (unsigned int *)(v318 & 0xFFFFFFFFFFFFLL);
            do
            {
              v238 = __ldaxr(v237);
              v239 = v238 - 1;
            }
            while (__stlxr(v239, v237));
            if (!v239)
            {
              atomic_store(1u, v237);
              WTF::fastFree((WTF *)v237, v125);
            }
          }
          if ((v317 & 0x8000000000000) != 0)
          {
            v240 = (unsigned int *)(v317 & 0xFFFFFFFFFFFFLL);
            do
            {
              v241 = __ldaxr(v240);
              v242 = v241 - 1;
            }
            while (__stlxr(v242, v240));
            if (!v242)
            {
              atomic_store(1u, v240);
              WTF::fastFree((WTF *)v240, v125);
            }
          }
          v127 = *(_DWORD **)v314;
          *(_QWORD *)v314 = 0;
          if (v127)
          {
            if (v127[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v127 + 8))(v127);
            else
              --v127[2];
          }
        }
      }
      goto LABEL_207;
    case 0x329:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v314, a3);
      if (v314[16])
        WebKit::RemoteDisplayListRecorder::drawDecomposedGlyphs((uint64_t)v4, *(uint64_t *)v314, *(uint64_t *)&v314[8]);
      goto LABEL_44;
    case 0x32A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>((uint64_t *)a3, v18, (uint64_t)v294, v19, v20, v21);
      if (!v294[16])
      {
        v142 = *(_QWORD *)a3;
        v143 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v144 = *((_QWORD *)a3 + 3);
        if (!v144)
          goto LABEL_79;
        if (!v143)
          goto LABEL_79;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, v142);
        if (!v294[16])
          goto LABEL_79;
      }
      v22 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (!(_BYTE)v23)
      {
        v145 = *(void **)a3;
        v146 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v147 = *((_QWORD *)a3 + 3);
        if (v147 && v146)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v147 + 16))(v147, v145);
        if (v294[16])
          WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v294, v145);
        goto LABEL_79;
      }
      if (!v294[16])
        goto LABEL_377;
      *(_QWORD *)v314 = *(_QWORD *)v294;
      v25 = *(_QWORD *)&v294[8];
      *(_QWORD *)v294 = 0;
      *(_QWORD *)&v294[8] = 0;
      *(_QWORD *)&v314[8] = v25;
      *(_QWORD *)&v314[16] = v22;
      v314[24] = 1;
      WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v294, v23);
      WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems();
      WebKit::RemoteDisplayListRecorder::controlFactory((WebKit::RemoteDisplayListRecorder *)v4);
      (*((void (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::DrawDisplayListItems::apply();
      WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v294, v26);
      if (v314[24])
        WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::PaintFrameForMedia,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v314, v27);
      goto LABEL_8;
    case 0x32B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawDotsForDocumentMarker,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&,WebCore::DocumentMarkerLineStyle const&)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_23;
    case 0x32C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawEllipse,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x32D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v287, a2 + 4);
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v294);
      if (!v294[16])
        goto LABEL_455;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v290);
      if ((_BYTE)v291)
      {
        v22 = (uint64_t)IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>((uint64_t *)a3, (uint64_t)&v288);
        if (v289)
        {
          if (!v294[16])
            goto LABEL_377;
          *(_OWORD *)v314 = *(_OWORD *)v294;
          *(_OWORD *)&v314[16] = v290;
          v177 = v288;
          v288 = 0;
          v314[40] = 1;
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v288, v176);
          *(_QWORD *)&v314[32] = 0;
          *(_QWORD *)v294 = v177;
          WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer((uint64_t)v4, *(uint64_t *)v314, v314[8], (uint64_t)&v314[16], (uint64_t *)v294);
          WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)v294, v178);
          if (v314[40])
            WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v314[32], v179);
LABEL_207:
          v7 = &v287;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
        }
      }
      else
      {
        v269 = *(_QWORD *)a3;
        v270 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v271 = *((_QWORD *)a3 + 3);
        if (v271 && v270)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v271 + 16))(v271, v269);
      }
LABEL_455:
      v272 = *(_QWORD *)a3;
      v273 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v274 = *((_QWORD *)a3 + 3);
      if (v274 && v273)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v274 + 16))(v274, v272);
      goto LABEL_207;
    case 0x32E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawFocusRingPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&,float,WebCore::Color const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x32F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v288, a2 + 4);
      IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a3, v180, (uint64_t)v294);
      if (!v294[16])
      {
        v314[0] = 0;
        v314[32] = 0;
        goto LABEL_295;
      }
      v181 = *((_QWORD *)a3 + 1);
      v182 = *(char **)a3;
      v183 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v181 < v183 || v181 - v183 <= 3)
      {
        v278 = 0;
        v279 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v280 = *((_QWORD *)a3 + 3);
        if (v280)
        {
          if (v181)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
            v279 = *(_QWORD *)a3;
            v278 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v278 = 0;
            v279 = 0;
          }
        }
        goto LABEL_463;
      }
      v185 = &v182[v183];
      *((_QWORD *)a3 + 2) = v185 + 4;
      if (!v182)
      {
        v278 = v181;
        v279 = 0;
LABEL_463:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v281 = *((_QWORD *)a3 + 3);
        if (v281 && v278)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v281 + 16))(v281, v279, v278);
LABEL_467:
        v314[0] = 0;
        v314[32] = 0;
        goto LABEL_292;
      }
      v186 = ((unint64_t)(v185 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v182;
      if (v181 < v186 || v181 - v186 <= 3)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v282 = *((_QWORD *)a3 + 3);
        if (v282)
        {
          if (v181)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v282 + 16))(v282);
            v182 = *(char **)a3;
            v285 = *((_QWORD *)a3 + 1);
            v286 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v286)
            {
              if (v285)
                (*(void (**)(uint64_t, char *))(*(_QWORD *)v286 + 16))(v286, v182);
            }
          }
        }
        goto LABEL_467;
      }
      v188 = *(_DWORD *)v185;
      v189 = *(_DWORD *)((unint64_t)(v185 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = ((unint64_t)(v185 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v22 = (uint64_t)IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v290);
      if (BYTE8(v290)
        || (v191 = *(void **)a3,
            v283 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v284 = *((_QWORD *)a3 + 3)) != 0)
        && v283
        && (v22 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v284 + 16))(v284, v191), BYTE8(v290)))
      {
        if (!v294[16])
          goto LABEL_377;
        *(_QWORD *)v314 = *(_QWORD *)v294;
        v190 = *(_QWORD *)&v294[8];
        *(_QWORD *)v294 = 0;
        *(_QWORD *)&v294[8] = 0;
        *(_QWORD *)&v314[8] = v190;
        *(_DWORD *)&v314[16] = v188;
        *(_DWORD *)&v314[20] = v189;
        WebCore::Color::Color();
        v192 = 1;
      }
      else
      {
        v192 = 0;
        v314[0] = 0;
      }
      v314[32] = v192;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v290, v191);
LABEL_292:
      if (v294[16])
      {
        v193 = *(WTF **)v294;
        if (*(_QWORD *)v294)
        {
          *(_QWORD *)v294 = 0;
          *(_DWORD *)&v294[8] = 0;
          WTF::fastFree(v193, v182);
        }
      }
LABEL_295:
      if (v314[32]
        || (v275 = *(_QWORD *)a3,
            v276 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v277 = *((_QWORD *)a3 + 3)) != 0)
        && v276
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v277 + 16))(v277, v275), v314[32]))
      {
        WebKit::RemoteDisplayListRecorder::drawFocusRingRects((uint64_t)v4, (uint64_t)v314, (const Color *)&v314[24], *(float *)&v314[16], *(float *)&v314[20]);
        if (v314[32])
        {
          if ((*(_QWORD *)&v314[24] & 0x8000000000000) != 0)
          {
            v265 = (unsigned int *)(*(_QWORD *)&v314[24] & 0xFFFFFFFFFFFFLL);
            do
            {
              v266 = __ldaxr(v265);
              v267 = v266 - 1;
            }
            while (__stlxr(v267, v265));
            if (!v267)
            {
              atomic_store(1u, v265);
              WTF::fastFree((WTF *)v265, v43);
            }
          }
          v44 = *(WTF **)v314;
          if (*(_QWORD *)v314)
          {
            *(_QWORD *)v314 = 0;
            *(_DWORD *)&v314[8] = 0;
LABEL_300:
            WTF::fastFree(v44, v43);
          }
        }
      }
      goto LABEL_5;
    case 0x330:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<WebCore::DisplayList::DrawGlyphs>((uint64_t *)a3, (uint64_t)v314);
      if (!v314[56])
      {
        std::__optional_destruct_base<WebCore::DisplayList::DrawGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v314, v80);
        goto LABEL_79;
      }
      v81 = *(_QWORD *)&v314[8];
      memset(&v314[8], 0, 32);
      *(_QWORD *)v294 = *(_QWORD *)v314;
      *(_QWORD *)&v294[8] = v81;
      *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
      v295 = *(_OWORD *)&v314[32];
      LOBYTE(v296) = v314[48];
      v297 = 1;
      std::__optional_destruct_base<WebCore::DisplayList::DrawGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v314, v80);
      WebKit::RemoteDisplayListRecorder::drawGlyphs((uint64_t)v4, (uint64_t *)v294);
      if (v297)
      {
        v83 = *(WTF **)&v294[24];
        if (*(_QWORD *)&v294[24])
        {
          *(_QWORD *)&v294[24] = 0;
          LODWORD(v295) = 0;
          WTF::fastFree(v83, v82);
        }
        v84 = *(WTF **)&v294[8];
        if (*(_QWORD *)&v294[8])
        {
          *(_QWORD *)&v294[8] = 0;
          *(_DWORD *)&v294[16] = 0;
LABEL_136:
          WTF::fastFree(v84, v82);
        }
      }
      goto LABEL_8;
    case 0x331:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      v24 = *((_QWORD *)a3 + 1);
      v30 = *(_QWORD *)a3;
      v60 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v24 >= v60 && v24 - v60 > 7)
      {
        v62 = (uint64_t *)(v30 + v60);
        *((_QWORD *)a3 + 2) = v62 + 1;
        if (v30)
        {
          v63 = *v62;
          if ((unint64_t)(v63 - 1) >= 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_240;
          *(_QWORD *)v294 = v63;
          *(_QWORD *)&v294[8] = 1;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t)v314, (unint64_t *)a3, (uint64_t)v294);
          if (v314[48])
          {
            WebKit::RemoteDisplayListRecorder::drawImageBuffer((uint64_t)v4, *(uint64_t *)v314, (__int128 *)&v314[8], (__int128 *)&v314[24], *(unsigned __int16 *)&v314[40] | (v314[42] << 16));
            goto LABEL_8;
          }
          goto LABEL_79;
        }
        v203 = v24;
        v204 = 0;
      }
      else
      {
        v203 = 0;
        v204 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v205 = *((_QWORD *)a3 + 3);
        if (v205)
        {
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v205 + 16))(v205);
            v204 = *(_QWORD *)a3;
            v203 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v203 = 0;
            v204 = 0;
          }
        }
      }
      v24 = 0;
      v30 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v206 = *((_QWORD *)a3 + 3);
      if (!v206)
        goto LABEL_240;
      if (!v203)
        goto LABEL_511;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v206 + 16))(v206, v204, v203);
      if (*(_QWORD *)a3)
        goto LABEL_377;
      v30 = 0;
      goto LABEL_302;
    case 0x332:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::FloatPoint,WebCore::FloatPoint>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[16])
        WebKit::RemoteDisplayListRecorder::drawLine((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatPoint *)v314, (const WebCore::FloatPoint *)&v314[8]);
      goto LABEL_44;
    case 0x333:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<WebCore::DisplayList::DrawLinesForText>((unint64_t *)a3, (uint64_t)v314);
      if (!v314[40])
        goto LABEL_79;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
      LODWORD(v295) = *(_DWORD *)&v314[32];
      *(_DWORD *)((char *)&v295 + 3) = *(_DWORD *)&v314[35];
      BYTE8(v295) = 1;
      v110 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::DrawLinesForText::apply((WebCore::DisplayList::DrawLinesForText *)v294, v110);
      if (!BYTE8(v295))
        goto LABEL_8;
      v84 = *(WTF **)&v294[16];
      if (!*(_QWORD *)&v294[16])
        goto LABEL_8;
      *(_QWORD *)&v294[16] = 0;
      *(_DWORD *)&v294[24] = 0;
      goto LABEL_136;
    case 0x334:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      v24 = *((_QWORD *)a3 + 1);
      v30 = *(_QWORD *)a3;
      v31 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v24 < v31 || v24 - v31 <= 7)
      {
        v154 = 0;
        v155 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v22 = *((_QWORD *)a3 + 3);
        if (v22)
          goto LABEL_378;
        while (1)
        {
LABEL_239:
          v24 = 0;
          v30 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v156 = *((_QWORD *)a3 + 3);
          if (!v156)
            goto LABEL_240;
          if (!v154)
          {
LABEL_511:
            v24 = 0;
            v30 = 0;
            goto LABEL_240;
          }
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v156 + 16))(v156, v155, v154);
          v30 = *(_QWORD *)a3;
          if (!*(_QWORD *)a3)
            goto LABEL_302;
LABEL_377:
          __break(1u);
LABEL_378:
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
            v155 = *(_QWORD *)a3;
            v154 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v154 = 0;
            v155 = 0;
          }
        }
      }
      v33 = (uint64_t *)(v30 + v31);
      *((_QWORD *)a3 + 2) = v33 + 1;
      if (!v30)
      {
        v154 = v24;
        v155 = 0;
        goto LABEL_239;
      }
      v34 = *v33;
      if ((unint64_t)(v34 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_240;
      *(_QWORD *)v294 = v34;
      *(_QWORD *)&v294[8] = 1;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t)v314, (unint64_t *)a3, (uint64_t)v294);
      if (v314[48])
      {
        WebKit::RemoteDisplayListRecorder::drawNativeImage((uint64_t)v4, *(uint64_t *)v314);
        goto LABEL_8;
      }
LABEL_79:
      v52 = *(_QWORD *)a3;
      v53 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v54 = *((_QWORD *)a3 + 3);
      if (v54)
      {
LABEL_80:
        if (v53)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52);
      }
LABEL_8:
      v7 = (uint64_t **)&v290;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    case 0x335:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v314, (unint64_t *)a3);
      if (!(_BYTE)v316)
        goto LABEL_44;
      WebKit::RemoteDisplayListRecorder::drawPath((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::Path *)v314);
LABEL_403:
      if (!(_BYTE)v316)
        goto LABEL_44;
      m_colorAndFlags_low = LODWORD(v315.m_colorAndFlags);
      if (LODWORD(v315.m_colorAndFlags) == -1)
        goto LABEL_44;
      v252 = &v314[8];
      v253 = off_1E34B4D38;
LABEL_406:
      ((void (*)(__int128 *, _BYTE *))v253[m_colorAndFlags_low])(&v290, v252);
      goto LABEL_44;
    case 0x336:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPattern,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_23;
    case 0x337:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[20])
      {
        *(_OWORD *)v294 = *(_OWORD *)v314;
        *(_DWORD *)&v294[16] = *(_DWORD *)&v314[16];
        v88 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::DrawRect::apply((WebCore::DisplayList::DrawRect *)v294, v88);
      }
      goto LABEL_8;
    case 0x338:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawSystemImage,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>,WebCore::FloatRect const&)>((unint64_t *)a3, (uint64_t)v4);
      goto LABEL_23;
    case 0x339:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v129 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::EndTransparencyLayer::apply((WebCore::DisplayList::EndTransparencyLayer *)v294, v129);
      goto LABEL_23;
    case 0x33A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathArc,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_QWORD *)&v294[16] = *(_QWORD *)&v314[16];
      v294[24] = 1;
      WebKit::RemoteDisplayListRecorder::fillArc((WebKit::RemoteDisplayListRecorder *)v4, (const PathArc *)v294);
      goto LABEL_8;
    case 0x33B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillBezierCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataBezierCurve const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x33C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_QWORD *)&v294[16] = *(_QWORD *)&v314[16];
      v49 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillClosedArc::apply((WebCore::DisplayList::FillClosedArc *)v294, v49);
      goto LABEL_8;
    case 0x33D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v288, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v294);
      if (!v294[16])
      {
        v207 = *(_QWORD *)a3;
        v208 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v209 = *((_QWORD *)a3 + 3);
        if (v209 && v208)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v207);
        v314[0] = 0;
        v314[32] = 0;
        goto LABEL_320;
      }
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v290);
      if (!BYTE8(v290))
      {
        v66 = *(_BYTE **)a3;
        v213 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v214 = *((_QWORD *)a3 + 3);
        if (!v214)
          goto LABEL_335;
        if (!v213)
          goto LABEL_335;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v214 + 16))(v214, v66);
        if (!BYTE8(v290))
          goto LABEL_335;
      }
      v65 = *((_QWORD *)a3 + 1);
      v66 = *(_BYTE **)a3;
      v67 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v65 <= v67)
      {
        v215 = 0;
        v216 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v217 = *((_QWORD *)a3 + 3);
        if (v217)
        {
          if (v65)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v217 + 16))(v217);
            v216 = *(_QWORD *)a3;
            v215 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v215 = 0;
            v216 = 0;
          }
        }
        goto LABEL_329;
      }
      v68 = &v66[v67];
      *((_QWORD *)a3 + 2) = v68 + 1;
      if (!v66)
      {
        v215 = v65;
        v216 = 0;
LABEL_329:
        v65 = 0;
        v66 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v218 = *((_QWORD *)a3 + 3);
        if (v218)
        {
          if (v215)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v218 + 16))(v218, v216, v215);
            v66 = *(_BYTE **)a3;
            v65 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
        }
        goto LABEL_330;
      }
      v69 = *v68;
      if (v69 >= 0xE)
      {
LABEL_330:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v219 = *((_QWORD *)a3 + 3);
        if (v219 && v65)
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v219 + 16))(v219, v66);
        goto LABEL_335;
      }
      if (v65 <= v68 + 1 - v66)
      {
        v220 = 0;
        v221 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v222 = *((_QWORD *)a3 + 3);
        if (v222)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v222 + 16))(v222);
          v220 = 0;
          v66 = *(_BYTE **)a3;
          v255 = *((_QWORD *)a3 + 1);
          v256 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v221 = 0;
          if (v256)
          {
            if (v255)
            {
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v256 + 16))(v256, v66);
              v221 = *(_QWORD *)a3;
              v220 = *((_QWORD *)a3 + 1);
            }
          }
        }
      }
      else
      {
        *((_QWORD *)a3 + 2) = v68 + 2;
        v70 = v68[1];
        if ((v70 - 1) < 0x12)
        {
          *(_OWORD *)v314 = *(_OWORD *)v294;
          WebCore::Color::Color();
          v314[24] = v69;
          v314[25] = v70;
          v71 = 1;
          goto LABEL_114;
        }
        v220 = v65;
        v221 = (uint64_t)v66;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v223 = *((_QWORD *)a3 + 3);
      if (v223 && v220)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v223 + 16))(v223, v221, v220);
LABEL_335:
      v71 = 0;
      v314[0] = 0;
LABEL_114:
      v314[32] = v71;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v290, v66);
      if (v314[32])
        goto LABEL_115;
LABEL_320:
      v210 = *(_QWORD *)a3;
      v211 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v212 = *((_QWORD *)a3 + 3);
      if (!v212)
        goto LABEL_5;
      if (!v211)
        goto LABEL_5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v212 + 16))(v212, v210);
      if (!v314[32])
        goto LABEL_5;
LABEL_115:
      WebKit::RemoteDisplayListRecorder::fillCompositedRect((uint64_t)v4, (__int128 *)v314, (Color *)&v314[16], v314[24], v314[25]);
      if (v314[32] && (*(_QWORD *)&v314[16] & 0x8000000000000) != 0)
      {
        v44 = (WTF *)(*(_QWORD *)&v314[16] & 0xFFFFFFFFFFFFLL);
        do
        {
          v72 = __ldaxr((unsigned int *)v44);
          v46 = --v72 == 0;
        }
        while (__stlxr(v72, (unsigned int *)v44));
        goto LABEL_66;
      }
LABEL_5:
      v7 = &v288;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    case 0x33E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      WebKit::RemoteDisplayListRecorder::fillEllipse((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v294);
      goto LABEL_8;
    case 0x33F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[16])
      {
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v100 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::FillLine::apply((WebCore::DisplayList::FillLine *)v294, v100);
      }
      goto LABEL_8;
    case 0x340:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v314, (unint64_t *)a3);
      if (!(_BYTE)v316)
        goto LABEL_8;
      WebCore::Path::Path((WebCore::Path *)v294, (const WebCore::Path *)v314);
      v17 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillPath::apply((WebCore::DisplayList::FillPath *)v294, v17);
      goto LABEL_16;
    case 0x341:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[56])
      {
        v296 = *(_QWORD *)&v314[48];
        *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
        v295 = *(_OWORD *)&v314[32];
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v93 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::FillPathSegment::apply((WebCore::DisplayList::FillPathSegment *)v294, v93);
      }
      goto LABEL_8;
    case 0x342:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillQuadCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataQuadCurve const&)>((unint64_t *)a3, (WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x343:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v294);
      if (!v294[16])
      {
        v30 = *(_QWORD *)a3;
LABEL_302:
        v24 = *((_QWORD *)a3 + 1);
LABEL_240:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v157 = *((_QWORD *)a3 + 3);
        if (v157 && v24)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, v30);
        goto LABEL_79;
      }
      v51 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a3);
      if (v51 <= 0xFFu)
        goto LABEL_79;
      *(_QWORD *)&v314[1] = *(_QWORD *)&v294[1];
      *(_QWORD *)&v314[8] = *(_QWORD *)&v294[8];
      v314[0] = v294[0];
      v314[16] = v51 != 0;
      v64 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillRect::apply((WebCore::DisplayList::FillRect *)v314, v64);
      goto LABEL_8;
    case 0x344:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v288, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v294);
      if (v294[16])
      {
        IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v290);
        if (BYTE8(v290)
          || (v102 = *(void **)a3,
              v235 = *((_QWORD *)a3 + 1),
              *(_QWORD *)a3 = 0,
              *((_QWORD *)a3 + 1) = 0,
              (v236 = *((_QWORD *)a3 + 3)) != 0)
          && v235
          && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v236 + 16))(v236, v102), BYTE8(v290)))
        {
          *(_OWORD *)v314 = *(_OWORD *)v294;
          WebCore::Color::Color();
          v103 = 1;
        }
        else
        {
          v103 = 0;
          v314[0] = 0;
        }
        v314[24] = v103;
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v290, v102);
        if (v314[24])
          goto LABEL_161;
      }
      else
      {
        v229 = *(_QWORD *)a3;
        v230 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v231 = *((_QWORD *)a3 + 3);
        if (v231 && v230)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v231 + 16))(v231, v229);
        v314[0] = 0;
        v314[24] = 0;
      }
      v232 = *(_QWORD *)a3;
      v233 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v234 = *((_QWORD *)a3 + 3);
      if (!v234)
        goto LABEL_5;
      if (!v233)
        goto LABEL_5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v234 + 16))(v234, v232);
      if (!v314[24])
        goto LABEL_5;
LABEL_161:
      WebKit::RemoteDisplayListRecorder::fillRectWithColor((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v314, (Color *)&v314[16]);
      if (v314[24] && (*(_QWORD *)&v314[16] & 0x8000000000000) != 0)
      {
        v44 = (WTF *)(*(_QWORD *)&v314[16] & 0xFFFFFFFFFFFFLL);
        do
        {
          v104 = __ldaxr((unsigned int *)v44);
          v46 = --v104 == 0;
        }
        while (__stlxr(v104, (unsigned int *)v44));
        goto LABEL_66;
      }
      goto LABEL_5;
    case 0x345:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<WebCore::DisplayList::FillRectWithGradient>((unint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_79;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v106 = *(_QWORD *)&v314[16];
      *(_QWORD *)&v314[16] = 0;
      *(_QWORD *)&v294[16] = v106;
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v314[16], v105);
      v294[24] = 1;
      v107 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::FillRectWithGradient::apply((WebCore::DisplayList::FillRectWithGradient *)v294, v107);
      if (v294[24])
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v294[16], v108);
      goto LABEL_8;
    case 0x346:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform>>((uint64_t)v314, (unint64_t *)a3);
      if ((_BYTE)v317)
      {
        WebKit::RemoteDisplayListRecorder::fillRectWithGradientAndSpaceTransform((uint64_t)v4, (WebCore::DisplayList::FillRectWithGradientAndSpaceTransform *)v314);
        if ((_BYTE)v317)
          WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v314[16], v250);
      }
      goto LABEL_44;
    case 0x347:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v287, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v290);
      if ((_BYTE)v291)
      {
        IPC::Decoder::decode<WebCore::FloatRoundedRect>((uint64_t)v294, (unint64_t *)a3);
        if ((_BYTE)v296)
        {
          IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v288);
          if (v289
            || (v158 = *(void **)a3,
                v263 = *((_QWORD *)a3 + 1),
                *(_QWORD *)a3 = 0,
                *((_QWORD *)a3 + 1) = 0,
                (v264 = *((_QWORD *)a3 + 3)) != 0)
            && v263
            && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v264 + 16))(v264, v158), v289))
          {
            *(_OWORD *)v314 = v290;
            *(_OWORD *)&v314[16] = *(_OWORD *)v294;
            *(_OWORD *)&v314[32] = *(_OWORD *)&v294[16];
            *(_OWORD *)&v314[48] = v295;
            WebCore::Color::Color();
            v159 = 1;
          }
          else
          {
            v159 = 0;
            v314[0] = 0;
          }
          LOBYTE(v316) = v159;
          std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v288, v158);
          if ((_BYTE)v316)
            goto LABEL_248;
LABEL_442:
          v260 = *(_QWORD *)a3;
          v261 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v262 = *((_QWORD *)a3 + 3);
          if (!v262)
            goto LABEL_207;
          if (!v261)
            goto LABEL_207;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v262 + 16))(v262, v260);
          if (!(_BYTE)v316)
            goto LABEL_207;
LABEL_248:
          WebKit::RemoteDisplayListRecorder::fillRectWithRoundedHole((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v314, (const WebCore::FloatRoundedRect *)&v314[16], &v315);
          if ((_BYTE)v316)
          {
            if ((v315.m_colorAndFlags & 0x8000000000000) != 0)
            {
              v161 = (unsigned int *)(v315.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
              do
              {
                v162 = __ldaxr(v161);
                v163 = v162 - 1;
              }
              while (__stlxr(v163, v161));
              if (!v163)
              {
                atomic_store(1u, v161);
                WTF::fastFree((WTF *)v161, v160);
              }
            }
          }
          goto LABEL_207;
        }
      }
      else
      {
        v257 = *(_QWORD *)a3;
        v258 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v259 = *((_QWORD *)a3 + 3);
        if (v259 && v258)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v259 + 16))(v259, v257);
      }
      v314[0] = 0;
      LOBYTE(v316) = 0;
      goto LABEL_442;
    case 0x348:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v288, a2 + 4);
      IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a3, (uint64_t)v294);
      if (!(_BYTE)v296)
      {
        v164 = *(_QWORD *)a3;
        v165 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v166 = *((_QWORD *)a3 + 3);
        if (v166 && v165)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 16))(v166, v164);
        v314[0] = 0;
        LOBYTE(v315.m_colorAndFlags) = 0;
        goto LABEL_256;
      }
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a3, &v290);
      if (!BYTE8(v290))
      {
        v36 = *(char **)a3;
        v169 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v170 = *((_QWORD *)a3 + 3);
        if (!v170)
          goto LABEL_267;
        if (!v169)
          goto LABEL_267;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v170 + 16))(v170, v36);
        if (!BYTE8(v290))
          goto LABEL_267;
      }
      v35 = *((_QWORD *)a3 + 1);
      v36 = *(char **)a3;
      v37 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v35 <= v37)
      {
        v171 = 0;
        v172 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v173 = *((_QWORD *)a3 + 3);
        if (v173)
        {
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
            v172 = *(_QWORD *)a3;
            v171 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v171 = 0;
            v172 = 0;
          }
        }
      }
      else
      {
        v38 = &v36[v37];
        *((_QWORD *)a3 + 2) = v38 + 1;
        if (v36)
        {
          v39 = *v38;
          if ((v39 - 1) < 0x12)
          {
            *(_OWORD *)v314 = *(_OWORD *)v294;
            *(_OWORD *)&v314[16] = *(_OWORD *)&v294[16];
            *(_OWORD *)&v314[32] = v295;
            WebCore::Color::Color();
            v314[56] = v39;
            v40 = 1;
            goto LABEL_60;
          }
LABEL_266:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v175 = *((_QWORD *)a3 + 3);
          if (v175 && v35)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v175 + 16))(v175, v36);
LABEL_267:
          v40 = 0;
          v314[0] = 0;
LABEL_60:
          LOBYTE(v315.m_colorAndFlags) = v40;
          std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v290, v36);
          if (LOBYTE(v315.m_colorAndFlags))
            goto LABEL_61;
LABEL_256:
          v43 = *(void **)a3;
          v167 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v168 = *((_QWORD *)a3 + 3);
          if (!v168 || !v167)
            goto LABEL_62;
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v168 + 16))(v168, v43);
          if (!LOBYTE(v315.m_colorAndFlags))
            goto LABEL_5;
LABEL_61:
          v41 = v314[56];
          *(_OWORD *)v294 = *(_OWORD *)v314;
          *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
          v295 = *(_OWORD *)&v314[32];
          WebCore::Color::Color((WebCore::Color *)&v296, (const Color *)&v314[48]);
          v297 = v41;
          v42 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
          WebCore::DisplayList::FillRoundedRect::apply((WebCore::DisplayList::FillRoundedRect *)v294, v42);
          if ((v296 & 0x8000000000000) != 0)
          {
            v139 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFLL);
            do
            {
              v140 = __ldaxr(v139);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v139));
            if (!v141)
            {
              atomic_store(1u, v139);
              WTF::fastFree((WTF *)v139, v43);
            }
          }
LABEL_62:
          if (LOBYTE(v315.m_colorAndFlags) && (*(_QWORD *)&v314[48] & 0x8000000000000) != 0)
          {
            v44 = (WTF *)(*(_QWORD *)&v314[48] & 0xFFFFFFFFFFFFLL);
            do
            {
              v45 = __ldaxr((unsigned int *)v44);
              v46 = --v45 == 0;
            }
            while (__stlxr(v45, (unsigned int *)v44));
LABEL_66:
            if (v46)
            {
              atomic_store(1u, (unsigned int *)v44);
              goto LABEL_300;
            }
          }
          goto LABEL_5;
        }
        v171 = v35;
        v172 = 0;
      }
      v35 = 0;
      v36 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v174 = *((_QWORD *)a3 + 3);
      if (v174)
      {
        if (v171)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v174 + 16))(v174, v172, v171);
          v36 = *(char **)a3;
          v35 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
      }
      goto LABEL_266;
    case 0x349:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>((uint64_t *)a3, v314);
      if (v314[24])
        WebKit::RemoteDisplayListRecorder::paintFrameForMedia((uint64_t)v4, *(uint64_t *)v314, (__int128 *)&v314[8]);
      goto LABEL_44;
    case 0x34A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame,WebCore::FloatRect,BOOL>>((uint64_t)v314, (uint64_t *)a3);
      if (!(_BYTE)v316)
        goto LABEL_44;
      WebKit::RemoteDisplayListRecorder::paintVideoFrame((WebKit::RemoteDisplayListRecorder *)v4, (uint64_t)v314, (uint64_t)&v314[48], LOBYTE(v315.m_colorAndFlags));
      if (!(_BYTE)v316)
        goto LABEL_44;
      m_colorAndFlags_low = *(unsigned int *)&v314[40];
      if (*(_DWORD *)&v314[40] == -1)
        goto LABEL_44;
      v252 = &v314[24];
      v253 = off_1E34B4D18;
      goto LABEL_406;
    case 0x34B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      WebKit::RemoteDisplayListRecorder::resetClip((WebKit::RemoteDisplayListRecorder *)v4);
      goto LABEL_23;
    case 0x34C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v13 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::Restore::apply((WebCore::DisplayList::Restore *)v294, v13);
      goto LABEL_23;
    case 0x34D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v224 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v224 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v294 = v224;
        v225 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Rotate::apply((WebCore::DisplayList::Rotate *)v294, v225);
      }
      goto LABEL_23;
    case 0x34E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v12 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::Save::apply((WebCore::DisplayList::Save *)v294, v12);
      goto LABEL_23;
    case 0x34F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      v89 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
      if (v90)
      {
        *(_QWORD *)v314 = v89;
        v91 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Scale::apply((WebCore::DisplayList::Scale *)v314, v91);
      }
      goto LABEL_44;
    case 0x350:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a3, (uint64_t)v314);
      if (!v314[48])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
      v295 = *(_OWORD *)&v314[32];
      v14 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetCTM::apply((WebCore::DisplayList::SetCTM *)v294, v14);
      goto LABEL_8;
    case 0x351:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      v28 = IPC::ArgumentCoder<WebCore::DisplayList::SetInlineFillColor,void>::decode((uint64_t *)a3);
      if ((v28 & 0xFF00000000) != 0)
      {
        *(_QWORD *)v314 = v28 | 0x100000000;
        v29 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetInlineFillColor::apply((WebCore::DisplayList::SetInlineFillColor *)v314, v29);
      }
      else
      {
        v148 = *(_QWORD *)a3;
        v149 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v150 = *((_QWORD *)a3 + 3);
        if (v150)
        {
          if (v149)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 16))(v150, v148);
            v151 = *(_QWORD *)a3;
            v152 = *((_QWORD *)a3 + 1);
            v153 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v153)
            {
              if (v152)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v151);
            }
          }
        }
      }
      goto LABEL_44;
    case 0x352:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode((uint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      v8 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetInlineStroke::apply((WebCore::DisplayList::SetInlineStroke *)v294, v8);
      goto LABEL_8;
    case 0x353:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v76 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>((uint64_t *)a3);
      if (v76 <= 0xFFu)
        goto LABEL_338;
      v294[0] = v76;
      v77 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetLineCap::apply((WebCore::DisplayList::SetLineCap *)v294, v77);
      goto LABEL_23;
    case 0x354:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<WebCore::DisplayList::SetLineDash>((uint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_79;
      *(_QWORD *)v294 = *(_QWORD *)v314;
      *(_QWORD *)&v294[8] = *(_QWORD *)&v314[8];
      *(_DWORD *)&v294[16] = *(_DWORD *)&v314[16];
      v294[24] = 1;
      v109 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::SetLineDash::apply((WebCore::DisplayList::SetLineDash *)v294, v109);
      if (!v294[24])
        goto LABEL_8;
      v84 = *(WTF **)v294;
      if (!*(_QWORD *)v294)
        goto LABEL_8;
      *(_QWORD *)v294 = 0;
      *(_DWORD *)&v294[8] = 0;
      goto LABEL_136;
    case 0x355:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v74 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>((uint64_t *)a3);
      if (v74 <= 0xFFu)
      {
LABEL_338:
        v226 = *(_QWORD *)a3;
        v227 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v228 = *((_QWORD *)a3 + 3);
        if (v228 && v227)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, v226);
      }
      else
      {
        v294[0] = v74;
        v75 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetLineJoin::apply((WebCore::DisplayList::SetLineJoin *)v294, v75);
      }
      goto LABEL_23;
    case 0x356:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v314, a2 + 4);
      v78 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v78 & 0xFF00000000) != 0)
      {
        *(_DWORD *)v294 = v78;
        v79 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetMiterLimit::apply((WebCore::DisplayList::SetMiterLimit *)v294, v79);
      }
LABEL_23:
      v7 = (uint64_t **)v314;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    case 0x357:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_44;
      WebKit::RemoteDisplayListRecorder::setSharedVideoFrameMemory((WebKit::RemoteDisplayListRecorder *)v4);
      if (!v314[16])
        goto LABEL_44;
      goto LABEL_481;
    case 0x358:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)v314);
      if (!v314[8])
        goto LABEL_44;
      WebKit::RemoteDisplayListRecorder::setSharedVideoFrameSemaphore((WebKit::RemoteDisplayListRecorder *)v4, (IPC::Semaphore *)v314);
      if (!v314[8])
        goto LABEL_44;
      IPC::Semaphore::destroy((IPC::Semaphore *)v314);
LABEL_481:
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v314);
      goto LABEL_44;
    case 0x359:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::DisplayList::SetState,void>::decode((uint64_t *)a3, v314);
      if (v329
        || (v132 = *(_QWORD *)a3,
            v133 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v134 = *((_QWORD *)a3 + 3)) != 0)
        && v133
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v132), v329))
      {
        WebCore::Color::Color();
        v294[16] = 0;
        v300 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v294[16], (uint64_t)&v314[16]);
        WebCore::Color::Color();
        v301[0] = 0;
        v302 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v301, (uint64_t)&v319 + 8);
        v303 = v321;
        v304 = v322;
        LOBYTE(v305) = 0;
        v308 = 0;
        if (v326)
        {
          v305 = v323;
          v306 = v324;
          WebCore::Color::Color();
          v307 = v325;
          v308 = 1;
        }
        v309[0] = 0;
        v311 = 0;
        if (v327[88])
        {
          v310 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,(std::__variant_detail::_Trait)1>>((uint64_t)v309, (uint64_t)v327);
          v311 = 1;
        }
        *(_QWORD *)((char *)v312 + 5) = *(_QWORD *)((char *)v328 + 5);
        v312[0] = v328[0];
        v313 = 1;
        if (!v329)
          goto LABEL_33;
        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v314, v15);
        if (v313)
          goto LABEL_33;
      }
      else
      {
        v294[0] = 0;
        v313 = 0;
      }
      v135 = *(_QWORD *)a3;
      v136 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v137 = *((_QWORD *)a3 + 3);
      if (!v137)
        goto LABEL_8;
      if (!v136)
        goto LABEL_8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v135);
      if (!v313)
        goto LABEL_8;
LABEL_33:
      WebKit::RemoteDisplayListRecorder::setState((uint64_t)v4, (WebCore::SourceBrush *)v294);
      if (v313)
        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v294, v16);
      goto LABEL_8;
    case 0x35A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathArc,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_QWORD *)&v294[16] = *(_QWORD *)&v314[16];
      v9 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeArc::apply((WebCore::DisplayList::StrokeArc *)v294, v9);
      goto LABEL_8;
    case 0x35B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[32])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
      v47 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeBezierCurve::apply((WebCore::DisplayList::StrokeBezierCurve *)v294, v47);
      goto LABEL_8;
    case 0x35C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[24])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      *(_QWORD *)&v294[16] = *(_QWORD *)&v314[16];
      v50 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
      WebCore::DisplayList::StrokeClosedArc::apply((WebCore::DisplayList::StrokeClosedArc *)v294, v50);
      goto LABEL_8;
    case 0x35D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (!v314[16])
        goto LABEL_305;
      *(_OWORD *)v294 = *(_OWORD *)v314;
      v294[16] = 1;
      WebKit::RemoteDisplayListRecorder::strokeEllipse((WebKit::RemoteDisplayListRecorder *)v4, (const WebCore::FloatRect *)v294);
      goto LABEL_8;
    case 0x35E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[16])
      {
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v73 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeLine::apply((WebCore::DisplayList::StrokeLine *)v294, v73);
      }
      goto LABEL_8;
    case 0x35F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v288, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)&v290);
      if ((_BYTE)v291
        && (IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode((uint64_t *)a3, (uint64_t)v294),
            v294[16]))
      {
        *(_OWORD *)v314 = v290;
        *(_OWORD *)&v314[16] = *(_OWORD *)v294;
        v314[32] = 1;
        v5 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::SetInlineStroke::apply((WebCore::DisplayList::SetInlineStroke *)&v314[16], v5);
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v6 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeLine::apply((WebCore::DisplayList::StrokeLine *)v294, v6);
      }
      else
      {
        v94 = *(_QWORD *)a3;
        v95 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v96 = *((_QWORD *)a3 + 3);
        if (v96 && v95)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94);
        v97 = *(_QWORD *)a3;
        v98 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v99 = *((_QWORD *)a3 + 3);
        if (v99 && v98)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97);
      }
      goto LABEL_5;
    case 0x360:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v314, (unint64_t *)a3);
      if ((_BYTE)v316)
      {
        WebCore::Path::Path((WebCore::Path *)v294, (const WebCore::Path *)v314);
        v11 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokePath::apply((WebCore::DisplayList::StrokePath *)v294, v11);
LABEL_16:
        if (v298 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v298])(&v288, &v294[8]);
        if ((_BYTE)v316)
          goto LABEL_19;
      }
      goto LABEL_8;
    case 0x361:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[56])
      {
        v296 = *(_QWORD *)&v314[48];
        *(_OWORD *)&v294[16] = *(_OWORD *)&v314[16];
        v295 = *(_OWORD *)&v314[32];
        *(_OWORD *)v294 = *(_OWORD *)v314;
        v128 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokePathSegment::apply((WebCore::DisplayList::StrokePathSegment *)v294, v128);
      }
      goto LABEL_8;
    case 0x362:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode((unint64_t *)a3, (uint64_t)v314);
      if (v314[24])
      {
        *(_OWORD *)v294 = *(_OWORD *)v314;
        *(_QWORD *)&v294[16] = *(_QWORD *)&v314[16];
        v48 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeQuadCurve::apply((WebCore::DisplayList::StrokeQuadCurve *)v294, v48);
        goto LABEL_8;
      }
LABEL_305:
      v194 = *(_QWORD *)a3;
      v195 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v196 = *((_QWORD *)a3 + 3);
      if (!v196 || !v195)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        goto LABEL_8;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v196 + 16))(v196, v194);
      v52 = *(_QWORD *)a3;
      v53 = *((_QWORD *)a3 + 1);
      v54 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (!v54)
        goto LABEL_8;
      goto LABEL_80;
    case 0x363:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v290, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>((uint64_t)v314, (unint64_t *)a3);
      if (v314[20])
      {
        *(_OWORD *)v294 = *(_OWORD *)v314;
        *(_DWORD *)&v294[16] = *(_DWORD *)&v314[16];
        v92 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::StrokeRect::apply((WebCore::DisplayList::StrokeRect *)v294, v92);
      }
      goto LABEL_8;
    case 0x364:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v294, a2 + 4);
      v85 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v86)
      {
        *(_QWORD *)v314 = v85;
        v87 = (WebCore::GraphicsContext *)(*((uint64_t (**)(unsigned __int8 **))*v4[3] + 2))(v4[3]);
        WebCore::DisplayList::Translate::apply((WebCore::DisplayList::Translate *)v314, v87);
      }
LABEL_44:
      v7 = (uint64_t **)v294;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    default:
      return this;
  }
}

