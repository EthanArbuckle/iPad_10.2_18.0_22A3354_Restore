WTF::StringImpl *WebKit::WebFrameProxy::prepareForProvisionalLoadInProcess(uint64_t a1, WebKit::WebProcessProxy *a2, uint64_t a3, WebKit::BrowsingContextGroup *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::URL *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  WebKit::FrameProcess *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 264) == a1 || (v11 = *(_QWORD *)(v10 + 1104)) != 0 && *(_QWORD *)(v11 + 72) == a1)
      {
        v26 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
    }
  }
  v12 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a3 + 232));
  WebKit::Site::Site(&v29, v12);
  v13 = *(_QWORD *)(a1 + 24);
  if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
  {
    v15 = v14 - 16;
    CFRetain(*(CFTypeRef *)(v14 - 8));
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  WebCore::RegistrableDomain::RegistrableDomain(&v28, (const WTF::URL *)(*(_QWORD *)(v15 + 280) + 48));
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a1 + 320), 0);
  WebKit::BrowsingContextGroup::ensureProcessForSite(a4, (const WebKit::Site *)&v29, a2, *(const WebKit::WebPreferences **)(v15 + 224), &v27);
  v17 = (unsigned int **)WTF::fastMalloc((WTF *)0x18);
  WebKit::ProvisionalFrameProxy::ProvisionalFrameProxy(v17, a1, (unsigned int **)&v27);
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a1 + 320), (WTF::StringImpl *)v17);
  if (v27)
    WTF::RefCounted<WebKit::FrameProcess>::deref(v27, v18);
  v19 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v15 + 264));
  v20 = (unsigned int *)(v19 + 16);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v19, (uint64_t)a2, &v28, 0, a5);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v20);
  v23 = v28;
  v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v22);
      if ((v16 & 1) != 0)
        goto LABEL_19;
      goto LABEL_18;
    }
    *(_DWORD *)v23 -= 2;
  }
  if ((v16 & 1) == 0)
LABEL_18:
    CFRelease(*(CFTypeRef *)(v15 + 8));
LABEL_19:
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebFrameProxy::commitProvisionalFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, __int16 a11, char a12, char a13, char a14, uint64_t a15)
{
  WebKit::ProvisionalFrameProxy **v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::ProvisionalFrameProxy *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WebKit::FrameProcess *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a3;
  v48 = a4;
  if (*(_QWORD *)(a1 + 320))
  {
    v21 = (WebKit::ProvisionalFrameProxy **)(a1 + 320);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v23 = (unsigned int *)(v22 + 16);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v43 = *(_QWORD *)(a1 + 432);
    v44 = 1;
    v45 = &v47;
    v46 = &v43;
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v25)
      v26 = v25 - 16;
    else
      v26 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(v22, &v45, *(_QWORD *)(*(_QWORD *)(v26 + 32) + 1896), 0);
    if (v22)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
    v27 = *v21;
    *v21 = 0;
    std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a1 + 320), 0);
    v28 = *((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = 0;
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v27, v29);
    WTF::fastFree(v30, v31);
    if (v28)
    {
      v33 = *(WebKit::FrameProcess **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v28;
      if (v33)
        WTF::RefCounted<WebKit::FrameProcess>::deref(v33, v32);
      if (*(_BYTE *)(a1 + 452))
      {
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v35 = (unsigned int *)(v34 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
        if (!*(_BYTE *)(a1 + 452))
        {
          __break(1u);
          return;
        }
        v45 = &v47;
        v46 = (uint64_t *)(a1 + 444);
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (v37)
          v38 = v37 - 16;
        else
          v38 = 0;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(v34, (uint64_t)&v45, *(_QWORD *)(*(_QWORD *)(v38 + 32) + 1896), 0);
        if (v34)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v34 + 16));
      }
    }
  }
  v39 = *(_QWORD *)(a1 + 24);
  if (v39 && (v40 = *(_QWORD *)(v39 + 8)) != 0)
  {
    v41 = v40 - 16;
    CFRetain(*(CFTypeRef *)(v40 - 8));
  }
  else
  {
    v41 = 0;
  }
  BYTE4(v42) = a14;
  BYTE3(v42) = a13;
  BYTE2(v42) = a12;
  LOWORD(v42) = a11;
  WebKit::WebPageProxy::didCommitLoadForFrame(v41, a2, v47, v48, a5, a6, a7, a8, a9, a10, v42, a15);
  if (v41)
    CFRelease(*(CFTypeRef *)(v41 + 8));
}

WebCore::ResourceRequest *WebKit::WebFrameProxy::getFrameInfo(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ResourceRequest *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char BoolValueForKey;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v47;
  _DWORD *v48;
  IPC::Encoder *v49;
  _QWORD *v50;
  _BYTE v51[25];
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  _OWORD v55[2];
  uint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a1[36];
  if (v3)
    v4 = *(unsigned int *)(v3 - 12);
  else
    v4 = 0;
  v5 = WTF::fastMalloc((WTF *)0x148);
  *(_DWORD *)v5 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  *(_WORD *)(v5 + 16) = 0;
  result = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(v5 + 24));
  *(_QWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_DWORD *)(v5 + 248) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_BYTE *)(v5 + 296) = 0;
  *(_WORD *)(v5 + 308) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 256) = 0;
  *(_BYTE *)(v5 + 280) = 0;
  LOBYTE(v50) = 0;
  v57 = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 324) = v4;
  if (v4)
  {
    if (v4 >= 0xCCCCCD)
    {
      __break(0xC471u);
      return result;
    }
    v9 = WTF::fastMalloc((WTF *)(320 * v4));
    *(_DWORD *)(v5 + 320) = 320 * (int)v4 / 0x140u;
    *(_QWORD *)(v5 + 312) = v9;
    v10 = *(unsigned int *)(v5 + 324);
    if ((_DWORD)v10)
    {
      v11 = v9;
      v12 = 0;
      v13 = 320 * v10;
      do
      {
        v14 = v11 + v12;
        *(_BYTE *)v14 = 0;
        *(_BYTE *)(v14 + 312) = 0;
        if (v57)
        {
          *(_WORD *)v14 = (_WORD)v50;
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v14 + 8), (const WebCore::ResourceRequest *)v51);
          *(_BYTE *)(v14 + 208) = 0;
          *(_DWORD *)(v14 + 232) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v14 + 208, (uint64_t)&v52);
          v15 = v53;
          if (v53)
            *v53 += 2;
          v16 = v11 + v12;
          *(_QWORD *)(v16 + 240) = v15;
          v17 = v11 + v12 + 248;
          v18 = v54;
          v19 = v55[0];
          *(_OWORD *)(v17 + 30) = *(_OWORD *)((char *)v55 + 14);
          *(_OWORD *)(v17 + 16) = v19;
          *(_OWORD *)(v16 + 248) = v18;
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + v12 + 296, &v56);
          *(_BYTE *)(v14 + 312) = 1;
        }
        v12 += 320;
      }
      while (v13 != v12);
    }
  }
  std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v8);
  v48 = (_DWORD *)v5;
  v20 = *(_QWORD *)(a1[4] + 16);
  v21 = (unsigned int *)(v20 + 16);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = v48;
  ++*v48;
  v24 = *(_QWORD *)(a1[3] + 8);
  if (v24)
    v25 = v24 - 16;
  else
    v25 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 1896);
  v27 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v27 = 2222;
  *(_QWORD *)(v27 + 8) = v26;
  *(_QWORD *)(v27 + 528) = v27 + 16;
  *(_QWORD *)(v27 + 536) = v27 + 16;
  *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v27 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
  v49 = (IPC::Encoder *)v27;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v27, a1 + 34);
  v47 = 0;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = off_1E34D3940;
  v28[1] = v23;
  v50 = 0;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v50);
  v29 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v50 = v28;
  *(_QWORD *)v51 = v29;
  v51[8] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v49, 0, (uint64_t)&v50, 1);
  if (v51[8])
  {
    v31 = v50;
    v50 = 0;
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
  }
  v32 = v49;
  v49 = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v30);
    WTF::fastFree(v33, v34);
  }
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v47);
  if (v20)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v20 + 16));
  v36 = a1[3];
  if (v36 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
  {
    v38 = *(_QWORD *)(v37 + 208);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v38 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v35);
  }
  else
  {
    BoolValueForKey = 0;
  }
  v40 = (_QWORD *)a1[37];
  if (v40)
  {
    v41 = 0;
    do
    {
      v42 = *v40;
      CFRetain(*(CFTypeRef *)(*v40 + 8));
      ++*v23;
      v50 = v23;
      *(_QWORD *)v51 = v41;
      *(_OWORD *)&v51[8] = *((_OWORD *)a1 + 17);
      v51[24] = BoolValueForKey;
      v43 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v43 = off_1E34D3968;
      v44 = v50;
      v49 = (IPC::Encoder *)v43;
      v50 = 0;
      *(_QWORD *)(v43 + 8) = v44;
      v45 = *(_OWORD *)&v51[9];
      *(_OWORD *)(v43 + 16) = *(_OWORD *)v51;
      *(_OWORD *)(v43 + 25) = v45;
      WebKit::WebFrameProxy::getFrameInfo(v42, &v49);
      if (v49)
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v49 + 8))(v49);
      WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v50);
      CFRelease(*(CFTypeRef *)(v42 + 8));
      v40 = (_QWORD *)v40[2];
      ++v41;
    }
    while (v40);
  }
  return (WebCore::ResourceRequest *)WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(&v48);
}

_QWORD *WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  CFTypeRef v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  CFTypeRef v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  const void *v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  CFTypeRef cf;
  _BYTE v90[24];
  int v91;
  WTF::StringImpl *v92;
  __int128 v93;
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  CFTypeRef v117;
  _BYTE v118[24];
  int v119;
  WTF::StringImpl *v120;
  __int128 v121;
  _OWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;

  v1 = result;
  v126 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = 0;
  if (!v2)
    return v1;
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return v1;
  }
  v66 = 0;
  v67 = 0;
  v3 = *(_DWORD *)(v2 + 324);
  if (!v3)
    goto LABEL_20;
  if (v3 < 0xD20D21)
  {
    LODWORD(v67) = 312 * v3 / 0x138;
    v66 = WTF::fastMalloc((WTF *)(312 * v3));
    v5 = *(unsigned int *)(v2 + 324);
    if ((_DWORD)v5)
    {
      v65 = v1;
      v6 = 0;
      v7 = *(_QWORD *)(v2 + 312);
      v8 = 320 * v5;
      do
      {
        LOBYTE(v97) = 0;
        v125 = 0;
        if (*(_BYTE *)(v7 + 312))
        {
          std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>(&v97, v7);
          v125 = 1;
          v69 = v97;
          v9 = v98;
          v98 = 0;
          v70 = v9;
          v71 = v99;
          v72 = v100;
          LODWORD(v99) = v99 & 0xFFFFFFFE;
          v10 = v101;
          v101 = 0;
          v73 = v10;
          v74 = v102;
          v75 = v103;
          LODWORD(v102) = v102 & 0xFFFFFFFE;
          v76 = v104;
          v11 = v105;
          v105 = 0u;
          v77 = v11;
          *(_QWORD *)&v11 = v106;
          v106 = 0;
          v78 = v11;
          v12 = v107;
          v107 = 0;
          v79 = v12;
          *(_QWORD *)&v11 = v108;
          v108 = 0;
          v80 = v11;
          v13 = v109;
          v109 = 0;
          v81 = v13;
          *(_QWORD *)&v11 = v110;
          v110 = 0;
          v82 = v11;
          v84 = v112;
          v83 = v111;
          v14 = v113;
          v113 = 0u;
          v85 = v14;
          v88 = v116;
          v87 = v115;
          v15 = v114;
          v16 = v117;
          v114 = 0;
          v117 = 0;
          v86 = v15;
          cf = v16;
          v90[0] = 0;
          v91 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)v118);
          v93 = v121;
          v94[0] = v122[0];
          *(_OWORD *)((char *)v94 + 14) = *(_OWORD *)((char *)v122 + 14);
          v17 = v120;
          v18 = v123;
          v120 = 0;
          v123 = 0;
          v92 = v17;
          v95 = v18;
          v19 = v124;
          v124 = 0;
          v96 = v19;
          v20 = v66 + 312 * HIDWORD(v67);
          *(_WORD *)v20 = v69;
          WTF::URL::URL(v20 + 8, &v70);
          WTF::URL::URL(v20 + 48, &v73);
          *(_QWORD *)(v20 + 88) = v76;
          v21 = v77;
          *(_QWORD *)&v77 = 0;
          *(_QWORD *)(v20 + 96) = v21;
          *(_OWORD *)(v20 + 104) = 0u;
          v22 = *((_QWORD *)&v77 + 1);
          *((_QWORD *)&v77 + 1) = 0;
          *(_QWORD *)(v20 + 104) = v22;
          LODWORD(v22) = v78;
          LODWORD(v78) = 0;
          *(_DWORD *)(v20 + 112) = v22;
          LODWORD(v22) = HIDWORD(v78);
          HIDWORD(v78) = 0;
          *(_DWORD *)(v20 + 116) = v22;
          *(_OWORD *)(v20 + 120) = 0u;
          v23 = v79;
          v79 = 0;
          *(_QWORD *)(v20 + 120) = v23;
          LODWORD(v23) = v80;
          LODWORD(v80) = 0;
          *(_DWORD *)(v20 + 128) = v23;
          LODWORD(v23) = HIDWORD(v80);
          HIDWORD(v80) = 0;
          *(_DWORD *)(v20 + 132) = v23;
          *(_OWORD *)(v20 + 136) = 0u;
          v24 = v81;
          v81 = 0;
          *(_QWORD *)(v20 + 136) = v24;
          LODWORD(v24) = v82;
          LODWORD(v82) = 0;
          *(_DWORD *)(v20 + 144) = v24;
          LODWORD(v24) = HIDWORD(v82);
          HIDWORD(v82) = 0;
          *(_DWORD *)(v20 + 148) = v24;
          LOBYTE(v24) = v84;
          *(_DWORD *)(v20 + 152) = v83;
          *(_BYTE *)(v20 + 156) = v24;
          v25 = v85;
          *(_QWORD *)&v85 = 0;
          *(_QWORD *)(v20 + 160) = v25;
          v26 = *((_QWORD *)&v85 + 1);
          *((_QWORD *)&v85 + 1) = 0;
          *(_QWORD *)(v20 + 168) = v26;
          v27 = v86;
          v86 = 0;
          *(_QWORD *)(v20 + 176) = v27;
          LOBYTE(v27) = v88;
          *(_QWORD *)(v20 + 184) = v87;
          *(_BYTE *)(v20 + 192) = v27;
          v28 = cf;
          cf = 0;
          *(_BYTE *)(v20 + 208) = 0;
          v20 += 208;
          *(_QWORD *)(v20 - 8) = v28;
          *(_DWORD *)(v20 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v20, (uint64_t)v90);
          v29 = v92;
          v92 = 0;
          *(_QWORD *)(v20 + 32) = v29;
          v30 = v93;
          v31 = v94[0];
          *(_OWORD *)(v20 + 70) = *(_OWORD *)((char *)v94 + 14);
          *(_OWORD *)(v20 + 56) = v31;
          *(_OWORD *)(v20 + 40) = v30;
          *(_OWORD *)(v20 + 88) = 0u;
          v32 = v95;
          v95 = 0;
          *(_QWORD *)(v20 + 88) = v32;
          LODWORD(v32) = v96;
          LODWORD(v96) = 0;
          *(_DWORD *)(v20 + 96) = v32;
          LODWORD(v32) = HIDWORD(v96);
          HIDWORD(v96) = 0;
          *(_DWORD *)(v20 + 100) = v32;
          v6 = ++HIDWORD(v67);
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v33);
          v35 = v92;
          v92 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v34);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (v91 != -1)
            ((void (*)(char *, _BYTE *))off_1E34D3888[v91])(&v68, v90);
          v91 = -1;
          v36 = cf;
          cf = 0;
          if (v36)
            CFRelease(v36);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v70);
        }
        std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v97, v4);
        v7 += 320;
        v8 -= 320;
      }
      while (v8);
      v37 = v6;
      v1 = v65;
      goto LABEL_21;
    }
LABEL_20:
    v37 = 0;
LABEL_21:
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v66, v37);
    v97 = *(_WORD *)(v2 + 16);
    WTF::URL::URL((uint64_t)&v98, (uint64_t *)(v2 + 24));
    WTF::URL::URL((uint64_t)&v101, (uint64_t *)(v2 + 64));
    v104 = *(_QWORD *)(v2 + 104);
    v38 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(v2 + 112) = 0u;
    v105 = v38;
    *(_QWORD *)&v38 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;
    v106 = v38;
    v39 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v2 + 136) = 0;
    v107 = v39;
    *(_QWORD *)&v38 = *(_QWORD *)(v2 + 144);
    *(_QWORD *)(v2 + 144) = 0;
    v108 = v38;
    v40 = *(_QWORD *)(v2 + 152);
    *(_QWORD *)(v2 + 152) = 0;
    v109 = v40;
    *(_QWORD *)&v38 = *(_QWORD *)(v2 + 160);
    *(_QWORD *)(v2 + 160) = 0;
    v110 = v38;
    v112 = *(_BYTE *)(v2 + 172);
    v111 = *(_DWORD *)(v2 + 168);
    v41 = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(v2 + 176) = 0u;
    v113 = v41;
    v42 = *(_QWORD *)(v2 + 192);
    v43 = *(_QWORD *)(v2 + 200);
    *(_QWORD *)(v2 + 192) = 0;
    v114 = v42;
    v115 = v43;
    v116 = *(_BYTE *)(v2 + 208);
    v44 = *(const void **)(v2 + 216);
    *(_QWORD *)(v2 + 216) = 0;
    v117 = v44;
    v118[0] = 0;
    v119 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v118, v2 + 224);
    v45 = *(WTF::StringImpl **)(v2 + 256);
    *(_QWORD *)(v2 + 256) = 0;
    v46 = *(_OWORD *)(v2 + 280);
    v47 = *(_OWORD *)(v2 + 264);
    *(_OWORD *)((char *)v122 + 14) = *(_OWORD *)(v2 + 294);
    v122[0] = v46;
    v121 = v47;
    v48 = v66;
    v66 = 0;
    v120 = v45;
    v123 = v48;
    *(_QWORD *)&v46 = v67;
    v67 = 0;
    v124 = v46;
    v49 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v49 + 16))(v49, &v97);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v50);
    v52 = v120;
    v120 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
    if (v119 != -1)
      ((void (*)(__int16 *, _BYTE *))off_1E34D3888[v119])(&v69, v118);
    v119 = -1;
    v53 = v117;
    v117 = 0;
    if (v53)
      CFRelease(v53);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v98);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v54);
    v56 = *(unsigned int *)(v2 + 324);
    if ((_DWORD)v56)
    {
      v57 = *(_QWORD *)(v2 + 312);
      v58 = 320 * v56;
      do
      {
        v57 = std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100](v57, v55)+ 320;
        v58 -= 320;
      }
      while (v58);
    }
    v59 = *(WTF **)(v2 + 312);
    if (v59)
    {
      *(_QWORD *)(v2 + 312) = 0;
      *(_DWORD *)(v2 + 320) = 0;
      WTF::fastFree(v59, v55);
    }
    v60 = *(WTF::StringImpl **)(v2 + 256);
    *(_QWORD *)(v2 + 256) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = *(unsigned int *)(v2 + 248);
    if ((_DWORD)v61 != -1)
      ((void (*)(__int16 *, uint64_t))off_1E34D3888[v61])(&v97, v2 + 224);
    *(_DWORD *)(v2 + 248) = -1;
    v62 = *(const void **)(v2 + 216);
    *(_QWORD *)(v2 + 216) = 0;
    if (v62)
      CFRelease(v62);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v2 + 24));
    v64 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    WTF::fastFree((WTF *)v2, v63);
    return v1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebFrameProxy::frameTreeCreationParameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  int v20;

  v2 = this;
  *(_OWORD *)a2 = *(_OWORD *)(this + 272);
  v4 = *(_DWORD **)(this + 240);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(this + 288);
  if (v5 && (v6 = *(unsigned int *)(v5 - 12), (_DWORD)v6))
  {
    if (v6 >= 0x6666667)
    {
      __break(0xC471u);
      return this;
    }
    v7 = 40 * v6;
    this = WTF::fastMalloc((WTF *)(40 * v6));
    v8 = this;
    *(_DWORD *)(a2 + 32) = (v7 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)(a2 + 24) = this;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 296);
  if (v9)
  {
    v10 = 1;
    do
    {
      WebKit::WebFrameProxy::frameTreeCreationParameters((uint64_t *)&v16, *(WebKit::WebFrameProxy **)v9);
      v11 = v8 + 40 * (v10 - 1);
      *(_OWORD *)v11 = v16;
      v12 = v17;
      v17 = 0;
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v11 + 32) = 0;
      v13 = v18;
      v18 = 0;
      *(_QWORD *)(v11 + 24) = v13;
      LODWORD(v13) = v19;
      v19 = 0;
      *(_DWORD *)(v11 + 32) = v13;
      LODWORD(v13) = v20;
      v20 = 0;
      *(_DWORD *)(v11 + 36) = v13;
      *(_DWORD *)(a2 + 36) = v10;
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v14);
      this = (uint64_t)v17;
      v17 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v15);
        else
          *(_DWORD *)this -= 2;
      }
      v9 = *(_QWORD *)(v9 + 16);
      ++v10;
    }
    while (v9);
  }
  return this;
}

uint64_t WebKit::WebFrameProxy::removeChildFrames(WebKit::WebFrameProxy *this, void *a2)
{
  _QWORD *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;

  v3 = (_QWORD *)((char *)this + 288);
  result = WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)this + 288, a2);
  v6 = *((_QWORD *)this + 36);
  if (v6)
  {
    *v3 = 0;
    result = WTF::fastFree((WTF *)(v6 - 16), v5);
  }
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  return result;
}

void WebKit::WebFrameProxy::remoteProcessDidTerminate(WebKit::WebFrameProxy *this, WebKit::WebProcessProxy *a2)
{
  CFTypeRef **i;
  CFTypeRef *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  for (i = (CFTypeRef **)*((_QWORD *)this + 37); i; i = (CFTypeRef **)i[2])
  {
    v5 = *i;
    CFRetain((*i)[1]);
    WebKit::WebFrameProxy::remoteProcessDidTerminate((WebKit::WebFrameProxy *)v5, a2);
    CFRelease(v5[1]);
  }
  v6 = *(unsigned int **)(*((_QWORD *)this + 4) + 16);
  if (*((_QWORD *)a2 + 22) == *((_QWORD *)v6 + 22) && *((_DWORD *)this + 10) != 2)
  {
    v7 = v6 + 4;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    WebKit::WebFrameProxy::notifyParentOfLoadCompletion(this, (WebKit::WebProcessProxy *)v6);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
  }
}

void WebKit::WebFrameProxy::notifyParentOfLoadCompletion(WebKit::WebFrameProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  __int128 *v13;

  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 + 8));
      v6 = *(_QWORD *)(v3 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 1896);
          v9 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16);
          v10 = (unsigned int *)(v9 + 16);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          if (*(_QWORD *)(v9 + 176) != *((_QWORD *)a2 + 22))
          {
            v12 = *((_OWORD *)this + 17);
            v13 = &v12;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidFinishLoadInAnotherProcess>(v9, (uint64_t **)&v13, v8, 0);
          }
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
        }
      }
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
}

void WebKit::WebFrameProxy::traverseNext(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  WebKit::WebFrameProxy *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t Sibling;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (WebKit::WebFrameProxy *)this;
  v4 = this[36];
  if (v4)
  {
    if (*((_DWORD *)v4 - 3))
    {
      v5 = *this[37];
      if (v5)
        goto LABEL_6;
    }
  }
  Sibling = WebKit::WebFrameProxy::nextSibling((WebKit::WebFrameProxy *)this);
  if (Sibling)
  {
    v5 = Sibling;
LABEL_6:
    CFRetain(*(CFTypeRef *)(v5 + 8));
    *(_QWORD *)a2 = v5;
    goto LABEL_7;
  }
  CFRetain(*((CFTypeRef *)v2 + 1));
  while (1)
  {
    v7 = *((_QWORD *)v2 + 39);
    if (!v7)
      break;
    v8 = *(CFTypeRef **)(v7 + 8);
    if (!v8)
      break;
    CFRetain(v8[1]);
    CFRelease(*((CFTypeRef *)v2 + 1));
    v9 = WebKit::WebFrameProxy::nextSibling((WebKit::WebFrameProxy *)v8);
    v2 = (WebKit::WebFrameProxy *)v8;
    if (v9)
    {
      v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      *(_QWORD *)a2 = v10;
      *(_BYTE *)(a2 + 8) = 0;
      CFRelease(v8[1]);
      return;
    }
  }
  CFRelease(*((CFTypeRef *)v2 + 1));
  *(_QWORD *)a2 = 0;
LABEL_7:
  *(_BYTE *)(a2 + 8) = 0;
}

uint64_t WebKit::WebFrameProxy::nextSibling(WebKit::WebFrameProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebFrameProxy *v6;

  v1 = *((_QWORD *)this + 39);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || **(WebKit::WebFrameProxy ***)(v2 + 304) == this)
    return 0;
  v6 = this;
  v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v6);
  v4 = *(_QWORD *)(v2 + 288);
  if (v4)
    v4 += 8 * *(unsigned int *)(v4 - 4);
  if (v4 != v3 && *(_QWORD *)v3)
    return **(_QWORD **)(*(_QWORD *)v3 + 16);
  else
    return 0;
}

void WebKit::WebFrameProxy::traverseNext(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  WebKit::WebFrameProxy::traverseNext((uint64_t **)a1, (uint64_t)&v9);
  v6 = v9;
  if (v9)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (v7)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 && (v8 = *(_QWORD *)(v8 + 8)) != 0)
    {
      v6 = *(_QWORD *)(v8 + 264);
      if (v6)
        CFRetain(*(CFTypeRef *)(v6 + 8));
      LOBYTE(v8) = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v8;
}

void WebKit::WebFrameProxy::traversePrevious(WebKit::WebFrameProxy *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  CFTypeRef *v7;
  CFTypeRef *Child;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *v12;
  CFTypeRef *v13;

  v6 = WebKit::WebFrameProxy::previousSibling(a1);
  if (v6)
  {
    v7 = (CFTypeRef *)v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    Child = WebKit::WebFrameProxy::deepLastChild(v7);
    v9 = Child;
    if (Child)
      CFRetain(Child[1]);
    *(_QWORD *)a3 = v9;
    *(_BYTE *)(a3 + 8) = 0;
    CFRelease(v7[1]);
    return;
  }
  v10 = *((_QWORD *)a1 + 39);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 + 8));
      *(_QWORD *)a3 = v11;
LABEL_13:
      *(_BYTE *)(a3 + 8) = 0;
      return;
    }
  }
  if (!a2)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_13;
  }
  v12 = WebKit::WebFrameProxy::deepLastChild((CFTypeRef *)a1);
  v13 = v12;
  if (v12)
    CFRetain(v12[1]);
  *(_QWORD *)a3 = v13;
  *(_BYTE *)(a3 + 8) = 1;
}

uint64_t WebKit::WebFrameProxy::previousSibling(WebKit::WebFrameProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebFrameProxy *v6;

  v1 = *((_QWORD *)this + 39);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2 || **(WebKit::WebFrameProxy ***)(v2 + 296) == this)
    return 0;
  v6 = this;
  v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v6);
  v4 = *(_QWORD *)(v2 + 288);
  if (v4)
    v4 += 8 * *(unsigned int *)(v4 - 4);
  if (v4 != v3 && *(_QWORD *)v3)
    return **(_QWORD **)(*(_QWORD *)v3 + 8);
  else
    return 0;
}

CFTypeRef *WebKit::WebFrameProxy::deepLastChild(CFTypeRef *this)
{
  CFTypeRef *v1;
  _DWORD *v2;
  CFTypeRef *v3;
  CFTypeRef *v4;
  _DWORD *v5;

  v1 = this;
  if (this)
    CFRetain(this[1]);
  v2 = v1[36];
  if (v2)
  {
    if (*(v2 - 3))
    {
      v3 = *(CFTypeRef **)v1[38];
      if (v3)
      {
        v4 = v3 + 1;
        CFRetain(v3[1]);
        CFRetain(v3[1]);
        CFRelease(v1[1]);
        v5 = v3[36];
        if (v5)
        {
          while (*(v5 - 3))
          {
            v1 = *(CFTypeRef **)v3[38];
            if (!v1)
              break;
            CFRetain(v1[1]);
            CFRelease(*v4);
            CFRetain(v1[1]);
            CFRelease(v3[1]);
            v5 = v1[36];
            v4 = v1 + 1;
            v3 = v1;
            if (!v5)
              goto LABEL_12;
          }
        }
        v1 = v3;
LABEL_12:
        CFRelease(v1[1]);
      }
    }
  }
  CFRelease(v1[1]);
  return v1;
}

CFTypeRef *WebKit::WebFrameProxy::rootFrame(CFTypeRef *this)
{
  CFTypeRef v2;
  CFTypeRef *v3;
  CFTypeRef *v4;

  CFRetain(this[1]);
  v2 = this[39];
  if (v2)
  {
    v3 = this;
    while (1)
    {
      v4 = (CFTypeRef *)*((_QWORD *)v2 + 1);
      if (!v4 || *(_QWORD *)(*((_QWORD *)v4[4] + 2) + 176) != *(_QWORD *)(*((_QWORD *)this[4] + 2) + 176))
        break;
      CFRetain(v4[1]);
      CFRelease(v3[1]);
      v2 = v4[39];
      v3 = v4;
      if (!v2)
        goto LABEL_9;
    }
    v4 = v3;
  }
  else
  {
    v4 = this;
  }
LABEL_9:
  CFRelease(v4[1]);
  return v4;
}

uint64_t WebKit::WebFullScreenManagerProxy::willEnterFullScreen(WebKit::WebFullScreenManagerProxy *this, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v8[4];
  int v9;

  v9 = a2;
  v3 = *((_QWORD *)this + 8);
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  v8[0] = "WebFullScreenManagerProxy";
  v8[1] = (_DWORD *)26;
  v8[2] = "willEnterFullScreen";
  v8[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  *((_BYTE *)this + 40) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 368) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 368));
  v5 = *((_QWORD *)this + 3);
  v6 = *(_QWORD *)(v5 + 208);
  v8[0] = &v9;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillEnterFullScreen>(v6, v8, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
}

_QWORD *WebKit::WebFullScreenManagerProxy::didEnterFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  v9[0] = "WebFullScreenManagerProxy";
  v9[1] = 26;
  v9[2] = "didEnterFullScreen";
  v9[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  *((_BYTE *)this + 40) = 2;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 368) + 32))(*(_QWORD *)(*((_QWORD *)this + 3) + 368));
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 208);
  LOBYTE(v9[0]) = 0;
  result = (_QWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidEnterFullScreen>(v5, (uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
  v7 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v7 + 826))
  {
    result = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v7 + 48) + 24));
    v8 = result[40];
    if (v8)
    {
      result = *(_QWORD **)(v8 + 216);
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t WebKit::WebFullScreenManagerProxy::willExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  v7[0] = "WebFullScreenManagerProxy";
  v7[1] = 26;
  v7[2] = "willExitFullScreen";
  v7[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  *((_BYTE *)this + 40) = 3;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 368) + 40))(*(_QWORD *)(*((_QWORD *)this + 3) + 368));
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 208);
  LOBYTE(v7[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillExitFullScreen>(v5, (uint64_t)v7, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
}

uint64_t WebKit::WebFullScreenManagerProxy::closeWithCallback(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  v4 = (_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 56))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, a2);
    v5 = *(unsigned int *)(a1 + 60);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*v4 + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 60) = v5 + 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t WebKit::WebFullScreenManagerProxy::didExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  v11[0] = "WebFullScreenManagerProxy";
  v11[1] = 26;
  v11[2] = "didExitFullScreen";
  v11[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  *((_BYTE *)this + 40) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 368) + 48))(*(_QWORD *)(*((_QWORD *)this + 3) + 368));
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 208);
  LOBYTE(v11[0]) = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidExitFullScreen>(v5, (uint64_t)v11, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
  v7 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v7 + 826))
  {
    v8 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v7 + 48) + 24))
         + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 216);
      if (v9)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 1);
    }
  }
  return WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(this, v6);
}

uint64_t WebKit::WebFullScreenManagerProxy::requestRestoreFullScreen(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = a1[8];
  v5 = a1[9];
  v9[0] = "WebFullScreenManagerProxy";
  v9[1] = 26;
  v9[2] = "requestRestoreFullScreen";
  v9[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  v6 = a1[3];
  v7 = *(_QWORD *)(v6 + 208);
  LOBYTE(v9[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(v7, (uint64_t)v9, a2, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 1896), 0, 1);
}

uint64_t WebKit::WebFullScreenManagerProxy::requestExitFullScreen(WebKit::WebFullScreenManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  v7[0] = "WebFullScreenManagerProxy";
  v7[1] = 26;
  v7[2] = "requestExitFullScreen";
  v7[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 208);
  LOBYTE(v7[0]) = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RequestExitFullScreen>(v5, (uint64_t)v7, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
}

uint64_t WebKit::WebFullScreenManagerProxy::supportsFullScreen(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, a2 ^ 1u);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebKit::WebFullScreenManagerProxy *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v6 = *((_QWORD *)this + 3);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v11 = *(_OWORD *)a2;
  v12 = *(_OWORD *)a3;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = &off_1E34D39B8;
  *(_QWORD *)(v9 + 8) = v7;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = v12;
  v13 = v9;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(v6, &v13);
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

void `non-virtual thunk to'WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 16), a2);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 32), a2);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 32), a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebGeolocationManagerProxy::~WebGeolocationManagerProxy((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessProxy *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t *v5;
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 isUpdating;
  const WTF::StringImpl *v12;
  _BOOL4 isHighAccuracyEnabled;
  const WTF::StringImpl *v14;
  _BOOL8 v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v5 = (uint64_t *)((char *)this + 56);
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, a3);
  v8 = result;
  v9 = *((_QWORD *)this + 7);
  if (v9)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if (v9 != result)
  {
    v10 = *(_QWORD *)(result + 8);
    isUpdating = WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, (_QWORD **)v10, v7);
    isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, v10, v12);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v10, a2);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v10 + 16, a2);
    if (isUpdating && !WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, (_QWORD **)v10, v14))
    {
      v18 = *((_QWORD *)this + 8);
      if (v18)
        (*(void (**)(uint64_t, WebKit::WebGeolocationManagerProxy *))(*(_QWORD *)v18 + 24))(v18, this);
      else
        std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(v10 + 152), 0);
    }
    else
    {
      v15 = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, v10, v14);
      if (isHighAccuracyEnabled != v15)
      {
        v16 = v15;
        v17 = *((_QWORD *)this + 8);
        if (v17)
          (*(void (**)(uint64_t, WebKit::WebGeolocationManagerProxy *, _BOOL8))(*(_QWORD *)v17 + 32))(v17, this, v16);
        else
          WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(*(WebCore::CoreLocationGeolocationProvider **)(v10 + 152));
      }
    }
    result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)v10);
    if ((_DWORD)result)
    {
      result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v10 + 16));
      if ((_DWORD)result)
      {
        if (*v5)
        {
          v20 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
          if (v20 == v8)
            return result;
        }
        else
        {
          if (!v8)
            return result;
          v20 = 0;
        }
        if (v20 != v8)
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)v8, v19);
          result = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (result)
            result = std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](result);
          ++*(_DWORD *)(*v5 - 16);
          v21 = *v5;
          if (*v5)
            v22 = *(_DWORD *)(v21 - 12) - 1;
          else
            v22 = -1;
          *(_DWORD *)(v21 - 12) = v22;
          v23 = *v5;
          if (*v5)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v5, v25 >> 1, 0);
          }
        }
      }
    }
  }
  return result;
}

CFTypeRef WebKit::WebGeolocationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

CFTypeRef `non-virtual thunk to'WebKit::WebGeolocationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void WebKit::WebGeolocationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
  CFRelease(this[1]);
}

uint64_t *WebKit::WebGeolocationManagerProxy::providerDidChangePosition(WebKit::WebGeolocationManagerProxy *this, WebKit::WebGeolocationPosition *a2, const WTF::StringImpl *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t **v27;
  uint64_t v28;
  char v29;
  uint64_t *v30[2];
  _QWORD **v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[2];

  result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  v6 = result;
  v38[0] = result;
  v38[1] = v7;
  v8 = *((_QWORD *)this + 7);
  if (v8)
    v9 = (uint64_t *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    v10 = (_OWORD *)((char *)a2 + 16);
    while (2)
    {
      v11 = v6[1];
      v12 = *(unsigned __int8 *)(v11 + 144);
      v14 = v10[1];
      v13 = v10[2];
      *(_OWORD *)(v11 + 32) = *v10;
      *(_OWORD *)(v11 + 48) = v14;
      *(_OWORD *)(v11 + 64) = v13;
      v15 = v10[6];
      v17 = v10[3];
      v16 = v10[4];
      *(_OWORD *)(v11 + 112) = v10[5];
      *(_OWORD *)(v11 + 128) = v15;
      *(_OWORD *)(v11 + 80) = v17;
      *(_OWORD *)(v11 + 96) = v16;
      if (!v12)
        *(_BYTE *)(v11 + 144) = 1;
      v18 = (_QWORD **)v6[1];
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v18, &v36);
      v19 = *v18;
      if (*v18)
      {
        v20 = *((unsigned int *)v19 - 1);
        v21 = &v19[v20];
      }
      else
      {
        v21 = 0;
        v20 = 0;
      }
      v31 = v18;
      v32 = v21;
      v33 = v21;
      v34 = v21;
      v35 = &v19[v20];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
      while (v37 != v32)
      {
        v24 = v6[1];
        if (!*(_BYTE *)(v24 + 144))
        {
          v26 = std::__throw_bad_optional_access[abi:sn180100]();
          return (uint64_t *)WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>((uint64_t)v26, v27, v28, v29);
        }
        v25 = *(_QWORD *)(*v37 + 8);
        v30[0] = v6;
        v30[1] = (uint64_t *)(v24 + 32);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(v25, v30, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
      }
      v38[0] += 16;
      result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v38, v22, v23);
      v6 = (uint64_t *)v38[0];
      if ((uint64_t *)v38[0] != v9)
        continue;
      break;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1724;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t *WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition(WebKit::WebGeolocationManagerProxy *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17[2];
  _QWORD **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];

  result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  v6 = result;
  v25[0] = result;
  v25[1] = v7;
  v8 = *((_QWORD *)this + 7);
  if (v8)
    v9 = (uint64_t *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      v10 = (_QWORD **)v6[1];
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v10, &v23);
      v11 = *v10;
      if (*v10)
      {
        v12 = *((unsigned int *)v11 - 1);
        v13 = &v11[v12];
      }
      else
      {
        v13 = 0;
        v12 = 0;
      }
      v18 = v10;
      v19 = v13;
      v20 = v13;
      v21 = v13;
      v22 = &v11[v12];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
      while (v24 != v19)
      {
        v16 = *(_QWORD *)(*v24 + 8);
        v17[0] = v6;
        v17[1] = (uint64_t *)a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(v16, v17, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v23);
      }
      v25[0] += 16;
      result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v25, v14, v15);
      v6 = (uint64_t *)v25[0];
    }
    while ((uint64_t *)v25[0] != v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1725;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t *WebKit::WebGeolocationManagerProxy::resetPermissions(WebKit::WebGeolocationManagerProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD **v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[2];

  result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, a2, a3);
  v5 = result;
  v24[0] = result;
  v24[1] = v6;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v8 = (uint64_t *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v8 = 0;
  if (v8 != result)
  {
    do
    {
      v9 = (_QWORD **)v5[1];
      WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v9, &v22);
      v10 = *v9;
      if (*v9)
      {
        v11 = *((unsigned int *)v10 - 1);
        v12 = &v10[v11];
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
      v17 = v9;
      v18 = v12;
      v19 = v12;
      v20 = v12;
      v21 = &v10[v11];
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
      while (v23 != v18)
      {
        v15 = *(_QWORD *)(*v23 + 8);
        v16 = v5;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(v15, &v16, 0, 0);
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      }
      v24[0] += 16;
      result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v24, v13, v14);
      v5 = (uint64_t *)v24[0];
    }
    while ((uint64_t *)v24[0] != v8);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1726;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t a4, const WTF::StringImpl **a5, int a6)
{
  const WTF::StringImpl *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  _QWORD *v21;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isUpdating;
  const WTF::StringImpl *v33;
  _BOOL4 isHighAccuracyEnabled;
  const WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  WebCore::CoreLocationGeolocationProvider *v39;
  WebCore::CoreLocationGeolocationProvider *v40;
  NSObject *v41;
  NSObject *v42;
  int v43;
  unsigned int *v44;
  uint64_t v45;
  __int128 buf;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::webPage(a4, &v45);
  v12 = v45;
  if (v45)
  {
    if ((WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken((WebKit::GeolocationPermissionRequestManagerProxy *)(*(_QWORD *)(v45 + 32) + 712), a5, v11) & 1) == 0)
    {
      v42 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy(WebProcessProxy "
                                        "&, const WebCore::RegistrableDomain &, WebPageProxyIdentifier, const String &, BOOL)";
        _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebGeolocationManagerProxy.cpp 144: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(a2 + 144) + 98) = 1;
      goto LABEL_39;
    }
    v43 = a6;
    v14 = (uint64_t *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 56);
    if (v15
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(a1 + 56), 0), (v15 = *v14) != 0))
    {
      v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v16 = 0;
    }
    v44 = (unsigned int *)a2;
    v17 = WTF::ASCIICaseInsensitiveHash::hash(*a3, v13) & v16;
    v18 = v15 + 16 * v17;
    if ((WTF::equal(*(WTF **)v18, 0, v19) & 1) == 0)
    {
      v21 = 0;
      v22 = 1;
      do
      {
        if (*(_QWORD *)v18 == -1)
        {
          v21 = (_QWORD *)v18;
        }
        else if ((WTF::equalIgnoringASCIICase(*(WTF **)v18, *a3, v20) & 1) != 0)
        {
          goto LABEL_26;
        }
        v17 = (v17 + v22) & v16;
        v18 = v15 + 16 * v17;
        ++v22;
      }
      while (!WTF::equal(*(WTF **)v18, 0, v20));
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        v18 = (uint64_t)v21;
      }
    }
    WTF::String::operator=((WTF::StringImpl **)v18, (WTF::StringImpl *)a3);
    v23 = (_OWORD *)WTF::fastMalloc((WTF *)0xA0);
    *v23 = 0u;
    v23[1] = 0u;
    v23[2] = 0u;
    v23[3] = 0u;
    v23[4] = 0u;
    v23[5] = 0u;
    v23[6] = 0u;
    v23[7] = 0u;
    v23[8] = 0u;
    v23[9] = 0u;
    v24 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v23;
    if (v24)
      std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v24);
    v25 = *v14;
    if (*v14)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v14;
    if (*v14)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        goto LABEL_26;
    }
    else if (3 * v30 > 4 * v29)
    {
LABEL_26:
      v31 = *(_QWORD *)(v18 + 8);
      isUpdating = WebKit::WebGeolocationManagerProxy::isUpdating(a1, (_QWORD **)v31, v20);
      isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(a1, v31, v33);
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v31, v44, (uint64_t)&buf);
      if (v43)
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v31 + 16, v44, (uint64_t)&buf);
      if (isUpdating)
      {
        if (((isHighAccuracyEnabled | v43 ^ 1) & 1) == 0)
        {
          v36 = *(_QWORD *)(a1 + 64);
          if (v36)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, a1, 1);
          else
            WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(*(WebCore::CoreLocationGeolocationProvider **)(v31 + 152));
        }
        if (*(_BYTE *)(v31 + 144))
        {
          *(_QWORD *)&buf = a3;
          *((_QWORD *)&buf + 1) = v31 + 32;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>((uint64_t)v44, (uint64_t **)&buf, 0, 0);
        }
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 64);
        if (v37)
        {
          v38 = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(a1, v31, v35);
          (*(void (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v37 + 32))(v37, a1, v38);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), a1);
        }
        else
        {
          v39 = (WebCore::CoreLocationGeolocationProvider *)WTF::fastMalloc((WTF *)8);
          WebCore::CoreLocationGeolocationProvider::CoreLocationGeolocationProvider();
          std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(v31 + 152), v39);
          v40 = *(WebCore::CoreLocationGeolocationProvider **)(v31 + 152);
          WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v31 + 16));
          WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(v40);
        }
      }
LABEL_39:
      CFRelease(*(CFTypeRef *)(v12 + 8));
      return;
    }
    v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(a1 + 56), (WTF::ASCIICaseInsensitiveHash **)v18);
    goto LABEL_26;
  }
  v41 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebGeolocationManagerProxy::startUpdatingWithProxy(WebProcessProxy &, c"
                                    "onst WebCore::RegistrableDomain &, WebPageProxyIdentifier, const String &, BOOL)";
    _os_log_fault_impl(&dword_196BCC000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebGeolocationManagerProxy.cpp 141: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 144) + 98) = 1;
}

BOOL WebKit::WebGeolocationManagerProxy::isUpdating(uint64_t a1, _QWORD **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _BOOL4 isEmptyIgnoringNullReferences;
  _QWORD v12[2];

  if (!*(_QWORD *)(a1 + 64))
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(a2);
  v4 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 56), (uint64_t)a2, a3);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  v12[0] = v4;
  v12[1] = v5;
  if (v7 == v4)
    return 0;
  do
  {
    isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*(_QWORD ***)(v4 + 8));
    if (!isEmptyIgnoringNullReferences)
      break;
    v12[0] += 16;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
    v4 = v12[0];
  }
  while (v12[0] != v7);
  return !isEmptyIgnoringNullReferences;
}

BOOL WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _BOOL4 isEmptyIgnoringNullReferences;
  _QWORD v12[2];

  if (!*(_QWORD *)(a1 + 64))
    return !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a2 + 16));
  v4 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(a1 + 56), a2, a3);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  v12[0] = v4;
  v12[1] = v5;
  if (v7 == v4)
    return 0;
  do
  {
    isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(*(_QWORD *)(v4 + 8) + 16));
    if (!isEmptyIgnoringNullReferences)
      break;
    v12[0] += 16;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
    v4 = v12[0];
  }
  while (v12[0] != v7);
  return !isEmptyIgnoringNullReferences;
}

uint64_t WebKit::WebGeolocationManagerProxy::setEnableHighAccuracyWithProxy(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessProxy *a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t a4)
{
  uint64_t result;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int isHighAccuracyEnabled;
  uint64_t v12;
  const WTF::StringImpl *v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v16[24];

  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, a3);
  v9 = *((_QWORD *)this + 7);
  if (v9)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if (v9 != result)
  {
    v10 = *(_QWORD *)(result + 8);
    isHighAccuracyEnabled = WebKit::WebGeolocationManagerProxy::isHighAccuracyEnabled((uint64_t)this, v10, v8);
    v12 = v10 + 16;
    if ((_DWORD)a4)
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v12, (unsigned int *)a2, (uint64_t)v16);
    else
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v12, a2);
    result = WebKit::WebGeolocationManagerProxy::isUpdating((uint64_t)this, (_QWORD **)v10, v13);
    if ((_DWORD)result)
      v14 = isHighAccuracyEnabled == a4;
    else
      v14 = 1;
    if (!v14)
    {
      v15 = *((_QWORD *)this + 8);
      if (v15)
        return (*(uint64_t (**)(uint64_t, WebKit::WebGeolocationManagerProxy *, uint64_t))(*(_QWORD *)v15 + 32))(v15, this, a4);
      else
        return WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(*(WebCore::CoreLocationGeolocationProvider **)(v10 + 152));
    }
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)142>::type()
{
  return 142;
}

uint64_t API::ObjectImpl<(API::Object::Type)61>::type()
{
  return 61;
}

uint64_t API::ObjectImpl<(API::Object::Type)59>::type()
{
  return 59;
}

uint64_t API::ObjectImpl<(API::Object::Type)64>::type()
{
  return 64;
}

void WebKit::WebFormSubmissionListenerProxy::~WebFormSubmissionListenerProxy(WebKit::WebFormSubmissionListenerProxy *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34D3870;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34D3870;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)58>::type()
{
  return 58;
}

void std::__optional_storage_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::pair<WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>>,WebKit::ProcessSwapRequestedByClient>,false>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((unsigned __int8 *)a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *a1;
      *a1 = v4;
      if (v5)
        CFRelease(*(CFTypeRef *)(v5 + 8));
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    }
  }
  else if (*((_BYTE *)a1 + 16))
  {
    v6 = *a1;
    *a1 = 0;
    if (v6)
      CFRelease(*(CFTypeRef *)(v6 + 8));
    *((_BYTE *)a1 + 16) = 0;
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *a1 = v7;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    *((_BYTE *)a1 + 16) = 1;
  }
}

WebKit::ProvisionalFrameProxy *std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100](WebKit::ProvisionalFrameProxy **a1, WTF::StringImpl *a2)
{
  WebKit::ProvisionalFrameProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(result, a2);
    return (WebKit::ProvisionalFrameProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v6);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](uint64_t a1)
{
  void *v2;
  uint64_t v3;

  std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100]((WebCore::CoreLocationGeolocationProvider **)(a1 + 152), 0);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  if (*(_QWORD *)a1)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(_QWORD *)a1, v2);
  return WTF::fastFree((WTF *)a1, v2);
}

WebCore::CoreLocationGeolocationProvider *std::unique_ptr<WebCore::CoreLocationGeolocationProvider>::reset[abi:sn180100](WebCore::CoreLocationGeolocationProvider **a1, WebCore::CoreLocationGeolocationProvider *a2)
{
  WebCore::CoreLocationGeolocationProvider *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::CoreLocationGeolocationProvider::~CoreLocationGeolocationProvider(result);
    return (WebCore::CoreLocationGeolocationProvider *)WTF::fastFree(v4, v5);
  }
  return result;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UnapplyEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2478;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 8)
  {
    v23 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v12);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v24;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReapplyEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2306;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 8)
  {
    v23 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v12);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v24;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_QWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t)v15, (WTF::StringImpl *)a2, a3);
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 <= 2 * v21)
      {
LABEL_22:
        v15 = (WTF **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        v19 = *a1;
        if (*a1)
          v22 = *(unsigned int *)(v19 - 4);
        else
          v22 = 0;
      }
    }
    else if (3 * v22 <= 4 * v21)
    {
      goto LABEL_22;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v19 + 16 * v22;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v23 = *a1;
  if (*a1)
    v24 = *(unsigned int *)(v23 - 4);
  else
    v24 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v25 = v8 + 16 * v14;
  v26 = *a3;
  *a3 = 0;
  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
}

BOOL WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t *v15;
  unsigned int v17;
  __int16 v18;
  char v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v17 = -1640531527;
  v18 = 0;
  v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v17, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  v6 = a2[1];
  v7 = v5 & v4;
  v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
  v9 = *v8;
  v10 = v8[1];
  if (*v8 == *a2 && v10 == v6)
    return 1;
  v12 = 1;
  do
  {
    v13 = v9 | v10;
    result = v13 != 0;
    if (!v13)
      break;
    v7 = (v7 + v12) & v4;
    v15 = (uint64_t *)(v2 + 24 * v7);
    v9 = *v15;
    v10 = v15[1];
    ++v12;
  }
  while (v9 != *a2 || v10 != v6);
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes(uint64_t result, void *a2)
{
  WTF *v2;
  WTF *v3;
  uint64_t v4;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    do
    {
      v3 = (WTF *)*((_QWORD *)v2 + 2);
      v4 = *(_QWORD *)v2;
      *(_QWORD *)v2 = 0;
      if (v4)
        CFRelease(*(CFTypeRef *)(v4 + 8));
      result = WTF::fastFree(v2, a2);
      v2 = v3;
    }
    while (v3);
  }
  return result;
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand()
{
  int v0;

  if (WebKit::allFrames(void)::map && (v0 = *(_DWORD *)(WebKit::allFrames(void)::map - 4)) != 0)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::allFrames(void)::map - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(8u);
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  _OWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  char v32;

  v2 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map)
  {
    v3 = *(_DWORD *)(WebKit::allFrames(void)::map - 4);
    v4 = *(_DWORD *)(WebKit::allFrames(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(24 * a1 + 16));
  WebKit::allFrames(void)::map = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = v3;
    while (1)
    {
      v9 = v2 + 24 * v7;
      if (*(_QWORD *)(v9 + 8) != -1)
      {
        if (*(_OWORD *)v9 == 0)
        {
          v12 = v2 + 24 * v7;
          v13 = *(unsigned int **)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          if (!v13)
            goto LABEL_19;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
            goto LABEL_19;
        }
        else
        {
          v10 = WebKit::allFrames(void)::map;
          if (WebKit::allFrames(void)::map)
            v11 = *(_DWORD *)(WebKit::allFrames(void)::map - 8);
          else
            v11 = 0;
          v30 = -1640531527;
          v31 = 0;
          v32 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v30, (_QWORD *)(v2 + 24 * v7));
          v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
          v17 = 0;
          do
          {
            v18 = v16 & v11;
            v19 = (_OWORD *)(v10 + 24 * (v16 & v11));
            v16 = ++v17 + (v16 & v11);
          }
          while (*v19 != 0);
          v20 = v10 + 24 * v18;
          v23 = *(unsigned int **)(v20 + 16);
          v22 = (_QWORD *)(v20 + 16);
          v21 = v23;
          *v22 = 0;
          if (v23)
          {
            do
            {
              v26 = __ldaxr(v21);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v21));
            if (!v27)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, v6);
            }
          }
          *v19 = *(_OWORD *)v9;
          v24 = v2 + 24 * v7;
          v25 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          *v22 = v25;
          v13 = *(unsigned int **)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          if (!v13)
            goto LABEL_19;
          do
          {
            v28 = __ldaxr(v13);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v13));
          if (v29)
            goto LABEL_19;
        }
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_19:
      if (++v7 == v8)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D38A8;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D38A8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::navigateServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)> &&)::$_0,void,WebCore::ScheduleLocationChangeResult>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2)
        return result;
      v4 = *(_QWORD *)(result + 64);
      *(_QWORD *)(result + 64) = 0;
      LOBYTE(v11) = 0;
      v12 = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)v4 + 16))(v4, 0, 0, &v11);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v3 + 264))
  {
LABEL_10:
    v7 = *(_QWORD *)(v3 + 24);
    if (v7 && (v7 = *(_QWORD *)(v7 + 8)) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 1896);
      v8 = v7 & 0xFFFFFFFFFFFFFF00;
      v7 = v7;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v4 = *(_QWORD *)(result + 64);
    v10 = *(_OWORD *)(v3 + 272);
    *(_QWORD *)(result + 64) = 0;
    v11 = v10;
    v12 = 1;
    (*(void (**)(uint64_t, unint64_t, uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, v8 | v7, v9, &v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(_QWORD *)(v3 + 424);
  if (v5)
  {
    *(_QWORD *)(v3 + 424) = 0;
    LOBYTE(v11) = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)v5 + 16))(v5, 0, 0, &v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  v4 = *(_QWORD *)(v3 + 424);
  *(_QWORD *)(v3 + 424) = v6;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D38D0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D38D0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::setUpPolicyListenerProxy(WTF::CompletionHandler<void ()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)> &&,WebKit::ShouldExpectSafeBrowsingResult,WebKit::ShouldExpectAppBoundDomainResult,WebKit::ShouldWaitForInitialLinkDecorationFilteringData)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>> &,WebKit::NavigatingToAppBoundDomain,std::optional<WebKit::NavigatingToAppBoundDomain>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  v13 = a6;
  v14 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)a2)
  {
    v15 = *(_QWORD *)(v14 + 424);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 24);
      if (v16 && (v16 = *(_QWORD *)(v16 + 8)) != 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 1896);
        v17 = v16 & 0xFFFFFFFFFFFFFF00;
        v16 = v16;
        v18 = 1;
      }
      else
      {
        v18 = 0;
        v17 = 0;
      }
      *(_QWORD *)(v14 + 424) = 0;
      v21 = *(_OWORD *)(v14 + 272);
      v22 = 1;
      (*(void (**)(uint64_t, unint64_t, uint64_t, __int128 *))(*(_QWORD *)v15 + 16))(v15, v17 | v16, v18, &v21);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, a2, a3, a4, a5, v13, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(v14 + 264);
  *(_QWORD *)(v14 + 264) = 0;
  if (v20)
    CFRelease(*(CFTypeRef *)(v20 + 8));
}

_QWORD *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D38F8;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  *a1 = &off_1E34D38F8;
  a1[1] = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E34D38F8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    CFRetain(*(CFTypeRef *)(v3 + 8));
  v2[1] = v3;
  return v2;
}

_QWORD *std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  *a2 = &off_1E34D38F8;
  v3 = result[1];
  if (v3)
    result = CFRetain(*(CFTypeRef *)(v3 + 8));
  a2[1] = v3;
  return result;
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  __p[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  operator delete(__p);
}

void std::__function::__func<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0,std::allocator<WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebCore::ResourceRequest const&)::$_0>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*a2)
  {
    WebKit::WebPageProxy::reload(*(_QWORD *)(a1 + 8), 0, &v3);
    v2 = v3;
    v3 = 0;
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

uint64_t WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v3)
  {
    *(_QWORD *)(v3 + 16) = v4;
    v4 = *((_QWORD *)this + 2);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
  }
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = (_QWORD *)(a1 + 16);
  *v5 = v3;
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, this);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = ~(*v14 << 32) + *v14;
        v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::rehash(a1, v5, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2485;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_WORD *std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>(_WORD *result, uint64_t a2)
{
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (result)
  {
    v3 = result;
    *result = *(_WORD *)a2;
    WTF::URL::URL((uint64_t)(result + 4), (uint64_t *)(a2 + 8));
    WTF::URL::URL((uint64_t)(v3 + 24), (uint64_t *)(a2 + 48));
    *((_QWORD *)v3 + 11) = *(_QWORD *)(a2 + 88);
    v4 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 12) = v4;
    v5 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *((_QWORD *)v3 + 13) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *((_DWORD *)v3 + 28) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *((_DWORD *)v3 + 29) = v5;
    *((_QWORD *)v3 + 15) = 0;
    *((_QWORD *)v3 + 16) = 0;
    v6 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *((_QWORD *)v3 + 15) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *((_DWORD *)v3 + 32) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *((_DWORD *)v3 + 33) = v6;
    *((_QWORD *)v3 + 17) = 0;
    *((_QWORD *)v3 + 18) = 0;
    v7 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *((_QWORD *)v3 + 17) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *((_DWORD *)v3 + 36) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *((_DWORD *)v3 + 37) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 152);
    *((_BYTE *)v3 + 156) = *(_BYTE *)(a2 + 156);
    *((_DWORD *)v3 + 38) = v7;
    v8 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *((_QWORD *)v3 + 20) = v8;
    v9 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *((_QWORD *)v3 + 21) = v9;
    v10 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;
    *((_QWORD *)v3 + 22) = v10;
    v11 = *(_QWORD *)(a2 + 184);
    *((_BYTE *)v3 + 192) = *(_BYTE *)(a2 + 192);
    *((_QWORD *)v3 + 23) = v11;
    v12 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *((_QWORD *)v3 + 25) = v12;
    *((_BYTE *)v3 + 208) = 0;
    *((_DWORD *)v3 + 58) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v3 + 104), a2 + 208);
    v13 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *((_QWORD *)v3 + 30) = v13;
    v14 = *(_OWORD *)(a2 + 248);
    v15 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 139) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v3 + 132) = v15;
    *(_OWORD *)(v3 + 124) = v14;
    *((_QWORD *)v3 + 37) = 0;
    *((_QWORD *)v3 + 38) = 0;
    v16 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a2 + 296) = 0;
    *((_QWORD *)v3 + 37) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *((_DWORD *)v3 + 76) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *((_DWORD *)v3 + 77) = v16;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34D3940;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34D3940;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetFrameInfo,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0)#1},void,WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[148];
  char v11;
  char v12;
  _BYTE v13[296];
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    goto LABEL_13;
  IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>(a2, v13);
  if (!v15)
  {
    LOBYTE(v10[0]) = 0;
    v12 = 0;
LABEL_12:
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
        if (v12)
          goto LABEL_9;
      }
    }
LABEL_13:
    v13[0] = 0;
    v14 = 0;
    WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(v2, (uint64_t)v13);
    v6 = v13;
    goto LABEL_14;
  }
  LOBYTE(v10[0]) = 0;
  v11 = 0;
  if (v14)
  {
    std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>(v10, (uint64_t)v13);
    v11 = 1;
    v12 = 1;
    if (!v15)
      goto LABEL_9;
  }
  else
  {
    v12 = 1;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
  if (!v12)
    goto LABEL_12;
LABEL_9:
  WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(v2, (uint64_t)v10);
  if (!v12)
    return;
  v6 = v10;
LABEL_14:
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
}

__n128 WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::RefCountedBase *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  __n128 result;
  __int128 v10;

  if (*(_BYTE *)(a2 + 296))
  {
    v3 = *a1;
    *(_WORD *)(v3 + 16) = *(_WORD *)a2;
    WebCore::ResourceRequestBase::RequestData::operator=(v3 + 24, a2 + 8);
    WTF::String::operator=((WTF::StringImpl **)(v3 + 176), (WTF::StringImpl *)(a2 + 160));
    WTF::String::operator=((WTF::StringImpl **)(v3 + 184), (WTF::StringImpl *)(a2 + 168));
    v4 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;
    v5 = *(WTF::RefCountedBase **)(v3 + 192);
    *(_QWORD *)(v3 + 192) = v4;
    if (v5)
      WTF::RefCounted<WebCore::FormData>::deref(v5);
    v6 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(v3 + 208) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(v3 + 200) = v6;
    v7 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    v8 = *(const void **)(v3 + 216);
    *(_QWORD *)(v3 + 216) = v7;
    if (v8)
      CFRelease(v8);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v3 + 224, a2 + 208);
    WTF::String::operator=((WTF::StringImpl **)(v3 + 256), (WTF::StringImpl *)(a2 + 240));
    result = *(__n128 *)(a2 + 278);
    v10 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 264) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(v3 + 280) = v10;
    *(__n128 *)(v3 + 294) = result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34D3968;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34D3968;
  WTF::Ref<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::FrameInfoCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &>>::~Ref((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrameProxy::getFrameInfo(WTF::CompletionHandler<void ()(WebKit::FrameTreeNodeData &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &>::call(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::RefCountedBase *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;

  v2 = (_OWORD *)(a2 + 248);
  if (*(_QWORD *)(a2 + 248))
  {
    if (*(_BYTE *)(a2 + 280)
      && (*(_QWORD *)(a2 + 264) == *(_QWORD *)(result + 24)
        ? (v4 = *(_QWORD *)(a2 + 272) == *(_QWORD *)(result + 32))
        : (v4 = 0),
          v4)
      || *(_BYTE *)(result + 40))
    {
      v6 = *(_QWORD *)(result + 8);
      v5 = *(_QWORD *)(result + 16);
      if (v5 >= *(unsigned int *)(v6 + 324))
      {
        __break(0xC471u);
      }
      else
      {
        v7 = *(_QWORD *)(v6 + 312) + 320 * v5;
        if (*(_BYTE *)(v7 + 312))
        {
          *(_WORD *)v7 = *(_WORD *)a2;
          WebCore::ResourceRequestBase::RequestData::operator=(v7 + 8, a2 + 8);
          WTF::String::operator=((WTF::StringImpl **)(v7 + 160), (WTF::StringImpl *)(a2 + 160));
          WTF::String::operator=((WTF::StringImpl **)(v7 + 168), (WTF::StringImpl *)(a2 + 168));
          v8 = *(_QWORD *)(a2 + 176);
          *(_QWORD *)(a2 + 176) = 0;
          v9 = *(WTF::RefCountedBase **)(v7 + 176);
          *(_QWORD *)(v7 + 176) = v8;
          if (v9)
            WTF::RefCounted<WebCore::FormData>::deref(v9);
          v10 = *(_QWORD *)(a2 + 184);
          *(_BYTE *)(v7 + 192) = *(_BYTE *)(a2 + 192);
          *(_QWORD *)(v7 + 184) = v10;
          v11 = *(_QWORD *)(a2 + 200);
          *(_QWORD *)(a2 + 200) = 0;
          v12 = *(const void **)(v7 + 200);
          *(_QWORD *)(v7 + 200) = v11;
          if (v12)
            CFRelease(v12);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v7 + 208, a2 + 208);
          WTF::String::operator=((WTF::StringImpl **)(v7 + 240), (WTF::StringImpl *)(a2 + 240));
          v14 = *(_OWORD *)((char *)v2 + 30);
          v15 = v2[1];
          *(_OWORD *)(v7 + 248) = *v2;
          *(_OWORD *)(v7 + 264) = v15;
          *(_OWORD *)(v7 + 278) = v14;
          v16 = *(_DWORD *)(v7 + 308);
          if (v16)
            WTF::VectorDestructor<true,WebKit::FrameTreeNodeData>::destruct(*(void **)(v7 + 296), (void *)(*(_QWORD *)(v7 + 296) + 312 * v16));
          result = *(_QWORD *)(v7 + 296);
          if (result)
          {
            *(_QWORD *)(v7 + 296) = 0;
            *(_DWORD *)(v7 + 304) = 0;
            result = WTF::fastFree((WTF *)result, v13);
          }
          v17 = *(_QWORD *)(a2 + 296);
          *(_QWORD *)(a2 + 296) = 0;
          *(_QWORD *)(v7 + 296) = v17;
          LODWORD(v17) = *(_DWORD *)(a2 + 304);
          *(_DWORD *)(a2 + 304) = 0;
          *(_DWORD *)(v7 + 304) = v17;
          LODWORD(v17) = *(_DWORD *)(a2 + 308);
          *(_DWORD *)(a2 + 308) = 0;
          *(_DWORD *)(v7 + 308) = v17;
        }
        else
        {
          result = (uint64_t)std::construct_at[abi:sn180100]<WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData,WebKit::FrameTreeNodeData*>((_WORD *)v7, a2);
          *(_BYTE *)(v7 + 312) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidFinishLoadInAnotherProcess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2170;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  _QWORD *v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD **)(v2 + 8 * v7);
    if (v10 != (_QWORD *)-1)
    {
      if (!v10)
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      if (*v10 == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillEnterFullScreen>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1719;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidEnterFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1710;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::WillExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1720;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::DidExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1711;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetAnimatingFullScreen>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1716;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 1713;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D3990;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3990;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3990;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebFullScreenManager::RequestRestoreFullScreen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RequestExitFullScreen>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1712;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SaveScrollPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1715;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::RestoreScrollPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1714;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetFullscreenInsets>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1718;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebFullScreenManager::SetFullscreenAutoHideDuration>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1717;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D39B8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D39B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFullScreenManagerProxy::beganEnterFullScreen(WebCore::IntRect const&,WebCore::IntRect const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 32) + 48))(*(_QWORD *)(v2 + 32), result + 16, result + 32);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::ASCIICaseInsensitiveHash *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v14 = v5 + 16 * v11;
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v15);
          v16 = *v13;
          *v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v9);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v9);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = WTF::equal(*(WTF **)(v17 + 16 * v21), 0, v10);
            v19 = ++v20 + v21;
          }
          while (!v22);
          v23 = v17 + 16 * v21;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v24);
          v25 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v9);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v5 + 16 * v11;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            std::default_delete<WebKit::WebGeolocationManagerProxy::PerDomainData>::operator()[abi:sn180100](v29);
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v9);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WebKit::WebLocalFrameLoaderClient::forceLayoutOnRestoreFromBackForwardCache(WebKit::WebLocalFrameLoaderClient *this)
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::connectionProperties(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::createPreviewLoaderClient@<X0>(WebKit::WebLocalFrameLoaderClient *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6
    && (v8 = *(_QWORD *)(v6 + 24)) != 0
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (v12 = *(_QWORD **)(*(_QWORD *)(v9 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v12 + 1368))(v12) & 1) == 0)
    && (v13 = *(_QWORD *)(v12[2] + 8)) != 0)
  {
    v14 = *(_QWORD *)(v13 + 24);
    result = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E34F1040;
    v15 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v15 += 2;
    *(_QWORD *)(result + 16) = v15;
    v16 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v16 += 2;
    *(_QWORD *)(result + 24) = v16;
    *(_QWORD *)(result + 32) = v14;
    *(_QWORD *)(result + 40) = 0;
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

void WebKit::WebDragClient::startDrag(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  CGImage *v7;
  int Width;
  CGImage *v9;
  CGImage *v10;
  WebCore *v11;
  WebCore::Widget *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  CGContext *v18;
  WebCore::ShareableBitmap *v19;
  CFTypeRef v20;
  WebCore::ShareableBitmap *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  CFTypeRef cf;
  _BYTE v38[56];
  int v39;
  int Height;
  CFTypeRef v41;
  void *v42;
  char v43;
  WebCore::ShareableBitmap *v44;
  CGRect v45;

  v7 = (CGImage *)*a2;
  if (*a2)
    CFRetain(*a2);
  Width = CGImageGetWidth(v7);
  v9 = (CGImage *)*a2;
  if (*a2)
    CFRetain(*a2);
  v39 = Width;
  Height = CGImageGetHeight(v9);
  if (v9)
  {
    CFRelease(v9);
    if (!v7)
      goto LABEL_7;
  }
  else if (!v7)
  {
    goto LABEL_7;
  }
  CFRelease(v7);
LABEL_7:
  v10 = (CGImage *)*a2;
  if (*a2)
    CFRetain(*a2);
  v11 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(a4 + 128) + 8));
  WebCore::screenColorSpace(v11, v12);
  v13 = v41;
  v41 = 0;
  v42 = (void *)v13;
  v43 = 1;
  MEMORY[0x19AEB3600](&v36, &v39, &v42, 0);
  WebCore::ShareableBitmap::create();
  if (v38[0])
  {
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
  }
  if (v43)
  {
    v15 = v42;
    v42 = 0;
    if (v15)
      CFRelease(v15);
  }
  v16 = v41;
  v41 = 0;
  if (v16)
    CFRelease(v16);
  if (v44)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v44);
    v17 = (void *)v41;
    if (v41)
    {
      WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v36, (WebCore::GraphicsContext *)v41);
      v18 = (CGContext *)(*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v41 + 24))(v41);
      v45.size.width = (double)v39;
      v45.size.height = (double)Height;
      v45.origin.x = 0.0;
      v45.origin.y = 0.0;
      CGContextDrawImage(v18, v45, v10);
      v19 = v44;
      v44 = 0;
      WebCore::LocalCurrentContextSaver::~LocalCurrentContextSaver((WebCore::LocalCurrentContextSaver *)v38);
      if ((_BYTE)cf)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 104))(v36, 1);
      v20 = v41;
      v41 = 0;
      if (v20)
        (*(void (**)(CFTypeRef))(*(_QWORD *)v20 + 8))(v20);
    }
    else
    {
      v19 = 0;
    }
    v21 = v44;
    v44 = 0;
    if (v21)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v21, v17);
  }
  else
  {
    v19 = 0;
  }
  if (v10)
  {
    CFRelease(v10);
    if (!v19)
      return;
  }
  else if (!v19)
  {
    return;
  }
  WebCore::ShareableBitmap::createHandle();
  if (v38[48])
  {
    v22 = *(_QWORD *)(a1 + 8);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      v24 = v23 - 16;
      if (v23)
        v25 = v23 - 16;
      else
        v25 = 0;
      v26 = v25 + 795;
    }
    else
    {
      v24 = 0;
      v26 = 795;
    }
    *(_BYTE *)v26 = 1;
    v28 = *(_QWORD *)(v24 + 32);
    v27 = v24 + 32;
    v29 = (*(uint64_t (**)(uint64_t))(v28 + 56))(v27);
    v30 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v30 = 2074;
    *(_QWORD *)(v30 + 8) = v29;
    *(_QWORD *)(v30 + 528) = v30 + 16;
    *(_QWORD *)(v30 + 536) = v30 + 16;
    *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v30 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
    v42 = (void *)v30;
    IPC::ArgumentCoder<WebCore::DragItem,void>::encode((IPC::Encoder *)v30, (uint64_t)a2);
    IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode((IPC::Encoder *)v30, (unint64_t)&v36);
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v27 + 32))(v27, &v42, 0);
    v32 = (IPC::Encoder *)v42;
    v42 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v31);
      WTF::fastFree(v33, v34);
    }
  }
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v36);
  WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v19, v35);
}

void sub_19732E038(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef a19)
{
  const void *v19;
  uint64_t v20;
  uint64_t v22;

  if (a19)
    (*(void (**)(CFTypeRef))(*(_QWORD *)a19 + 8))(a19);
  v22 = *(_QWORD *)(v20 - 56);
  *(_QWORD *)(v20 - 56) = 0;
  if (v22)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v22, a2);
  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebDragClient::didConcludeEditDrag(WebKit::WebDragClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::didConcludeEditDrag((WebKit::WebPage *)(v2 - 16));
  else
    return WebKit::WebPage::didConcludeEditDrag(0);
}

void WebKit::WebDragClient::declareAndWriteDragImage(WebKit::WebDragClient *this, const WTF::String *a2, WebCore::Element *a3, const WTF::URL *a4, const WTF::String *a5, WebCore::LocalFrame *a6)
{
  uint64_t v6;
  WebCore::Document **v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 8) + 528);
  if (v6)
  {
    v7 = *(WebCore::Document ***)(v6 + 8);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 1);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      WebCore::Document::editor(v7[37]);
      v10 = WebCore::Frame::pageID((WebCore::Frame *)v7);
      v12 = v11;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = off_1E34D3A40;
      v13[1] = v10;
      v13[2] = v12;
      v14 = v13;
      WebCore::Pasteboard::createForDragAndDrop();
      WebCore::Editor::writeImageToPasteboard();
      if (v15)
        (*(void (**)())(*(_QWORD *)v15 + 8))();
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
  }
}

void sub_19732E28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFrameNetworkingContext::localFileContentSniffingEnabled(WebKit::WebFrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(v2 + 136) + 680) >> 62) & 1;
  else
    return 0;
}

uint64_t WebKit::WebFrameNetworkingContext::scheduledRunLoopPairs(WebKit::WebFrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 24)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    return *(_QWORD *)(v4 + 24);
  else
    return 0;
}

CFDataRef WebKit::WebFrameNetworkingContext::sourceApplicationAuditData@<X0>(CFDataRef *a1@<X8>)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  CFDataRef *v5;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    a1 = v5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return WebKit::WebProcess::sourceApplicationAuditData(v2, a1);
}

WebKit::WebProcess *WebKit::WebFrameNetworkingContext::sourceApplicationIdentifier@<X0>(_QWORD *a1@<X8>)
{
  WebKit::WebProcess *result;
  _DWORD *v3;
  WebKit::WebProcess *v4;
  _QWORD *v5;

  {
    result = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = a1;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v4);
    a1 = v5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  v3 = (_DWORD *)*((_QWORD *)result + 36);
  if (v3)
    *v3 += 2;
  *a1 = v3;
  return result;
}

uint64_t WebKit::WebFrameNetworkingContext::blockedError(WebKit::WebFrameNetworkingContext *this, const ResourceRequest *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t, const ResourceRequest *))(*(_QWORD *)v2 + 576))(v2, a2);
}

uint64_t WebKit::WebFrameNetworkingContext::storageSession(WebKit::WebFrameNetworkingContext *this)
{
  return 0;
}

void WebKit::WebFrameNetworkingContext::~WebFrameNetworkingContext(WebKit::WebFrameNetworkingContext *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &unk_1E34D3A68;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &unk_1E34D3A68;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

BOOL WebCore::FrameNetworkingContext::isValid(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

BOOL WebCore::FrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  return !v1
      || (v2 = *(_QWORD *)(v1 + 8)) == 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 296) + 192) + 8))(*(_QWORD *)(v2 + 296) + 192) == 2;
}

uint64_t WebCore::PagePasteboardContext::isPagePasteboardContext(WebCore::PagePasteboardContext *this)
{
  return 1;
}

uint64_t WebCore::NetworkingContext::scheduledRunLoopPairs(WebCore::NetworkingContext *this)
{
  return 0;
}

void WebCore::NetworkingContext::sourceApplicationIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebKit::WebGeolocationProvider::startUpdating(uint64_t this, WebKit::WebGeolocationManagerProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 24);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WebKit::WebGeolocationProvider::stopUpdating(uint64_t this, WebKit::WebGeolocationManagerProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 32);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WebKit::WebGeolocationProvider::setEnableHighAccuracy(uint64_t this, WebKit::WebGeolocationManagerProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(this + 40);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3, *(_QWORD *)(this + 16));
  return this;
}

void WebKit::WebLockRegistryProxy::~WebLockRegistryProxy(WebKit::WebLockRegistryProxy *this)
{
  void *v2;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((_QWORD *)this + 2) + 152), 0xB0u);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((_QWORD *)this + 2) + 152), 0xB0u);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
  WTF::fastFree(this, v3);
}

void WebKit::WebLockRegistryProxy::requestLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  _QWORD *v7;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  uint8_t buf[16];
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v21 = a3;
  *((_QWORD *)&v21 + 1) = a4;
  v7 = *(_QWORD **)(a1 + 16);
  if (a4 != v7[22])
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIden"
                           "tifier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
      v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 56: Invalid me"
            "ssage dispatched %s";
      goto LABEL_23;
    }
LABEL_21:
    *(_BYTE *)(v7[18] + 98) = 1;
    return;
  }
  if (*((_QWORD *)a5 + 2) != a4)
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIden"
                           "tifier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
      v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 57: Invalid me"
            "ssage dispatched %s";
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (*(_QWORD *)a6 && *(_DWORD *)(*(_QWORD *)a6 + 4) >= 0x401u)
  {
    v17 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_21;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&, WebCore::WebLockIdenti"
                         "fier, WebCore::ScriptExecutionContextIdentifier, String &&, WebCore::WebLockMode, BOOL, BOOL)";
    v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 58: Invalid mess"
          "age dispatched %s";
LABEL_23:
    _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, v18, buf, 0xCu);
    v7 = *(_QWORD **)(a1 + 16);
    goto LABEL_21;
  }
  *(_BYTE *)(a1 + 24) = 1;
  if (v7[94])
  {
    v9 = a5[1];
    v26 = *a5;
    v27 = v9;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v10 = *(unsigned int **)(a1 + 8);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    *(_OWORD *)buf = v21;
    *(_OWORD *)&v25[8] = *a5;
    *(_QWORD *)&v25[24] = *((_QWORD *)a5 + 2);
    v12 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v12 = &off_1E34D4338;
    *(_QWORD *)(v12 + 16) = v10;
    *(_OWORD *)(v12 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)v25;
    *(_OWORD *)(v12 + 56) = *(_OWORD *)&v25[16];
    v20 = v12;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v13 = *(unsigned int **)(a1 + 8);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    v22 = v21;
    *(_OWORD *)&v23[8] = *a5;
    *(_QWORD *)&v23[24] = *((_QWORD *)a5 + 2);
    v15 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v15 = &off_1E34D4360;
    *(_QWORD *)(v15 + 16) = v13;
    v16 = *(_OWORD *)v23;
    *(_OWORD *)(v15 + 24) = v22;
    *(_OWORD *)(v15 + 40) = v16;
    *(_OWORD *)(v15 + 56) = *(_OWORD *)&v23[16];
    v19 = v15;
    WebCore::LocalWebLockRegistry::requestLock();
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  else
  {
    *(_QWORD *)buf = &v21;
    *(_QWORD *)&buf[8] = a5;
    v25[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>((uint64_t)v7, (uint64_t)buf);
  }
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  uint64_t v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;
  uint64_t v24;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1419;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v23 = (IPC::Encoder *)v4;
  v5 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *(uint64_t **)a2);
  v24 = v5[1];
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v24);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v4, *(uint64_t **)(a2 + 8));
  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(v4 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v4 + 552);
  if (v9 < v7 + 1)
  {
    v18 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v8);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v20 = *(void **)(v4 + 528);
    if (v20 != (void *)(v4 + 16))
      munmap(v20, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v10;
    *(_QWORD *)(v4 + 552) = v19;
    v11 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v10 = *(char **)(v4 + 528);
    v11 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v4 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v7);
  *(_QWORD *)(v4 + 536) = v12 + 1;
  *v12 = v6;
  LOBYTE(v21) = 0;
  v22 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v23, 0, (uint64_t)&v21, 1);
  if (v22)
  {
    v14 = v21;
    v21 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void WebKit::WebLockRegistryProxy::releaseLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 16);
  if (a4 != v6[22])
  {
    v7 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_9:
      *(_BYTE *)(v6[18] + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    v10 = "void WebKit::WebLockRegistryProxy::releaseLock(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebCore::"
          "ScriptExecutionContextIdentifier, String &&)";
    v8 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 78: Invalid messa"
         "ge dispatched %s";
LABEL_11:
    _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, v8, buf, 0xCu);
    v6 = *(_QWORD **)(a1 + 16);
    goto LABEL_9;
  }
  if (*(_QWORD *)(a5 + 16) != a4)
  {
    v7 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_9;
    *(_DWORD *)buf = 136315138;
    v10 = "void WebKit::WebLockRegistryProxy::releaseLock(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebCore::"
          "ScriptExecutionContextIdentifier, String &&)";
    v8 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 79: Invalid messa"
         "ge dispatched %s";
    goto LABEL_11;
  }
  if (v6[94])
    WebCore::LocalWebLockRegistry::releaseLock();
}

void WebKit::WebLockRegistryProxy::abortLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a1 + 16);
  if (a4 != v8[22])
  {
    v10 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_10:
      *(_BYTE *)(v8[18] + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    v13 = "void WebKit::WebLockRegistryProxy::abortLockRequest(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebC"
          "ore::ScriptExecutionContextIdentifier, String &&, CompletionHandler<void (BOOL)> &&)";
    v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 86: Invalid mess"
          "age dispatched %s";
LABEL_12:
    _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, v11, buf, 0xCu);
    v8 = *(_QWORD **)(a1 + 16);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a5 + 16) != a4)
  {
    v10 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_10;
    *(_DWORD *)buf = 136315138;
    v13 = "void WebKit::WebLockRegistryProxy::abortLockRequest(WebCore::ClientOrigin &&, WebCore::WebLockIdentifier, WebC"
          "ore::ScriptExecutionContextIdentifier, String &&, CompletionHandler<void (BOOL)> &&)";
    v11 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 87: Invalid mess"
          "age dispatched %s";
    goto LABEL_12;
  }
  if (v8[94])
  {
    WebCore::LocalWebLockRegistry::abortLockRequest();
  }
  else
  {
    v9 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t WebKit::WebLockRegistryProxy::snapshot(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 752))
    return WebCore::LocalWebLockRegistry::snapshot();
  v7 = 0u;
  v8 = 0u;
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
}

void WebKit::WebLockRegistryProxy::clientIsGoingAway(WebKit *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  NSObject *v6;
  uint8_t buf[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (*(_QWORD *)(a3 + 16) == v4[22])
  {
    *(_QWORD *)buf = *(_QWORD *)(v4[94] + 24);
    v5 = WebKit::allDataStores(a1);
    if (WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, buf))
    {
      WebCore::LocalWebLockRegistry::clientIsGoingAway();
    }
  }
  else
  {
    v6 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebLockRegistryProxy::clientIsGoingAway(WebCore::ClientOrigin &&, WebCore::Scrip"
                           "tExecutionContextIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebLockRegistryProxy.cpp 110: Invalid message dispatched %s", buf, 0xCu);
      v4 = (_QWORD *)*((_QWORD *)a1 + 2);
    }
    *(_BYTE *)(v4[18] + 98) = 1;
  }
}

void WebKit::WebNavigationState::createLoadRequestNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  v10 = API::Object::newObject(0xDA0uLL, 76);
  v11 = API::Navigation::Navigation(v10, a2, a3, a4, a5);
  *a1 = v11;
  v12 = *(_QWORD *)(v11 + 16);
  v14 = v11;
  v15 = v12;
  WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>((uint64_t)v13, (uint64_t *)(a2 + 8), &v15, &v14);
}

void WebKit::WebNavigationState::createBackForwardNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;

  v12 = API::Object::newObject(0xDA0uLL, 76);
  v13 = API::Navigation::Navigation(v12, a2, a3, a4, a5, a6);
  *a1 = v13;
  v14 = *(_QWORD *)(v13 + 16);
  v16 = v13;
  v17 = v14;
  WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>((uint64_t)v15, (uint64_t *)(a2 + 8), &v17, &v16);
}

void WebKit::WebNavigationState::createReloadNavigation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v8 = API::Object::newObject(0xDA0uLL, 76);
  v9 = API::Navigation::Navigation(v8, a2, a3, a4);
  *a1 = v9;
  v10 = *(_QWORD *)(v9 + 16);
  v12 = v9;
  v13 = v10;
  WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>((uint64_t)v11, (uint64_t *)(a2 + 8), &v13, &v12);
}

void WebKit::WebNavigationState::didDestroyNavigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, a3);
  if (v5)
    v7 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v7 = 0;
  if (v7 != v6 && *(_QWORD *)(v6[1] + 24) == a2)
  {
    if (v5)
    {
      v8 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
      if (v8 == v6)
        return;
    }
    else
    {
      if (!v6)
        return;
      v8 = 0;
    }
    if (v8 != v6)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v4, v6);
  }
}

void WebKit::WebNavigationState::clearNavigationsFromProcess(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v2 = a2;
  v21 = 0;
  v22 = 0;
  v4 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v7 = 0;
    v5 = 0;
LABEL_10:
    v6 = (_QWORD *)(v3 + 16 * v5);
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v6 = (_QWORD *)(v3 + 16 * v5);
  if (!*(_DWORD *)(v3 - 12))
  {
    v7 = (_QWORD *)(v3 + 16 * v5);
    goto LABEL_10;
  }
  v7 = *(_QWORD **)(a1 + 8);
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = *(_QWORD **)(a1 + 8);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v9 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v9 = 0;
  if (v9 != v7)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v7[1];
      if (*(void **)(v12 + 24) == v2)
      {
        v13 = *(_QWORD *)(v12 + 16);
        v20 = v13;
        if (v11 == (_DWORD)v22)
        {
          v14 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, v11 + 1, (unint64_t)&v20);
          v11 = HIDWORD(v22);
          v10 = v21;
          v21[HIDWORD(v22)] = *v14;
        }
        else
        {
          v10[v11] = v13;
        }
        HIDWORD(v22) = ++v11;
      }
      v15 = v7 + 2;
      v7 = v6;
      if (v15 != v6)
      {
        v7 = v15;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    if (v11)
    {
      v16 = 8 * v11;
      while (1)
      {
        v17 = *v4;
        v18 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*v4, *v10);
        a2 = v18;
        if (v17)
        {
          v19 = (_QWORD *)(v17 + 16 * *(unsigned int *)(v17 - 4));
          if (v19 != v18)
            goto LABEL_34;
        }
        else if (v18)
        {
          v19 = 0;
LABEL_34:
          if (v19 != v18)
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v4, v18);
        }
        ++v10;
        v16 -= 8;
        if (!v16)
        {
          v10 = v21;
          break;
        }
      }
    }
    if (v10)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

void WebKit::WebOpenPanelResultListenerProxy::~WebOpenPanelResultListenerProxy(WebKit::WebOpenPanelResultListenerProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D3B38;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

{
  WebKit::WebOpenPanelResultListenerProxy::~WebOpenPanelResultListenerProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  CFTypeRef *v8;
  void *v9;
  void *v10;
  __int128 v11;
  uint64_t v12[3];
  _BYTE v13[16];

  if (!*(_BYTE *)(result + 729))
  {
    v4 = (_QWORD *)result;
    if (*(_BYTE *)(result + 728))
    {
      WebKit::SandboxExtension::createReadOnlyHandlesForFiles((uint64_t)"WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon", a2, (uint64_t)v13);
      v12[0] = (uint64_t)v13;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(v4[26], v12, *(_QWORD *)(v4[4] + 1896), 0);
      if (a4)
        v11 = *(_OWORD *)(a4 + 16);
      else
        v11 = 0uLL;
      v12[0] = (uint64_t)a2;
      v12[1] = a3;
      v12[2] = (uint64_t)&v11;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseFilesForOpenPanelWithDisplayStringAndIcon>(v4[26], (uint64_t)v12, *(_QWORD *)(v4[4] + 1896), 0);
      v8 = (CFTypeRef *)v4[62];
      v4[62] = 0;
      WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v8, v9);
      if (v8)
        CFRelease(v8[1]);
      return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v10);
    }
  }
  return result;
}

void WebKit::WebPageProxy::didChooseFilesForOpenPanel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  _QWORD v11[2];
  uint64_t v12[2];
  _BYTE v13[16];

  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
  {
    v3 = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 496) = 0;
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v7 = (unsigned int *)(v5 + 16);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        WebKit::SandboxExtension::createReadOnlyHandlesForFiles((uint64_t)"WebPageProxy::didChooseFilesForOpenPanel", a2, (uint64_t)v13);
        v12[0] = (uint64_t)v13;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(v5, v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
        v11[0] = 0;
        v11[1] = 0;
        v12[0] = (uint64_t)a2;
        v12[1] = (uint64_t)v11;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseFilesForOpenPanel>(v5, v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v9);
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v10);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
      }
    }
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v3, a2);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebPageProxy::didCancelForOpenPanel(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  char v7;

  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    v2 = *((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = 0;
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 16);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v7 = 0;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCancelForOpenPanel>(v4, (uint64_t)&v7, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
      }
    }
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v2, a2);
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

unsigned int *WebKit::WebOpenPanelResultListenerProxy::invalidate(WebKit::WebOpenPanelResultListenerProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  result = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessage(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit *v16;
  WTF::StringImpl *v17;
  WebKit *v18;

  v4 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 3);
  if (!v4)
    return;
  if (a2)
    v7 = *((_QWORD *)a2 + 1);
  else
    v7 = 0;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v17 = v8;
  API::String::create(&v17, &v18);
  v10 = v17;
  v11 = v18;
  v17 = 0;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11)
        goto LABEL_10;
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v11)
  {
LABEL_10:
    v12 = *((_QWORD *)v11 + 1);
    goto LABEL_11;
  }
LABEL_21:
  v12 = 0;
LABEL_11:
  v13 = *a4;
  if (*a4)
    *(_DWORD *)v13 += 2;
  v17 = v13;
  API::String::create(&v17, &v18);
  v15 = v17;
  v16 = v18;
  v17 = 0;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16)
      {
LABEL_17:
        v4(v7, v12, *((_QWORD *)v16 + 1), *((_QWORD *)this + 2));
        CFRelease(*((CFTypeRef *)v16 + 1));
        if (!v11)
          return;
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16)
    goto LABEL_17;
LABEL_23:
  v4(v7, v12, 0, *((_QWORD *)this + 2));
  if (v11)
LABEL_18:
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, int a5)
{
  void (*v5)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebKit *v22;

  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 32);
  if (!v5)
    return;
  if (a2)
    v9 = *(_QWORD *)(a2 + 8);
  else
    v9 = 0;
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v21 = v10;
  API::String::create(&v21, &v22);
  v12 = v21;
  v13 = v22;
  v21 = 0;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      if (v13)
        goto LABEL_10;
      goto LABEL_24;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v13)
  {
LABEL_10:
    v14 = *((_QWORD *)v13 + 1);
    goto LABEL_11;
  }
LABEL_24:
  v14 = 0;
LABEL_11:
  v15 = *a4;
  if (*a4)
    *(_DWORD *)v15 += 2;
  v21 = v15;
  API::String::create(&v21, &v22);
  v17 = v21;
  v18 = v22;
  v21 = 0;
  v22 = 0;
  if (!v17)
  {
LABEL_16:
    if (v18)
      goto LABEL_17;
LABEL_26:
    if (a5 == 2)
      v20 = 2;
    else
      v20 = a5 == 1;
    v5(v9, v14, 0, v20, *(_QWORD *)(a1 + 16));
    if (v13)
      goto LABEL_21;
    return;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (!v18)
    goto LABEL_26;
LABEL_17:
  if (a5 == 2)
    v19 = 2;
  else
    v19 = a5 == 1;
  v5(v9, v14, *((_QWORD *)v18 + 1), v19, *(_QWORD *)(a1 + 16));
  CFRelease(*((CFTypeRef *)v18 + 1));
  if (v13)
LABEL_21:
    CFRelease(*((CFTypeRef *)v13 + 1));
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithValue(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit *v23;
  WTF::StringImpl *v24;
  WebKit *v25;

  v5 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 5);
  if (v5)
  {
    if (a2)
      v9 = *((_QWORD *)a2 + 1);
    else
      v9 = 0;
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v24 = v10;
    API::String::create(&v24, &v25);
    v12 = v24;
    v13 = v25;
    v24 = 0;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        if (v13)
          goto LABEL_10;
        goto LABEL_30;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v13)
    {
LABEL_10:
      v14 = *((_QWORD *)v13 + 1);
      goto LABEL_11;
    }
LABEL_30:
    v14 = 0;
LABEL_11:
    v15 = *a4;
    if (*a4)
      *(_DWORD *)v15 += 2;
    v24 = v15;
    API::String::create(&v24, &v25);
    v17 = v24;
    v18 = v25;
    v24 = 0;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (v18)
          goto LABEL_17;
        goto LABEL_32;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v18)
    {
LABEL_17:
      v19 = *((_QWORD *)v18 + 1);
      goto LABEL_18;
    }
LABEL_32:
    v19 = 0;
LABEL_18:
    v20 = *a5;
    if (*a5)
      *(_DWORD *)v20 += 2;
    v24 = v20;
    API::String::create(&v24, &v25);
    v22 = v24;
    v23 = v25;
    v24 = 0;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v21);
        if (v23)
        {
LABEL_24:
          v5(v9, v14, v19, *((_QWORD *)v23 + 1), *((_QWORD *)this + 2));
          CFRelease(*((CFTypeRef *)v23 + 1));
          if (!v18)
            goto LABEL_26;
          goto LABEL_25;
        }
LABEL_34:
        v5(v9, v14, v19, 0, *((_QWORD *)this + 2));
        if (!v18)
        {
LABEL_26:
          if (v13)
            CFRelease(*((CFTypeRef *)v13 + 1));
          return;
        }
LABEL_25:
        CFRelease(*((CFTypeRef *)v18 + 1));
        goto LABEL_26;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v23)
      goto LABEL_24;
    goto LABEL_34;
  }
}

void WebKit::WebPageDiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(WebKit::WebPageDiagnosticLoggingClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit *v16;
  WTF::StringImpl *v17;
  WebKit *v18;

  v4 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 6);
  if (!v4)
    return;
  if (a2)
    v7 = *((_QWORD *)a2 + 1);
  else
    v7 = 0;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v17 = v8;
  API::String::create(&v17, &v18);
  v10 = v17;
  v11 = v18;
  v17 = 0;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11)
        goto LABEL_10;
      goto LABEL_21;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v11)
  {
LABEL_10:
    v12 = *((_QWORD *)v11 + 1);
    goto LABEL_11;
  }
LABEL_21:
  v12 = 0;
LABEL_11:
  v13 = *a4;
  if (*a4)
    *(_DWORD *)v13 += 2;
  v17 = v13;
  API::String::create(&v17, &v18);
  v15 = v17;
  v16 = v18;
  v17 = 0;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16)
      {
LABEL_17:
        v4(v7, v12, *((_QWORD *)v16 + 1), *((_QWORD *)this + 2));
        CFRelease(*((CFTypeRef *)v16 + 1));
        if (!v11)
          return;
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16)
    goto LABEL_17;
LABEL_23:
  v4(v7, v12, 0, *((_QWORD *)this + 2));
  if (v11)
LABEL_18:
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void WebKit::WebPageInjectedBundleClient::didReceiveMessageFromInjectedBundle(WebKit::WebPageInjectedBundleClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, API::Object *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit *v15;

  v4 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 2);
  if (v4)
  {
    if (a2)
      v7 = *((_QWORD *)a2 + 1);
    else
      v7 = 0;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v14 = v8;
    API::String::create(&v14, &v15);
    v10 = v14;
    v11 = v15;
    v14 = 0;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          v12 = *((_QWORD *)v11 + 1);
          if (a4)
          {
LABEL_11:
            v13 = *((_QWORD *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((_QWORD *)this + 1));
          if (v11)
            CFRelease(*((CFTypeRef *)v11 + 1));
          return;
        }
LABEL_16:
        v12 = 0;
        if (a4)
          goto LABEL_11;
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
      goto LABEL_10;
    goto LABEL_16;
  }
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::TakeScreenshot>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::TakeScreenshot &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::TakeScreenshot&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebInspector::ShowMainResourceForFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebInspector::ShowMainResourceForFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebInspector::ShowMainResourceForFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadURLInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::LoadURLInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadURLInFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadDataInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::LoadDataInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadDataInFrame&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::GetComputedRole &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::GetComputedLabel &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveParentFrame &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SelectOptionElement &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithName &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::OptionSet<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>::SendOption>)::{lambda(std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::NavigateServiceWorkerClient &&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::NavigateServiceWorkerClient&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawToImage &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawToPDFiOS &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

void WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPageTesting::IsEditingCommandEnabled> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPageTesting::IsEditingCommandEnabled>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPageTesting::IsEditingCommandEnabled&&,IPC::Timeout const&)::{lambda(Messages::WebPageTesting::IsEditingCommandEnabled&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a2 + 16))
  {
    v7 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v7)
    {
      v8 = v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      v9 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v8 + 32) + 16));
      if (v9)
      {
        WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(*(_QWORD *)(v9 + 24), *(uint64_t ***)a3, *(_QWORD *)(v9 + 16), 0, a4, **(double **)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v8 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, a4, **(double **)(a3 + 8));
}

void WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPage::ComputePagesForPrintingiOS> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingiOS>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrintingiOS&&,IPC::Timeout const&)::{lambda(Messages::WebPage::ComputePagesForPrintingiOS&)#1}>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a2 + 16))
  {
    v7 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v7)
    {
      v8 = v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      v9 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v8 + 32) + 16));
      if (v9)
      {
        WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(*(_QWORD *)(v9 + 24), *(_QWORD *)a3, *(_QWORD *)(v9 + 16), 0, a4, **(double **)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v8 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, a4, **(double **)(a3 + 8));
}

void WebKit::WebPageProxy::forMostVisibleWebPageIfAny(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34D4388;
  v6[1] = &v11;
  v10 = v6;
  WebKit::WebProcessProxy::forWebPagesWithOrigin(a1, a2, &v10);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v7 = v11;
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v11;
  v11 = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

WebKit::ProcessThrottlerActivity *WebKit::WebPageProxy::ProcessActivityState::takeOpeningAppLinkActivity(WebKit::WebPageProxy::ProcessActivityState *this)
{
  WebKit::ProcessThrottlerActivity **v1;
  uint64_t v2;
  WebKit::ProcessThrottlerActivity *v3;

  v1 = (WebKit::ProcessThrottlerActivity **)((char *)this + 32);
  v2 = *(_QWORD *)(*(_QWORD *)this + 208) + 200;
  v3 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v3, v2, "Opening AppLink", 16, 0, 0);
  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v1, v3);
}

void WebKit::WebPageProxy::clearAudibleActivity(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebKit::WebPageProxy *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    v7 = 134218752;
    v8 = this;
    v9 = 2048;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::clearAudibleActivity: UIProcess is releasing a foreground assertion because we are no longer playing audio", (uint8_t *)&v7, 0x26u);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 68, 0);
  WebKit::WebPageProxy::updateMediaCapability(this);
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPageProxy::resetRecentCrashCount(uint64_t this)
{
  *(_DWORD *)(this + 1112) = 0;
  return this;
}

uint64_t WebKit::WebPageProxy::tryCloseTimedOut(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebKit::WebPageProxy *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v4 + 744);
    v6 = *(_QWORD *)(v4 + 1896);
    v7 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    v8 = 134218752;
    v9 = this;
    v10 = 2048;
    v11 = v5;
    v12 = 2048;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryCloseTimedOut: Timed out waiting for the process to respond to the WebPage::TryClose IPC, closing the page now", (uint8_t *)&v8, 0x26u);
  }
  return WebKit::WebPageProxy::closePage((uint64_t)this);
}

uint64_t WebKit::WebPageProxy::updateReportedMediaCaptureState(uint64_t this)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD **)(this + 32);
  v2 = v1[202];
  v3 = v2 & 0x7FDF800;
  v4 = v1[418];
  if (v4 != (v2 & 0x7FDF800))
  {
    v5 = this;
    v6 = v4 & 0x7FDF800;
    if (v3)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
    {
      if (v3)
        v8 = v6 == 0;
      else
        v8 = 0;
      if (v8)
        WTF::RunLoop::TimerBase::start();
    }
    else
    {
      this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 450));
      if ((this & 1) != 0)
        return this;
    }
    v9 = qword_1ECE71B18;
    v10 = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
    v11 = *(_QWORD *)(v5 + 32);
    if (v10)
    {
      v12 = *(_QWORD *)(v11 + 744);
      v13 = *(_QWORD *)(v11 + 1896);
      v14 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 136);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 108);
      v15 = *(_DWORD *)(v11 + 1672);
      v43 = 134219264;
      v44 = v5;
      v45 = 2048;
      v46 = v12;
      v47 = 2048;
      v48 = v13;
      v49 = 1024;
      v50 = v14;
      v51 = 1024;
      v52 = v15;
      v53 = 1024;
      v54 = v2 & 0x7FDF800;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateReportedMediaCaptureState: from %d to %d", (uint8_t *)&v43, 0x32u);
      v11 = *(_QWORD *)(v5 + 32);
    }
    v16 = *(_DWORD *)(v11 + 1672) ^ v2;
    v17 = v16 & 0x15000;
    v18 = v16 & 0xA800;
    if ((v16 & 0xA800) != 0)
    {
      v19 = *(_QWORD *)(v5 + 40);
      if (v19)
        v20 = *(_QWORD *)(v19 + 8);
      else
        v20 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 1584))(v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 1496))(v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 1592))(v20);
    }
    v21 = v16 & 0xFC0000;
    v22 = v16 & 0x6C0000;
    if (v17)
    {
      v23 = *(_QWORD *)(v5 + 40);
      if (v23)
        v24 = *(_QWORD *)(v23 + 8);
      else
        v24 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 1584))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 1504))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 1592))(v24);
    }
    v25 = v16 & 0x7000000;
    if (v22)
    {
      v26 = *(_QWORD *)(v5 + 40);
      if (v26)
        v27 = *(_QWORD *)(v26 + 8);
      else
        v27 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1584))(v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1512))(v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1592))(v27);
    }
    if (v21)
    {
      v28 = *(_QWORD *)(v5 + 40);
      if (v28)
        v29 = *(_QWORD *)(v28 + 8);
      else
        v29 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 1584))(v29);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 1520))(v29);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 1592))(v29);
    }
    if (v25)
    {
      v30 = *(_QWORD *)(v5 + 40);
      if (v30)
        v31 = *(_QWORD *)(v30 + 8);
      else
        v31 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1584))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1528))(v31);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1592))(v31);
    }
    v32 = *(_QWORD *)(v5 + 32);
    *(_DWORD *)(v32 + 1672) = v3;
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 104) + 432))(*(_QWORD *)(v5 + 104), *(unsigned int *)(v32 + 808));
    if (v18)
    {
      v33 = *(_QWORD *)(v5 + 40);
      if (v33)
        v34 = *(_QWORD *)(v33 + 8);
      else
        v34 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 1584))(v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 1536))(v34);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 1592))(v34);
    }
    if (v17)
    {
      v35 = *(_QWORD *)(v5 + 40);
      if (v35)
        v36 = *(_QWORD *)(v35 + 8);
      else
        v36 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 1584))(v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 1544))(v36);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 1592))(v36);
    }
    if (v22)
    {
      v37 = *(_QWORD *)(v5 + 40);
      if (v37)
        v38 = *(_QWORD *)(v37 + 8);
      else
        v38 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 1584))(v38);
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 1552))(v38);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 1592))(v38);
    }
    if (v21)
    {
      v39 = *(_QWORD *)(v5 + 40);
      if (v39)
        v40 = *(_QWORD *)(v39 + 8);
      else
        v40 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 1584))(v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 1560))(v40);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 1592))(v40);
    }
    if (v25)
    {
      v41 = *(_QWORD *)(v5 + 40);
      if (v41)
        v42 = *(_QWORD *)(v41 + 8);
      else
        v42 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 1584))(v42);
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 1568))(v42);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 1592))(v42);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::WebPageProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  WTF::RunLoop *v8;
  _QWORD *v9;
  WebKit::PageLoadState *State;
  WTF::RunLoop *v11;
  _QWORD *v12;
  WTF::RunLoop *v13;
  WTF::RunLoop *v14;
  _QWORD *v15;
  WTF::RunLoop *v16;
  WTF::RunLoop *v17;
  _QWORD *v18;
  WTF::RunLoop *v19;
  WTF::RunLoop *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  WebKit::WebPreferences *v41;
  WebKit::WebUserContentControllerProxy *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  WebKit::VisitedLinkStore *v48;
  WebKit::WebsiteDataStore *v49;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  WebKit::WebBackForwardList *v53;
  WebKit::WebBackForwardList *v54;
  uint64_t v55;
  uint64_t v61;
  int v62;
  Inspector::BackendDispatcher **v63;
  WebKit::WebPageDebuggable *v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int *v71;
  unsigned int v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  uint64_t v81;
  const WTF::StringImpl *v82;
  WebKit *updated;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CFTypeRef *v90;
  WebKit::WebInspectorUIProxy *v91;
  WebKit::WebInspectorUIProxy *v92;
  uint64_t v93;
  const WTF::StringImpl *v94;
  uint64_t v95;
  WebCore::DeprecatedGlobalSettings *BoolValueForKey;
  WebKit::WebPreferences *v97;
  const WTF::StringImpl *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  IPC::Encoder *v105;
  WTF *v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  Inspector::RemoteInspectionTarget *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  IPC::Encoder *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  IPC::Encoder *v125;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int *v133;
  uint64_t v134;
  IPC::Encoder *v135;
  _BYTE buf[12];
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)(a1 + 16) = &unk_1E34D3DF0;
  *(_QWORD *)(a1 + 24) = 0;
  v133 = (unsigned int *)(a1 + 24);
  v134 = a1 + 16;
  *(_QWORD *)a1 = &off_1E34D3DA0;
  v7 = WTF::fastMalloc((WTF *)0xA30);
  *(_QWORD *)v7 = off_1E34D3BD8;
  *(_QWORD *)(v7 + 8) = &unk_1E34D3CA8;
  *(_QWORD *)(v7 + 16) = &unk_1E34D3D18;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = &unk_1E34D3D48;
  *(_QWORD *)(v7 + 40) = a1;
  *(_WORD *)(v7 + 48) = 0;
  v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E34D43B0;
  v9[1] = WebKit::WebPageProxy::clearAudibleActivity;
  v9[2] = 0;
  v9[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v7 + 56), v8);
  *(_QWORD *)(v7 + 56) = off_1E34ABE00;
  *(_QWORD *)(v7 + 80) = v9;
  *(_BYTE *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 96) = 0;
  *(_BYTE *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_WORD *)(v7 + 232) = 256;
  *(_BYTE *)(v7 + 256) = 0;
  *(_BYTE *)(v7 + 560) = 0;
  *(_BYTE *)(v7 + 576) = 0;
  *(_BYTE *)(v7 + 688) = 0;
  *(_QWORD *)(v7 + 234) = 0;
  *(_BYTE *)(v7 + 242) = 0;
  *(_QWORD *)(v7 + 720) = 0;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_QWORD *)(v7 + 728) = a1;
  *(_QWORD *)(v7 + 736) = 0;
  *(_QWORD *)(v7 + 744) = WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_BYTE *)(v7 + 784) = 0;
  *(_DWORD *)(v7 + 785) = 16843009;
  *(_OWORD *)(v7 + 792) = 0u;
  *(_OWORD *)(v7 + 808) = 0u;
  *(_OWORD *)(v7 + 820) = 0u;
  *(_OWORD *)(v7 + 840) = 0u;
  *(_OWORD *)(v7 + 856) = 0u;
  *(_BYTE *)(v7 + 872) = 0;
  *(_QWORD *)(v7 + 888) = 0;
  *(_QWORD *)(v7 + 880) = &off_1E34DE5C0;
  *(_QWORD *)(v7 + 896) = a1;
  *(_WORD *)(v7 + 904) = 0;
  *(_BYTE *)(v7 + 936) = 0;
  *(_BYTE *)(v7 + 928) = 0;
  *(_OWORD *)(v7 + 912) = 0u;
  State = WebKit::PageLoadState::PageLoadState((WebKit::PageLoadState *)(v7 + 944), (WebKit::WebPageProxy *)a1);
  *(_WORD *)(v7 + 1320) = 0;
  *(_QWORD *)(v7 + 1328) = 0;
  *(_BYTE *)(v7 + 1336) = 0;
  *(_BYTE *)(v7 + 1664) = 0;
  *(_DWORD *)(v7 + 1672) = 0;
  v11 = (WTF::RunLoop *)WTF::RunLoop::main(State);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E34D43B0;
  v12[1] = WebKit::WebPageProxy::resetRecentCrashCount;
  v12[2] = 0;
  v12[3] = a1;
  v13 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v7 + 1680), v11);
  *(_QWORD *)(v7 + 1680) = off_1E34ABE00;
  *(_QWORD *)(v7 + 1704) = v12;
  *(_DWORD *)(v7 + 1712) = 16843009;
  *(_QWORD *)(v7 + 1720) = 0;
  *(_BYTE *)(v7 + 1728) = 0;
  *(_QWORD *)(v7 + 1732) = 0;
  *(_QWORD *)(v7 + 1744) = 0;
  v14 = (WTF::RunLoop *)WTF::RunLoop::main(v13);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E34D43B0;
  v15[1] = WebKit::WebPageProxy::tryCloseTimedOut;
  v15[2] = 0;
  v15[3] = a1;
  v16 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v7 + 1752), v14);
  *(_QWORD *)(v7 + 1752) = off_1E34ABE00;
  *(_QWORD *)(v7 + 1776) = v15;
  *(_OWORD *)(v7 + 1784) = 0u;
  v17 = (WTF::RunLoop *)WTF::RunLoop::main(v16);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E34D43B0;
  v18[1] = WebKit::WebPageProxy::updateReportedMediaCaptureState;
  v18[2] = 0;
  v18[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v7 + 1800), v17);
  *(_QWORD *)(v7 + 1800) = off_1E34ABE00;
  *(_QWORD *)(v7 + 1824) = v18;
  *(_QWORD *)(v7 + 1832) = 0;
  *(_BYTE *)(v7 + 1840) = 0;
  *(_BYTE *)(v7 + 1856) = 0;
  *(_BYTE *)(v7 + 1860) = 0;
  *(_BYTE *)(v7 + 1868) = 0;
  *(_QWORD *)(v7 + 1872) = 0;
  *(_OWORD *)(v7 + 1880) = 0u;
  v19 = (WTF::RunLoop *)WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)(v7 + 1896) = v19;
  *(_BYTE *)(v7 + 1904) = 0;
  *(_BYTE *)(v7 + 1944) = 0;
  *(_QWORD *)(v7 + 2048) = 0;
  *(_BYTE *)(v7 + 2056) = 0;
  *(_BYTE *)(v7 + 2112) = 0;
  *(_QWORD *)(v7 + 2116) = 0;
  *(_BYTE *)(v7 + 2200) = 0;
  *(_DWORD *)(v7 + 2208) = 0;
  *(_OWORD *)(v7 + 2400) = 0u;
  *(_OWORD *)(v7 + 1912) = 0u;
  *(_BYTE *)(v7 + 1928) = 0;
  *(_OWORD *)(v7 + 1952) = 0u;
  *(_OWORD *)(v7 + 1968) = 0u;
  *(_OWORD *)(v7 + 1984) = 0u;
  *(_OWORD *)(v7 + 2000) = 0u;
  *(_OWORD *)(v7 + 2016) = 0u;
  *(_OWORD *)(v7 + 2025) = 0u;
  *(_BYTE *)(v7 + 2152) = 0;
  *(_QWORD *)(v7 + 2144) = 0;
  *(_OWORD *)(v7 + 2128) = 0u;
  *(_DWORD *)(v7 + 2392) = 0;
  *(_OWORD *)(v7 + 2360) = 0u;
  *(_OWORD *)(v7 + 2376) = 0u;
  *(_OWORD *)(v7 + 2328) = 0u;
  *(_OWORD *)(v7 + 2344) = 0u;
  *(_OWORD *)(v7 + 2296) = 0u;
  *(_OWORD *)(v7 + 2312) = 0u;
  *(_OWORD *)(v7 + 2264) = 0u;
  *(_OWORD *)(v7 + 2280) = 0u;
  *(_OWORD *)(v7 + 2232) = 0u;
  *(_OWORD *)(v7 + 2248) = 0u;
  *(_OWORD *)(v7 + 2216) = 0u;
  *(_QWORD *)(v7 + 2416) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 2424) = 0;
  v20 = (WTF::RunLoop *)WTF::RunLoop::main(v19);
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v21 = off_1E34D43B0;
  v21[1] = WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired;
  v21[2] = 0;
  v21[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v7 + 2432), v20);
  *(_QWORD *)(v7 + 2432) = off_1E34ABE00;
  *(_QWORD *)(v7 + 2456) = v21;
  *(_BYTE *)(v7 + 2464) = 0;
  *(_BYTE *)(v7 + 2472) = 0;
  *(_BYTE *)(v7 + 2480) = 0;
  *(_BYTE *)(v7 + 2560) = 0;
  *(_WORD *)(v7 + 2568) = 0;
  *(_BYTE *)(v7 + 2570) = 0;
  *(_OWORD *)(v7 + 2576) = 0u;
  *(_BYTE *)(v7 + 2592) = 1;
  *(_QWORD *)(a1 + 32) = v7;
  v22 = *(_QWORD *)(a2 + 8);
  if (v22)
    goto LABEL_90;
  v22 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  *(_QWORD *)(v22 + 8) = a2;
  v24 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v22;
  if (!v24)
    goto LABEL_90;
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
  {
    atomic_store(1u, v24);
    WTF::fastFree((WTF *)v24, v23);
  }
  v22 = *(_QWORD *)(a2 + 8);
  if (v22)
  {
LABEL_90:
    do
      v27 = __ldaxr((unsigned int *)v22);
    while (__stlxr(v27 + 1, (unsigned int *)v22));
  }
  v28 = (_DWORD *)(a1 + 729);
  *(_QWORD *)(a1 + 40) = v22;
  v29 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v29;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v30 = off_1E34D43D8;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v31 = off_1E34D4560;
  *(_QWORD *)(a1 + 80) = v31;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v32 = &unk_1E34D4040;
  *(_QWORD *)(a1 + 88) = v32;
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v33 = off_1E34D4068;
  *(_QWORD *)(a1 + 96) = v33;
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v34 = off_1E34DA170;
  *(_QWORD *)(a1 + 104) = v34;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v35 = off_1E34D4090;
  *(_QWORD *)(a1 + 112) = v35;
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v36 = off_1E34D40D8;
  *(_QWORD *)(a1 + 120) = v36;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v37[1] = 0;
  v37[2] = 0;
  *v37 = 0;
  *(_QWORD *)(a1 + 160) = v37;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  v38 = (unsigned int *)(a3 + 16);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + 1, v38));
  *(_QWORD *)(a1 + 208) = a3;
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 128);
  CFRetain(*(CFTypeRef *)(v40 + 8));
  *(_QWORD *)(a1 + 216) = v40;
  v41 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(*(_QWORD *)(a1 + 48) + 40));
  CFRetain(*((CFTypeRef *)v41 + 1));
  *(_QWORD *)(a1 + 224) = v41;
  v42 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get((WebKit::WebUserContentControllerProxy **)(*(_QWORD *)(a1 + 48) + 32));
  CFRetain(*((CFTypeRef *)v42 + 1));
  *(_QWORD *)(a1 + 232) = v42;
  v43 = *(_QWORD *)(a1 + 48);
  v44 = *(_QWORD *)(v43 + 112);
  if (v44)
  {
    CFRetain(*(CFTypeRef *)(v44 + 8));
    v43 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 240) = v44;
  v45 = *(_QWORD *)(v43 + 120);
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v46 + 8), *(_QWORD *)(v45 + 8));
      v45 = *(_QWORD *)(v46 + 8);
      if (v45)
      {
        do
          v47 = __ldaxr((unsigned int *)v45);
        while (__stlxr(v47 + 1, (unsigned int *)v45));
      }
    }
    else
    {
      v45 = 0;
    }
  }
  *(_QWORD *)(a1 + 248) = v45;
  v48 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get((WebKit::VisitedLinkStore **)(*(_QWORD *)(a1 + 48) + 48));
  CFRetain(*((CFTypeRef *)v48 + 1));
  *(_QWORD *)(a1 + 256) = v48;
  v49 = API::PageConfiguration::websiteDataStore(*(API::PageConfiguration **)(a1 + 48));
  CFRetain(*((CFTypeRef *)v49 + 1));
  *(_QWORD *)(a1 + 264) = v49;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  WebCore::standardUserAgentWithApplicationName();
  *(_QWORD *)buf = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  v50 = *(_DWORD **)(*(_QWORD *)(a1 + 48) + 232);
  if (v50)
    *v50 += 2;
  *(_QWORD *)(a1 + 344) = v50;
  *(_OWORD *)(a1 + 352) = 0uLL;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v51 = &off_1E34D4108;
  *(_QWORD *)(a1 + 368) = v51;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 391) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_DWORD *)(a1 + 399) = 0;
  *(_WORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 528) = a1;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  v52 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(v52 + 196);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(v52 + 208);
  v53 = (WebKit::WebBackForwardList *)API::Object::newObject(0x38uLL, 43);
  v54 = WebKit::WebBackForwardList::WebBackForwardList(v53, (WebKit::WebPageProxy *)a1);
  *(_QWORD *)(a1 + 592) = v54;
  *(_BYTE *)(a1 + 600) = 0;
  v55 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 601) = *(_BYTE *)(v55 + 197);
  *(_BYTE *)(a1 + 602) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 624) = _Q0;
  *(_OWORD *)(a1 + 640) = _Q0;
  *(_OWORD *)(a1 + 656) = xmmword_1978D0690;
  *(_OWORD *)(a1 + 672) = _Q0;
  *(_DWORD *)(a1 + 688) = 1065353216;
  *(_BYTE *)(a1 + 692) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 707) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  v61 = *(_QWORD *)(a3 + 136);
  if (v61 && *(_BYTE *)(v61 + 104))
  {
    v62 = 0;
  }
  else if (*(_QWORD *)(a3 + 144))
  {
    v62 = 1;
  }
  else
  {
    v62 = 2;
  }
  *(_BYTE *)(a1 + 728) = v62 != 2;
  *v28 = 0;
  *(_BYTE *)(a1 + 733) = 1;
  *(_QWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 734) = 0;
  *(_OWORD *)(a1 + 768) = 0uLL;
  *(_OWORD *)(a1 + 784) = 0uLL;
  *(_BYTE *)(a1 + 800) = 0;
  *(_WORD *)(a1 + 824) = 256;
  *(_OWORD *)(a1 + 808) = 0uLL;
  *(_BYTE *)(a1 + 826) = *(_BYTE *)(v55 + 199);
  *(_DWORD *)(a1 + 828) = 0;
  *(_BYTE *)(a1 + 832) = WebKit::TextChecker::isSmartInsertDeleteEnabled(v54);
  *(_QWORD *)(a1 + 836) = 0;
  *(_QWORD *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 850) = 16842753;
  *(_BYTE *)(a1 + 854) = 1;
  *(_DWORD *)(a1 + 855) = 0;
  *(_OWORD *)(a1 + 860) = 0u;
  *(_QWORD *)(a1 + 875) = 0;
  *(_DWORD *)(a1 + 884) = 1065353216;
  *(_WORD *)(a1 + 888) = 1;
  *(_BYTE *)(a1 + 890) = 1;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_DWORD *)(a1 + 891) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_WORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_WORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_BYTE *)(a1 + 984) = 1;
  *(_QWORD *)(a1 + 992) = 0x4008000000000000;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_WORD *)(a1 + 1004) = 0;
  *(_QWORD *)(a1 + 1008) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_WORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  v63 = (Inspector::BackendDispatcher **)WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)(a1 + 1072) = WebKit::WebPageInspectorController::WebPageInspectorController(v63, (WebKit::WebPageProxy *)a1);
  v64 = (WebKit::WebPageDebuggable *)WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)(a1 + 1080) = WebKit::WebPageDebuggable::WebPageDebuggable(v64, (WebKit::WebPageProxy *)a1);
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1111) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  v65 = *(_QWORD *)(a1 + 48) + 304;
  *(_OWORD *)(a1 + 1179) = 0u;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 1208, v65);
  *(_DWORD *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  v66 = *(_QWORD *)(a1 + 48);
  *(_WORD *)(a1 + 1260) = *(_WORD *)(v66 + 384);
  *(_WORD *)(a1 + 1262) = 0;
  *(_BYTE *)(a1 + 1264) = 1;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_DWORD *)(a1 + 1288) = 1;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1304) = 1;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  v67 = (_DWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get((uint64_t *)(v66 + 16));
  ++*v67;
  *(_QWORD *)(a1 + 1344) = v67;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_BYTE *)(a1 + 1384) = 0;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v68 = off_1E34D45A0;
  v68[1] = a1;
  *(_QWORD *)buf = v68;
  PAL::HysteresisActivity::HysteresisActivity(a1 + 1392, (uint64_t *)buf, 1.5);
  v69 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v70 = off_1E34D6EA0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v133, v134);
  v71 = *(unsigned int **)(a1 + 24);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 + 1, v71));
  v70[1] = v71;
  *(_QWORD *)(a1 + 1448) = v70;
  v73 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v74 = *(_QWORD *)(a1 + 32);
    v75 = *(_QWORD *)(v74 + 744);
    v76 = *(_QWORD *)(v74 + 1896);
    v77 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v77)
      LODWORD(v77) = *(_DWORD *)(v77 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v137 = 2048;
    v138 = v75;
    v139 = 2048;
    v140 = v76;
    v141 = 1024;
    v142 = v77;
    _os_log_impl(&dword_196BCC000, v73, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::constructor:", buf, 0x26u);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 198))
  {
    *(_QWORD *)buf = 0x1104000000000000;
    std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>(*(_QWORD *)(a1 + 32) + 88);
    if ((*(_QWORD *)buf & 0x8000000000000) != 0)
    {
      v129 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFLL);
      do
      {
        v130 = __ldaxr(v129);
        v131 = v130 - 1;
      }
      while (__stlxr(v131, v129));
      if (!v131)
      {
        atomic_store(1u, v129);
        WTF::fastFree((WTF *)v129, v78);
      }
    }
  }
  WebKit::WebPageProxy::updateActivityState((_QWORD *)a1, 1023);
  WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)a1, v79, v80);
  updated = (WebKit *)WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases((WebKit::WebPageProxy *)a1, v81, v82);
  v84 = *(_QWORD *)(a1 + 32);
  if ((*(_WORD *)(v84 + 48) & 0x10) != 0)
  {
    v85 = *(_QWORD *)(a1 + 40);
    if (v85)
      v86 = *(_QWORD *)(v85 + 8);
    else
      v86 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 1584))(v86);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 784) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 120))(v86);
    updated = (WebKit *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 1592))(v86);
  }
  else
  {
    *(_BYTE *)(v84 + 784) = 1;
  }
  v87 = WebKit::currentHardwareKeyboardState(updated);
  v88 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v88 + 2570) = BYTE2(v87);
  *(_WORD *)(v88 + 2568) = v87;
  ++HIDWORD(WebKit::WebProcessPool::statistics(void)::statistics);
  v89 = *(_QWORD *)(a1 + 224);
  CFRetain(*(CFTypeRef *)(v89 + 8));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(v89 + 88, (unsigned int *)a1, (uint64_t)buf);
  CFRelease(*(CFTypeRef *)(v89 + 8));
  v90 = *(CFTypeRef **)(a1 + 240);
  if (v90)
    goto LABEL_43;
  v127 = *(_QWORD *)(a1 + 248);
  if (v127)
  {
    v128 = *(_QWORD *)(v127 + 8);
    if (v128)
    {
      v90 = (CFTypeRef *)(v128 - 16);
LABEL_43:
      CFRetain(v90[1]);
      WebKit::WebExtensionController::addPage((WebKit::WebExtensionController *)v90, (WebKit::WebPageProxy *)a1);
      CFRelease(v90[1]);
    }
  }
  v91 = (WebKit::WebInspectorUIProxy *)API::Object::newObject(0x58uLL, 71);
  v92 = WebKit::WebInspectorUIProxy::WebInspectorUIProxy(v91, (WebKit::WebPageProxy *)a1);
  v93 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v92;
  if (v93)
    CFRelease(*(CFTypeRef *)(v93 + 8));
  if (!*(_BYTE *)v28 && *(_BYTE *)(a1 + 728))
    WebKit::WebPageProxy::didAttachToRunningProcess((WebKit::WebPageProxy *)a1);
  WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  v95 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore::DeprecatedGlobalSettings *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v95 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, v94);
  *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(BoolValueForKey) + 17) = (_BYTE)BoolValueForKey;
  v97 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get((WebKit::WebPreferences **)(*(_QWORD *)(a1 + 48) + 40));
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v97 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v98))
  {
    v99 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
    v100 = (unsigned int *)(v99 + 16);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 + 1, v100));
    v102 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v102 = 382;
    *(_QWORD *)(v102 + 8) = 0;
    *(_QWORD *)(v102 + 528) = v102 + 16;
    *(_QWORD *)(v102 + 536) = v102 + 16;
    *(_OWORD *)(v102 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v102 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v102);
    v135 = (IPC::Encoder *)v102;
    buf[0] = 0;
    BYTE2(v138) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v99, &v135, 0, (uint64_t)buf, 1);
    if (BYTE2(v138))
    {
      v104 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v104)
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    }
    v105 = v135;
    v135 = 0;
    if (v105)
    {
      IPC::Encoder::~Encoder(v105, v103);
      WTF::fastFree(v106, v107);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v100);
  }
  v108 = WTF::fastMalloc((WTF *)0x18);
  v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v109 = off_1E34D4158;
  v109[1] = a1;
  *(_QWORD *)v108 = v109;
  *(_WORD *)(v108 + 8) = 512;
  *(_QWORD *)(v108 + 16) = 0;
  std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100]((WebCore::RunLoopObserver **)(a1 + 904), (WebCore::RunLoopObserver *)v108);
  v110 = *(Inspector::RemoteInspectionTarget **)(a1 + 1080);
  JSRemoteInspectorGetInspectionEnabledByDefault();
  Inspector::RemoteInspectionTarget::setInspectable(v110);
  v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
  if (v111)
    v112 = v111 - 16;
  else
    v112 = 0;
  *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v112 + 48) + 80);
  buf[4] = 1;
  Inspector::RemoteInspectionTarget::setPresentingApplicationPID();
  Inspector::RemoteControllableTarget::init(*(Inspector::RemoteControllableTarget **)(a1 + 1080));
  WebKit::WebPageInspectorController::init(*(WebKit::WebPageInspectorController **)(a1 + 1072));
  v113 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 152);
  if (v113 && (v114 = *(_QWORD *)(v113 + 8)) != 0)
  {
    v115 = v114 - 16;
    CFRetain(*(CFTypeRef *)(v114 - 8));
  }
  else
  {
    v115 = 0;
  }
  v116 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = v115;
  if (v116)
    CFRelease(*(CFTypeRef *)(v116 + 8));
  {
    qword_1ECE73518 = 0;
    WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
    unk_1ECE73508 = 0u;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v133, v134);
  v117 = *(unsigned int **)v133;
  if (*(_QWORD *)v133)
  {
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 + 1, v117));
  }
  v119 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v119 = &off_1E34D45C8;
  *((_QWORD *)v119 + 1) = v117;
  v135 = v119;
  WebKit::LinkDecorationFilteringController::observeUpdates((uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance, (uint64_t *)&v135, (uint64_t *)buf);
  v121 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v122 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = v121;
  if (v122)
  {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v122, v120);
    v124 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v124)
      WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v124, v123);
  }
  v125 = v135;
  v135 = 0;
  if (v125)
    (*(void (**)(IPC::Encoder *))(*(_QWORD *)v125 + 8))(v125);
  return a1;
}

void `non-virtual thunk to'WebKit::WebPageProxy::~WebPageProxy(WebKit::WebPageProxy *this)
{
  WebKit::WebPageProxy::~WebPageProxy((WebKit::WebPageProxy *)((char *)this - 16));
}

{
  WebKit::WebPageProxy::~WebPageProxy((WebKit::WebPageProxy *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebPageProxy::pageClient(WebKit::WebPageProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebKit::WebPageProxy::gpuProcessID(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 729)
    && (v2 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)this + 6) + 24))
             + 22)) != 0
    && (v3 = *(_QWORD *)(v2 + 136)) != 0)
  {
    return *(unsigned int *)(v3 + 108);
  }
  else
  {
    return 0;
  }
}

uint64_t WebKit::WebPageProxy::setCanRunModal(WebKit::WebPageProxy *this, char a2)
{
  uint64_t result;
  char v5;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 392))(*((_QWORD *)this + 13));
  *((_BYTE *)this + 730) = result & a2;
  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      v5 = result & a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanRunModal>(*((_QWORD *)this + 26), &v5, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setNeedsFontAttributes(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 1116) != a2)
  {
    *(_BYTE *)(this + 1116) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetNeedsFontAttributes>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setFindMatchesClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D40D8;
  }
  result = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *WebKit::WebPageProxy::setInjectedBundleClient(uint64_t a1, int *a2)
{
  WTF *result;
  void *v5;
  WTF *v6;
  __int128 v7;
  __int128 v8;

  if (a2)
  {
    result = (WTF *)WTF::fastMalloc((WTF *)0x30);
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    v6 = *(WTF **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = result;
    if (v6)
    {
      WTF::fastFree(v6, v5);
      result = *(WTF **)(a1 + 144);
    }
    if (*a2 == 1)
    {
      v7 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
    }
    else
    {
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 2) = 0u;
      *(_OWORD *)result = 0u;
      if (*a2 > 0)
        return result;
      if (*a2)
      {
        __break(1u);
        return result;
      }
      v7 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 1);
    }
    *(_OWORD *)result = v7;
    *((_OWORD *)result + 1) = v8;
  }
  else
  {
    result = *(WTF **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (result)
      return (WTF *)WTF::fastFree(result, 0);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setResourceLoadClient(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v3 = a1[17];
  v4 = *a2;
  *a2 = 0;
  result = a1[17];
  a1[17] = v4;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v4 = a1[17];
  }
  if ((v3 != 0) != (v4 != 0))
  {
    v6 = v4 != 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetHasResourceLoadClient>(a1[26], &v6, *(_QWORD *)(a1[4] + 1896), 0);
  }
  return result;
}

void WebKit::WebPageProxy::handleMessageShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, CFTypeRef **a4)
{
  WebKit::WebPageInjectedBundleClient *v4;
  WebKit::WebProcessProxy *v7;
  CFTypeRef *v8;
  API::Object *v9;
  API::Object *v10;

  v4 = (WebKit::WebPageInjectedBundleClient *)*((_QWORD *)a1 + 18);
  if (v4)
  {
    v7 = *a2;
    v8 = *a4;
    if (*a4)
      CFRetain(v8[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects(v7, (API::Object *)v8, &v10);
    WebKit::WebPageInjectedBundleClient::didReceiveMessageFromInjectedBundle(v4, a1, a3, v10);
    v9 = v10;
    v10 = 0;
    if (v9)
      CFRelease(*((CFTypeRef *)v9 + 1));
    if (v8)
      CFRelease(v8[1]);
  }
}

void WebKit::WebPageProxy::handleMessageWithAsyncReply(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebKit *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WebKit *v24;

  v4 = *(_QWORD *)(a1 + 144);
  if (v4)
  {
    v7 = *a3;
    v8 = *a4;
    *a4 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34D45F0;
    v9[1] = v8;
    v22 = v9;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v4 + 40);
    if (!v10)
    {
      v24 = 0;
      WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)&v22, (uint64_t *)&v24);
      v16 = v24;
      v24 = 0;
      if (!v16)
      {
LABEL_13:
        v19 = (uint64_t)v22;
        v22 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        return;
      }
LABEL_12:
      CFRelease(*((CFTypeRef *)v16 + 1));
      goto LABEL_13;
    }
    v11 = v9;
    v12 = *a2;
    v13 = *(_QWORD *)(a1 + 8);
    if (*a2)
      *(_DWORD *)v12 += 2;
    v23 = v12;
    API::String::create(&v23, &v24);
    v15 = v23;
    v16 = v24;
    v23 = 0;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v14);
        if (v16)
        {
LABEL_9:
          v17 = *((_QWORD *)v16 + 1);
          if (!v7)
            goto LABEL_11;
          goto LABEL_10;
        }
LABEL_21:
        v17 = 0;
        if (!v7)
        {
LABEL_11:
          v18 = API::Object::newObject(0x18uLL, 75);
          *(_QWORD *)v18 = off_1E34CC2A8;
          WebKit::InitializeWebKit2((WebKit *)v18);
          *(_QWORD *)v18 = &off_1E34D2E08;
          v22 = 0;
          *(_QWORD *)(v18 + 16) = v11;
          v10(v13, v17, v7, *(_QWORD *)(v18 + 8), *(_QWORD *)(v4 + 8));
          CFRelease(*(CFTypeRef *)(v18 + 8));
          if (!v16)
            goto LABEL_13;
          goto LABEL_12;
        }
LABEL_10:
        v7 = *(_QWORD *)(v7 + 8);
        goto LABEL_11;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (v16)
      goto LABEL_9;
    goto LABEL_21;
  }
  v24 = 0;
  v20 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v20 + 16))(v20, &v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v24;
  v24 = 0;
  if (v21)
    CFRelease(*((CFTypeRef *)v21 + 1));
}

void WebKit::WebPageProxy::handleSynchronousMessage(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, CFTypeRef **a4, uint64_t *a5)
{
  WebKit::WebProcessProxy *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  CFTypeRef *v12;
  WebKit *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, WebKit **, _QWORD);
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebKit *v22;
  uint64_t v23;
  uint64_t v24;
  WebKit *v25;
  WebKit *v26;
  const void *v27;
  uint64_t v28;
  WebKit *v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebKit *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebKit *v40;
  _QWORD *v41;
  WebKit *v42;
  WebKit *v43;
  WTF::StringImpl *v44;
  WebKit *v45;

  if (a1[18])
  {
    v8 = (WebKit::WebProcessProxy *)a1[26];
    v9 = (unsigned int *)((char *)v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = (_QWORD *)a1[18];
    v12 = *a4;
    if (*a4)
      CFRetain(v12[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects(v8, (API::Object *)v12, &v42);
    v13 = v42;
    v14 = *a5;
    *a5 = 0;
    do
      v15 = __ldaxr(v9);
    while (__stlxr(v15 + 1, v9));
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = &off_1E34D4618;
    v16[1] = v14;
    v16[2] = v8;
    v41 = v16;
    v17 = *a3;
    v18 = (void (*)(uint64_t, uint64_t, uint64_t, WebKit **, _QWORD))v11[3];
    if (v18)
    {
      v43 = 0;
      v19 = a1[1];
      if (v17)
        *(_DWORD *)v17 += 2;
      v44 = v17;
      API::String::create(&v44, &v45);
      v21 = v44;
      v22 = v45;
      v44 = 0;
      v45 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v20);
          if (v22)
          {
LABEL_15:
            v23 = *((_QWORD *)v22 + 1);
            if (v13)
            {
LABEL_16:
              v24 = *((_QWORD *)v13 + 1);
LABEL_17:
              v18(v19, v23, v24, &v43, v11[1]);
              if (v22)
                CFRelease(*((CFTypeRef *)v22 + 1));
              v25 = v43;
              if (v43)
                v25 = (WebKit *)-[WebKit _apiObject](v43, "_apiObject");
              v45 = v25;
LABEL_22:
              WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)&v41, (uint64_t *)&v45);
              v26 = v45;
              v45 = 0;
              if (v26)
              {
                v27 = (const void *)*((_QWORD *)v26 + 1);
LABEL_37:
                CFRelease(v27);
                goto LABEL_38;
              }
              goto LABEL_38;
            }
LABEL_48:
            v24 = 0;
            goto LABEL_17;
          }
LABEL_47:
          v23 = 0;
          if (v13)
            goto LABEL_16;
          goto LABEL_48;
        }
        *(_DWORD *)v21 -= 2;
      }
      if (v22)
        goto LABEL_15;
      goto LABEL_47;
    }
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))v11[4];
    if (!v30)
    {
      v45 = 0;
      goto LABEL_22;
    }
    v31 = a1[1];
    if (v17)
      *(_DWORD *)v17 += 2;
    v44 = v17;
    API::String::create(&v44, &v45);
    v33 = v44;
    v34 = v45;
    v44 = 0;
    v45 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::destroy(v33, v32);
        if (v34)
        {
LABEL_33:
          v35 = *((_QWORD *)v34 + 1);
          if (v13)
          {
LABEL_34:
            v36 = *((_QWORD *)v13 + 1);
            goto LABEL_35;
          }
LABEL_52:
          v36 = 0;
LABEL_35:
          v37 = API::Object::newObject(0x18uLL, 75);
          *(_QWORD *)v37 = off_1E34CC2A8;
          WebKit::InitializeWebKit2((WebKit *)v37);
          *(_QWORD *)v37 = &off_1E34D2E08;
          v38 = (uint64_t)v41;
          v41 = 0;
          *(_QWORD *)(v37 + 16) = v38;
          v30(v31, v35, v36, *(_QWORD *)(v37 + 8), v11[1]);
          CFRelease(*(CFTypeRef *)(v37 + 8));
          if (v34)
          {
            v27 = (const void *)*((_QWORD *)v34 + 1);
            goto LABEL_37;
          }
LABEL_38:
          v39 = (uint64_t)v41;
          v41 = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v40 = v42;
          v42 = 0;
          if (v40)
            CFRelease(*((CFTypeRef *)v40 + 1));
          if (v12)
            CFRelease(v12[1]);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
          return;
        }
LABEL_51:
        v35 = 0;
        if (v13)
          goto LABEL_34;
        goto LABEL_52;
      }
      *(_DWORD *)v33 -= 2;
    }
    if (v34)
      goto LABEL_33;
    goto LABEL_51;
  }
  v45 = 0;
  v28 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v28 + 16))(v28, &v45);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v45;
  v45 = 0;
  if (v29)
    CFRelease(*((CFTypeRef *)v29 + 1));
}

BOOL WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs(WebKit::WebPreferences ***this, WebKit::WebPreferences **a2)
{
  uint64_t v4;
  int v5;

  v4 = API::PageConfiguration::preferencesForGPUProcess(this[6]) & 0xFFFFFFFFFFFFLL;
  if (v4 != (API::PageConfiguration::preferencesForGPUProcess(a2) & 0xFFFFFFFFFFFFLL))
    return 0;
  v5 = (unsigned __int16)API::PageConfiguration::preferencesForNetworkProcess(this[6]);
  return v5 == (unsigned __int16)API::PageConfiguration::preferencesForNetworkProcess(a2);
}

void WebKit::WebPageProxy::launchProcess(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  CFTypeRef *v46;
  CFTypeRef *v47;
  CFTypeRef *v48;
  char v49;
  CFTypeRef *v50;
  CFTypeRef *v51;
  uint64_t *v52[2];
  _BYTE buf[12];
  _BYTE v54[10];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(v7 + 744);
    v9 = *(_QWORD *)(v7 + 1896);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)v54 = 2048;
    *(_QWORD *)&v54[2] = v8;
    v55 = 2048;
    v56 = v9;
    v57 = 1024;
    v58 = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcess:", buf, 0x26u);
  }
  if (*(_BYTE *)(a1 + 729) || (v11 = *(_QWORD *)(a1 + 352)) == 0)
  {
    WebKit::WebInspectorUIProxy::reset(0);
  }
  else
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebInspectorUIProxy::reset(v11);
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  v12 = *(_QWORD *)(a1 + 208);
  v13 = (unsigned int *)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  WebKit::WebProcessProxy::removeWebPage(v12, (WebKit::WebPageProxy *)a1, 1);
  if (v12)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)a1);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 512);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      v17 = v16 - 16;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  CFRetain(*(CFTypeRef *)(v17 + 8));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 136);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
  {
    v20 = v19 - 16;
    CFRetain(*(CFTypeRef *)(v19 - 8));
    if (a3 || *(_BYTE *)(v19 + 713))
    {
      v49 = 0;
    }
    else
    {
      if (WebKit::WebPageProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebPreferences ***)a1, *(WebKit::WebPreferences ***)(v19 + 32)))
      {
        v21 = WebKit::WebPageProxy::ensureRunningProcess((WebKit::WebPageProxy *)(v19 - 16));
        v22 = (unsigned int *)(v21 + 16);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        v24 = *(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = v21;
        if (v24)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v24 + 16));
        v25 = qword_1ECE71320;
        if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_QWORD *)(a1 + 32);
          v27 = *(_QWORD *)(v26 + 744);
          v28 = *(_QWORD *)(v26 + 1896);
          v29 = *(_QWORD *)(a1 + 208);
          v30 = *(_QWORD *)(v29 + 136);
          if (v30)
            LODWORD(v30) = *(_DWORD *)(v30 + 108);
          *(_DWORD *)buf = 134219264;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)v54 = 2048;
          *(_QWORD *)&v54[2] = v27;
          v55 = 2048;
          v56 = v28;
          v57 = 1024;
          v58 = v30;
          v59 = 2048;
          v60 = v29;
          v61 = 1024;
          v62 = v30;
          _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcess: Using process (process=%p, PID=%i) from related page", buf, 0x36u);
        }
        v49 = 0;
        goto LABEL_38;
      }
      v49 = 0;
    }
  }
  else
  {
    v20 = 0;
    v49 = 1;
  }
  v31 = *(_QWORD *)(a1 + 264);
  CFRetain(*(CFTypeRef *)(v31 + 8));
  v32 = API::PageConfiguration::lockdownModeEnabled(*(API::PageConfiguration **)(a1 + 48));
  v33 = *(_QWORD *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(v33 + 8));
  WebKit::WebProcessPool::processForRegistrableDomain(v17, v31, a2, v32, (WebKit::WebPreferences **)v33, (unsigned int **)buf);
  v34 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v35 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v34;
  if (v35)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v35 + 16));
    v36 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v36)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v36 + 16));
  }
  CFRelease(*(CFTypeRef *)(v33 + 8));
  CFRelease(*(CFTypeRef *)(v31 + 8));
LABEL_38:
  *(_BYTE *)(a1 + 728) = 1;
  *(_BYTE *)(a1 + 858) = 0;
  *(_BYTE *)(a1 + 1291) = API::PageConfiguration::isLockdownModeExplicitlySet(*(API::PageConfiguration **)(a1 + 48));
  v37 = *(_QWORD *)(a1 + 208);
  v38 = (unsigned int *)(v37 + 16);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + 1, v38));
  WebKit::WebProcessProxy::addExistingWebPage(v37, (WebKit::WebPageProxy *)a1, 1);
  WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 200))
    *(_BYTE *)(v37 + 1024) = 1;
  WebKit::WebPageProxy::finishAttachingToWebProcess(a1, a3);
  v41 = *(uint64_t **)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)buf = v41;
  v42 = *(_DWORD *)(a1 + 1232);
  v43 = *(unsigned int *)(a1 + 1236);
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)&buf[8] = v42;
  *(_DWORD *)v54 = v43;
  if ((_DWORD)v43)
  {
    v44 = 16 * v43;
    do
    {
      v45 = (const void *)v41[1];
      v52[0] = (uint64_t *)&off_1E34D7358;
      WebKit::UserData::transform(v45, (uint64_t)v52, (WebKit **)&v50);
      v46 = v50;
      if (v50)
        CFRetain(v50[1]);
      v51 = v46;
      v52[0] = v41;
      v52[1] = (uint64_t *)&v51;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(*(_QWORD *)(a1 + 208), v52, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
      v47 = v51;
      v51 = 0;
      if (v47)
        CFRelease(v47[1]);
      v48 = v50;
      v50 = 0;
      if (v48)
        CFRelease(v48[1]);
      v41 += 2;
      v44 -= 16;
    }
    while (v44);
  }
  WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)buf, v40);
  if (v37)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v37 + 16));
  if ((v49 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v20 + 8));
  CFRelease(*(CFTypeRef *)(v17 + 8));
}

uint64_t WebKit::WebPageProxy::ensureRunningProcess(WebKit::WebPageProxy *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728))
  {
    v5 = 0;
    WebKit::WebPageProxy::launchProcess(this, &v5, 0);
    v3 = v5;
    v5 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return *((_QWORD *)this + 26);
}

void WebKit::WebPageProxy::finishAttachingToWebProcess(uint64_t a1, int a2)
{
  uint64_t v4;
  const WTF::StringImpl *v5;
  CFTypeRef *v6;
  Inspector::RemoteControllableTarget *v7;
  uint64_t v8;
  uint64_t v9;

  WebKit::WebPageProxy::updateActivityState((_QWORD *)a1, 1023);
  WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)a1, v4, v5);
  WebKit::WebPageProxy::didAttachToRunningProcess((WebKit::WebPageProxy *)a1);
  if (a2 != 1)
    WebKit::WebPageProxy::initializeWebPage((unsigned int *)a1);
  if (*(_BYTE *)(a1 + 729) || (v6 = *(CFTypeRef **)(a1 + 352)) == 0)
  {
    WebKit::WebInspectorUIProxy::updateForNewPageProcess(0, (WebKit::WebPageProxy *)a1);
  }
  else
  {
    CFRetain(v6[1]);
    WebKit::WebInspectorUIProxy::updateForNewPageProcess((WebKit::WebInspectorUIProxy *)v6, (WebKit::WebPageProxy *)a1);
    CFRelease(v6[1]);
  }
  v7 = *(Inspector::RemoteControllableTarget **)(a1 + 1080);
  if (v7)
    Inspector::RemoteControllableTarget::update(v7);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  WebKit::PageLoadState::callObserverCallback(*(_QWORD *)(a1 + 32) + 944, (void (*)(_QWORD *))0xD0, 1);
}

uint64_t WebKit::WebPageProxy::shouldUseBackForwardCache(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  const WTF::StringImpl *v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)this + 6) + 24))
                     + 95)
                   + 16))
    {
      v7 = *((_QWORD *)this + 28);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v6) ^ 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 370;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v15 = (IPC::Encoder *)v4;
  v5 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v5;
  v6 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v6;
  v7 = *a2[2];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 8uLL, 8) = v7;
  LOBYTE(v13) = 0;
  v14 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v15, 0, (uint64_t)&v13, 1);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void WebKit::WebPageProxy::creationParameters(uint64_t a1@<X0>, WebKit::WebProcessProxy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  char v42;
  int v43;
  WTF::StringImpl **v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  WebCore *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  WebCore *v57;
  int v58;
  int v59;
  WebCore *v60;
  int v61;
  int v62;
  WebCore *v63;
  int v64;
  int v65;
  WebCore *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  WTF::StringImpl **v91;
  const WTF::StringImpl *v92;
  WTF::StringImpl **v93;
  WTF::StringImpl **v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  _QWORD *v103;
  int i;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  WTF::StringImpl **v114;
  void *v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  const WTF::StringImpl *v119;
  uint64_t v120;
  const WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl **v126;
  WTF::StringImpl **v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int *v131;
  void *v132;
  WTF::StringImpl *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  const WTF::StringImpl *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  const WTF::StringImpl *v145;
  uint64_t v146;
  const WTF::StringImpl *v147;
  uint64_t v148;
  const WTF::StringImpl *v149;
  uint64_t v150;
  const WTF::StringImpl *v151;
  uint64_t v152;
  const WTF::StringImpl *v153;
  uint64_t v154;
  const WTF::StringImpl *v155;
  uint64_t v156;
  const WTF::StringImpl *v157;
  uint64_t v158;
  const WTF::StringImpl *v159;
  uint64_t v160;
  const WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const WTF::StringImpl *v165;
  uint64_t v166;
  WebKit *BoolValueForKey;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  WebKit::WebPageProxy *v172;
  void *v173;
  const WTF::StringImpl *v174;
  uint64_t v175;
  int v176;
  WebKit::WebPreferencesStore *v177;
  const WTF::StringImpl *v178;
  const WTF::StringImpl *v179;
  const WTF::StringImpl *v180;
  const WTF::StringImpl *v181;
  const WTF::StringImpl *v182;
  const WTF::StringImpl *v183;
  char v184;
  const char **v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  uint64_t v192;
  WebKit::WebProcessProxy *v194;
  uint64_t v196;
  uint64_t v198;
  WTF::StringImpl **v199;
  WTF::StringImpl **v200;
  WTF::StringImpl **v201;
  uint64_t v202;
  uint64_t v203;
  int v204[4];
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;

  *(_QWORD *)a8 = 0;
  *(_WORD *)(a8 + 8) = 0;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  v12 = a8 + 16;
  *(_QWORD *)(a8 + 112) = 0;
  *(_BYTE *)(a8 + 176) = 0;
  v13 = a8 + 176;
  *(_BYTE *)(a8 + 172) = 0;
  *(_BYTE *)(a8 + 180) = 0;
  *(_BYTE *)(a8 + 184) = 0;
  *(_QWORD *)(a8 + 216) = 0;
  v14 = (WTF::StringImpl **)(a8 + 216);
  *(_BYTE *)(a8 + 188) = 0;
  *(_BYTE *)(a8 + 224) = 0;
  *(_OWORD *)(a8 + 72) = 0u;
  *(_OWORD *)(a8 + 88) = 0u;
  *(_OWORD *)(a8 + 124) = 0u;
  *(_OWORD *)(a8 + 140) = 0u;
  *(_BYTE *)(a8 + 156) = 0;
  *(_OWORD *)(a8 + 232) = 0u;
  *(_QWORD *)(a8 + 248) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a8 + 272) = _Q1;
  *(_WORD *)(a8 + 296) = 0;
  *(_BYTE *)(a8 + 320) = 0;
  v190 = a8 + 320;
  *(_BYTE *)(a8 + 328) = 0;
  *(_BYTE *)(a8 + 336) = 0;
  *(_BYTE *)(a8 + 340) = 0;
  *(_BYTE *)(a8 + 346) = 0;
  *(_OWORD *)(a8 + 352) = 0u;
  v199 = (WTF::StringImpl **)(a8 + 352);
  *(_WORD *)(a8 + 369) = 0;
  *(_BYTE *)(a8 + 371) = 0;
  *(_QWORD *)(a8 + 376) = 0;
  *(_BYTE *)(a8 + 464) = 0;
  *(_QWORD *)(a8 + 520) = 0;
  *(_WORD *)(a8 + 586) = 0;
  *(_QWORD *)(a8 + 592) = 0;
  *(_BYTE *)(a8 + 600) = 0;
  *(_BYTE *)(a8 + 608) = 0;
  *(_BYTE *)(a8 + 904) = 0;
  *(_BYTE *)(a8 + 912) = 0;
  *(_BYTE *)(a8 + 315) = 0;
  *(_OWORD *)(a8 + 299) = 0u;
  *(_BYTE *)(a8 + 408) = 0;
  *(_QWORD *)(a8 + 400) = 0;
  *(_OWORD *)(a8 + 484) = 0u;
  *(_OWORD *)(a8 + 468) = 0u;
  *(_BYTE *)(a8 + 512) = 0;
  *(_QWORD *)(a8 + 504) = 0;
  *(_OWORD *)(a8 + 552) = 0u;
  *(_OWORD *)(a8 + 568) = 0u;
  *(_OWORD *)(a8 + 536) = 0u;
  *(_BYTE *)(a8 + 640) = 0;
  *(_OWORD *)(a8 + 616) = 0u;
  *(_QWORD *)(a8 + 632) = 0;
  *(_WORD *)(a8 + 913) = 1;
  *(_BYTE *)(a8 + 1040) = 0;
  *(_BYTE *)(a8 + 1048) = 0;
  *(_BYTE *)(a8 + 1056) = 0;
  *(_BYTE *)(a8 + 1064) = 0;
  *(_BYTE *)(a8 + 1072) = 0;
  v192 = a8 + 920;
  *(_OWORD *)(a8 + 993) = 0u;
  *(_OWORD *)(a8 + 968) = 0u;
  *(_OWORD *)(a8 + 984) = 0u;
  *(_OWORD *)(a8 + 936) = 0u;
  *(_OWORD *)(a8 + 952) = 0u;
  *(_OWORD *)(a8 + 920) = 0u;
  *(_OWORD *)(a8 + 1080) = 0u;
  *(_OWORD *)(a8 + 1096) = 0u;
  *(_WORD *)(a8 + 1112) = 257;
  *(_BYTE *)(a8 + 1120) = 0;
  *(_BYTE *)(a8 + 1144) = 0;
  *(_BYTE *)(a8 + 1152) = 0;
  *(_BYTE *)(a8 + 1156) = 0;
  *(_BYTE *)(a8 + 1158) = 1;
  *(_OWORD *)(a8 + 1160) = 0u;
  *(_QWORD *)(a8 + 1173) = 0;
  *(_DWORD *)(a8 + 1181) = 16777473;
  v20 = a8 + 1192;
  *(_BYTE *)(a8 + 1192) = 0;
  *(_BYTE *)(a8 + 1392) = 0;
  *(_BYTE *)(a8 + 1400) = 0;
  *(_BYTE *)(a8 + 1416) = 0;
  v21 = a8 + 1424;
  *(_BYTE *)(a8 + 1424) = 0;
  *(_BYTE *)(a8 + 1440) = 0;
  *(_DWORD *)(a8 + 1185) = 0;
  *(_QWORD *)(a8 + 1480) = 0;
  *(_OWORD *)(a8 + 1448) = 0u;
  v22 = (WTF::StringImpl *)(*(_QWORD *)(a1 + 48) + 336);
  v196 = a8 + 232;
  *(_OWORD *)(a8 + 1464) = 0u;
  WTF::String::operator=((WTF::StringImpl **)(a8 + 1160), v22);
  std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>(v20, a4);
  v198 = a1;
  v24 = *(_QWORD *)(a1 + 288);
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 272);
    v23 = *(_QWORD *)(v24 + 280);
    v26 = v25 & 0xFFFFFFFFFFFFFF00;
    LOBYTE(v24) = 1;
  }
  else
  {
    LOBYTE(v25) = 0;
    v26 = 0;
  }
  *(_QWORD *)(a8 + 1400) = v26 | v25;
  *(_QWORD *)(a8 + 1408) = v23;
  *(_BYTE *)(a8 + 1416) = v24;
  *(_OWORD *)v21 = *(_OWORD *)a7;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(a7 + 16);
  v27 = *(_QWORD *)(a1 + 40);
  v194 = a2;
  if (v27)
    v28 = *(_QWORD *)(v27 + 8);
  else
    v28 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 1584))(v28);
  *(_QWORD *)a8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 1592))(v28);
  v29 = *(_QWORD *)(a1 + 32);
  *(_WORD *)(a8 + 8) = *(_WORD *)(v29 + 48);
  *(_BYTE *)(a8 + 64) = *(_BYTE *)(a3 + 32);
  *(_QWORD *)(a8 + 72) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a8 + 80) = *(_QWORD *)(v29 + 744);
  v30 = *(_QWORD *)(a1 + 224);
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(v12, (uint64_t *)(v30 + 40));
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a8 + 40, (uint64_t *)(v30 + 64));
  v31 = *(_QWORD *)(a1 + 216);
  WTF::String::operator=((WTF::StringImpl **)(a8 + 88), (WTF::StringImpl *)(v31 + 24));
  *(_QWORD *)(a8 + 96) = *(_QWORD *)(v31 + 32);
  *(_BYTE *)(a8 + 104) = *(_BYTE *)(a1 + 616);
  WebCore::Color::operator=();
  *(_BYTE *)(a8 + 120) = *(_BYTE *)(a1 + 705);
  v32 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a8 + 124) = *(_QWORD *)(v32 + 704);
  *(_QWORD *)(a8 + 132) = *(_QWORD *)(v32 + 216);
  *(_QWORD *)(a8 + 140) = *(_QWORD *)(v32 + 828);
  *(_QWORD *)(a8 + 148) = *(_QWORD *)(v32 + 800);
  v33 = *(_OWORD *)(v32 + 1840);
  *(_BYTE *)(a8 + 172) = *(_BYTE *)(v32 + 1856);
  *(_OWORD *)(a8 + 156) = v33;
  if (*(_BYTE *)(a1 + 756))
  {
    *(_DWORD *)v13 = *(_DWORD *)(a1 + 752);
    *(_BYTE *)(v13 + 4) = *(_BYTE *)(a1 + 756);
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
    *(_DWORD *)(a8 + 184) = v34;
    *(_BYTE *)(a8 + 188) = BYTE4(v34);
  }
  *(_DWORD *)(a8 + 192) = *(_DWORD *)(a1 + 706);
  *(_BYTE *)(a8 + 196) = *(_BYTE *)(a1 + 710);
  *(_OWORD *)(a8 + 200) = *(_OWORD *)(a1 + 712);
  WTF::String::operator=(v14, (WTF::StringImpl *)(a1 + 304));
  *(_BYTE *)(a8 + 224) = *(_BYTE *)(a1 + 1192);
  WebKit::WebBackForwardList::itemStates(*(WebKit::WebBackForwardList **)(a1 + 592), (uint64_t)&v201);
  v36 = *(_DWORD *)(a8 + 244);
  if (v36)
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)v196, (WTF::StringImpl *)(*(_QWORD *)v196 + 312 * v36));
  v37 = *(WTF **)v196;
  if (*(_QWORD *)v196)
  {
    *(_QWORD *)(a8 + 232) = 0;
    *(_DWORD *)(a8 + 240) = 0;
    WTF::fastFree(v37, v35);
  }
  *(_QWORD *)(a8 + 232) = v201;
  v38 = v202;
  v201 = 0;
  v202 = 0;
  *(_QWORD *)(a8 + 240) = v38;
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201, v35);
  *(_QWORD *)(a8 + 248) = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 32);
  *(_BYTE *)(a8 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 232))(*(_QWORD *)(a1 + 104));
  *(_BYTE *)(a8 + 257) = *(_BYTE *)(a1 + 730);
  v39 = 692;
  if (!*(_BYTE *)(a1 + 696))
    v39 = 688;
  *(_DWORD *)(a8 + 260) = *(_DWORD *)(a1 + v39);
  v40 = *(double *)(a1 + 680);
  *(float *)(a8 + 264) = v40;
  *(_OWORD *)(a8 + 272) = *(_OWORD *)(a1 + 624);
  *(_DWORD *)(a8 + 288) = *(_DWORD *)(a1 + 700);
  *(_DWORD *)(a8 + 292) = *(_DWORD *)(a1 + 884);
  v41 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a8 + 296) = *(_BYTE *)(v41 + 872);
  *(_BYTE *)(a8 + 297) = *(_BYTE *)(a1 + 1048);
  *(_BYTE *)(a8 + 298) = *(_BYTE *)(a1 + 888);
  *(_BYTE *)(a8 + 299) = *(_BYTE *)(a1 + 889);
  *(_QWORD *)(v196 + 68) = *(_QWORD *)(v41 + 820);
  *(_QWORD *)(v196 + 76) = *(_QWORD *)(v41 + 1732);
  *(_BYTE *)(a8 + 316) = *(_BYTE *)(a1 + 882);
  v42 = *(_BYTE *)(v41 + 1868);
  *(_QWORD *)v190 = *(_QWORD *)(v41 + 1860);
  *(_BYTE *)(v190 + 8) = v42;
  *(_BYTE *)(a8 + 332) = *(_BYTE *)(v41 + 1728);
  if (*(_BYTE *)(a1 + 945))
  {
    v43 = *(unsigned __int8 *)(a1 + 944);
    v44 = v199;
    v45 = a5;
    if (!*(_BYTE *)(a8 + 340))
      *(_BYTE *)(a8 + 340) = 1;
    *(_DWORD *)(a8 + 336) = v43;
  }
  else
  {
    v44 = v199;
    v45 = a5;
    if (*(_BYTE *)(a8 + 340))
      *(_BYTE *)(a8 + 340) = 0;
  }
  *(_BYTE *)(a8 + 344) = *(_BYTE *)(a1 + 854);
  *(_BYTE *)(a8 + 345) = *(_BYTE *)(v41 + 784);
  *(_BYTE *)(a8 + 368) = *(_BYTE *)(a1 + 826);
  *(_BYTE *)(a8 + 369) = v45;
  v46 = *(_QWORD *)(a1 + 40);
  if (v46)
    v47 = *(_QWORD *)(v46 + 8);
  else
    v47 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 1584))(v47);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 720))(v47);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 1592))(v47);
  *(_BYTE *)(a8 + 370) = v48;
  v49 = *(_QWORD *)(a1 + 40);
  if (v49)
    v50 = *(_QWORD *)(v49 + 8);
  else
    v50 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 1584))(v50);
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 728))(v50);
  v52 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 1592))(v50);
  *(_BYTE *)(a8 + 371) = v51;
  *(_BYTE *)(a8 + 372) = *(_BYTE *)(a1 + 1005);
  v53 = *(__int128 **)(a1 + 32);
  *(_QWORD *)(a8 + 376) = *(_QWORD *)((char *)v53 + 2116);
  *(_OWORD *)(a8 + 384) = *(_OWORD *)(a1 + 1008);
  v53 = (__int128 *)((char *)v53 + 2056);
  v55 = v53[1];
  v54 = v53[2];
  v56 = *v53;
  *(_OWORD *)(a8 + 449) = *(__int128 *)((char *)v53 + 41);
  *(_OWORD *)(a8 + 424) = v55;
  *(_OWORD *)(a8 + 440) = v54;
  *(_OWORD *)(a8 + 408) = v56;
  v57 = (WebCore *)WebCore::screenSize(v52);
  *(_DWORD *)(a8 + 468) = v58;
  *(_DWORD *)(a8 + 472) = v59;
  v60 = (WebCore *)WebCore::availableScreenSize(v57);
  *(_DWORD *)(a8 + 476) = v61;
  *(_DWORD *)(a8 + 480) = v62;
  v63 = (WebCore *)WebCore::overrideScreenSize(v60);
  *(_DWORD *)(a8 + 484) = v64;
  *(_DWORD *)(a8 + 488) = v65;
  v66 = (WebCore *)WebCore::overrideAvailableScreenSize(v63);
  *(_DWORD *)(a8 + 492) = v67;
  *(_DWORD *)(a8 + 496) = v68;
  WebCore::screenSize(v66);
  *(_DWORD *)(a8 + 500) = v69;
  v70 = *(_QWORD *)(a1 + 40);
  if (v70)
    v71 = *(_QWORD *)(v70 + 8);
  else
    v71 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 1584))(v71);
  (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t))(*(_QWORD *)v71 + 1048))(&v201, v71);
  v73 = *(unsigned int *)(a8 + 364);
  if ((_DWORD)v73)
    WTF::VectorDestructor<true,WTF::String>::destruct(*v44, (WTF::StringImpl *)((char *)*v44 + 8 * v73));
  v74 = *v44;
  if (*v44)
  {
    *(_QWORD *)(a8 + 352) = 0;
    *(_DWORD *)(a8 + 360) = 0;
    WTF::fastFree(v74, v72);
  }
  *(_QWORD *)(a8 + 352) = v201;
  v75 = v202;
  v201 = 0;
  v202 = 0;
  *(_QWORD *)(a8 + 360) = v75;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201, v72);
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 1592))(v71);
  *(_DWORD *)(a8 + 504) = *(_DWORD *)(a1 + 396);
  v77 = *(_QWORD *)(a1 + 32);
  v76 = *(_QWORD *)(a1 + 40);
  v78 = *(_WORD *)(v77 + 2568);
  *(_BYTE *)(a8 + 510) = *(_BYTE *)(v77 + 2570);
  *(_WORD *)(a8 + 508) = v78;
  *(_BYTE *)(a8 + 511) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 168);
  if (v76)
    v79 = *(_QWORD *)(v76 + 8);
  else
    v79 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 1584))(v79);
  (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t))(*(_QWORD *)v79 + 1136))(&v201, v79);
  WebCore::Color::operator=();
  if (((unint64_t)v201 & 0x8000000000000) != 0)
  {
    v186 = (unsigned int *)((unint64_t)v201 & 0xFFFFFFFFFFFFLL);
    do
    {
      v187 = __ldaxr(v186);
      v188 = v187 - 1;
    }
    while (__stlxr(v188, v186));
    if (!v188)
    {
      atomic_store(1u, v186);
      WTF::fastFree((WTF *)v186, v80);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 1592))(v79);
  *(_BYTE *)(a8 + 528) = *(_BYTE *)(a1 + 832);
  v82 = *(_QWORD *)(a1 + 48);
  v209 = 0;
  v210 = 0;
  if (*(_BYTE *)(v82 + 264))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v201, v82 + 248);
  }
  else
  {
    v201 = 0;
    v210 = 0;
    v202 = 0;
  }
  v83 = (WTF::StringImpl **)(v196 + 304);
  v84 = *(unsigned int *)(a8 + 548);
  if ((_DWORD)v84)
    WTF::VectorDestructor<true,WTF::String>::destruct(*v83, (WTF::StringImpl *)((char *)*v83 + 8 * v84));
  v85 = *v83;
  if (*v83)
  {
    *(_QWORD *)(a8 + 536) = 0;
    *(_DWORD *)(a8 + 544) = 0;
    WTF::fastFree(v85, v81);
  }
  *(_QWORD *)(a8 + 536) = v201;
  v86 = v202;
  v201 = 0;
  v202 = 0;
  *(_QWORD *)(a8 + 544) = v86;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201, v81);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v209, v87);
  *(_BYTE *)(a8 + 584) = *(_BYTE *)(a1 + 892);
  v88 = *(_QWORD *)(a1 + 40);
  if (v88)
    v89 = *(_QWORD *)(v88 + 8);
  else
    v89 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v89 + 1584))(v89);
  *(_BYTE *)(a8 + 585) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 1624))(v89);
  (*(void (**)(uint64_t))(*(_QWORD *)v89 + 1592))(v89);
  *(_WORD *)(a8 + 586) = *(_WORD *)(*(_QWORD *)(a1 + 32) + 904);
  WTF::String::operator=((WTF::StringImpl **)(v196 + 360), (WTF::StringImpl *)(a1 + 344));
  *(_BYTE *)(a8 + 1188) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 488);
  *(_BYTE *)(v196 + 376) = *(_BYTE *)(a1 + 584);
  *(_QWORD *)(v196 + 368) = *(_QWORD *)(a1 + 576);
  v90 = *(_QWORD **)(a1 + 1056);
  v91 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v90);
  v93 = v91;
  v95 = v94;
  if (v90)
    v96 = (WTF::StringImpl **)&v90[2 * *((unsigned int *)v90 - 1)];
  else
    v96 = 0;
  if (v96 == v91)
    goto LABEL_86;
  v97 = (uint64_t *)(v196 + 384);
  v200 = v96;
  do
  {
    v98 = *((_QWORD *)v93[1] + 2);
    v99 = *v97;
    if (*v97
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v97, 0), (v99 = *v97) != 0))
    {
      v100 = *(_DWORD *)(v99 - 8);
    }
    else
    {
      v100 = 0;
    }
    v101 = *((_DWORD *)*v93 + 4);
    if (v101 >= 0x100)
      v102 = v101 >> 8;
    else
      v102 = WTF::StringImpl::hashSlowCase(*v93);
    v103 = 0;
    for (i = 1; ; ++i)
    {
      v105 = v102 & v100;
      v106 = v99 + 16 * v105;
      v107 = *(WTF **)v106;
      if (*(_QWORD *)v106 == -1)
      {
        v103 = (_QWORD *)(v99 + 16 * v105);
        goto LABEL_65;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, *v93, v92))
      {
        *(_QWORD *)(v99 + 16 * v105 + 8) = v98;
        v114 = v200;
        goto LABEL_75;
      }
LABEL_65:
      v102 = i + v105;
    }
    if (v103)
    {
      *v103 = 0;
      v103[1] = 0;
      --*(_DWORD *)(*v97 - 16);
      v106 = (uint64_t)v103;
    }
    WTF::String::operator=((WTF::StringImpl **)v106, (WTF::StringImpl *)v93);
    *(_QWORD *)(v106 + 8) = v98;
    v108 = *v97;
    if (*v97)
      v109 = *(_DWORD *)(v108 - 12) + 1;
    else
      v109 = 1;
    v114 = v200;
    *(_DWORD *)(v108 - 12) = v109;
    v110 = *v97;
    if (*v97)
      v111 = *(_DWORD *)(v110 - 12);
    else
      v111 = 0;
    v112 = (*(_DWORD *)(v110 - 16) + v111);
    v113 = *(unsigned int *)(v110 - 4);
    if (v113 <= 0x400)
    {
      if (3 * v113 > 4 * v112)
        goto LABEL_75;
      goto LABEL_74;
    }
    if (v113 <= 2 * v112)
LABEL_74:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v97, v106);
LABEL_75:
    while (1)
    {
      v93 += 2;
      if (v93 == v95)
        break;
      if ((unint64_t)*v93 + 1 > 1)
        goto LABEL_79;
    }
    v93 = v95;
LABEL_79:
    ;
  }
  while (v93 != v114);
LABEL_86:
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  v201 = 0;
  v202 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v201, (uint64_t **)&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set);
  v116 = *(unsigned int *)(a8 + 636);
  if ((_DWORD)v116)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a8 + 624), (WTF::StringImpl *)(*(_QWORD *)(a8 + 624) + 8 * v116));
  v117 = *(WTF **)(a8 + 624);
  if (v117)
  {
    *(_QWORD *)(a8 + 624) = 0;
    *(_DWORD *)(a8 + 632) = 0;
    WTF::fastFree(v117, v115);
  }
  *(_QWORD *)(a8 + 624) = v201;
  v118 = v202;
  v201 = 0;
  v202 = 0;
  *(_QWORD *)(a8 + 632) = v118;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201, v115);
  v120 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 913) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v120 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, v119);
  v122 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 914) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v122 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, v121);
  v123 = *(_QWORD *)(*(_QWORD *)(v198 + 48) + 288);
  if (v123)
  {
    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)&v201, v123 + 16);
    LOBYTE(v123) = 1;
  }
  else
  {
    LOBYTE(v201) = 0;
  }
  v208 = v123;
  std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>((WebCore::ApplicationManifest *)(a8 + 640), (uint64_t)&v201);
  if (v208)
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&v201, v124);
  *(_BYTE *)(a8 + 912) = *(_BYTE *)(v198 + 1116);
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(v196 + 816), *(_QWORD *)(v198 + 32) + 88);
  WTF::String::operator=((WTF::StringImpl **)(v196 + 848), (WTF::StringImpl *)(v198 + 1200));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a8 + 1088), v198 + 1208);
  API::PageConfiguration::maskedURLSchemes(*(uint64_t **)(v198 + 48), (uint64_t *)&v201);
  v126 = v201;
  v201 = 0;
  v127 = *(WTF::StringImpl ***)(a8 + 1104);
  *(_QWORD *)(a8 + 1104) = v126;
  if (v127)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v127, v125);
    if (v201)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v201, v189);
  }
  v128 = *(_QWORD *)(v198 + 48);
  *(_BYTE *)(a8 + 1112) = *(_BYTE *)(v128 + 329);
  std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)(v196 + 888), v128 + 352);
  v129 = *(_QWORD *)(v198 + 48);
  *(_BYTE *)(a8 + 1113) = *(_BYTE *)(v129 + 344);
  *(_BYTE *)(a8 + 1158) = *(_BYTE *)(v129 + 330);
  *(_BYTE *)(a8 + 346) = *(_QWORD *)(v198 + 136) != 0;
  v130 = *(_DWORD *)(v129 + 224);
  if (*(unsigned __int8 *)(a8 + 1156) == *(_WORD *)(v129 + 228))
  {
    if (*(_BYTE *)(a8 + 1156))
      *(_DWORD *)(a8 + 1152) = v130;
  }
  else if (*(_BYTE *)(a8 + 1156))
  {
    *(_BYTE *)(a8 + 1156) = 0;
  }
  else
  {
    *(_DWORD *)(a8 + 1152) = v130;
    *(_BYTE *)(a8 + 1156) = 1;
  }
  v131 = *(unsigned int **)(v198 + 232);
  if (*(_QWORD *)a6 && *(_QWORD *)(*(_QWORD *)a6 + 144))
    v131 = *(unsigned int **)(*(_QWORD *)a6 + 144);
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)v194 + 640, v131, (uint64_t)&v201);
  WebKit::WebUserContentControllerProxy::addProcess((WebKit::WebUserContentControllerProxy *)v131, v194);
  WebKit::WebUserContentControllerProxy::parameters((WebKit::WebUserContentControllerProxy *)v131, v132, (uint64_t)&v201);
  WebKit::UserContentControllerParameters::operator=(v192, (uint64_t)&v201);
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v207, v133);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v206, v134);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v205, v135);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v204, v136);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v202, v137);
  v139 = *(_QWORD *)(v198 + 240);
  if (v139)
  {
    WebKit::WebExtensionController::parameters(v139, (uint64_t)&v201);
    std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(a8 + 1008, &v201);
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v203, v140);
  }
  v141 = *(_QWORD *)(v198 + 248);
  if (v141)
  {
    v142 = *(_QWORD *)(v141 + 8);
    if (v142)
    {
      WebKit::WebExtensionController::parameters(v142 - 16, (uint64_t)&v201);
      std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(a8 + 1008, &v201);
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v203, v143);
    }
  }
  v144 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1168) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v144 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v138);
  v146 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1169) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v146 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v145);
  v148 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1170) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v148 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v147);
  v150 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1171) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v150 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v149);
  v152 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1174) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v152 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v151);
  *(_BYTE *)(a8 + 1175) = WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled((WebKit::WebPageProxy *)v198);
  v154 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1176) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v154 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v153);
  v156 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1177) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v156 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v155);
  v158 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1179) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v158 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v157);
  v160 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1178) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v160 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v159);
  v162 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v198 + 208) + 512) + 8);
  if (v162)
    v163 = v162 - 16;
  else
    v163 = 0;
  *(_BYTE *)(a8 + 1172) = *(_BYTE *)(*(_QWORD *)(v163 + 48) + 78);
  v164 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl;
  }
  *(_BYTE *)(a8 + 1173) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v164 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key, v161);
  *(_BYTE *)(a8 + 1180) = *(_BYTE *)(v198 + 1261);
  *(_BYTE *)(a8 + 1181) = *(_BYTE *)(v198 + 1288);
  *(_BYTE *)(a8 + 1183) = *(_BYTE *)(*(_QWORD *)(v198 + 48) + 476);
  *(_BYTE *)(a8 + 1182) = *(_BYTE *)(v198 + 1264);
  v166 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebKit *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v166 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, v165);
  if ((_DWORD)BoolValueForKey)
  {
    v168 = v198;
    v169 = *(_BYTE *)(*(_QWORD *)(v198 + 48) + 387) != 0;
  }
  else
  {
    v169 = 0;
    v168 = v198;
  }
  *(_BYTE *)(a8 + 1184) = v169;
  *(_BYTE *)(a8 + 1185) = WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(BoolValueForKey);
  *(_BYTE *)(a8 + 1186) = objc_msgSend(*(id *)(v168 + 1312), "isVisible");
  v170 = *(_QWORD *)(v168 + 40);
  if (v170)
    v171 = *(_QWORD *)(v170 + 8);
  else
    v171 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v171 + 1584))(v171);
  *(_BYTE *)(a8 + 1187) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 1464))(v171);
  (*(void (**)(uint64_t))(*(_QWORD *)v171 + 1592))(v171);
  {
    qword_1ECE73518 = 0;
    WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
    unk_1ECE73508 = 0u;
  }
  v172 = (WebKit::WebPageProxy *)WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v196 + 1216, (uint64_t *)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance+ 1);
  WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v172, v173);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a8 + 1464, &qword_1ECE72D80);
  v175 = *(_QWORD *)(v198 + 224);
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v176 = *(unsigned __int8 *)(a3 + 32);
  v177 = (WebKit::WebPreferencesStore *)(v175 + 40);
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v175 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v174))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v178) & 1) == 0)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (!WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v179))goto LABEL_177;
  }
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v179) & 1) == 0)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (!WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v180))goto LABEL_177;
  }
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, v180))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v181))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v182))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v184 = WebKit::WebPreferencesStore::getBoolValueForKey(v177, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v183);
  if (v176 || (v184 & 1) == 0)
  {
LABEL_177:
    WebKit::SandboxExtension::createHandleForMachBootstrapExtension((const char ***)&v201);
    v185 = (const char **)v201;
    v201 = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v196 + 1248), v185);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v201);
  }
}

uint64_t PAL::HysteresisActivity::cancel(PAL::HysteresisActivity *this)
{
  WTF::RunLoop::TimerBase *v1;
  uint64_t result;

  *((_BYTE *)this + 48) = 0;
  v1 = (PAL::HysteresisActivity *)((char *)this + 16);
  result = WTF::RunLoop::TimerBase::isActive((PAL::HysteresisActivity *)((char *)this + 16));
  if ((_DWORD)result)
    return WTF::RunLoop::TimerBase::stop(v1);
  return result;
}

uint64_t WebKit::WebPageProxy::tryClose(WebKit::WebPageProxy *this)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  _BYTE buf[22];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728))
    return 1;
  v3 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v4 + 744);
    v6 = *(_QWORD *)(v4 + 1896);
    v7 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    v22 = 2048;
    v23 = v6;
    v24 = 1024;
    v25 = v7;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryClose:", buf, 0x26u);
  }
  if (!*(_DWORD *)(*((_QWORD *)this + 26) + 656))
    return 1;
  WTF::RunLoop::TimerBase::start();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)this + 26);
  v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2471;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v20 = (IPC::Encoder *)v12;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E34D4668;
  v13[1] = this;
  v13[2] = v8;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v13;
  *(_QWORD *)&buf[8] = v14;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v20, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    v16 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v15);
    WTF::fastFree(v18, v19);
  }
  return 0;
}

uint64_t WebKit::WebPageProxy::closePage(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 729))
  {
    v1 = this;
    v2 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v3 + 744);
      v5 = *(_QWORD *)(v3 + 1896);
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 136);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v9 = 134218752;
      v10 = v1;
      v11 = 2048;
      v12 = v4;
      v13 = 2048;
      v14 = v5;
      v15 = 1024;
      v16 = v6;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::closePage:", (uint8_t *)&v9, 0x26u);
    }
    v7 = *(_QWORD *)(v1 + 40);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 344))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 104) + 64))(*(_QWORD *)(v1 + 104), v1);
  }
  return this;
}

void WebKit::WebPageProxy::loadRequestWithNavigationShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, const void *a7, int a8, __int16 a9, uint64_t a10, uint64_t a11, char a12)
{
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WebCore::ResourceRequest *v33;
  WebCore::PublicSuffixStore *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::RefCountedBase *v45;
  WTF::RefCountedBase *v46;
  const void *v47;
  CFTypeRef v48;
  CFTypeRef *v49;
  uint64_t v50;
  CFTypeRef *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  void *v55;
  int v56;
  CFTypeRef v57;
  WebKit::WebProcessProxy *v58;
  WebKit::WebProcessProxy *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void *v63;
  WebKit::WebProcessProxy *v64;
  WTF::StringImpl *v65;
  const WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WebKit::WebProcessProxy **v70;
  CFTypeRef *v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  _QWORD v76[2];
  WTF::StringImpl *v77[3];
  char v78;
  char v79;
  CFTypeRef v80;
  _BYTE buf[24];
  __int128 v82;
  _BYTE v83[152];
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::RefCountedBase *v86;
  uint64_t v87;
  char v88;
  CFTypeRef cf;
  const char **v90[8];
  _BYTE v91[120];
  __int16 v92;
  _QWORD v93[2];
  WTF::StringImpl *v94;
  int v95;
  _BYTE v96[56];
  __int16 v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  __int16 v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v17 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *((_QWORD *)a1 + 4);
    v19 = *(_QWORD *)(v18 + 744);
    v20 = *(_QWORD *)(v18 + 1896);
    v21 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
    if (v21)
      LODWORD(v21) = *(_DWORD *)(v21 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v82 = v20;
    WORD4(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 10) = v21;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadRequestWithNavigationShared:", buf, 0x26u);
  }
  v70 = a2;
  v22 = *((_QWORD *)a1 + 4);
  v23 = *(_QWORD *)(v22 + 960);
  if (v23)
    CFRetain(*(CFTypeRef *)(v23 + 8));
  v76[0] = v23;
  v76[1] = v22 + 944;
  ++*(_DWORD *)(v22 + 1316);
  v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a5);
  v25 = *(WTF::StringImpl **)v24;
  if (*(_QWORD *)v24)
    *(_DWORD *)v25 += 2;
  v73 = v25;
  v26 = *(_OWORD *)(v24 + 24);
  v74 = *(_OWORD *)(v24 + 8);
  v75 = v26;
  if (!a8)
  {
    v27 = *((_QWORD *)a1 + 4);
    *(_BYTE *)(v22 + 1312) = 1;
    v28 = *(_QWORD *)(a4 + 16);
    if (v25)
      *(_DWORD *)v25 += 2;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(_QWORD *)(v27 + 1144) = v28;
    v30 = *(WTF::StringImpl **)(v27 + 1152);
    *(_QWORD *)(v27 + 1152) = v25;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v27 + 1232), (WTF::StringImpl *)buf);
    *(_OWORD *)(v27 + 1240) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v27 + 1256) = v82;
    v32 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  BYTE8(v82) = 0;
  memset(buf, 0, 17);
  v33 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v83);
  v91[112] = 0;
  v92 = 0;
  v95 = 0;
  v96[0] = 0;
  v96[48] = 0;
  v97 = 0;
  LOBYTE(v98) = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  LOBYTE(v104) = 0;
  v105 = 0;
  memset(v90, 0, sizeof(v90));
  v91[0] = 0;
  v94 = 0;
  memset(v93, 0, 11);
  v34 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(v33);
  WebCore::PublicSuffixStore::publicSuffix(v34, (const WTF::URL *)&v73);
  v36 = v77[0];
  v77[0] = 0;
  v37 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = v36;
  if (v37)
  {
    v38 = *(_DWORD *)v37 - 2;
    if (*(_DWORD *)v37 != 2)
      goto LABEL_24;
    WTF::StringImpl::destroy(v37, v35);
    v37 = v77[0];
    v77[0] = 0;
    if (!v37)
      goto LABEL_25;
    v38 = *(_DWORD *)v37 - 2;
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v39);
    else
LABEL_24:
      *(_DWORD *)v37 = v38;
  }
LABEL_25:
  *(_QWORD *)&buf[8] = *(_QWORD *)(a4 + 16);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v83, a5);
  v41 = *(WTF::StringImpl **)(a5 + 152);
  *(_QWORD *)(a5 + 152) = 0;
  v42 = v84;
  v84 = v41;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = *(WTF::StringImpl **)(a5 + 160);
  *(_QWORD *)(a5 + 160) = 0;
  v44 = v85;
  v85 = v43;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v40);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *(WTF::RefCountedBase **)(a5 + 168);
  *(_QWORD *)(a5 + 168) = 0;
  v46 = v86;
  v86 = v45;
  if (v46)
    WTF::RefCounted<WebCore::FormData>::deref(v46);
  v87 = *(_QWORD *)(a5 + 176);
  v88 = *(_BYTE *)(a5 + 184);
  v47 = *(const void **)(a5 + 192);
  *(_QWORD *)(a5 + 192) = 0;
  v48 = cf;
  cf = v47;
  if (v48)
    CFRelease(v48);
  LOBYTE(v92) = a6;
  v77[0] = (WTF::StringImpl *)&off_1E34D7358;
  WebKit::UserData::transform(a7, (uint64_t)v77, (WebKit **)&v72);
  v49 = v72;
  if (v72)
  {
    CFRetain(v72[1]);
    CFRetain(v49[1]);
  }
  v50 = v93[0];
  v93[0] = v49;
  if (v50)
    CFRelease(*(CFTypeRef *)(v50 + 8));
  if (v49)
    CFRelease(v49[1]);
  v51 = v72;
  v72 = 0;
  if (v51)
    CFRelease(v51[1]);
  HIBYTE(v92) = a8;
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)v91, a10);
  LOWORD(v93[1]) = *(_WORD *)(a4 + 976);
  v53 = *(WTF::StringImpl **)(a4 + 984);
  if (v53)
    *(_DWORD *)v53 += 2;
  v54 = v94;
  v94 = v53;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v52);
    else
      *(_DWORD *)v54 -= 2;
  }
  v95 = *(_DWORD *)(a4 + 992);
  LOBYTE(v77[0]) = 0;
  v79 = 0;
  if (*(_BYTE *)(a4 + 1048))
  {
    std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>((uint64_t)v77, a4 + 1000);
    v79 = 1;
  }
  std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v96, (uint64_t)v77);
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v55);
  v97 = a9;
  v98 = a11;
  v99 = a12;
  v56 = *(_DWORD *)(a4 + 3480);
  v104 = v56;
  v105 = BYTE2(v56);
  v103 = *(_BYTE *)(a4 + 856);
  WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(a1, *v70, (const WTF::URL *)&v73, (const WTF::URL *)(*((_QWORD *)a1 + 4) + 1064), v90, 1);
  WebKit::WebPageProxy::prepareToLoadWebPage((uint64_t)a1, (uint64_t)buf);
  if (!a8)
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)v77, (const WebCore::ResourceRequest *)v83);
    WebKit::WebPageProxy::preconnectTo((uint64_t)a1, (WebCore::ResourceRequestBase *)v77);
    v57 = v80;
    v80 = 0;
    if (v57)
      CFRelease(v57);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v77);
  }
  *(_BYTE *)(a4 + 3464) = 1;
  v58 = *v70;
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)v58);
  v59 = *v70;
  v60 = *((_QWORD *)*v70 + 17);
  if (v60 && *(_BYTE *)(v60 + 104) && (v61 = WTF::URL::protocolIs(), v59 = *v70, (v61 & 1) != 0))
  {
    v62 = *((_QWORD *)a1 + 4);
    v77[0] = (WTF::StringImpl *)buf;
    v77[1] = (WTF::StringImpl *)(v62 + 1064);
    v77[2] = (WTF::StringImpl *)(v62 + 744);
    v78 = 1;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>((uint64_t)v59, (uint64_t)v77, a3);
  }
  else
  {
    v77[0] = (WTF::StringImpl *)buf;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>((uint64_t)v59, (uint64_t *)v77, a3, 0);
  }
  v64 = *v70;
  if (*((_BYTE *)*v70 + 169))
  {
    WebKit::ResponsivenessTimer::start((uint64_t)v64 + 56);
  }
  else if (!*((_BYTE *)v64 + 185))
  {
    *((_WORD *)v64 + 92) = 256;
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v63);
  v67 = v73;
  v73 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v65);
    else
      *(_DWORD *)v67 -= 2;
  }
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v76, (uint64_t)v65, v66);
}

void WebKit::WebPageProxy::loadFile(WebKit::WebPageProxy *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, API::Object *a4@<X4>, char a5@<W3>, _QWORD *a6@<X8>)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WebCore::ResourceRequest *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::RefCountedBase *v61;
  WTF::RefCountedBase *v62;
  CFTypeRef v63;
  CFTypeRef v64;
  WebCore::PublicSuffixStore *v65;
  CFTypeRef *v66;
  uint64_t v67;
  CFTypeRef *v68;
  WebCore::PublicSuffixStore *v69;
  const WTF::URL *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  CFTypeRef v82;
  uint64_t v83;
  const WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87[3];
  char v88;
  CFTypeRef *v89;
  WTF::StringImpl *v90[19];
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::RefCountedBase *v93;
  uint64_t v94;
  char v95;
  CFTypeRef v96;
  _QWORD v97[2];
  uint64_t v98;
  WTF::StringImpl *v99;
  __int128 v100;
  __int128 v101;
  WTF::StringImpl *v102[5];
  WTF::StringImpl *v103;
  uint64_t v104;
  char v105;
  char v106;
  _BYTE v107[152];
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::RefCountedBase *v110;
  uint64_t v111;
  char v112;
  CFTypeRef v113;
  const char **v114[8];
  char v115;
  char v116;
  __int16 v117;
  _QWORD v118[3];
  int v119;
  char v120;
  char v121;
  __int16 v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  _BYTE buf[12];
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  int v137;
  CFTypeRef cf;
  char v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *((_QWORD *)this + 4);
    v14 = *(_QWORD *)(v13 + 744);
    v15 = *(_QWORD *)(v13 + 1896);
    v16 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v132 = 2048;
    v133 = v14;
    v134 = 2048;
    v135 = v15;
    v136 = 1024;
    v137 = v16;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile:", buf, 0x26u);
  }
  if (*((_BYTE *)this + 729))
  {
    v17 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *((_QWORD *)this + 4);
      v19 = *(_QWORD *)(v18 + 744);
      v20 = *(_QWORD *)(v18 + 1896);
      v21 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      v132 = 2048;
      v133 = v19;
      v134 = 2048;
      v135 = v20;
      v136 = 1024;
      v137 = v21;
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: page is closed", buf, 0x26u);
    }
    *a6 = 0;
    return;
  }
  if (!*((_BYTE *)this + 728))
  {
    *(_QWORD *)buf = 0;
    WebKit::WebPageProxy::launchProcess((uint64_t)this, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
    v23 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  WTF::URL::URL((uint64_t)v102, a2);
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    v26 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *((_QWORD *)this + 4);
      v29 = *(_QWORD *)(v28 + 744);
      v30 = *(_QWORD *)(v28 + 1896);
      v31 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v31)
        LODWORD(v31) = *(_DWORD *)(v31 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      v132 = 2048;
      v133 = v29;
      v134 = 2048;
      v135 = v30;
      v136 = 1024;
      v137 = v31;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: file is not local", buf, 0x26u);
    }
    *a6 = 0;
    goto LABEL_104;
  }
  v99 = 0;
  WTF::URL::invalidate((WTF::URL *)&v99);
  if (!*a3)
  {
    v103 = 0;
    WTF::URL::invalidate((WTF::URL *)&v103);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v90[0] = *(WTF::StringImpl **)buf;
    MEMORY[0x19AEABB24](buf, &v103, v90, 0);
    WTF::URL::operator=((uint64_t)&v99, (WTF::StringImpl *)buf);
    v33 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v39 = v90[0];
    v90[0] = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v32);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v103;
    v103 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v32);
      else
        *(_DWORD *)v40 -= 2;
    }
    goto LABEL_45;
  }
  WTF::URL::URL((uint64_t)buf, a3);
  WTF::URL::operator=((uint64_t)&v99, (WTF::StringImpl *)buf);
  v25 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
LABEL_45:
    v41 = *((_QWORD *)this + 20);
    v42 = *(_QWORD *)(*((_QWORD *)this + 26) + 176);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const WTF::URL *)v102, 0);
    cf = 0;
    WebKit::WebBackForwardList::protectedCurrentItem(*((_QWORD **)this + 74), &v103);
    WebKit::WebNavigationState::createLoadRequestNavigation(&v98, v41, v42, (uint64_t)buf, (uint64_t *)&v103);
    if (v103)
      CFRelease(*((CFTypeRef *)v103 + 1));
    v43 = cf;
    cf = 0;
    if (v43)
      CFRelease(v43);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    v44 = v98;
    v45 = v98 + 512;
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)buf, (const WebKit::NavigationActionData *)(v98 + 512));
    v139 = 1;
    WebKit::NavigationActionData::operator=(v45, (uint64_t)buf);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation(this))
    {
      v47 = *((_QWORD *)this + 26) + 200;
      v48 = WTF::fastMalloc((WTF *)0x28);
      v103 = (WTF::StringImpl *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v48, v47, "Client navigation", 18, 1, 0);
      LODWORD(v104) = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v44 + 3448, (uint64_t)&v103);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v44 + 3408));
      if ((_DWORD)v104 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34D4170[v104])(v90, &v103);
    }
    v49 = *((_QWORD *)this + 4);
    v50 = *(_QWORD *)(v49 + 960);
    v51 = v49;
    if (v50)
    {
      CFRetain(*(CFTypeRef *)(v50 + 8));
      v51 = *((_QWORD *)this + 4);
    }
    v97[0] = v50;
    v97[1] = v49 + 944;
    ++*(_DWORD *)(v49 + 1316);
    *(_BYTE *)(v49 + 1312) = 1;
    v52 = *(_QWORD *)(v44 + 16);
    v53 = *a2;
    if (*a2)
      *(_DWORD *)v53 += 2;
    *(_QWORD *)(v51 + 1144) = v52;
    v54 = *(WTF::StringImpl **)(v51 + 1152);
    *(_QWORD *)(v51 + 1152) = v53;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v46);
      else
        *(_DWORD *)v54 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v51 + 1232), (WTF::StringImpl *)&v99);
    *(_OWORD *)(v51 + 1240) = v100;
    *(_OWORD *)(v51 + 1256) = v101;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v90, (const WTF::URL *)v102, 0);
    v96 = 0;
    WebCore::ResourceRequestBase::setIsAppInitiated((WebCore::ResourceRequestBase *)v90);
    *((_BYTE *)this + 1288) = a5;
    v106 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v55 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v107);
    v116 = 0;
    v117 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    memset(v114, 0, sizeof(v114));
    v115 = 0;
    *(_DWORD *)((char *)v118 + 7) = 0;
    v118[2] = 0;
    v118[0] = 0;
    v104 = *(_QWORD *)(v44 + 16);
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v55, (uint64_t)v90);
    v57 = v91;
    v91 = 0;
    v58 = v108;
    v108 = v57;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v56);
      else
        *(_DWORD *)v58 -= 2;
    }
    v59 = v92;
    v92 = 0;
    v60 = v109;
    v109 = v59;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v56);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = v93;
    v93 = 0;
    v62 = v110;
    v110 = v61;
    if (v62)
      WTF::RefCounted<WebCore::FormData>::deref(v62);
    v111 = v94;
    v112 = v95;
    v63 = v96;
    v96 = 0;
    v64 = v113;
    v113 = v63;
    if (v64)
      CFRelease(v64);
    LOBYTE(v117) = 0;
    v87[0] = (WTF::StringImpl *)&off_1E34D7358;
    v65 = (WebCore::PublicSuffixStore *)WebKit::UserData::transform(a4, (uint64_t)v87, (WebKit **)&v89);
    v66 = v89;
    if (v89)
    {
      CFRetain(v89[1]);
      v65 = (WebCore::PublicSuffixStore *)CFRetain(v66[1]);
    }
    v67 = v118[0];
    v118[0] = v66;
    if (v67)
      CFRelease(*(CFTypeRef *)(v67 + 8));
    if (v66)
      CFRelease(v66[1]);
    v68 = v89;
    v89 = 0;
    if (v68)
      CFRelease(v68[1]);
    v69 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(v65);
    v70 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v107);
    WebCore::PublicSuffixStore::publicSuffix(v69, v70);
    v72 = v87[0];
    v87[0] = 0;
    v73 = v103;
    v103 = v72;
    if (!v73)
      goto LABEL_85;
    v74 = *(_DWORD *)v73 - 2;
    if (*(_DWORD *)v73 != 2)
      goto LABEL_84;
    WTF::StringImpl::destroy(v73, v71);
    v73 = v87[0];
    v87[0] = 0;
    if (!v73)
      goto LABEL_85;
    v74 = *(_DWORD *)v73 - 2;
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v75);
    else
LABEL_84:
      *(_DWORD *)v73 = v74;
LABEL_85:
    v128 = a5;
    v76 = *((_QWORD *)this + 26);
    v77 = (unsigned int *)(v76 + 16);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
    WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(this, (WebKit::WebProcessProxy *)v76, (const WTF::URL *)v102, (const WTF::URL *)&v99, v114, 0);
    WebKit::WebPageProxy::prepareToLoadWebPage((uint64_t)this, (uint64_t)&v103);
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v76);
    v79 = *(_QWORD *)(v76 + 136);
    if (v79 && *(_BYTE *)(v79 + 104))
    {
      v80 = *((_QWORD *)this + 4);
      v87[0] = (WTF::StringImpl *)&v103;
      v87[1] = (WTF::StringImpl *)&v99;
      v87[2] = (WTF::StringImpl *)(v80 + 744);
      v88 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>(*((_QWORD *)this + 26), (uint64_t)v87, *(_QWORD *)(v80 + 1896));
    }
    else
    {
      v87[0] = (WTF::StringImpl *)&v103;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(*((_QWORD *)this + 26), (uint64_t *)v87, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
    }
    if (*(_BYTE *)(v76 + 169))
    {
      WebKit::ResponsivenessTimer::start(v76 + 56);
    }
    else if (!*(_BYTE *)(v76 + 185))
    {
      *(_WORD *)(v76 + 184) = 256;
    }
    *a6 = v98;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v76 + 16));
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v103, v81);
    v82 = v96;
    v96 = 0;
    if (v82)
      CFRelease(v82);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v90);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v97, v83, v84);
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
    goto LABEL_100;
  }
  v34 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *((_QWORD *)this + 4);
    v36 = *(_QWORD *)(v35 + 744);
    v37 = *(_QWORD *)(v35 + 1896);
    v38 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v38)
      LODWORD(v38) = *(_DWORD *)(v38 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v132 = 2048;
    v133 = v36;
    v134 = 2048;
    v135 = v37;
    v136 = 1024;
    v137 = v38;
    _os_log_impl(&dword_196BCC000, v34, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadFile: resource URL is not local", buf, 0x26u);
  }
  *a6 = 0;
LABEL_100:
  v85 = v99;
  v99 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v27);
    else
      *(_DWORD *)v85 -= 2;
  }
LABEL_104:
  v86 = v102[0];
  v102[0] = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v27);
    else
      *(_DWORD *)v86 -= 2;
  }
}

void WebKit::WebPageProxy::loadData(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, WTF::StringImpl *a4@<X3>, WTF::StringImpl *a5@<X4>, WTF::StringImpl *a6@<X5>, const void *a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>)
{
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  __int16 v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF *v54;
  int v55;
  int v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE buf[12];
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v17 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(v18 + 744);
    v20 = *(_QWORD *)(v18 + 1896);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v21)
      LODWORD(v21) = *(_DWORD *)(v21 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v61 = 2048;
    v62 = v19;
    v63 = 2048;
    v64 = v20;
    v65 = 1024;
    v66 = v21;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadData:", buf, 0x26u);
  }
  v22 = (WebKit *)MEMORY[0x19AEABBCC](*(_QWORD *)a4, "text/html", 9);
  if ((_DWORD)v22 && (WebKit::isFullWebBrowserOrRunningTest(v22) & 1) == 0)
    *(_BYTE *)(a1 + 1261) = 1;
  if (*(_BYTE *)(a1 + 729))
  {
    v23 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(v24 + 744);
      v26 = *(_QWORD *)(v24 + 1896);
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      v28 = a9;
      if (v27)
        LODWORD(v27) = *(_DWORD *)(v27 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      v61 = 2048;
      v62 = v25;
      v63 = 2048;
      v64 = v26;
      v65 = 1024;
      v66 = v27;
      _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadData: page is closed", buf, 0x26u);
    }
    else
    {
      v28 = a9;
    }
    v31 = 0;
LABEL_37:
    *v28 = v31;
    return;
  }
  if (!*(_BYTE *)(a1 + 728))
  {
    *(_QWORD *)buf = 0;
    WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
    v30 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v52 = a5;
  v32 = *(_QWORD *)(a1 + 160);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
  v54 = 0;
  v55 = 0;
  v56 = a3;
  if (!a3)
  {
LABEL_24:
    v28 = a9;
    v38 = WTF::fastMalloc((WTF *)0x38);
    v57 = (WTF *)API::SubstituteData::SubstituteData(v38, (uint64_t *)&v54, (_DWORD **)a4, (_DWORD **)v52, (_DWORD **)a6, (uint64_t)a7, 1);
    v31 = API::Object::newObject(0xDA0uLL, 76);
    v39 = API::Navigation::Navigation(v31, v32, v33, (uint64_t *)&v57);
    v40 = *(_QWORD *)(v39 + 16);
    v58 = v39;
    v59 = v40;
    WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>((uint64_t)buf, (uint64_t *)(v32 + 8), &v59, &v58);
    v41 = v57;
    v57 = 0;
    if (v41)
      std::default_delete<API::SubstituteData>::operator()[abi:sn180100]((int)&v57, v41);
    v42 = v54;
    if (v54)
    {
      v54 = 0;
      v55 = 0;
      WTF::fastFree(v42, v41);
    }
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      v43 = *(_QWORD *)(a1 + 208) + 200;
      v44 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v44, v43, "Client navigation", 18, 1, 0);
      *(_DWORD *)&buf[8] = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v31 + 3448, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v31 + 3408));
      if (*(_DWORD *)&buf[8] != -1)
        ((void (*)(WTF **, _BYTE *))off_1E34D4170[*(unsigned int *)&buf[8]])(&v54, buf);
    }
    v45 = *(unsigned int **)(a1 + 208);
    v46 = v45 + 4;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
    v54 = (WTF *)v45;
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v49 = *(_WORD *)(a1 + 1256);
    buf[0] = 0;
    v67 = 0;
    WebKit::WebPageProxy::loadDataWithNavigationShared(a1, &v54, v48, v31, a2, a3, a4, v52, a6, a7, 0, v51, v49, (uint64_t)buf, a8, 1);
    if (v67)
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v50);
    if (v45)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v45 + 4);
    goto LABEL_37;
  }
  if (!HIDWORD(a3))
  {
    v34 = (WTF *)WTF::fastMalloc((WTF *)a3);
    v55 = a3;
    v54 = v34;
    v35 = a3;
    v36 = (char *)a2;
    do
    {
      v37 = *v36++;
      *(_BYTE *)v34 = v37;
      v34 = (WTF *)((char *)v34 + 1);
      --v35;
    }
    while (v35);
    goto LABEL_24;
  }
  __break(0xC471u);
}

void WebKit::WebPageProxy::loadDataWithNavigationShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl *a7, WTF::StringImpl *a8, WTF::StringImpl *a9, const void *a10, char a11, int a12, __int16 a13, uint64_t a14, char a15, char a16)
{
  NSObject *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  IPC::Encoder *v36;
  IPC::Encoder *v37;
  IPC::Encoder *v38;
  WebKit::WebProcessProxy *v39;
  WebKit::WebProcessProxy *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  WebKit::WebProcessProxy *v47;
  uint64_t v48;
  const WTF::StringImpl *v49;
  _QWORD v54[2];
  _QWORD v55[2];
  char v56;
  IPC::Encoder *v57;
  _BYTE buf[24];
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  _BYTE v64[120];
  __int16 v65;
  IPC::Encoder *v66;
  __int16 v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  __int16 v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v20 = qword_1ECE71320;
  v21 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(v22 + 744);
    v24 = *(_QWORD *)(v22 + 1896);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v25)
      LODWORD(v25) = *(_DWORD *)(v25 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v59 = v24;
    WORD4(v59) = 1024;
    *(_DWORD *)((char *)&v59 + 10) = v25;
    _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadDataWithNavigation", buf, 0x26u);
  }
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(_QWORD *)(v26 + 960);
  v28 = v26;
  if (v27)
  {
    v21 = (WTF *)CFRetain(*(CFTypeRef *)(v27 + 8));
    v28 = *(_QWORD *)(a1 + 32);
  }
  v54[0] = v27;
  v54[1] = v26 + 944;
  ++*(_DWORD *)(v26 + 1316);
  *(_BYTE *)(v26 + 1312) = 1;
  v29 = *(_QWORD *)(a4 + 16);
  v30 = *(_DWORD **)a9;
  if (*(_QWORD *)a9 && v30[1])
  {
    v31 = v28 + 944;
  }
  else
  {
    v30 = *(_DWORD **)WTF::aboutBlankURL(v21);
    v31 = v28 + 944;
    if (!v30)
      goto LABEL_12;
  }
  *v30 += 2;
LABEL_12:
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  v33 = *(WTF::StringImpl **)(v31 + 208);
  *(_QWORD *)(v31 + 200) = v29;
  *(_QWORD *)(v31 + 208) = v30;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::String::operator=((WTF::StringImpl **)(v31 + 288), (WTF::StringImpl *)buf);
  *(_OWORD *)(v31 + 296) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v31 + 312) = v59;
  v35 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  BYTE8(v59) = 0;
  memset(buf, 0, 17);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v60);
  v64[112] = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v61 = 0u;
  v62 = 0u;
  v64[0] = 0;
  memset(v63, 0, sizeof(v63));
  v68 = a16;
  *(_QWORD *)&buf[8] = *(_QWORD *)(a4 + 16);
  *((_QWORD *)&v61 + 1) = a5;
  *(_QWORD *)&v62 = a6;
  WTF::String::operator=((WTF::StringImpl **)&v62 + 1, a7);
  WTF::String::operator=((WTF::StringImpl **)v63, a8);
  WTF::String::operator=((WTF::StringImpl **)v63 + 1, a9);
  HIBYTE(v65) = a11;
  v55[0] = &off_1E34D7358;
  WebKit::UserData::transform(a10, (uint64_t)v55, &v57);
  v36 = v57;
  if (v57)
  {
    CFRetain(*((CFTypeRef *)v57 + 1));
    CFRetain(*((CFTypeRef *)v36 + 1));
  }
  v37 = v66;
  v66 = v36;
  if (v37)
    CFRelease(*((CFTypeRef *)v37 + 1));
  if (v36)
    CFRelease(*((CFTypeRef *)v36 + 1));
  v38 = v57;
  v57 = 0;
  if (v38)
    CFRelease(*((CFTypeRef *)v38 + 1));
  std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)v64, a14);
  LOBYTE(v65) = a15;
  v73 = a13;
  v76 = *(_BYTE *)(a1 + 1118);
  WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)buf);
  v39 = *a2;
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)v39);
  WebKit::WebProcessProxy::assumeReadAccessToBaseURL(*a2, (WebKit::WebPageProxy *)a1, (WTF::StringImpl **)a9);
  v40 = *a2;
  v41 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v41 = 2269;
  *(_QWORD *)(v41 + 8) = a3;
  *(_QWORD *)(v41 + 528) = v41 + 16;
  *(_QWORD *)(v41 + 536) = v41 + 16;
  *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v41 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
  v57 = (IPC::Encoder *)v41;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode((IPC::Encoder *)v41, (uint64_t)buf);
  LOBYTE(v55[0]) = 0;
  v56 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v40, &v57, 0, (uint64_t)v55, 1);
  if (v56)
  {
    v43 = v55[0];
    v55[0] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  v44 = v57;
  v57 = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v42);
    WTF::fastFree(v45, v46);
  }
  v47 = *a2;
  if (*((_BYTE *)*a2 + 169))
  {
    WebKit::ResponsivenessTimer::start((uint64_t)v47 + 56);
  }
  else if (!*((_BYTE *)v47 + 185))
  {
    *((_WORD *)v47 + 92) = 256;
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v42);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v54, v48, v49);
}

void WebKit::WebPageProxy::loadSimulatedRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, WTF *a5@<X4>, uint64_t *a6@<X8>)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WebKit *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::URL *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  char *v31;
  char v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF *v38;
  CFTypeRef v39;
  void *v40;
  WTF *v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  const WTF::URL *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::ResourceRequest *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::RefCountedBase *v62;
  WTF::RefCountedBase *v63;
  const void *v64;
  CFTypeRef v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  CFTypeRef v77;
  IPC::Encoder *v78;
  WTF *v79;
  void *v80;
  void *v81;
  WTF::StringImpl *v82;
  const WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t *v85;
  uint64_t v86;
  WTF *v87;
  int v88;
  int v89;
  WTF *v90;
  CFTypeRef v91[2];
  char v92;
  CFTypeRef v93;
  _QWORD v94[3];
  uint64_t v95;
  WTF::StringImpl *v96;
  _BYTE buf[24];
  __int128 v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::RefCountedBase *v102;
  uint64_t v103;
  char v104;
  CFTypeRef v105;
  CFTypeRef cf[2];
  __int128 v107;
  _OWORD v108[2];
  char v109;
  char v110;
  __int16 v111;
  WTF::StringImpl *v112[2];
  WTF::StringImpl *v113;
  int v114;
  char v115;
  char v116;
  __int16 v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 744);
    v15 = *(_QWORD *)(v13 + 1896);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v98 = v15;
    WORD4(v98) = 1024;
    *(_DWORD *)((char *)&v98 + 10) = v16;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadSimulatedRequest:", buf, 0x26u);
  }
  WebKit::WebPageProxy::setLastNavigationWasAppInitiated((WebKit::WebPageProxy *)a1, (WebCore::ResourceRequest *)a2);
  v17 = (_QWORD *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a3);
  v18 = (WebKit *)MEMORY[0x19AEABBCC](*v17, "text/html", 9);
  if ((_DWORD)v18 && (WebKit::isFullWebBrowserOrRunningTest(v18) & 1) == 0)
    *(_BYTE *)(a1 + 1261) = 1;
  if (*(_BYTE *)(a1 + 729))
  {
    v19 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(v20 + 744);
      v22 = *(_QWORD *)(v20 + 1896);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v23)
        LODWORD(v23) = *(_DWORD *)(v23 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v98 = v22;
      WORD4(v98) = 1024;
      *(_DWORD *)((char *)&v98 + 10) = v23;
      _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadSimulatedRequest: page is closed", buf, 0x26u);
    }
    *a6 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 728))
    {
      v24 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v24);
      WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
      v26 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    v27 = *(_QWORD *)(a1 + 160);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
    WebCore::ResourceRequest::ResourceRequest(v91, (const WebCore::ResourceRequest *)a2);
    v87 = 0;
    v88 = 0;
    v89 = (int)a5;
    if (a5)
    {
      if ((unint64_t)a5 >> 32)
      {
        __break(0xC471u);
        return;
      }
      v29 = (WTF *)WTF::fastMalloc(a5);
      v88 = (int)a5;
      v87 = v29;
      v30 = a5;
      v31 = a4;
      do
      {
        v32 = *v31++;
        *(_BYTE *)v29 = v32;
        v29 = (WTF *)((char *)v29 + 1);
        v30 = (WTF *)((char *)v30 - 1);
      }
      while (v30);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (const WebCore::ResourceResponseBase *)a3);
    v33 = *(const void **)(a3 + 240);
    cf[0] = v33;
    if (v33)
      CFRetain(v33);
    LOBYTE(cf[1]) = *(_BYTE *)(a3 + 248);
    v34 = WTF::fastMalloc((WTF *)0x38);
    v90 = (WTF *)API::SubstituteData::SubstituteData(v34, (uint64_t *)&v87, (WebCore::ResourceResponseBase *)buf, 0);
    WebKit::WebBackForwardList::protectedCurrentItem(*(_QWORD **)(a1 + 592), &v86);
    v35 = API::Object::newObject(0xDA0uLL, 76);
    v36 = API::Navigation::Navigation(v35, v27, v28, (uint64_t)v91, (uint64_t *)&v90, &v86);
    v37 = *(WTF::StringImpl **)(v36 + 16);
    v95 = v36;
    v96 = v37;
    WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>((uint64_t)v94, (uint64_t *)(v27 + 8), (uint64_t *)&v96, &v95);
    if (v86)
      CFRelease(*(CFTypeRef *)(v86 + 8));
    v38 = v90;
    v90 = 0;
    if (v38)
      std::default_delete<API::SubstituteData>::operator()[abi:sn180100]((int)&v90, v38);
    v39 = cf[0];
    cf[0] = 0;
    if (v39)
      CFRelease(v39);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v38);
    v41 = v87;
    if (v87)
    {
      v87 = 0;
      v88 = 0;
      WTF::fastFree(v41, v40);
    }
    v85 = a6;
    v42 = v93;
    v93 = 0;
    if (v42)
      CFRelease(v42);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v91);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      v43 = *(_QWORD *)(a1 + 208) + 200;
      v44 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v44, v43, "Client navigation", 18, 1, 0);
      *(_DWORD *)&buf[8] = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v35 + 3448, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v35 + 3408));
      if (*(_DWORD *)&buf[8] != -1)
        ((void (*)(CFTypeRef *, _BYTE *))off_1E34D4170[*(unsigned int *)&buf[8]])(v91, buf);
    }
    v45 = *(_QWORD *)(a1 + 32);
    v46 = *(_QWORD *)(v45 + 960);
    if (v46)
      CFRetain(*(CFTypeRef *)(v46 + 8));
    v94[0] = v46;
    v94[1] = v45 + 944;
    ++*(_DWORD *)(v45 + 1316);
    v47 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
    if (v47)
      *(_DWORD *)v47 += 2;
    v96 = v47;
    v48 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
    v49 = (WTF *)WebCore::ResourceResponseBase::setURL((WebCore::ResourceResponseBase *)a3, v48);
    v50 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v45 + 1312) = 1;
    v51 = *(_QWORD *)(v35 + 16);
    if (v47 && *((_DWORD *)v47 + 1) || (v47 = *(WTF::StringImpl **)WTF::aboutBlankURL(v49)) != 0)
      *(_DWORD *)v47 += 2;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(_QWORD *)(v50 + 1144) = v51;
    v53 = *(WTF::StringImpl **)(v50 + 1152);
    *(_QWORD *)(v50 + 1152) = v47;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v50 + 1232), (WTF::StringImpl *)buf);
    *(_OWORD *)(v50 + 1240) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v50 + 1256) = v98;
    v55 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v54);
      else
        *(_DWORD *)v55 -= 2;
    }
    BYTE8(v98) = 0;
    memset(buf, 0, 17);
    v56 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v99);
    v110 = 0;
    v111 = 0;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    *(_OWORD *)cf = 0u;
    v107 = 0u;
    memset(v108, 0, sizeof(v108));
    v109 = 0;
    v113 = 0;
    memset(v112, 0, 11);
    *(_QWORD *)&buf[8] = *(_QWORD *)(v35 + 16);
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v56, a2);
    v58 = *(WTF::StringImpl **)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    v59 = v100;
    v100 = v58;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v57);
      else
        *(_DWORD *)v59 -= 2;
    }
    v60 = *(WTF::StringImpl **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    v61 = v101;
    v101 = v60;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v57);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = *(WTF::RefCountedBase **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v63 = v102;
    v102 = v62;
    if (v63)
      WTF::RefCounted<WebCore::FormData>::deref(v63);
    v103 = *(_QWORD *)(a2 + 176);
    v104 = *(_BYTE *)(a2 + 184);
    v64 = *(const void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v65 = v105;
    v105 = v64;
    if (v65)
      CFRelease(v65);
    cf[1] = a4;
    *(_QWORD *)&v107 = a5;
    v66 = (WTF::StringImpl *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a3);
    WTF::String::operator=((WTF::StringImpl **)&v107 + 1, v66);
    v67 = (WTF::StringImpl *)WebCore::ResourceResponseBase::textEncodingName((WebCore::ResourceResponseBase *)a3);
    WTF::String::operator=((WTF::StringImpl **)v108, v67);
    WTF::String::operator=((WTF::StringImpl **)v108 + 1, (WTF::StringImpl *)&v96);
    v111 = 0;
    LOWORD(v112[1]) = *(_WORD *)(v35 + 976);
    v69 = *(WTF::StringImpl **)(v35 + 984);
    if (v69)
      *(_DWORD *)v69 += 2;
    v70 = v113;
    v113 = v69;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v68);
      else
        *(_DWORD *)v70 -= 2;
    }
    v114 = *(_DWORD *)(v35 + 992);
    v117 = *(_WORD *)(a1 + 1256);
    WebCore::ResourceResponseBase::setExpectedContentLength((WebCore::ResourceResponseBase *)a3);
    WebCore::ResourceResponseBase::includeCertificateInfo();
    v71 = *(_QWORD *)(a1 + 208);
    v72 = (unsigned int *)(v71 + 16);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 + 1, v72));
    WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)buf);
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v71);
    WebKit::WebProcessProxy::assumeReadAccessToBaseURL((WebKit::WebProcessProxy *)v71, (WebKit::WebPageProxy *)a1, &v96);
    v74 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v75 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v75 = 2274;
    *(_QWORD *)(v75 + 8) = v74;
    *(_QWORD *)(v75 + 528) = v75 + 16;
    *(_QWORD *)(v75 + 536) = v75 + 16;
    *(_OWORD *)(v75 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v75 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v75);
    v87 = (WTF *)v75;
    IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode((IPC::Encoder *)v75, (uint64_t)buf);
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v75, (WebCore::ResourceResponseBase *)a3);
    LOBYTE(v91[0]) = 0;
    v92 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v71, &v87, 0, (uint64_t)v91, 1);
    if (v92)
    {
      v77 = v91[0];
      v91[0] = 0;
      if (v77)
        (*(void (**)(CFTypeRef))(*(_QWORD *)v77 + 8))(v77);
    }
    v78 = v87;
    v87 = 0;
    if (v78)
    {
      IPC::Encoder::~Encoder(v78, v76);
      WTF::fastFree(v79, v80);
    }
    if (*(_BYTE *)(v71 + 169))
    {
      WebKit::ResponsivenessTimer::start(v71 + 56);
    }
    else if (!*(_BYTE *)(v71 + 185))
    {
      *(_WORD *)(v71 + 184) = 256;
    }
    *v85 = v35;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v71 + 16));
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v81);
    v84 = v96;
    v96 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, v82);
      else
        *(_DWORD *)v84 -= 2;
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v94, (uint64_t)v82, v83);
  }
}

void WebKit::WebPageProxy::loadAlternateHTML(uint64_t a1, uint64_t *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  _DWORD *v47;
  __int128 v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  __int128 v59;
  _DWORD *v60;
  __int128 v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  const WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE buf[24];
  _OWORD v75[36];
  _DWORD *v76;
  __int128 v77;
  __int128 v78;
  _DWORD *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  _BYTE v88[216];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  char v93;
  __int16 v94;
  _QWORD v95[3];
  int v96;
  char v97;
  char v98;
  __int16 v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 744);
    v15 = *(_QWORD *)(v13 + 1896);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v75[0] = v15;
    WORD4(v75[0]) = 1024;
    *(_DWORD *)((char *)v75 + 10) = v16;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadAlternateHTML", buf, 0x26u);
  }
  if (*(_BYTE *)(a1 + 729) || *(_BYTE *)(a1 + 176))
  {
    v17 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(v18 + 744);
      v20 = *(_QWORD *)(v18 + 1896);
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v75[0] = v20;
      WORD4(v75[0]) = 1024;
      *(_DWORD *)((char *)v75 + 10) = v21;
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadAlternateHTML: page is closed (or other)", buf, 0x26u);
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 168);
    if (v22 && *(_DWORD *)(v22 + 4))
      *(_BYTE *)(a1 + 176) = 1;
    if (!*(_BYTE *)(a1 + 728))
    {
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WTF::URL *)a4);
      WebKit::WebPageProxy::launchProcess(a1, (WTF::ASCIICaseInsensitiveHash **)buf, 0);
      v24 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(v25 + 960);
    v27 = v25;
    if (v26)
    {
      CFRetain(*(CFTypeRef *)(v26 + 8));
      v27 = *(_QWORD *)(a1 + 32);
    }
    v72 = v26;
    v73 = v25 + 944;
    ++*(_DWORD *)(v25 + 1316);
    *(_BYTE *)(v25 + 1312) = 1;
    v28 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v28 += 2;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(_QWORD *)(v27 + 1144) = 0;
    v30 = *(WTF::StringImpl **)(v27 + 1152);
    *(_QWORD *)(v27 + 1152) = v28;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v27 + 1232), (WTF::StringImpl *)buf);
    *(_OWORD *)(v27 + 1240) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v27 + 1256) = v75[0];
    v32 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v73 + 368) = 1;
    v34 = (WTF::StringImpl **)(v33 + 1208);
    WTF::String::operator=((WTF::StringImpl **)(v33 + 1304), (WTF::StringImpl *)(v33 + 1208));
    WTF::String::operator=(v34, (WTF::StringImpl *)a5);
    v35 = *(_QWORD *)(a1 + 280);
    if (v35)
    {
      CFRetain(*(CFTypeRef *)(v35 + 8));
      WTF::String::operator=((WTF::StringImpl **)(v35 + 168), (WTF::StringImpl *)(v35 + 128));
      v36 = *(_OWORD *)(v35 + 152);
      *(_OWORD *)(v35 + 176) = *(_OWORD *)(v35 + 136);
      *(_OWORD *)(v35 + 192) = v36;
      WTF::String::operator=((WTF::StringImpl **)(v35 + 128), (WTF::StringImpl *)a5);
      v37 = *(_OWORD *)(a5 + 24);
      *(_OWORD *)(v35 + 136) = *(_OWORD *)(a5 + 8);
      *(_OWORD *)(v35 + 152) = v37;
      CFRelease(*(CFTypeRef *)(v35 + 8));
    }
    v87 = 0;
    v85 = 0;
    v84 = 0;
    v86 = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v88);
    v93 = 0;
    v94 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v85 = 0;
    *(_OWORD *)&v88[200] = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    *(_DWORD *)((char *)v95 + 7) = 0;
    v95[2] = 0;
    v95[0] = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = (WTF::StringImpl *)*((_QWORD *)&v89 + 1);
    *((_QWORD *)&v89 + 1) = *(_QWORD *)buf;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v38);
      else
        *(_DWORD *)v39 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)&v90, a3);
    WTF::String::operator=((WTF::StringImpl **)&v90 + 1, (WTF::StringImpl *)a4);
    WTF::String::operator=((WTF::StringImpl **)&v91, (WTF::StringImpl *)a5);
    WTF::String::operator=((WTF::StringImpl **)&v91 + 1, (WTF::StringImpl *)(a1 + 168));
    v40 = *(_QWORD *)(a1 + 208);
    v41 = (unsigned int *)(v40 + 16);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
    *(_QWORD *)buf = &off_1E34D7358;
    WebKit::UserData::transform(a6, (uint64_t)buf, &v71);
    v43 = v71;
    if (v71)
    {
      CFRetain(*((CFTypeRef *)v71 + 1));
      CFRetain(*((CFTypeRef *)v43 + 1));
    }
    v44 = v95[0];
    v95[0] = v43;
    if (v44)
      CFRelease(*(CFTypeRef *)(v44 + 8));
    if (v43)
      CFRelease(*((CFTypeRef *)v43 + 1));
    v45 = v71;
    v71 = 0;
    if (v45)
      CFRelease(*((CFTypeRef *)v45 + 1));
    WebKit::WebPageProxy::prepareToLoadWebPage(a1, (uint64_t)&v84);
    *(_QWORD *)buf = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(_QWORD *)&buf[8] = a1;
    do
      v46 = __ldaxr(v41);
    while (__stlxr(v46 + 1, v41));
    *(_QWORD *)&buf[16] = v40;
    WebKit::LoadParameters::LoadParameters((uint64_t)v75, &v84);
    v47 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v47 += 2;
    v76 = v47;
    v48 = *(_OWORD *)(a4 + 24);
    v77 = *(_OWORD *)(a4 + 8);
    v78 = v48;
    v49 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v49 += 2;
    v79 = v49;
    v80 = *(_OWORD *)(a5 + 8);
    v81 = *(_OWORD *)(a5 + 24);
    v50 = *a2;
    *a2 = 0;
    v82 = v50;
    v51 = *(_QWORD *)(v40 + 1016);
    if (v51)
    {
      v52 = *(_QWORD **)v51;
      ++*(_QWORD *)(v51 + 8);
      if (v52)
      {
        if (*v52)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v52 + 16))(*v52, 1);
      }
    }
    v83 = v51;
    v53 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
    v54 = (unsigned int *)(v53 + 16);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    WebCore::RegistrableDomain::RegistrableDomain(&v71, (const WTF::URL *)a4);
    v56 = WTF::fastMalloc((WTF *)0x2C0);
    *(_QWORD *)v56 = off_1E34D4690;
    *(_QWORD *)(v56 + 8) = *(_QWORD *)buf;
    *(_QWORD *)(v56 + 16) = *(_QWORD *)&buf[8];
    v57 = *(_QWORD *)&buf[16];
    *(_OWORD *)&buf[8] = 0uLL;
    *(_QWORD *)(v56 + 24) = v57;
    WebKit::LoadParameters::LoadParameters(v56 + 32, (uint64_t *)v75);
    v58 = v76;
    if (v76)
      *v76 += 2;
    *(_QWORD *)(v56 + 608) = v58;
    v59 = v78;
    *(_OWORD *)(v56 + 616) = v77;
    *(_OWORD *)(v56 + 632) = v59;
    v60 = v79;
    if (v79)
      *v79 += 2;
    *(_QWORD *)(v56 + 648) = v60;
    v61 = v81;
    *(_OWORD *)(v56 + 656) = v80;
    *(_OWORD *)(v56 + 672) = v61;
    *(_QWORD *)(v56 + 688) = v82;
    v62 = v83;
    v82 = 0;
    v83 = 0;
    *(_QWORD *)(v56 + 696) = v62;
    v70 = v56;
    WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v53, v40, &v71, 0, &v70);
    v64 = v70;
    v70 = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    v65 = v71;
    v71 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v63);
      else
        *(_DWORD *)v65 -= 2;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v54);
    WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(buf, v66);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v40 + 16));
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v84, v67);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v72, v68, v69);
  }
}

_QWORD *WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[86];
  a1[86] = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = (unsigned int *)a1[85];
  a1[85] = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v8, a2);
  v9 = (WTF::StringImpl *)a1[80];
  a1[80] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[75];
  a1[75] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  v11 = a1[2];
  a1[2] = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  v12 = a1[1];
  a1[1] = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  return a1;
}

void WebKit::WebPageProxy::navigateToPDFLinkWithSimulatedClick(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _BYTE buf[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v30 = a4;
  v31 = a3;
  v6 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(v7 + 744);
    v9 = *(_QWORD *)(v7 + 1896);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v34 = 2048;
    v35 = v8;
    v36 = 2048;
    v37 = v9;
    v38 = 1024;
    v39 = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::navigateToPDFLinkWithSimulatedClick:", buf, 0x26u);
  }
  if (*(_BYTE *)(a1 + 729))
  {
    v11 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(v12 + 744);
      v14 = *(_QWORD *)(v12 + 1896);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      v34 = 2048;
      v35 = v13;
      v36 = 2048;
      v37 = v14;
      v38 = 1024;
      v39 = v15;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::navigateToPDFLinkWithSimulatedClick: page is closed:", buf, 0x26u);
    }
  }
  else if ((WTF::protocolIsJavaScript() & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
    {
      WTF::URL::URL((uint64_t)buf, a2);
      WebCore::RegistrableDomain::RegistrableDomain(&v32, (const WTF::URL *)buf);
      WebKit::WebPageProxy::launchProcess(a1, &v32, 0);
      v17 = v32;
      v32 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    v19 = *(_QWORD *)(a1 + 208);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 2285;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v32 = (WTF::StringImpl *)v21;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)a2);
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v21, &v31);
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v21, &v30);
    buf[0] = 0;
    BYTE2(v35) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v32, 0, (uint64_t)buf, 1);
    if (BYTE2(v35))
    {
      v23 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
    v24 = v32;
    v32 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v22);
      WTF::fastFree(v25, v26);
    }
    v27 = *(_QWORD *)(a1 + 208);
    v28 = (unsigned int *)(v27 + 16);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    if (*(_BYTE *)(v27 + 169))
    {
      WebKit::ResponsivenessTimer::start(v27 + 56);
    }
    else if (!*(_BYTE *)(v27 + 185))
    {
      *(_WORD *)(v27 + 184) = 256;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v28);
  }
}

void WebKit::WebPageProxy::stopLoading(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  IPC::Encoder *v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v27 = 2048;
    v28 = v4;
    v29 = 2048;
    v30 = v5;
    v31 = 1024;
    v32 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopLoading:", buf, 0x26u);
  }
  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728))
  {
    v7 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)this + 4);
      v9 = *(_QWORD *)(v8 + 744);
      v10 = *(_QWORD *)(v8 + 1896);
      v11 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      v27 = 2048;
      v28 = v9;
      v29 = 2048;
      v30 = v10;
      v31 = 1024;
      v32 = v11;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopLoading: page is not valid", buf, 0x26u);
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 26);
    v13 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 2455;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v25 = (IPC::Encoder *)v14;
    buf[0] = 0;
    BYTE2(v28) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v25, 0, (uint64_t)buf, 1);
    if (BYTE2(v28))
    {
      v16 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    v20 = (WTF::StringImpl *)*((_QWORD *)this + 140);
    if (v20)
    {
      WebKit::ProvisionalPageProxy::cancel(v20);
      v21 = *((_QWORD *)this + 140);
      *((_QWORD *)this + 140) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    v22 = *((_QWORD *)this + 26);
    v23 = (unsigned int *)(v22 + 16);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    if (*(_BYTE *)(v22 + 169))
    {
      WebKit::ResponsivenessTimer::start(v22 + 56);
    }
    else if (!*(_BYTE *)(v22 + 185))
    {
      *(_WORD *)(v22 + 184) = 256;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v23);
  }
}

void WebKit::WebPageProxy::reload(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  CFTypeRef *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  CFTypeRef *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  const WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  const WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WebCore::PublicSuffixStore *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  const char **v113;
  uint64_t *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  _BYTE buf[24];
  __int128 v119;
  char v120;
  char v121;
  char v122;
  char v123;
  WTF::StringImpl *v124;
  const char **v125[3];

  v125[1] = *(const char ***)MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(v7 + 744);
    v9 = *(_QWORD *)(v7 + 1896);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v119 = v9;
    WORD4(v119) = 1024;
    *(_DWORD *)((char *)&v119 + 10) = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::reload:", buf, 0x26u);
  }
  v11 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)buf = 0;
  WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v11, (uint64_t *)buf, 0);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  v14 = *(_QWORD *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(_QWORD *)(a1 + 48) + 24)
                  + 176);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    *(_QWORD *)buf = 0;
    WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v14, (uint64_t *)buf, 0);
    if (*(_QWORD *)buf)
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
  }
  v113 = 0;
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, &v112);
  if (v112 && *((_DWORD *)v112 + 1))
  {
    v17 = *(unsigned int **)(a1 + 208);
    v18 = v17 + 4;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    WTF::URL::URL((uint64_t)buf, &v112);
    WebKit::WebPageProxy::currentResourceDirectoryURL((WebKit::WebPageProxy *)a1, (uint64_t)&v110);
    WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle((WebKit::WebPageProxy *)a1, (WebKit::WebProcessProxy *)v17, (const WTF::URL *)buf, (const WTF::URL *)&v110, &v113, 1);
    v21 = v110;
    v110 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17 + 4);
  }
  v23 = *(unsigned __int8 *)(a1 + 729);
  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
  {
    v35 = *(_QWORD *)(a1 + 160);
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
    WebKit::WebBackForwardList::protectedCurrentItem(*(_QWORD **)(a1 + 592), buf);
    WebKit::WebNavigationState::createReloadNavigation((uint64_t *)&v117, v35, v36, (uint64_t *)buf);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
    v37 = v112;
    if (v112 && *((_DWORD *)v112 + 1))
    {
      v38 = *(_QWORD *)(a1 + 32);
      v39 = *(CFTypeRef **)(v38 + 960);
      v40 = v38;
      if (v39)
      {
        CFRetain(v39[1]);
        v40 = *(_QWORD *)(a1 + 32);
        v37 = v112;
      }
      v110 = (WTF::StringImpl *)v39;
      v111 = v38 + 944;
      ++*(_DWORD *)(v38 + 1316);
      *(_BYTE *)(v38 + 1312) = 1;
      v41 = *((_QWORD *)v117 + 2);
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      *(_QWORD *)(v40 + 1144) = v41;
      v43 = *(WTF::StringImpl **)(v40 + 1152);
      *(_QWORD *)(v40 + 1152) = v37;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
      WTF::String::operator=((WTF::StringImpl **)(v40 + 1232), (WTF::StringImpl *)buf);
      *(_OWORD *)(v40 + 1240) = *(_OWORD *)&buf[8];
      *(_OWORD *)(v40 + 1256) = v119;
      v71 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, v69);
        else
          *(_DWORD *)v71 -= 2;
      }
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v110, (uint64_t)v69, v70);
    }
    if ((a2 & 4) != 0)
      *((_BYTE *)v117 + 3400) = 0;
    v72 = *(_QWORD *)(a1 + 208);
    v73 = (unsigned int *)(v72 + 16);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v72);
    v75 = v117;
    v76 = *((_QWORD *)v117 + 2);
    v77 = *(_QWORD *)(a1 + 208);
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v79 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v79 = 2309;
    *(_QWORD *)(v79 + 8) = v78;
    *(_QWORD *)(v79 + 528) = v79 + 16;
    *(_QWORD *)(v79 + 536) = v79 + 16;
    *(_OWORD *)(v79 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v79 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v79);
    v110 = (WTF::StringImpl *)v79;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v79, 8uLL, 8) = v76;
    *IPC::Encoder::grow((IPC::Encoder *)v79, 1uLL, 1) = a2;
    IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode((IPC::Encoder *)v79, &v113);
    buf[0] = 0;
    buf[16] = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v77, &v110, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      v81 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v81)
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    }
    v82 = v110;
    v110 = 0;
    if (v82)
    {
      IPC::Encoder::~Encoder(v82, v80);
      WTF::fastFree(v83, v84);
    }
    if (*(_BYTE *)(v72 + 169))
    {
      WebKit::ResponsivenessTimer::start(v72 + 56);
    }
    else if (!*(_BYTE *)(v72 + 185))
    {
      *(_WORD *)(v72 + 184) = 256;
    }
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      v85 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v85, v72 + 200, "Client reload", 14, 1, 0);
      *(_DWORD *)&buf[8] = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)v75 + 3448, (uint64_t)buf);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WTF::StringImpl *)((char *)v75 + 3408));
      if (*(_DWORD *)&buf[8] != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34D4170[*(unsigned int *)&buf[8]])(&v110, buf);
    }
    WebKit::WebPageProxy::resetSpeechSynthesizer(*(_QWORD *)(a1 + 32));
    *a3 = v75;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v72 + 16));
    goto LABEL_110;
  }
  v24 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(v25 + 744);
    v27 = *(_QWORD *)(v25 + 1896);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v28)
      LODWORD(v28) = *(_DWORD *)(v28 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v119 = v27;
    WORD4(v119) = 1024;
    *(_DWORD *)((char *)&v119 + 10) = v28;
    _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload:", buf, 0x26u);
    v23 = *(unsigned __int8 *)(a1 + 729);
  }
  if (v23)
  {
    v29 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(v31 + 744);
      v33 = *(_QWORD *)(v31 + 1896);
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v34)
        LODWORD(v34) = *(_DWORD *)(v34 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v32;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v119 = v33;
      WORD4(v119) = 1024;
      *(_DWORD *)((char *)&v119 + 10) = v34;
      _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload: page is closed", buf, 0x26u);
    }
    *a3 = 0;
    goto LABEL_110;
  }
  v44 = *(_QWORD *)(a1 + 592);
  v45 = *(_QWORD *)(v44 + 16);
  if (!v45 || !*(_QWORD *)(v45 + 8) || !*(_BYTE *)(v44 + 48))
    goto LABEL_59;
  v46 = *(_QWORD *)(v44 + 40);
  if (v46 >= *(unsigned int *)(v44 + 36))
    goto LABEL_164;
  v47 = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 8 * v46);
  if (v47)
  {
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v47 + 56));
    WebCore::RegistrableDomain::RegistrableDomain(&v117, (const WTF::URL *)buf);
    v49 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  else
  {
LABEL_59:
    v117 = 0;
  }
  WebKit::WebPageProxy::launchProcess(a1, &v117, 2);
  v50 = *(_QWORD *)(a1 + 592);
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51 || !*(_QWORD *)(v51 + 8) || !*(_BYTE *)(v50 + 48))
    goto LABEL_76;
  v52 = *(_QWORD *)(v50 + 40);
  if (v52 >= *(unsigned int *)(v50 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197338778);
  }
  if (!*(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v52))
  {
LABEL_76:
    v63 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v64 = *(_QWORD *)(a1 + 32);
      v65 = *(_QWORD *)(v64 + 744);
      v66 = *(_QWORD *)(v64 + 1896);
      v67 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v67)
        LODWORD(v67) = *(_DWORD *)(v67 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v65;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v119 = v66;
      WORD4(v119) = 1024;
      *(_DWORD *)((char *)&v119 + 10) = v67;
      _os_log_impl(&dword_196BCC000, v63, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::launchProcessForReload: no current item to reload", buf, 0x26u);
    }
    *a3 = 0;
    goto LABEL_81;
  }
  v53 = *(_QWORD *)(a1 + 160);
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
  WebKit::WebBackForwardList::protectedCurrentItem((_QWORD *)v50, buf);
  WebKit::WebNavigationState::createReloadNavigation(&v116, v53, v54, (uint64_t *)buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
  v55 = WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, &v115);
  v56 = v115;
  if (v115 && *((_DWORD *)v115 + 1))
  {
    v57 = *(_QWORD *)(a1 + 32);
    v58 = *(CFTypeRef **)(v57 + 960);
    v59 = v57;
    if (v58)
    {
      CFRetain(v58[1]);
      v59 = *(_QWORD *)(a1 + 32);
      v56 = v115;
    }
    v110 = (WTF::StringImpl *)v58;
    v111 = v57 + 944;
    ++*(_DWORD *)(v57 + 1316);
    *(_BYTE *)(v57 + 1312) = 1;
    v60 = *(_QWORD *)(v116 + 16);
    if (v56)
      *(_DWORD *)v56 += 2;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(_QWORD *)(v59 + 1144) = v60;
    v62 = *(WTF::StringImpl **)(v59 + 1152);
    *(_QWORD *)(v59 + 1152) = v56;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v61);
      else
        *(_DWORD *)v62 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v59 + 1232), (WTF::StringImpl *)buf);
    *(_OWORD *)(v59 + 1240) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v59 + 1256) = v119;
    v89 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v87);
      else
        *(_DWORD *)v89 -= 2;
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v110, (uint64_t)v87, v88);
  }
  v90 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v55);
  v91 = *(_QWORD *)(a1 + 592);
  v92 = *(_QWORD *)(v91 + 16);
  if (v92 && *(_QWORD *)(v92 + 8) && *(_BYTE *)(v91 + 48))
  {
    v93 = *(_QWORD *)(v91 + 40);
    if (v93 >= *(unsigned int *)(v91 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197338780);
    }
    v94 = *(_QWORD *)(*(_QWORD *)(v91 + 24) + 8 * v93);
  }
  else
  {
    v94 = 0;
  }
  WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v94 + 56));
  WebCore::PublicSuffixStore::publicSuffix(v90, (const WTF::URL *)buf);
  v96 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, v95);
    else
      *(_DWORD *)v96 -= 2;
  }
  v97 = v116;
  *(_QWORD *)buf = *(_QWORD *)(v116 + 16);
  v98 = *(_QWORD *)(a1 + 592);
  v99 = *(_QWORD *)(v98 + 16);
  if (!v99 || !*(_QWORD *)(v99 + 8) || !*(_BYTE *)(v98 + 48))
  {
    v101 = 0;
    goto LABEL_138;
  }
  v100 = *(_QWORD *)(v98 + 40);
  if (v100 >= *(unsigned int *)(v98 + 36))
  {
LABEL_164:
    __break(0xC471u);
    JUMPOUT(0x197338770);
  }
  v101 = *(_QWORD *)(*(_QWORD *)(v98 + 24) + 8 * v100);
LABEL_138:
  *(_OWORD *)&buf[8] = *(_OWORD *)(v101 + 32);
  LOWORD(v119) = 3;
  BYTE8(v119) = 0;
  v120 = 0;
  v121 = *(_BYTE *)(a1 + 1288);
  v122 = 0;
  v123 = 0;
  v102 = v110;
  if (v110)
    *(_DWORD *)v110 += 2;
  v124 = v102;
  v125[0] = 0;
  v114 = (uint64_t *)buf;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(*(_QWORD *)(a1 + 208), &v114, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v125);
  v104 = v124;
  v124 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, v103);
    else
      *(_DWORD *)v104 -= 2;
  }
  if (v120)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)((char *)&v119 + 8), v103);
  v105 = *(_QWORD *)(a1 + 208);
  if (*(_BYTE *)(v105 + 169))
  {
    WebKit::ResponsivenessTimer::start(v105 + 56);
  }
  else if (!*(_BYTE *)(v105 + 185))
  {
    *(_WORD *)(v105 + 184) = 256;
  }
  if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
  {
    v106 = *(_QWORD *)(a1 + 208) + 200;
    v107 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v107, v106, "Client reload", 14, 1, 0);
    *(_DWORD *)&buf[8] = 1;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v97 + 3448, (uint64_t)buf);
    WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v97 + 3408));
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34D4170[*(unsigned int *)&buf[8]])(&v114, buf);
  }
  *a3 = v97;
  v108 = v110;
  v110 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v30);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = v115;
  v115 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v30);
    else
      *(_DWORD *)v109 -= 2;
  }
LABEL_81:
  v68 = v117;
  v117 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v30);
    else
      *(_DWORD *)v68 -= 2;
  }
LABEL_110:
  v86 = v112;
  v112 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v30);
    else
      *(_DWORD *)v86 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v113);
}

void WebKit::WebPageProxy::recordAutomaticNavigationSnapshot(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!*((_BYTE *)this + 893))
  {
    v2 = *((_QWORD *)this + 74);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8) && *(_BYTE *)(v2 + 48))
      {
        v4 = *(_QWORD *)(v2 + 40);
        if (v4 >= *(unsigned int *)(v2 + 36))
        {
          __break(0xC471u);
        }
        else
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v4);
          if (v5)
          {
            CFRetain(*(CFTypeRef *)(v5 + 8));
            if (*((_BYTE *)this + 855))
            {
              {
                byte_1ECE738C8 = 0;
                WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
                *(_OWORD *)&qword_1ECE738B8 = 0u;
              }
              WebKit::ViewSnapshotStore::recordSnapshot((WebKit::ViewSnapshot *)&WebKit::ViewSnapshotStore::singleton(void)::store, this, (WTF::StringImpl **)v5);
            }
            CFRelease(*(CFTypeRef *)(v5 + 8));
          }
        }
      }
    }
  }
}

void WebKit::WebPageProxy::goForward(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebKit::WebPageProxy *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *(_QWORD *)(v5 + 744);
    v7 = *(_QWORD *)(v5 + 1896);
    v8 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    v12 = 134218752;
    v13 = this;
    v14 = 2048;
    v15 = v6;
    v16 = 2048;
    v17 = v7;
    v18 = 1024;
    v19 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goForward:", (uint8_t *)&v12, 0x26u);
  }
  v9 = *((_QWORD *)this + 74);
  CFRetain(*(CFTypeRef *)(v9 + 8));
  v10 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v9, 1);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    CFRelease(*(CFTypeRef *)(v9 + 8));
    WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v11, 2u, a2);
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
    *a2 = 0;
  }
}

void WebKit::WebPageProxy::goToBackForwardItem(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL8 v43;
  WebCore::PublicSuffixStore *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  const WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  CFTypeRef *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::RefCountedBase *v69;
  WTF::RefCountedBase *v70;
  CFTypeRef v71;
  CFTypeRef v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  void *v76;
  CFTypeRef v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  WTF::StringImpl *v81[19];
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::RefCountedBase *v84;
  uint64_t v85;
  char v86;
  CFTypeRef v87;
  _QWORD v88[2];
  uint64_t v89;
  _BYTE buf[40];
  _BYTE v91[104];
  char v92;
  char v93;
  char v94;
  char v95;
  WTF::StringImpl *v96;
  const char **v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::RefCountedBase *v100;
  uint64_t v101;
  char v102;
  CFTypeRef cf;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  char v109;
  __int16 v110;
  _QWORD v111[3];
  int v112;
  char v113;
  char v114;
  __int16 v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v9 + 744);
    v11 = *(_QWORD *)(v9 + 1896);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v12)
      LODWORD(v12) = *(_DWORD *)(v12 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v11;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v12;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goToBackForwardItem:", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 729))
  {
    if (!*(_BYTE *)(a1 + 728))
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 56));
      WebCore::RegistrableDomain::RegistrableDomain(v81, (const WTF::URL *)buf);
      WebKit::WebPageProxy::launchProcess(a1, v81, 0);
      v19 = v81[0];
      v81[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = *(_QWORD *)(a1 + 592);
      v22 = *(_QWORD *)(v21 + 16);
      if (!v22 || !*(_QWORD *)(v22 + 8) || !*(_BYTE *)(v21 + 48))
        goto LABEL_25;
      v23 = *(_QWORD *)(v21 + 40);
      if (v23 >= *(unsigned int *)(v21 + 36))
        goto LABEL_100;
      if (*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8 * v23) != a2)
      {
LABEL_25:
        CFRetain(*(CFTypeRef *)(v21 + 8));
        WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v21, (WebKit::WebBackForwardListItem *)a2);
        CFRelease(*(CFTypeRef *)(v21 + 8));
      }
    }
    v79 = a4;
    v24 = *(_QWORD *)(a1 + 208);
    v25 = (unsigned int *)(v24 + 16);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = *(_QWORD *)(a1 + 160);
    v28 = *(_QWORD *)(v24 + 176);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    *(_QWORD *)buf = a2;
    WebKit::WebBackForwardList::protectedCurrentItem(*(_QWORD **)(a1 + 592), v81);
    WebKit::WebNavigationState::createBackForwardNavigation(&v89, v27, v28, (uint64_t *)buf, (uint64_t *)v81, a3);
    if (v81[0])
      CFRelease(*((CFTypeRef *)v81[0] + 1));
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(_QWORD *)(v29 + 960);
    v31 = v29;
    if (v30)
    {
      CFRetain(*(CFTypeRef *)(v30 + 8));
      v31 = *(_QWORD *)(a1 + 32);
    }
    v88[0] = v30;
    v88[1] = v29 + 944;
    ++*(_DWORD *)(v29 + 1316);
    *(_BYTE *)(v29 + 1312) = 1;
    v78 = v89;
    v32 = *(_QWORD *)(v89 + 16);
    v33 = *(_DWORD **)(a2 + 56);
    if (v33)
      *v33 += 2;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(_QWORD *)(v31 + 1144) = v32;
    v35 = *(WTF::StringImpl **)(v31 + 1152);
    *(_QWORD *)(v31 + 1152) = v33;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v31 + 1232), (WTF::StringImpl *)buf);
    *(_OWORD *)(v31 + 1240) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v31 + 1256) = *(_OWORD *)&buf[24];
    v37 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    if (*(_QWORD *)(a2 + 56))
      goto LABEL_52;
    *(_QWORD *)buf = *(_QWORD *)(a2 + 392);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    v38 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    if (v38)
    {
      v39 = v38;
      v40 = (unsigned int *)(v38 + 16);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 + 1, v40));
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v25);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v40);
      v24 = v39;
      goto LABEL_52;
    }
    v54 = *(_QWORD *)(a2 + 400);
    v55 = *(_QWORD *)(a2 + 408);
    v56 = WebKit::FrameState::stateForFrameID(a2 + 56, v54, v55);
    if (!v56)
    {
LABEL_52:
      {
        WebKit::liveProcessesLRU(void)::processes = 0u;
        unk_1ECE73890 = 0u;
      }
      v43 = WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v24);
      v44 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v43);
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a2 + 56));
      WebCore::PublicSuffixStore::publicSuffix(v44, (const WTF::URL *)buf);
      v46 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v45);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = v89;
      *(_QWORD *)buf = *(_QWORD *)(v89 + 16);
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 32);
      *(_WORD *)&buf[24] = a3;
      buf[32] = 0;
      v92 = 0;
      v93 = *(_BYTE *)(a1 + 1288);
      v94 = 0;
      v95 = 0;
      v48 = v81[0];
      v80 = (uint64_t *)buf;
      v81[0] = 0;
      v96 = v48;
      v97 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(v24, &v80, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v97);
      v51 = v96;
      v96 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v49);
        else
          *(_DWORD *)v51 -= 2;
      }
      if (v92)
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&buf[32], v49);
      if (*(_BYTE *)(v24 + 169))
      {
        WebKit::ResponsivenessTimer::start(v24 + 56);
        v47 = v89;
        v52 = v79;
      }
      else
      {
        v52 = v79;
        if (!*(_BYTE *)(v24 + 185))
          *(_WORD *)(v24 + 184) = 256;
      }
      *v52 = v47;
      v53 = v81[0];
      v81[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v49);
        else
          *(_DWORD *)v53 -= 2;
      }
LABEL_72:
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v88, (uint64_t)v49, v50);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v24 + 16));
      return;
    }
    v57 = (const WTF::String *)v56;
    v58 = *(_QWORD *)(a1 + 592);
    v59 = *(_QWORD *)(v58 + 16);
    if (!v59 || !*(_QWORD *)(v59 + 8) || !*(_BYTE *)(v58 + 48))
    {
LABEL_79:
      v61 = (CFTypeRef *)v58;
      CFRetain(*(CFTypeRef *)(v58 + 8));
      WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v61, (WebKit::WebBackForwardListItem *)a2);
      CFRelease(v61[1]);
      v54 = *(_QWORD *)(a2 + 400);
      v55 = *(_QWORD *)(a2 + 408);
LABEL_80:
      v62 = WebKit::WebFrameProxy::webFrame(v54, v55);
      if (v62)
      {
        v63 = v62;
        CFRetain(*(CFTypeRef *)(v62 + 8));
        buf[32] = 0;
        memset(buf, 0, 17);
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v91);
        v109 = 0;
        v110 = 0;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        v115 = 0;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v122 = 0;
        v123 = 0;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v108 = 0;
        v111[2] = 0;
        memset(v111, 0, 11);
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v81, v57);
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v91, (uint64_t)v81);
        v65 = v82;
        v82 = 0;
        v66 = v98;
        v98 = v65;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v64);
          else
            *(_DWORD *)v66 -= 2;
        }
        v67 = v83;
        v83 = 0;
        v68 = v99;
        v99 = v67;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v64);
          else
            *(_DWORD *)v68 -= 2;
        }
        v69 = v84;
        v84 = 0;
        v70 = v100;
        v100 = v69;
        if (v70)
          WTF::RefCounted<WebCore::FormData>::deref(v70);
        v101 = v85;
        v102 = v86;
        v71 = v87;
        v87 = 0;
        v72 = cf;
        cf = v71;
        if (v72)
        {
          CFRelease(v72);
          v77 = v87;
          v87 = 0;
          if (v77)
            CFRelease(v77);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v81);
        *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 400);
        if (!buf[32])
          buf[32] = 1;
        *(_QWORD *)&buf[8] = *(_QWORD *)(v78 + 16);
        BYTE1(v111[1]) = 1;
        *(_BYTE *)(v63 + 440) = 1;
        v73 = *(_QWORD *)(*(_QWORD *)(v63 + 32) + 16);
        v74 = (unsigned int *)(v73 + 16);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 + 1, v74));
        v81[0] = (WTF::StringImpl *)buf;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(v73, (uint64_t *)v81, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v74);
        *v79 = v89;
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v76);
        CFRelease(*(CFTypeRef *)(v63 + 8));
        goto LABEL_72;
      }
      goto LABEL_52;
    }
    v60 = *(_QWORD *)(v58 + 40);
    if (v60 < *(unsigned int *)(v58 + 36))
    {
      v58 = *(_QWORD *)(a1 + 592);
      if (*(_QWORD *)(*(_QWORD *)(v58 + 24) + 8 * v60) == a2)
        goto LABEL_80;
      goto LABEL_79;
    }
LABEL_100:
    __break(0xC471u);
    JUMPOUT(0x1973391D8);
  }
  v13 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 + 744);
    v16 = *(_QWORD *)(v14 + 1896);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v17)
      LODWORD(v17) = *(_DWORD *)(v17 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v16;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v17;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goToBackForwardItem: page is closed", buf, 0x26u);
  }
  *a4 = 0;
}

void WebKit::WebPageProxy::goBack(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  int v18;
  WebKit::WebPageProxy *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *(_QWORD *)(v5 + 744);
    v7 = *(_QWORD *)(v5 + 1896);
    v8 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    v18 = 134218752;
    v19 = this;
    v20 = 2048;
    v21 = v6;
    v22 = 2048;
    v23 = v7;
    v24 = 1024;
    v25 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::goBack:", (uint8_t *)&v18, 0x26u);
  }
  v9 = *((_QWORD *)this + 74);
  CFRetain(*(CFTypeRef *)(v9 + 8));
  v10 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v9, 0);
  if (!v10)
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
    *a2 = 0;
    return;
  }
  v11 = v10;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  CFRelease(*(CFTypeRef *)(v9 + 8));
  v12 = *((_QWORD *)this + 74);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13 && *(_QWORD *)(v13 + 8) && *(_BYTE *)(v12 + 48))
  {
    v14 = *(_QWORD *)(v12 + 40);
    if (v14 >= *(unsigned int *)(v12 + 36))
    {
      __break(0xC471u);
      return;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v14);
    if (v15)
    {
      v16 = WebKit::WebBackForwardListItem::childItemForFrameID(v11, *(_QWORD *)(v15 + 400), *(_QWORD *)(v15 + 408));
      if (v16)
      {
        v17 = v16;
        CFRetain(v16[1]);
        CFRelease(*(CFTypeRef *)(v11 + 8));
        v11 = (uint64_t)v17;
      }
    }
  }
  WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v11, 1u, a2);
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void WebKit::WebPageProxy::tryRestoreScrollPosition(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  _BYTE buf[12];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v22 = 2048;
    v23 = v4;
    v24 = 2048;
    v25 = v5;
    v26 = 1024;
    v27 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryRestoreScrollPosition:", buf, 0x26u);
  }
  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728))
  {
    v7 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)this + 4);
      v9 = *(_QWORD *)(v8 + 744);
      v10 = *(_QWORD *)(v8 + 1896);
      v11 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      v22 = 2048;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      v26 = 1024;
      v27 = v11;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryRestoreScrollPosition: page is not valid", buf, 0x26u);
    }
  }
  else
  {
    v12 = *((_QWORD *)this + 26);
    v13 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 2472;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v20 = (IPC::Encoder *)v14;
    buf[0] = 0;
    BYTE2(v23) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v20, 0, (uint64_t)buf, 1);
    if (BYTE2(v23))
    {
      v16 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
  }
}

uint64_t WebKit::WebPageProxy::didChangeBackForwardList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  _QWORD v16[2];

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 360))(*(_QWORD *)(a1 + 72), a1, a2, a3) & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a1, a2, a3);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v9 + 960);
  v11 = v9;
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v11 = *(_QWORD *)(a1 + 32);
  }
  v16[0] = v10;
  v16[1] = v9 + 944;
  ++*(_DWORD *)(v9 + 1316);
  *(_BYTE *)(v9 + 1312) = 1;
  *(_BYTE *)(v11 + 1272) = WebKit::WebBackForwardList::backItem(*(_QWORD *)(a1 + 592)) != 0;
  v12 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v9 + 1312) = 1;
  *(_BYTE *)(v12 + 1273) = WebKit::WebBackForwardList::forwardItem(*(_QWORD *)(a1 + 592)) != 0;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v16, v13, v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

uint64_t WebKit::WebPageProxy::willGoToBackForwardListItem(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  v8 = WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 592), a2);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 320))(*(_QWORD *)(a1 + 72), a1, v9, a3);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

uint64_t WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a1, a2);
  else
    v7 = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  return v7;
}

unsigned int *WebKit::WebPageProxy::setControlledByAutomation(unsigned int *this, int a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;

  if (*((unsigned __int8 *)this + 826) != a2)
  {
    v2 = this;
    *((_BYTE *)this + 826) = a2;
    if (!*((_BYTE *)this + 729))
    {
      if (*((_BYTE *)this + 728))
      {
        LOBYTE(v8) = a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetControlledByAutomation>(*((_QWORD *)this + 26), &v8, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
        v3 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)v2 + 33));
        v4 = (unsigned int *)(v3 + 16);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *((_BYTE *)v2 + 826);
        v7 = *(_QWORD *)(*((_QWORD *)v2 + 33) + 24);
        v8 = &v7;
        v9 = v6;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetSessionIsControlledByAutomation>(v3, &v8, 0, 0);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
      }
    }
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetSessionIsControlledByAutomation>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 474;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void WebKit::WebPageProxy::createInspectorTarget(uint64_t a1, uint64_t a2, _DWORD **a3, char a4)
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*a3 && (*a3)[1])
  {
    WebKit::WebPageInspectorController::createInspectorTarget(*(_QWORD *)(a1 + 1072), a3, a4);
  }
  else
  {
    v5 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315138;
      v7 = "void WebKit::WebPageProxy::createInspectorTarget(IPC::Connection &, const String &, Inspector::InspectorTargetType)";
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 2419: Invalid message dispatched %s", (uint8_t *)&v6, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::destroyInspectorTarget(WebKit::WebPageInspectorController **this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    WebKit::WebPageInspectorController::destroyInspectorTarget(this[134], a3, (const WTF::StringImpl *)a3);
  }
  else
  {
    v4 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v5 = 136315138;
      v6 = "void WebKit::WebPageProxy::destroyInspectorTarget(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 2425: Invalid message dispatched %s", (uint8_t *)&v5, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::setRemoteInspectionNameOverride(uint64_t this, const WTF::String *a2)
{
  WTF::StringImpl **v2;

  v2 = *(WTF::StringImpl ***)(this + 1080);
  if (v2)
  {
    WTF::String::operator=(v2 + 6, a2);
    return Inspector::RemoteControllableTarget::update((Inspector::RemoteControllableTarget *)v2);
  }
  return this;
}

BOOL std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>(uint64_t *a1, uint64_t *a2)
{
  BOOL v2;
  unint64_t v4;
  unint64_t v5;
  BOOL v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;

  if (*((_BYTE *)a1 + 8))
    v2 = *((_BYTE *)a2 + 8) == 0;
  else
    v2 = 1;
  if (v2)
    return (*((_BYTE *)a1 + 8) != 0) == (*((_BYTE *)a2 + 8) != 0);
  v4 = *a1;
  v5 = *a2;
  if ((*a1 & 0x8000000000000) == 0)
    return (v5 & 0x8000000000000) == 0 && v4 == v5;
  if ((v5 & 0x8000000000000) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v12 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
    v13 = v9;
    do
    {
      if (*((float *)&v13 + v8) != *((float *)&v12 + v8))
        break;
      v7 = v8++ > 2;
    }
    while (v8 != 4);
    v10 = HIBYTE(v5);
    v11 = BYTE6(v4) == BYTE6(v5);
    if (HIBYTE(v4) != (_DWORD)v10)
      v11 = 0;
    return v7 && v11;
  }
  else
  {
    return 0;
  }
}

void WebKit::WebPageProxy::setTopContentInset(WebKit::WebPageProxy *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[5];

  if (*((float *)this + 175) != a2)
  {
    *((float *)this + 175) = a2;
    v4 = *((_QWORD *)this + 5);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 248))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
    if (!*((_BYTE *)this + 729))
    {
      if (*((_BYTE *)this + 728))
      {
        (*(void (**)(_DWORD *__return_ptr))(**((_QWORD **)this + 23) + 200))(v6);
        *(float *)&v6[1] = a2;
        *(_QWORD *)&v6[3] = v6;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTopContentInsetFenced>(*((_QWORD *)this + 26), &v6[1], *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
      }
    }
  }
}

void WebKit::WebPageProxy::setSuppressVisibilityUpdates(WebKit::WebPageProxy *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebKit::WebPageProxy *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 881) != a2)
  {
    v4 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((_QWORD *)this + 4);
      v6 = *(_QWORD *)(v5 + 744);
      v7 = *(_QWORD *)(v5 + 1896);
      v8 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v8)
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      v9 = 134219008;
      v10 = this;
      v11 = 2048;
      v12 = v6;
      v13 = 2048;
      v14 = v7;
      v15 = 1024;
      v16 = v8;
      v17 = 1024;
      v18 = a2;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setSuppressVisibilityUpdates: %d", (uint8_t *)&v9, 0x2Cu);
    }
    *((_BYTE *)this + 881) = a2;
    if ((a2 & 1) == 0)
      WebKit::WebPageProxy::scheduleActivityStateUpdate(this);
  }
}

unsigned int *WebKit::WebPageProxy::forEachWebContentProcess(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *result;
  _QWORD *v10;

  v4 = a1[168];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D5050;
  v5[1] = a2;
  v10 = v5;
  WebKit::BrowsingContextGroup::forEachRemotePage(v4, (uint64_t)a1, &v10);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = a1[26];
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, v6, *(_QWORD *)(a1[4] + 1896));
  if (v6)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::setInitialFocus(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  IPC::Encoder *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  _BYTE v20[8];
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v20[0] = a2;
    v20[1] = a3;
    v21 = a4;
    v8 = *a5;
    *a5 = 0;
    v9 = *(_QWORD *)(a1 + 208) + 200;
    v10 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9, "WebPageProxy::setInitialFocus", 30, 0, 0);
    v11 = *(_QWORD *)(a1 + 208);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2395;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v24 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&>,0ul,1ul,2ul>((IPC::Encoder *)v13, (uint64_t)v20);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34D4780;
    v14[1] = v8;
    v14[2] = v10;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v22[0] = v14;
    v22[1] = v15;
    v23 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v24, 0, (uint64_t)v22, 1);
    if (v23)
    {
      v17 = v22[0];
      v22[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void WebKit::WebPageProxy::clearSelection(uint64_t a1, __int128 *a2)
{
  char v2;
  char *v3;
  char v4;
  __int128 v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 729))
  {
    if (*(_BYTE *)(a1 + 728))
    {
      v5 = *a2;
      v6 = *((_QWORD *)a2 + 2);
      v2 = 0;
      v3 = &v2;
      v4 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ClearSelection>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ClearSelection &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ClearSelection&)#1}>(a1, (uint64_t)&v5, (uint64_t)&v3);
    }
  }
}

uint64_t WebKit::WebPageProxy::restoreSelectionInFocusedEditableElement(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RestoreSelectionInFocusedEditableElement>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::validateCommand(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v5;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v5 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(*(_QWORD *)(a1 + 208), &v5, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::increaseListLevel(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IncreaseListLevel>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::decreaseListLevel(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecreaseListLevel>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::changeListType(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeListType>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setBaseWritingDirection(uint64_t result, char a2)
{
  char v2;

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBaseWritingDirection>(*(_QWORD *)(result + 208), &v2, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

_DWORD *WebKit::WebPageProxy::updateFontAttributesAfterEditorStateChange(WebKit::WebPageProxy *this, void *a2)
{
  _DWORD *result;
  void *v4;
  uint64_t v5;
  _QWORD v6[10];
  char v7;

  result = std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100]((_DWORD *)(*((_QWORD *)this + 4) + 112), a2);
  v5 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v5 + 560))
  {
    LOBYTE(v6[0]) = 0;
    v7 = 0;
    if (*(_BYTE *)(v5 + 544))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(v6, v5 + 464);
      v7 = 1;
      (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 13) + 288))(*((_QWORD *)this + 13), v6);
      std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::FontAttributes,false>>((_DWORD *)(*((_QWORD *)this + 4) + 112), (unsigned __int8 *)v6);
    }
    return (_DWORD *)std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::scheduleFullEditorStateUpdate(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScheduleFullEditorStateUpdate>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::selectAll(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectAll>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::executeEditCommand(uint64_t a1, WTF::ASCIICaseInsensitiveHash **this, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  unsigned __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  void *v23;
  __int128 v24;
  uint64_t *v25[2];
  __int128 v26;
  char v27;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::ASCIICaseInsensitiveHash **))(*(_QWORD *)v6 + 16))(v6, this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v11 = WebKit::pasteAccessCategoryForCommand(this, (const WTF::String *)this);
  if (v11 >= 0x100u)
  {
    LOBYTE(v26) = 0;
    v27 = 0;
    WebKit::WebPageProxy::willPerformPasteCommand((WTF::StringImpl *)a1, v11, &v26);
  }
  v12 = *(_QWORD *)(a1 + 296);
  if (v12 || (v12 = *(_QWORD *)(a1 + 280)) != 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(v12 + 272);
    v4 = *(_QWORD *)(v12 + 280);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v25[0] = (uint64_t *)this;
  v25[1] = a3;
  v15 = *a4;
  *a4 = 0;
  *(_QWORD *)&v24 = v15;
  v16 = *(_QWORD *)(a1 + 208) + 200;
  v17 = WTF::fastMalloc((WTF *)0x28);
  *((_QWORD *)&v24 + 1) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v17, v16, "WebPageProxy::executeEditCommand", 33, 0, 0);
  if ((v13 & 1) != 0)
    goto LABEL_14;
  v18 = WebKit::WebFrameProxy::webFrame(v14, v4);
  if (!v18)
    goto LABEL_14;
  v19 = v18;
  CFRetain(*(CFTypeRef *)(v18 + 8));
  v20 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v19 + 32) + 16));
  if (!v20)
  {
    CFRelease(*(CFTypeRef *)(v19 + 8));
LABEL_14:
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), v25, &v24, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
    goto LABEL_15;
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,unsigned long long>(*(_QWORD *)(v20 + 24), v25, &v24, *(_QWORD *)(v20 + 16));
  CFRelease(*(CFTypeRef *)(v19 + 8));
LABEL_15:
  if (*((_QWORD *)&v24 + 1))
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(*((WebKit::ProcessThrottlerActivity **)&v24 + 1), v21);
    WTF::fastFree(v22, v23);
  }
  result = v24;
  if ((_QWORD)v24)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

uint64_t WebKit::pasteAccessCategoryForCommand(WTF::ASCIICaseInsensitiveHash **this, const WTF::String *a2)
{
  int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int k;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WTF::ASCIICaseInsensitiveHash **v17;
  unsigned int v18;
  uint64_t v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t j;
  WTF::StringImpl *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t Table;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v3 = dword_1ECE72000;
  if ((byte_1ECE72D47 & 1) != 0)
    goto LABEL_2;
  v34 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)v36, (uint64_t)"Paste", 6, &v34);
  v33 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v37, (uint64_t)"PasteAndMatchStyle", 19, &v33);
  v32 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v38, (uint64_t)"PasteAsQuotation", 17, &v32);
  v31 = 0;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)&v39, (uint64_t)"PasteAsPlainText", 17, &v31);
  v30 = 1;
  WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>((uint64_t)v40, (uint64_t)"PasteFont", 10, &v30);
  v14 = 0;
  Table = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(0x10u);
  *(_OWORD *)(Table - 16) = xmmword_1978D06A0;
  do
  {
    v15 = Table;
    if (Table
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&Table),
          (v15 = Table) != 0))
    {
      v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v16 = 0;
    }
    v17 = (WTF::ASCIICaseInsensitiveHash **)&v36[16 * v14];
    v18 = WTF::ASCIICaseInsensitiveHash::hash(*v17, a2);
    v19 = 0;
    for (i = 1; ; ++i)
    {
      v21 = v18 & v16;
      v22 = *(_QWORD *)(v15 + 16 * (v18 & v16));
      if (v22 == -1)
      {
        v19 = v15 + 16 * v21;
        goto LABEL_27;
      }
      if (!v22)
        break;
      if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(v22, (uint64_t)*v17))
        goto LABEL_36;
LABEL_27:
      v18 = i + v21;
    }
    v29 = v15 + 16 * v21;
    if (v19)
    {
      *(_QWORD *)v19 = 0;
      *(_BYTE *)(v19 + 8) = 0;
      --*(_DWORD *)(Table - 16);
      v29 = v19;
    }
    WTF::String::operator=((WTF::StringImpl **)v29, (WTF::StringImpl *)&v36[16 * v14]);
    *(_BYTE *)(v29 + 8) = *((_BYTE *)v17 + 8);
    v23 = Table;
    if (Table)
      v24 = *(_DWORD *)(Table - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(Table - 12) = v24;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
LABEL_35:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&Table);
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_35;
    }
LABEL_36:
    ++v14;
  }
  while (v14 != 5);
  qword_1ECE72D60 = Table;
  for (j = 64; j != -16; j -= 16)
  {
    v28 = *(WTF::StringImpl **)&v36[j];
    *(_QWORD *)&v36[j] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  byte_1ECE72D47 = 1;
  v3 = dword_1ECE72000;
LABEL_2:
  v4 = *((_QWORD *)v3 + 428);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = WTF::ASCIICaseInsensitiveHash::hash(*this, a2);
    for (k = 0; ; v6 = k + v8)
    {
      v8 = v6 & v5;
      v9 = *(_QWORD *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9)
        {
          v10 = *((_QWORD *)v3 + 428);
          if (!v10)
          {
            v12 = 0;
            return v12 | ((_DWORD)v10 << 8);
          }
          v11 = v10 + 16 * *(unsigned int *)(v10 - 4);
          goto LABEL_11;
        }
        if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(v9, (uint64_t)*this))
          break;
      }
      ++k;
    }
    v11 = v4 + 16 * v8;
    v10 = *((_QWORD *)v3 + 428);
    if (!v10)
      goto LABEL_12;
LABEL_11:
    v10 += 16 * *(unsigned int *)(v10 - 4);
LABEL_12:
    if (v10 == v11)
      goto LABEL_14;
    v12 = *(unsigned __int8 *)(v11 + 8);
    LODWORD(v10) = 1;
  }
  else
  {
LABEL_14:
    v12 = 0;
    LODWORD(v10) = 0;
  }
  return v12 | ((_DWORD)v10 << 8);
}

void WebKit::WebPageProxy::executeEditCommand(WebKit::WebPageProxy *this, WTF::ASCIICaseInsensitiveHash **a2, const WTF::String *a3)
{
  uint64_t v6;
  const WTF::String *v7;
  unsigned __int16 v8;
  const WTF::StringImpl *v9;
  _QWORD v10[2];
  __int128 v11;
  char v12;
  _QWORD *v13;
  char v14;
  __int128 v15;
  char v16;

  {
    WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::ignoreSpellingCommandName = (uint64_t)&WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator() const(void)::impl;
  }
  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      v6 = *((_QWORD *)this + 37);
      if (v6 || (v6 = *((_QWORD *)this + 35)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v6 + 8));
        v8 = WebKit::pasteAccessCategoryForCommand(a2, v7);
        if (v8 >= 0x100u)
        {
          v11 = *(_OWORD *)(v6 + 272);
          v12 = 1;
          WebKit::WebPageProxy::willPerformPasteCommand(this, v8, &v11);
        }
        if (WTF::equal(*a2, (const WTF::StringImpl *)WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::ignoreSpellingCommandName, v9))++*((_DWORD *)this + 209);
        v10[0] = a2;
        v10[1] = a3;
        v15 = *(_OWORD *)(v6 + 272);
        v16 = 1;
        v13 = v10;
        v14 = 0;
        WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ExecuteEditCommand>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ExecuteEditCommand &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ExecuteEditCommand&)#1}>((uint64_t)this, (uint64_t)&v15, (uint64_t)&v13);
        CFRelease(*(CFTypeRef *)(v6 + 8));
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::setEditable(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 616) != a2)
  {
    *(_BYTE *)(this + 616) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEditable>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMuted(uint64_t a1, unsigned __int8 a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D5498;
  v6 = v4;
  WebKit::WebPageProxy::setMuted(a1, a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 733))
  {
    v1 = this;
    if ((byte_1ECE72D42 & 1) != 0)
    {
      this = byte_1ECE72D41;
      if (!byte_1ECE72D41)
        return this;
    }
    else
    {
      this = WTF::linkedOnOrAfterSDKWithBehavior();
      byte_1ECE72D41 = this;
      byte_1ECE72D42 = 1;
      if (!(_DWORD)this)
        return this;
    }
    v2 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v3 + 744);
      v5 = *(_QWORD *)(v3 + 1896);
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 136);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v9 = 134218752;
      v10 = v1;
      v11 = 2048;
      v12 = v4;
      v13 = 2048;
      v14 = v5;
      v15 = 1024;
      v16 = v6;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::makeViewBlankIfUnpaintedSinceLastLoadCommit: Making the view blank because of a JS prompt before the first paint for its page", (uint8_t *)&v9, 0x26u);
    }
    v7 = *(_QWORD *)(v1 + 40);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 1448))(v8, 1);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
    *(_BYTE *)(v1 + 894) = 1;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::discardQueuedMouseEvents(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = this;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 32);
    v3 = *(_QWORD *)(v2 + 840);
    v4 = *(_QWORD *)(v2 + 848);
    v5 = v4;
    if (v3 > v4)
      v5 = v4 + *(unsigned int *)(v2 + 864);
    if (v5 - v3 < 2)
      break;
    if (v3 == v4)
    {
      this = 526;
      __break(0xC471u);
      return this;
    }
    if (!v4)
      v4 = *(unsigned int *)(v2 + 864);
    *(_QWORD *)(v2 + 848) = v4 - 1;
    this = (uint64_t)WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct((WTF::StringImpl *)(*(_QWORD *)(v2 + 856) + ((v4 - 1) << 7)), (WTF::StringImpl *)(*(_QWORD *)(v2 + 856) + (v4 << 7)));
  }
  return this;
}

void WebKit::WebPageProxy::dragEntered(WebKit::WebPageProxy *this, DragData *a2, WTF::StringImpl **a3)
{
  uint64_t *v6;
  _BYTE v7[24];

  v6 = WebKit::WebPasteboardProxy::singleton(this);
  WebKit::WebPasteboardProxy::grantAccess((uint64_t)v6, *((_QWORD *)this + 26), a3, 0);
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)this);
  v7[0] = 0;
  v7[16] = 0;
  WebKit::WebPageProxy::performDragControllerAction((uint64_t)this, 0, (uint64_t)a2, (uint64_t)v7);
}

void WebKit::WebPageProxy::performDragControllerAction(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  _OWORD v23[2];
  _OWORD v24[2];
  char v25;
  WTF::StringImpl *v26;
  char v27;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
    return;
  *(_QWORD *)&v21 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((_QWORD *)&v21 + 1) = a1;
  v22 = a2;
  v23[0] = *(_OWORD *)a3;
  *(_OWORD *)((char *)v23 + 10) = *(_OWORD *)(a3 + 10);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v24, a3 + 32);
  v24[1] = *(_OWORD *)(a3 + 48);
  v25 = *(_BYTE *)(a3 + 64);
  v8 = *(WTF::StringImpl **)(a3 + 72);
  if (v8)
    *(_DWORD *)v8 += 2;
  v26 = v8;
  v27 = *(_BYTE *)(a3 + 80);
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(unsigned __int8 *)(a4 + 16);
  v18 = a4;
  v19 = a2;
  v20 = a3;
  if (!v11)
    goto LABEL_11;
  v12 = WebKit::WebFrameProxy::webFrame(v9, v10);
  if (!v12)
    goto LABEL_11;
  v13 = v12;
  CFRetain(*(CFTypeRef *)(v12 + 8));
  v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v13 + 32) + 16));
  if (!v14)
  {
    CFRelease(*(CFTypeRef *)(v13 + 8));
LABEL_11:
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), (uint64_t)&v18, &v21, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
    goto LABEL_12;
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(*(_QWORD *)(v14 + 24), (uint64_t)&v18, &v21, *(_QWORD *)(v14 + 16));
  CFRelease(*(CFTypeRef *)(v13 + 8));
LABEL_12:
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v15);
  v17 = *((_QWORD *)&v21 + 1);
  *((_QWORD *)&v21 + 1) = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
}

void WebKit::WebPageProxy::dragUpdated(WebKit::WebPageProxy *this, DragData *a2, WTF::StringImpl **a3)
{
  uint64_t *v6;
  _BYTE v7[24];

  v6 = WebKit::WebPasteboardProxy::singleton(this);
  WebKit::WebPasteboardProxy::grantAccess((uint64_t)v6, *((_QWORD *)this + 26), a3, 0);
  v7[0] = 0;
  v7[16] = 0;
  WebKit::WebPageProxy::performDragControllerAction((uint64_t)this, 1, (uint64_t)a2, (uint64_t)v7);
}

IPC::Encoder *WebKit::WebPageProxy::performDragOperation(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  IPC::Encoder *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  _QWORD v19[3];
  _BYTE v20[24];
  _QWORD v21[2];
  char v22;
  IPC::Encoder *v23;

  v20[0] = 0;
  v20[16] = 0;
  result = WebKit::WebPageProxy::grantAccessToCurrentPasteboardData((WebKit::WebPasteboardProxy *)a1, a3, (uint64_t)v20);
  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
  {
    v19[0] = a2;
    v19[1] = a4;
    v19[2] = a5;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v10 = *(_QWORD *)(a1 + 208);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2296;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v23 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<std::tuple<WebCore::DragData const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WebKit::SandboxExtensionHandle &&::CrashOnOverflow,16ul,WebKit::SandboxExtensionHandle &&::FastMalloc> &&>,void>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WebKit::SandboxExtensionHandle &&::CrashOnOverflow,16ul,WebKit::SandboxExtensionHandle &&::FastMalloc> &,0ul,1ul,2ul>((IPC::Encoder *)v12, (uint64_t)v19);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34D47F8;
    v13[1] = a1;
    v13[2] = a1;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v13;
    v21[1] = v14;
    v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v23, 0, (uint64_t)v21, 1);
    if (v22)
    {
      v16 = v21[0];
      v21[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didPerformDragControllerAction(uint64_t a1, __int16 a2, char a3, char a4, int a5, IntRect *a6, _OWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(a1 + 841) = a2;
  v8 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v8 + 2040) = a3;
  *(_BYTE *)(a1 + 843) = a4;
  *(_DWORD *)(a1 + 844) = a5;
  *(_OWORD *)(v8 + 2008) = *a7;
  WebKit::WebPageProxy::setDragCaretRect(a1, a6);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 296))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
}

uint64_t WebKit::WebPageProxy::setDragCaretRect(uint64_t this, const IntRect *a2)
{
  _DWORD *v3;
  BOOL v4;
  BOOL v5;
  IntRect *v6;
  IntRect v7;
  uint64_t v8;
  uint64_t v9;
  IntRect v10;

  v3 = *(_DWORD **)(this + 32);
  v4 = v3[506] == a2->m_location.m_x && v3[507] == a2->m_location.m_y;
  if (!v4 || (v3[508] == a2->m_size.m_width ? (v5 = v3[509] == a2->m_size.m_height) : (v5 = 0), !v5))
  {
    v6 = (IntRect *)(v3 + 506);
    v7 = *v6;
    *v6 = *a2;
    v10 = v7;
    v8 = *(_QWORD *)(this + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t, IntRect *, const IntRect *))(*(_QWORD *)v9 + 304))(v9, &v10, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
  return this;
}

void WebKit::WebPageProxy::dragEnded(uint64_t a1, IntSize a2, _QWORD *a3, char a4, IntPoint a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  IntRect v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;

  v24 = a4;
  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
  {
    *(_QWORD *)&v21 = a1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v10 = *a3;
    *((_QWORD *)&v21 + 1) = a1;
    v22 = v10;
    v23 = a4;
    v11 = **(_QWORD **)&a5;
    v12 = *(_QWORD *)(*(_QWORD *)&a5 + 8);
    LODWORD(v10) = *(unsigned __int8 *)(*(_QWORD *)&a5 + 16);
    v18.m_location = a5;
    v18.m_size = a2;
    v19 = a3;
    v20 = &v24;
    if ((_DWORD)v10)
    {
      v13 = WebKit::WebFrameProxy::webFrame(v11, v12);
      if (v13)
      {
        v14 = v13;
        CFRetain(*(CFTypeRef *)(v13 + 8));
        v15 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v14 + 32) + 16));
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 24);
          v25 = *(_QWORD *)(v15 + 16);
          WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(v16, (uint64_t **)&v18, &v21, &v25, 0);
          CFRelease(*(CFTypeRef *)(v14 + 8));
          goto LABEL_10;
        }
        CFRelease(*(CFTypeRef *)(v14 + 8));
      }
    }
    v17 = *(_QWORD *)(a1 + 208);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(v17, (uint64_t **)&v18, &v21, &v25, 0);
LABEL_10:
    v18.m_location = 0;
    v18.m_size = 0;
    WebKit::WebPageProxy::setDragCaretRect(a1, &v18);
    if (*((_QWORD *)&v21 + 1))
      CFRelease(*(CFTypeRef *)(*((_QWORD *)&v21 + 1) + 8));
  }
}

uint64_t WebKit::WebPageProxy::didStartDrag(uint64_t this)
{
  uint64_t v1;
  char v2;

  if (!*(_BYTE *)(this + 729))
  {
    v1 = this;
    if (*(_BYTE *)(this + 728))
    {
      WebKit::WebPageProxy::discardQueuedMouseEvents(this);
      v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidStartDrag>(*(_QWORD *)(v1 + 208), (uint64_t)&v2, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dragCancelled(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DragCancelled>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::resetCurrentDragInformation(WebKit::WebPageProxy *this)
{
  IntRect v2;

  if (*((_BYTE *)this + 842))
    *((_BYTE *)this + 842) = 0;
  *(_BYTE *)(*((_QWORD *)this + 4) + 2040) = 0;
  *((_BYTE *)this + 843) = 0;
  *((_DWORD *)this + 211) = 0;
  v2.m_location = 0;
  v2.m_size = 0;
  return WebKit::WebPageProxy::setDragCaretRect((uint64_t)this, &v2);
}

void WebKit::WebPageProxy::sendMouseEvent(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v19 = a3;
  v8 = *(_QWORD *)(a1 + 208);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *((_QWORD *)a4 + 2), *((_QWORD *)a4 + 3));
  if (v8)
    v11 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  v12 = *a4;
  if (!*a4 || v12 == 13 || v12 == 7 && *((_DWORD *)a4 + 18) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2240) = v13;
  }
  v17[0] = &v18;
  v17[1] = a4;
  v17[2] = a5;
  v14 = WebKit::WebFrameProxy::webFrame(v18, v19);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v15 + 32) + 16));
    if (v16)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(*(_QWORD *)(v16 + 24), (uint64_t)v17, *(_QWORD *)(v16 + 16), 0);
      CFRelease(*(CFTypeRef *)(v15 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(*(_QWORD *)(a1 + 208), (uint64_t)v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
}

void WebKit::WebPageProxy::handleMouseEvent(WebKit::WebProcessProxy **this, const NativeWebMouseEvent *a2)
{
  int var0;
  char *v5;
  WebKit::WebProcessProxy *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  IPC::Encoder *v58;
  _BYTE buf[12];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a2->var0)
    WebKit::WebPageProxy::launchInitialProcessIfNecessary(this);
  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728) && this[35])
  {
    var0 = a2->var0;
    if (a2[1].var0 == 2 && !a2->var0)
    {
      *((_BYTE *)this + 760) = 1;
      v5 = (char *)(this + 4);
      goto LABEL_29;
    }
    v5 = (char *)(this + 4);
    v6 = this[4];
    if ((var0 - 4) >= 0xFFFFFFFE)
    {
      v7 = *((_QWORD *)v6 + 106);
      v8 = *((_QWORD *)v6 + 105);
      if (v7 != v8)
      {
        v9 = *((unsigned int *)v6 + 216);
        v10 = v8 + v9 + 1;
        do
          v10 -= v9;
        while (v10 >= v9);
        if (v7 != v10)
        {
          v11 = *((_QWORD *)v6 + 107);
          v12 = *((_QWORD *)v6 + 106);
          while (1)
          {
            if (v12)
            {
              v13 = v12 - 1;
              v14 = *(unsigned __int8 *)(v11 + ((v12 - 1) << 7));
              if (v14 == var0)
                goto LABEL_25;
              v15 = v14 - 4;
            }
            else
            {
              v16 = *(unsigned __int8 *)(v11 + ((v9 - 1) << 7));
              if (v16 == var0)
              {
                v13 = v9 - 1;
                v12 = *((unsigned int *)v6 + 216);
LABEL_25:
                if (v7 != v13)
                {
                  v17 = (WTF::StringImpl *)(v11 + (v12 << 7));
                  WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct((WTF::StringImpl *)(v11 + (v13 << 7)), v17);
                  v18 = *((_QWORD *)v6 + 105);
                  if (v18 <= v13)
                  {
                    WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping((WTF::StringImpl *)(v11 + (v18 << 7)), (WTF::StringImpl *)(v11 + (v13 << 7)), v11 + (v18 << 7) + 128);
                    *((_QWORD *)v6 + 105) = (*((_QWORD *)v6 + 105) + 1)
                                          % (unint64_t)*((unsigned int *)v6 + 216);
                  }
                  else
                  {
                    WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping(v17, (WTF::StringImpl *)(v11 + (*((_QWORD *)v6 + 106) << 7)), v11 + (v13 << 7));
                    *((_QWORD *)v6 + 106) = (*((_QWORD *)v6 + 106) + (unint64_t)*((unsigned int *)v6 + 216) - 1)
                                          % *((unsigned int *)v6 + 216);
                  }
                }
                break;
              }
              v15 = v16 - 4;
              v13 = v9 - 1;
            }
            if (v15 >= 0xFFFFFFFE)
            {
              v12 = v13;
              if (v13 != v10)
                continue;
            }
            break;
          }
        }
      }
    }
LABEL_29:
    v19 = *(_QWORD *)v5;
    v20 = *(_QWORD *)(*(_QWORD *)v5 + 840);
    v21 = *(_QWORD *)(*(_QWORD *)v5 + 848);
    if (v20)
    {
      if (v21 + 1 == v20)
      {
        LODWORD(v22) = *(_DWORD *)(v19 + 864);
LABEL_37:
        v23 = v22;
        v24 = ((unint64_t)v22 >> 2) + v22;
        if (v24 <= 0xF)
          v24 = 15;
        if (v24 >= 0x1FFFFFF)
        {
          __break(0xC471u);
          return;
        }
        v25 = *(WTF::StringImpl **)(v19 + 856);
        v26 = v24 + 1;
        v27 = WTF::fastMalloc((WTF *)((v24 + 1) << 7));
        *(_DWORD *)(v19 + 864) = v26;
        *(_QWORD *)(v19 + 856) = v27;
        v28 = *(_QWORD *)(v19 + 840);
        v29 = *(_QWORD *)(v19 + 848);
        if (v28 <= v29)
        {
          WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move((WTF::StringImpl *)((char *)v25 + 128 * v28), (WTF::StringImpl *)((char *)v25 + 128 * v29), v27 + (v28 << 7));
        }
        else
        {
          WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(v25, (WTF::StringImpl *)((char *)v25 + 128 * v29), v27);
          v30 = *(_QWORD *)(v19 + 840);
          v31 = v30 - v23 + *(unsigned int *)(v19 + 864);
          WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move((WTF::StringImpl *)((char *)v25 + 128 * v30), (WTF::StringImpl *)((char *)v25 + 128 * v23), *(_QWORD *)(v19 + 856) + (v31 << 7));
          *(_QWORD *)(v19 + 840) = v31;
        }
        if (v25)
        {
          if (*(WTF::StringImpl **)(v19 + 856) == v25)
          {
            *(_QWORD *)(v19 + 856) = 0;
            *(_DWORD *)(v19 + 864) = 0;
          }
          WTF::fastFree(v25, v32);
        }
        v21 = *(_QWORD *)(v19 + 848);
      }
    }
    else
    {
      v22 = *(unsigned int *)(v19 + 864);
      if (v21)
      {
        if (v21 == v22 - 1)
          goto LABEL_37;
      }
      else
      {
        if (!(_DWORD)v22)
          goto LABEL_37;
        v21 = 0;
      }
    }
    v33 = *(_QWORD *)(v19 + 856) + (v21 << 7);
    v34 = *(_OWORD *)a2->var3;
    *(_OWORD *)v33 = *(_OWORD *)&a2->var0;
    *(_OWORD *)(v33 + 16) = v34;
    v35 = *(_OWORD *)&a2[1].var0;
    v36 = *(_OWORD *)a2[1].var3;
    v37 = *(_OWORD *)a2[2].var3;
    *(_OWORD *)(v33 + 64) = *(_OWORD *)&a2[2].var0;
    *(_OWORD *)(v33 + 80) = v37;
    *(_OWORD *)(v33 + 32) = v35;
    *(_OWORD *)(v33 + 48) = v36;
    v38 = *(_DWORD **)&a2[3].var0;
    if (v38)
      *v38 += 2;
    *(_QWORD *)(v33 + 96) = v38;
    *(_BYTE *)(v33 + 104) = LOBYTE(a2[3].var2.var0);
    v39 = *(const void **)a2[3].var3;
    *(_QWORD *)(v33 + 112) = v39;
    if (v39)
      CFRetain(v39);
    v40 = *(_QWORD *)(v19 + 848);
    if (v40 == *(unsigned int *)(v19 + 864) - 1)
      v41 = 0;
    else
      v41 = v40 + 1;
    *(_QWORD *)(v19 + 848) = v41;
    if (a2->var0 != 2)
    {
      v42 = (uint64_t)this[26];
      v43 = *((_QWORD *)this[4] + 237);
      v44 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v44 = 2208;
      *(_QWORD *)(v44 + 8) = v43;
      *(_QWORD *)(v44 + 528) = v44 + 16;
      *(_QWORD *)(v44 + 536) = v44 + 16;
      *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v44 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
      v58 = (IPC::Encoder *)v44;
      buf[0] = 0;
      BYTE2(v61) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v42, &v58, 0, (uint64_t)buf, 1);
      if (BYTE2(v61))
      {
        v46 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      }
      v47 = v58;
      v58 = 0;
      if (v47)
      {
        IPC::Encoder::~Encoder(v47, v45);
        WTF::fastFree(v48, v49);
      }
    }
    v50 = *(_QWORD *)v5;
    v51 = *(_QWORD *)(*(_QWORD *)v5 + 840);
    v52 = *(_QWORD *)(*(_QWORD *)v5 + 848);
    if (v51 > v52)
      v52 += *(unsigned int *)(v50 + 864);
    if (v52 - v51 == 1)
    {
      WebKit::WebPageProxy::processNextQueuedMouseEvent((WebKit::WebPageProxy *)this);
    }
    else
    {
      v53 = (unint64_t)this[160] + 1;
      this[160] = (WebKit::WebProcessProxy *)v53;
      if (v53 >= 0x14)
      {
        v54 = qword_1ECE713C0;
        if (os_log_type_enabled((os_log_t)qword_1ECE713C0, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *(_QWORD *)(v50 + 744);
          v56 = *(_QWORD *)(v50 + 1896);
          v57 = *((_QWORD *)this[26] + 17);
          if (v57)
            LODWORD(v57) = *(_DWORD *)(v57 + 108);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = this;
          v60 = 2048;
          v61 = v55;
          v62 = 2048;
          v63 = v56;
          v64 = 1024;
          v65 = v57;
          _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::handleMouseEvent: skipped called processNextQueuedMouseEvent 20 times, possibly stuck?", buf, 0x26u);
        }
      }
    }
  }
}

void WebKit::WebPageProxy::processNextQueuedMouseEvent(WebKit::WebPageProxy *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v16;
  void *v17;
  WTF::StringImpl *v18[2];
  char v19;

  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728) || !*((_QWORD *)this + 35))
    return;
  *((_QWORD *)this + 160) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  v3 = v2[105];
  if (v3 == v2[106])
  {
    __break(0xC471u);
    return;
  }
  v4 = (unsigned __int8 *)(v2[107] + (v3 << 7));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v6 + 1616))(v6, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  if (v7)
  {
    v18[0] = 0;
    WebKit::WebPageProxy::setToolTip((WTF **)this, v18, v8);
    v10 = v18[0];
    v18[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *((_QWORD *)this + 26);
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *v4;
  if ((v14 - 3) < 2 || v14 == 0)
  {
    v16 = 1;
LABEL_24:
    WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(v11, v16);
    goto LABEL_25;
  }
  if (v14 != 2)
  {
    v16 = 0;
    goto LABEL_24;
  }
LABEL_25:
  LOBYTE(v18[0]) = 0;
  v19 = 0;
  WebKit::WebPageProxy::sendMouseEvent((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 35) + 272), *(_QWORD *)(*((_QWORD *)this + 35) + 280), v4, (uint64_t)v18);
  if (v19)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v17);
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
}

uint64_t *WebKit::WebPageProxy::doAfterProcessingAllPendingMouseEvents(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[4];
  if (*(_QWORD *)(v2 + 840) == *(_QWORD *)(v2 + 848))
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v3 = *(unsigned int *)(v2 + 212);
  if ((_DWORD)v3 == *(_DWORD *)(v2 + 208))
  {
    result = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 200, v3 + 1, (unint64_t)a2);
    v3 = *(unsigned int *)(v2 + 212);
    v4 = v3 + 1;
    v5 = *(_QWORD *)(v2 + 200);
    v6 = *result;
    *result = 0;
  }
  else
  {
    v4 = v3 + 1;
    v5 = *(_QWORD *)(v2 + 200);
    v6 = *a2;
    *a2 = 0;
  }
  *(_QWORD *)(v5 + 8 * v3) = v6;
  *(_DWORD *)(v2 + 212) = v4;
  return result;
}

uint64_t WebKit::WebPageProxy::dispatchWheelEventWithoutScrolling(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  _QWORD v7[2];

  v3 = a1[35];
  if (v3)
  {
    v6 = *(_OWORD *)(v3 + 272);
    v7[0] = &v6;
    v7[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(a1[26], (uint64_t)v7, a3, *(_QWORD *)(a1[4] + 1896), 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

WebKit::WebWheelEventCoalescer *WebKit::WebPageProxy::wheelEventCoalescer(WebKit::WebPageProxy *this)
{
  WebKit::WebWheelEventCoalescer *result;
  WebKit::WebWheelEventCoalescer **v3;
  uint64_t v4;

  result = (WebKit::WebWheelEventCoalescer *)*((_QWORD *)this + 93);
  if (!result)
  {
    v3 = (WebKit::WebWheelEventCoalescer **)((char *)this + 744);
    v4 = WTF::fastMalloc((WTF *)0x120);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)(v4 + 16) = v4 + 32;
    *(_DWORD *)(v4 + 24) = 2;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100](v3, (WTF **)v4);
    return *v3;
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::handleWheelEvent(IPC::Encoder *result, uint64_t a2)
{
  IPC::Encoder *v2;
  __int16 v4;

  if (!*((_BYTE *)result + 729))
  {
    v2 = result;
    if (*((_BYTE *)result + 728))
    {
      result = (IPC::Encoder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 23) + 224))(*((_QWORD *)result + 23));
      if ((_DWORD)result)
      {
        v4 = 2;
        return WebKit::WebPageProxy::continueWheelEventHandling(v2, a2, (char *)&v4, 0);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::continueWheelEventHandling(IPC::Encoder *this, uint64_t a2, char *a3, __int16 a4)
{
  IPC::Encoder *v6;
  uint64_t v7;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];
  _QWORD *v18;
  char v19;
  _QWORD v20[2];
  char v21;

  v6 = this;
  v7 = *((_QWORD *)this + 35);
  if ((*a3 & 0xE) != 0)
  {
    if (v7)
    {
      v9 = WebKit::WebPageProxy::rubberBandableEdgesRespectingHistorySwipe(this);
      return WebKit::WebPageProxy::sendWheelEvent(v6, *(_QWORD *)(*((_QWORD *)v6 + 35) + 272), *(_QWORD *)(*((_QWORD *)v6 + 35) + 280), (char *)a2, *a3, v9, a4, a3[1]);
    }
  }
  else
  {
    if (v7)
      v10 = *(_DWORD *)(a2 + 68) == 1;
    else
      v10 = 0;
    if (v10)
    {
      v12 = *(_QWORD *)(v7 + 272);
      v11 = *(_QWORD *)(v7 + 280);
      v16[0] = v12;
      v16[1] = v11;
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = v13;
      v17[0] = v16;
      v17[1] = &v15;
      v20[0] = v12;
      v20[1] = v11;
      v21 = 1;
      v17[2] = &v14;
      v18 = v17;
      v19 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::SetLastKnownMousePosition>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::SetLastKnownMousePosition &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::SetLastKnownMousePosition&)#1}>((uint64_t)this, (uint64_t)v20, (uint64_t)&v18);
    }
    return (IPC::Encoder *)WebKit::WebPageProxy::wheelEventHandlingCompleted(v6, a3[1]);
  }
  return this;
}

void WebKit::WebPageProxy::wheelEventHandlingCompleted(WebKit::WebPageProxy *this, char a2)
{
  WebKit::WebWheelEventCoalescer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[128];
  _BYTE v10[112];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = WebKit::WebPageProxy::wheelEventCoalescer(this);
  WebKit::WebWheelEventCoalescer::takeOldestEventBeingProcessed(v4, (uint64_t)v10);
  if (v11)
  {
    if ((a2 & 1) == 0)
    {
      (*(void (**)(_QWORD, WebKit::WebPageProxy *, _BYTE *))(**((_QWORD **)this + 13) + 152))(*((_QWORD *)this + 13), this, v10);
      v5 = *((_QWORD *)this + 5);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (!v11)
            __break(1u);
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 368))(v6, v10);
        }
      }
    }
  }
  v7 = (uint64_t *)WebKit::WebPageProxy::wheelEventCoalescer(this);
  WebKit::WebWheelEventCoalescer::nextEventToDispatch(v7, (uint64_t)v9);
  if (v9[112])
  {
    WebKit::WebPageProxy::handleWheelEvent(this, (uint64_t)v9);
  }
  else
  {
    v8 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)this + 6) + 24))
         + 40);
    if (v8)
    {
      CFRetain(*(CFTypeRef *)(v8 + 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
}

uint64_t WebKit::WebPageProxy::rubberBandableEdgesRespectingHistorySwipe(WebKit::WebPageProxy *this)
{
  unsigned int v1;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)(*((_QWORD *)this + 4) + 1712);
  if (*((_BYTE *)this + 851))
  {
    v3 = WebKit::WebBackForwardList::backItem(*((_QWORD *)this + 74)) == 0;
    LOBYTE(v4) = WebKit::WebBackForwardList::forwardItem(*((_QWORD *)this + 74)) == 0;
  }
  else
  {
    v4 = v1 >> 8;
    v3 = HIBYTE(v1);
  }
  return v1 & 0xFF0000 | (v3 << 24) | (v4 << 8) | v1;
}

IPC::Encoder *WebKit::WebPageProxy::sendWheelEvent(IPC::Encoder *result, uint64_t a2, uint64_t a3, char *a4, char a5, int a6, __int16 a7, char a8)
{
  unsigned __int8 **v8;
  IPC::Encoder *v11;
  unsigned __int8 *v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  __int16 v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  IPC::Encoder *v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v50 = a3;
  v48 = a5;
  v47 = a6;
  v46 = a7;
  v8 = *(unsigned __int8 ***)(*((_QWORD *)result + 26) + 144);
  if (v8)
  {
    v11 = result;
    v12 = *v8;
    if (__ldaxr(*v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v12);
LABEL_6:
    ++*((_QWORD *)v12 + 1);
    v14 = __ldxr(v12);
    if (v14 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_11:
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v11 + 23) + 224))(*((_QWORD *)v11 + 23)))
        {
          v15 = *(_QWORD *)(*((_QWORD *)v11 + 4) + 1896);
          v16 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v16 = 32;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 528) = v16 + 16;
          *(_QWORD *)(v16 + 536) = v16 + 16;
          *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v16 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
          v51[0] = (IPC::Encoder *)v16;
          *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v15;
          IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode((IPC::Encoder *)v16, a4);
          IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode((IPC::Encoder *)v16, (char *)&v47);
          IPC::Connection::sendMessageImpl((uint64_t)v8, (uint64_t *)v51, 0, 0x100000000);
          v18 = v51[0];
          v51[0] = 0;
          if (v18)
          {
            IPC::Encoder::~Encoder(v18, v17);
LABEL_14:
            WTF::fastFree(v19, v20);
            goto LABEL_25;
          }
          goto LABEL_25;
        }
        v21 = v49;
        v22 = v50;
        v45[0] = &v49;
        v45[1] = a4;
        v45[2] = &v48;
        v45[3] = &v46;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v11 + 6, (uint64_t)v11 + 16);
        v23 = (unsigned int *)*((_QWORD *)v11 + 3);
        if (v23)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        v51[0] = (IPC::Encoder *)v23;
        v25 = *((_OWORD *)a4 + 5);
        v56 = *((_OWORD *)a4 + 4);
        v57 = v25;
        v58 = *((_OWORD *)a4 + 6);
        v26 = *((_OWORD *)a4 + 1);
        v52 = *(_OWORD *)a4;
        v53 = v26;
        v27 = *((_OWORD *)a4 + 3);
        v54 = *((_OWORD *)a4 + 2);
        v55 = v27;
        v59 = v48;
        v60 = v47;
        v61 = v46;
        v62 = a8;
        v28 = WebKit::WebFrameProxy::webFrame(v21, v22);
        if (v28)
        {
          v29 = v28;
          CFRetain(*(CFTypeRef *)(v28 + 8));
          v30 = WebKit::BrowsingContextGroup::remotePageInProcess(*((WebKit::BrowsingContextGroup **)v11 + 168), v11, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v29 + 32) + 16));
          if (v30)
          {
            WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(*(_QWORD *)(v30 + 24), (uint64_t)v45, (uint64_t *)v51, *(_QWORD *)(v30 + 16));
            CFRelease(*(CFTypeRef *)(v29 + 8));
LABEL_22:
            v19 = v51[0];
            v51[0] = 0;
            if (v19)
            {
              do
              {
                v31 = __ldaxr((unsigned int *)v19);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, (unsigned int *)v19));
              if (!v32)
              {
                atomic_store(1u, (unsigned int *)v19);
                goto LABEL_14;
              }
            }
LABEL_25:
            v33 = (unsigned int *)*((_QWORD *)v11 + 26);
            v34 = v33 + 4;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 + 1, v34));
            result = (IPC::Encoder *)WebKit::WebProcessProxy::isResponsiveWithLazyStop(v33);
            if (v33)
              result = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v33 + 4);
            v36 = *v8;
            if (__ldaxr(v36))
            {
              __clrex();
            }
            else if (!__stxr(1u, v36))
            {
              goto LABEL_33;
            }
            result = (IPC::Encoder *)MEMORY[0x19AEABB3C](v36);
LABEL_33:
            v38 = *((_QWORD *)v36 + 1);
            v39 = v38 - 1;
            *((_QWORD *)v36 + 1) = v38 - 1;
            if (v38 == 1)
            {
              v44 = *((_QWORD *)v36 + 2);
              v41 = *((_QWORD *)v36 + 3);
              *((_QWORD *)v36 + 3) = 0;
              v40 = v44 == 0;
            }
            else
            {
              v40 = 0;
              v41 = 0;
            }
            v42 = __ldxr(v36);
            if (v42 == 1)
            {
              if (!__stlxr(0, v36))
              {
                if (v39)
                  return result;
LABEL_41:
                v43 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v43 = off_1E34ACA48;
                *(_QWORD *)(v43 + 8) = v36;
                *(_QWORD *)(v43 + 16) = v41;
                *(_BYTE *)(v43 + 24) = v40;
                v51[0] = (IPC::Encoder *)v43;
                WTF::ensureOnMainRunLoop();
                result = v51[0];
                v51[0] = 0;
                if (result)
                  return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
                return result;
              }
            }
            else
            {
              __clrex();
            }
            result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v36);
            if (v39)
              return result;
            goto LABEL_41;
          }
          CFRelease(*(CFTypeRef *)(v29 + 8));
        }
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(*((_QWORD *)v11 + 26), (uint64_t)v45, (uint64_t *)v51, *(_QWORD *)(*((_QWORD *)v11 + 4) + 1896));
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_11;
  }
  return result;
}

void WebKit::WebPageProxy::handleWheelEventReply(WebKit::WebPageProxy *a1, char a2, char a3)
{
  WebKit::WebWheelEventCoalescer *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::WebPageProxy::wheelEventCoalescer(a1);
  if (*((_QWORD *)v6 + 32) == *((_QWORD *)v6 + 33))
  {
    v7 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v8 = 136315138;
      v9 = "void WebKit::WebPageProxy::handleWheelEventReply(const WebWheelEvent &, std::optional<ScrollingNodeID>, std::"
           "optional<WheelScrollGestureState>, BOOL, BOOL)";
      _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 3760: Invalid message dispatched %s", (uint8_t *)&v8, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 26) + 144) + 98) = 1;
  }
  else
  {
    WebKit::WebPageProxy::wheelEventHandlingCompleted(a1, a2 | a3);
  }
}

void WebKit::WebPageProxy::sendKeyEvent(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  __int128 v12;
  _QWORD *v13;
  char v14;
  __int128 v15;
  char v16;

  v4 = a1[26];
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(v4, *(_QWORD *)(a1[4] + 1896), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3));
  if (v4)
    v7 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  v8 = *a2;
  if (!*a2 || v8 == 13 || v8 == 7 && *((_DWORD *)a2 + 18) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    *(_QWORD *)(a1[4] + 2240) = v9;
  }
  v10 = a1[37];
  if (!v10)
    v10 = a1[35];
  v12 = *(_OWORD *)(v10 + 272);
  v15 = v12;
  v11[0] = &v12;
  v11[1] = a2;
  v16 = 1;
  v13 = v11;
  v14 = 0;
  WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::KeyEvent>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::KeyEvent &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::KeyEvent&)#1}>((uint64_t)a1, (uint64_t)&v15, (uint64_t)&v13);
}

uint64_t WebKit::WebPageProxy::handleKeyboardEvent(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
    return 0;
  if (!*(_QWORD *)(a1 + 280))
  {
    (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 104) + 144))(*(_QWORD *)(a1 + 104), a1, a2);
    return 0;
  }
  WTF::Deque<WebKit::NativeWebKeyboardEvent,0ul>::append<WebKit::NativeWebKeyboardEvent const&>((unsigned int *)(*(_QWORD *)(a1 + 32) + 752), (uint64_t)a2);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(v5, *a2 == 7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 752);
  v10 = *(_QWORD *)(v8 + 760);
  if (v9 > v10)
    v10 += *(unsigned int *)(v8 + 776);
  if (v10 - v9 == 1)
    WebKit::WebPageProxy::sendKeyEvent((_QWORD *)a1, a2);
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  return 1;
}

unsigned int *WTF::Deque<WebKit::NativeWebKeyboardEvent,0ul>::append<WebKit::NativeWebKeyboardEvent const&>(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WebKit::WebKeyboardEvent *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (!*(_QWORD *)result)
  {
    v5 = result[6];
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_20;
    }
    else if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_20;
    }
LABEL_9:
    v6 = v5;
    v7 = ((unint64_t)v5 >> 2) + v5;
    if (v7 <= 0xF)
      v7 = 15;
    if (v7 >= 0x2AAAAAA)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WebKit::WebKeyboardEvent *)*((_QWORD *)result + 2);
    v9 = 96 * v7 + 96;
    v10 = WTF::fastMalloc((WTF *)(96 * v7 + 96));
    v3[6] = (v9 & 0xFFFFFFE0) / 0x60;
    *((_QWORD *)v3 + 2) = v10;
    v11 = *((_QWORD *)v3 + 1);
    if (*(_QWORD *)v3 <= v11)
    {
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move((WebKit::WebKeyboardEvent *)((char *)v8 + 96 * *(_QWORD *)v3), (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v11), v10 + 96 * *(_QWORD *)v3);
      if (!v8)
      {
LABEL_19:
        v4 = *((_QWORD *)v3 + 1);
        goto LABEL_20;
      }
    }
    else
    {
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move(v8, (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v11), v10);
      v12 = *(_QWORD *)v3 - v6 + v3[6];
      WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move((WebKit::WebKeyboardEvent *)((char *)v8 + 96 * *(_QWORD *)v3), (WebKit::WebKeyboardEvent *)((char *)v8 + 96 * v6), *((_QWORD *)v3 + 2) + 96 * v12);
      *(_QWORD *)v3 = v12;
      if (!v8)
        goto LABEL_19;
    }
    if (*((WebKit::WebKeyboardEvent **)v3 + 2) == v8)
    {
      *((_QWORD *)v3 + 2) = 0;
      v3[6] = 0;
    }
    WTF::fastFree(v8, v13);
    goto LABEL_19;
  }
  if (v4 + 1 == *(_QWORD *)result)
  {
    LODWORD(v5) = result[6];
    goto LABEL_9;
  }
LABEL_20:
  v14 = *((_QWORD *)v3 + 2);
  v15 = v14 + 96 * v4;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v15 = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 16) = v16;
  v17 = *(_DWORD **)(a2 + 32);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v15 + 32) = v17;
  v18 = *(_DWORD **)(a2 + 40);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v15 + 40) = v18;
  v19 = *(_DWORD **)(a2 + 48);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v15 + 48) = v19;
  v20 = *(_DWORD **)(a2 + 56);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v15 + 56) = v20;
  v21 = *(_DWORD **)(a2 + 64);
  if (v21)
    *v21 += 2;
  *(_QWORD *)(v15 + 64) = v21;
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + 72);
  result = *(unsigned int **)(a2 + 88);
  *(_QWORD *)(v14 + 96 * v4 + 88) = result;
  if (result)
    result = (unsigned int *)CFRetain(result);
  v22 = *((_QWORD *)v3 + 1);
  if (v22 == v3[6] - 1)
    v23 = 0;
  else
    v23 = v22 + 1;
  *((_QWORD *)v3 + 1) = v23;
  return result;
}

uint64_t WebKit::WebPageProxy::touchEventTrackingType(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[2208];
  v4 = v2[2208] || v2[2209] || v2[2210] || v2[2211] != 0;
  if (v3 <= v4)
    LOBYTE(v3) = v4;
  v5 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v5)
  {
    v6 = 72 * v5;
    v7 = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 12);
    do
    {
      v8 = *v7;
      v7 += 72;
      switch(v8)
      {
        case 0:
          v9 = v2[2211];
          goto LABEL_13;
        case 1:
          v9 = v2[2209];
          goto LABEL_13;
        case 2:
        case 3:
          v9 = v2[2210];
LABEL_13:
          if (v9 > v3)
            LOBYTE(v3) = v9;
          break;
        case 4:
          if ((v3 & 0xFE) == 0)
            LOBYTE(v3) = 1;
          break;
        default:
          break;
      }
      v6 -= 72;
    }
    while (v6);
  }
  return v3;
}

unsigned int *WebKit::WebPageProxy::sendPreventableTouchEvent(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22[3];
  _QWORD v23[2];
  __int128 v24[3];
  WTF *v25;
  int v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23[0] = a2;
  v23[1] = a3;
  v8 = *a4;
  if (*a4)
    v9 = v8 == 13;
  else
    v9 = 1;
  if (v9 || v8 == 7 && *((_DWORD *)a4 + 18) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2240) = v10;
  }
  v22[0] = (uint64_t *)(*(_QWORD *)(a1 + 32) + 1896);
  v22[1] = v23;
  v22[2] = (uint64_t *)a4;
  *(_QWORD *)&v24[0] = a1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v11 = *(unsigned int **)(a1 + 24);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)&v24[0] + 1) = v11;
  v13 = *((_OWORD *)a4 + 1);
  v24[1] = *(_OWORD *)a4;
  v24[2] = v13;
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v25, (uint64_t *)a4 + 4);
  v27 = *((_OWORD *)a4 + 3);
  v28 = *((_DWORD *)a4 + 16);
  v14 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v15 + 32) + 16));
    if (v16)
    {
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(_QWORD *)(v16 + 24), v22, v24, *(_QWORD *)(v16 + 16));
      CFRelease(*(CFTypeRef *)(v15 + 8));
      goto LABEL_15;
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), v22, v24, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
LABEL_15:
  v18 = v25;
  if (v25)
  {
    v25 = 0;
    v26 = 0;
    WTF::fastFree(v18, v17);
  }
  result = (unsigned int *)*((_QWORD *)&v24[0] + 1);
  *((_QWORD *)&v24[0] + 1) = 0;
  if (result)
  {
    do
    {
      v20 = __ldaxr(result);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, result));
    if (!v21)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v17);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::handlePreventableTouchEvent(uint64_t this, WebKit::NativeWebTouchEvent *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  _BYTE v48[32];

  if (*(_BYTE *)(this + 729))
    return this;
  v2 = this;
  if (!*(_BYTE *)(this + 728) || !*(_QWORD *)(this + 280))
    return this;
  kdebug_trace();
  v4 = *((unsigned int *)a2 + 11);
  if ((_DWORD)v4)
  {
    v5 = 72 * v4;
    v6 = *((_QWORD *)a2 + 4) + 4;
    do
    {
      v6 += 72;
      v7 = *(unsigned __int8 **)(v2 + 32);
      if (v7[2208] != 2)
      {
        v8 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v9 = v7[2208];
        if (v8 > v9)
          LOBYTE(v9) = v8;
        v7[2208] = v9;
      }
      if (v7[2209] != 2)
      {
        v10 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v11 = v7[2209];
        if (v10 > v11)
          LOBYTE(v11) = v10;
        v7[2209] = v11;
      }
      if (v7[2210] != 2)
      {
        v12 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v13 = v7[2210];
        if (v12 > v13)
          LOBYTE(v13) = v12;
        v7[2210] = v13;
      }
      if (v7[2211] != 2)
      {
        v14 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v15 = v7[2211];
        if (v14 > v15)
          LOBYTE(v15) = v14;
        v7[2211] = v15;
      }
      if (v7[2209] != 2)
      {
        v16 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v17 = v7[2209];
        if (v16 > v17)
          v17 = v16;
        v7[2209] = v17;
        if (v17 != 2)
        {
          v18 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
          v19 = v7[2209];
          if (v18 > v19)
            v19 = v18;
          v7[2209] = v19;
          if (v19 != 2)
          {
            v20 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
            v21 = v7[2209];
            if (v20 > v21)
              LOBYTE(v21) = v20;
            v7[2209] = v21;
          }
        }
      }
      if (v7[2210] != 2)
      {
        v22 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v23 = v7[2210];
        if (v22 > v23)
          LOBYTE(v23) = v22;
        v7[2210] = v23;
      }
      if (v7[2211] != 2)
      {
        v24 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v25 = v7[2211];
        if (v24 > v25)
          v25 = v24;
        v7[2211] = v25;
        if (v25 != 2)
        {
          v26 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
          v27 = v7[2211];
          if (v26 > v27)
            v27 = v26;
          v7[2211] = v27;
          if (v27 != 2)
          {
            v28 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
            v29 = v7[2211];
            if (v28 > v29)
              LOBYTE(v29) = v28;
            v7[2211] = v29;
          }
        }
      }
      if (v7[2209] != 2)
      {
        v30 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v31 = v7[2209];
        if (v30 > v31)
          LOBYTE(v31) = v30;
        v7[2209] = v31;
      }
      if (v7[2210] != 2)
      {
        v32 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v33 = v7[2210];
        if (v32 > v33)
          LOBYTE(v33) = v32;
        v7[2210] = v33;
      }
      if (v7[2211] != 2)
      {
        v34 = WebCore::ScrollingTree::eventTrackingTypeForPoint();
        v35 = v7[2211];
        if (v34 > v35)
          LOBYTE(v35) = v34;
        v7[2211] = v35;
      }
      v5 -= 72;
    }
    while (v5);
  }
  v36 = *(unsigned __int8 *)a2;
  if (v36 == 11)
    *(_BYTE *)(v2 + 800) = 0;
  v37 = WebKit::WebPageProxy::touchEventTrackingType(v2, (uint64_t)a2);
  if (v37 == 1)
  {
    *((_BYTE *)a2 + 56) = 0;
    WebKit::WebPageProxy::handleUnpreventableTouchEvent((WebKit::WebPageProxy *)v2, a2);
    v39 = *(unsigned __int8 *)a2;
    v48[0] = 0;
    v48[24] = 0;
    WebKit::WebPageProxy::didReceiveEvent(v2, v39, 0, (uint64_t)v48);
    v38 = v36 == 11;
  }
  else
  {
    v38 = v36 == 11;
    if (v37)
    {
      switch(v36)
      {
        case 11:
          ++*(_QWORD *)(v2 + 784);
          break;
        case 12:
          if (!*(_BYTE *)(v2 + 800))
            *(_BYTE *)(v2 + 800) = 1;
          break;
        case 13:
          ++*(_QWORD *)(v2 + 792);
          break;
      }
      WebKit::WebPageProxy::sendPreventableTouchEvent(v2, *(_QWORD *)(*(_QWORD *)(v2 + 280) + 272), *(_QWORD *)(*(_QWORD *)(v2 + 280) + 280), (unsigned __int8 *)a2);
      goto LABEL_90;
    }
  }
  if (v38)
  {
    v40 = *(_QWORD *)(v2 + 40);
    if (v40)
      v41 = *(_QWORD *)(v40 + 8);
    else
      v41 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1584))(v41);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 624))(v41, 0);
    goto LABEL_89;
  }
  if (v36 == 12)
  {
    v42 = *(_QWORD *)(v2 + 40);
    if (v42)
      v41 = *(_QWORD *)(v42 + 8);
    else
      v41 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1584))(v41);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 632))(v41, 0);
LABEL_89:
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1592))(v41);
    goto LABEL_90;
  }
  if (v36 == 13)
  {
    v43 = *(_QWORD *)(v2 + 40);
    if (v43)
      v41 = *(_QWORD *)(v43 + 8);
    else
      v41 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1584))(v41);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 640))(v41, 0);
    goto LABEL_89;
  }
LABEL_90:
  v44 = *((unsigned int *)a2 + 11);
  if ((_DWORD)v44)
  {
    v45 = 72 * v44;
    v46 = (unsigned __int8 *)(*((_QWORD *)a2 + 4) + 12);
    while (1)
    {
      v47 = *v46;
      v46 += 72;
      if ((v47 | 4) != 4)
        break;
      v45 -= 72;
      if (!v45)
        goto LABEL_94;
    }
  }
  else
  {
LABEL_94:
    *(_DWORD *)(*(_QWORD *)(v2 + 32) + 2208) = 0;
    WebKit::WebPageProxy::didReleaseAllTouchPoints(v2);
  }
  return kdebug_trace();
}

void WebKit::WebPageProxy::handleUnpreventableTouchEvent(WebKit::WebPageProxy *this, const WebKit::NativeWebTouchEvent *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      v3 = *((_QWORD *)this + 35);
      if (v3)
      {
        if (WebKit::WebPageProxy::touchEventTrackingType((uint64_t)this, (uint64_t)a2))
        {
          WebKit::WebPageProxy::sendUnpreventableTouchEvent((uint64_t)this, *(_QWORD *)(v3 + 272), *(_QWORD *)(v3 + 280), (unsigned __int8 *)a2);
          v5 = *((unsigned int *)a2 + 11);
          if ((_DWORD)v5)
          {
            v6 = 72 * v5;
            v7 = (unsigned __int8 *)(*((_QWORD *)a2 + 4) + 12);
            while (1)
            {
              v8 = *v7;
              v7 += 72;
              if ((v8 | 4) != 4)
                break;
              v6 -= 72;
              if (!v6)
                goto LABEL_10;
            }
          }
          else
          {
LABEL_10:
            *(_DWORD *)(*((_QWORD *)this + 4) + 2208) = 0;
            WebKit::WebPageProxy::didReleaseAllTouchPoints((uint64_t)this);
          }
        }
      }
    }
  }
}

void WebKit::WebPageProxy::didReceiveEvent(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  const void *v44;
  WTF::StringImpl *v45;
  CFTypeRef v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  WTF::StringImpl *v52;
  const void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  WebKit::WebWheelEventCoalescer *v57;
  CFTypeRef *v58;
  WTF::StringImpl *v59;
  CFTypeRef v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  NSObject *v72;
  _OWORD v73[2];
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  __int128 v79;
  CFTypeRef cf;
  uint8_t buf[16];
  __int128 v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  __int128 v88;
  CFTypeRef v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a2 > 0xE)
    return;
  if (((1 << a2) & 0x7FBB) == 0)
  {
    if (a2 == 2)
      goto LABEL_8;
LABEL_59:
    v57 = WebKit::WebPageProxy::wheelEventCoalescer((WebKit::WebPageProxy *)a1);
    if (*((_QWORD *)v57 + 32) != *((_QWORD *)v57 + 33))
    {
      WebKit::WebPageProxy::wheelEventHandlingCompleted((WebKit::WebPageProxy *)a1, a3);
      return;
    }
    v69 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_107;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didReceiveEvent(WebEventType, BOOL, std::optional<RemoteUserInputEventData>)";
    v70 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9544: Invalid message dispatched %s";
    goto LABEL_106;
  }
  v8 = *(_QWORD *)(a1 + 208);
  v9 = (unsigned int *)(v8 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  WebKit::ResponsivenessTimer::stop((_BYTE *)(v8 + 56));
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  if (a2 < 6)
  {
LABEL_8:
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(v11 + 840);
    v13 = *(_QWORD *)(v11 + 848);
    if (*(_BYTE *)(a4 + 24))
    {
      if (v12 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19733D64CLL);
      }
      v14 = *(_QWORD *)a4;
      v15 = *(_QWORD *)(a4 + 8);
      v16 = *(_QWORD *)(v11 + 856) + (v12 << 7);
      *(_QWORD *)(v16 + 36) = *(_QWORD *)(a4 + 16);
      buf[0] = 0;
      LOBYTE(v82) = 0;
      WebKit::WebPageProxy::sendMouseEvent(a1, v14, v15, (unsigned __int8 *)v16, (uint64_t)buf);
      if ((_BYTE)v82)
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v17);
      return;
    }
    if (v12 != v13)
    {
      v49 = (unsigned __int8 *)(*(_QWORD *)(v11 + 856) + (v12 << 7));
      v50 = *v49;
      v51 = v49[32];
      v52 = (WTF::StringImpl *)*((_QWORD *)v49 + 12);
      *((_QWORD *)v49 + 12) = 0;
      v53 = (const void *)*((_QWORD *)v49 + 14);
      *((_QWORD *)v49 + 14) = 0;
      WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct((WTF::StringImpl *)(*(_QWORD *)(v11 + 856) + (v12 << 7)), (WTF::StringImpl *)(*(_QWORD *)(v11 + 856) + (v12 << 7) + 128));
      v55 = *(_QWORD *)(v11 + 840);
      if (v55 == *(unsigned int *)(v11 + 864) - 1)
        v56 = 0;
      else
        v56 = v55 + 1;
      *(_QWORD *)(v11 + 840) = v56;
      if (v50 == a2)
      {
        if (v51 == 2)
        {
          if (a2)
          {
            if (*(_BYTE *)(a1 + 760) != 1)
              *(_BYTE *)(a1 + 760) = 0;
          }
          else
          {
            if ((_DWORD)a3)
              v61 = 2;
            else
              v61 = 3;
            *(_BYTE *)(a1 + 760) = v61;
          }
          WebKit::WebPageProxy::processContextMenuCallbacks(a1, v54);
        }
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 840) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 848))
        {
          v62 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                + 40);
          if (v62)
          {
            CFRetain(*(CFTypeRef *)(v62 + 8));
            CFRelease(*(CFTypeRef *)(v62 + 8));
          }
          v63 = *(_QWORD *)(a1 + 32);
          v64 = *(unsigned int *)(v63 + 212);
          if ((_DWORD)v64)
          {
            v65 = *(uint64_t **)(v63 + 200);
            v66 = 8 * v64;
            do
            {
              v67 = *v65++;
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
              v66 -= 8;
            }
            while (v66);
            v63 = *(_QWORD *)(a1 + 32);
          }
          WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(v63 + 200), 0);
          if (!v53)
            goto LABEL_87;
        }
        else
        {
          WebKit::WebPageProxy::processNextQueuedMouseEvent((WebKit::WebPageProxy *)a1);
          if (!v53)
            goto LABEL_87;
        }
      }
      else
      {
        v71 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::mouseEventHandlingCompleted(std::optional<WebEventType>, BOOL,"
                               " std::optional<RemoteUserInputEventData>)";
          _os_log_fault_impl(&dword_196BCC000, v71, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9439: Invalid message dispatched %s", buf, 0xCu);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
        if (!v53)
          goto LABEL_87;
      }
      CFRelease(v53);
LABEL_87:
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v68);
        else
          *(_DWORD *)v52 -= 2;
      }
      return;
    }
    v69 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::mouseEventHandlingCompleted(std::optional<WebEventType>, BOOL, std"
                           "::optional<RemoteUserInputEventData>)";
      v70 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9436: Invalid message dispatched %s";
      goto LABEL_106;
    }
    goto LABEL_107;
  }
  if (a2 - 7 >= 4)
  {
    if (a2 != 6)
      return;
    goto LABEL_59;
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 752);
  if (v19 == *(_QWORD *)(v18 + 760))
  {
    v69 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::keyEventHandlingCompleted(std::optional<WebEventType>, BOOL)";
      v70 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9465: Invalid message dispatched %s";
LABEL_106:
      _os_log_fault_impl(&dword_196BCC000, v69, OS_LOG_TYPE_FAULT, v70, buf, 0xCu);
    }
LABEL_107:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
    return;
  }
  v20 = *(_QWORD *)(v18 + 768);
  v21 = v20 + 96 * v19;
  v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)buf = *(_OWORD *)v21;
  v82 = v22;
  v23 = *(_DWORD **)(v21 + 32);
  if (v23)
    *v23 += 2;
  v83 = v23;
  v24 = *(_DWORD **)(v21 + 40);
  if (v24)
    *v24 += 2;
  v84 = v24;
  v25 = *(_DWORD **)(v21 + 48);
  if (v25)
    *v25 += 2;
  v85 = v25;
  v26 = *(_DWORD **)(v21 + 56);
  if (v26)
    *v26 += 2;
  v86 = v26;
  v27 = *(_DWORD **)(v21 + 64);
  if (v27)
    *v27 += 2;
  v87 = v27;
  v88 = *(_OWORD *)(v21 + 72);
  v28 = 3 * v19;
  v29 = v20 + 32 * v28;
  v30 = *(const void **)(v29 + 88);
  *(_QWORD *)(v29 + 88) = 0;
  v89 = v30;
  WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct((WebKit::WebKeyboardEvent *)(*(_QWORD *)(v18 + 768) + 32 * v28), (WTF::StringImpl *)(*(_QWORD *)(v18 + 768) + 32 * v28 + 96));
  v31 = *(_QWORD *)(v18 + 752);
  if (v31 == *(unsigned int *)(v18 + 776) - 1)
    v32 = 0;
  else
    v32 = v31 + 1;
  *(_QWORD *)(v18 + 752) = v32;
  if (buf[0] == a2)
  {
    v33 = *(_QWORD **)(a1 + 32);
    v34 = v33[94];
    v35 = v33[95];
    if (v34 != v35 && *(_QWORD *)(a1 + 280))
    {
      v36 = v33[96];
      v37 = v36 + 96 * v34;
      v38 = *(_OWORD *)(v37 + 16);
      v73[0] = *(_OWORD *)v37;
      v73[1] = v38;
      v39 = *(_DWORD **)(v37 + 32);
      if (v39)
        *v39 += 2;
      v74 = v39;
      v40 = *(_DWORD **)(v37 + 40);
      if (v40)
        *v40 += 2;
      v75 = v40;
      v41 = *(_DWORD **)(v37 + 48);
      if (v41)
        *v41 += 2;
      v76 = v41;
      v42 = *(_DWORD **)(v37 + 56);
      if (v42)
        *v42 += 2;
      v77 = v42;
      v43 = *(_DWORD **)(v37 + 64);
      if (v43)
        *v43 += 2;
      v78 = v43;
      v79 = *(_OWORD *)(v37 + 72);
      v44 = *(const void **)(v36 + 96 * v34 + 88);
      cf = v44;
      if (v44)
        CFRetain(v44);
      WebKit::WebPageProxy::sendKeyEvent((_QWORD *)a1, (unsigned __int8 *)v73);
      v46 = cf;
      cf = 0;
      if (v46)
        CFRelease(v46);
      WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v73, v45);
    }
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v47 = *(_QWORD *)(a1 + 40);
    if (v47)
      v48 = *(_QWORD *)(v47 + 8);
    else
      v48 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 1584))(v48);
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v48 + 608))(v48, buf, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 1592))(v48);
    if ((a3 & 1) == 0)
      (*(void (**)(_QWORD, uint64_t, uint8_t *))(**(_QWORD **)(a1 + 104) + 144))(*(_QWORD *)(a1 + 104), a1, buf);
    if (v34 == v35)
    {
      v58 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v58)
      {
        CFRetain(v58[1]);
        WebKit::WebAutomationSession::keyboardEventsFlushedForPage((WebKit::WebAutomationSession *)v58, (const WebKit::WebPageProxy *)a1);
        CFRelease(v58[1]);
      }
    }
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }
  else
  {
    v72 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v73[0]) = 136315138;
      *(_QWORD *)((char *)v73 + 4) = "void WebKit::WebPageProxy::keyEventHandlingCompleted(std::optional<WebEventType>, BOOL)";
      _os_log_fault_impl(&dword_196BCC000, v72, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9468: Invalid message dispatched %s", (uint8_t *)v73, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
  }
  v60 = v89;
  v89 = 0;
  if (v60)
    CFRelease(v60);
  WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)buf, v59);
}

uint64_t WebKit::WebPageProxy::resetPotentialTapSecurityOrigin(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResetPotentialTapSecurityOrigin>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::sendUnpreventableTouchEvent(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t *v18[3];
  _QWORD v19[2];
  __int128 v20[3];
  WTF *v21;
  int v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v19[0] = a2;
  v19[1] = a3;
  v8 = *a4;
  if (*a4)
    v9 = v8 == 13;
  else
    v9 = 1;
  if (v9 || v8 == 7 && *((_DWORD *)a4 + 18) != 27)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2240) = v10;
  }
  v18[0] = (uint64_t *)(*(_QWORD *)(a1 + 32) + 1896);
  v18[1] = v19;
  v18[2] = (uint64_t *)a4;
  *(_QWORD *)&v20[0] = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((_QWORD *)&v20[0] + 1) = a1;
  v11 = *((_OWORD *)a4 + 1);
  v20[1] = *(_OWORD *)a4;
  v20[2] = v11;
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v21, (uint64_t *)a4 + 4);
  v23 = *((_OWORD *)a4 + 3);
  v24 = *((_DWORD *)a4 + 16);
  v12 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(_QWORD *)(v14 + 24), v18, v20, *(_QWORD *)(v14 + 16));
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_13;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), v18, v20, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
LABEL_13:
  v16 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v16, v15);
  }
  v17 = *((_QWORD *)&v20[0] + 1);
  *((_QWORD *)&v20[0] + 1) = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
}

uint64_t WebKit::WebPageProxy::centerSelectionInVisibleArea(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CenterSelectionInVisibleArea>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  unsigned int *result;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  char v34;
  IPC::Encoder *v35;

  v4 = WTF::fastMalloc((WTF *)0x10);
  v5 = (unsigned int *)v4;
  *(_DWORD *)v4 = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 8) = v6;
  do
    v7 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v7 + 1, (unsigned int *)v4));
  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2134;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v35 = (IPC::Encoder *)v10;
  v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = off_1E34D4910;
  *((_QWORD *)v11 + 1) = v5;
  v32 = v11;
  v33 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v34 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v35, 0, (uint64_t)&v32, 1);
  if (v34)
  {
    v13 = (uint64_t)v32;
    v32 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  v17 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
  v18 = (unsigned int *)(v17 + 16);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 + 1, v5));
  v21 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v21 = 367;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 528) = v21 + 16;
  *(_QWORD *)(v21 + 536) = v21 + 16;
  *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v21 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
  v35 = (IPC::Encoder *)v21;
  v22 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v22 = off_1E34D4938;
  *((_QWORD *)v22 + 1) = v5;
  v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v32 = v22;
  v33 = v23;
  v34 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v17, &v35, 0, (uint64_t)&v32, 1);
  if (v34)
  {
    v25 = (uint64_t)v32;
    v32 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v24);
    WTF::fastFree(v27, v28);
  }
  result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18);
  do
  {
    v30 = __ldaxr(v5);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v5));
  if (!v31)
  {
    atomic_store(1u, v5);
    v32 = v5;
    return (unsigned int *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v32);
  }
  return result;
}

void WebKit::WebPageProxy::receivedPolicyDecision(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, API::WebsitePolicies **a4, _QWORD *a5, int a6, uint64_t a7, __int16 *a8, uint64_t *a9)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::WebProcessPool *v27;
  WebKit::WebsiteDataStore *v28;
  const WebCore::ResourceRequest *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  const void *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  const char **v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  const WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WebKit::WebProcessPool *v59;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  char v69;
  char v70;
  uint64_t v71;
  _BYTE v72[15];
  char v73;
  _QWORD v74[2];
  char v75;
  uint64_t v76;
  CFTypeRef v77;
  unint64_t v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int16 v86;
  char v87;
  char v88;
  uint64_t v89;
  _QWORD v90[2];
  char v91;
  const char **v92;
  char v93;
  __int16 v94;
  WTF::StringImpl *v95;
  char v96;
  CFTypeRef cf;
  __int128 v98;
  __int128 v99;
  WTF::StringImpl *v100[10];

  v100[7] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
  {
    v17 = (int)a2;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(v18 + 960);
    if (v19)
      CFRetain(*(CFTypeRef *)(v19 + 8));
    v74[0] = v19;
    v74[1] = v18 + 944;
    ++*(_DWORD *)(v18 + 1316);
    if (a3 && v17 == 2 && !a6)
    {
      v20 = *(_QWORD **)(a1 + 32);
      if (*(_QWORD *)(a3 + 16) == v20[122])
      {
        *(_BYTE *)(v18 + 1312) = 1;
        v20[143] = 0;
        v21 = (WTF::StringImpl *)v20[144];
        v20[144] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 != 2)
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            *(_DWORD *)v21 -= 2;
LABEL_50:
            LOBYTE(v62) = 0;
            v73 = 0;
            if (*a4)
            {
              API::WebsitePolicies::data(*a4, (uint64_t)&v76);
              std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)&v62, &v76);
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v76, v46);
            }
            LOWORD(v76) = *(_WORD *)(a1 + 1256);
            BYTE2(v76) = v17;
            if (a3)
              v47 = *(const void **)(a3 + 16);
            else
              v47 = 0;
            v77 = v47;
            v78 = v24 | v23;
            v79 = v22;
            LOBYTE(v80) = 0;
            v91 = 0;
            if (v73)
            {
              v48 = v62;
              v62 = 0u;
              v80 = v48;
              *(_QWORD *)&v48 = v63;
              v63 = 0;
              v81 = v48;
              v49 = v64;
              v64 = 0;
              v82 = v49;
              *(_QWORD *)&v48 = v65;
              v65 = 0;
              v83 = v48;
              v50 = v66;
              v66 = 0u;
              v84 = v50;
              v51 = v67;
              v67 = 0u;
              v85 = v51;
              v87 = v69;
              v86 = v68;
              v88 = v70;
              *(_QWORD *)((char *)v90 + 7) = *(_QWORD *)&v72[7];
              v52 = v71;
              v71 = 0;
              v89 = v52;
              v90[0] = *(_QWORD *)v72;
              v91 = 1;
            }
            LOBYTE(v92) = 0;
            v93 = 0;
            if (*(_BYTE *)(a7 + 8))
            {
              v53 = *(const char ***)a7;
              *(_QWORD *)a7 = 0;
              v92 = v53;
              v93 = 1;
            }
            LOBYTE(v94) = 0;
            v96 = 0;
            if (*((_BYTE *)a8 + 16))
            {
              v94 = *a8;
              v54 = (WTF::StringImpl *)*((_QWORD *)a8 + 1);
              *((_QWORD *)a8 + 1) = 0;
              v95 = v54;
              v96 = 1;
            }
            v55 = *a9;
            *a9 = 0;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v55 + 16))(v55, &v76);
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
            if (v96)
            {
              v58 = v95;
              v95 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v56);
                else
                  *(_DWORD *)v58 -= 2;
              }
            }
            if (v93)
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v92);
            if (v91)
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v80, v56);
            if (v73)
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v62, v56);
            WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v74, (uint64_t)v56, v57);
            return;
          }
          WTF::StringImpl::destroy(v21, a2);
        }
      }
    }
    else if (v17 == 1)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 512);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
          v27 = (WebKit::WebProcessPool *)(v26 - 16);
        else
          v27 = 0;
        v59 = v27;
      }
      else
      {
        v59 = 0;
      }
      v28 = *(WebKit::WebsiteDataStore **)(a1 + 264);
      v29 = (const WebCore::ResourceRequest *)(*a5 + 40);
      if (a3)
      {
        LOWORD(v76) = *(_WORD *)(a3 + 3072);
        WebCore::ResourceRequest::ResourceRequest(&v77, (const WebCore::ResourceRequest *)(a3 + 3080));
        LOBYTE(v98) = 0;
        DWORD2(v99) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v98, a3 + 3280);
        v30 = *(WTF::StringImpl **)(a3 + 3312);
        if (v30)
          *(_DWORD *)v30 += 2;
        v100[0] = v30;
        v31 = *(_OWORD *)(a3 + 3320);
        *(_OWORD *)&v100[3] = *(_OWORD *)(a3 + 3336);
        *(_OWORD *)((char *)&v100[4] + 6) = *(_OWORD *)(a3 + 3350);
        *(_OWORD *)&v100[1] = v31;
      }
      else
      {
        LOWORD(v76) = 0;
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v77);
        LOBYTE(v100[5]) = 0;
        LODWORD(v100[6]) = 0;
        WORD2(v100[6]) = 0;
        v98 = 0u;
        v99 = 0u;
        memset(v100, 0, 25);
      }
      WebKit::WebProcessPool::createDownloadProxy(v59, v28, v29, (WebKit::WebPageProxy *)a1, (const WebKit::FrameInfoData *)&v76, (uint64_t)&v62);
      v33 = v100[0];
      v100[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (DWORD2(v99) != -1)
        ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v99)])(&v75, &v98);
      DWORD2(v99) = -1;
      v34 = cf;
      cf = 0;
      if (v34)
        CFRelease(v34);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v77);
      v35 = v62;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
      v36 = *(unsigned int **)(a1 + 24);
      if (v36)
      {
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      v38 = *a5;
      *a5 = 0;
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v39 = &off_1E34D4988;
      v39[1] = a1;
      v39[2] = v36;
      v39[3] = v38;
      v40 = *(_QWORD *)(v35 + 328);
      *(_QWORD *)(v35 + 328) = v39;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      if (a3)
      {
        v41 = v62;
        *(_BYTE *)(v62 + 312) = *(_BYTE *)(a3 + 536);
        v76 = *(_QWORD *)(a3 + 448);
        v42 = *(const void **)(a3 + 456);
        *(_QWORD *)(a3 + 448) = 0;
        *(_QWORD *)(a3 + 456) = 0;
        v77 = v42;
        WebKit::DownloadProxy::setRedirectChain(v41, &v76);
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v43);
      }
      v44 = v62;
      v45 = *(_QWORD *)(v62 + 56);
      v24 = v45 & 0xFFFFFFFFFFFFFF00;
      *(_QWORD *)&v62 = 0;
      CFRelease(*(CFTypeRef *)(v44 + 8));
      v23 = v45;
      v22 = 1;
      goto LABEL_50;
    }
    v22 = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_50;
  }
  LOWORD(v76) = 0;
  BYTE2(v76) = 2;
  v77 = 0;
  LOBYTE(v78) = 0;
  v79 = 0;
  LOBYTE(v80) = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  v93 = 0;
  LOBYTE(v94) = 0;
  v96 = 0;
  v9 = *a9;
  *a9 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v76);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v96)
  {
    v11 = v95;
    v95 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  if (v93)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v92);
  if (v91)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v80, v10);
}

_QWORD *WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[13];
  a1[13] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 9), a2);
  v4 = a1[8];
  a1[8] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  v5 = a1[7];
  a1[7] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[4];
  a1[4] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

WTF *WebKit::DownloadProxy::setRedirectChain(uint64_t a1, _DWORD *a2)
{
  WTF::StringImpl **v3;
  unsigned int v4;

  v3 = (WTF::StringImpl **)(a1 + 296);
  v4 = *(_DWORD *)(a1 + 308);
  if (v4)
    WTF::VectorDestructor<true,WTF::URL>::destruct(*v3, (WTF::StringImpl *)((char *)*v3 + 40 * v4));
  return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

void WebKit::WebPageProxy::commitProvisionalPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::ResourceRequestBase *a6, uint64_t a7, const WTF::String *a8, __int16 a9, const void **a10, __int16 a11, char a12, unsigned __int8 a13, unsigned __int8 a14, CFTypeRef **a15)
{
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  CFTypeRef *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  const WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int BoolValueForKey;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  WebKit::BrowsingContextGroup *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  WTF *v92;
  uint64_t v93;
  const WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  const char *v106;
  const WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  const WTF::StringImpl *v112;
  char shouldUseBackForwardCache;
  NSObject *v114;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  const WTF::StringImpl *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  WebKit::WebProcessPool *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v161;
  WebKit::BrowsingContextGroup *v162;
  CFTypeRef *v163;
  uint64_t v164;
  _BYTE buf[22];
  __int16 v166;
  unint64_t v167;
  __int16 v168;
  int v169;
  __int16 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v20 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    v23 = *(_QWORD *)(v21 + 744);
    v24 = *(_QWORD *)(v21 + 1896);
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1120) + 40) + 16) + 136);
    if (v25)
      LODWORD(v25) = *(_DWORD *)(v25 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v23;
    v166 = 2048;
    v167 = v24;
    v168 = 1024;
    v169 = v22;
    v170 = 1024;
    LODWORD(v171) = v25;
    _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::commitProvisionalPage: newPID=%i", buf, 0x2Cu);
  }
  v26 = *(CFTypeRef **)(a1 + 280);
  if (v26)
  {
    CFRetain(v26[1]);
    v28 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v28 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v27))WebKit::WebFrameProxy::removeChildFrames((WebKit::WebFrameProxy *)v26, v29);
  }
  if (*(_BYTE *)(a1 + 1194))
  {
    buf[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(*(_QWORD *)(a1 + 208), (uint64_t)buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
  }
  WebKit::WebPageProxy::resetStateAfterProcessTermination(a1, 7);
  WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)a1);
  v30 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 88));
  v31 = v30;
  v161 = a5;
  if (!v30)
    goto LABEL_16;
  CFRetain(*(CFTypeRef *)(v30 + 8));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1120) + 306))
    goto LABEL_16;
  v96 = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *(unsigned int **)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = 0;
  if (!v97)
    goto LABEL_101;
  do
  {
    v98 = __ldaxr(v97);
    v99 = v98 - 1;
  }
  while (__stlxr(v99, v97));
  if (!v99)
  {
    atomic_store(1u, v97);
    WTF::fastFree((WTF *)v97, v32);
    if (!v26)
      goto LABEL_16;
  }
  else
  {
LABEL_101:
    if (!v26)
      goto LABEL_16;
  }
  if (*(_QWORD *)(a1 + 288))
  {
    v100 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v100 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v33))
    {
      v101 = qword_1ECE71668;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
        v102 = *(_QWORD *)(a1 + 32);
        v103 = *(_QWORD *)(v102 + 744);
        v104 = *(_QWORD *)(v102 + 1896);
        v105 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
        if (v105)
          LODWORD(v105) = *(_DWORD *)(v105 + 108);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v103;
        v166 = 2048;
        v167 = v104;
        v168 = 1024;
        v169 = v105;
        v170 = 1024;
        LODWORD(v171) = v105;
        v106 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspendin"
               "g current page for process pid %i because it has an opener.";
LABEL_145:
        _os_log_impl(&dword_196BCC000, v101, OS_LOG_TYPE_DEFAULT, v106, buf, 0x2Cu);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
  }
  if (*(_BYTE *)(a1 + 1049))
  {
    v34 = *(_QWORD *)(v31 + 472);
    if (!v34)
    {
      v101 = qword_1ECE71668;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      v153 = *(_QWORD *)(a1 + 32);
      v154 = *(_QWORD *)(v153 + 744);
      v155 = *(_QWORD *)(v153 + 1896);
      v156 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v156)
        LODWORD(v156) = *(_DWORD *)(v156 + 108);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v154;
      v166 = 2048;
      v167 = v155;
      v168 = 1024;
      v169 = v156;
      v170 = 1024;
      LODWORD(v171) = v156;
      v106 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending "
             "current page for process pid %i there is no associated WebBackForwardListItem";
      goto LABEL_145;
    }
    CFRetain(*(CFTypeRef *)(v34 + 8));
    v108 = *(_QWORD *)(a1 + 592);
    v109 = *(_QWORD *)(v108 + 16);
    v157 = v34;
    if (!v109 || !*(_QWORD *)(v109 + 8) || !*(_BYTE *)(v108 + 48))
      goto LABEL_117;
    v110 = *(_QWORD *)(v108 + 40);
    if (v110 >= *(unsigned int *)(v108 + 36))
    {
      __break(0xC471u);
      goto LABEL_170;
    }
    if (v34 == *(_QWORD *)(*(_QWORD *)(v108 + 24) + 8 * v110))
    {
      v114 = qword_1ECE71668;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
        v149 = *(_QWORD *)(a1 + 32);
        v150 = *(_QWORD *)(v149 + 744);
        v151 = *(_QWORD *)(v149 + 1896);
        v152 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
        if (v152)
          LODWORD(v152) = *(_DWORD *)(v152 + 108);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v150;
        v166 = 2048;
        v167 = v151;
        v168 = 1024;
        v169 = v152;
        v170 = 1024;
        LODWORD(v171) = v152;
        v148 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspendin"
               "g current page for process pid %i because this is a client-side redirect";
        goto LABEL_160;
      }
    }
    else
    {
LABEL_117:
      if ((WTF::equal(*(WTF **)(v34 + 56), *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 32) + 1000), v107) & 1) == 0)
      {
        v139 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_ERROR))
        {
          v140 = *(_QWORD *)(a1 + 32);
          v141 = *(_QWORD *)(v140 + 744);
          v142 = *(_QWORD *)(v140 + 1896);
          v143 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
          if (v143)
            LODWORD(v143) = *(_DWORD *)(v143 + 108);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v141;
          v166 = 2048;
          v167 = v142;
          v168 = 1024;
          v169 = v143;
          v170 = 1024;
          LODWORD(v171) = v143;
          _os_log_error_impl(&dword_196BCC000, v139, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending current page for process pid %i because fromItem's URL does not match the page URL.", buf, 0x2Cu);
        }
        goto LABEL_161;
      }
      shouldUseBackForwardCache = WebKit::WebPageProxy::shouldUseBackForwardCache((WebKit::WebPageProxy *)a1, v111, v112);
      v114 = qword_1ECE71668;
      v115 = os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT);
      if ((shouldUseBackForwardCache & 1) != 0)
      {
        if (v115)
        {
          v116 = *(_QWORD *)(a1 + 32);
          v117 = *(_QWORD *)(v116 + 744);
          v118 = *(_QWORD *)(v116 + 1896);
          v119 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
          if (v119)
            LODWORD(v119) = *(_DWORD *)(v119 + 108);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v117;
          v166 = 2048;
          v167 = v118;
          v168 = 1024;
          v169 = v119;
          v170 = 1024;
          LODWORD(v171) = v119;
          _os_log_impl(&dword_196BCC000, v114, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Suspending current page for process pid %i", buf, 0x2Cu);
        }
        WebKit::FrameLoadState::didSuspend((WebKit::FrameLoadState *)(v26 + 5));
        v120 = *(_QWORD *)(a1 + 208);
        v121 = (unsigned int *)(v120 + 16);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 + 1, v121));
        v163 = v26;
        v164 = v120;
        v123 = WTF::fastMalloc((WTF *)0x48);
        *(_DWORD *)v123 = 1;
        *(_OWORD *)(v123 + 8) = 0u;
        *(_OWORD *)(v123 + 24) = 0u;
        *(_OWORD *)(v123 + 40) = 0u;
        *(_OWORD *)(v123 + 56) = 0u;
        v162 = *(WebKit::BrowsingContextGroup **)(a1 + 1344);
        *(_QWORD *)(a1 + 1344) = v123;
        v124 = WTF::fastMalloc((WTF *)0x98);
        *(_QWORD *)buf = WebKit::SuspendedPageProxy::SuspendedPageProxy(v124, a1, &v164, (uint64_t *)&v163, (uint64_t *)&v162, 0);
        if (v162)
          WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v162, v125);
        if (v163)
          CFRelease(v163[1]);
        if (v164)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v164 + 16));
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v124 + 8), v124);
        v128 = *(unsigned int **)(v124 + 8);
        if (v128)
        {
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 + 1, v128));
        }
        v130 = *(unsigned int **)(a1 + 1136);
        *(_QWORD *)(a1 + 1136) = v128;
        if (v130)
        {
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            atomic_store(1u, v130);
            WTF::fastFree((WTF *)v130, v126);
          }
        }
        if ((WebKit::WebPageProxy::shouldUseBackForwardCache((WebKit::WebPageProxy *)a1, (uint64_t)v126, v127) & 1) != 0)
        {
          v133 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24));
          WebKit::WebBackForwardCache::addEntry(*((_QWORD *)v133 + 95), v34, (uint64_t *)buf);
          v134 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (!v134)
          {
LABEL_140:
            v26 = 0;
            LOBYTE(v34) = 1;
LABEL_162:
            CFRelease(*(CFTypeRef *)(v157 + 8));
            goto LABEL_17;
          }
        }
        else
        {
          v134 = *(_QWORD *)(a1 + 1128);
          *(_QWORD *)(a1 + 1128) = *(_QWORD *)buf;
          if (!v134)
            goto LABEL_140;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
        goto LABEL_140;
      }
      if (v115)
      {
        v144 = *(_QWORD *)(a1 + 32);
        v145 = *(_QWORD *)(v144 + 744);
        v146 = *(_QWORD *)(v144 + 1896);
        v147 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
        if (v147)
          LODWORD(v147) = *(_DWORD *)(v147 + 108);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v145;
        v166 = 2048;
        v167 = v146;
        v168 = 1024;
        v169 = v147;
        v170 = 1024;
        LODWORD(v171) = v147;
        v148 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspendin"
               "g current page for process pid %i the back / forward cache is disabled";
LABEL_160:
        _os_log_impl(&dword_196BCC000, v114, OS_LOG_TYPE_DEFAULT, v148, buf, 0x2Cu);
      }
    }
LABEL_161:
    LOBYTE(v34) = 0;
    goto LABEL_162;
  }
  v101 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v135 = *(_QWORD *)(a1 + 32);
    v136 = *(_QWORD *)(v135 + 744);
    v137 = *(_QWORD *)(v135 + 1896);
    v138 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v138)
      LODWORD(v138) = *(_DWORD *)(v138 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v136;
    v166 = 2048;
    v167 = v137;
    v168 = 1024;
    v169 = v138;
    v170 = 1024;
    LODWORD(v171) = v138;
    v106 = "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspendCurrentPageIfPossible: Not suspending cu"
           "rrent page for process pid %i because has not committed any load yet";
    goto LABEL_145;
  }
LABEL_16:
  LOBYTE(v34) = 0;
LABEL_17:
  v35 = *(_QWORD *)(a1 + 208);
  v36 = (unsigned int *)(v35 + 16);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 + 1, v36));
  WebKit::WebProcessProxy::removeWebPage(v35, (WebKit::WebPageProxy *)a1, *(_QWORD *)(a1 + 264) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1120) + 40) + 16) + 752));
  if (v35)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v35 + 16));
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 376);
  if (v39)
  {
    v40 = WTF::fastMalloc((WTF *)0x70);
    v41 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v40, (_QWORD **)v39);
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v41 + 1), v39 + 8);
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v40 + 24, v39 + 24);
    v42 = *(_DWORD **)(v39 + 40);
    if (v42)
      *v42 += 2;
    *(_QWORD *)(v40 + 40) = v42;
    v43 = *(_DWORD **)(v39 + 48);
    if (v43)
      *v43 += 2;
    *(_QWORD *)(v40 + 48) = v43;
    v44 = *(_DWORD **)(v39 + 56);
    if (v44)
      *v44 += 2;
    *(_QWORD *)(v40 + 56) = v44;
    v45 = *(_DWORD **)(v39 + 64);
    if (v45)
      *v45 += 2;
    *(_QWORD *)(v40 + 64) = v45;
    v46 = *(_BYTE *)(v39 + 74);
    *(_WORD *)(v40 + 72) = *(_WORD *)(v39 + 72);
    *(_BYTE *)(v40 + 74) = v46;
    *(_BYTE *)(v40 + 80) = *(_BYTE *)(v39 + 80);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v40 + 88), (_QWORD **)(v39 + 88));
    v47 = *(_QWORD *)(v39 + 96);
    *(_QWORD *)(v40 + 103) = *(_QWORD *)(v39 + 103);
    *(_QWORD *)(v40 + 96) = v47;
    std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(a1 + 1352), (WTF::StringImpl *)v40);
  }
  if ((v34 & 1) == 0)
  {
    v48 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v49 = *(_QWORD *)(a1 + 288);
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v48 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v38);
    v51 = *(_QWORD *)(a1 + 208);
    if (!BoolValueForKey || !v49 || *(_QWORD *)(*(_QWORD *)(v49 + 32) + 16) != v51)
    {
      buf[0] = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(v51, (uint64_t)buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
    }
  }
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_QWORD *)(v52 + 1896);
  v54 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  v55 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v56 = *(_QWORD *)(v52 + 744);
    v57 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v57)
      LODWORD(v57) = *(_DWORD *)(v57 + 108);
    v58 = *(_QWORD *)(v54 + 32);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v56;
    v166 = 2048;
    v167 = v53;
    v168 = 1024;
    v169 = v57;
    v170 = 2048;
    v171 = v58;
    _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::swapToProvisionalPage: newWebPageID=%llu", buf, 0x30u);
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v54 + 40) + 16);
  v60 = (unsigned int *)(v59 + 16);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 + 1, v60));
  v62 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v59;
  if (v62)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v62 + 16));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896) = *(_QWORD *)(v54 + 32);
  v63 = *(_QWORD *)(a1 + 40);
  if (v63)
    v64 = *(_QWORD *)(v63 + 8);
  else
    v64 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 1584))(v64);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 1776))(v64);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 1592))(v64);
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 752);
  CFRetain(*(CFTypeRef *)(v65 + 8));
  v66 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v65;
  if (v66)
    CFRelease(*(CFTypeRef *)(v66 + 8));
  v67 = *(_QWORD *)(v54 + 80);
  if (v67)
  {
    CFRetain(*(CFTypeRef *)(v67 + 8));
    CFRelease(*(CFTypeRef *)(v67 + 8));
    v68 = *(_QWORD *)(v54 + 80);
    if (v68)
      CFRetain(*(CFTypeRef *)(v68 + 8));
    v69 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v68;
    if (v69)
      CFRelease(*(CFTypeRef *)(v69 + 8));
  }
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v54 + 408);
  v70 = *(_QWORD *)(a1 + 1176);
  if (v70)
  {
    v71 = (unsigned int *)(v70 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
    v73 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
    v74 = v73 >= 0 || v73 == -1;
    if (*(_QWORD *)(v70 + 16) == a1)
      *(_BYTE *)(v70 + 12) = v74;
    do
    {
      v75 = __ldaxr(v71);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v71));
    if (!v76)
    {
      atomic_store(1u, (unsigned int *)(v70 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
  }
  *(_BYTE *)(a1 + 728) = 1;
  v77 = *(_QWORD *)(v54 + 64);
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)buf = v77;
  WebKit::WebPageProxy::setDrawingArea(a1, (WebKit::DrawingAreaProxy **)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  v79 = *(_QWORD *)(v54 + 72);
  if (v79)
    CFRetain(*(CFTypeRef *)(v79 + 8));
  v80 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v79;
  if (v80)
    CFRelease(*(CFTypeRef *)(v80 + 8));
  v81 = *(_DWORD **)(v54 + 48);
  ++*v81;
  v82 = *(WebKit::BrowsingContextGroup **)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = v81;
  if (v82)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v82, v78);
  v83 = *(_QWORD *)(a1 + 208);
  v84 = (unsigned int *)(v83 + 16);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 + 1, v84));
  WebKit::WebProcessProxy::addExistingWebPage(v83, (WebKit::WebPageProxy *)a1, 0);
  if (v83)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v83 + 16));
  WebKit::WebPageProxy::addAllMessageReceivers((WebKit::WebPageProxy *)a1);
  WebKit::WebPageProxy::finishAttachingToWebProcess(a1, 1);
  v86 = *(_QWORD *)(a1 + 32);
  v87 = ~*(_DWORD *)(v86 + 1896);
  *(_DWORD *)(a1 + 752) = v87;
  *(_BYTE *)(a1 + 756) = 1;
  LOBYTE(v164) = 0;
  BYTE4(v164) = 0;
  v88 = *(_QWORD *)(a1 + 184);
  if (!v88)
  {
    goto LABEL_83;
  }
  v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 80))(v88);
  LODWORD(v164) = v89;
  BYTE4(v164) = BYTE4(v89);
  if (!*(_BYTE *)(a1 + 756))
  {
LABEL_170:
    __break(1u);
    return;
  }
  v87 = *(_DWORD *)(a1 + 752);
  v86 = *(_QWORD *)(a1 + 32);
LABEL_83:
  *(_DWORD *)buf = v87;
  *(_QWORD *)&buf[8] = &v164;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(*(_QWORD *)(a1 + 208), (uint64_t)buf, *(_QWORD *)(v86 + 1896), 0);
  v92 = *(WTF **)(v54 + 384);
  v93 = *(unsigned int *)(v54 + 396);
  *(_QWORD *)(v54 + 384) = 0;
  *(_QWORD *)(v54 + 392) = 0;
  if ((_DWORD)v93)
    WebKit::WebPageProxy::registerWebProcessAccessibilityToken(a1, (uint64_t)v92, v93, 0, 0);
  if (v92)
    WTF::fastFree(v92, v91);
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  WebKit::WebPageProxy::didCommitLoadForFrame(a1, a2, a3, a4, v161, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  v95 = *(_QWORD *)(a1 + 224);
  if ((v90[2240] & 1) == 0)
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    v90[2240] = 1;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v95 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v94) & 1) == 0)WebKit::WebPageInspectorController::didCommitProvisionalPage(*(_QWORD *)(a1 + 1072), v53, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
  if (v31)
    CFRelease(*(CFTypeRef *)(v31 + 8));
  if (v26)
    CFRelease(v26[1]);
}

void WebKit::WebPageProxy::resetStateAfterProcessTermination(_BOOL8 this, int a2)
{
  WebKit::WebPageProxy *v3;
  NSObject *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebKit::WebPasteboardProxy *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WebKit::WebKeyboardEvent *v49;
  uint64_t v50;
  WebKit::WebKeyboardEvent *v51;
  WTF::StringImpl *v52;
  void *v53;
  WTF *v54;
  WebKit::WebWheelEventCoalescer *v55;
  void *v56;
  WebKit::RemoteScrollingCoordinatorProxy *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const WTF::StringImpl *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  CFTypeRef *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81[5];
  WTF::StringImpl *v82;
  uint8_t buf[32];
  _BYTE v84[32];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103[8];
  uint64_t v104;

  v3 = (WebKit::WebPageProxy *)this;
  v104 = *MEMORY[0x1E0C80C00];
  if (a2 != 7)
  {
    v4 = qword_1ECE71C68;
    this = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR);
    if (this)
    {
      v74 = *((_QWORD *)v3 + 4);
      v75 = *(_QWORD *)(*((_QWORD *)v3 + 26) + 136);
      if (v75)
      {
        LODWORD(v75) = *(_DWORD *)(v75 + 108);
        if (*((_BYTE *)v3 + 729))
          v76 = 0;
        else
          v76 = v75;
      }
      else
      {
        v76 = 0;
      }
      v77 = *(_QWORD *)(v74 + 744);
      v78 = *(_QWORD *)(v74 + 1896);
      v79 = "ExceededMemoryLimit";
      switch(a2)
      {
        case 0:
          break;
        case 1:
          v79 = "ExceededCPULimit";
          break;
        case 2:
          v79 = "RequestedByClient";
          break;
        case 3:
          v79 = "IdleExit";
          break;
        case 4:
          v79 = "Unresponsive";
          break;
        case 5:
          v79 = "Crash";
          break;
        case 6:
          v79 = "ExceededProcessCountLimit";
          break;
        case 8:
          v79 = "RequestedByNetworkProcess";
          break;
        case 9:
          v79 = "RequestedByGPUProcess";
          break;
        default:
          v79 = (const char *)&str_10_5;
          break;
      }
      *(_DWORD *)buf = 134219266;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v77;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v78;
      *(_WORD *)v84 = 1024;
      *(_DWORD *)&v84[2] = v75;
      *(_WORD *)&v84[6] = 1024;
      *(_DWORD *)&v84[8] = v76;
      *(_WORD *)&v84[12] = 2082;
      *(_QWORD *)&v84[14] = v79;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidTerminate: (pid %d), reason=%{public}s", buf, 0x36u);
    }
  }
  if (*(_BYTE *)(*((_QWORD *)v3 + 26) + 760))
  {
    WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)this);
    v81[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v81);
    WebKit::WebPageProxy::currentURL(v3, &v80);
    MEMORY[0x19AEABB24](buf, v81, &v80, 0);
    WTF::URL::host((WTF::URL *)buf);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    v6 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v80;
    v80 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v81[0];
    v81[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v82;
    if (v82)
    {
      if (!*((_DWORD *)v82 + 1))
      {
        v82 = 0;
LABEL_27:
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v5);
        else
          *(_DWORD *)v9 -= 2;
        goto LABEL_30;
      }
      WebCore::DiagnosticLoggingKeys::domainCausingJetsamKey(v82);
      v10 = *(_QWORD *)(*((_QWORD *)v3 + 33) + 24);
      if ((v10 & 0x8000000000000000) == 0 || v10 == -1)
      {
        v11 = *((_QWORD *)v3 + 16);
        if (v11)
          (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v11 + 40))(v11, v3, buf, &v82);
      }
      v12 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v5);
        else
          *(_DWORD *)v12 -= 2;
      }
      v9 = v82;
      v82 = 0;
      if (v9)
        goto LABEL_27;
    }
  }
LABEL_30:
  if (*((_BYTE *)v3 + 729) || !*((_BYTE *)v3 + 728))
    goto LABEL_83;
  v13 = *((_QWORD *)v3 + 5);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
  *((_BYTE *)v3 + 1032) = 0;
  WebKit::WebPageProxy::ProcessActivityState::reset((WebKit::ProcessThrottlerActivity **)v3 + 66);
  v15 = *((_QWORD *)v3 + 4);
  v16 = *(_QWORD *)(v15 + 920);
  *(_QWORD *)(v15 + 920) = 0;
  if (v16)
  {
    v17 = *(uint64_t **)v16;
    v18 = *(_QWORD *)(v16 + 8) - 1;
    *(_QWORD *)(v16 + 8) = v18;
    if (v17)
    {
      v19 = *v17;
      if (!*v17)
        goto LABEL_42;
      v20 = *(_BYTE *)(v16 + 16);
      *(_BYTE *)(v16 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
      *(_BYTE *)(v16 + 16) = v20;
      if (*(_QWORD *)v16)
        goto LABEL_42;
      v18 = *(_QWORD *)(v16 + 8);
    }
    if (!v18)
      MEMORY[0x19AEB936C](v16, 0x1020C40545B2139);
  }
LABEL_42:
  v21 = *((_QWORD *)v3 + 4);
  v22 = *(_QWORD *)(v21 + 1872);
  *(_QWORD *)(v21 + 1872) = 0;
  if (v22)
  {
    v23 = *(uint64_t **)v22;
    v24 = *(_QWORD *)(v22 + 8) - 1;
    *(_QWORD *)(v22 + 8) = v24;
    if (!v23)
      goto LABEL_47;
    v25 = *v23;
    if (*v23)
    {
      v26 = *(_BYTE *)(v22 + 16);
      *(_BYTE *)(v22 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0);
      *(_BYTE *)(v22 + 16) = v26;
      if (!*(_QWORD *)v22)
      {
        v24 = *(_QWORD *)(v22 + 8);
LABEL_47:
        if (!v24)
          MEMORY[0x19AEB936C](v22, 0x1020C40545B2139);
      }
    }
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((_QWORD *)v3 + 4) + 1912), 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((_QWORD *)v3 + 4) + 1920), 0);
  *((_BYTE *)v3 + 728) = 0;
  *((_BYTE *)v3 + 824) = 0;
  *((_BYTE *)v3 + 1118) = 0;
  *((_BYTE *)v3 + 1262) = 0;
  *((_WORD *)v3 + 367) = 0;
  v28 = *((_QWORD *)v3 + 4);
  v29 = *(_QWORD *)(v28 + 1968);
  if (v29)
  {
    *(_QWORD *)(v28 + 1968) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v29, v27);
    v28 = *((_QWORD *)v3 + 4);
  }
  memset(v103, 0, sizeof(v103));
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v86 = 0u;
  memset(buf, 0, sizeof(buf));
  buf[9] = 1;
  *(_QWORD *)&buf[10] = 0;
  *(_OWORD *)(v28 + 224) = *(_OWORD *)buf;
  *(_OWORD *)&v84[16] = 0u;
  v85 = 0u;
  buf[18] = 0;
  *(_DWORD *)(v28 + 239) = *(_DWORD *)&buf[15];
  *(_OWORD *)v84 = 0u;
  std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)(v28 + 256), v84);
  std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(v28 + 576, v103);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v103, v30);
  if ((_BYTE)v102)
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v84, v31);
  std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100]((_DWORD *)(*((_QWORD *)v3 + 4) + 112), v31);
  if (a2 == 7)
  {
    v32 = 2;
    v33 = 18;
  }
  else
  {
    v34 = *((_QWORD *)v3 + 140);
    *((_QWORD *)v3 + 140) = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v32 = 1;
    v33 = 17;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8 * v33))(v14);
  v35 = (WebKit::WebPasteboardProxy *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 344))(v14);
  v36 = WebKit::WebPasteboardProxy::singleton(v35);
  WebKit::WebPasteboardProxy::revokeAccess((WebKit::WebPasteboardProxy *)v36, *((WebKit::WebProcessProxy **)v3 + 26));
  WebKit::WebPageProxy::resetState((uint64_t)v3, (void *)v32);
  *((_DWORD *)v3 + 209) = 0;
  v37 = *((_QWORD *)v3 + 4);
  v38 = *(_QWORD *)(v37 + 840);
  v39 = *(_QWORD *)(v37 + 848);
  v40 = *(WTF::StringImpl **)(v37 + 856);
  if (v38 <= v39)
  {
    v43 = (WTF::StringImpl *)((char *)v40 + 128 * v39);
    v42 = (WTF::StringImpl *)((char *)v40 + 128 * v38);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v40, (WTF::StringImpl *)((char *)v40 + 128 * v39));
    v41 = *(_QWORD *)(v37 + 856);
    v42 = (WTF::StringImpl *)(v41 + (*(_QWORD *)(v37 + 840) << 7));
    v43 = (WTF::StringImpl *)(v41 + ((unint64_t)*(unsigned int *)(v37 + 864) << 7));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v42, v43);
  *(_QWORD *)(v37 + 840) = 0;
  *(_QWORD *)(v37 + 848) = 0;
  v45 = *(WTF **)(v37 + 856);
  if (v45)
  {
    *(_QWORD *)(v37 + 856) = 0;
    *(_DWORD *)(v37 + 864) = 0;
    WTF::fastFree(v45, v44);
  }
  v46 = *((_QWORD *)v3 + 4);
  v47 = *(_QWORD *)(v46 + 752);
  v48 = *(_QWORD *)(v46 + 760);
  v49 = *(WebKit::WebKeyboardEvent **)(v46 + 768);
  if (v47 <= v48)
  {
    v52 = (WebKit::WebKeyboardEvent *)((char *)v49 + 96 * v48);
    v51 = (WebKit::WebKeyboardEvent *)((char *)v49 + 96 * v47);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v49, (WebKit::WebKeyboardEvent *)((char *)v49 + 96 * v48));
    v50 = *(_QWORD *)(v46 + 768);
    v51 = (WebKit::WebKeyboardEvent *)(v50 + 96 * *(_QWORD *)(v46 + 752));
    v52 = (WTF::StringImpl *)(v50 + 96 * *(unsigned int *)(v46 + 776));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v51, v52);
  *(_QWORD *)(v46 + 752) = 0;
  *(_QWORD *)(v46 + 760) = 0;
  v54 = *(WTF **)(v46 + 768);
  if (v54)
  {
    *(_QWORD *)(v46 + 768) = 0;
    *(_DWORD *)(v46 + 776) = 0;
    WTF::fastFree(v54, v53);
  }
  v55 = (WebKit::WebWheelEventCoalescer *)*((_QWORD *)v3 + 93);
  if (v55)
    WebKit::WebWheelEventCoalescer::clear(v55, v53);
  WebKit::WebPageProxy::invalidateAllAttachments(v3, (WTF::StringImpl *)v53);
  v57 = (WebKit::RemoteScrollingCoordinatorProxy *)*((_QWORD *)v3 + 25);
  if (v57)
    WebKit::RemoteScrollingCoordinatorProxy::resetStateAfterProcessExited(v57, v56);
  if (a2 != 7)
  {
    v58 = *((_QWORD *)v3 + 4);
    v59 = *(_QWORD *)(v58 + 960);
    v60 = v58;
    if (v59)
    {
      CFRetain(*(CFTypeRef *)(v59 + 8));
      v60 = *((_QWORD *)v3 + 4);
    }
    *(_QWORD *)buf = v59;
    *(_QWORD *)&buf[8] = v58 + 944;
    ++*(_DWORD *)(v58 + 1316);
    *(_BYTE *)(v58 + 1312) = 1;
    WebKit::PageLoadState::reset(v60 + 944, (WTF::StringImpl *)v81);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v61, v62);
  }
  WebKit::WebPageProxy::updatePlayingMediaDidChange(v3, 0, 0);
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((_QWORD *)v3 + 4) + 2432));
  v63 = *((_QWORD *)v3 + 4);
  if (*(_BYTE *)(v63 + 2472))
    *(_BYTE *)(v63 + 2472) = 0;
  WebKit::WebPageProxy::resetRecentGamepadAccessState(v3);
  v64 = (unsigned int *)*((_QWORD *)v3 + 26);
  v65 = v64 + 4;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 + 1, v65));
  WebKit::WebProcessProxy::processTerminated((WebKit::WebProcessProxy *)v64);
  if (v64)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v64 + 4);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
LABEL_83:
  v67 = (unsigned int *)*((_QWORD *)v3 + 26);
  v68 = v67 + 4;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 + 1, v68));
  WebKit::WebPageProxy::stopAllURLSchemeTasks(v3, (WebKit::WebProcessProxy *)v67);
  if (v67)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v67 + 4);
  if (a2 != 7)
  {
    v71 = *((_QWORD *)v3 + 20);
    v72 = *(_QWORD *)(v71 + 8);
    if (v72)
    {
      *(_QWORD *)(v71 + 8) = 0;
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v72, v70);
    }
    if (*((_BYTE *)v3 + 826))
    {
      v73 = *(CFTypeRef **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*((_QWORD *)v3 + 6) + 24)
                          + 320);
      if (v73)
      {
        CFRetain(v73[1]);
        WebKit::WebAutomationSession::terminate((WebKit::WebAutomationSession *)v73);
        CFRelease(v73[1]);
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::ResourceRequestBase *a6, uint64_t a7, const WTF::String *a8, __int16 a9, const void **a10, __int16 a11, char a12, unsigned __int8 a13, unsigned __int8 a14, CFTypeRef **a15)
{
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *isa;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  const WTF::URL *v41;
  WTF::StringImpl *v42;
  const WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WebKit::FrameProcess *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  __int128 v56;
  int v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  Class v65;
  char v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::MonotonicTime *v74;
  uint64_t v75;
  uint64_t v76;
  CFTypeRef *v77;
  Class v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  const void **v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  const WTF::StringImpl *v93;
  char v94;
  WTF::StringImpl *v95;
  CFTypeRef *v96;
  _BYTE *v97;
  uint64_t v98;
  const WTF::StringImpl *v99;
  Class v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  CFTypeRef *v106;
  WTF::StringImpl *v107;
  const WTF::StringImpl *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  CFTypeRef *v112;
  uint64_t v113;
  Class v114;
  uint64_t v115;
  uint64_t v116;
  Inspector::RemoteControllableTarget *v117;
  unsigned int *v118;
  unsigned int v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  Class v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const WTF::StringImpl *v131;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  const WTF::URL *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  char v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  API::WebsitePolicies *v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  CFTypeRef v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  WTF::String *v166;
  uint64_t v167;
  WebCore::ResourceRequestBase *v169;
  WTF::StringImpl *v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  char v178;
  char v179;
  uint64_t v180;
  _QWORD v181[2];
  WTF::StringImpl *v182;
  WTF::StringImpl *v183[5];
  _BYTE buf[24];
  uint64_t v185;
  __int16 v186;
  int v187;
  __int16 v188;
  uint64_t v189;
  __int16 v190;
  int v191;
  CFTypeRef cf;
  char v193;
  _BYTE v194[24];
  int v195;
  _BYTE v196[24];
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v22 = *(_QWORD *)(a1 + 40);
  if (v22)
    v23 = *(_QWORD *)(v22 + 8);
  else
    v23 = 0;
  v24 = buf;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1584))(v23);
  v25 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (!v25)
  {
    v26 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_216:
      *(_BYTE *)(a2 + 98) = 1;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1592))(v23);
    }
LABEL_218:
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)(v24 + 4) = "void WebKit::WebPageProxy::didCommitLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInf"
                           "oData &&, ResourceRequest &&, uint64_t, const String &, BOOL, FrameLoadType, const Certificat"
                           "eInfo &, BOOL, BOOL, BOOL, HasInsecureContent, MouseEventPolicy, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6356: Invalid message dispatched %s", buf, 0xCu);
    goto LABEL_216;
  }
  v165 = (_BYTE *)a5;
  v166 = (WTF::String *)a3;
  v167 = a4;
  v169 = a6;
  v26 = v25;
  CFRetain(*(CFTypeRef *)(v25 + 8));
  if (!v26[40].isa)
  {
    v27 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v30)
        LODWORD(v30) = *(_DWORD *)(v30 + 108);
      v31 = *(_QWORD *)(v29 + 744);
      v32 = *(_QWORD *)(v29 + 1896);
      isa = v26[3].isa;
      if (isa)
      {
        isa = (_QWORD *)isa[1];
        if (isa)
        {
          if (isa[33] == v26)
          {
            LODWORD(isa) = 1;
          }
          else
          {
            isa = (_QWORD *)isa[138];
            if (isa)
              LODWORD(isa) = isa[9] == (_QWORD)v26;
          }
        }
      }
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2048;
      v185 = v32;
      v186 = 1024;
      v187 = v30;
      v188 = 2048;
      v189 = a3;
      v190 = 1024;
      v191 = (int)isa;
      _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didCommitLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    v34 = v26[3].isa;
    if (v34)
    {
      v35 = *((_QWORD *)v34 + 1);
      if (v35)
      {
        if (*(NSObject **)(v35 + 264) == v26)
        {
          v38 = 1;
          v37 = a7;
          goto LABEL_37;
        }
        v36 = *(_QWORD *)(v35 + 1104);
        v37 = a7;
        if (v36)
        {
          v38 = *(_QWORD *)(v36 + 72) == (_QWORD)v26;
LABEL_37:
          v39 = 0;
          if (v37)
          {
            if (v38)
            {
              v48 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), v37);
              v39 = v48;
              if (v48)
              {
                CFRetain(*(CFTypeRef *)(v48 + 8));
                v196[0] = 0;
                v197 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v196, v39 + 864);
                v49 = v39;
                WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)(v39 + 232));
                v194[0] = 0;
                v195 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v194, (uint64_t)v196);
                WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v194);
                v50 = v170;
                v51 = *((_DWORD *)v170 + 8);
                v170 = 0;
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v50, v52);
                v53 = 0;
                if (v51 != 1)
                {
                  v54 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)buf);
                  v55 = *(WTF::StringImpl **)v54;
                  if (*(_QWORD *)v54)
                    *(_DWORD *)v55 += 2;
                  v170 = v55;
                  v56 = *(_OWORD *)(v54 + 24);
                  v171 = *(_OWORD *)(v54 + 8);
                  v172 = v56;
                  WTF::URL::query((WTF::URL *)&v170);
                  if (v57 || (WTF::URL::fragmentIdentifier((WTF::URL *)&v170), v58))
                    v53 = 2;
                  else
                    v53 = 0;
                  WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)buf);
                  MEMORY[0x19AEABB0C](v183, &v182, 0);
                  v60 = v182;
                  v182 = 0;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 2)
                      WTF::StringImpl::destroy(v60, v59);
                    else
                      *(_DWORD *)v60 -= 2;
                  }
                  WTF::URL::query((WTF::URL *)v183);
                  if ((_DWORD)v133 || (WTF::URL::fragmentIdentifier((WTF::URL *)v183), (_DWORD)v133))
                    v53 |= 4u;
                  v134 = v183[0];
                  v183[0] = 0;
                  if (v134)
                  {
                    if (*(_DWORD *)v134 == 2)
                      WTF::StringImpl::destroy(v134, v133);
                    else
                      *(_DWORD *)v134 -= 2;
                  }
                  v135 = v170;
                  v170 = 0;
                  if (v135)
                  {
                    if (*(_DWORD *)v135 == 2)
                      WTF::StringImpl::destroy(v135, v133);
                    else
                      *(_DWORD *)v135 -= 2;
                  }
                }
                if (v195 != -1)
                  ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v195])(&v170, v194);
                v195 = -1;
                v39 = v49;
                if (v53)
                {
                  v136 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)buf);
                  WebCore::RegistrableDomain::RegistrableDomain(v183, v136);
                  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v196);
                  MEMORY[0x19AEABB0C](&v170, &v182, 0);
                  v138 = v182;
                  v182 = 0;
                  if (v138)
                  {
                    if (*(_DWORD *)v138 == 2)
                      WTF::StringImpl::destroy(v138, v137);
                    else
                      *(_DWORD *)v138 -= 2;
                  }
                  v139 = WTF::URL::host((WTF::URL *)&v170);
                  if ((WebCore::RegistrableDomain::matches(v183, v139, v140) & 1) == 0)
                  {
                    v142 = v53;
                    v143 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
                    v144 = (unsigned int *)(v143 + 16);
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 + 1, v144));
                    v164 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
                    WebCore::RegistrableDomain::RegistrableDomain(&v182, (const WTF::URL *)&v170);
                    WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransfer(v143, v164, (uint64_t *)&v182, (uint64_t *)v183, v142, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 744), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), (*((_BYTE *)v169 + 148) & 0x20) != 0);
                    v147 = v182;
                    v182 = 0;
                    if (v147)
                    {
                      if (*(_DWORD *)v147 == 2)
                        WTF::StringImpl::destroy(v147, v146);
                      else
                        *(_DWORD *)v147 -= 2;
                    }
                    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v144);
                  }
                  v148 = v170;
                  v170 = 0;
                  if (v148)
                  {
                    if (*(_DWORD *)v148 == 2)
                      WTF::StringImpl::destroy(v148, v141);
                    else
                      *(_DWORD *)v148 -= 2;
                  }
                  v149 = v183[0];
                  v183[0] = 0;
                  if (v149)
                  {
                    if (*(_DWORD *)v149 == 2)
                      WTF::StringImpl::destroy(v149, v141);
                    else
                      *(_DWORD *)v149 -= 2;
                  }
                }
                v150 = *(API::WebsitePolicies **)(v39 + 3472);
                if (v150 && !*(_QWORD *)(a1 + 1120))
                {
                  API::WebsitePolicies::data(v150, (uint64_t)&v170);
                  v151 = WTF::fastMalloc((WTF *)0x70);
                  *(_QWORD *)v151 = 0;
                  *(_QWORD *)(v151 + 8) = 0;
                  v152 = v170;
                  v170 = 0;
                  *(_QWORD *)v151 = v152;
                  *(_QWORD *)(v151 + 16) = 0;
                  *(_QWORD *)(v151 + 24) = 0;
                  v153 = v171;
                  *(_QWORD *)&v171 = 0;
                  *(_QWORD *)(v151 + 8) = v153;
                  LODWORD(v153) = DWORD2(v171);
                  DWORD2(v171) = 0;
                  *(_DWORD *)(v151 + 16) = v153;
                  LODWORD(v153) = HIDWORD(v171);
                  HIDWORD(v171) = 0;
                  *(_DWORD *)(v151 + 20) = v153;
                  *(_QWORD *)(v151 + 32) = 0;
                  v154 = v172;
                  *(_QWORD *)&v172 = 0;
                  *(_QWORD *)(v151 + 24) = v154;
                  LODWORD(v154) = DWORD2(v172);
                  DWORD2(v172) = 0;
                  *(_DWORD *)(v151 + 32) = v154;
                  LODWORD(v154) = HIDWORD(v172);
                  HIDWORD(v172) = 0;
                  *(_DWORD *)(v151 + 36) = v154;
                  v155 = v173;
                  v173 = 0;
                  *(_QWORD *)(v151 + 40) = v155;
                  v156 = v174;
                  v174 = 0;
                  *(_QWORD *)(v151 + 48) = v156;
                  v157 = v175;
                  v175 = 0;
                  *(_QWORD *)(v151 + 56) = v157;
                  v158 = v176;
                  v176 = 0;
                  *(_QWORD *)(v151 + 64) = v158;
                  LOWORD(v158) = v177;
                  *(_BYTE *)(v151 + 74) = v178;
                  *(_WORD *)(v151 + 72) = v158;
                  *(_BYTE *)(v151 + 80) = v179;
                  *(_QWORD *)(v151 + 88) = 0;
                  v159 = v180;
                  v180 = 0;
                  *(_QWORD *)(v151 + 88) = v159;
                  v160 = v181[0];
                  *(_QWORD *)(v151 + 103) = *(_QWORD *)((char *)v181 + 7);
                  *(_QWORD *)(v151 + 96) = v160;
                  std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(a1 + 1352), (WTF::StringImpl *)v151);
                  WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v170, v161);
                }
                v162 = cf;
                cf = 0;
                if (v162)
                  CFRelease(v162);
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
                if (v197 != -1)
                  ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v197])(buf, v196);
              }
            }
          }
LABEL_23:
          v40 = *(_QWORD *)(a1 + 224);
          {
            WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
          }
          if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v40 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v28))
          {
            v41 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v169);
            WebKit::Site::Site((WTF::StringImpl **)buf, v41);
            if (*(_QWORD *)&buf[8])
            {
              if (*(_DWORD *)(*(_QWORD *)&buf[8] + 4)
                && (MEMORY[0x19AEABBCC]() & 1) == 0
                && (WebKit::Site::operator==((WTF **)v26[4].isa + 4, (const WTF::StringImpl **)buf, v43) & 1) == 0)
              {
                WebKit::BrowsingContextGroup::ensureProcessForSite(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::Site *)buf, *(WebKit::WebProcessProxy **)(a1 + 208), *(const WebKit::WebPreferences **)(a1 + 224), &v170);
                v45 = v170;
                ++*(_DWORD *)v170;
                v46 = v26[4].isa;
                v26[4].isa = v45;
                if (v46)
                  WTF::RefCounted<WebKit::FrameProcess>::deref(v46, v44);
                WTF::RefCounted<WebKit::FrameProcess>::deref(v45, v44);
              }
              v47 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v42);
                else
                  *(_DWORD *)v47 -= 2;
              }
            }
            else
            {
              *(_QWORD *)&buf[8] = 0;
            }
            v61 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v42);
              else
                *(_DWORD *)v61 -= 2;
            }
          }
          v163 = v39;
          *(_BYTE *)(a1 + 1049) = 1;
          v62 = *(_QWORD *)(a1 + 208);
          v63 = (unsigned int *)(v62 + 16);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 + 1, v63));
          *(_BYTE *)(v62 + 776) = 1;
          WebCore::ResourceRequestBase::url(v169);
          if ((WTF::URL::protocolIs() & 1) == 0)
            *(_BYTE *)(v62 + 777) = 1;
          v65 = v26[3].isa;
          v66 = HIBYTE(a11);
          v67 = a11;
          v68 = a13;
          if (v65)
          {
            v69 = *((_QWORD *)v65 + 1);
            if (v69)
            {
              if (*(NSObject **)(v69 + 264) == v26
                || (v70 = *(_QWORD *)(v69 + 1104)) != 0 && *(NSObject **)(v70 + 72) == v26)
              {
                *(_BYTE *)(a1 + 733) = 0;
                v71 = *(_QWORD *)(a1 + 184);
                if (!v71 || *(_BYTE *)(v71 + 32))
                {
                  v73 = *(_QWORD *)(a1 + 32);
                }
                else
                {
                  v72 = *(_QWORD *)(v71 + 104) + 1;
                  v73 = *(_QWORD *)(a1 + 32);
                  *(_QWORD *)(v73 + 1992) = v72;
                }
                std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v73 + 1912), 0);
                v74 = std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(_QWORD *)(a1 + 32) + 1920), 0);
                WTF::MonotonicTime::now(v74);
                *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2248) = v75;
                v66 = HIBYTE(a11);
                v67 = a11;
                v68 = a13;
              }
            }
          }
          v76 = *(_QWORD *)(a1 + 32);
          v77 = *(CFTypeRef **)(v76 + 960);
          if (v77)
          {
            CFRetain(v77[1]);
            v67 = a11;
            v68 = a13;
            v66 = HIBYTE(a11);
          }
          v170 = (WTF::StringImpl *)v77;
          *(_QWORD *)&v171 = v76 + 944;
          ++*(_DWORD *)(v76 + 1316);
          v78 = v26[3].isa;
          if (v78
            && (v79 = *((_QWORD *)v78 + 1)) != 0
            && (*(NSObject **)(v79 + 264) == v26
             || (v80 = *(_QWORD *)(v79 + 1104)) != 0 && *(NSObject **)(v80 + 72) == v26))
          {
            v85 = *(_QWORD *)(a1 + 32) + 944;
            *(_BYTE *)(v76 + 1312) = 1;
            v83 = a10;
            WebKit::PageLoadState::didCommitLoad(v85, (uint64_t)buf, a10, v68, v67, v66, (uint64_t)(v165 + 208));
            *(_BYTE *)(a1 + 893) = 0;
            v81 = v167;
            v82 = a12;
          }
          else
          {
            v81 = v167;
            v82 = a12;
            v83 = a10;
            if (v68)
            {
              v84 = *(_QWORD *)(a1 + 32);
              *(_BYTE *)(v76 + 1312) = 1;
              *(_BYTE *)(v84 + 1137) = 1;
            }
          }
          WebKit::WebFrameProxy::didCommitLoad((WebKit::WebFrameProxy *)v26, a8, v83, v82);
          v87 = v26[3].isa;
          a2 = (uint64_t)v166;
          v88 = v163;
          v24 = (_BYTE *)a14;
          if (!v87)
            goto LABEL_106;
          v89 = *((_QWORD *)v87 + 1);
          if (!v89)
            goto LABEL_106;
          if (*(NSObject **)(v89 + 264) == v26)
          {
            v92 = *(_QWORD *)(a1 + 32);
          }
          else
          {
            v90 = *(_QWORD *)(v89 + 1104);
            if (!v90)
            {
LABEL_106:
              v92 = *(_QWORD *)(a1 + 32);
LABEL_107:
              std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::reset[abi:sn180100]((WebCore::PrivateClickMeasurement *)(v92 + 1336), v86);
              v100 = v26[3].isa;
              if (v100)
              {
                v101 = *((_QWORD *)v100 + 1);
                if (!v101)
                  goto LABEL_115;
                if (*(NSObject **)(v101 + 264) != v26)
                {
                  v102 = *(_QWORD *)(v101 + 1104);
                  if (!v102 || *(NSObject **)(v102 + 72) != v26)
                    goto LABEL_115;
                }
                *(_BYTE *)(a1 + 840) = a9;
                if ((_BYTE)a9)
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 785) = 16843009;
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 416))(*(_QWORD *)(a1 + 104), a1);
                }
                (*(void (**)(uint64_t, const WTF::String *))(*(_QWORD *)v23 + 208))(v23, a8);
                v100 = v26[3].isa;
                if (v100)
                {
LABEL_115:
                  v103 = *((_QWORD *)v100 + 1);
                  if (v103)
                  {
                    if (*(NSObject **)(v103 + 264) == v26
                      || (v104 = *(_QWORD *)(v103 + 1104)) != 0 && *(NSObject **)(v104 + 72) == v26)
                    {
                      *(_QWORD *)(a1 + 640) = 0x3FF0000000000000;
                      *(_QWORD *)(a1 + 672) = 0x3FF0000000000000;
                      *(_BYTE *)(a1 + 857) = 0;
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 1440))(v23, a14);
                      WebKit::WebPageProxy::resetRecentGamepadAccessState((WebKit::WebPageProxy *)a1);
                    }
                  }
                }
              }
              WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v98, v99);
              v105 = *(_QWORD *)(a1 + 56);
              if (v105)
              {
                v106 = *a15;
                if (*a15)
                  CFRetain(v106[1]);
                WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v62, (API::Object *)v106, (WebKit **)buf);
                (*(void (**)(uint64_t, uint64_t, NSObject *, uint64_t, _QWORD))(*(_QWORD *)v105 + 96))(v105, a1, v26, v163, *(_QWORD *)buf);
                v109 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v109)
                  CFRelease(*(CFTypeRef *)(v109 + 8));
                if (v106)
                  CFRelease(v106[1]);
              }
              else
              {
                v110 = v165;
                if (*v165)
                {
                  v111 = *(_QWORD *)(a1 + 72);
                  v112 = *a15;
                  if (*a15)
                    CFRetain(v112[1]);
                  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v62, (API::Object *)v112, (WebKit **)buf);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v111 + 80))(v111, a1, v163, *(_QWORD *)buf);
                  v113 = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  if (v113)
                    CFRelease(*(CFTypeRef *)(v113 + 8));
                  v110 = v165;
                  if (v112)
                    CFRelease(v112[1]);
                }
                (*(void (**)(_QWORD, uint64_t, WebCore::ResourceRequestBase *, _BYTE *))(**(_QWORD **)(a1 + 72)
                                                                                                 + 88))(*(_QWORD *)(a1 + 72), a1, v169, v110);
              }
              v114 = v26[3].isa;
              if (v114)
              {
                v115 = *((_QWORD *)v114 + 1);
                if (v115)
                {
                  if (*(NSObject **)(v115 + 264) == v26
                    || (v116 = *(_QWORD *)(v115 + 1104)) != 0 && *(NSObject **)(v116 + 72) == v26)
                  {
                    WebKit::WebPageProxy::invalidateAllAttachments((WebKit::WebPageProxy *)a1, v107);
                    v117 = *(Inspector::RemoteControllableTarget **)(a1 + 1080);
                    if (v117)
                      v117 = (Inspector::RemoteControllableTarget *)Inspector::RemoteControllableTarget::update(v117);
                    if (*(_BYTE *)(a1 + 1305))
                    {
                      *(_BYTE *)(a1 + 1305) = 0;
                      WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v117, v107);
                      if (!dword_1ECE72D8C)
                      {
                        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
                        v118 = *(unsigned int **)(a1 + 24);
                        if (v118)
                        {
                          do
                            v119 = __ldaxr(v118);
                          while (__stlxr(v119 + 1, v118));
                        }
                        v120 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                        *v120 = &off_1E34D5E18;
                        v120[1] = v118;
                        *(_QWORD *)buf = v120;
                        WebKit::requestLinkDecorationFilteringData(buf);
                        v121 = *(_QWORD *)buf;
                        *(_QWORD *)buf = 0;
                        if (v121)
                          (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
                        v88 = v163;
                      }
                    }
                    if (v88)
                    {
                      v122 = *(_QWORD *)(v88 + 3472);
                      if (v122)
                        *(_WORD *)(a1 + 1306) = *(_WORD *)(v122 + 96);
                    }
                  }
                }
              }
              v123 = *(uint64_t **)(a1 + 504);
              if (v123)
                WebKit::UserMediaPermissionRequestManagerProxy::didCommitLoadForFrame(v123, v166, v81);
              v124 = v26[3].isa;
              if (v124)
              {
                if ((v125 = *((_QWORD *)v124 + 1)) == 0
                  || *(NSObject **)(v125 + 264) != v26
                  && ((v126 = *(_QWORD *)(v125 + 1104)) == 0 || *(NSObject **)(v126 + 72) != v26)
                  || (WebKit::WebPageProxy::resetMediaCapability((WebKit::WebPageProxy *)a1, (uint64_t)v107, v108),
                      (v124 = v26[3].isa) != 0))
                {
                  v127 = *((_QWORD *)v124 + 1);
                  if (v127)
                  {
                    if (*(NSObject **)(v127 + 264) == v26
                      || (v128 = *(_QWORD *)(v127 + 1104)) != 0 && *(NSObject **)(v128 + 72) == v26)
                    {
                      v129 = *(_QWORD *)(a1 + 224);
                      {
                        WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
                        WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
                      }
                      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v129 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, v108))WebKit::WebKitSwiftLibrary((WebKit *)1);
                    }
                  }
                }
              }
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 1864))(v23, 0);
              WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v170, v130, v131);
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v62 + 16));
              if (v88)
                CFRelease(*(CFTypeRef *)(v88 + 8));
              goto LABEL_170;
            }
            v91 = *(NSObject **)(v90 + 72);
            v92 = *(_QWORD *)(a1 + 32);
            if (v91 != v26)
              goto LABEL_107;
          }
          buf[0] = 0;
          v193 = 0;
          if (*(_BYTE *)(v92 + 1664))
          {
            WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)(v92 + 1336));
            v193 = 1;
          }
          else
          {
            if (!v163)
              goto LABEL_102;
            if (!*(_BYTE *)(v163 + 1368))
              goto LABEL_102;
            std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>((WebCore::PrivateClickMeasurement *)buf, (unsigned __int8 *)(v163 + 1056));
            if (!v193)
              goto LABEL_102;
          }
          WebCore::RegistrableDomain::RegistrableDomain(v183, (const WTF::URL *)&v26[6]);
          v94 = WTF::equal(*(WTF **)&buf[16], v183[0], v93);
          v95 = v183[0];
          v183[0] = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
            {
              WTF::StringImpl::destroy(v95, v86);
              if ((v94 & 1) != 0)
                goto LABEL_100;
LABEL_98:
              if (!v193)
              {
LABEL_217:
                __break(1u);
                goto LABEL_218;
              }
              if (!(_BYTE)v190)
              {
LABEL_102:
                v97 = *(_BYTE **)(a1 + 1248);
                if (v97)
                  WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(v97);
                if (v193)
                  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v86);
                goto LABEL_106;
              }
LABEL_100:
              v96 = *(CFTypeRef **)(a1 + 264);
              CFRetain(v96[1]);
              if (v193)
              {
                WebKit::WebsiteDataStore::storePrivateClickMeasurement((WebKit::WebsiteDataStore *)v96, (const WebCore::PrivateClickMeasurement *)buf);
                CFRelease(v96[1]);
                goto LABEL_102;
              }
              goto LABEL_217;
            }
            *(_DWORD *)v95 -= 2;
          }
          if ((v94 & 1) != 0)
            goto LABEL_100;
          goto LABEL_98;
        }
      }
    }
    v39 = 0;
    goto LABEL_23;
  }
  WebKit::WebFrameProxy::commitProvisionalFrame((uint64_t)v26, a2, a3, a4, a5, (uint64_t)v169, a7, (uint64_t)a8, a9, (uint64_t)a10, a11, a12, a13, a14, (uint64_t)a15);
LABEL_170:
  CFRelease(v26[1].isa);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1592))(v23);
}

void WebKit::WebPageProxy::continueNavigationInNewProcess(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, const WebKit::WebProcessProxy **a5, char a6, int a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13)
{
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  WebKit::WebProcessProxy *v27;
  const WTF::URL *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef *v42;
  BOOL v44;
  const WTF::URL *v45;
  const WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const WebKit::WebProcessProxy *v51;
  WebCore::ResourceRequest *v52;
  const void *v53;
  CFTypeRef v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const WebKit::ProvisionalPageProxy *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  const WTF::URL *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WebKit::WebProcessProxy *v89;
  WebKit::BrowsingContextGroup *v90;
  const WebKit::WebProcessProxy *v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  const WebKit::WebProcessProxy *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  const WebKit::WebProcessProxy *v106;
  void *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  char v110;
  char v111;
  WebCore::ResourceRequestBase *v112;
  _QWORD *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  _BYTE buf[24];
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[10];
  uint64_t v120;
  const WebKit::WebProcessProxy *v121;
  uint64_t v122;
  uint64_t v123;
  WebKit::FrameProcess *v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  uint64_t v128;
  CFTypeRef cf;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char v134;
  char v135;
  __int16 v136;
  _QWORD v137[3];
  int v138;
  _BYTE v139[56];
  __int16 v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v20 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    v23 = *(_QWORD *)(v21 + 744);
    v24 = *(_QWORD *)(v21 + 1896);
    v25 = *((_QWORD *)*a5 + 17);
    if (v25)
      LODWORD(v25) = *(_DWORD *)(v25 + 108);
    v26 = *a4 != 0;
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2048;
    v117 = v24;
    LOWORD(v118) = 1024;
    *(_DWORD *)((char *)&v118 + 2) = v22;
    HIWORD(v118) = 1024;
    *(_DWORD *)v119 = v25;
    *(_WORD *)&v119[4] = 1024;
    *(_DWORD *)&v119[6] = v26;
    _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::continueNavigationInNewProcess: newProcessPID=%i, hasSuspendedPage=%i", buf, 0x32u);
  }
  if (*((_BYTE *)*a5 + 712))
  {
    __break(0xC471u);
    JUMPOUT(0x197341288);
  }
  *(_QWORD *)(a2 + 24) = *((_QWORD *)*a5 + 22);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
  if (WTF::URL::protocolIs())
  {
    v27 = *a5;
    v28 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(v27, v28);
  }
  v29 = *(WTF::StringImpl **)(a1 + 1120);
  if (v29)
  {
    v30 = *(_QWORD *)(a3 + 24);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        if (*(_QWORD *)(v31 + 264) == a3 || (v32 = *(_QWORD *)(v31 + 1104)) != 0 && *(_QWORD *)(v32 + 72) == a3)
        {
          v33 = a4;
          v34 = a7;
          v35 = qword_1ECE71668;
          if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
          {
            v36 = *(_QWORD *)(a1 + 32);
            v37 = *(_QWORD *)(v36 + 744);
            v38 = *(_QWORD *)(v36 + 1896);
            v39 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
            if (v39)
              LODWORD(v39) = *(_DWORD *)(v39 + 108);
            v40 = *((_QWORD *)v29 + 11);
            v41 = *(_QWORD *)(a2 + 16);
            *(_DWORD *)buf = 134219264;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v37;
            *(_WORD *)&buf[22] = 2048;
            v117 = v38;
            LOWORD(v118) = 1024;
            *(_DWORD *)((char *)&v118 + 2) = v39;
            HIWORD(v118) = 2048;
            *(_QWORD *)v119 = v40;
            *(_WORD *)&v119[8] = 2048;
            v120 = v41;
            _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::continueNavigationInNewProcess: There is already a pending provisional load, cancelling it (provisonalNavigationID=%llu, navigationID=%llu)", buf, 0x3Au);
            v29 = *(WTF::StringImpl **)(a1 + 1120);
          }
          a7 = v34;
          if (*((_QWORD *)v29 + 11) == *(_QWORD *)(a2 + 16))
          {
            *(_QWORD *)(a1 + 1120) = 0;
            a4 = v33;
          }
          else
          {
            WebKit::ProvisionalPageProxy::cancel(v29);
            v29 = *(WTF::StringImpl **)(a1 + 1120);
            *(_QWORD *)(a1 + 1120) = 0;
            a4 = v33;
            if (!v29)
              goto LABEL_24;
          }
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
        }
      }
    }
  }
LABEL_24:
  v42 = *(CFTypeRef **)(a2 + 3472);
  if (v42)
    CFRetain(v42[1]);
  v44 = (*(_BYTE *)(a2 + 738) & 1) == 0 && a7 == 1;
  v45 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 232));
  WebKit::Site::Site(&v114, v45);
  v47 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v47 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v46) & 1) != 0)
  {
    v48 = *(_QWORD *)(a3 + 24);
    if (!v48
      || (v49 = *(_QWORD *)(v48 + 8)) == 0
      || *(_QWORD *)(v49 + 264) != a3 && ((v50 = *(_QWORD *)(v49 + 1104)) == 0 || *(_QWORD *)(v50 + 72) != a3)
      || (v51 = *a5, *((_QWORD *)*a5 + 22) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16) + 176)))
    {
      v127 = 0;
      v125 = 0;
      v124 = 0;
      LOBYTE(v126) = 0;
      v52 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v128);
      v135 = 0;
      v136 = 0;
      v138 = 0;
      v139[0] = 0;
      v139[48] = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      v148 = 0;
      v130 = 0u;
      v131 = 0u;
      v132 = 0u;
      v133 = 0u;
      v134 = 0;
      v137[2] = 0;
      memset(v137, 0, 11);
      WebCore::ResourceRequestBase::operator=((uint64_t)v52, a2 + 232);
      v53 = *(const void **)(a2 + 424);
      if (v53)
        CFRetain(*(CFTypeRef *)(a2 + 424));
      v54 = cf;
      cf = v53;
      if (v54)
        CFRelease(v54);
      if ((*(_BYTE *)(a2 + 738) & 1) != 0)
        v55 = 1;
      else
        v55 = 2;
      HIBYTE(v136) = v55;
      v126 = *(_OWORD *)(a3 + 272);
      if (!v127)
        v127 = 1;
      v146 = *(_BYTE *)(a2 + 856);
      v125 = *(_QWORD *)(a2 + 16);
      BYTE1(v137[1]) = *(_BYTE *)(a3 + 440);
      std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>((uint64_t)v139, a2 + 1000);
      v56 = *(_QWORD *)(a3 + 24);
      if (v56
        && (v57 = *(_QWORD *)(v56 + 8)) != 0
        && (*(_QWORD *)(v57 + 264) == a3 || (v58 = *(_QWORD *)(v57 + 1104)) != 0 && *(_QWORD *)(v58 + 72) == a3)
        && (v59 = *(_QWORD *)(a1 + 1120)) != 0)
      {
        v60 = *(_QWORD *)(v59 + 40);
      }
      else
      {
        v60 = *(_QWORD *)(a3 + 32);
      }
      v62 = *(_QWORD *)(v60 + 16);
      v63 = (unsigned int *)(v62 + 16);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 + 1, v63));
      v65 = *(_QWORD *)(a3 + 312);
      v67 = v65 && (v66 = *(_QWORD *)(v65 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v66 + 32) + 16) == v62;
      *(_BYTE *)(a3 + 440) = v67;
      v68 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *a5);
      if (v68)
        v69 = (uint64_t *)(v68 + 16);
      else
        v69 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 1896);
      v88 = *v69;
      v89 = *a5;
      v90 = *(WebKit::BrowsingContextGroup **)(a1 + 1344);
      WebKit::LoadParameters::LoadParameters((uint64_t)buf, (uint64_t *)&v124);
      v91 = *a5;
      v92 = (unsigned int *)((char *)*a5 + 16);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 + 1, v92));
      v121 = v91;
      v122 = v88;
      v94 = *((_QWORD *)*a5 + 127);
      if (v94)
      {
        v95 = *(_QWORD **)v94;
        ++*(_QWORD *)(v94 + 8);
        if (v95)
        {
          if (*v95)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v95 + 16))(*v95, 1);
        }
      }
      v123 = v94;
      v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x260);
      *v96 = off_1E34D49D8;
      WebKit::LoadParameters::LoadParameters((uint64_t)(v96 + 1), (uint64_t *)buf);
      v97 = v121;
      v121 = 0;
      v96[73] = v97;
      v96[74] = v122;
      v98 = v123;
      v123 = 0;
      v96[75] = v98;
      v113 = v96;
      WebKit::WebFrameProxy::prepareForProvisionalLoadInProcess(a3, v89, a2, v90, (uint64_t *)&v113);
      v100 = (uint64_t)v113;
      v113 = 0;
      if (v100)
        (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
      v101 = v123;
      v123 = 0;
      if (!v101)
        goto LABEL_109;
      v102 = *(uint64_t **)v101;
      v103 = *(_QWORD *)(v101 + 8) - 1;
      *(_QWORD *)(v101 + 8) = v103;
      if (v102)
      {
        v104 = *v102;
        if (!*v102
          || (v105 = *(_BYTE *)(v101 + 16),
              *(_BYTE *)(v101 + 16) = 1,
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 16))(v104, 0),
              *(_BYTE *)(v101 + 16) = v105,
              *(_QWORD *)v101))
        {
LABEL_109:
          v106 = v121;
          v121 = 0;
          if (v106)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v106 + 4);
          WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v99);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v63);
          WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v124, v107);
          goto LABEL_112;
        }
        v103 = *(_QWORD *)(v101 + 8);
      }
      if (!v103)
        MEMORY[0x19AEB936C](v101, 0x1020C40545B2139);
      goto LABEL_109;
    }
  }
  else
  {
    v51 = *a5;
  }
  v112 = (WebCore::ResourceRequestBase *)(a2 + 232);
  v110 = v44;
  if (*((_QWORD *)v51 + 94) == *(_QWORD *)(a1 + 264))
  {
    v61 = *(_QWORD *)(a1 + 1344);
    ++*(_DWORD *)v61;
  }
  else
  {
    v61 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)v61 = 1;
    *(_OWORD *)(v61 + 8) = 0u;
    *(_OWORD *)(v61 + 24) = 0u;
    *(_OWORD *)(v61 + 40) = 0u;
    *(_OWORD *)(v61 + 56) = 0u;
    v51 = *a5;
  }
  v111 = a7;
  v70 = a7 == 2;
  WebKit::BrowsingContextGroup::ensureProcessForSite((WebKit::BrowsingContextGroup *)v61, (const WebKit::Site *)&v114, v51, *(const WebKit::WebPreferences **)(a1 + 224), &v124);
  v71 = WTF::fastMalloc((WTF *)0x1A0);
  v72 = *a4;
  *a4 = 0;
  *(_QWORD *)buf = v72;
  WebKit::ProvisionalPageProxy::ProvisionalPageProxy(v71, a1, (uint64_t *)&v124, (_DWORD *)v61, (uint64_t *)buf, a2, v110, v112, a6, v70, v42, a13);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = v71;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v74 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v74 = &off_1E34D4A00;
  *(_QWORD *)(v74 + 8) = a1;
  *(_QWORD *)(v74 + 16) = a1;
  *(_QWORD *)(v74 + 24) = a2;
  *(_BYTE *)(v74 + 32) = v111;
  *(_QWORD *)(v74 + 40) = v42;
  *(_QWORD *)(v74 + 48) = a9;
  *(_BYTE *)(v74 + 56) = a10;
  v113 = (_QWORD *)v74;
  v75 = *(const WebKit::ProvisionalPageProxy **)(a1 + 1120);
  if (*((_BYTE *)v75 + 307))
  {
    v76 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
    v77 = (unsigned int *)(v76 + 16);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
    *(_QWORD *)buf = v76;
    *(_QWORD *)&buf[8] = v113;
    v79 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v112);
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)&buf[16], v79);
    v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1120) + 40) + 16);
    v81 = (unsigned int *)(v80 + 16);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 + 1, v81));
    v117 = v80;
    v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1120) + 40) + 16) + 1016);
    if (v83)
    {
      v84 = *(_QWORD **)v83;
      ++*(_QWORD *)(v83 + 8);
      if (v84)
      {
        if (*v84)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v84 + 16))(*v84, 1);
      }
    }
    v118 = v83;
    v119[0] = a12;
    v85 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v85 = off_1E34D4A28;
    *(_QWORD *)(v85 + 8) = *(_QWORD *)buf;
    *(_OWORD *)(v85 + 16) = *(_OWORD *)&buf[8];
    *(_QWORD *)(v85 + 32) = v117;
    *(_QWORD *)(v85 + 40) = v118;
    *(_BYTE *)(v85 + 48) = v119[0];
    v113 = (_QWORD *)v85;
    v75 = *(const WebKit::ProvisionalPageProxy **)(a1 + 1120);
  }
  else
  {
    v85 = v74;
  }
  if (WebKit::WebPageInspectorController::shouldPauseLoading(*(WebKit::WebPageInspectorController **)(a1 + 1072), v75))
  {
    WebKit::WebPageInspectorController::setContinueLoadingCallback(*(_QWORD *)(a1 + 1072), *(_QWORD *)(a1 + 1120));
    v85 = (uint64_t)v113;
    v113 = 0;
    if (!v85)
      goto LABEL_90;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
    v113 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
LABEL_90:
  if (v124)
    WTF::RefCounted<WebKit::FrameProcess>::deref(v124, v86);
  WTF::RefCounted<WebKit::BrowsingContextGroup>::deref((WebKit::BrowsingContextGroup *)v61, v86);
  v42 = 0;
LABEL_112:
  v108 = v115;
  v115 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, v87);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = v114;
  v114 = 0;
  if (!v109)
  {
LABEL_119:
    if (!v42)
      return;
    goto LABEL_120;
  }
  if (*(_DWORD *)v109 != 2)
  {
    *(_DWORD *)v109 -= 2;
    goto LABEL_119;
  }
  WTF::StringImpl::destroy(v109, v87);
  if (v42)
LABEL_120:
    CFRelease(v42[1]);
}

uint64_t *WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2::~$_2(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[4];
  a1[4] = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  v9 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = a1[1];
  a1[1] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *a1;
  *a1 = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  return a1;
}

void WebKit::WebPageProxy::setUserAgent(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;

  v11 = (char)a3;
  if ((WTF::equal(*(WTF **)(a1 + 304), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 304), a2);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebProcessPool::updateRemoteWorkerUserAgent((WTF **)v6, (const WTF::StringImpl **)(a1 + 304), v7);
    if (v5)
      CFRelease(*(CFTypeRef *)(v6 + 8));
    if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728))
    {
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34D4A50;
      v8[1] = a1;
      v8[2] = &v11;
      v10 = v8;
      WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)a1, &v10);
      v9 = v10;
      v10 = 0;
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
}

uint64_t WebKit::WebPageProxy::setCustomUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WebKit::WebPageProxy *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  result = WTF::equal(this[41], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=(this + 41, (WTF::StringImpl *)a2);
    v6 = this[41];
    if (v6 && *((_DWORD *)v6 + 1))
    {
      *(_DWORD *)v6 += 2;
      v10 = v6;
      v7 = (WebKit::WebPageProxy *)this;
      v8 = 1;
    }
    else
    {
      WebCore::standardUserAgentWithApplicationName();
      v7 = (WebKit::WebPageProxy *)this;
      v8 = 0;
    }
    WebKit::WebPageProxy::setUserAgent((uint64_t)v7, (WTF::StringImpl *)&v10, (const WTF::StringImpl *)v8);
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::resumeActiveDOMObjectsAndAnimations(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729) && *(_BYTE *)(this + 728))
  {
    if (*(_BYTE *)(this + 824))
    {
      *(_BYTE *)(this + 824) = 0;
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResumeActiveDOMObjectsAndAnimations>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::suspendActiveDOMObjectsAndAnimations(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729) && *(_BYTE *)(this + 728) && !*(_BYTE *)(this + 824))
  {
    *(_BYTE *)(this + 824) = 1;
    v1 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SuspendActiveDOMObjectsAndAnimations>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
  }
  return this;
}

IPC::Encoder *WebKit::WebPageProxy::suspend(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  IPC::Encoder *v21;
  _BYTE buf[22];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v5 + 744);
    v7 = *(_QWORD *)(v5 + 1896);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    v23 = 2048;
    v24 = v7;
    v25 = 1024;
    v26 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::suspend:", buf, 0x26u);
  }
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728) || *(_BYTE *)(a1 + 1290))
  {
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    *(_BYTE *)(a1 + 1290) = 1;
    v11 = *(_QWORD *)(a1 + 208);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2460;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v21 = (IPC::Encoder *)v13;
    v14 = *a2;
    *a2 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34D4A78;
    v15[1] = v14;
    v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)buf = v15;
    *(_QWORD *)&buf[8] = v16;
    buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      v18 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::resume(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  IPC::Encoder *v21;
  _BYTE buf[22];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v5 + 744);
    v7 = *(_QWORD *)(v5 + 1896);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    v23 = 2048;
    v24 = v7;
    v25 = 1024;
    v26 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::resume:", buf, 0x26u);
  }
  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728) && *(_BYTE *)(a1 + 1290))
  {
    *(_BYTE *)(a1 + 1290) = 0;
    v11 = *(_QWORD *)(a1 + 208);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2343;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v21 = (IPC::Encoder *)v13;
    v14 = *a2;
    *a2 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34D4AA0;
    v15[1] = v14;
    v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)buf = v15;
    *(_QWORD *)&buf[8] = v16;
    buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      v18 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setCustomTextEncodingName(WebKit::WebPageProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl **v6;

  result = WTF::equal(*((WTF **)this + 42), *a2, a3);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)this + 42, (WTF::StringImpl *)a2);
    if (!*((_BYTE *)this + 729))
    {
      if (*((_BYTE *)this + 728))
      {
        v6 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCustomTextEncodingName>(*((_QWORD *)this + 26), (uint64_t **)&v6, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::sessionState@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::RunLoop *v6;
  void *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;

  v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197341BE4);
  }
  *(_BYTE *)(a3 + 20) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  WTF::URL::invalidate((WTF::URL *)(a3 + 32));
  *(_BYTE *)(a3 + 72) = 1;
  WebKit::WebBackForwardList::backForwardListState(*(_QWORD *)(a1 + 592), a2, (uint64_t)&v16);
  v8 = *(_DWORD *)(a3 + 12);
  if (v8)
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 312 * v8));
  v9 = *(WTF **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    WTF::fastFree(v9, v7);
  }
  *(_QWORD *)a3 = v16;
  v10 = v17;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = v18;
  *(_BYTE *)(a3 + 20) = v19;
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(WTF::StringImpl **)(v11 + 984);
  if (v12)
  {
    *(_DWORD *)v12 += 2;
    v20 = v12;
    if (*((_DWORD *)v12 + 1))
      goto LABEL_8;
  }
  else
  {
    v20 = 0;
  }
  WTF::String::operator=(&v20, (WTF::StringImpl *)(v11 + 992));
  result = v20;
  if (!v20)
  {
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 864);
    *(_BYTE *)(a3 + 72) = *(_BYTE *)(a1 + 1288);
    return result;
  }
  if (!*((_DWORD *)v20 + 1))
  {
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 864);
    *(_BYTE *)(a3 + 72) = *(_BYTE *)(a1 + 1288);
    v20 = 0;
LABEL_13:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    *(_DWORD *)result -= 2;
    return result;
  }
LABEL_8:
  WTF::URL::URL((uint64_t)&v16, &v20);
  WTF::URL::operator=(a3 + 32, (WTF::StringImpl *)&v16);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v20;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 864);
  *(_BYTE *)(a3 + 72) = *(_BYTE *)(a1 + 1288);
  v20 = 0;
  if (result)
    goto LABEL_13;
  return result;
}

void WebKit::WebPageProxy::restoreFromSessionState(WebKit::WebPageProxy *this@<X0>, SessionState *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 engaged;
  CFTypeRef *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WTF::StringImpl *v30;
  unint64_t renderTreeSize;
  URL *p_provisionalURL;
  StringImpl *m_ptr;
  CFTypeRef v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  BackForwardListState v40;
  IPC::Encoder *v41;
  _BYTE buf[22];
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  CFTypeRef cf;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *((_QWORD *)this + 4);
    v10 = *(_QWORD *)(v9 + 744);
    v11 = *(_QWORD *)(v9 + 1896);
    v12 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v12)
      LODWORD(v12) = *(_DWORD *)(v12 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    v43 = 2048;
    v44 = v11;
    v45 = 1024;
    v46 = v12;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::restoreFromSessionState:", buf, 0x26u);
  }
  *((_BYTE *)this + 1288) = a2->isAppInitiated;
  *((_QWORD *)this + 109) = 0;
  *((_BYTE *)this + 880) = 0;
  engaged = a2->backForwardListState.currentIndex.__engaged_;
  if (a2->backForwardListState.currentIndex.__engaged_)
  {
    *((_BYTE *)this + 1192) = 1;
    v14 = (CFTypeRef *)*((_QWORD *)this + 74);
    CFRetain(v14[1]);
    v40.items.m_buffer = a2->backForwardListState.items.m_buffer;
    v15 = *(_QWORD *)&a2->backForwardListState.items.m_capacity;
    a2->backForwardListState.items.m_buffer = 0;
    *(_QWORD *)&a2->backForwardListState.items.m_capacity = 0;
    *(_QWORD *)&v40.items.m_capacity = v15;
    v40.currentIndex = a2->backForwardListState.currentIndex;
    WebKit::WebBackForwardList::restoreFromState((uint64_t)v14, &v40);
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v16);
    if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
    {
      WebKit::WebBackForwardList::itemStates((WebKit::WebBackForwardList *)v14, (uint64_t)v39);
      v17 = *((_QWORD *)this + 26);
      v18 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
      v19 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v19 = 2342;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v19 + 528) = v19 + 16;
      *(_QWORD *)(v19 + 536) = v19 + 16;
      *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v19 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
      v41 = (IPC::Encoder *)v19;
      IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v19, (uint64_t)v39);
      buf[0] = 0;
      buf[16] = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v17, &v41, 0, (uint64_t)buf, 1);
      if (buf[16])
      {
        v21 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      v22 = v41;
      v41 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v20);
        WTF::fastFree(v23, v24);
      }
      WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v20);
    }
    v25 = *((_QWORD *)this + 4);
    v26 = *(_QWORD *)(v25 + 960);
    v27 = v25;
    if (v26)
    {
      CFRetain(*(CFTypeRef *)(v26 + 8));
      v27 = *((_QWORD *)this + 4);
    }
    *(_QWORD *)buf = v26;
    *(_QWORD *)&buf[8] = v25 + 944;
    ++*(_DWORD *)(v25 + 1316);
    *(_BYTE *)(v25 + 1312) = 1;
    *(_BYTE *)(v27 + 1272) = WebKit::WebBackForwardList::backItem((uint64_t)v14) != 0;
    v28 = *((_QWORD *)this + 4);
    *(_BYTE *)(v25 + 1312) = 1;
    *(_BYTE *)(v28 + 1273) = WebKit::WebBackForwardList::forwardItem((uint64_t)v14) != 0;
    *((_BYTE *)this + 893) = 1;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v29, v30);
    CFRelease(v14[1]);
  }
  if (!a3)
    goto LABEL_31;
  renderTreeSize = a2->renderTreeSize;
  *((_QWORD *)this + 109) = renderTreeSize;
  if (!renderTreeSize)
    *((_BYTE *)this + 880) = 1;
  m_ptr = a2->provisionalURL.m_string.m_impl.m_ptr;
  p_provisionalURL = &a2->provisionalURL;
  if (!m_ptr)
  {
    if (engaged)
    {
      v35 = *((_QWORD *)this + 74);
      v36 = *(_QWORD *)(v35 + 16);
      if (v36)
      {
        if (*(_QWORD *)(v36 + 8) && *(_BYTE *)(v35 + 48))
        {
          v37 = *(_QWORD *)(v35 + 40);
          if (v37 >= *(unsigned int *)(v35 + 36))
          {
            __break(0xC471u);
            return;
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v37);
          if (v38)
          {
            CFRetain(*(CFTypeRef *)(v38 + 8));
            WebKit::WebPageProxy::goToBackForwardItem((uint64_t)this, v38, 3u, a4);
            CFRelease(*(CFTypeRef *)(v38 + 8));
            return;
          }
        }
      }
    }
LABEL_31:
    *a4 = 0;
    return;
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const WTF::URL *)p_provisionalURL, 0);
  cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)this, (WebCore::ResourceRequestBase *)buf, 1, 0, a4);
  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
}

uint64_t WebKit::WebPageProxy::setTextZoomFactor(uint64_t this, double a2)
{
  double v2;

  if (*(_BYTE *)(this + 857) || *(double *)(this + 624) != a2)
  {
    *(double *)(this + 624) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTextZoomFactor>(*(_QWORD *)(this + 208), (uint64_t *)&v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageZoomFactor(uint64_t this, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = this;
  if (*(_BYTE *)(this + 857) || *(double *)(this + 632) != a2)
  {
    this = WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
    *(double *)(v3 + 632) = a2;
    if (!*(_BYTE *)(v3 + 729) && *(_BYTE *)(v3 + 728))
    {
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = off_1E34D4AC8;
      v4[1] = v3;
      v5 = (uint64_t)v4;
      WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)v3, &v5);
      this = v5;
      v5 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageAndTextZoomFactors(uint64_t this, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6[2];

  v5 = this;
  if (*(_BYTE *)(this + 857) || *(double *)(this + 632) != a2 || *(double *)(this + 624) != a3)
  {
    this = WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
    *(double *)(v5 + 632) = a2;
    *(double *)(v5 + 624) = a3;
    if (!*(_BYTE *)(v5 + 729))
    {
      if (*(_BYTE *)(v5 + 728))
      {
        *(double *)v6 = a2;
        *(double *)&v6[1] = a3;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageAndTextZoomFactors>(*(_QWORD *)(v5 + 208), v6, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::scalePage(uint64_t this, double a2, const WebCore::IntPoint *a3)
{
  uint64_t v3[2];

  *(double *)(this + 640) = a2;
  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      *(double *)v3 = a2;
      v3[1] = (uint64_t)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScalePage>(*(_QWORD *)(this + 208), v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setCustomDeviceScaleFactor(uint64_t this, float a2)
{
  float *v2;
  float v3;
  float *v4;
  char v5;
  int v6;

  v2 = (float *)(this + 692);
  if (!*(_BYTE *)(this + 696))
  {
    v4 = (float *)(this + 688);
    v3 = *(float *)(this + 688);
    if (a2 == 0.0)
    {
      v6 = 1;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  v3 = *v2;
  if (*v2 == a2)
    return this;
  v4 = (float *)(this + 688);
  if (a2 != 0.0)
  {
LABEL_6:
    v6 = 0;
    *v2 = a2;
    v5 = 1;
    goto LABEL_7;
  }
  v5 = 0;
  v6 = 1;
LABEL_7:
  *(_BYTE *)(this + 696) = v5;
LABEL_9:
  if (!*(_BYTE *)(this + 729) && *(_BYTE *)(this + 728))
  {
    if (v6)
      v2 = v4;
    if (*v2 != v3)
      return (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(this + 184) + 56))(*(_QWORD *)(this + 184), *v2);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::accessibilitySettingsDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CFTypeRef *v3;
  char v4;

  if (!*(_BYTE *)(this + 729))
  {
    v1 = this;
    if (*(_BYTE *)(this + 728))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 208) + 512) + 8);
      if (v2)
        v3 = (CFTypeRef *)(v2 - 16);
      else
        v3 = 0;
      CFRetain(v3[1]);
      WebKit::WebProcessPool::screenPropertiesChanged((WebKit::WebProcessPool *)v3);
      if (v2)
        CFRelease(v3[1]);
      v4 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AccessibilitySettingsDidChange>(*(_QWORD *)(v1 + 208), (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setFixedLayoutSize(uint64_t this, const WebCore::IntSize *a2)
{
  uint64_t v2;
  _DWORD *v4;

  v2 = *(_QWORD *)(this + 32);
  if (*(_DWORD *)a2 != *(_DWORD *)(v2 + 704) || *((_DWORD *)a2 + 1) != *(_DWORD *)(v2 + 708))
  {
    *(_QWORD *)(v2 + 704) = *(_QWORD *)a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v4 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFixedLayoutSize>(*(_QWORD *)(this + 208), &v4, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setSuppressScrollbarAnimations(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 708) != a2)
  {
    *(_BYTE *)(this + 708) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetSuppressScrollbarAnimations>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setEnableVerticalRubberBanding(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 852) != a2)
  {
    *(_BYTE *)(this + 852) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableVerticalRubberBanding>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setEnableHorizontalRubberBanding(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 853) != a2)
  {
    *(_BYTE *)(this + 853) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableHorizontalRubberBanding>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPaginationMode(uint64_t result, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(result + 709) != a2)
  {
    *(_BYTE *)(result + 709) = a2;
    if (!*(_BYTE *)(result + 729))
    {
      if (*(_BYTE *)(result + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationMode>(*(_QWORD *)(result + 208), &v2, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setPaginationBehavesLikeColumns(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 710) != a2)
  {
    *(_BYTE *)(this + 710) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationBehavesLikeColumns>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setPageLength(uint64_t this, double a2)
{
  double v2;

  if (*(double *)(this + 712) != a2)
  {
    *(double *)(this + 712) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageLength>(*(_QWORD *)(this + 208), (uint64_t *)&v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setGapBetweenPages(uint64_t this, double a2)
{
  double v2;

  if (*(double *)(this + 720) != a2)
  {
    *(double *)(this + 720) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetGapBetweenPages>(*(_QWORD *)(this + 208), (uint64_t *)&v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::pageScaleFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  BOOL v3;
  BOOL v4;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3 > 0.0)
  {
    v4 = a3 == 100.0;
    v3 = a3 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    v6 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v7 = 136315138;
      v8 = "void WebKit::WebPageProxy::pageScaleFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_196BCC000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5469: Invalid message dispatched %s", (uint8_t *)&v7, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 80) = a3;
  }
}

void WebKit::WebPageProxy::pluginScaleFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  BOOL v3;
  BOOL v4;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3 > 0.0)
  {
    v4 = a3 == 100.0;
    v3 = a3 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    v6 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v7 = 136315138;
      v8 = "void WebKit::WebPageProxy::pluginScaleFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_196BCC000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5475: Invalid message dispatched %s", (uint8_t *)&v7, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 84) = a3;
  }
}

void WebKit::WebPageProxy::pluginZoomFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  BOOL v3;
  BOOL v4;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3 > 0.0)
  {
    v4 = a3 == 100.0;
    v3 = a3 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    v6 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v7 = 136315138;
      v8 = "void WebKit::WebPageProxy::pluginZoomFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_196BCC000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5481: Invalid message dispatched %s", (uint8_t *)&v7, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 81) = a3;
  }
}

IPC::Encoder *WebKit::WebPageProxy::findStringMatches(uint64_t a1, WTF::StringImpl **a2, __int16 a3, int a4)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  WTF *v20;
  void *v21;
  _QWORD v22[3];
  int v23;
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v24 = a3;
  v23 = a4;
  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    v22[0] = a2;
    v22[1] = &v24;
    v22[2] = &v23;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v6 = *a2;
    if (v6)
      *(_DWORD *)v6 += 2;
    v7 = *(_QWORD *)(a1 + 208);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 2205;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v28 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v9, (uint64_t)v22);
    if (v6)
      *(_DWORD *)v6 += 2;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v12 = v10;
    *v10 = &off_1E34D4AF0;
    v10[1] = a1;
    v10[2] = a1;
    if (v6)
    {
      v13 = *(_DWORD *)v6;
      *(_DWORD *)v6 += 2;
      v10[3] = v6;
      if (v13)
        *(_DWORD *)v6 = v13;
      else
        WTF::StringImpl::destroy(v6, v11);
    }
    else
    {
      v10[3] = 0;
    }
    v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25 = v12;
    v26 = v17;
    v27 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v28, 0, (uint64_t)&v25, 1);
    if (v27)
    {
      v19 = v25;
      v25 = 0;
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    }
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      result = (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 120);
    v25 = 0;
    v26 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _QWORD **, _QWORD))(*(_QWORD *)v14 + 16))(v14, a1, a2, &v25, 0);
    return (IPC::Encoder *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::findString(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, int a4, uint64_t *a5)
{
  __int16 v6;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  IPC::Encoder *v13;
  IPC::Encoder *v14;
  WebKit::FindStringCallbackAggregator *v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  IPC::Encoder *v20;
  IPC::Encoder *result;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  int v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl **v32;
  WTF *v33;
  void *v34;
  _QWORD v35[3];
  _QWORD *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  WTF::StringImpl **v40;
  uint64_t *v41;
  int *v42;
  IPC::Encoder *v43;

  v6 = (__int16)a3;
  v39 = (__int16)a3;
  v38 = a4;
  v9 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, a3))
  {
    v37 = v6 | 0x800;
    v40 = a2;
    v41 = (uint64_t *)&v37;
    v42 = &v38;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34D4B18;
    v36 = v10;
    v11 = v38;
    v12 = WTF::fastMalloc((WTF *)0x38);
    v35[0] = WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(v12, a1, (_DWORD **)a2, v6, v11, (uint64_t *)&v36);
    v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v13 = off_1E34D41C0;
    *((_QWORD *)v13 + 1) = v35;
    *((_QWORD *)v13 + 2) = &v40;
    v43 = v13;
    WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)a1, &v43);
    v14 = v43;
    v43 = 0;
    if (v14)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v14 + 8))(v14);
    v15 = (WebKit::FindStringCallbackAggregator *)v35[0];
    v35[0] = 0;
    if (v15)
      WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v15);
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  }
  if (WebKit::BrowsingContextGroup::hasRemotePages(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1))
  {
    v16 = v6;
    LOWORD(v36) = v6 | 0x800;
    v40 = a2;
    v41 = (uint64_t *)&v36;
    v42 = &v38;
    v17 = v38;
    v18 = WTF::fastMalloc((WTF *)0x38);
    v35[0] = WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(v18, a1, (_DWORD **)a2, v16, v17, a5);
    v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v19 = off_1E34D4210;
    *((_QWORD *)v19 + 1) = v35;
    *((_QWORD *)v19 + 2) = &v40;
    v43 = v19;
    WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)a1, &v43);
    v20 = v43;
    v43 = 0;
    if (v20)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v20 + 8))(v20);
    result = (IPC::Encoder *)v35[0];
    v35[0] = 0;
    if (result)
      return WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(result);
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v22 = *a2;
    if (*a2)
      *(_DWORD *)v22 += 2;
    v23 = *a5;
    *a5 = 0;
    v35[0] = a2;
    v35[1] = &v39;
    v35[2] = &v38;
    v24 = *(_QWORD *)(a1 + 208);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v26 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v26 = 2203;
    *(_QWORD *)(v26 + 8) = v25;
    *(_QWORD *)(v26 + 528) = v26 + 16;
    *(_QWORD *)(v26 + 536) = v26 + 16;
    *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v26 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
    v43 = (IPC::Encoder *)v26;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v26, (uint64_t)v35);
    if (v22)
    {
      *(_DWORD *)v22 += 2;
      v28 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x20);
      *v28 = (WTF::StringImpl *)&off_1E34D4B40;
      v28[1] = (WTF::StringImpl *)a1;
      v29 = *(_DWORD *)v22;
      *(_DWORD *)v22 += 2;
      v28[2] = v22;
      v28[3] = (WTF::StringImpl *)v23;
      if (v29)
        *(_DWORD *)v22 = v29;
      else
        WTF::StringImpl::destroy(v22, v27);
    }
    else
    {
      v28 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x20);
      *v28 = (WTF::StringImpl *)&off_1E34D4B40;
      v28[1] = (WTF::StringImpl *)a1;
      v28[2] = 0;
      v28[3] = (WTF::StringImpl *)v23;
    }
    v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v40 = v28;
    v41 = (uint64_t *)v30;
    LOBYTE(v42) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v24, &v43, 0, (uint64_t)&v40, 1);
    if ((_BYTE)v42)
    {
      v32 = v40;
      v40 = 0;
      if (v32)
        (*((void (**)(WTF::StringImpl **))*v32 + 1))(v32);
    }
    result = v43;
    v43 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v31);
      result = (IPC::Encoder *)WTF::fastFree(v33, v34);
    }
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::findString(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, int a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34D4B68;
  v10 = v8;
  WebKit::WebPageProxy::findString(a1, a2, (const WTF::StringImpl *)a3, a4, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

uint64_t WebKit::WebPageProxy::countStringMatches(uint64_t result, WTF::StringImpl **a2, __int16 a3, int a4)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  _QWORD v19[3];
  int v20;
  __int16 v21;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v21 = a3;
  v20 = a4;
  if (!*(_BYTE *)(result + 729))
  {
    v4 = result;
    if (*(_BYTE *)(result + 728))
    {
      v19[0] = a2;
      v19[1] = &v21;
      v19[2] = &v20;
      CFRetain(*(CFTypeRef *)(result + 8));
      v6 = *a2;
      if (v6)
        *(_DWORD *)v6 += 2;
      v7 = *(_QWORD *)(v4 + 208);
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 2146;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v24 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v9, (uint64_t)v19);
      if (v6)
        *(_DWORD *)v6 += 2;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      v12 = v10;
      *v10 = &off_1E34D4C30;
      v10[1] = v4;
      v10[2] = v4;
      if (v6)
      {
        v13 = *(_DWORD *)v6;
        *(_DWORD *)v6 += 2;
        v10[3] = v6;
        if (v13)
          *(_DWORD *)v6 = v13;
        else
          WTF::StringImpl::destroy(v6, v11);
      }
      else
      {
        v10[3] = 0;
      }
      v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v22[0] = v12;
      v22[1] = v14;
      v23 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v24, 0, (uint64_t)v22, 1);
      if (v23)
      {
        v16 = v22[0];
        v22[0] = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      result = (uint64_t)v24;
      v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
        result = WTF::fastFree(v17, v18);
      }
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v15);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WebKit::ProcessThrottlerActivity *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t *v33[3];
  WebKit::ProcessThrottlerActivity *v34;
  int v35;
  WebKit::ProcessThrottlerActivity *v36;
  int v37;
  uint64_t v38;
  int v39;

  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)a1);
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v36 = 0;
    v39 = 0;
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WebKit::ProcessThrottlerActivity **))(*(_QWORD *)v10 + 16))(v10, &v36);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v39 != -1)
      return ((uint64_t (*)(uint64_t **, WebKit::ProcessThrottlerActivity **))off_1E34D4250[v39])(v33, &v36);
    return result;
  }
  v34 = 0;
  v35 = 0;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 208) + 200;
    v16 = WTF::fastMalloc((WTF *)0x28);
    v36 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v16, v15, "WebPageProxy::runJavaScriptInFrameInScriptWorld", 48, 1, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>((WebKit::ProcessThrottlerActivity *)&v34, &v34, &v36);
    v18 = v36;
    v36 = 0;
    if (v18)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v18, v17);
      WTF::fastFree(v19, v20);
    }
  }
  LOBYTE(v36) = 0;
  v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v36, (uint64_t)&v34);
  v21 = *a5;
  *a5 = 0;
  v38 = v21;
  v22 = *(_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 8);
  v24 = *(unsigned __int8 *)(a3 + 16);
  v25 = *(WTF::StringImpl **)(a4 + 32);
  v31 = *(_QWORD *)(a4 + 24);
  if (v25)
    *(_DWORD *)v25 += 2;
  v32 = v25;
  v33[0] = a2;
  v33[1] = (uint64_t *)a3;
  v33[2] = &v31;
  if (!v24)
    goto LABEL_18;
  v26 = WebKit::WebFrameProxy::webFrame(v22, v23);
  if (!v26)
    goto LABEL_18;
  v27 = v26;
  CFRetain(*(CFTypeRef *)(v26 + 8));
  v28 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v27 + 32) + 16));
  if (!v28)
  {
    CFRelease(*(CFTypeRef *)(v27 + 8));
LABEL_18:
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), v33, (uint64_t)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
    goto LABEL_19;
  }
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(*(_QWORD *)(v28 + 24), v33, (uint64_t)&v36, *(_QWORD *)(v28 + 16));
  CFRelease(*(CFTypeRef *)(v27 + 8));
LABEL_19:
  v30 = v32;
  v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v38;
  v38 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t **, WebKit::ProcessThrottlerActivity **))off_1E34D4170[v37])(v33, &v36);
  if (v35 != -1)
    return ((uint64_t (*)(WebKit::ProcessThrottlerActivity **, WebKit::ProcessThrottlerActivity **))off_1E34D4170[v35])(&v36, &v34);
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::getContentsAsAttributedString(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  IPC::Encoder *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD v17[2];
  char v18;
  IPC::Encoder *v19;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v17);
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return (IPC::Encoder *)MEMORY[0x19AEAEECC](v17);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 208) + 200;
    v8 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v8, v7, "getContentsAsAttributedString", 30, 1, 0);
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 2220;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v19 = (IPC::Encoder *)v11;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34D4CF8;
    v12[1] = v6;
    v12[2] = v8;
    v17[0] = v12;
    v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      v14 = v17[0];
      v17[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void WebKit::WebPageProxy::getAllFrames(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  char v9;
  __int16 v10;
  _BYTE v11[192];
  const void *v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[5];
  char v16;
  int v17;
  __int16 v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 280);
  if (v3)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebFrameProxy::getFrameInfo((_QWORD *)v3, a2);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  else
  {
    v10 = 0;
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v11);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19[0] = 0;
    v19[1] = 0;
    v14 = 0u;
    memset(v15, 0, 25);
    v13 = 0u;
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v4 + 16))(v4, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v5);
    v7 = (WTF::StringImpl *)v15[0];
    v15[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (DWORD2(v14) != -1)
      ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v14)])(&v9, &v13);
    DWORD2(v14) = -1;
    v8 = v12;
    v12 = 0;
    if (v8)
      CFRelease(v8);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
  }
}

WTF **WebKit::WebPageProxy::getAllFrameTrees(_QWORD *a1, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF *v12[2];

  if (a1[35])
  {
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v4 = 1;
    v5 = *a2;
    *a2 = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 1) = v5;
    v12[0] = v4;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34D4D20;
    v6[1] = v12;
    v11 = v6;
    WebKit::WebPageProxy::forEachWebContentProcess(a1, &v11);
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    return WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(v12);
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v9 + 16))(v9, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return (WTF **)WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
  }
}

WTF **WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(WTF **a1)
{
  WTF *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, (_QWORD *)v2 + 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 16, v4);
      v6 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v2, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::getSelectionAsWebArchiveData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  char v7;

  v7 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34D4DC0;
  v4[1] = v3;
  v6 = v4;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v7, (uint64_t *)&v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::saveResources(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, WTF::StringImpl **a5, uint64_t *a6)
{
  _DWORD *v8;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int16 v14;
  WTF::StringImpl *result;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  WTF::StringImpl *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  uint64_t v33[3];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[2];
  char v36;
  IPC::Encoder *v37;

  if (!a2)
  {
    v13 = *a6;
    *a6 = 0;
    v14 = 259;
LABEL_9:
    LOWORD(v35[0]) = v14;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, v35);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v8 = *a4;
  if (!*a4 || !v8[1])
  {
    v13 = *a6;
    *a6 = 0;
    v14 = 258;
    goto LABEL_9;
  }
  v12 = *a5;
  if (*a5 && (*(_DWORD *)v12 += 2, v34 = v12, *((_DWORD *)v12 + 1)))
  {
    *(_OWORD *)v33 = *(_OWORD *)(a2 + 272);
  }
  else
  {
    WTF::URL::host((WTF::URL *)(a2 + 48));
    if ((_DWORD)v16)
    {
      if ((v16 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
    v34 = v35[0];
    v35[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v17);
        v35[0] = 0;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    v8 = *a4;
    *(_OWORD *)v33 = *(_OWORD *)(a2 + 272);
    if (!v8)
      goto LABEL_20;
  }
  *v8 += 2;
LABEL_20:
  v18 = *a6;
  *a6 = 0;
  v19 = *(_QWORD *)(a1 + 208);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
  v21 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v21 = 2242;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 528) = v21 + 16;
  *(_QWORD *)(v21 + 536) = v21 + 16;
  *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v21 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
  v37 = (IPC::Encoder *)v21;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v21, v33);
  v22 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v21, 8uLL, 8) = v22;
  v23 = *(_DWORD *)(a3 + 12);
  if (v23)
  {
    v24 = *(uint64_t **)a3;
    v25 = &v24[3 * v23];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, v24);
      IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v21, (uint64_t)(v24 + 1));
      v24 += 3;
    }
    while (v24 != v25);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v34);
  v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v26 = &off_1E34D4E60;
  *((_QWORD *)v26 + 1) = v8;
  *((_QWORD *)v26 + 2) = v18;
  v27 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v35[0] = v26;
  v35[1] = v27;
  v36 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v37, 0, (uint64_t)v35, 1);
  if (v36)
  {
    v29 = v35[0];
    v35[0] = 0;
    if (v29)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 8))(v29);
  }
  v30 = v37;
  v37 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v28);
    WTF::fastFree(v31, v32);
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getMainResourceDataOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 *v10;

  if (a2)
  {
    v9 = *(_OWORD *)(a2 + 272);
    v10 = &v9;
    v4 = *a3;
    *a3 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34D4DC0;
    v5[1] = v4;
    v8 = v5;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(_QWORD *)(a1 + 208), (uint64_t **)&v10, (uint64_t *)&v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
    result = (uint64_t)v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getResourceDataFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  __int128 v9;
  uint64_t *v10[2];

  v9 = *(_OWORD *)(a2 + 272);
  v10[0] = (uint64_t *)&v9;
  v10[1] = (uint64_t *)(a3 + 16);
  v5 = *a4;
  *a4 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34D4DC0;
  v6[1] = v5;
  v8 = v6;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(_QWORD *)(a1 + 208), v10, (uint64_t *)&v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::getWebArchiveOfFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  __int128 v11;
  char v12;
  __int128 *v13;

  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)a1);
  if (a2)
  {
    v11 = *(_OWORD *)(a2 + 272);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v11) = 0;
  }
  v12 = v6;
  v13 = &v11;
  v7 = *a3;
  *a3 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34D4DC0;
  v8[1] = v7;
  v10 = v8;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(*(_QWORD *)(a1 + 208), (uint64_t **)&v13, (uint64_t *)&v10, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::updateRenderingWithForcedRepaint(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    v6 = *(unsigned int **)(a1 + 24);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = *a2;
    *a2 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34D4F60;
    v9[1] = v6;
    v9[2] = v8;
    v10 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v9;
    v15 = (unsigned int *)v10;
    v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E34D4F88;
    *((_QWORD *)v11 + 1) = &v15;
    v16 = v11;
    WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)a1, &v16);
    result = (uint64_t)v16;
    v16 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v16 = v12;
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didCreateMainFrame(uint64_t result, IPC::Connection *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit::FrameProcess *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  _BYTE v28[24];
  uint64_t v29;

  v7 = result;
  v29 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(result + 280);
  if (!v8
    || ((v10 = *(_QWORD *)(v8 + 272), v9 = *(_QWORD *)(v8 + 280), v10 == a3) ? (v11 = v9 == a4) : (v11 = 0), !v11))
  {
    v12 = *(_QWORD *)(result + 40);
    if (v12)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
    if (*(_QWORD *)(v7 + 280))
    {
      v26 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_28;
      *(_DWORD *)v28 = 136315138;
      *(_QWORD *)&v28[4] = "void WebKit::WebPageProxy::didCreateMainFrame(IPC::Connection &, FrameIdentifier)";
      v27 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5890: Invalid message dispatched %s";
    }
    else
    {
      if (WebKit::WebFrameProxy::canCreateFrame(a3, a4))
      {
        WebKit::BrowsingContextGroup::ensureProcessForConnection(*(WebKit::BrowsingContextGroup **)(v7 + 1344), a2, (WebKit::WebProcessProxy **)v7, *(const WebKit::WebPreferences **)(v7 + 224), (WebKit::FrameProcess **)v28);
        v14 = *(_DWORD **)v28;
        v15 = API::Object::newObject(0x1C8uLL, 59);
        WebKit::WebFrameProxy::WebFrameProxy(v15, v7, v14, a3, a4);
        v17 = *(WebKit::FrameProcess **)v28;
        *(_QWORD *)v28 = 0;
        if (v17)
          WTF::RefCounted<WebKit::FrameProcess>::deref(v17, v16);
        CFRetain(*(CFTypeRef *)(v15 + 8));
        v19 = *(_QWORD *)(v7 + 280);
        *(_QWORD *)(v7 + 280) = v15;
        if (v19)
          CFRelease(*(CFTypeRef *)(v19 + 8));
        v20 = *(_QWORD *)(v7 + 224);
        {
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v20 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v18))WebKit::BrowsingContextGroup::addPage(*(WebKit::BrowsingContextGroup **)(v7 + 1344), (WebKit::WebPageProxy *)v7);
        v21 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v21 = off_1E34D4270;
        *(_QWORD *)(v21 + 8) = 0;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_QWORD *)(v21 + 48) = 0;
        std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100]((WebKit::WebPageProxyFrameLoadStateObserver **)(*(_QWORD *)(v7 + 32) + 2576), (WTF::StringImpl *)v21);
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*(_QWORD *)(v7 + 280) + 208, *(unsigned int **)(*(_QWORD *)(v7 + 32) + 2576), (uint64_t)v28);
        v22 = *(_QWORD *)(v7 + 32);
        v23 = *(_QWORD *)(v22 + 2144);
        if (v23)
        {
          *(_QWORD *)(v22 + 2144) = 0;
          v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v24 = &off_1E34D5000;
          v24[1] = v23;
          v25 = *(_QWORD *)(v15 + 424);
          *(_QWORD *)(v15 + 424) = v24;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        CFRelease(*(CFTypeRef *)(v15 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
      }
      v26 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_28:
        *((_BYTE *)a2 + 98) = 1;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
      }
      *(_DWORD *)v28 = 136315138;
      *(_QWORD *)&v28[4] = "void WebKit::WebPageProxy::didCreateMainFrame(IPC::Connection &, FrameIdentifier)";
      v27 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5891: Invalid message dispatched %s";
    }
    _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, v27, v28, 0xCu);
    goto LABEL_28;
  }
  return result;
}

void WebKit::WebPageProxy::didCreateSubframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl *a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v11)
  {
    v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebFrameProxy::didCreateSubframe(v12, a5, a6, a7);
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    v13 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v14 = 136315138;
      v15 = "void WebKit::WebPageProxy::didCreateSubframe(IPC::Connection &, FrameIdentifier, FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5913: Invalid message dispatched %s", (uint8_t *)&v14, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::didDestroyFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  WebKit::AuthenticatorManager *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *v12;
  _QWORD *v13;
  uint64_t result;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)&v18 = a3;
  *((_QWORD *)&v18 + 1) = a4;
  v8 = a1[33];
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *(WebKit::AuthenticatorManager **)(v8 + 360);
  v17 = *(_QWORD *)(a1[4] + 1896);
  v15 = v18;
  v16 = 1;
  WebKit::AuthenticatorManager::cancelRequest(v9, (uint64_t)&v17, (uint64_t)&v15);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  v10 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(a1[6] + 24))
        + 40);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebAutomationSession::didDestroyFrame(v10, a3, a4);
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  v11 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v11)
  {
    v12 = (CFTypeRef *)v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    WebKit::WebFrameProxy::disconnect((WebKit::WebFrameProxy *)v12);
    CFRelease(v12[1]);
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34D5028;
  v13[1] = a2;
  v13[2] = &v18;
  *(_QWORD *)&v15 = v13;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v15);
  result = v15;
  *(_QWORD *)&v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishProgress(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _QWORD v12[2];

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v6 + 960);
  v8 = v6;
  if (v7)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  v12[0] = v7;
  v12[1] = v6 + 944;
  ++*(_DWORD *)(v6 + 1316);
  *(_BYTE *)(v6 + 1312) = 1;
  *(_QWORD *)(v8 + 1280) = 0x3FF0000000000000;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v8 + 944), v4, v5);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v12, v9, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
}

void WebKit::WebPageProxy::setNetworkRequestsInProgress(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = a2;
  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(v4 + 960);
  v6 = v4;
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v6 = *((_QWORD *)this + 4);
  }
  v8[0] = v5;
  v8[1] = v4 + 944;
  ++*(_DWORD *)(v4 + 1316);
  *(_BYTE *)(v4 + 1312) = 1;
  *(_BYTE *)(v6 + 1288) = v3;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v8, a2, a3);
}

void WebKit::WebPageProxy::updateRemoteFrameSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  char v12;
  __int128 v13;
  char v14;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v9 = a4;
  v6 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    if (!*(_BYTE *)(v7 + 452))
      *(_BYTE *)(v7 + 452) = 1;
    *(_QWORD *)(v7 + 444) = a4;
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  v13 = v10;
  v8[0] = &v10;
  v8[1] = &v9;
  v14 = 1;
  v11 = v8;
  v12 = 0;
  WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::UpdateFrameSize>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::UpdateFrameSize &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::UpdateFrameSize&)#1}>(a1, (uint64_t)&v13, (uint64_t)&v11);
}

void WebKit::WebPageProxy::didDestroyNavigation(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 26);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = v2;
  WebKit::WebPageProxy::didDestroyNavigationShared((uint64_t)this, (uint64_t)&v5, a2);
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
}

void WebKit::WebPageProxy::didDestroyNavigationShared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v8 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v9 = 136315138;
      v10 = "void WebKit::WebPageProxy::didDestroyNavigationShared(Ref<WebProcessProxy> &&, uint64_t)";
      _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6023: Invalid message dispatched %s", (uint8_t *)&v9, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 144) + 98) = 1;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
    WebKit::WebNavigationState::didDestroyNavigation(*(_QWORD *)(a1 + 160), *(_QWORD *)(*(_QWORD *)a2 + 176), a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  }
}

unsigned int *WebKit::WebPageProxy::didStartProvisionalLoadForFrame(WebCore::DiagnosticLoggingKeys *a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, const WTF::URL *a7, WTF::URL *a8, CFTypeRef **a9)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *result;
  WebKit::WebProcessProxy *v13;

  v9 = (unsigned int *)*((_QWORD *)a1 + 26);
  v10 = v9 + 4;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v13 = (WebKit::WebProcessProxy *)v9;
  result = (unsigned int *)WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(a1, &v13, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v9)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9 + 4);
  return result;
}

uint64_t WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(WebCore::DiagnosticLoggingKeys *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, const WTF::URL *a8, WTF::URL *a9, CFTypeRef **a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  NSObject *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF **v44;
  const WTF::StringImpl *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  CFTypeRef v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  const WTF::StringImpl *v66;
  uint64_t v67;
  WebKit::WebProcessProxy *v68;
  CFTypeRef *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WebKit::WebProcessProxy *v73;
  CFTypeRef *v74;
  uint64_t v75;
  uint64_t v76;
  WebKit::AuthenticatorManager *v77;
  uint64_t v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  NSObject *v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  const WTF::StringImpl **v87;
  _QWORD v88[2];
  _BYTE buf[22];
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int v97;
  __int16 v98;
  CFTypeRef cf;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v17 = *((_QWORD *)a1 + 5);
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 1584))(v18);
  v19 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v19)
  {
    v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, *a2, a8))
    {
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, *a2, a9))
      {
        v22 = *((_QWORD *)a1 + 28);
        {
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v22 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v21))
        {
          if (*(_QWORD *)(WebKit::WebFrameProxy::provisionalLoadProcess((WebKit::WebFrameProxy *)v20) + 176) != *((_QWORD *)*a2 + 22))
          {
LABEL_99:
            CFRelease(*(CFTypeRef *)(v20 + 8));
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
          }
          if (!*(_DWORD *)(v20 + 40))
            WebKit::FrameLoadState::didFailProvisionalLoad((WebKit::FrameLoadState *)(v20 + 40));
        }
        v23 = *(_QWORD *)(v20 + 24);
        v87 = (const WTF::StringImpl **)a8;
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
          {
            if (*(_QWORD *)(v24 + 264) == v20 || (v25 = *(_QWORD *)(v24 + 1104)) != 0 && *(_QWORD *)(v25 + 72) == v20)
            {
              v26 = (WTF::StringImpl *)*((_QWORD *)a1 + 140);
              if (v26)
              {
                if (v20 != *((_QWORD *)v26 + 9))
                {
                  WebKit::ProvisionalPageProxy::cancel(v26);
                  v27 = *((_QWORD *)a1 + 140);
                  *((_QWORD *)a1 + 140) = 0;
                  if (v27)
                    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                }
              }
            }
          }
          v28 = *(_QWORD *)(v20 + 24);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              if (*(_QWORD *)(v29 + 264) == v20)
              {
                v31 = 1;
LABEL_37:
                v32 = 0;
                if (a7)
                {
                  if (v31)
                  {
                    v40 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*((_QWORD *)a1 + 20) + 8), a7);
                    v32 = v40;
                    if (v40)
                    {
                      CFRetain(*(CFTypeRef *)(v40 + 8));
                      v41 = *(_QWORD *)(v20 + 24);
                      if (v41)
                      {
                        v42 = *(_QWORD *)(v41 + 8);
                        if (v42)
                        {
                          if ((*(_QWORD *)(v42 + 264) == v20
                             || (v43 = *(_QWORD *)(v42 + 1104)) != 0 && *(_QWORD *)(v43 + 72) == v20)
                            && (*(_BYTE *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v32 + 232))
                                         + 8) & 1) != 0)
                          {
                            v44 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v32 + 232));
                            if ((WTF::equal(*v44, *v87, v45) & 1) == 0)
                            {
                              v46 = off_1ECE71C40;
                              if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)buf = 136315138;
                                *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Re"
                                                     "f<WebProcessProxy> &&, FrameIdentifier, FrameInfoData &&, ResourceR"
                                                     "equest &&, uint64_t, URL &&, URL &&, const UserData &)";
                                _os_log_fault_impl(&dword_196BCC000, v46, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6080: Invalid message dispatched %s", buf, 0xCu);
                              }
                              *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
LABEL_98:
                              CFRelease(*(CFTypeRef *)(v32 + 8));
                              goto LABEL_99;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_28:
                v33 = qword_1ECE71320;
                if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
                {
                  v35 = *((_QWORD *)a1 + 4);
                  v36 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
                  if (v36)
                    LODWORD(v36) = *(_DWORD *)(v36 + 108);
                  v37 = *(_QWORD *)(v35 + 744);
                  v38 = *(_QWORD *)(v35 + 1896);
                  v39 = *(_QWORD **)(v20 + 24);
                  if (v39)
                  {
                    v39 = (_QWORD *)v39[1];
                    if (v39)
                    {
                      if (v39[33] == v20)
                      {
                        LODWORD(v39) = 1;
                      }
                      else
                      {
                        v39 = (_QWORD *)v39[138];
                        if (v39)
                          LODWORD(v39) = v39[9] == v20;
                      }
                    }
                  }
                  *(_DWORD *)buf = 134219264;
                  *(_QWORD *)&buf[4] = a1;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v37;
                  v90 = 2048;
                  v91 = v38;
                  v92 = 1024;
                  v93 = v36;
                  v94 = 2048;
                  v95 = a3;
                  LOWORD(v96) = 1024;
                  *(_DWORD *)((char *)&v96 + 2) = (_DWORD)v39;
                  _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didStartProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
                }
                v85 = a6;
                v47 = a4;
                v48 = *((_QWORD *)a1 + 4);
                v49 = *(_QWORD *)(v48 + 960);
                v50 = v48;
                if (v49)
                {
                  CFRetain(*(CFTypeRef *)(v49 + 8));
                  v50 = *((_QWORD *)a1 + 4);
                }
                v88[0] = v49;
                v88[1] = v48 + 944;
                ++*(_DWORD *)(v48 + 1316);
                *(_BYTE *)(v48 + 1312) = 1;
                *(_QWORD *)(v50 + 1144) = 0;
                v51 = *(WTF::StringImpl **)(v50 + 1152);
                *(_QWORD *)(v50 + 1152) = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    v51 = (WTF::StringImpl *)WTF::StringImpl::destroy(v51, v34);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = *(_QWORD *)(v20 + 24);
                if (v52)
                {
                  v53 = *(_QWORD *)(v52 + 8);
                  if (v53)
                  {
                    if (*(_QWORD *)(v53 + 264) == v20
                      || (v54 = *(_QWORD *)(v53 + 1104)) != 0 && *(_QWORD *)(v54 + 72) == v20)
                    {
                      if ((int)WTF::numberOfProcessorCores(v51) >= 5)
                        WebKit::WebPageProxy::notifyProcessPoolToPrewarm(*(WebKit::WebPageProxy **)(*((_QWORD *)a1 + 26)
                                                                                                  + 512));
                      WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame(*a2, (const WTF::URL *)v87);
                      *(_QWORD *)buf = 0;
                      *(_QWORD *)&buf[8] = 0;
                      WTF::URL::invalidate((WTF::URL *)&buf[8]);
                      v96 = 0;
                      v97 = 0;
                      v98 = 3;
                      cf = 0;
                      v100 = 1;
                      WebKit::WebPageProxy::reportPageLoadResult(a1, (const WebCore::ResourceError *)buf);
                      v56 = cf;
                      cf = 0;
                      if (v56)
                        CFRelease(v56);
                      v57 = v96;
                      v96 = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2)
                          WTF::StringImpl::destroy(v57, v55);
                        else
                          *(_DWORD *)v57 -= 2;
                      }
                      v58 = *(WTF::StringImpl **)&buf[8];
                      *(_QWORD *)&buf[8] = 0;
                      if (v58)
                      {
                        if (*(_DWORD *)v58 == 2)
                          WTF::StringImpl::destroy(v58, v55);
                        else
                          *(_DWORD *)v58 -= 2;
                      }
                      v59 = *(WTF::StringImpl **)buf;
                      *(_QWORD *)buf = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2)
                          v59 = (WTF::StringImpl *)WTF::StringImpl::destroy(v59, v55);
                        else
                          *(_DWORD *)v59 -= 2;
                      }
                      WTF::MonotonicTime::now(v59);
                      v61 = *((_QWORD *)a1 + 4);
                      if (!*(_BYTE *)(v61 + 936))
                        *(_BYTE *)(v61 + 936) = 1;
                      *(_QWORD *)(v61 + 928) = v60;
                      v62 = *((_QWORD *)a1 + 4) + 944;
                      *(_BYTE *)(v48 + 1312) = 1;
                      WebKit::PageLoadState::didStartProvisionalLoad(v62, (uint64_t)buf, (WTF::StringImpl *)v87, a9);
                      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 192))(v18);
                      WebKit::WebPageProxy::closeOverlayedViews(a1);
                    }
                  }
                }
                WTF::String::operator=((WTF::StringImpl **)(v20 + 168), (WTF::StringImpl *)(v20 + 128));
                v63 = *(_OWORD *)(v20 + 152);
                *(_OWORD *)(v20 + 176) = *(_OWORD *)(v20 + 136);
                *(_OWORD *)(v20 + 192) = v63;
                WTF::String::operator=((WTF::StringImpl **)(v20 + 128), a9);
                v64 = *(_OWORD *)((char *)a9 + 24);
                *(_OWORD *)(v20 + 136) = *(_OWORD *)((char *)a9 + 8);
                *(_OWORD *)(v20 + 152) = v64;
                WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(v20 + 40), (const WTF::URL *)v87);
                WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*((_QWORD *)a1 + 4) + 944), v65, v66);
                v67 = *((_QWORD *)a1 + 7);
                if (v67)
                {
                  v68 = *a2;
                  v69 = *a10;
                  if (*a10)
                    CFRetain(v69[1]);
                  WebKit::WebProcessProxy::transformHandlesToObjects(v68, (API::Object *)v69, (WebKit **)buf);
                  (*(void (**)(uint64_t, WebCore::DiagnosticLoggingKeys *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 16))(v67, a1, v20, v32, *(_QWORD *)buf);
                  v70 = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  v71 = a3;
                  if (v70)
                    CFRelease(*(CFTypeRef *)(v70 + 8));
                  if (v69)
                    CFRelease(v69[1]);
                }
                else
                {
                  if (*a5)
                  {
                    v72 = *((_QWORD *)a1 + 9);
                    v73 = *a2;
                    v74 = *a10;
                    if (*a10)
                      CFRetain(v74[1]);
                    WebKit::WebProcessProxy::transformHandlesToObjects(v73, (API::Object *)v74, (WebKit **)buf);
                    (*(void (**)(uint64_t, WebCore::DiagnosticLoggingKeys *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, a1, v85, v32, *(_QWORD *)buf);
                    v75 = *(_QWORD *)buf;
                    *(_QWORD *)buf = 0;
                    if (v75)
                      CFRelease(*(CFTypeRef *)(v75 + 8));
                    if (v74)
                      CFRelease(v74[1]);
                  }
                  (*(void (**)(_QWORD, WebCore::DiagnosticLoggingKeys *, uint64_t, _BYTE *))(**((_QWORD **)a1 + 9) + 24))(*((_QWORD *)a1 + 9), a1, v85, a5);
                  v71 = a3;
                }
                v76 = *((_QWORD *)a1 + 33);
                CFRetain(*(CFTypeRef *)(v76 + 8));
                v77 = *(WebKit::AuthenticatorManager **)(v76 + 360);
                v78 = *((_QWORD *)a1 + 4) + 1896;
                *(_QWORD *)buf = v71;
                *(_QWORD *)&buf[8] = v47;
                buf[16] = 1;
                WebKit::AuthenticatorManager::cancelRequest(v77, v78, (uint64_t)buf);
                CFRelease(*(CFTypeRef *)(v76 + 8));
                WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v88, v79, v80);
                if (!v32)
                  goto LABEL_99;
                goto LABEL_98;
              }
              v30 = *(_QWORD *)(v29 + 1104);
              if (v30)
              {
                v31 = *(_QWORD *)(v30 + 72) == v20;
                goto LABEL_37;
              }
            }
          }
        }
        v32 = 0;
        goto LABEL_28;
      }
      v83 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_107:
        *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, Fra"
                           "meIdentifier, FrameInfoData &&, ResourceRequest &&, uint64_t, URL &&, URL &&, const UserData &)";
      v84 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6053: Invalid message dispatched %s";
    }
    else
    {
      v83 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_107;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, Fra"
                           "meIdentifier, FrameInfoData &&, ResourceRequest &&, uint64_t, URL &&, URL &&, const UserData &)";
      v84 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6052: Invalid message dispatched %s";
    }
    _os_log_fault_impl(&dword_196BCC000, v83, OS_LOG_TYPE_FAULT, v84, buf, 0xCu);
    goto LABEL_107;
  }
  v82 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, Frame"
                         "Identifier, FrameInfoData &&, ResourceRequest &&, uint64_t, URL &&, URL &&, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v82, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6051: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
}

void WebKit::WebPageProxy::didExplicitOpenForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, WTF::StringImpl *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  char v31;
  _BYTE buf[22];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = *(_QWORD *)(a1 + 208);
    v13 = (unsigned int *)(v12 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, (WebKit::WebProcessProxy *)v12, a5))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(v15 + 960);
      if (v16)
        CFRetain(*(CFTypeRef *)(v16 + 8));
      *(_QWORD *)buf = v16;
      *(_QWORD *)&buf[8] = v15 + 944;
      ++*(_DWORD *)(v15 + 1316);
      v17 = *(_QWORD *)(v11 + 24);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          if (*(_QWORD *)(v18 + 264) == v11 || (v19 = *(_QWORD *)(v18 + 1104)) != 0 && *(_QWORD *)(v19 + 72) == v11)
          {
            v20 = *(_QWORD *)(a1 + 32) + 944;
            *(_BYTE *)(v15 + 1312) = 1;
            WebKit::PageLoadState::didExplicitOpen(v20, (uint64_t)&v31, a5);
          }
        }
      }
      WTF::String::operator=((WTF::StringImpl **)(v11 + 224), a6);
      WebKit::FrameLoadState::didExplicitOpen((WebKit::FrameLoadState *)(v11 + 40), a5);
      *(_BYTE *)(a1 + 1049) = 1;
      *(_BYTE *)(v12 + 776) = 1;
      if ((WTF::URL::protocolIs() & 1) == 0)
        *(_BYTE *)(v12 + 777) = 1;
      WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v21, v22);
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v23, v24);
    }
    else
    {
      v25 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      {
        v26 = *(_QWORD *)(a1 + 32);
        v27 = *(_QWORD *)(v26 + 744);
        v28 = *(_QWORD *)(v26 + 1896);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
        if (v29)
          LODWORD(v29) = *(_DWORD *)(v29 + 108);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v27;
        v33 = 2048;
        v34 = v28;
        v35 = 1024;
        v36 = v29;
        _os_log_error_impl(&dword_196BCC000, v25, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring WebPageProxy::DidExplicitOpenForFrame() IPC from the WebContent process because the file URL is outside the sandbox", buf, 0x26u);
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v30 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didExplicitOpenForFrame(IPC::Connection &, FrameIdentifier, URL &&, String &&)";
      _os_log_fault_impl(&dword_196BCC000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6119: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

unsigned int *WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, WebCore::ResourceRequestBase *a5, CFTypeRef **a6)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *result;
  WebKit::WebProcessProxy *v10;

  v6 = (unsigned int *)*((_QWORD *)a1 + 26);
  v7 = v6 + 4;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v10 = (WebKit::WebProcessProxy *)v6;
  result = (unsigned int *)WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(a1, &v10, a2, a3, a4, a5, a6);
  if (v6)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6 + 4);
  return result;
}

uint64_t WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, CFTypeRef *a5, WebCore::ResourceRequestBase *a6, CFTypeRef **a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebProcessProxy *v18;
  const WTF::URL *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  const WTF::URL *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  const WTF::URL *v38;
  const WTF::URL *v39;
  uint64_t v40;
  const WTF::StringImpl *v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  _QWORD *v45;
  CFTypeRef *v46;
  WebKit::WebProcessProxy *v47;
  CFTypeRef *v48;
  uint64_t v49;
  WebKit::WebProcessProxy *v50;
  WebKit *v51;
  NSObject *v53;
  NSObject *v54;
  char v55;
  WebKit *v56;
  _BYTE buf[22];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)a1 + 5);
  if (v14)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1584))(v15);
  v16 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v16)
  {
    v17 = v16;
    CFRetain(*(CFTypeRef *)(v16 + 8));
    v18 = *a2;
    v19 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a6);
    if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, v18, v19))
    {
      v54 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(Ref<Web"
                             "ProcessProxy> &&, FrameIdentifier, uint64_t, ResourceRequest &&, const UserData &)";
        _os_log_fault_impl(&dword_196BCC000, v54, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6155: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
      goto LABEL_55;
    }
    v20 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *((_QWORD *)a1 + 4);
      v22 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      v23 = *(_QWORD *)(v21 + 744);
      v24 = *(_QWORD *)(v21 + 1896);
      v25 = *(_QWORD **)(v17 + 24);
      if (v25)
      {
        v25 = (_QWORD *)v25[1];
        if (v25)
        {
          if (v25[33] == v17)
          {
            LODWORD(v25) = 1;
          }
          else
          {
            v25 = (_QWORD *)v25[138];
            if (v25)
              LODWORD(v25) = v25[9] == v17;
          }
        }
      }
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v23;
      v58 = 2048;
      v59 = v24;
      v60 = 1024;
      v61 = v22;
      v62 = 2048;
      v63 = a3;
      v64 = 1024;
      v65 = (int)v25;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    if (a5
      && (v26 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*((_QWORD *)a1 + 20) + 8), (uint64_t)a5), (a5 = (CFTypeRef *)v26) != 0))
    {
      CFRetain(*(CFTypeRef *)(v26 + 8));
      v27 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a6);
      API::Navigation::appendRedirectionURL((API::Navigation *)a5, v27, v28);
      v55 = 0;
    }
    else
    {
      v55 = 1;
    }
    v29 = *((_QWORD *)a1 + 4);
    v30 = *(_QWORD *)(v29 + 960);
    if (v30)
      CFRetain(*(CFTypeRef *)(v30 + 8));
    *(_QWORD *)buf = v30;
    *(_QWORD *)&buf[8] = v29 + 944;
    ++*(_DWORD *)(v29 + 1316);
    v31 = *(_QWORD *)(v17 + 24);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        if (*(_QWORD *)(v32 + 264) == v17 || (v33 = *(_QWORD *)(v32 + 1104)) != 0 && *(_QWORD *)(v33 + 72) == v17)
        {
          v34 = *((_QWORD *)a1 + 4);
          *(_BYTE *)(v29 + 1312) = 1;
          v35 = (WTF::StringImpl *)WebCore::ResourceRequestBase::url(a6);
          WTF::String::operator=((WTF::StringImpl **)(v34 + 1160), v35);
          v36 = *((_QWORD *)a1 + 35);
          if (v17 != v36)
          {
            v37 = *(_QWORD *)(v36 + 88);
            if (v37)
            {
              if (*(_DWORD *)(v37 + 4))
              {
                v38 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a6);
                WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v36 + 40), v38);
              }
            }
          }
        }
      }
    }
    v39 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a6);
    WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v17 + 40), v39);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*((_QWORD *)a1 + 4) + 944), v40, v41);
    v44 = *((_QWORD *)a1 + 7);
    v45 = *(_QWORD **)(v17 + 24);
    if (v45)
    {
      v45 = (_QWORD *)v45[1];
      if (v45)
      {
        if (v45[33] == v17)
        {
          if (v44)
            goto LABEL_42;
          goto LABEL_46;
        }
        v45 = (_QWORD *)v45[138];
        if (v45)
          LOBYTE(v45) = v45[9] == v17;
      }
    }
    if (v44)
    {
      if ((v45 & 1) == 0)
      {
        v46 = 0;
LABEL_43:
        v47 = *a2;
        v48 = *a7;
        if (*a7)
          CFRetain(v48[1]);
        WebKit::WebProcessProxy::transformHandlesToObjects(v47, (API::Object *)v48, &v56);
        (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, CFTypeRef *, WebKit *))(*(_QWORD *)v44 + 24))(v44, a1, v17, v46, v56);
LABEL_49:
        v51 = v56;
        v56 = 0;
        if (v51)
          CFRelease(*((CFTypeRef *)v51 + 1));
        if (v48)
          CFRelease(v48[1]);
        goto LABEL_53;
      }
LABEL_42:
      v46 = a5;
      goto LABEL_43;
    }
    if ((v45 & 1) == 0)
    {
LABEL_53:
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v42, v43);
      if ((v55 & 1) == 0)
        CFRelease(a5[1]);
LABEL_55:
      CFRelease(*(CFTypeRef *)(v17 + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1592))(v15);
    }
LABEL_46:
    v49 = *((_QWORD *)a1 + 9);
    v50 = *a2;
    v48 = *a7;
    if (*a7)
      CFRetain(v48[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects(v50, (API::Object *)v48, &v56);
    (*(void (**)(uint64_t, WebKit::WebPageProxy *, CFTypeRef *, WebKit *))(*(_QWORD *)v49 + 32))(v49, a1, a5, v56);
    goto LABEL_49;
  }
  v53 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(Ref<WebProc"
                         "essProxy> &&, FrameIdentifier, uint64_t, ResourceRequest &&, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v53, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6154: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1592))(v15);
}

uint64_t WebKit::WebPageProxy::willPerformClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v26;
  int v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 108);
      v19 = *(_QWORD *)(v17 + 744);
      v20 = *(_QWORD *)(v17 + 1896);
      v21 = *(_QWORD **)(v15 + 24);
      if (v21)
      {
        v21 = (_QWORD *)v21[1];
        if (v21)
        {
          if (v21[33] == v15)
          {
            LODWORD(v21) = 1;
          }
          else
          {
            v21 = (_QWORD *)v21[138];
            if (v21)
              LODWORD(v21) = v21[9] == v15;
          }
        }
      }
      v27 = 134219264;
      v28 = (const char *)a1;
      v29 = 2048;
      v30 = v19;
      v31 = 2048;
      v32 = v20;
      v33 = 1024;
      v34 = v18;
      v35 = 2048;
      v36 = a3;
      v37 = 1024;
      v38 = (int)v21;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::willPerformClientRedirectForFrame: frameID=%llu, isMainFrame=%d", (uint8_t *)&v27, 0x36u);
    }
    v22 = *(_QWORD *)(v15 + 24);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        if (*(_QWORD *)(v23 + 264) == v15 || (v24 = *(_QWORD *)(v23 + 1104)) != 0 && *(_QWORD *)(v24 + 72) == v15)
          (*(void (**)(_QWORD, uint64_t, uint64_t, double))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), a1, a5, a6);
      }
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v27 = 136315138;
      v28 = "void WebKit::WebPageProxy::willPerformClientRedirectForFrame(IPC::Connection &, FrameIdentifier, const Strin"
            "g &, double, LockBackForwardList)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6187: Invalid message dispatched %s", (uint8_t *)&v27, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
}

uint64_t WebKit::WebPageProxy::didCancelClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v22;
  int v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 108);
      v15 = *(_QWORD *)(v13 + 744);
      v16 = *(_QWORD *)(v13 + 1896);
      v17 = *(_QWORD **)(v11 + 24);
      if (v17)
      {
        v17 = (_QWORD *)v17[1];
        if (v17)
        {
          if (v17[33] == v11)
          {
            LODWORD(v17) = 1;
          }
          else
          {
            v17 = (_QWORD *)v17[138];
            if (v17)
              LODWORD(v17) = v17[9] == v11;
          }
        }
      }
      v23 = 134219264;
      v24 = (const char *)a1;
      v25 = 2048;
      v26 = v15;
      v27 = 2048;
      v28 = v16;
      v29 = 1024;
      v30 = v14;
      v31 = 2048;
      v32 = a3;
      v33 = 1024;
      v34 = (int)v17;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didCancelClientRedirectForFrame: frameID=%llu, isMainFrame=%d", (uint8_t *)&v23, 0x36u);
    }
    v18 = *(_QWORD *)(v11 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if (*(_QWORD *)(v19 + 264) == v11 || (v20 = *(_QWORD *)(v19 + 1104)) != 0 && *(_QWORD *)(v20 + 72) == v11)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), a1);
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v22 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v23 = 136315138;
      v24 = "void WebKit::WebPageProxy::didCancelClientRedirectForFrame(IPC::Connection &, FrameIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6200: Invalid message dispatched %s", (uint8_t *)&v23, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
}

unsigned int *WebKit::WebPageProxy::didChangeProvisionalURLForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *result;
  WebKit::WebProcessProxy *v9;

  v5 = (unsigned int *)*((_QWORD *)a1 + 26);
  v6 = v5 + 4;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v9 = (WebKit::WebProcessProxy *)v5;
  result = (unsigned int *)WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(a1, &v9, a2, a3, (uint64_t)a5, a5);
  if (v5)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5 + 4);
  return result;
}

uint64_t WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(WebKit::WebPageProxy *a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a1 + 5);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1584))(v12);
  v13 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v13)
  {
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    if (*(_DWORD *)(v14 + 40))
    {
      v25 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_24;
      LODWORD(v27) = 136315138;
      *(_QWORD *)((char *)&v27 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessPro"
                                      "xy> &&, FrameIdentifier, uint64_t, URL &&)";
      v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6219: Invalid message dispatched %s";
    }
    else
    {
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(a1, *a2, a6))
      {
        v15 = *((_QWORD *)a1 + 4);
        v16 = *(_QWORD *)(v15 + 960);
        if (v16)
          CFRetain(*(CFTypeRef *)(v16 + 8));
        *(_QWORD *)&v27 = v16;
        *((_QWORD *)&v27 + 1) = v15 + 944;
        ++*(_DWORD *)(v15 + 1316);
        v17 = *(_QWORD *)(v14 + 24);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            if (*(_QWORD *)(v18 + 264) == v14 || (v19 = *(_QWORD *)(v18 + 1104)) != 0 && *(_QWORD *)(v19 + 72) == v14)
            {
              v20 = *((_QWORD *)a1 + 4);
              *(_BYTE *)(v15 + 1312) = 1;
              WTF::String::operator=((WTF::StringImpl **)(v20 + 1160), a6);
            }
          }
        }
        WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad((WebKit::FrameLoadState *)(v14 + 40), a6);
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v27, v21, v22);
        goto LABEL_16;
      }
      v25 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_24:
        *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
LABEL_16:
        CFRelease(*(CFTypeRef *)(v14 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
      }
      LODWORD(v27) = 136315138;
      *(_QWORD *)((char *)&v27 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessPro"
                                      "xy> &&, FrameIdentifier, uint64_t, URL &&)";
      v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6220: Invalid message dispatched %s";
    }
    _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, v26, (uint8_t *)&v27, 0xCu);
    goto LABEL_24;
  }
  v24 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    LODWORD(v27) = 136315138;
    *(_QWORD *)((char *)&v27 + 4) = "void WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(Ref<WebProcessProxy"
                                    "> &&, FrameIdentifier, uint64_t, URL &&)";
    _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6218: Invalid message dispatched %s", (uint8_t *)&v27, 0xCu);
  }
  *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
}

void WebKit::WebPageProxy::didFailProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, WTF::StringImpl **a6, const WebCore::ResourceError *a7, char a8, CFTypeRef **a9, unsigned __int8 a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::ResourceError *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  NSObject *v26;
  _BYTE buf[24];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v17 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(a3 + 248), *(_QWORD *)(a3 + 256));
  if (v17)
  {
    v18 = v17;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    if (!*(_QWORD *)(a1 + 1120)
      || (v19 = *(_QWORD *)(v18 + 24)) == 0
      || (v20 = *(_QWORD *)(v19 + 8)) == 0
      || *(_QWORD *)(v20 + 264) != v18 && ((v21 = *(_QWORD *)(v20 + 1104)) == 0 || *(_QWORD *)(v21 + 72) != v18))
    {
      v22 = a7;
      v23 = *(_QWORD *)(a1 + 208);
      v24 = (unsigned int *)(v23 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      *(_QWORD *)buf = v23;
      WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(a1, (WebKit::WebProcessProxy **)buf, v18, a3, a4, a5, a6, v22, a8, a9, a10);
      if (v23)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrame(IPC::Connection &, FrameInfoData &&"
                           ", ResourceRequest &&, uint64_t, const String &, const ResourceError &, WillContinueLoading, c"
                           "onst UserData &, WillInternallyHandleFailure)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6235: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, WebCore::ResourceRequestBase *a5, uint64_t a6, WTF::StringImpl **a7, const WebCore::ResourceError *a8, char a9, CFTypeRef **a10, unsigned __int8 a11)
{
  const WebCore::ResourceError *v11;
  WebKit::WebProcessProxy **v15;
  NSObject *v17;
  WebKit::WebProcessProxy *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFTypeRef *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WebKit::WebProcessProxy *v49;
  CFTypeRef *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WebKit::WebProcessProxy *v55;
  CFTypeRef *v56;
  WTF::StringImpl *v57;
  WebKit *v58;
  WTF::StringImpl *v59;
  CFTypeRef v60;
  WTF::StringImpl *v61;
  _QWORD *v62;
  WebKit::ProvisionalFrameProxy *v63;
  uint64_t v64;
  const WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  _BOOL4 v78;
  void *v79;
  WTF *v80;
  uint64_t v81;
  NSObject *v82;
  const char *v83;
  uint64_t v84;
  _BOOL4 v85;
  int v86;
  WebKit *v91;
  WTF *v92[2];
  uint8_t buf[12];
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  int v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  _BOOL4 v103;
  __int16 v104;
  char *v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  CFTypeRef cf;
  _BYTE v113[24];
  int v114;
  WTF::StringImpl *v115;
  __int128 v116;
  _OWORD v117[2];
  uint64_t v118;

  v11 = a8;
  v15 = a2;
  v118 = *MEMORY[0x1E0C80C00];
  v17 = qword_1ECE71C68;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    goto LABEL_2;
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
  if (v36)
    v86 = *(_DWORD *)(v36 + 108);
  else
    v86 = 0;
  v69 = *(_QWORD *)(a1 + 32);
  v70 = *(_QWORD *)(a3 + 24);
  if (!v70)
    goto LABEL_87;
  v71 = *(_QWORD *)(v70 + 8);
  if (!v71)
    goto LABEL_87;
  if (*(_QWORD *)(v71 + 264) == a3)
  {
    v78 = 1;
LABEL_105:
    v85 = v78;
    goto LABEL_88;
  }
  v81 = *(_QWORD *)(v71 + 1104);
  if (v81)
  {
    v78 = *(_QWORD *)(v81 + 72) == a3;
    goto LABEL_105;
  }
LABEL_87:
  v85 = 0;
LABEL_88:
  v72 = *(_QWORD *)(v69 + 744);
  v73 = *(_QWORD *)(v69 + 1896);
  v84 = *(_QWORD *)(a3 + 272);
  MEMORY[0x19AEB7BFC](v11);
  WTF::String::utf8();
  if (v92[0])
    v74 = (char *)v92[0] + 16;
  else
    v74 = 0;
  MEMORY[0x19AEB7BFC](v11);
  LODWORD(v75) = 0;
  v76 = *((_DWORD *)v11 + 14);
  v77 = *(_QWORD *)(a3 + 24);
  if (v77)
  {
    v75 = *(_QWORD **)(v77 + 8);
    if (v75)
    {
      if (v75[33] == a3)
      {
        LODWORD(v75) = 1;
      }
      else
      {
        v75 = (_QWORD *)v75[138];
        if (v75)
          LODWORD(v75) = v75[9] == a3;
      }
    }
  }
  *(_DWORD *)buf = 134220290;
  *(_QWORD *)&buf[4] = a1;
  v94 = 2048;
  v95 = v72;
  v96 = 2048;
  v97 = v73;
  v98 = 1024;
  v99 = v86;
  v100 = 2048;
  v101 = v84;
  v102 = 1024;
  v103 = v85;
  v104 = 2080;
  v105 = v74;
  v106 = 1024;
  v107 = v76;
  v108 = 1024;
  v109 = (int)v75;
  v110 = 1024;
  v111 = a11;
  _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFailProvisionalLoadForFrame: frameID=%llu, isMainFrame=%d, domain=%s, code=%d, isMainFrame=%d, willInternallyHandleFailure=%d", buf, 0x52u);
  v80 = v92[0];
  v92[0] = 0;
  v11 = a8;
  v15 = a2;
  if (v80)
  {
    if (*(_DWORD *)v80 == 1)
      WTF::fastFree(v80, v79);
    else
      --*(_DWORD *)v80;
  }
LABEL_2:
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *v15, a7))
  {
    v82 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_109:
      *(_BYTE *)(*((_QWORD *)*v15 + 18) + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, WebFra"
                         "meProxy &, FrameInfoData &&, WebCore::ResourceRequest &&, uint64_t, const String &, const Resou"
                         "rceError &, WillContinueLoading, const UserData &, WillInternallyHandleFailure)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6250: Invalid message dispatched %s";
LABEL_111:
    _os_log_fault_impl(&dword_196BCC000, v82, OS_LOG_TYPE_FAULT, v83, buf, 0xCu);
    goto LABEL_109;
  }
  v18 = *v15;
  MEMORY[0x19AEB7BFC](v11);
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v18, (const WebCore::ResourceError *)((char *)v11 + 8)))
  {
    v82 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_109;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(Ref<WebProcessProxy> &&, WebFra"
                         "meProxy &, FrameInfoData &&, WebCore::ResourceRequest &&, uint64_t, const String &, const Resou"
                         "rceError &, WillContinueLoading, const UserData &, WillInternallyHandleFailure)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6251: Invalid message dispatched %s";
    goto LABEL_111;
  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    v20 = *(_QWORD *)(v19 + 8);
  else
    v20 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 1584))(v20);
  if (*(_BYTE *)(a1 + 826))
  {
    v21 = *(_QWORD *)(*((_QWORD *)*v15 + 64) + 8);
    v22 = v21 ? v21 - 16 : 0;
    v23 = *(CFTypeRef **)(v22 + 320);
    if (v23)
    {
      CFRetain(v23[1]);
      WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v23, (const WebKit::WebFrameProxy *)a3, v24);
      CFRelease(v23[1]);
    }
  }
  v25 = *(_QWORD *)(a3 + 24);
  if (!v25)
    goto LABEL_30;
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_30;
  if (*(_QWORD *)(v26 + 264) == a3)
  {
    v28 = 1;
    goto LABEL_19;
  }
  v27 = *(_QWORD *)(v26 + 1104);
  if (!v27)
  {
LABEL_30:
    v29 = 0;
    goto LABEL_31;
  }
  v28 = *(_QWORD *)(v27 + 72) == a3;
LABEL_19:
  v29 = 0;
  if (!a6 || !v28)
    goto LABEL_31;
  v30 = *(_QWORD *)(a1 + 160);
  v33 = *(_QWORD *)(v30 + 8);
  v32 = (uint64_t *)(v30 + 8);
  v31 = v33;
  v34 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v33, a6);
  if (v33)
    v35 = (_QWORD *)(v31 + 16 * *(unsigned int *)(v31 - 4));
  else
    v35 = 0;
  if (v35 == v34)
    goto LABEL_30;
  v29 = v34[1];
  v34[1] = 0;
  if (*v32)
  {
    v37 = *v32 + 16 * *(unsigned int *)(*v32 - 4);
    if ((_QWORD *)v37 == v34)
      goto LABEL_31;
LABEL_82:
    if ((_QWORD *)v37 != v34)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v32, v34);
    goto LABEL_31;
  }
  if (v34)
  {
    v37 = 0;
    goto LABEL_82;
  }
LABEL_31:
  v38 = *(_QWORD *)(a1 + 32);
  v39 = *(CFTypeRef **)(v38 + 960);
  if (v39)
    CFRetain(v39[1]);
  v92[0] = (WTF *)v39;
  v92[1] = (WTF *)(v38 + 944);
  ++*(_DWORD *)(v38 + 1316);
  v40 = *(_QWORD *)(a3 + 24);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    if (v41)
    {
      if (*(_QWORD *)(v41 + 264) == a3 || (v42 = *(_QWORD *)(v41 + 1104)) != 0 && *(_QWORD *)(v42 + 72) == a3)
      {
        WebKit::WebPageProxy::reportPageLoadResult((WebCore::DiagnosticLoggingKeys *)a1, a8);
        v43 = *(_QWORD *)(a1 + 32) + 944;
        *(_BYTE *)(v38 + 1312) = 1;
        WebKit::PageLoadState::didFailProvisionalLoad(v43, (WTF::StringImpl *)buf);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 200))(v20);
        if (v29)
        {
          memset(buf, 0, sizeof(buf));
          std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v29 + 3448, (uint64_t)buf);
          WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v29 + 3408));
          if (*(_DWORD *)&buf[8] != -1)
            ((void (*)(WebKit **, uint8_t *))off_1E34D4170[*(unsigned int *)&buf[8]])(&v91, buf);
        }
        WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1, 0);
      }
    }
  }
  WebKit::WebFrameProxy::didFailProvisionalLoad((WebKit::WebFrameProxy *)a3);
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v44, v45);
  v46 = (WTF::StringImpl **)(a1 + 168);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 168), (WTF::StringImpl *)a7);
  if ((a11 & 1) == 0)
  {
    v48 = *(_QWORD *)(a1 + 56);
    if (v48)
    {
      v49 = *a2;
      v50 = *a10;
      if (*a10)
        CFRetain(v50[1]);
      WebKit::WebProcessProxy::transformHandlesToObjects(v49, (API::Object *)v50, (WebKit **)buf);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const WebCore::ResourceError *, _QWORD))(*(_QWORD *)v48 + 32))(v48, a1, a3, v29, a8, *(_QWORD *)buf);
      v51 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v51)
        CFRelease(*(CFTypeRef *)(v51 + 8));
      if (v50)
        CFRelease(v50[1]);
    }
    else
    {
      v52 = *(_QWORD *)(a1 + 72);
      *(_WORD *)buf = *(_WORD *)a4;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(a4 + 8));
      v113[0] = 0;
      v114 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v113, a4 + 208);
      v53 = *(WTF::StringImpl **)(a4 + 240);
      if (v53)
        *(_DWORD *)v53 += 2;
      v115 = v53;
      v117[0] = *(_OWORD *)(a4 + 264);
      *(_OWORD *)((char *)v117 + 14) = *(_OWORD *)(a4 + 278);
      v116 = *(_OWORD *)(a4 + 248);
      v54 = WebCore::ResourceRequestBase::url(a5);
      v55 = *a2;
      v56 = *a10;
      if (*a10)
        CFRetain(v56[1]);
      WebKit::WebProcessProxy::transformHandlesToObjects(v55, (API::Object *)v56, &v91);
      (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t, uint64_t, const WebCore::ResourceError *, WebKit *))(*(_QWORD *)v52 + 64))(v52, a1, buf, v29, v54, a8, v91);
      v58 = v91;
      v91 = 0;
      if (v58)
        CFRelease(*((CFTypeRef *)v58 + 1));
      if (v56)
        CFRelease(v56[1]);
      v59 = v115;
      v115 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v57);
        else
          *(_DWORD *)v59 -= 2;
      }
      if (v114 != -1)
        ((void (*)(WebKit **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v114])(&v91, v113);
      v114 = -1;
      v60 = cf;
      cf = 0;
      if (v60)
        CFRelease(v60);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
      (*(void (**)(_QWORD, uint64_t, WebCore::ResourceRequestBase *, const WebCore::ResourceError *, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a1, a5, a8, a4);
    }
  }
  v61 = *v46;
  *v46 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v47);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = *(_QWORD **)(a1 + 1120);
  if (v62 && v62[9] == a3 && (a9 & 1) == 0)
  {
    *(_QWORD *)(a1 + 1120) = 0;
    (*(void (**)(_QWORD *))(*v62 + 8))(v62);
  }
  v63 = *(WebKit::ProvisionalFrameProxy **)(a3 + 320);
  *(_QWORD *)(a3 + 320) = 0;
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)(a3 + 320), 0);
  if (v63)
  {
    WebKit::WebFrameProxy::notifyParentOfLoadCompletion((WebKit::WebFrameProxy *)a3, *a2);
    WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v63, v66);
    WTF::fastFree(v67, v68);
  }
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v92, v64, v65);
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 1592))(v20);
}

void std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::reset[abi:sn180100](WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*((_BYTE *)this + 328))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(this, a2);
    *((_BYTE *)this + 328) = 0;
  }
}

uint64_t WebKit::WebPageProxy::resetRecentGamepadAccessState(WebKit::WebPageProxy *this)
{
  if (*((_BYTE *)this + 1440)
    || WTF::RunLoop::TimerBase::isActive((WebKit::WebPageProxy *)((char *)this + 1408)))
  {
    WebKit::WebPageProxy::recentGamepadAccessStateChanged((uint64_t)this, 1);
  }
  return PAL::HysteresisActivity::cancel((WebKit::WebPageProxy *)((char *)this + 1392));
}

_QWORD *WebKit::WebPageProxy::invalidateAllAttachments(WebKit::WebPageProxy *this, WTF::StringImpl *a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;

  result = (_QWORD *)*((_QWORD *)this + 133);
  if (result)
  {
    v4 = *((unsigned int *)result - 1);
    v5 = &result[2 * v4];
    if (*((_DWORD *)result - 3))
    {
      v6 = result;
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = result;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = &result[2 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &result[2 * v4];
  if (result)
  {
LABEL_8:
    v8 = &result[2 * *((unsigned int *)result - 1)];
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      v9 = v6[1];
      if (*(_BYTE *)(v9 + 64) == 1)
      {
        v10 = *((_QWORD *)this + 5);
        *(_BYTE *)(v9 + 64) = 0;
        if (v10)
          v11 = *(_QWORD *)(v10 + 8);
        else
          v11 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 1688))(v11, v9);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
        v9 = v6[1];
      }
      CFRetain(*(CFTypeRef *)(v9 + 8));
      API::Attachment::invalidate((API::Attachment *)v9, v12);
      CFRelease(*(CFTypeRef *)(v9 + 8));
      v13 = v6 + 2;
      v6 = v5;
      if (v13 != v5)
      {
        v6 = v13;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    result = (_QWORD *)*((_QWORD *)this + 133);
  }
  if (result)
  {
    *((_QWORD *)this + 133) = 0;
    return (_QWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, a2);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishDocumentLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  CFTypeRef *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  CFTypeRef *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  NSObject *v40;
  _BYTE v41[12];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 108);
      v19 = *(_QWORD *)(v17 + 744);
      v20 = *(_QWORD *)(v17 + 1896);
      v21 = *(_QWORD **)(v15 + 24);
      if (v21)
      {
        v21 = (_QWORD *)v21[1];
        if (v21)
        {
          if (v21[33] == v15)
          {
            LODWORD(v21) = 1;
          }
          else
          {
            v21 = (_QWORD *)v21[138];
            if (v21)
              LODWORD(v21) = v21[9] == v15;
          }
        }
      }
      *(_DWORD *)v41 = 134219264;
      *(_QWORD *)&v41[4] = a1;
      v42 = 2048;
      v43 = v19;
      v44 = 2048;
      v45 = v20;
      v46 = 1024;
      v47 = v18;
      v48 = 2048;
      v49 = a3;
      v50 = 1024;
      v51 = (int)v21;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFinishDocumentLoadForFrame: frameID=%llu, isMainFrame=%d", v41, 0x36u);
    }
    if (*(_BYTE *)(a1 + 826))
    {
      v22 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v22)
      {
        CFRetain(v22[1]);
        WebKit::WebAutomationSession::documentLoadedForFrame((WebKit::WebAutomationSession *)v22, (const WebKit::WebFrameProxy *)v15);
        CFRelease(v22[1]);
      }
    }
    v23 = *(_QWORD *)(v15 + 24);
    if (!v23)
      goto LABEL_44;
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      if (*(_QWORD *)(v24 + 264) == v15)
      {
        v26 = 1;
        goto LABEL_25;
      }
      v25 = *(_QWORD *)(v24 + 1104);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 72) == v15;
LABEL_25:
        v27 = 0;
        if (a5)
        {
          if (v26)
          {
            v28 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a5);
            v27 = v28;
            if (v28)
            {
              CFRetain(*(CFTypeRef *)(v28 + 8));
              v23 = *(_QWORD *)(v15 + 24);
              if (!v23)
              {
LABEL_43:
                CFRelease(*(CFTypeRef *)(v27 + 8));
LABEL_44:
                CFRelease(*(CFTypeRef *)(v15 + 8));
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
              }
            }
          }
        }
LABEL_29:
        v29 = *(_QWORD *)(v23 + 8);
        if (v29)
        {
          if (*(_QWORD *)(v29 + 264) == v15 || (v30 = *(_QWORD *)(v29 + 1104)) != 0 && *(_QWORD *)(v30 + 72) == v15)
          {
            v31 = *(_QWORD *)(a1 + 72);
            v32 = *(unsigned int **)(a1 + 208);
            v33 = v32 + 4;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 + 1, v33));
            v35 = *a6;
            if (v35)
              CFRetain(v35[1]);
            WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v32, (API::Object *)v35, (WebKit **)v41);
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v31 + 96))(v31, a1, v27, *(_QWORD *)v41);
            v36 = *(_QWORD *)v41;
            *(_QWORD *)v41 = 0;
            if (v36)
              CFRelease(*(CFTypeRef *)(v36 + 8));
            if (v35)
              CFRelease(v35[1]);
            v37 = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v32 + 4);
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2232) = v38;
          }
        }
        if (!v27)
          goto LABEL_44;
        goto LABEL_43;
      }
    }
    v27 = 0;
    goto LABEL_29;
  }
  v40 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v41 = 136315138;
    *(_QWORD *)&v41[4] = "void WebKit::WebPageProxy::didFinishDocumentLoadForFrame(IPC::Connection &, FrameIdentifier, ui"
                         "nt64_t, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v40, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6522: Invalid message dispatched %s", v41, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
}

uint64_t WebKit::WebPageProxy::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, CFTypeRef **a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef *v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  uint64_t v47;
  const WTF::StringImpl *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  CFTypeRef *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  WebKit::WebProcessProxy *v58;
  unsigned int *v59;
  unsigned int v60;
  CFTypeRef *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  CFTypeRef v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF *v68;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  char v74;
  char v75;
  _BYTE buf[22];
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  _QWORD v83[2];
  CFTypeRef cf;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
  v18 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v18)
  {
    v19 = v18;
    CFRetain(*(CFTypeRef *)(v18 + 8));
    v21 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v21 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v20)&& *(_QWORD *)(WebKit::WebFrameProxy::provisionalLoadProcess((WebKit::WebFrameProxy *)v19) + 144) != a2)
    {
      goto LABEL_83;
    }
    v22 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v24)
        LODWORD(v24) = *(_DWORD *)(v24 + 108);
      v25 = *(_QWORD *)(v23 + 744);
      v26 = *(_QWORD *)(v23 + 1896);
      v27 = *(_QWORD **)(v19 + 24);
      if (v27)
      {
        v27 = (_QWORD *)v27[1];
        if (v27)
        {
          if (v27[33] == v19)
          {
            LODWORD(v27) = 1;
          }
          else
          {
            v27 = (_QWORD *)v27[138];
            if (v27)
              LODWORD(v27) = v27[9] == v19;
          }
        }
      }
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v25;
      v77 = 2048;
      v78 = v26;
      v79 = 1024;
      v80 = v24;
      v81 = 2048;
      v82 = a3;
      LOWORD(v83[0]) = 1024;
      *(_DWORD *)((char *)v83 + 2) = (_DWORD)v27;
      _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFinishLoadForFrame: frameID=%llu, isMainFrame=%d", buf, 0x36u);
    }
    v28 = *(_QWORD *)(v19 + 24);
    v73 = a6;
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        if (*(_QWORD *)(v29 + 264) == v19)
        {
          v31 = 1;
          goto LABEL_86;
        }
        v30 = *(_QWORD *)(v29 + 1104);
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 72) == v19;
LABEL_86:
          v32 = 0;
          v33 = a7 != 0;
          if (a7 && v31)
          {
            v70 = *(_QWORD *)(a1 + 160);
            *(_QWORD *)buf = a7;
            if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v70 + 8), buf))
            {
              v71 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a7);
              v32 = v71;
              if (v71)
                CFRetain(*(CFTypeRef *)(v71 + 8));
            }
            else
            {
              v32 = 0;
            }
            v33 = 1;
          }
LABEL_25:
          v34 = *(_QWORD *)(v19 + 24);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
            {
              if (*(_QWORD *)(v35 + 264) == v19)
              {
                v37 = 1;
LABEL_92:
                v38 = v32 == 0;
                if (v32)
                  v33 = 0;
                if (v33 && v37)
                {
                  v74 = 1;
                  v37 = 1;
                  goto LABEL_39;
                }
LABEL_31:
                v74 = v38;
                v39 = v32;
                v40 = *(_QWORD *)(a1 + 32);
                v41 = *(_QWORD *)(v40 + 960);
                if (v41)
                  CFRetain(*(CFTypeRef *)(v41 + 8));
                *(_QWORD *)buf = v41;
                *(_QWORD *)&buf[8] = v40 + 944;
                ++*(_DWORD *)(v40 + 1316);
                if (v37)
                {
                  v42 = *(_QWORD *)(a1 + 32);
                  *(_BYTE *)(v40 + 1312) = 1;
                  *(_BYTE *)(v42 + 1136) = 2;
                }
                v32 = v39;
                if (*(_BYTE *)(a1 + 826))
                {
                  v43 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                                     + 40);
                  if (v43)
                  {
                    CFRetain(v43[1]);
                    WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v43, (const WebKit::WebFrameProxy *)v19, v44);
                    CFRelease(v43[1]);
                  }
                }
                WebKit::WebFrameProxy::didFinishLoad((WebKit::WebFrameProxy *)v19);
                WebKit::WebFrameProxy::notifyParentOfLoadCompletion((WebKit::WebFrameProxy *)v19, *(WebKit::WebProcessProxy **)(*(_QWORD *)(v19 + 32) + 16));
                WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v45, v46);
                WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v47, v48);
LABEL_39:
                v49 = *(_QWORD *)(a1 + 56);
                if (v49)
                {
                  v50 = *(unsigned int **)(a1 + 208);
                  v51 = v50 + 4;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 + 1, v51));
                  v53 = *a8;
                  if (*a8)
                    CFRetain(v53[1]);
                  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v50, (API::Object *)v53, (WebKit **)buf);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v49 + 40))(v49, a1, v19, v32, *(_QWORD *)buf);
                  v54 = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  if (v54)
                    CFRelease(*(CFTypeRef *)(v54 + 8));
                  v55 = v74;
                  if (v53)
                    CFRelease(v53[1]);
                  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v50 + 4);
                  if (!v37)
                    goto LABEL_81;
                }
                else
                {
                  if (*a5)
                  {
                    v56 = v32;
                    v57 = *(_QWORD *)(a1 + 72);
                    v58 = *(WebKit::WebProcessProxy **)(a1 + 208);
                    v59 = (unsigned int *)((char *)v58 + 16);
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 + 1, v59));
                    v61 = *a8;
                    if (v61)
                      CFRetain(v61[1]);
                    WebKit::WebProcessProxy::transformHandlesToObjects(v58, (API::Object *)v61, (WebKit **)buf);
                    v32 = v56;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 104))(v57, a1, v56, *(_QWORD *)buf);
                    v62 = *(_QWORD *)buf;
                    *(_QWORD *)buf = 0;
                    if (v62)
                      CFRelease(*(CFTypeRef *)(v62 + 8));
                    if (v61)
                      CFRelease(v61[1]);
                    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v59);
                  }
                  (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), a1, v73, a5);
                  v55 = v74;
                  if (!v37)
                    goto LABEL_81;
                }
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                WTF::URL::invalidate((WTF::URL *)&buf[8]);
                cf = 0;
                v83[0] = 0;
                *(_QWORD *)((char *)v83 + 6) = 0;
                v85 = 1;
                WebKit::WebPageProxy::reportPageLoadResult((WebCore::DiagnosticLoggingKeys *)a1, (const WebCore::ResourceError *)buf);
                v64 = cf;
                cf = 0;
                if (v64)
                  CFRelease(v64);
                v65 = (WTF::StringImpl *)v83[0];
                v83[0] = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, v63);
                  else
                    *(_DWORD *)v65 -= 2;
                }
                v66 = *(WTF::StringImpl **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                    WTF::StringImpl::destroy(v66, v63);
                  else
                    *(_DWORD *)v66 -= 2;
                }
                v67 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v63);
                  else
                    *(_DWORD *)v67 -= 2;
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 1288))(v17, v32);
                if ((v55 & 1) == 0)
                {
                  *(_QWORD *)buf = 0;
                  *(_DWORD *)&buf[8] = 0;
                  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v32 + 3448, (uint64_t)buf);
                  WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v32 + 3408));
                  if (*(_DWORD *)&buf[8] != -1)
                    ((void (*)(char *, _BYTE *))off_1E34D4170[*(unsigned int *)&buf[8]])(&v75, buf);
                }
                v68 = (WTF *)WTF::RunLoop::TimerBase::start();
                if ((int)WTF::numberOfProcessorCores(v68) <= 4)
                  WebKit::WebPageProxy::notifyProcessPoolToPrewarm(*(WebKit::WebPageProxy **)(*(_QWORD *)(a1 + 208)
                                                                                            + 512));
                WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1, 1);
LABEL_81:
                *(_BYTE *)(a1 + 176) = 0;
                if ((v55 & 1) == 0)
                  CFRelease(*(CFTypeRef *)(v32 + 8));
LABEL_83:
                CFRelease(*(CFTypeRef *)(v19 + 8));
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
              }
              v36 = *(_QWORD *)(v35 + 1104);
              if (v36)
              {
                v37 = *(_QWORD *)(v36 + 72) == v19;
                goto LABEL_92;
              }
            }
          }
          v37 = 0;
          v38 = v32 == 0;
          goto LABEL_31;
        }
      }
    }
    v32 = 0;
    v33 = a7 != 0;
    goto LABEL_25;
  }
  v72 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didFinishLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInfoD"
                         "ata &&, ResourceRequest &&, uint64_t, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v72, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6584: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
}

uint64_t WebKit::WebPageProxy::didFailLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, WebCore::ResourceRequestBase *a6, uint64_t a7, const WebCore::ResourceError *a8, CFTypeRef **a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  CFTypeRef *v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  CFTypeRef *v41;
  WTF *v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  _BYTE *v45;
  uint64_t v46;
  WebKit::WebProcessProxy *v47;
  unsigned int *v48;
  unsigned int v49;
  CFTypeRef *v50;
  void (*v51)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, const WebCore::ResourceError *, WTF *);
  uint64_t v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const WebCore::ResourceError *v63;
  _BOOL4 v64;
  char *v65;
  int v66;
  void *v67;
  WTF *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  const WebCore::ResourceError *v74;
  _BYTE *v75;
  WTF *v77;
  int v78;
  char v79;
  _BYTE buf[22];
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  _BOOL4 v88;
  __int16 v89;
  char *v90;
  __int16 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
  v18 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v18)
  {
    v19 = v18;
    CFRetain(*(CFTypeRef *)(v18 + 8));
    v20 = qword_1ECE71320;
    v75 = a5;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v56 = *(_QWORD *)(a1 + 32);
    v57 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v57)
      v58 = *(_DWORD *)(v57 + 108);
    else
      v58 = 0;
    v59 = *(_QWORD *)(v56 + 744);
    v60 = *(_QWORD *)(v56 + 1896);
    v61 = *(_QWORD *)(v19 + 24);
    v73 = v58;
    v71 = v60;
    if (v61 && (v62 = *(_QWORD *)(v61 + 8)) != 0)
    {
      v63 = a8;
      if (*(_QWORD *)(v62 + 264) == v19)
      {
        v64 = 1;
        goto LABEL_66;
      }
      v69 = *(_QWORD *)(v62 + 1104);
      if (v69)
      {
        v64 = *(_QWORD *)(v69 + 72) == v19;
        goto LABEL_66;
      }
    }
    else
    {
      v63 = a8;
    }
    v64 = 0;
LABEL_66:
    MEMORY[0x19AEB7BFC](v63);
    WTF::String::utf8();
    if (v77)
      v65 = (char *)v77 + 16;
    else
      v65 = 0;
    MEMORY[0x19AEB7BFC](v63);
    v66 = *((_DWORD *)v63 + 14);
    *(_DWORD *)buf = 134219778;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v59;
    v81 = 2048;
    v82 = v71;
    v83 = 1024;
    v84 = v73;
    v85 = 2048;
    v86 = a3;
    v87 = 1024;
    v88 = v64;
    v89 = 2080;
    v90 = v65;
    v91 = 1024;
    v92 = v66;
    _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didFailLoadForFrame: frameID=%llu, isMainFrame=%d, domain=%s, code=%d", buf, 0x46u);
    v68 = v77;
    v77 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        WTF::fastFree(v68, v67);
      else
        --*(_DWORD *)v68;
    }
    a8 = v63;
LABEL_6:
    v21 = *(_QWORD *)(v19 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        if (*(_QWORD *)(v22 + 264) == v19)
        {
          v24 = 1;
          goto LABEL_55;
        }
        v23 = *(_QWORD *)(v22 + 1104);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 72) == v19;
LABEL_55:
          v25 = 0;
          if (a7)
          {
            if (v24)
            {
              v55 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a7);
              v25 = v55;
              if (v55)
                CFRetain(*(CFTypeRef *)(v55 + 8));
            }
          }
LABEL_12:
          v26 = *(_QWORD *)(a1 + 32);
          v27 = *(_QWORD *)(v26 + 960);
          if (v27)
            CFRetain(*(CFTypeRef *)(v27 + 8));
          *(_QWORD *)buf = v27;
          *(_QWORD *)&buf[8] = v26 + 944;
          ++*(_DWORD *)(v26 + 1316);
          v28 = *(_QWORD *)(v19 + 24);
          if (v28
            && (v29 = *(_QWORD *)(v28 + 8)) != 0
            && (*(_QWORD *)(v29 + 264) == v19 || (v30 = *(_QWORD *)(v29 + 1104)) != 0 && *(_QWORD *)(v30 + 72) == v19))
          {
            v32 = *(_QWORD *)(a1 + 32);
            v31 = 1;
            *(_BYTE *)(v26 + 1312) = 1;
            *(_BYTE *)(v32 + 1136) = 2;
            std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v32 + 1912), 0);
            std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(_QWORD *)(a1 + 32) + 1920), 0);
          }
          else
          {
            v31 = 0;
          }
          if (*(_BYTE *)(a1 + 826))
          {
            v33 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                               + 40);
            if (v33)
            {
              CFRetain(v33[1]);
              WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v33, (const WebKit::WebFrameProxy *)v19, v34);
              CFRelease(v33[1]);
            }
          }
          WebKit::WebFrameProxy::didFailLoad(v19);
          WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v35, v36);
          v37 = *(_QWORD *)(a1 + 56);
          if (v37)
          {
            v38 = *(unsigned int **)(a1 + 208);
            v39 = v38 + 4;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 + 1, v39));
            v41 = *a9;
            if (*a9)
              CFRetain(v41[1]);
            WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v38, (API::Object *)v41, &v77);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const WebCore::ResourceError *, WTF *))(*(_QWORD *)v37 + 48))(v37, a1, v19, v25, a8, v77);
            v42 = v77;
            v77 = 0;
            if (v42)
              CFRelease(*((CFTypeRef *)v42 + 1));
            if (v41)
              CFRelease(v41[1]);
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v38 + 4);
            if (!v31)
              goto LABEL_50;
          }
          else
          {
            v45 = v75;
            if (*v75)
            {
              v74 = a8;
              v46 = *(_QWORD *)(a1 + 72);
              v72 = WebCore::ResourceRequestBase::url(a6);
              v47 = *(WebKit::WebProcessProxy **)(a1 + 208);
              v48 = (unsigned int *)((char *)v47 + 16);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 + 1, v48));
              v50 = *a9;
              if (*a9)
                CFRetain(v50[1]);
              WebKit::WebProcessProxy::transformHandlesToObjects(v47, (API::Object *)v50, &v77);
              v51 = *(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, const WebCore::ResourceError *, WTF *))(*(_QWORD *)v46 + 128);
              v52 = v46;
              a8 = v74;
              v45 = v75;
              v51(v52, a1, v75, v25, v72, v74, v77);
              v53 = v77;
              v77 = 0;
              if (v53)
                CFRelease(*((CFTypeRef *)v53 + 1));
              if (v50)
                CFRelease(v50[1]);
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v48);
            }
            (*(void (**)(_QWORD, uint64_t, WebCore::ResourceRequestBase *, const WebCore::ResourceError *, _BYTE *))(**(_QWORD **)(a1 + 72) + 136))(*(_QWORD *)(a1 + 72), a1, a6, a8, v45);
            if (!v31)
              goto LABEL_50;
          }
          WebKit::WebPageProxy::reportPageLoadResult((WebCore::DiagnosticLoggingKeys *)a1, a8);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 1296))(v17, v25);
          if (v25)
          {
            v77 = 0;
            v78 = 0;
            std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v25 + 3448, (uint64_t)&v77);
            WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v25 + 3408));
            if (v78 != -1)
              ((void (*)(char *, WTF **))off_1E34D4170[v78])(&v79, &v77);
          }
          WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1, 0);
LABEL_50:
          WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v43, v44);
          if (v25)
            CFRelease(*(CFTypeRef *)(v25 + 8));
          CFRelease(*(CFTypeRef *)(v19 + 8));
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
        }
      }
    }
    v25 = 0;
    goto LABEL_12;
  }
  v70 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didFailLoadForFrame(IPC::Connection &, FrameIdentifier, FrameInfoDat"
                         "a &&, ResourceRequest &&, uint64_t, const ResourceError &, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v70, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6647: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
}

uint64_t WebKit::WebPageProxy::didSameDocumentNavigationForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const WTF::URL *a7, CFTypeRef **a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  CFTypeRef *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  CFTypeRef *v51;
  WebKit *v52;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  WebKit *v57;
  _BYTE buf[22];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
  v18 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v18)
  {
    v19 = v18;
    CFRetain(*(CFTypeRef *)(v18 + 8));
    if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 208), a7))
    {
      v56 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrame(IPC::Connection &, FrameIdenti"
                             "fier, uint64_t, SameDocumentNavigationType, URL &&, const UserData &)";
        _os_log_fault_impl(&dword_196BCC000, v56, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6698: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
      goto LABEL_52;
    }
    v20 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v23)
        LODWORD(v23) = *(_DWORD *)(v23 + 108);
      v24 = *(_QWORD *)(v22 + 744);
      v25 = *(_QWORD *)(v22 + 1896);
      v26 = *(_QWORD **)(v19 + 24);
      if (v26)
      {
        v26 = (_QWORD *)v26[1];
        if (v26)
        {
          if (v26[33] == v19)
          {
            LODWORD(v26) = 1;
          }
          else
          {
            v26 = (_QWORD *)v26[138];
            if (v26)
              LODWORD(v26) = v26[9] == v19;
          }
        }
      }
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v24;
      v59 = 2048;
      v60 = v25;
      v61 = 1024;
      v62 = v23;
      v63 = 2048;
      v64 = a3;
      v65 = 1024;
      v66 = (int)v26;
      v67 = 1024;
      v68 = a6;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didSameDocumentNavigationForFrame: frameID=%llu, isMainFrame=%d, type=%u", buf, 0x3Cu);
    }
    v27 = *(_QWORD *)(v19 + 24);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        if (*(_QWORD *)(v28 + 264) == v19)
        {
          v30 = 1;
          goto LABEL_55;
        }
        v29 = *(_QWORD *)(v28 + 1104);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 72) == v19;
LABEL_55:
          v31 = 0;
          if (a5)
          {
            if (v30)
            {
              v54 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a5);
              v31 = v54;
              if (v54)
                CFRetain(*(CFTypeRef *)(v54 + 8));
            }
          }
          goto LABEL_22;
        }
      }
    }
    v31 = 0;
LABEL_22:
    v32 = *(_QWORD *)(a1 + 32);
    v33 = *(_QWORD *)(v32 + 960);
    if (v33)
      CFRetain(*(CFTypeRef *)(v33 + 8));
    *(_QWORD *)buf = v33;
    *(_QWORD *)&buf[8] = v32 + 944;
    ++*(_DWORD *)(v32 + 1316);
    v34 = *(_QWORD *)(v19 + 24);
    if (v34
      && (v35 = *(_QWORD *)(v34 + 8)) != 0
      && (*(_QWORD *)(v35 + 264) == v19 || (v36 = *(_QWORD *)(v35 + 1104)) != 0 && *(_QWORD *)(v36 + 72) == v19))
    {
      v38 = *(_QWORD *)(a1 + 32);
      v37 = 1;
      *(_BYTE *)(v32 + 1312) = 1;
      WTF::String::operator=((WTF::StringImpl **)(v38 + 1168), a7);
    }
    else
    {
      v37 = 0;
    }
    if (*(_BYTE *)(a1 + 826))
    {
      v39 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v39)
      {
        CFRetain(v39[1]);
        WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v39, (const WebKit::WebFrameProxy *)v19, v40);
        CFRelease(v39[1]);
      }
    }
    v41 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v32 + 1312) = 1;
    *(_QWORD *)(v41 + 1144) = 0;
    v42 = *(WTF::StringImpl **)(v41 + 1152);
    *(_QWORD *)(v41 + 1152) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        v42 = (WTF::StringImpl *)WTF::StringImpl::destroy(v42, v21);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (!*(_QWORD *)a7)
      a7 = (const WTF::URL *)WTF::aboutBlankURL(v42);
    WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(v19 + 40), a7);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v43, v44);
    if (v37)
    {
      v47 = *(_QWORD *)(a1 + 72);
      v48 = *(unsigned int **)(a1 + 208);
      v49 = v48 + 4;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
      v51 = *a8;
      if (v51)
        CFRetain(v51[1]);
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v48, (API::Object *)v51, &v57);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WebKit *))(*(_QWORD *)v47 + 144))(v47, a1, v31, a6, v57);
      v52 = v57;
      v57 = 0;
      if (v52)
        CFRelease(*((CFTypeRef *)v52 + 1));
      if (v51)
        CFRelease(v51[1]);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v48 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 1304))(v17, a6);
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v45, v46);
    if (v31)
      CFRelease(*(CFTypeRef *)(v31 + 8));
LABEL_52:
    CFRelease(*(CFTypeRef *)(v19 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
  }
  v55 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrame(IPC::Connection &, FrameIdentifier"
                         ", uint64_t, SameDocumentNavigationType, URL &&, const UserData &)";
    _os_log_fault_impl(&dword_196BCC000, v55, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6697: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
}

uint64_t WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(uint64_t a1, uint64_t a2, uint64_t a3, const WTF::URL *a4, uint64_t a5, CFTypeRef **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebKit *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  CFTypeRef *v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  const WTF::StringImpl *v48;
  uint64_t v49;
  const WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  CFTypeRef *v55;
  WebKit *v56;
  uint64_t v57;
  const WTF::StringImpl *v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  WebKit *v62;
  _BYTE buf[22];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  CFTypeRef cf;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = *(_QWORD *)(a5 + 2104);
  v15 = WebKit::WebFrameProxy::webFrame(v14, *(_QWORD *)(a5 + 2112));
  if (!v15)
  {
    v59 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(IPC::Connection &"
                           ", SameDocumentNavigationType, URL, NavigationActionData &&, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v59, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6736: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  }
  v16 = v15;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 208), a4))
  {
    v60 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(IPC::Connection &"
                           ", SameDocumentNavigationType, URL, NavigationActionData &&, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v60, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6737: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
    goto LABEL_65;
  }
  v17 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v20)
      LODWORD(v20) = *(_DWORD *)(v20 + 108);
    v21 = *(_QWORD *)(v19 + 744);
    v22 = *(_QWORD *)(v19 + 1896);
    v23 = *(_QWORD **)(v16 + 24);
    if (v23)
    {
      v23 = (_QWORD *)v23[1];
      if (v23)
      {
        if (v23[33] == v16)
        {
          LODWORD(v23) = 1;
        }
        else
        {
          v23 = (_QWORD *)v23[138];
          if (v23)
            LODWORD(v23) = v23[9] == v16;
        }
      }
    }
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v21;
    v64 = 2048;
    v65 = v22;
    v66 = 1024;
    v67 = v20;
    v68 = 2048;
    v69 = v14;
    v70 = 1024;
    v71 = (int)v23;
    v72 = 1024;
    v73 = a3;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI: frameID=%llu, isMainFrame=%d, type=%u", buf, 0x3Cu);
  }
  v24 = *(_QWORD *)(v16 + 24);
  if (!v24
    || (v25 = *(_QWORD *)(v24 + 8)) == 0
    || *(_QWORD *)(v25 + 264) != v16 && ((v26 = *(_QWORD *)(v25 + 1104)) == 0 || *(_QWORD *)(v26 + 72) != v16))
  {
    v27 = 0;
LABEL_34:
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(_QWORD *)(v36 + 960);
    if (v37)
      CFRetain(*(CFTypeRef *)(v37 + 8));
    *(_QWORD *)buf = v37;
    *(_QWORD *)&buf[8] = v36 + 944;
    ++*(_DWORD *)(v36 + 1316);
    v38 = *(_QWORD *)(v16 + 24);
    if (v38
      && (v39 = *(_QWORD *)(v38 + 8)) != 0
      && (*(_QWORD *)(v39 + 264) == v16 || (v40 = *(_QWORD *)(v39 + 1104)) != 0 && *(_QWORD *)(v40 + 72) == v16))
    {
      v42 = *(_QWORD *)(a1 + 32);
      v41 = 1;
      *(_BYTE *)(v36 + 1312) = 1;
      WTF::String::operator=((WTF::StringImpl **)(v42 + 1168), a4);
    }
    else
    {
      v41 = 0;
    }
    if (*(_BYTE *)(a1 + 826))
    {
      v43 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v43)
      {
        CFRetain(v43[1]);
        WebKit::WebAutomationSession::navigationOccurredForFrame((WebKit::WebAutomationSession *)v43, (const WebKit::WebFrameProxy *)v16, v44);
        CFRelease(v43[1]);
      }
    }
    v45 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v36 + 1312) = 1;
    *(_QWORD *)(v45 + 1144) = 0;
    v46 = *(WTF::StringImpl **)(v45 + 1152);
    *(_QWORD *)(v45 + 1152) = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        v46 = (WTF::StringImpl *)WTF::StringImpl::destroy(v46, v18);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (!*(_QWORD *)a4)
      a4 = (const WTF::URL *)WTF::aboutBlankURL(v46);
    WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(v16 + 40), a4);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(a1 + 32) + 944), v47, v48);
    if (v41)
    {
      v51 = *(_QWORD *)(a1 + 72);
      v52 = *(unsigned int **)(a1 + 208);
      v53 = v52 + 4;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      v55 = *a6;
      if (v55)
        CFRetain(v55[1]);
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v52, (API::Object *)v55, &v62);
      (*(void (**)(uint64_t, uint64_t, WebKit *, uint64_t, WebKit *))(*(_QWORD *)v51 + 144))(v51, a1, v27, a3, v62);
      v56 = v62;
      v62 = 0;
      if (v56)
        CFRelease(*((CFTypeRef *)v56 + 1));
      if (v55)
        CFRelease(v55[1]);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v52 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 1304))(v13, a3);
    }
    if (v27)
    {
      WebKit::WebNavigationState::didDestroyNavigation(*(_QWORD *)(a1 + 160), *((_QWORD *)v27 + 3), *((_QWORD *)v27 + 2));
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v57, v58);
      CFRelease(*((CFTypeRef *)v27 + 1));
    }
    else
    {
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v49, v50);
    }
LABEL_65:
    CFRelease(*(CFTypeRef *)(v16 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  }
  v28 = *(_QWORD *)(a1 + 160);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
  result = WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, a4, 0);
  cf = 0;
  v31 = *(_QWORD *)(a1 + 592);
  v32 = *(_QWORD *)(v31 + 16);
  if (!v32 || !*(_QWORD *)(v32 + 8) || !*(_BYTE *)(v31 + 48))
  {
    v34 = 0;
LABEL_29:
    v61 = v34;
    WebKit::WebNavigationState::createLoadRequestNavigation((uint64_t *)&v62, v28, v29, (uint64_t)buf, &v61);
    v27 = v62;
    if (v61)
      CFRelease(*(CFTypeRef *)(v61 + 8));
    v35 = cf;
    cf = 0;
    if (v35)
      CFRelease(v35);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    WebKit::NavigationActionData::operator=((uint64_t)v27 + 512, a5);
    goto LABEL_34;
  }
  v33 = *(_QWORD *)(v31 + 40);
  if (v33 < *(unsigned int *)(v31 + 36))
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8 * v33);
    if (v34)
      CFRetain(*(CFTypeRef *)(v34 + 8));
    goto LABEL_29;
  }
  __break(0xC471u);
  return result;
}

WebKit::SpeechRecognitionPermissionManager *WebKit::WebPageProxy::didChangeMainDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::URL *v14;
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  _QWORD v19[2];
  uint64_t v20;
  _BYTE v21[24];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 504);
  if (v4)
  {
    v17[0] = a2;
    v17[1] = a3;
    v18 = 1;
    WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(v4, (uint64_t)v17);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
    v8 = v7 ? v7 - 16 : 0;
    v9 = *(_QWORD *)(v8 + 176);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 16);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = WebKit::WebFrameProxy::webFrame(a2, a3);
      if (v12)
      {
        v13 = v12;
        CFRetain(*(CFTypeRef *)(v12 + 8));
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)(v13 + 48), v14);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
        v19[0] = v21;
        v19[1] = &v20;
        v20 = v15;
        WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(v9, (uint64_t)v19, 0, 0);
        if (v22 != -1)
          ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v22])(v19, v21);
        CFRelease(*(CFTypeRef *)(v13 + 8));
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
    }
  }
  *(_BYTE *)(a1 + 1193) = 0;
  return std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1184), 0);
}

uint64_t WebKit::WebPageProxy::didReceiveTitleForFrame(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Inspector::RemoteControllableTarget *v29;
  WTF *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::ProcessThrottlerActivity *v38;
  NSObject *v39;
  _QWORD v40[2];
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 5);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = *((_QWORD *)a1 + 4);
    v15 = *(_QWORD *)(v14 + 960);
    if (v15)
      CFRetain(*(CFTypeRef *)(v15 + 8));
    v40[0] = v15;
    v40[1] = v14 + 944;
    ++*(_DWORD *)(v14 + 1316);
    v16 = *(_QWORD *)(v13 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        if (*(_QWORD *)(v17 + 264) == v13 || (v18 = *(_QWORD *)(v17 + 1104)) != 0 && *(_QWORD *)(v18 + 72) == v13)
        {
          v19 = *((_QWORD *)a1 + 4);
          *(_BYTE *)(v14 + 1312) = 1;
          v20 = WTF::String::operator=((WTF::StringImpl **)(v19 + 1216), a5);
          if ((PAL::deviceClassIsSmallScreen((PAL *)v20) & 1) == 0 && !*(_QWORD *)(*((_QWORD *)a1 + 4) + 1912))
          {
            v31 = *(WTF **)(v13 + 232);
            if (v31)
            {
              if ((WTF::equal(v31, *(const WTF::StringImpl **)a5, v21) & 1) == 0)
              {
                v32 = qword_1ECE71A28;
                if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
                {
                  v33 = *((_QWORD *)a1 + 4);
                  v34 = *(_QWORD *)(v33 + 744);
                  v35 = *(_QWORD *)(v33 + 1896);
                  v36 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
                  if (v36)
                    LODWORD(v36) = *(_DWORD *)(v36 + 108);
                  *(_DWORD *)buf = 134218752;
                  v42 = a1;
                  v43 = 2048;
                  v44 = v34;
                  v45 = 2048;
                  v46 = v35;
                  v47 = 1024;
                  v48 = v36;
                  _os_log_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didReceiveTitleForFrame: This page updates its title without user interaction and is allowed to run in the background", buf, 0x26u);
                }
                v37 = *((_QWORD *)a1 + 26) + 200;
                v38 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
                WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v38, v37, "Page updates its title", 23, 0, 0);
                std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((_QWORD *)a1 + 4) + 1912), v38);
              }
            }
          }
        }
      }
    }
    WTF::String::operator=((WTF::StringImpl **)(v13 + 232), a5);
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*((_QWORD *)a1 + 4) + 944), v22, v23);
    v26 = *(_QWORD *)(v13 + 24);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        if (*(_QWORD *)(v27 + 264) == v13 || (v28 = *(_QWORD *)(v27 + 1104)) != 0 && *(_QWORD *)(v28 + 72) == v13)
        {
          v29 = (Inspector::RemoteControllableTarget *)*((_QWORD *)a1 + 135);
          if (v29)
            Inspector::RemoteControllableTarget::update(v29);
        }
      }
    }
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v40, v24, v25);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v39 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v42 = "void WebKit::WebPageProxy::didReceiveTitleForFrame(IPC::Connection &, FrameIdentifier, const String &, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v39, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6844: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
}

uint64_t WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  CFTypeRef *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v24;
  _BYTE v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v10 = a1[5];
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = a1[7];
    if (v14)
    {
      v15 = (unsigned int *)a1[26];
      v16 = v15 + 4;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *a5;
      if (v18)
        CFRetain(v18[1]);
      WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v15, (API::Object *)v18, (WebKit **)v25);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v14 + 56))(v14, a1, v13, *(_QWORD *)v25);
      v19 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      if (v19)
        CFRelease(*(CFTypeRef *)(v19 + 8));
      if (v18)
        CFRelease(v18[1]);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15 + 4);
    }
    v20 = *(_QWORD *)(v13 + 24);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        if (*(_QWORD *)(v21 + 264) == v13 || (v22 = *(_QWORD *)(v21 + 1104)) != 0 && *(_QWORD *)(v22 + 72) == v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1280))(v11);
      }
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v24 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = "void WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame(IPC::Connection &, FrameIde"
                           "ntifier, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6893: Invalid message dispatched %s", v25, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
}

uint64_t WebKit::WebPageProxy::didDisplayInsecureContentForFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  CFTypeRef *v23;
  WebKit *v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  NSObject *v28;
  WebKit *v29;
  __int128 buf;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v10 = a1[5];
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 + 960);
    v18 = v16;
    if (v17)
    {
      CFRetain(*(CFTypeRef *)(v17 + 8));
      v18 = a1[4];
    }
    *(_QWORD *)&buf = v17;
    *((_QWORD *)&buf + 1) = v16 + 944;
    ++*(_DWORD *)(v16 + 1316);
    *(_BYTE *)(v16 + 1312) = 1;
    *(_BYTE *)(v18 + 1137) = 1;
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v18 + 944), v14, v15);
    v19 = a1[9];
    v20 = (unsigned int *)a1[26];
    v21 = v20 + 4;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v23 = *a5;
    if (v23)
      CFRetain(v23[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v20, (API::Object *)v23, &v29);
    (*(void (**)(uint64_t, _QWORD *, WebKit *))(*(_QWORD *)v19 + 168))(v19, a1, v29);
    v24 = v29;
    v29 = 0;
    if (v24)
      CFRelease(*((CFTypeRef *)v24 + 1));
    if (v23)
      CFRelease(v23[1]);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v20 + 4);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&buf, v25, v26);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v28 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::didDisplayInsecureContentForFrame(IPC::Connection &, Fr"
                                      "ameIdentifier, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6924: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
}

uint64_t WebKit::WebPageProxy::didRunInsecureContentForFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  CFTypeRef *v23;
  WebKit *v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  NSObject *v28;
  WebKit *v29;
  __int128 buf;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v10 = a1[5];
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 + 960);
    v18 = v16;
    if (v17)
    {
      CFRetain(*(CFTypeRef *)(v17 + 8));
      v18 = a1[4];
    }
    *(_QWORD *)&buf = v17;
    *((_QWORD *)&buf + 1) = v16 + 944;
    ++*(_DWORD *)(v16 + 1316);
    *(_BYTE *)(v16 + 1312) = 1;
    *(_BYTE *)(v18 + 1137) = 1;
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v18 + 944), v14, v15);
    v19 = a1[9];
    v20 = (unsigned int *)a1[26];
    v21 = v20 + 4;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v23 = *a5;
    if (v23)
      CFRetain(v23[1]);
    WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v20, (API::Object *)v23, &v29);
    (*(void (**)(uint64_t, _QWORD *, WebKit *))(*(_QWORD *)v19 + 176))(v19, a1, v29);
    v24 = v29;
    v29 = 0;
    if (v24)
      CFRelease(*((CFTypeRef *)v24 + 1));
    if (v23)
      CFRelease(v23[1]);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v20 + 4);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&buf, v25, v26);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v28 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::didRunInsecureContentForFrame(IPC::Connection &, FrameI"
                                      "dentifier, const UserData &)";
      _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6938: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionAsync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  WebKit::WebProcessProxy *v6;

  v3 = *(unsigned int **)(a1 + 208);
  v4 = v3 + 4;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (WebKit::WebProcessProxy *)v3;
  WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(a1, &v6, a2, a3);
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3 + 4);
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebKit::WebProcessProxy *v12;
  unsigned int *v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  WebKit::WebProcessProxy *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  WebKit::WebProcessProxy *v28;
  __int128 buf;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebFrameProxy::webFrame(a3[263], a3[264]);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a3 + 295));
    v11 = *(WTF::StringImpl **)v10;
    if (*(_QWORD *)v10)
      *(_DWORD *)v11 += 2;
    v12 = *a2;
    v13 = (unsigned int *)((char *)*a2 + 16);
    v14 = *(_OWORD *)(v10 + 8);
    v15 = *(_OWORD *)(v10 + 24);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 + 1, v13));
    v28 = v12;
    v17 = *a4;
    *a4 = 0;
    *(_QWORD *)&buf = v17;
    v18 = *a2;
    v19 = (unsigned int *)((char *)*a2 + 16);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v30 = v11;
    v31 = v14;
    v32 = v15;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v21 = &off_1E34D50C8;
    v21[1] = buf;
    v21[2] = v18;
    buf = 0uLL;
    WTF::URL::URL((uint64_t)(v21 + 3), (uint64_t *)&v30);
    v27 = v21;
    WebKit::WebPageProxy::decidePolicyForNavigationAction(a1, &v28, v9, (uint64_t)a3, (uint64_t *)&v27);
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v24 + 16));
    v25 = buf;
    *(_QWORD *)&buf = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    if (v28)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v28 + 4);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(Ref<WebProce"
                                      "ssProxy> &&, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 6971: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  }
}

void WebKit::WebPageProxy::decidePolicyForNavigationAction(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF **v25;
  const WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebKit::WebProcessProxy *v32;
  const WTF::URL *v33;
  WebKit::WebProcessProxy *v34;
  const WTF::URL *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  const void *v51;
  WTF::StringImpl *v52;
  const void *v53;
  WebKit::WebProcessProxy **v54;
  NSObject *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  const WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  IPC::Encoder *v62;
  CFTypeRef *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebKit::WebProcessProxy **v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  WebKit::WebProcessProxy *v75;
  const void *v76;
  CFTypeRef v77;
  const void *v78;
  __int128 v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  const void *v89;
  uint64_t v90;
  uint64_t *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const void *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::URL *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  const WTF::StringImpl *v107;
  NSObject *v108;
  int v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  __int16 v114;
  char v115;
  WTF::URL *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int i;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  const WTF::StringImpl *v129;
  int BoolValueForKey;
  WebKit::WebProcessProxy *v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  _DWORD *v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  CFTypeRef *v161;
  WTF::StringImpl *v162;
  const WTF::URL *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  WebKit::WebFramePolicyListenerProxy *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WebKit *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  WTF::URL *v183;
  unint64_t v184;
  WTF::URL *v185;
  unint64_t v186;
  CFTypeRef *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  const WTF::StringImpl *v191;
  char v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  _DWORD *v196;
  _DWORD *v197;
  __int128 v198;
  const WTF::URL *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  WebKit::WebFramePolicyListenerProxy *v206;
  char v207;
  const WTF::URL *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  uint64_t v217;
  WTF::StringImpl **v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  const char ***v223;
  uint64_t v224;
  uint64_t v225;
  CFTypeRef v226;
  CFTypeRef v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  CFTypeRef v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  CFTypeRef v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  WTF::URL *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  double v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  IPC::Encoder *v250;
  WTF *v251;
  void *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  NSObject *v256;
  uint64_t v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  __int128 v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  char v269;
  int v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v277;
  char v279;
  WTF::StringImpl *v281;
  char v282;
  WebKit::WebFramePolicyListenerProxy *v283;
  char v284[8];
  char v285;
  char v286[8];
  char v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  CFTypeRef v295[24];
  CFTypeRef v296;
  CFTypeRef v297[24];
  CFTypeRef v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  uint64_t v302[2];
  char v303;
  IPC::Encoder *v304;
  _BYTE buf[24];
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  CFTypeRef v310[4];
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  _BYTE v315[32];
  __int128 v316;
  _BYTE v317[20];
  char v318;
  _BYTE v319[24];
  _BYTE v320[30];
  int v321;
  WTF::StringImpl *v322;
  __int128 v323;
  _OWORD v324[2];
  _DWORD *v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  __int16 v329;
  CFTypeRef v330[24];
  CFTypeRef cf;
  _BYTE v332[24];
  int v333;
  WTF::StringImpl *v334;
  __int128 v335;
  _BYTE v336[30];
  __int16 v337;
  CFTypeRef v338[24];
  CFTypeRef v339;
  _BYTE v340[24];
  int v341;
  WTF::StringImpl *v342;
  __int128 v343;
  _OWORD v344[2];
  uint64_t v345;

  v345 = *MEMORY[0x1E0C80C00];
  v337 = *(_WORD *)(a4 + 1856);
  WebCore::ResourceRequest::ResourceRequest(v338, (const WebCore::ResourceRequest *)(a4 + 1864));
  v340[0] = 0;
  v341 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v340, a4 + 2064);
  v7 = *(WTF::StringImpl **)(a4 + 2096);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(_OWORD *)(a4 + 2104);
  v344[0] = *(_OWORD *)(a4 + 2120);
  *(_OWORD *)((char *)v344 + 14) = *(_OWORD *)(a4 + 2134);
  v342 = v7;
  v343 = v8;
  v9 = *(_QWORD *)(a4 + 2152);
  v329 = *(_WORD *)(a4 + 1544);
  WebCore::ResourceRequest::ResourceRequest(v330, (const WebCore::ResourceRequest *)(a4 + 1552));
  v332[0] = 0;
  v333 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v332, a4 + 1752);
  v10 = *(WTF::StringImpl **)(a4 + 1784);
  if (v10)
    *(_DWORD *)v10 += 2;
  v334 = v10;
  *(_OWORD *)v336 = *(_OWORD *)(a4 + 1808);
  *(_OWORD *)&v336[14] = *(_OWORD *)(a4 + 1822);
  v335 = *(_OWORD *)(a4 + 1792);
  v11 = *(WTF::StringImpl **)(a4 + 1840);
  v273 = *(unsigned __int8 *)(a4 + 1848);
  WebCore::ResourceRequest::ResourceRequest(v297, (const WebCore::ResourceRequest *)(a4 + 2160));
  WebCore::ResourceRequest::ResourceRequest(v295, (const WebCore::ResourceRequest *)(a4 + 2360));
  v12 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 108);
    v15 = *(_QWORD *)(v13 + 744);
    v16 = *(_QWORD *)(v13 + 1896);
    v17 = *(_QWORD *)(a3 + 272);
    v18 = *(_QWORD **)(a3 + 24);
    if (v18)
    {
      v18 = (_QWORD *)v18[1];
      if (v18)
      {
        if (v18[33] == a3)
        {
          LODWORD(v18) = 1;
        }
        else
        {
          v18 = (_QWORD *)v18[138];
          if (v18)
            LODWORD(v18) = v18[9] == a3;
        }
      }
    }
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v306 = v16;
    WORD4(v306) = 1024;
    *(_DWORD *)((char *)&v306 + 10) = v14;
    HIWORD(v306) = 2048;
    *(_QWORD *)&v307 = v17;
    WORD4(v307) = 1024;
    *(_DWORD *)((char *)&v307 + 10) = (_DWORD)v18;
    HIWORD(v307) = 2048;
    *(_QWORD *)&v308 = v9;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: frameID=%llu, isMainFrame=%d, navigationID=%llu", buf, 0x40u);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    v20 = *(_QWORD *)(v19 + 8);
  else
    v20 = 0;
  v277 = v20;
  (*(void (**)(void))(*(_QWORD *)v20 + 1584))();
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(v23 + 960);
  if (v24)
    CFRetain(*(CFTypeRef *)(v24 + 8));
  ++*(_DWORD *)(v23 + 1316);
  v292 = v24;
  v293 = v23 + 944;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v294 = 1;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v21, v22);
  v25 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
  v27 = WTF::equal(*v25, *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 32) + 984), v26);
  v29 = v27;
  if (v9)
  {
    if ((v27 & 1) == 0)
    {
      v30 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)(v293 + 368) = 1;
      *(_QWORD *)(v30 + 1144) = 0;
      v31 = *(WTF::StringImpl **)(v30 + 1152);
      *(_QWORD *)(v30 + 1152) = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v28);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
  }
  v271 = v11;
  v32 = *a2;
  v33 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v32, v33))
  {
    v55 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v234 = *(_QWORD *)(a1 + 32);
      v235 = *(_QWORD *)(v234 + 744);
      v236 = *(_QWORD *)(v234 + 1896);
      v237 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v237)
        LODWORD(v237) = *(_DWORD *)(v237 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v235;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v306 = v236;
      WORD4(v306) = 1024;
      *(_DWORD *)((char *)&v306 + 10) = v237;
      _os_log_error_impl(&dword_196BCC000, v55, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it is outside the sandbox", buf, 0x26u);
    }
    *(_WORD *)buf = *(_WORD *)(a1 + 1256);
    buf[2] = 2;
    *(_QWORD *)&buf[8] = 0;
    buf[16] = 0;
    LOBYTE(v306) = 0;
    BYTE8(v306) = 0;
    BYTE8(v313) = 0;
    LOBYTE(v314) = 0;
    BYTE8(v314) = 0;
    v315[0] = 0;
    v315[16] = 0;
    v56 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v56 + 16))(v56, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v59 = v277;
    if (v315[16])
    {
      v60 = *(WTF::StringImpl **)&v315[8];
      *(_QWORD *)&v315[8] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v57);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    if (BYTE8(v314))
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v314);
    if (BYTE8(v313))
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)((char *)&v306 + 8), v57);
    goto LABEL_270;
  }
  v34 = *a2;
  v35 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v297);
  if (!WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v34, v35))
  {
    v264 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationAction(Ref<WebProcessProxy> &&, WebFrameP"
                           "roxy &, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v264, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7019: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
    v59 = v277;
    goto LABEL_270;
  }
  if (v9)
  {
    v36 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), v9);
    if (v36)
    {
      v37 = (WTF::StringImpl *)v36;
      CFRetain(*(CFTypeRef *)(v36 + 8));
      if ((*(_BYTE *)(a4 + 226) & 1) == 0)
      {
        v38 = *(_BYTE *)(a4 + 64);
        WTF::URL::URL((uint64_t)buf, (uint64_t *)(a4 + 88));
        v39 = *(_QWORD *)(a4 + 128);
        v40 = *(_QWORD *)(a4 + 136);
        *(_QWORD *)(a4 + 128) = 0;
        *(_QWORD *)&v307 = v39;
        *((_QWORD *)&v307 + 1) = v40;
        v41 = *(_OWORD *)(a4 + 160);
        v308 = *(_OWORD *)(a4 + 144);
        *(_OWORD *)(a4 + 144) = 0u;
        *(_OWORD *)(a4 + 160) = 0u;
        v309 = v41;
        v42 = *(const void **)(a4 + 176);
        *(_QWORD *)(a4 + 176) = 0;
        v310[0] = v42;
        v43 = *(const void **)(a4 + 184);
        *(_QWORD *)(a4 + 184) = 0;
        v310[1] = v43;
        v44 = *(const void **)(a4 + 192);
        *(_QWORD *)(a4 + 192) = 0;
        v310[2] = v44;
        v45 = *(const void **)(a4 + 200);
        *(_QWORD *)(a4 + 200) = 0;
        v310[3] = v45;
        LOBYTE(v311) = 0;
        LOBYTE(v312) = 0;
        if (*(_BYTE *)(a4 + 216))
        {
          v46 = *(_QWORD *)(a4 + 208);
          *(_QWORD *)(a4 + 208) = 0;
          v311 = v46;
          LOBYTE(v312) = 1;
        }
        v47 = *(_OWORD *)(a4 + 256);
        *(_OWORD *)&v315[16] = *(_OWORD *)(a4 + 272);
        v48 = *(_OWORD *)(a4 + 304);
        v316 = *(_OWORD *)(a4 + 288);
        *(_OWORD *)v317 = v48;
        v49 = *(_OWORD *)(a4 + 240);
        v313 = *(_OWORD *)(a4 + 224);
        v314 = v49;
        *(_OWORD *)v315 = v47;
        *(_DWORD *)&v317[15] = *(_DWORD *)(a4 + 319);
        *(_QWORD *)v319 = *(_QWORD *)(a4 + 328);
        v319[8] = *(_BYTE *)(a4 + 336);
        *(_QWORD *)(a4 + 328) = 0;
        WebKit::NavigationActionData::operator=(a4, (uint64_t)v37 + 512);
        WebCore::ResourceResponseBase::operator=(a4 + 88, (uint64_t)buf);
        v50 = *(_QWORD *)v319;
        *(_QWORD *)v319 = 0;
        v51 = *(const void **)(a4 + 328);
        *(_QWORD *)(a4 + 328) = v50;
        if (v51)
          CFRelease(v51);
        *(_BYTE *)(a4 + 336) = v319[8];
        *(_BYTE *)(a4 + 64) = v38;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v340, (uint64_t)v37 + 3368);
        v53 = *(const void **)v319;
        *(_QWORD *)v319 = 0;
        v54 = a2;
        if (v53)
          CFRelease(v53);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v52);
        goto LABEL_72;
      }
LABEL_71:
      v54 = a2;
      goto LABEL_72;
    }
  }
  *(_OWORD *)buf = *(_OWORD *)(a4 + 416);
  *(_QWORD *)&buf[16] = *(_QWORD *)(a4 + 432);
  if (!buf[16]
    || (v61 = WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 592), buf)) == 0)
  {
    v54 = a2;
LABEL_66:
    v69 = v54;
    v70 = *(_QWORD *)(a1 + 160);
    v71 = *((_QWORD *)*v69 + 22);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)v295);
    WebKit::WebBackForwardList::protectedCurrentItem(*(_QWORD **)(a1 + 592), v302);
    WebKit::WebNavigationState::createLoadRequestNavigation((uint64_t *)&v281, v70, v71, (uint64_t)buf, v302);
    v37 = v281;
    if (v302[0])
      CFRelease(*(CFTypeRef *)(v302[0] + 8));
    v72 = *(const void **)&v315[24];
    *(_QWORD *)&v315[24] = 0;
    if (v72)
      CFRelease(v72);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    goto LABEL_71;
  }
  v62 = (IPC::Encoder *)v61;
  CFRetain(*(CFTypeRef *)(v61 + 8));
  if (*(_BYTE *)(a4 + 456))
  {
    v63 = (CFTypeRef *)WebKit::WebBackForwardList::itemForID(*(WebKit::WebBackForwardListItem **)(a1 + 592), (_QWORD *)(a4 + 440));
    if (v63)
      goto LABEL_47;
  }
  v64 = *(_QWORD *)(a1 + 592);
  v65 = *(_QWORD *)(v64 + 16);
  if (v65 && *(_QWORD *)(v65 + 8) && *(_BYTE *)(v64 + 48))
  {
    v66 = *(_QWORD *)(v64 + 40);
    if (v66 >= *(unsigned int *)(v64 + 36))
    {
      __break(0xC471u);
      return;
    }
    v63 = *(CFTypeRef **)(*(_QWORD *)(v64 + 24) + 8 * v66);
    if (v63)
LABEL_47:
      CFRetain(v63[1]);
  }
  else
  {
    v63 = 0;
  }
  v281 = (WTF::StringImpl *)v63;
  v67 = *(_QWORD *)(a1 + 160);
  v68 = *((_QWORD *)*a2 + 22);
  v304 = v62;
  WebKit::WebNavigationState::createBackForwardNavigation(v302, v67, v68, (uint64_t *)&v304, (uint64_t *)&v281, 3);
  v37 = (WTF::StringImpl *)v302[0];
  if (v304)
    CFRelease(*((CFTypeRef *)v304 + 1));
  if (v281)
    CFRelease(*((CFTypeRef *)v281 + 1));
  v54 = a2;
  if (!v37)
    goto LABEL_66;
LABEL_72:
  v73 = *((_QWORD *)v37 + 2);
  v74 = *(_QWORD *)(a1 + 1120);
  if (v74)
  {
    v75 = *(WebKit::WebProcessProxy **)(*(_QWORD *)(v74 + 40) + 16);
    if (v75 == *v54 && *(_QWORD *)(v74 + 88) != v73)
    {
      *(_QWORD *)(v74 + 88) = v73;
      *((_QWORD *)v37 + 3) = *((_QWORD *)v75 + 22);
    }
  }
  v266 = v73;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)v295);
  API::Navigation::setCurrentRequest((uint64_t)v37, (uint64_t)buf, *((_QWORD *)*v54 + 22));
  v76 = *(const void **)&v315[24];
  *(_QWORD *)&v315[24] = 0;
  if (v76)
    CFRelease(v76);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  WebKit::NavigationActionData::operator=((uint64_t)v37 + 512, a4);
  *((_WORD *)v37 + 1536) = v329;
  WebCore::ResourceRequestBase::operator=((uint64_t)v37 + 3080, (uint64_t)v330);
  v77 = cf;
  if (cf)
    CFRetain(cf);
  v78 = (const void *)*((_QWORD *)v37 + 409);
  *((_QWORD *)v37 + 409) = v77;
  if (v78)
    CFRelease(v78);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37 + 3280, (uint64_t)v332);
  WTF::String::operator=((WTF::StringImpl **)v37 + 414, (WTF::StringImpl *)&v334);
  v79 = *(_OWORD *)v336;
  *(_OWORD *)((char *)v37 + 3320) = v335;
  *(_OWORD *)((char *)v37 + 3336) = v79;
  *(_OWORD *)((char *)v37 + 3350) = *(_OWORD *)&v336[14];
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37 + 3368, (uint64_t)v340);
  if (*(_BYTE *)(a4 + 868))
  {
    v80 = *(_WORD *)(a4 + 866);
    if (!*((_BYTE *)v37 + 3482))
      *((_BYTE *)v37 + 3482) = 1;
    *((_WORD *)v37 + 1740) = v80;
  }
  v81 = *(_QWORD *)(a3 + 24);
  if (v81
    && (v82 = *(_QWORD *)(v81 + 8)) != 0
    && (*(_QWORD *)(v82 + 264) == a3 || (v83 = *(_QWORD *)(v82 + 1104)) != 0 && *(_QWORD *)(v83 + 72) == a3))
  {
    CFRetain(*((CFTypeRef *)v37 + 1));
    v270 = 1;
    v275 = (uint64_t)v37;
  }
  else
  {
    v270 = 0;
    v275 = 0;
  }
  if ((_QWORD)v335 && (v84 = WebKit::WebFrameProxy::webFrame(v335, *((uint64_t *)&v335 + 1))) != 0)
  {
    v272 = v84;
    CFRetain(*(CFTypeRef *)(v84 + 8));
    v269 = 0;
  }
  else
  {
    v272 = 0;
    v269 = 1;
  }
  *(_WORD *)buf = v337;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)v338);
  BYTE8(v316) = 0;
  *(_DWORD *)&v317[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v316 + 8, (uint64_t)v340);
  v85 = v342;
  if (v342)
    *(_DWORD *)v342 += 2;
  *(_QWORD *)v319 = v85;
  *(_OWORD *)v320 = v344[0];
  *(_OWORD *)&v320[14] = *(_OWORD *)((char *)v344 + 14);
  *(_OWORD *)&v319[8] = v343;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v281 = (WTF::StringImpl *)a1;
  v86 = API::Object::newObject(0x140uLL, 60);
  API::FrameInfo::FrameInfo(v86, (uint64_t)buf, (uint64_t *)&v281);
  if (v281)
    CFRelease(*((CFTypeRef *)v281 + 1));
  v88 = *(WTF::StringImpl **)v319;
  *(_QWORD *)v319 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v87);
    else
      *(_DWORD *)v88 -= 2;
  }
  if (*(_DWORD *)&v317[16] != -1)
    ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[*(unsigned int *)&v317[16]])(&v281, (char *)&v316 + 8);
  *(_DWORD *)&v317[16] = -1;
  v89 = (const void *)v316;
  *(_QWORD *)&v316 = 0;
  if (v89)
    CFRelease(v89);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
  v90 = v272;
  if ((v29 & 1) != 0)
  {
    v274 = 0;
    v91 = (uint64_t *)a2;
  }
  else
  {
    v91 = (uint64_t *)a2;
    if (v272 == a3)
    {
      CFRetain(*(CFTypeRef *)(v86 + 8));
      v274 = v86;
    }
    else
    {
      if (v273)
        WebKit::WebProcessProxy::webPage((uint64_t)v271, (uint64_t *)buf);
      else
        *(_QWORD *)buf = 0;
      v274 = API::Object::newObject(0x140uLL, 60);
      API::FrameInfo::FrameInfo(v274, (uint64_t)&v329, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
    }
  }
  if (!*(_BYTE *)(a1 + 736) && *(_BYTE *)(v86 + 16) && (v100 = *(_QWORD *)(a1 + 280)) != 0)
  {
    v101 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v100 + 48));
    v103 = v102;
    v104 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
    v105 = (unsigned __int8 *)WTF::URL::host(v104);
    v92 = !WTF::operator==(v101, v103, v105, v106) && *(_BYTE *)a4 != 2;
    v91 = (uint64_t *)a2;
  }
  else
  {
    v92 = 0;
  }
  v93 = *v91;
  v289 = *(_OWORD *)(a4 + 8);
  v290 = *(_QWORD *)(a4 + 24);
  WebKit::WebProcessProxy::userInitiatedActivity(v93, (uint64_t)&v289, &v291);
  v281 = 0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)v295);
  v94 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v297);
  v95 = API::Object::newObject(0xB40uLL, 77);
  v96 = a4;
  v97 = v274;
  v288 = API::NavigationAction::NavigationAction(v95, v96, v274, v86, (_DWORD **)&v281, (uint64_t)buf, v94, v92, &v291, v275);
  v98 = *(const void **)&v315[24];
  *(_QWORD *)&v315[24] = 0;
  if (v98)
    CFRelease(v98);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
      WTF::StringImpl::destroy(v281, v99);
    else
      *(_DWORD *)v281 -= 2;
  }
  v268 = v86;
  if (!WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation((WebKit::WebFrameProxy *)a3, (const WebCore::ResourceRequest *)v295))
  {
    if (*(_BYTE *)(v288 + 368))
    {
LABEL_139:
      v114 = 0;
      v115 = 1;
LABEL_148:
      v127 = *(_QWORD *)(a1 + 224);
      {
        WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v127 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, v107);
      {
        if (dword_1ECE7350C)
        {
          if (*(_BYTE *)(a1 + 1304))
            WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)a1);
          v267 = 0;
        }
        else
        {
          v267 = 1;
        }
      }
      else
      {
        qword_1ECE73518 = 0;
        WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
        unk_1ECE73508 = 0u;
        v267 = 1;
      }
      if (v294)
      {
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v292, v128, v129);
        v294 = 0;
      }
      *(_QWORD *)buf = a1;
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(_QWORD *)&buf[8] = a1;
      v131 = *a2;
      v132 = (unsigned int *)((char *)*a2 + 16);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 + 1, v132));
      *(_QWORD *)&buf[16] = v131;
      CFRetain(*(CFTypeRef *)(a3 + 8));
      v134 = *a5;
      *a5 = 0;
      *(_QWORD *)&v306 = a3;
      *((_QWORD *)&v306 + 1) = v134;
      CFRetain(*((CFTypeRef *)v37 + 1));
      *(_QWORD *)&v307 = v37;
      v135 = v288;
      CFRetain(*(CFTypeRef *)(v288 + 8));
      *((_QWORD *)&v307 + 1) = v135;
      LOBYTE(v308) = 0;
      LOBYTE(v309) = 0;
      if ((v115 & 1) == 0)
      {
        LOWORD(v308) = v114;
        *((_QWORD *)&v308 + 1) = v271;
        LOBYTE(v309) = 1;
        v271 = 0;
      }
      WORD4(v309) = v337;
      WebCore::ResourceRequest::ResourceRequest(v310, (const WebCore::ResourceRequest *)v338);
      v320[24] = 0;
      v321 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v320[24], (uint64_t)v340);
      v136 = v342;
      if (v342)
        *(_DWORD *)v342 += 2;
      v322 = v136;
      v323 = v343;
      v324[0] = v344[0];
      *(_OWORD *)((char *)v324 + 14) = *(_OWORD *)((char *)v344 + 14);
      v137 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
      v138 = *(_DWORD **)v137;
      if (*(_QWORD *)v137)
        *v138 += 2;
      v279 = v115;
      v325 = v138;
      v139 = *(_OWORD *)(v137 + 24);
      v326 = *(_OWORD *)(v137 + 8);
      v327 = v139;
      v140 = *(_QWORD *)(a1 + 40);
      if (v140)
        v141 = *(_QWORD *)(v140 + 8);
      else
        v141 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 1584))(v141);
      v328 = v141;
      v142 = WTF::fastMalloc((WTF *)0x1B0);
      v143 = v142;
      *(_QWORD *)v142 = off_1E34D5118;
      *(_QWORD *)(v142 + 8) = *(_QWORD *)buf;
      *(_QWORD *)(v142 + 16) = *(_QWORD *)&buf[8];
      v144 = *(_QWORD *)&buf[16];
      *(_OWORD *)&buf[8] = 0u;
      *(_QWORD *)(v142 + 24) = v144;
      *(_QWORD *)(v142 + 32) = v306;
      v145 = *((_QWORD *)&v306 + 1);
      v306 = 0u;
      *(_QWORD *)(v142 + 40) = v145;
      *(_QWORD *)(v142 + 48) = v307;
      v146 = *((_QWORD *)&v307 + 1);
      v307 = 0u;
      *(_QWORD *)(v142 + 56) = v146;
      *(_BYTE *)(v142 + 64) = 0;
      *(_BYTE *)(v142 + 80) = 0;
      if ((_BYTE)v309)
      {
        *(_WORD *)(v142 + 64) = v308;
        v147 = *((_QWORD *)&v308 + 1);
        *((_QWORD *)&v308 + 1) = 0;
        *(_QWORD *)(v142 + 72) = v147;
        *(_BYTE *)(v142 + 80) = 1;
      }
      *(_WORD *)(v142 + 88) = WORD4(v309);
      WTF::URL::URL(v142 + 96, (uint64_t *)v310);
      WTF::URL::URL(v143 + 136, &v312);
      *(_QWORD *)(v143 + 176) = *(_QWORD *)v315;
      *(_QWORD *)(v143 + 184) = *(_QWORD *)&v315[8];
      v148 = *(_QWORD *)&v315[16];
      *(_OWORD *)&v315[8] = 0u;
      *(_QWORD *)(v143 + 192) = v148;
      v149 = *(_QWORD *)&v315[24];
      *(_QWORD *)&v315[24] = 0;
      *(_QWORD *)(v143 + 200) = v149;
      v150 = v316;
      *(_QWORD *)&v316 = 0;
      *(_QWORD *)(v143 + 208) = v150;
      v151 = *((_QWORD *)&v316 + 1);
      *((_QWORD *)&v316 + 1) = 0;
      *(_QWORD *)(v143 + 216) = v151;
      v152 = *(_QWORD *)v317;
      *(_QWORD *)v317 = 0;
      *(_QWORD *)(v143 + 224) = v152;
      v153 = *(_QWORD *)&v317[8];
      *(_QWORD *)&v317[8] = 0;
      *(_QWORD *)(v143 + 232) = v153;
      LODWORD(v152) = *(_DWORD *)&v317[16];
      *(_BYTE *)(v143 + 244) = v318;
      *(_DWORD *)(v143 + 240) = v152;
      *(_QWORD *)(v143 + 248) = *(_QWORD *)v319;
      v154 = *(_QWORD *)&v319[8];
      *(_OWORD *)v319 = 0u;
      *(_QWORD *)(v143 + 256) = v154;
      *(_QWORD *)(v143 + 264) = *(_QWORD *)&v319[16];
      v155 = *(_QWORD *)v320;
      *(_BYTE *)(v143 + 280) = v320[8];
      *(_QWORD *)(v143 + 272) = v155;
      v156 = *(_QWORD *)&v320[16];
      *(_QWORD *)&v319[16] = 0;
      *(_QWORD *)&v320[16] = 0;
      *(_QWORD *)(v143 + 288) = v156;
      *(_BYTE *)(v143 + 296) = 0;
      *(_DWORD *)(v143 + 320) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v143 + 296, (uint64_t)&v320[24]);
      v157 = v322;
      v322 = 0;
      *(_QWORD *)(v143 + 328) = v157;
      v158 = *(_OWORD *)((char *)v324 + 14);
      v159 = v324[0];
      *(_OWORD *)(v143 + 336) = v323;
      *(_OWORD *)(v143 + 352) = v159;
      *(_OWORD *)(v143 + 366) = v158;
      WTF::URL::URL(v143 + 384, (uint64_t *)&v325);
      v160 = v328;
      v328 = 0;
      *(_QWORD *)(v143 + 424) = v160;
      v281 = (WTF::StringImpl *)v143;
      v161 = (CFTypeRef *)WebKit::WebFrameProxy::setUpPolicyListenerProxy(a3, (uint64_t *)&v281, BoolValueForKey, 1, v267);
      CFRetain(v161[1]);
      v283 = (WebKit::WebFramePolicyListenerProxy *)v161;
      if (v281)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v281 + 8))(v281);
      WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)buf, v162);
      v90 = v272;
      if (!BoolValueForKey)
      {
LABEL_181:
        if (v267)
        {
          v168 = v283;
          {
            qword_1ECE73518 = 0;
            WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
            unk_1ECE73508 = 0u;
          }
          CFRetain(*((CFTypeRef *)v283 + 1));
          v169 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v169 = &off_1E34D5E40;
          v169[1] = v168;
          *(_QWORD *)buf = v169;
          WebKit::LinkDecorationFilteringController::updateStrings((uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance, (uint64_t *)buf);
          v170 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v170)
            (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
        }
        v171 = *(_QWORD *)(a3 + 24);
        if (v171
          && (v172 = *(_QWORD *)(v171 + 8)) != 0
          && (*(_QWORD *)(v172 + 264) == a3 || (v173 = *(_QWORD *)(v172 + 1104)) != 0 && *(_QWORD *)(v173 + 72) == a3)
          || (v174 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295),
              !WebKit::shouldTreatURLProtocolAsAppBound(v174, (const WTF::URL *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 208) + 480))))
        {
          v183 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
          WTF::URL::host(v183);
          v178 = v184;
          v185 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
          WTF::URL::protocol(v185);
          v182 = v186;
        }
        else
        {
          v175 = *(_QWORD *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)v340);
          if (v175)
          {
            v176 = *(unsigned int *)(v175 + 16);
            LODWORD(v175) = *(_DWORD *)(v175 + 4);
            v177 = (v176 >> 2) & 1;
          }
          else
          {
            v177 = 1;
          }
          v178 = v175 | (unint64_t)(v177 << 32);
          v179 = *(_QWORD *)WebCore::SecurityOriginData::protocol((WebCore::SecurityOriginData *)v340);
          if (v179)
          {
            v180 = *(unsigned int *)(v179 + 16);
            LODWORD(v179) = *(_DWORD *)(v179 + 4);
            v181 = (v180 >> 2) & 1;
          }
          else
          {
            v181 = 1;
          }
          v182 = v179 | (unint64_t)(v181 << 32);
        }
        v187 = *(CFTypeRef **)(a1 + 264);
        CFRetain(v187[1]);
        if ((v178 & 0xFF00000000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        if ((v182 & 0xFF00000000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        v97 = v274;
        WebKit::WebsiteDataStore::beginAppBoundDomainCheck((WebKit::WebsiteDataStore *)v187, (const WTF::String *)buf, (const WTF::String *)&v281, (CFTypeRef *)v283);
        v189 = v281;
        v281 = 0;
        if (v189)
        {
          if (*(_DWORD *)v189 == 2)
            WTF::StringImpl::destroy(v189, v188);
          else
            *(_DWORD *)v189 -= 2;
        }
        v190 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v190)
        {
          if (*(_DWORD *)v190 == 2)
            WTF::StringImpl::destroy(v190, v188);
          else
            *(_DWORD *)v190 -= 2;
        }
        CFRelease(v187[1]);
        if (*((_BYTE *)v37 + 3464))
          v192 = 1;
        else
          v192 = *((_BYTE *)v37 + 536) != 0;
        v193 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
        if (v193 < 0 && v193 != -1)
          goto LABEL_227;
        WTF::URL::URL((uint64_t)&v281, (WTF::StringImpl **)(*(_QWORD *)(a1 + 32) + 1000));
        v194 = (_QWORD *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v288 + 392));
        v197 = (_DWORD *)*v194;
        v195 = (char *)(v194 + 1);
        v196 = v197;
        if (v197)
        {
          *v196 += 2;
          *(_QWORD *)buf = v196;
        }
        else
        {
          *(_QWORD *)buf = 0;
          v265 = *((_OWORD *)v195 + 1);
          *(_OWORD *)&buf[8] = *(_OWORD *)v195;
          v306 = v265;
          WTF::String::operator=((WTF::StringImpl **)buf, (WTF::StringImpl *)(a3 + 48));
          *(_OWORD *)&buf[8] = *(_OWORD *)(a3 + 56);
          v306 = *(_OWORD *)(a3 + 72);
          if (*(_QWORD *)buf)
            goto LABEL_217;
          WTF::String::operator=((WTF::StringImpl **)buf, (WTF::StringImpl *)&v281);
          v195 = &v282;
        }
        v198 = *((_OWORD *)v195 + 1);
        *(_OWORD *)&buf[8] = *(_OWORD *)v195;
        v306 = v198;
LABEL_217:
        v199 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
        if ((*((_BYTE *)v199 + 8) & 1) == 0
          || (v282 & 1) == 0
          || (v208 = v199,
              v209 = (unsigned __int8 *)WTF::URL::host(v199),
              v211 = v210,
              WTF::URL::host((WTF::URL *)&v281),
              !(_DWORD)v211)
          || (v212 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)buf), WTF::operator==(v209, v211, v212, v213)))
        {
LABEL_219:
          v201 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v201)
          {
            if (*(_DWORD *)v201 == 2)
              WTF::StringImpl::destroy(v201, v200);
            else
              *(_DWORD *)v201 -= 2;
          }
          v202 = v281;
          v281 = 0;
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
              WTF::StringImpl::destroy(v202, v200);
            else
              *(_DWORD *)v202 -= 2;
          }
LABEL_227:
          v203 = *(_QWORD *)(a1 + 64);
          if (v203)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, CFTypeRef *, CFTypeRef *, WebKit::WebFramePolicyListenerProxy **))(*(_QWORD *)v203 + 16))(v203, a1, a3, &v288, v90, v297, v295, &v283);
            v110 = v269;
            v109 = v270;
          }
          else
          {
            v110 = v269;
            v109 = v270;
            if (*(_BYTE *)(a1 + 737))
              goto LABEL_233;
            v205 = *(_QWORD *)(a1 + 224);
            {
              WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
              WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
            }
            if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v205 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v191) & 1) == 0)LABEL_233:*(_BYTE *)(v288 + 281) = 0;
            (*(void (**)(_QWORD, uint64_t, uint64_t *, WebKit::WebFramePolicyListenerProxy **))(**(_QWORD **)(a1 + 72) + 296))(*(_QWORD *)(a1 + 72), a1, &v288, &v283);
          }
          *(_WORD *)(a1 + 736) = 0;
          v206 = v283;
          v283 = 0;
          if (v206)
            CFRelease(*((CFTypeRef *)v206 + 1));
          v207 = v279;
          if (!v271)
            v207 = 1;
          if ((v207 & 1) == 0)
          {
            if (*(_DWORD *)v271 == 2)
              WTF::StringImpl::destroy(v271, v204);
            else
              *(_DWORD *)v271 -= 2;
          }
          goto LABEL_257;
        }
        v214 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
        v215 = (unsigned int *)(v214 + 16);
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 + 1, v215));
        v217 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
        WebCore::RegistrableDomain::RegistrableDomain(&v301, v208);
        WebCore::RegistrableDomain::RegistrableDomain(&v300, (const WTF::URL *)&v281);
        v218 = WebCore::RegistrableDomain::RegistrableDomain(&v299, (const WTF::URL *)buf);
        v219 = *(_QWORD *)(a3 + 24);
        if (v219)
        {
          v220 = *(_QWORD *)(v219 + 8);
          if (v220)
          {
            if (*(_QWORD *)(v220 + 264) == a3)
            {
              v222 = 1;
LABEL_313:
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v218);
              v246 = v245 - *(double *)(*(_QWORD *)(a1 + 32) + 2232);
              v247 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v247 = 410;
              *(_QWORD *)(v247 + 8) = 0;
              *(_QWORD *)(v247 + 528) = v247 + 16;
              *(_QWORD *)(v247 + 536) = v247 + 16;
              *(_OWORD *)(v247 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v247 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v247);
              v304 = (IPC::Encoder *)v247;
              *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v247, 8uLL, 8) = v217;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v247, (uint64_t *)&v301);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v247, (uint64_t *)&v300);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v247, (uint64_t *)&v299);
              *IPC::Encoder::grow((IPC::Encoder *)v247, 1uLL, 1) = v196 != 0;
              *IPC::Encoder::grow((IPC::Encoder *)v247, 1uLL, 1) = v222;
              *(double *)IPC::Encoder::grow((IPC::Encoder *)v247, 8uLL, 8) = v246;
              *IPC::Encoder::grow((IPC::Encoder *)v247, 1uLL, 1) = v192;
              LOBYTE(v302[0]) = 0;
              v303 = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v214, &v304, 0, (uint64_t)v302, 1);
              if (v303)
              {
                v249 = v302[0];
                v302[0] = 0;
                if (v249)
                  (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
              }
              v250 = v304;
              v304 = 0;
              v97 = v274;
              if (v250)
              {
                IPC::Encoder::~Encoder(v250, v248);
                WTF::fastFree(v251, v252);
              }
              v253 = v299;
              v299 = 0;
              v90 = v272;
              if (v253)
              {
                if (*(_DWORD *)v253 == 2)
                  WTF::StringImpl::destroy(v253, (WTF::StringImpl *)v248);
                else
                  *(_DWORD *)v253 -= 2;
              }
              v254 = v300;
              v300 = 0;
              if (v254)
              {
                if (*(_DWORD *)v254 == 2)
                  WTF::StringImpl::destroy(v254, (WTF::StringImpl *)v248);
                else
                  *(_DWORD *)v254 -= 2;
              }
              v255 = v301;
              v301 = 0;
              if (v255)
              {
                if (*(_DWORD *)v255 == 2)
                  WTF::StringImpl::destroy(v255, (WTF::StringImpl *)v248);
                else
                  *(_DWORD *)v255 -= 2;
              }
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v215);
              goto LABEL_219;
            }
            v221 = *(_QWORD *)(v220 + 1104);
            if (v221)
            {
              v222 = *(_QWORD *)(v221 + 72) == a3;
              goto LABEL_313;
            }
          }
        }
        v222 = 0;
        goto LABEL_313;
      }
      v163 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
      v164 = *(_QWORD *)(a3 + 24);
      if (!v164)
        goto LABEL_179;
      v165 = *(_QWORD *)(v164 + 8);
      if (!v165)
        goto LABEL_179;
      if (*(_QWORD *)(v165 + 264) == a3)
      {
        v167 = 1;
        goto LABEL_180;
      }
      v166 = *(_QWORD *)(v165 + 1104);
      if (v166)
        v167 = *(_QWORD *)(v166 + 72) == a3;
      else
LABEL_179:
        v167 = 0;
LABEL_180:
      WebKit::WebPageProxy::beginSafeBrowsingCheck((WebKit::WebPageProxy *)a1, v163, v167, (CFTypeRef *)v283);
      goto LABEL_181;
    }
    v116 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295);
    v117 = WTF::URL::protocol(v116);
    v119 = *(_QWORD *)(a1 + 1056);
    if (v119)
    {
      v120 = (unsigned __int8 *)v117;
      v121 = v118;
      v122 = *(_DWORD *)(v119 - 8);
      v123 = WTF::StringViewHashTranslator::hash(v117, v118);
      for (i = 0; ; v123 = i + v125)
      {
        v125 = v123 & v122;
        v126 = (uint64_t *)(v119 + 16 * (v123 & v122));
        if (*v126 != -1)
        {
          if (!*v126)
            goto LABEL_146;
          if (WTF::StringViewHashTranslator::equal(v126, v120, v121))
            break;
        }
        ++i;
      }
    }
    else
    {
LABEL_146:
      v97 = v274;
      if (!*(_BYTE *)(v86 + 16))
      {
        v238 = *(_DWORD *)(v288 + 784);
        if ((~v238 & 0x4060) == 0)
        {
          v90 = v272;
          if ((v238 & 0x400) != 0 || !*(_BYTE *)(v288 + 328))
          {
            if (!v274)
              goto LABEL_331;
            v239 = *(_QWORD *)(a1 + 224);
            {
              WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
              WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
            }
            if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v239 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, v107)|| (v240 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v295), WTF::URL::protocol(v240), (WebCore::Quirks::shouldAllowNavigationToCustomProtocolWithoutUserGesture() & 1) == 0))
            {
LABEL_331:
              v256 = qword_1ECE71C68;
              v110 = v269;
              v109 = v270;
              if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
              {
                v260 = *(_QWORD *)(a1 + 32);
                v261 = *(_QWORD *)(v260 + 744);
                v262 = *(_QWORD *)(v260 + 1896);
                v263 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
                if (v263)
                  LODWORD(v263) = *(_DWORD *)(v263 + 108);
                *(_DWORD *)buf = 134218752;
                *(_QWORD *)&buf[4] = a1;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v261;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&v306 = v262;
                WORD4(v306) = 1024;
                *(_DWORD *)((char *)&v306 + 10) = v263;
                _os_log_error_impl(&dword_196BCC000, v256, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it has a custom protocol and comes from a sandboxed iframe", buf, 0x26u);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v257 = *(_QWORD *)buf;
              v258 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), v266);
              v112 = v258;
              if (v258)
                CFRetain(*(CFTypeRef *)(v258 + 8));
              v281 = 0;
              v284[0] = 0;
              v285 = 0;
              *(_WORD *)buf = 2050;
              *(_QWORD *)&buf[8] = v257;
              buf[16] = 1;
              WebKit::WebPageProxy::receivedPolicyDecision(a1, (WTF::StringImpl *)2, v112, &v281, &v288, 0, (uint64_t)v284, (__int16 *)buf, a5);
              if (buf[16] && *(_QWORD *)&buf[8])
              {
                if (**(_DWORD **)&buf[8] == 2)
                  WTF::StringImpl::destroy(*(WTF::StringImpl **)&buf[8], v259);
                else
                  **(_DWORD **)&buf[8] -= 2;
              }
              if (!v285)
                goto LABEL_255;
              v223 = (const char ***)v284;
              goto LABEL_254;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v115 = 0;
            v271 = *(WTF::StringImpl **)buf;
            v114 = 2049;
            goto LABEL_148;
          }
        }
        goto LABEL_139;
      }
    }
    v114 = 0;
    v115 = 1;
    goto LABEL_148;
  }
  v108 = qword_1ECE71C68;
  v110 = v269;
  v109 = v270;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v241 = *(_QWORD *)(a1 + 32);
    v242 = *(_QWORD *)(v241 + 744);
    v243 = *(_QWORD *)(v241 + 1896);
    v244 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v244)
      LODWORD(v244) = *(_DWORD *)(v244 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v242;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v306 = v243;
    WORD4(v306) = 1024;
    *(_DWORD *)((char *)&v306 + 10) = v244;
    _os_log_error_impl(&dword_196BCC000, v108, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it was handled by content filter", buf, 0x26u);
  }
  v111 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), v266);
  v112 = v111;
  if (v111)
    CFRetain(*(CFTypeRef *)(v111 + 8));
  v281 = 0;
  v286[0] = 0;
  v287 = 0;
  buf[0] = 0;
  buf[16] = 0;
  WebKit::WebPageProxy::receivedPolicyDecision(a1, (WTF::StringImpl *)2, v112, &v281, &v288, 0, (uint64_t)v286, (__int16 *)buf, a5);
  if (buf[16] && *(_QWORD *)&buf[8])
  {
    if (**(_DWORD **)&buf[8] == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&buf[8], v113);
    else
      **(_DWORD **)&buf[8] -= 2;
  }
  if (!v287)
    goto LABEL_255;
  v223 = (const char ***)v286;
LABEL_254:
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v223);
LABEL_255:
  if (v112)
    CFRelease(*(CFTypeRef *)(v112 + 8));
LABEL_257:
  v224 = v288;
  v288 = 0;
  if (v224)
    CFRelease(*(CFTypeRef *)(v224 + 8));
  v225 = v291;
  v291 = 0;
  v59 = v277;
  if (v225)
    CFRelease(*(CFTypeRef *)(v225 + 8));
  if (v97)
    CFRelease(*(CFTypeRef *)(v97 + 8));
  if (v268)
    CFRelease(*(CFTypeRef *)(v268 + 8));
  if ((v110 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v90 + 8));
  if (v109)
    CFRelease(*(CFTypeRef *)(v275 + 8));
  CFRelease(*((CFTypeRef *)v37 + 1));
LABEL_270:
  if (v294)
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v292, (uint64_t)v57, v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 1592))(v59);
  v226 = v296;
  v296 = 0;
  if (v226)
    CFRelease(v226);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v295);
  v227 = v298;
  v298 = 0;
  if (v227)
    CFRelease(v227);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v297);
  v229 = v334;
  v334 = 0;
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
      WTF::StringImpl::destroy(v229, v228);
    else
      *(_DWORD *)v229 -= 2;
  }
  if (v333 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v333])(buf, v332);
  v333 = -1;
  v230 = cf;
  cf = 0;
  if (v230)
    CFRelease(v230);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v330);
  v232 = v342;
  v342 = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v231);
    else
      *(_DWORD *)v232 -= 2;
  }
  if (v341 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v341])(buf, v340);
  v341 = -1;
  v233 = v339;
  v339 = 0;
  if (v233)
    CFRelease(v233);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v338);
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v3 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 312);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v6])(&v16, a1 + 288);
  *(_DWORD *)(a1 + 312) = -1;
  v7 = *(const void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 88));
  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](a1 + 56, v8);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  return a1;
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(uint64_t a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  _BYTE v17[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(a3 + 2104), *(_QWORD *)(a3 + 2112));
  v9 = v8;
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v8 + 8));
    goto LABEL_3;
  }
  if (*(_BYTE *)(a3 + 1856))
  {
    WebKit::WebPageProxy::didCreateMainFrame(a1, a2, *(_QWORD *)(a3 + 2104), *(_QWORD *)(a3 + 2112));
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a3 + 2136))
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_14:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)v17 = 136315138;
    *(_QWORD *)&v17[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(IPC::Connection &, NavigationAct"
                         "ionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7321: Invalid message dispatched %s";
LABEL_16:
    _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, v16, v17, 0xCu);
    goto LABEL_14;
  }
  v13 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(a3 + 2120), *(_QWORD *)(a3 + 2128));
  if (!v13)
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_14;
    *(_DWORD *)v17 = 136315138;
    *(_QWORD *)&v17[4] = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSync(IPC::Connection &, NavigationAct"
                         "ionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7323: Invalid message dispatched %s";
    goto LABEL_16;
  }
  v14 = v13;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  WebKit::WebFrameProxy::didCreateSubframe(v14, *(_QWORD *)(a3 + 2104), *(_QWORD *)(a3 + 2112), (WTF::StringImpl *)(a3 + 2096));
  CFRelease(*(CFTypeRef *)(v14 + 8));
LABEL_3:
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 16);
  v11 = (unsigned int *)(v10 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)v17 = v10;
  WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(a1, (WebKit::WebProcessProxy **)v17, (uint64_t *)a3, a4);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
  CFRelease(*(CFTypeRef *)(v9 + 8));
}

void WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  WTF *v20;
  __int128 buf;
  char v22;
  char v23;
  _BYTE v24[112];
  char v25;
  const char **v26;
  char v27;
  char v28;
  WTF::StringImpl *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = WebKit::WebFrameProxy::webFrame(a3[263], a3[264]);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v11 = *a4;
    *a4 = 0;
    *((_QWORD *)v10 + 1) = v11;
    v20 = v10;
    v12 = a3[269];
    *(_DWORD *)v10 = 2;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E34D5178;
    v13[1] = v10;
    v19 = 0;
    *(_QWORD *)&buf = v13;
    WebKit::WebPageProxy::decidePolicyForNavigationAction(a1, a2, v9, (uint64_t)a3, (uint64_t *)&buf);
    if ((_QWORD)buf)
      (*(void (**)(_QWORD))(*(_QWORD *)buf + 8))(buf);
    WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(&v19, v14);
    LOWORD(buf) = *(_WORD *)(a1 + 1256);
    BYTE2(buf) = 0;
    *((_QWORD *)&buf + 1) = v12;
    v22 = 0;
    v23 = 0;
    v24[0] = 0;
    v25 = 0;
    LOBYTE(v26) = 0;
    v27 = 0;
    v28 = 0;
    v30 = 0;
    v16 = *((_QWORD *)v10 + 1);
    if (v16)
    {
      *((_QWORD *)v10 + 1) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, &buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      if (v30)
      {
        v17 = v29;
        v29 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
    if (v27)
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
    if (v25)
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v24, v15);
    WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(&v20, v15);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(Ref<WebProces"
                                      "sProxy> &&, NavigationActionData &&, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7334: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  }
}

WTF **WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::decidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::WebProcessProxy *v16;
  const WTF::URL *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::URL *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  char v27;
  CFTypeRef *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  CFTypeRef v43;
  NSObject *v45;
  NSObject *v46;
  WTF::StringImpl *v47[5];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  CFTypeRef v51[24];
  CFTypeRef cf;
  _BYTE buf[192];
  CFTypeRef v54;
  __int16 v55;
  CFTypeRef v56[24];
  CFTypeRef v57;
  _BYTE v58[24];
  int v59;
  WTF::StringImpl *v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v55 = *(_WORD *)(a3 + 1856);
  WebCore::ResourceRequest::ResourceRequest(v56, (const WebCore::ResourceRequest *)(a3 + 1864));
  v58[0] = 0;
  v59 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v58, a3 + 2064);
  v12 = *(WTF::StringImpl **)(a3 + 2096);
  if (v12)
    *(_DWORD *)v12 += 2;
  v60 = v12;
  v13 = *(_OWORD *)(a3 + 2104);
  v62[0] = *(_OWORD *)(a3 + 2120);
  *(_OWORD *)((char *)v62 + 14) = *(_OWORD *)(a3 + 2134);
  v61 = v13;
  WebCore::ResourceRequest::ResourceRequest(v51, (const WebCore::ResourceRequest *)(a3 + 2360));
  v14 = WebKit::WebFrameProxy::webFrame(v61, *((uint64_t *)&v61 + 1));
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = *(WebKit::WebProcessProxy **)(a1 + 208);
    v17 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v51);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v16, v17))
    {
      CFRetain(*(CFTypeRef *)(a1 + 8));
      *(_QWORD *)buf = a1;
      v18 = API::Object::newObject(0x140uLL, 60);
      API::FrameInfo::FrameInfo(v18, (uint64_t)&v55, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
      v19 = *(_QWORD *)(a1 + 208);
      v48 = *(_OWORD *)(a3 + 8);
      v49 = *(_QWORD *)(a3 + 24);
      WebKit::WebProcessProxy::userInitiatedActivity(v19, (uint64_t)&v48, &v50);
      v20 = *(_QWORD *)(a1 + 280);
      if (v20)
      {
        v21 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v20 + 48));
        v23 = v22;
        v24 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v51);
        v25 = (unsigned __int8 *)WTF::URL::host(v24);
        v27 = !WTF::operator==(v21, v23, v25, v26);
      }
      else
      {
        v27 = 0;
      }
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (const WebCore::ResourceRequest *)v51);
      v47[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v47);
      v28 = (CFTypeRef *)API::Object::newObject(0xB40uLL, 77);
      API::NavigationAction::NavigationAction((uint64_t)v28, a3, v18, 0, a4, (uint64_t)buf, (uint64_t)v47, v27, &v50, 0);
      v30 = v47[0];
      v47[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v54;
      v54 = 0;
      if (v31)
        CFRelease(v31);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      CFRetain(*(CFTypeRef *)(a1 + 8));
      v32 = *a5;
      *a5 = 0;
      CFRetain(v28[1]);
      v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v33 = &off_1E34D51A0;
      *((_QWORD *)v33 + 1) = a1;
      *((_QWORD *)v33 + 2) = a1;
      *((_QWORD *)v33 + 3) = v32;
      *((_QWORD *)v33 + 4) = v28;
      v47[0] = v33;
      v34 = WebKit::WebFrameProxy::setUpPolicyListenerProxy(v15, (uint64_t *)v47, 0, 0, 0);
      CFRetain(*(CFTypeRef *)(v34 + 8));
      *(_QWORD *)buf = v34;
      if (v47[0])
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47[0] + 8))(v47[0]);
      v35 = *(_QWORD *)(a1 + 64);
      if (v35)
      {
        CFRetain(v28[1]);
        v47[0] = (WTF::StringImpl *)v28;
        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, CFTypeRef *, _DWORD **, _BYTE *))(*(_QWORD *)v35 + 24))(v35, a1, v15, v47, v51, a4, buf);
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 72);
        CFRetain(v28[1]);
        v47[0] = (WTF::StringImpl *)v28;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v36 + 296))(v36, a1, v47, buf);
      }
      v37 = v47[0];
      v47[0] = 0;
      if (v37)
        CFRelease(*((CFTypeRef *)v37 + 1));
      v38 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v38)
        CFRelease(*(CFTypeRef *)(v38 + 8));
      CFRelease(v28[1]);
      v39 = v50;
      v50 = 0;
      if (v39)
        CFRelease(*(CFTypeRef *)(v39 + 8));
      if (v18)
        CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      v46 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &, NavigationActi"
                             "onData &&, const String &, CompletionHandler<void (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_196BCC000, v46, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7370: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v45 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &, NavigationAction"
                           "Data &&, const String &, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v45, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7369: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  v40 = cf;
  cf = 0;
  if (v40)
    CFRelease(v40);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v51);
  v42 = v60;
  v60 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  if (v59 != -1)
    ((void (*)(CFTypeRef *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v59])(v51, v58);
  v59 = -1;
  v43 = v57;
  v57 = 0;
  if (v43)
    CFRelease(v43);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v56);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
}

void WebKit::WebPageProxy::decidePolicyForResponse(uint64_t a1, WebKit::AuxiliaryProcessProxy *a2, uint64_t *a3, uint64_t a4, uint64_t a5, WebCore::ResourceRequestBase *a6, unsigned int a7, _DWORD **a8, __int16 a9, uint64_t *a10)
{
  uint64_t v18;
  uint64_t v19;
  const IPC::Connection *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  _BYTE buf[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v18 = WebKit::WebFrameProxy::webFrame(a3[31], a3[32]);
  if (v18)
  {
    v19 = v18;
    CFRetain(*(CFTypeRef *)(v18 + 8));
    v21 = WebKit::AuxiliaryProcessProxy::fromConnection(a2, v20);
    if (v21 && (v22 = v21, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21) == 2))
    {
      v24 = (unsigned int *)(v22 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 + 1, v24));
      *(_QWORD *)buf = v22;
      LOWORD(v29) = a9;
      WebKit::WebPageProxy::decidePolicyForResponseShared(a1, (WebKit::WebProcessProxy **)buf, v23, a3, a4, a5, a6, a7, a8, v29, a10);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
    }
    else
    {
      v27 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponse(IPC::Connection &, FrameInfoData &&, uin"
                             "t64_t, const ResourceResponse &, const ResourceRequest &, BOOL, const String &, BOOL, WebCo"
                             "re::CrossOriginOpenerPolicyValue, CompletionHandler<void (PolicyDecision &&)> &&)";
        _os_log_fault_impl(&dword_196BCC000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7399: Invalid message dispatched %s", buf, 0xCu);
      }
      *((_BYTE *)a2 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  else
  {
    v28 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponse(IPC::Connection &, FrameInfoData &&, uint6"
                           "4_t, const ResourceResponse &, const ResourceRequest &, BOOL, const String &, BOOL, WebCore::"
                           "CrossOriginOpenerPolicyValue, CompletionHandler<void (PolicyDecision &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7397: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::decidePolicyForResponseShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, WebCore::ResourceRequestBase *a7, unsigned int a8, _DWORD **a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebProcessProxy *v21;
  const WTF::URL *v22;
  WebKit::WebProcessProxy *v23;
  const WTF::URL *v24;
  uint64_t v25;
  const WebCore::ResourceRequest *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  _DWORD *v30;
  const WebCore::ResourceResponse *v31;
  WebCore::SecurityOrigin *v32;
  const WTF::URL *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WebKit::WebProcessProxy *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFTypeRef *v49;
  CFTypeRef v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  NSObject *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  _BYTE buf[24];
  __int128 v69;
  uint64_t v70;
  CFTypeRef v71[24];
  CFTypeRef cf;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a1 + 40);
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 1584))(v18);
  v19 = WebKit::WebFrameProxy::webFrame(a4[31], a4[32]);
  if (v19)
  {
    v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    v21 = *a2;
    v22 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a7);
    if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v21, v22))
    {
      v23 = *a2;
      v24 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a6);
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, v23, v24))
      {
        if (a5
          && (v25 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a5)) != 0)
        {
          v26 = a7;
          v63 = v25;
          CFRetain(*(CFTypeRef *)(v25 + 8));
        }
        else
        {
          v26 = a7;
          v63 = 0;
        }
        CFRetain(*(CFTypeRef *)(a1 + 8));
        *(_QWORD *)buf = a1;
        v27 = API::Object::newObject(0x140uLL, 60);
        API::FrameInfo::FrameInfo(v27, (uint64_t)a4, (uint64_t *)buf);
        v28 = API::Object::newObject(0x1F0uLL, 79);
        *(_QWORD *)v28 = off_1E34CC2A8;
        WebKit::InitializeWebKit2((WebKit *)v28);
        *(_QWORD *)v28 = &off_1E34D51C8;
        CFRetain(*(CFTypeRef *)(v27 + 8));
        *(_QWORD *)(v28 + 16) = v27;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v28 + 24), v26);
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v28 + 224), (const WebCore::ResourceResponseBase *)a6);
        v29 = *(const void **)(a6 + 240);
        *(_QWORD *)(v28 + 464) = v29;
        if (v29)
          CFRetain(v29);
        *(_BYTE *)(v28 + 472) = *(_BYTE *)(a6 + 248);
        *(_BYTE *)(v28 + 480) = a8;
        v30 = *a9;
        if (*a9)
          *v30 += 2;
        *(_QWORD *)(v28 + 488) = v30;
        v67 = v28;
        CFRelease(*(CFTypeRef *)(v27 + 8));
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
        WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(a4 + 26));
        WebCore::obtainCrossOriginOpenerPolicy((WebCore *)a6, v31);
        v32 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a6);
        WebCore::SecurityOrigin::create(v32, v33);
        v35 = WebCore::coopValuesRequireBrowsingContextGroupSwitch();
        v36 = v65;
        v65 = 0;
        if (v36)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v36, v34);
        v37 = *(WTF::StringImpl **)&buf[16];
        *(_QWORD *)&buf[16] = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v34);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = *(WTF::StringImpl **)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v34);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v66;
        v66 = 0;
        if (v39)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v39, v34);
          if (v35)
          {
LABEL_29:
            v40 = *(_QWORD *)(a1 + 288);
            *(_QWORD *)(a1 + 288) = 0;
            if (v40)
              CFRelease(*(CFTypeRef *)(v40 + 8));
          }
        }
        else if (v35)
        {
          goto LABEL_29;
        }
        *(_QWORD *)buf = a1;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        v41 = *a11;
        *a11 = 0;
        *(_QWORD *)&buf[8] = a1;
        *(_QWORD *)&buf[16] = v41;
        *(_QWORD *)&v69 = v63;
        v42 = *a2;
        v43 = (unsigned int *)((char *)*a2 + 16);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
        *((_QWORD *)&v69 + 1) = v42;
        CFRetain(*(CFTypeRef *)(v67 + 8));
        v70 = v67;
        WebCore::ResourceRequest::ResourceRequest(v71, v26);
        v45 = WTF::fastMalloc((WTF *)0x100);
        *(_QWORD *)v45 = off_1E34D51F0;
        *(_QWORD *)(v45 + 8) = *(_QWORD *)buf;
        *(_QWORD *)(v45 + 16) = *(_QWORD *)&buf[8];
        v46 = *(_QWORD *)&buf[16];
        *(_OWORD *)&buf[8] = 0u;
        *(_QWORD *)(v45 + 24) = v46;
        *(_QWORD *)(v45 + 32) = v69;
        v47 = *((_QWORD *)&v69 + 1);
        v69 = 0u;
        *(_QWORD *)(v45 + 40) = v47;
        v48 = v70;
        v70 = 0;
        *(_QWORD *)(v45 + 48) = v48;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v45 + 56), (const WebCore::ResourceRequest *)v71);
        v65 = (WTF *)v45;
        v49 = (CFTypeRef *)WebKit::WebFrameProxy::setUpPolicyListenerProxy(v20, (uint64_t *)&v65, 0, 0, 0);
        CFRetain(v49[1]);
        v66 = (WTF *)v49;
        if (v65)
          (*(void (**)(WTF *))(*(_QWORD *)v65 + 8))(v65);
        v50 = cf;
        cf = 0;
        if (v50)
          CFRelease(v50);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v71);
        v51 = v70;
        v70 = 0;
        if (v51)
          CFRelease(*(CFTypeRef *)(v51 + 8));
        v52 = *((_QWORD *)&v69 + 1);
        *((_QWORD *)&v69 + 1) = 0;
        if (v52)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v52 + 16));
        v53 = v69;
        *(_QWORD *)&v69 = 0;
        if (v53)
          CFRelease(*(CFTypeRef *)(v53 + 8));
        v54 = *(_QWORD *)&buf[16];
        *(_QWORD *)&buf[16] = 0;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        v55 = *(_QWORD *)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        if (v55)
          CFRelease(*(CFTypeRef *)(v55 + 8));
        v56 = *(_QWORD *)(a1 + 64);
        if (v56)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const WebCore::ResourceRequest *, _QWORD, WTF **))(*(_QWORD *)v56 + 32))(v56, a1, v20, a6, v26, a8, &v66);
        else
          (*(void (**)(_QWORD, uint64_t, uint64_t *, WTF **))(**(_QWORD **)(a1 + 72) + 304))(*(_QWORD *)(a1 + 72), a1, &v67, &v66);
        v57 = v66;
        v66 = 0;
        if (v57)
          CFRelease(*((CFTypeRef *)v57 + 1));
        v58 = v67;
        v67 = 0;
        if (v58)
          CFRelease(*(CFTypeRef *)(v58 + 8));
        goto LABEL_54;
      }
      v61 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_64:
        *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
LABEL_54:
        CFRelease(*(CFTypeRef *)(v20 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdentif"
                           "ier, FrameInfoData &&, uint64_t, const ResourceResponse &, const ResourceRequest &, BOOL, con"
                           "st String &, BOOL, WebCore::CrossOriginOpenerPolicyValue, CompletionHandler<void (PolicyDecision &&)> &&)";
      v62 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7410: Invalid message dispatched %s";
    }
    else
    {
      v61 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_64;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdentif"
                           "ier, FrameInfoData &&, uint64_t, const ResourceResponse &, const ResourceRequest &, BOOL, con"
                           "st String &, BOOL, WebCore::CrossOriginOpenerPolicyValue, CompletionHandler<void (PolicyDecision &&)> &&)";
      v62 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7409: Invalid message dispatched %s";
    }
    _os_log_fault_impl(&dword_196BCC000, v61, OS_LOG_TYPE_FAULT, v62, buf, 0xCu);
    goto LABEL_64;
  }
  v60 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::decidePolicyForResponseShared(Ref<WebProcessProxy> &&, PageIdentifie"
                         "r, FrameInfoData &&, uint64_t, const ResourceResponse &, const ResourceRequest &, BOOL, const S"
                         "tring &, BOOL, WebCore::CrossOriginOpenerPolicyValue, CompletionHandler<void (PolicyDecision &&)> &&)";
    _os_log_fault_impl(&dword_196BCC000, v60, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7408: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
}

void WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(uint64_t a1, uint64_t a2, int a3, WTF::ASCIICaseInsensitiveHash **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef *v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const WTF::URL *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE buf[12];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), a2);
    v13 = v12;
    if (v12)
    {
      CFRetain(*(CFTypeRef *)(v12 + 8));
      v14 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
LABEL_6:
  v15 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(v16 + 744);
    v18 = *(_QWORD *)(v16 + 1896);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v19)
      LODWORD(v19) = *(_DWORD *)(v19 + 108);
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = a1;
    v50 = 2048;
    v51 = v17;
    v52 = 2048;
    v53 = v18;
    v54 = 1024;
    v55 = v19;
    v56 = 1024;
    v57 = a3 == 2;
    v58 = 2048;
    v59 = v13;
    v60 = 2048;
    v61 = a5;
    _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation: Process-swapping due to Cross-Origin-Opener-Policy, newProcessIsCrossOriginIsolated=%d, navigation=%p existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x40u);
  }
  if (v14)
  {
    v20 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 1120);
    if (v21)
      v22 = *(_QWORD *)(v21 + 40) + 16;
    else
      v22 = a1 + 208;
    v23 = *(unsigned __int8 *)(*(_QWORD *)v22 + 779);
    if (a3 == 2)
    {
      v24 = v23 != 0;
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
      if (v25)
        v26 = v25 - 16;
      else
        v26 = 0;
      CFRetain(*(CFTypeRef *)(v26 + 8));
      v27 = *(CFTypeRef **)(a1 + 264);
      CFRetain(v27[1]);
      WebKit::WebProcessPool::createNewWebProcess(v26, (WebKit::WebsiteDataStore *)v27, v24, 0, 1, (unsigned int **)buf);
      v28 = *(_QWORD *)buf;
      CFRelease(v27[1]);
      CFRelease(*(CFTypeRef *)(v26 + 8));
    }
    else
    {
      v47 = a5;
      v29 = v23 != 0;
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
      if (v30)
        v31 = v30 - 16;
      else
        v31 = 0;
      CFRetain(*(CFTypeRef *)(v31 + 8));
      v32 = *(_QWORD *)(a1 + 264);
      CFRetain(*(CFTypeRef *)(v32 + 8));
      v33 = *(_QWORD *)(a1 + 48);
      CFRetain(*(CFTypeRef *)(v33 + 8));
      WebKit::WebProcessPool::processForRegistrableDomain(v31, v32, a4, v29, (WebKit::WebPreferences **)v33, (unsigned int **)buf);
      v28 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      CFRelease(*(CFTypeRef *)(v33 + 8));
      CFRelease(*(CFTypeRef *)(v32 + 8));
      if (v30)
        CFRelease(*(CFTypeRef *)(v31 + 8));
      a5 = v47;
    }
    v34 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v13 + 232));
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v34);
    v35 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
    v36 = (unsigned int *)(v35 + 16);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v38 = *a6;
    *a6 = 0;
    if (v28)
    {
      v39 = (unsigned int *)(v28 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
    v41 = *(_QWORD *)(v28 + 1016);
    if (v41)
    {
      v42 = *(_QWORD **)v41;
      ++*(_QWORD *)(v41 + 8);
      if (v42)
      {
        if (*v42)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v42 + 16))(*v42, 1);
      }
    }
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v43 = &off_1E34D5218;
    v43[1] = a1;
    v43[2] = a1;
    v43[3] = v38;
    v43[4] = v28;
    v43[5] = v41;
    v43[6] = a5;
    v43[7] = a2;
    v48 = v43;
    WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v35, v28, (WTF::ASCIICaseInsensitiveHash **)buf, 0, (uint64_t *)&v48);
    v44 = (uint64_t)v48;
    v48 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v36);
    v46 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v28 + 16));
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void WebKit::WebPageProxy::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFTypeRef **a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  CFTypeRef *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  _BYTE v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v15 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v15)
  {
    v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    v17 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v17)
    {
      v18 = v17;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      v19 = *(unsigned int *)(a7 + 12);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD **)a7;
        v21 = 16 * v19;
        while ((unint64_t)(*v20 + 1) > 1)
        {
          v20 += 2;
          v21 -= 16;
          if (!v21)
            goto LABEL_7;
        }
        v28 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v31 = 136315138;
          *(_QWORD *)&v31[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdenti"
                               "fier, const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
          _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7496: Invalid message dispatched %s", v31, 0xCu);
        }
        *(_BYTE *)(a2 + 98) = 1;
      }
      else
      {
LABEL_7:
        v22 = *(_QWORD *)(a1 + 96);
        v23 = *(unsigned int **)(a1 + 208);
        v24 = v23 + 4;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v26 = *a8;
        if (v26)
          CFRetain(v26[1]);
        WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v23, (API::Object *)v26, (WebKit **)v31);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 16))(v22, a1, v16, v18, a7, *(_QWORD *)v31, a9);
        v27 = *(_QWORD *)v31;
        *(_QWORD *)v31 = 0;
        if (v27)
          CFRelease(*(CFTypeRef *)(v27 + 8));
        if (v26)
          CFRelease(v26[1]);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v23 + 4);
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      v30 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v31 = 136315138;
        *(_QWORD *)&v31[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdentifi"
                             "er, const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_196BCC000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7493: Invalid message dispatched %s", v31, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  else
  {
    v29 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v31 = 136315138;
      *(_QWORD *)&v31[4] = "void WebKit::WebPageProxy::willSubmitForm(IPC::Connection &, FrameIdentifier, FrameIdentifier"
                           ", const Vector<std::pair<String, String>> &, const UserData &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_196BCC000, v29, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7490: Invalid message dispatched %s", v31, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

unsigned int *WebKit::WebPageProxy::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 208);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = v4;
  result = (unsigned int *)WebKit::WebPageProxy::didNavigateWithNavigationDataShared(a1, (uint64_t)&v8, a2, a3, a4);
  if (v4)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return result;
}

uint64_t WebKit::WebPageProxy::didNavigateWithNavigationDataShared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v28;
  int v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(v11 + 744);
    v13 = *(_QWORD *)(v11 + 1896);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 108);
    v29 = 134218752;
    v30 = (const char *)a1;
    v31 = 2048;
    v32 = v12;
    v33 = 2048;
    v34 = v13;
    v35 = 1024;
    v36 = v14;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didNavigateWithNavigationDataShared:", (uint8_t *)&v29, 0x26u);
  }
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 1584))(v16);
  v17 = WebKit::WebFrameProxy::webFrame(a4, a5);
  if (v17)
  {
    v18 = v17;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    v19 = *(_QWORD *)(v18 + 24);
    if (!v19)
      goto LABEL_23;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = v20 - 16;
    if (!v20)
      v21 = 0;
    if (v21 == a1)
    {
      if (v20)
      {
        if (*(_QWORD *)(v20 + 264) == v18 || (v22 = *(_QWORD *)(v20 + 1104)) != 0 && *(_QWORD *)(v22 + 72) == v18)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), a1, a3);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 512) + 8);
      if (v23)
        v24 = v23 - 16;
      else
        v24 = 0;
      v25 = *(_QWORD *)(v24 + 312);
      CFRetain(*(CFTypeRef *)(v24 + 8));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v24, a1, a3, v18);
      if (v23)
        CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    else
    {
LABEL_23:
      v26 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v29 = 136315138;
        v30 = "void WebKit::WebPageProxy::didNavigateWithNavigationDataShared(Ref<WebProcessProxy> &&, const WebNavigatio"
              "nDataStore &, FrameIdentifier)";
        _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7521: Invalid message dispatched %s", (uint8_t *)&v29, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 144) + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  else
  {
    v28 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v29 = 136315138;
      v30 = "void WebKit::WebPageProxy::didNavigateWithNavigationDataShared(Ref<WebProcessProxy> &&, const WebNavigationD"
            "ataStore &, FrameIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v28, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7520: Invalid message dispatched %s", (uint8_t *)&v29, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 144) + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1592))(v16);
}

unsigned int *WebKit::WebPageProxy::didPerformClientRedirect(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *result;
  WebKit::WebProcessProxy *v9;

  v5 = *(unsigned int **)(a1 + 208);
  v6 = v5 + 4;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v9 = (WebKit::WebProcessProxy *)v5;
  result = (unsigned int *)WebKit::WebPageProxy::didPerformClientRedirectShared(a1, &v9, a2, a3, a4, a5);
  if (v5)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5 + 4);
  return result;
}

uint64_t WebKit::WebPageProxy::didPerformClientRedirectShared(uint64_t a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  int v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  if (*a3 && *((_DWORD *)*a3 + 1) && *a4 && *((_DWORD *)*a4 + 1))
  {
    v14 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v14)
    {
      v15 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          v16 = v17 - 16;
        else
          v16 = 0;
      }
      if (v16 == a1)
      {
        if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a3))
        {
          if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a4))
          {
            v18 = qword_1ECE71320;
            if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *(_QWORD *)(a1 + 32);
              v20 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
              if (v20)
                LODWORD(v20) = *(_DWORD *)(v20 + 108);
              v21 = *(_QWORD *)(v19 + 744);
              v22 = *(_QWORD *)(v19 + 1896);
              v23 = *(_QWORD **)(v15 + 24);
              if (v23)
              {
                v23 = (_QWORD *)v23[1];
                if (v23)
                {
                  if (v23[33] == v15)
                  {
                    LODWORD(v23) = 1;
                  }
                  else
                  {
                    v23 = (_QWORD *)v23[138];
                    if (v23)
                      LODWORD(v23) = v23[9] == v15;
                  }
                }
              }
              v34 = 134219264;
              v35 = (const char *)a1;
              v36 = 2048;
              v37 = v21;
              v38 = 2048;
              v39 = v22;
              v40 = 1024;
              v41 = v20;
              v42 = 2048;
              v43 = a5;
              v44 = 1024;
              v45 = (int)v23;
              _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didPerformClientRedirectShared: frameID=%llu, isMainFrame=%d", (uint8_t *)&v34, 0x36u);
            }
            v24 = *(_QWORD *)(v15 + 24);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
              {
                if (*(_QWORD *)(v25 + 264) == v15
                  || (v26 = *(_QWORD *)(v25 + 1104)) != 0 && *(_QWORD *)(v26 + 72) == v15)
                {
                  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 80)
                                                                                                  + 24))(*(_QWORD *)(a1 + 80), a1, a3, a4);
                  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 72)
                                                                                                  + 48))(*(_QWORD *)(a1 + 72), a1, a3, a4);
                }
              }
            }
            v27 = *((_QWORD *)*a2 + 64);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 8);
              if (v28)
                v29 = v28 - 16;
              else
                v29 = 0;
            }
            else
            {
              v29 = 0;
            }
            CFRetain(*(CFTypeRef *)(v29 + 8));
            (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(**(_QWORD **)(v29 + 312) + 24))(*(_QWORD *)(v29 + 312), v29, a1, a3, a4, v15);
            CFRelease(*(CFTypeRef *)(v29 + 8));
            goto LABEL_38;
          }
          v32 = off_1ECE71C40;
          if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          {
LABEL_48:
            *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
LABEL_38:
            CFRelease(*(CFTypeRef *)(v15 + 8));
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
          }
          v34 = 136315138;
          v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          v33 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7544: Invalid mess"
                "age dispatched %s";
        }
        else
        {
          v32 = off_1ECE71C40;
          if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            goto LABEL_48;
          v34 = 136315138;
          v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          v33 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7543: Invalid mess"
                "age dispatched %s";
        }
      }
      else
      {
        v32 = off_1ECE71C40;
        if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          goto LABEL_48;
        v34 = 136315138;
        v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const S"
              "tring &, FrameIdentifier)";
        v33 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7542: Invalid message dispatched %s";
      }
      _os_log_fault_impl(&dword_196BCC000, v32, OS_LOG_TYPE_FAULT, v33, (uint8_t *)&v34, 0xCu);
      goto LABEL_48;
    }
    v31 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v34 = 136315138;
      v35 = "void WebKit::WebPageProxy::didPerformClientRedirectShared(Ref<WebProcessProxy> &&, const String &, const Str"
            "ing &, FrameIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7541: Invalid message dispatched %s", (uint8_t *)&v34, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
}

unsigned int *WebKit::WebPageProxy::didPerformServerRedirect(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *result;
  WebKit::WebProcessProxy *v9;

  v5 = *(unsigned int **)(a1 + 208);
  v6 = v5 + 4;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v9 = (WebKit::WebProcessProxy *)v5;
  result = (unsigned int *)WebKit::WebPageProxy::didPerformServerRedirectShared(a1, &v9, a2, a3, a4, a5);
  if (v5)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5 + 4);
  return result;
}

uint64_t WebKit::WebPageProxy::didPerformServerRedirectShared(uint64_t a1, WebKit::WebProcessProxy **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  int v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 744);
    v15 = *(_QWORD *)(v13 + 1896);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    v33 = 134218752;
    v34 = (const char *)a1;
    v35 = 2048;
    v36 = v14;
    v37 = 2048;
    v38 = v15;
    v39 = 1024;
    v40 = v16;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::didPerformServerRedirect:", (uint8_t *)&v33, 0x26u);
  }
  v17 = *(_QWORD *)(a1 + 40);
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 1584))(v18);
  if (*a3 && *((_DWORD *)*a3 + 1) && *a4 && *((_DWORD *)*a4 + 1))
  {
    v19 = WebKit::WebFrameProxy::webFrame(a5, a6);
    if (v19)
    {
      v20 = v19;
      CFRetain(*(CFTypeRef *)(v19 + 8));
      v21 = *(_QWORD *)(v20 + 24);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
          v21 = v22 - 16;
        else
          v21 = 0;
      }
      if (v21 == a1)
      {
        if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a3))
        {
          if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *a2, a4))
          {
            v23 = *(_QWORD *)(v20 + 24);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 8);
              if (v24)
              {
                if (*(_QWORD *)(v24 + 264) == v20
                  || (v25 = *(_QWORD *)(v24 + 1104)) != 0 && *(_QWORD *)(v25 + 72) == v20)
                {
                  (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 80)
                                                                                                  + 32))(*(_QWORD *)(a1 + 80), a1, a3, a4);
                }
              }
            }
            v26 = *(_QWORD *)(*((_QWORD *)*a2 + 64) + 8);
            if (v26)
              v27 = v26 - 16;
            else
              v27 = 0;
            v28 = *(_QWORD *)(v27 + 312);
            CFRetain(*(CFTypeRef *)(v27 + 8));
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v28 + 32))(v28, v27, a1, a3, a4, v20);
            if (v26)
              CFRelease(*(CFTypeRef *)(v27 + 8));
            goto LABEL_31;
          }
          v31 = off_1ECE71C40;
          if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          {
LABEL_41:
            *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
LABEL_31:
            CFRelease(*(CFTypeRef *)(v20 + 8));
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
          }
          v33 = 136315138;
          v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          v32 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7575: Invalid mess"
                "age dispatched %s";
        }
        else
        {
          v31 = off_1ECE71C40;
          if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            goto LABEL_41;
          v33 = 136315138;
          v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const"
                " String &, FrameIdentifier)";
          v32 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7574: Invalid mess"
                "age dispatched %s";
        }
      }
      else
      {
        v31 = off_1ECE71C40;
        if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
          goto LABEL_41;
        v33 = 136315138;
        v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const S"
              "tring &, FrameIdentifier)";
        v32 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7572: Invalid message dispatched %s";
      }
      _os_log_fault_impl(&dword_196BCC000, v31, OS_LOG_TYPE_FAULT, v32, (uint8_t *)&v33, 0xCu);
      goto LABEL_41;
    }
    v30 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v33 = 136315138;
      v34 = "void WebKit::WebPageProxy::didPerformServerRedirectShared(Ref<WebProcessProxy> &&, const String &, const Str"
            "ing &, FrameIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7571: Invalid message dispatched %s", (uint8_t *)&v33, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
}

uint64_t WebKit::WebPageProxy::didUpdateHistoryTitle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebProcessPool *v21;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = WebKit::WebFrameProxy::webFrame(a5, a6);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = *(_QWORD *)(v15 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v16 = v17 - 16;
      else
        v16 = 0;
    }
    if (v16 == a1)
    {
      if (WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess((WebKit::WebPageProxy *)a1, *(WebKit::WebProcessProxy **)(a1 + 208), a4))
      {
        v18 = *(_QWORD *)(v15 + 24);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            if (*(_QWORD *)(v19 + 264) == v15 || (v20 = *(_QWORD *)(v19 + 1104)) != 0 && *(_QWORD *)(v20 + 72) == v15)
              (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a1, a3, a4);
          }
        }
        v21 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24));
        CFRetain(*((CFTypeRef *)v21 + 1));
        (*(void (**)(_QWORD, WebKit::WebProcessPool *, uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(**((_QWORD **)v21 + 39) + 40))(*((_QWORD *)v21 + 39), v21, a1, a3, a4, v15);
        CFRelease(*((CFTypeRef *)v21 + 1));
      }
      else
      {
        v25 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v26 = 136315138;
          v27 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
          _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7590: Invalid message dispatched %s", (uint8_t *)&v26, 0xCu);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
      }
    }
    else
    {
      v24 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v26 = 136315138;
        v27 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
        _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7588: Invalid message dispatched %s", (uint8_t *)&v26, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v23 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v26 = 136315138;
      v27 = "void WebKit::WebPageProxy::didUpdateHistoryTitle(IPC::Connection &, const String &, const String &, FrameIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7587: Invalid message dispatched %s", (uint8_t *)&v26, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
}

void WebKit::WebPageProxy::createNewPage(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  __int16 v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  int BoolValueForKey;
  uint64_t v28;
  __int128 v29;
  WTF::URL *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::URL *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  void *v41;
  const WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  const WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  CFTypeRef *v79;
  const WTF::StringImpl *v80;
  WebKit::SOAuthorizationCoordinator *v81;
  void *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  _QWORD v103[2];
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _OWORD v116[2];
  __int128 buf;
  WTF::StringImpl *v118;
  __int128 v119;
  __int128 v120;
  CFTypeRef v121[5];
  uint64_t v122[6];
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  __int128 cf;
  _BYTE v136[312];
  char v137;
  _BYTE v138[26];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a4 + 1848))
  {
    v95 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Nav"
                                      "igationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifie"
                                      "r>, std::optional<WebKit::WebPageCreationParameters>)> &&)";
      v96 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7618: Invalid message dispatched %s";
      goto LABEL_96;
    }
LABEL_93:
    *(_BYTE *)(a2 + 98) = 1;
    return;
  }
  v8 = *(_QWORD *)(a4 + 1792);
  if (!v8)
  {
    v95 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Nav"
                                      "igationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifie"
                                      "r>, std::optional<WebKit::WebPageCreationParameters>)> &&)";
      v96 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7619: Invalid message dispatched %s";
      goto LABEL_96;
    }
    goto LABEL_93;
  }
  v11 = *(_QWORD *)(a4 + 1840);
  if (!WebKit::WebFrameProxy::webFrame(v8, *(_QWORD *)(a4 + 1800)))
  {
    v95 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_93;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::createNewPage(IPC::Connection &, WindowFeatures &&, Navig"
                                    "ationActionData &&, CompletionHandler<void (std::optional<WebCore::PageIdentifier>, "
                                    "std::optional<WebKit::WebPageCreationParameters>)> &&)";
    v96 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7620: Invalid message dispatched %s";
LABEL_96:
    _os_log_fault_impl(&dword_196BCC000, v95, OS_LOG_TYPE_FAULT, v96, (uint8_t *)&buf, 0xCu);
    goto LABEL_93;
  }
  v12 = *(_QWORD *)(a1 + 208);
  v13 = (unsigned int *)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  WebKit::WebProcessProxy::webPage(v11, &v115);
  if (v12)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  v97 = API::Object::newObject(0x140uLL, 60);
  API::FrameInfo::FrameInfo(v97, a4 + 1544, &v115);
  v15 = *(_QWORD *)(a1 + 280);
  if (v15)
  {
    v16 = *(WTF::StringImpl **)(v15 + 48);
    if (v16)
      *(_DWORD *)v16 += 2;
    v112 = v16;
    v113 = *(_OWORD *)(v15 + 56);
    v114 = *(_OWORD *)(v15 + 72);
  }
  else
  {
    v112 = 0;
    WTF::URL::invalidate((WTF::URL *)&v112);
  }
  v17 = *(_QWORD *)(v97 + 312);
  if (v17)
  {
    CFRetain(*(CFTypeRef *)(v17 + 8));
    v18 = *(unsigned __int8 *)(v17 + 1288);
    CFRelease(*(CFTypeRef *)(v17 + 8));
    LOWORD(v17) = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)&buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *((_QWORD *)&buf + 1) = a1;
  v19 = v112;
  if (v112)
    *(_DWORD *)v112 += 2;
  v118 = v19;
  v119 = v113;
  v120 = v114;
  WebCore::ResourceRequest::ResourceRequest(v121, (const WebCore::ResourceRequest *)(a4 + 2360));
  v20 = *a5;
  *a5 = 0;
  *((_QWORD *)&cf + 1) = v20;
  v136[0] = 0;
  v137 = 0;
  if (*(_BYTE *)(a4 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v136, (const WebCore::PrivateClickMeasurement *)(a4 + 544));
    v137 = 1;
  }
  *(_WORD *)v138 = v18 | ((_WORD)v17 << 8);
  *(_OWORD *)&v138[8] = *(_OWORD *)(a4 + 1792);
  v138[24] = *(_BYTE *)(a4 + 348);
  if (*((_BYTE *)a3 + 55) && *((_BYTE *)a3 + 54))
  {
    v21 = 1;
  }
  else
  {
    v21 = *((_BYTE *)a3 + 57);
    if (v21)
      v21 = *((_BYTE *)a3 + 56) != 0;
  }
  v138[25] = v21;
  v22 = *(_QWORD *)(a1 + 208);
  v23 = (unsigned int *)(v22 + 16);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v109 = *(_OWORD *)(a4 + 8);
  v110 = *(_QWORD *)(a4 + 24);
  WebKit::WebProcessProxy::userInitiatedActivity(v22, (uint64_t)&v109, &v111);
  if (v111)
  {
    v25 = *(_QWORD *)(a1 + 224);
    CFRetain(*(CFTypeRef *)(v25 + 8));
    {
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v25 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, v26);
    CFRelease(*(CFTypeRef *)(v25 + 8));
    if (BoolValueForKey)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
      v29 = *(_OWORD *)(a4 + 48);
      v116[0] = *(_OWORD *)(a4 + 32);
      v116[1] = v29;
      WebKit::WebProcessProxy::consumeIfNotVerifiablyFromUIProcess(v22, v28, v111, (uint64_t)v116);
    }
  }
  v30 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v97 + 24));
  v31 = (unsigned __int8 *)WTF::URL::host(v30);
  v33 = v32;
  v34 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 2360));
  v35 = (unsigned __int8 *)WTF::URL::host(v34);
  LOBYTE(v31) = !WTF::operator==(v31, v33, v35, v36);
  v107 = 0;
  v98 = 0;
  WTF::URL::invalidate((WTF::URL *)&v98);
  v37 = API::Object::newObject(0xB40uLL, 77);
  v108 = API::NavigationAction::NavigationAction(v37, a4, v97, 0, &v107, a4 + 2360, (uint64_t)&v98, (char)v31, &v111, 0);
  v39 = v98;
  v98 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  API::PageConfiguration::copy(*(API::PageConfiguration **)(a1 + 48), (API::PageConfiguration **)&v107);
  v40 = v107;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v43 = *(unsigned int **)(a1 + 24);
  if (v43)
  {
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
  }
  v45 = (unsigned int *)*((_QWORD *)v40 + 17);
  *((_QWORD *)v40 + 17) = v43;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v41);
    }
  }
  v48 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v48 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v42))
  {
    v49 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(a4 + 1792), *(_QWORD *)(a4 + 1800));
    if (v49)
    {
      v50 = v49;
      CFRetain(*(CFTypeRef *)(v49 + 8));
      v51 = v107;
      v52 = *(_QWORD *)(*(_QWORD *)(v50 + 32) + 16);
      v53 = (unsigned int *)(v52 + 16);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      v55 = *((_QWORD *)v51 + 18);
      *((_QWORD *)v51 + 18) = v52;
      if (v55)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v55 + 16));
      CFRelease(*(CFTypeRef *)(v50 + 8));
    }
  }
  v56 = WTF::fastMalloc((WTF *)0x270);
  *(_QWORD *)v56 = off_1E34D5240;
  *(_QWORD *)(v56 + 8) = buf;
  v57 = *((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  *(_QWORD *)(v56 + 16) = v57;
  WTF::URL::URL(v56 + 24, (uint64_t *)&v118);
  WTF::URL::URL(v56 + 64, (uint64_t *)v121);
  WTF::URL::URL(v56 + 104, v122);
  *(_QWORD *)(v56 + 144) = v122[5];
  *(_QWORD *)(v56 + 152) = v123;
  v58 = *((_QWORD *)&v123 + 1);
  v123 = 0u;
  *(_QWORD *)(v56 + 160) = v58;
  v59 = v124;
  v124 = 0;
  *(_QWORD *)(v56 + 168) = v59;
  v60 = v125;
  v125 = 0;
  *(_QWORD *)(v56 + 176) = v60;
  v61 = v126;
  v126 = 0;
  *(_QWORD *)(v56 + 184) = v61;
  v62 = v127;
  v127 = 0;
  *(_QWORD *)(v56 + 192) = v62;
  v63 = v128;
  v128 = 0;
  *(_QWORD *)(v56 + 200) = v63;
  LODWORD(v62) = v129;
  *(_BYTE *)(v56 + 212) = v130;
  *(_DWORD *)(v56 + 208) = v62;
  *(_QWORD *)(v56 + 216) = v131;
  v64 = *((_QWORD *)&v131 + 1);
  v131 = 0u;
  *(_QWORD *)(v56 + 224) = v64;
  v65 = v132;
  v132 = 0;
  *(_QWORD *)(v56 + 232) = v65;
  v66 = v133;
  *(_BYTE *)(v56 + 248) = v134;
  *(_QWORD *)(v56 + 240) = v66;
  *(_QWORD *)(v56 + 256) = cf;
  v67 = *((_QWORD *)&cf + 1);
  cf = 0u;
  *(_QWORD *)(v56 + 264) = v67;
  *(_BYTE *)(v56 + 272) = 0;
  *(_BYTE *)(v56 + 584) = 0;
  if (v137)
  {
    std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(v56 + 272, (uint64_t)v136);
    *(_BYTE *)(v56 + 584) = 1;
  }
  v68 = *(_OWORD *)v138;
  *(_OWORD *)(v56 + 602) = *(_OWORD *)&v138[10];
  *(_OWORD *)(v56 + 592) = v68;
  v106 = v56;
  v98 = (WTF::StringImpl *)a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v69 = a3[1];
  v100 = *a3;
  v101 = v69;
  v102[0] = a3[2];
  *(_OWORD *)((char *)v102 + 10) = *(__int128 *)((char *)a3 + 42);
  v70 = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 8) = 0;
  v71 = v107;
  v104 = v107;
  v72 = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 9) = 0;
  v73 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v73 = off_1E34D5268;
  *(_QWORD *)(v73 + 8) = a1;
  *(_QWORD *)(v73 + 16) = a1;
  v75 = v100;
  v76 = v101;
  v77 = v102[0];
  *(_OWORD *)(v73 + 66) = *(_OWORD *)((char *)v102 + 10);
  *(_OWORD *)(v73 + 56) = v77;
  *(_OWORD *)(v73 + 40) = v76;
  *(_OWORD *)(v73 + 24) = v75;
  v99 = 0;
  v103[0] = 0;
  *(_QWORD *)(v73 + 88) = v70;
  v103[1] = 0;
  *(_QWORD *)(v73 + 96) = v72;
  *(_QWORD *)(v73 + 104) = v71;
  v105 = v73;
  v78 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v78 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v74))
  {
    v79 = *(CFTypeRef **)(a1 + 264);
    CFRetain(v79[1]);
    v81 = WebKit::WebsiteDataStore::soAuthorizationCoordinator((WebKit::WebsiteDataStore *)v79, (const WebKit::WebPageProxy *)a1, v80);
    WebKit::SOAuthorizationCoordinator::tryAuthorize((uint64_t)v81, &v108, a1, &v106, &v105);
    CFRelease(v79[1]);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v105 + 16))(v105, &v108, &v106);
  }
  v83 = v105;
  v105 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v104 = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v103, v82);
  v85 = v99;
  v99 = 0;
  if (v85)
    CFRelease(*(CFTypeRef *)(v85 + 8));
  v86 = v106;
  v106 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = v108;
  v108 = 0;
  if (v87)
    CFRelease(*(CFTypeRef *)(v87 + 8));
  v88 = v111;
  v111 = 0;
  if (v88)
    CFRelease(*(CFTypeRef *)(v88 + 8));
  if (v22)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v23);
  if (v137)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v136, v84);
  v89 = *((_QWORD *)&cf + 1);
  *((_QWORD *)&cf + 1) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = (const void *)cf;
  *(_QWORD *)&cf = 0;
  if (v90)
    CFRelease(v90);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v121);
  v92 = v118;
  v118 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v91);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = *((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (v93)
    CFRelease(*(CFTypeRef *)(v93 + 8));
  v94 = v112;
  v112 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v91);
    else
      *(_DWORD *)v94 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v97 + 8));
  if (v115)
    CFRelease(*(CFTypeRef *)(v115 + 8));
}

unsigned int *WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 6, (uint64_t)(a2 + 4));
  v20 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::exitFullscreenImmediately(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::VideoPresentationManagerProxy *v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 360);
  if (v2)
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 16))(*(_QWORD *)(v2 + 32));
  v3 = *(WebKit::VideoPresentationManagerProxy **)(v1 + 384);
  if (v3)
  {
    ++*((_DWORD *)v3 + 4);
    this = WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(v3);
    if (*((_DWORD *)v3 + 4) == 1)
      return (*(uint64_t (**)(WebKit::VideoPresentationManagerProxy *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 4);
  }
  return this;
}

_QWORD *WebKit::WebPageProxy::enterFullscreen(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::PlaybackSessionInterfaceIOS *v3;
  _QWORD *v4;

  v1 = this[47];
  if (v1)
  {
    ++*(_DWORD *)(v1 + 16);
    v2 = *(_QWORD *)(v1 + 48);
    if (v2)
    {
      v3 = (WebCore::PlaybackSessionInterfaceIOS *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(v1, v2)[1];
      ++*((_DWORD *)v3 + 4);
      this = (_QWORD *)WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(v3);
      if (this)
      {
        v4 = this;
        (*(void (**)(_QWORD *))(*this + 48))(this);
        (*(void (**)(_QWORD *))(*v4 + 192))(v4);
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 56))(v4);
      }
      if (*((_DWORD *)v3 + 4) == 1)
        this = (_QWORD *)(*(uint64_t (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)v3 + 8))(v3);
      else
        --*((_DWORD *)v3 + 4);
    }
    if (*(_DWORD *)(v1 + 16) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    else
      --*(_DWORD *)(v1 + 16);
  }
  return this;
}

void WebKit::WebPageProxy::didEnterFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1824))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), a1);
  v6 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 2472))
    *(_BYTE *)(v6 + 2472) = 1;
  *(_QWORD *)(v6 + 2464) = a2;
  WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)a1);
}

void WebKit::WebPageProxy::didExitFullscreen(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_BYTE **)(a1 + 1248);
  if (v4)
    WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1832))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 48))(*(_QWORD *)(a1 + 104), a1);
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v7 + 2472))
    v8 = *(_QWORD *)(v7 + 2464) == a2;
  else
    v8 = 0;
  if (v8)
  {
    *(_BYTE *)(v7 + 2472) = 0;
    WebKit::WebPageProxy::updateFullscreenVideoTextRecognition((WebKit::WebPageProxy *)a1);
  }
}

uint64_t WebKit::WebPageProxy::runModalJavaScriptDialog(uint64_t a1, uint64_t *a2, __int16 *a3, _DWORD **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v46;
  unsigned int *v47;
  __int16 v48;
  uint64_t v49[5];
  uint64_t v50[5];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;
  __int128 v68;
  _OWORD v69[2];
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v10 = *(unsigned int **)(a1 + 24);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v47 = v10;
  v48 = *a3;
  WTF::URL::URL((uint64_t)v49, (uint64_t *)a3 + 1);
  WTF::URL::URL((uint64_t)v50, (uint64_t *)a3 + 6);
  v51 = *((_QWORD *)a3 + 11);
  v12 = *((_OWORD *)a3 + 6);
  *((_OWORD *)a3 + 6) = 0u;
  v52 = v12;
  *(_QWORD *)&v12 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 14) = 0;
  v53 = v12;
  v13 = *((_QWORD *)a3 + 15);
  *((_QWORD *)a3 + 15) = 0;
  v54 = v13;
  *(_QWORD *)&v12 = *((_QWORD *)a3 + 16);
  *((_QWORD *)a3 + 16) = 0;
  v55 = v12;
  v14 = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 17) = 0;
  v56 = v14;
  *(_QWORD *)&v12 = *((_QWORD *)a3 + 18);
  *((_QWORD *)a3 + 18) = 0;
  v57 = v12;
  LODWORD(v14) = *((_DWORD *)a3 + 38);
  v59 = *((_BYTE *)a3 + 156);
  v58 = v14;
  v15 = *((_OWORD *)a3 + 10);
  *((_OWORD *)a3 + 10) = 0u;
  v60 = v15;
  v16 = *((_QWORD *)a3 + 22);
  v17 = *((_QWORD *)a3 + 23);
  *((_QWORD *)a3 + 22) = 0;
  v63 = *((_BYTE *)a3 + 192);
  v61 = v16;
  v62 = v17;
  v18 = *((_QWORD *)a3 + 25);
  *((_QWORD *)a3 + 25) = 0;
  v64 = v18;
  v65[0] = 0;
  v66 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v65, (uint64_t)(a3 + 104));
  v19 = *((_QWORD *)a3 + 30);
  *((_QWORD *)a3 + 30) = 0;
  v20 = *(_OWORD *)(a3 + 124);
  *(_OWORD *)((char *)v69 + 14) = *(_OWORD *)(a3 + 139);
  v21 = *(_OWORD *)(a3 + 132);
  v68 = v20;
  v69[0] = v21;
  v22 = *a2;
  *a2 = 0;
  v67 = v19;
  v70 = v22;
  v23 = *a4;
  if (*a4)
    *v23 += 2;
  v24 = *a5;
  *a5 = 0;
  v71 = v23;
  v72 = v24;
  v25 = WTF::fastMalloc((WTF *)0x150);
  *(_QWORD *)v25 = off_1E34D5290;
  v26 = v47;
  v47 = 0;
  *(_QWORD *)(v25 + 8) = v26;
  *(_WORD *)(v25 + 16) = v48;
  WTF::URL::URL(v25 + 24, v49);
  WTF::URL::URL(v25 + 64, v50);
  *(_QWORD *)(v25 + 104) = v51;
  *(_QWORD *)(v25 + 112) = v52;
  v27 = *((_QWORD *)&v52 + 1);
  v52 = 0u;
  *(_QWORD *)(v25 + 120) = v27;
  v28 = v53;
  v53 = 0;
  *(_QWORD *)(v25 + 128) = v28;
  v29 = v54;
  v54 = 0;
  *(_QWORD *)(v25 + 136) = v29;
  v30 = v55;
  v55 = 0;
  *(_QWORD *)(v25 + 144) = v30;
  v31 = v56;
  v56 = 0;
  *(_QWORD *)(v25 + 152) = v31;
  v32 = v57;
  v57 = 0;
  *(_QWORD *)(v25 + 160) = v32;
  LODWORD(v31) = v58;
  *(_BYTE *)(v25 + 172) = v59;
  *(_DWORD *)(v25 + 168) = v31;
  *(_QWORD *)(v25 + 176) = v60;
  v33 = *((_QWORD *)&v60 + 1);
  v60 = 0u;
  *(_QWORD *)(v25 + 184) = v33;
  *(_QWORD *)(v25 + 192) = v61;
  v34 = v62;
  *(_BYTE *)(v25 + 208) = v63;
  *(_QWORD *)(v25 + 200) = v34;
  v35 = v64;
  v61 = 0;
  v64 = 0;
  *(_QWORD *)(v25 + 216) = v35;
  *(_BYTE *)(v25 + 224) = 0;
  *(_DWORD *)(v25 + 248) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v25 + 224, (uint64_t)v65);
  *(_QWORD *)(v25 + 256) = v67;
  v36 = v68;
  v37 = v69[0];
  *(_OWORD *)(v25 + 294) = *(_OWORD *)((char *)v69 + 14);
  *(_OWORD *)(v25 + 264) = v36;
  *(_OWORD *)(v25 + 280) = v37;
  v38 = v70;
  v67 = 0;
  v70 = 0;
  *(_QWORD *)(v25 + 312) = v38;
  v39 = v71;
  if (v71)
    *v71 += 2;
  *(_QWORD *)(v25 + 320) = v39;
  v40 = v72;
  v72 = 0;
  *(_QWORD *)(v25 + 328) = v40;
  v46 = v25;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 560))(v9, &v46);
  v42 = v46;
  v46 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)&v47, v41);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
}

uint64_t WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v14;

  v3 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(WTF::StringImpl **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v7])(&v14, a1 + 216);
  *(_DWORD *)(a1 + 240) = -1;
  v8 = *(const void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
  v10 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
  }
  return a1;
}

void WebKit::WebPageProxy::runJavaScriptAlert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  CFTypeRef *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *(_QWORD *)buf = v13;
    WebKit::WebPageProxy::exitFullscreenImmediately(a1);
    v14 = *(_QWORD *)(a1 + 208);
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    WebKit::ResponsivenessTimer::stop((_BYTE *)(v14 + 56));
    if (v14)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
    if (*(_BYTE *)(a1 + 826))
    {
      v17 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v17)
      {
        CFRetain(v17[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v17, (CFTypeRef *)a1);
        CFRelease(v17[1]);
      }
    }
    v18 = *a7;
    *a7 = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = &off_1E34D52E0;
    v19[1] = v18;
    v21 = v19;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v21);
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
  }
  else
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &, FrameIdentifier, FrameInfoDa"
                           "ta &&, const String &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7835: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::runJavaScriptConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  CFTypeRef *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *(_QWORD *)buf = v13;
    WebKit::WebPageProxy::exitFullscreenImmediately(a1);
    v14 = *(_QWORD *)(a1 + 208);
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    WebKit::ResponsivenessTimer::stop((_BYTE *)(v14 + 56));
    if (v14)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
    if (*(_BYTE *)(a1 + 826))
    {
      v17 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v17)
      {
        CFRetain(v17[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v17, (CFTypeRef *)a1);
        CFRelease(v17[1]);
      }
    }
    v18 = *a7;
    *a7 = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = &off_1E34D5330;
    v19[1] = v18;
    v21 = v19;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v21);
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
  }
  else
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &, FrameIdentifier, FrameInfo"
                           "Data &&, const String &, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7858: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::runJavaScriptPrompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, _DWORD **a6, WTF::StringImpl **a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  CFTypeRef *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  _QWORD *v25;
  _BYTE buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    *(_QWORD *)buf = v15;
    WebKit::WebPageProxy::exitFullscreenImmediately(a1);
    v16 = *(_QWORD *)(a1 + 208);
    v17 = (unsigned int *)(v16 + 16);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    WebKit::ResponsivenessTimer::stop((_BYTE *)(v16 + 56));
    if (v16)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
    if (*(_BYTE *)(a1 + 826))
    {
      v19 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
                         + 40);
      if (v19)
      {
        CFRetain(v19[1]);
        WebKit::WebAutomationSession::willShowJavaScriptDialog(v19, (CFTypeRef *)a1);
        CFRelease(v19[1]);
      }
    }
    v20 = *a8;
    *a8 = 0;
    v21 = *a7;
    if (v21)
    {
      *(_DWORD *)v21 += 2;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v22 = &off_1E34D5380;
      v22[1] = v20;
      *(_DWORD *)v21 += 2;
    }
    else
    {
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v22 = &off_1E34D5380;
      v22[1] = v20;
    }
    v22[2] = v21;
    v25 = v22;
    WebKit::WebPageProxy::runModalJavaScriptDialog(a1, (uint64_t *)buf, a5, a6, (uint64_t *)&v25);
    if (v25)
      (*(void (**)(_QWORD *))(*v25 + 8))(v25);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v23);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)(*(_QWORD *)buf + 8));
  }
  else
  {
    v24 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &, FrameIdentifier, FrameInfoD"
                           "ata &&, const String &, const String &, CompletionHandler<void (const String &)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7881: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::mouseDidMoveOverElement(uint64_t a1, uint64_t a2, unsigned __int8 a3, CFTypeRef **a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  CFTypeRef *v11;
  WebKit *v12;
  const WTF::StringImpl *v13;
  WebKit *v15;

  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(unsigned int **)(a1 + 208);
  v9 = v8 + 4;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *a4;
  if (*a4)
    CFRetain(v11[1]);
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v8, (API::Object *)v11, &v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, WebKit *))(*(_QWORD *)v7 + 136))(v7, a1, a2, a3, v15);
  v12 = v15;
  v15 = 0;
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
  if (v11)
    CFRelease(v11[1]);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8 + 4);
  return WebKit::WebPageProxy::setToolTip((WTF **)a1, (const WTF::StringImpl **)(a2 + 440), v13);
}

uint64_t WebKit::WebPageProxy::getToolbarsAreVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 160))(v3, a1, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::getMenuBarIsVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 176))(v3, a1, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::getStatusBarIsVisible(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 104);
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(&v5, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 192))(v3, a1, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::setWindowFrame(WebKit::WebPageProxy *this, const FloatRect *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[4];

  v4 = *((_QWORD *)this + 13);
  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v11[0] = (*(float (**)(uint64_t, const FloatRect *))(*(_QWORD *)v6 + 464))(v6, a2);
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  (*(void (**)(uint64_t, WebKit::WebPageProxy *, _DWORD *))(*(_QWORD *)v4 + 216))(v4, this, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::getWindowFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 104);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34D53D0;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v4 + 224))(v4, a1, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::getWindowFrameWithCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 104);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34D53F8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v4 + 224))(v4, a1, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::screenToRootView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 480))(v6, a2);
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::rootViewToScreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v10[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 504))(v6, a2);
  v10[1] = v7;
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::accessibilityScreenToRootView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 512))(v6, a2);
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::rootViewToAccessibilityScreen(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 520))(v6, a2);
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char isActive;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t v26[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    if (*(_BYTE *)(a1 + 826)
      && *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
         + 40))
    {
      v14 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 208);
      v16 = (unsigned int *)(v15 + 16);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      WebKit::ResponsivenessTimer::stop((_BYTE *)(v15 + 56));
      if (v15)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
      isActive = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(_QWORD *)(a1 + 32) + 1752));
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(_QWORD *)(a1 + 32) + 1752));
      v19 = *(_QWORD *)(a1 + 104);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
      v20 = *(unsigned int **)(a1 + 24);
      if (v20)
      {
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      v22 = *a7;
      *a7 = 0;
      v23 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v23 = &off_1E34D5420;
      *(_QWORD *)(v23 + 8) = a1;
      *(_QWORD *)(v23 + 16) = v20;
      *(_QWORD *)(v23 + 24) = v22;
      *(_BYTE *)(v23 + 32) = isActive;
      *(_QWORD *)v26 = v23;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v19 + 240))(v19, a1, a6, v13, a5, v26);
      v24 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v25 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)&v26[4] = "void WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &, FrameIdentifier, Fr"
                           "ameInfoData &&, const String &, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 7997: Invalid message dispatched %s", v26, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::pageDidScroll(WebKit::WebPageProxy *this, const IntPoint *a2)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 13) + 248))(*((_QWORD *)this + 13), this);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  (*(void (**)(uint64_t, const IntPoint *))(*(_QWORD *)v5 + 1600))(v5, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
}

void WebKit::WebPageProxy::runOpenPanel(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  const void *v28;
  NSObject *v29;
  char v30;
  uint8_t buf[4];
  _QWORD v32[24];
  const void *v33;
  _BYTE v34[24];
  int v35;
  WTF::StringImpl *v36;
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = *(CFTypeRef **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v12)
  {
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v12, a2);
    CFRelease(v12[1]);
  }
  v13 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v13)
  {
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v15 = (CFTypeRef *)API::Object::newObject(0x50uLL, 83);
    API::OpenPanelParameters::OpenPanelParameters((uint64_t)v15, a6);
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 16);
    v17 = API::Object::newObject(0x20uLL, 61);
    *(_QWORD *)v17 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v17);
    *(_QWORD *)v17 = &off_1E34D3B38;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(_QWORD *)(v17 + 16) = a1;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v16 + 8), v16);
    v18 = *(unsigned int **)(v16 + 8);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    *(_QWORD *)(v17 + 24) = v18;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    v20 = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 496) = v17;
    if (v20)
      CFRelease(*(CFTypeRef *)(v20 + 8));
    if (*(_BYTE *)(a1 + 826))
    {
      v21 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
            + 40);
      if (v21)
      {
        CFRetain(*(CFTypeRef *)(v21 + 8));
        WebKit::WebAutomationSession::handleRunOpenPanel((WTF::JSONImpl::Object **)v21, (const WebKit::WebPageProxy *)a1, (const WebKit::WebFrameProxy *)v14, (const API::OpenPanelParameters *)v15, (WebKit::WebOpenPanelResultListenerProxy *)v17);
        CFRelease(*(CFTypeRef *)(v21 + 8));
      }
    }
    else
    {
      WebKit::ResponsivenessTimer::stop((_BYTE *)(*(_QWORD *)(a1 + 208) + 56));
      *(_WORD *)buf = *(_WORD *)a5;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)((char *)v32 + 4), (const WebCore::ResourceRequest *)(a5 + 8));
      v34[0] = 0;
      v35 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v34, a5 + 208);
      v22 = *(WTF::StringImpl **)(a5 + 240);
      if (v22)
        *(_DWORD *)v22 += 2;
      v36 = v22;
      v38[0] = *(_OWORD *)(a5 + 264);
      *(_OWORD *)((char *)v38 + 14) = *(_OWORD *)(a5 + 278);
      v37 = *(_OWORD *)(a5 + 248);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t))(**(_QWORD **)(a1 + 104)
                                                                                               + 296))(*(_QWORD *)(a1 + 104), a1, v14, a5, v15, v17) & 1) == 0)
      {
        v24 = *(_QWORD *)(a1 + 40);
        v25 = v24 ? *(_QWORD *)(v24 + 8) : 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1584))(v25);
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *, CFTypeRef *, uint64_t))(*(_QWORD *)v25 + 216))(v25, a1, v14, buf, v15, v17);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1592))(v25);
        if ((v26 & 1) == 0)
          WebKit::WebPageProxy::didCancelForOpenPanel((WebKit::WebPageProxy *)a1, v23);
      }
      v27 = v36;
      v36 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v23);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (v35 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v35])(&v30, v34);
      v35 = -1;
      v28 = v33;
      v33 = 0;
      if (v28)
        CFRelease(v28);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)v32 + 4));
    }
    CFRelease(*(CFTypeRef *)(v17 + 8));
    if (v15)
      CFRelease(v15[1]);
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    v29 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v32[0] = "void WebKit::WebPageProxy::runOpenPanel(IPC::Connection &, FrameIdentifier, FrameInfoData &&, const FileC"
               "hooserSettings &)";
      _os_log_fault_impl(&dword_196BCC000, v29, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8058: Invalid message dispatched %s", buf, 0xCu);
    }
    a2[98] = 1;
  }
}

void WebKit::WebPageProxy::showShareSheet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 80) && (*(_BYTE *)(a3 + 48) & 2) == 0 && (WTF::URL::protocolIs() & 1) == 0)
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v13 = 136315138;
      v14 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHandl"
            "er<void (BOOL)> &&)";
      v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8085: Invalid message dispatched %s";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)(a3 + 100))
  {
    v8 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, (const WTF::StringImpl *)a3) & 1) == 0)
    {
      v11 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v13 = 136315138;
        v14 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHan"
              "dler<void (BOOL)> &&)";
        v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8086: Invalid message dispatched %s";
        goto LABEL_19;
      }
LABEL_20:
      *(_BYTE *)(a2 + 98) = 1;
      return;
    }
  }
  if (*(_BYTE *)(a3 + 104))
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v13 = 136315138;
      v14 = "void WebKit::WebPageProxy::showShareSheet(IPC::Connection &, const ShareDataWithParsedURL &, CompletionHandl"
            "er<void (BOOL)> &&)";
      v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8087: Invalid message dispatched %s";
LABEL_19:
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, v12, (uint8_t *)&v13, 0xCu);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 224))(v10, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
}

void WebKit::WebPageProxy::showContactPicker(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, a3) & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
    (*(void (**)(uint64_t, const WTF::StringImpl *, uint64_t))(*(_QWORD *)v10 + 232))(v10, a3, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  }
  else
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v12 = 136315138;
      v13 = "void WebKit::WebPageProxy::showContactPicker(IPC::Connection &, const ContactsRequestData &, CompletionHandl"
            "er<void (std::optional<Vector<ContactInfo>> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8093: Invalid message dispatched %s", (uint8_t *)&v12, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 732) = 1;
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    WTF::String::operator=((WTF::StringImpl **)(v13 + 232), a5);
    v14 = *(_QWORD *)(a1 + 104);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v15 = *a7;
    *a7 = 0;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v16 = &off_1E34D5448;
    v16[1] = a1;
    v16[2] = a1;
    v16[3] = v15;
    *(_QWORD *)v19 = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v14 + 384))(v14, a1, v13, a6, v19);
    v17 = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)&v19[4] = "void WebKit::WebPageProxy::printFrame(IPC::Connection &, FrameIdentifier, const String &, con"
                           "st FloatSize &, CompletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8103: Invalid message dispatched %s", v19, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::setMediaVolume(uint64_t this, float a2)
{
  float v2;

  if (*(float *)(this + 884) != a2)
  {
    *(float *)(this + 884) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaVolume>(*(_QWORD *)(this + 208), (int *)&v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setMuted(uint64_t a1, unsigned __int8 a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  IPC::Encoder *v30;
  _BYTE buf[22];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 872) = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if ((*(_DWORD *)(v9 + 808) & 0x2486000) != 0 && (a2 & 0x1E) == 0)
      WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(_QWORD *)(v9 + 1896));
    v11 = *(_QWORD *)(a1 + 208);
    v12 = (unsigned int *)(v11 + 16);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WebKit::WebProcessProxy::pageMutedStateChanged((uint64_t *)v11, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), a2);
    if (v11)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
    v14 = qword_1ECE71348;
    if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(v15 + 744);
      v17 = *(_QWORD *)(v15 + 1896);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v18)
        LODWORD(v18) = *(_DWORD *)(v18 + 108);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v16;
      v32 = 2048;
      v33 = v17;
      v34 = 1024;
      v35 = v18;
      v36 = 1024;
      v37 = a2;
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMuted: %d", buf, 0x2Cu);
    }
    v19 = *(_QWORD *)(a1 + 208);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v21 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v21 = 2411;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 528) = v21 + 16;
    *(_QWORD *)(v21 + 536) = v21 + 16;
    *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v21 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
    v30 = (IPC::Encoder *)v21;
    *IPC::Encoder::grow((IPC::Encoder *)v21, 1uLL, 1) = a2;
    v22 = *a3;
    *a3 = 0;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = &off_1E34D5470;
    v23[1] = v22;
    v24 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)buf = v23;
    *(_QWORD *)&buf[8] = v24;
    buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v30, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v25);
      WTF::fastFree(v28, v29);
    }
    return WebKit::WebPageProxy::activityStateDidChange(a1, 320, 0, 0);
  }
}

_BYTE *WebKit::WebPageProxy::setMediaCaptureEnabled(_BYTE *this, char a2)
{
  this[890] = a2;
  if (!this[729] && this[728])
  {
    {
      WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
      unk_1EE341E10 = 0;
      qword_1EE341E18 = 0;
      unk_1EE341E20 = 0;
      word_1EE341E28 = 1;
    }
    return (_BYTE *)WebKit::UserMediaProcessManager::setCaptureEnabled((uint64_t)&WebKit::UserMediaProcessManager::singleton(void)::manager, a2);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::stopMediaCapture(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  _BYTE v10[24];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 504);
    if (v8)
    {
      v10[0] = 0;
      v10[16] = 0;
      WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(v8, (uint64_t)v10);
    }
    v9 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), &v9, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::stopMediaCapture(uint64_t a1, char a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D54E8;
  v6 = v4;
  WebKit::WebPageProxy::stopMediaCapture(a1, a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::requestMediaPlaybackState(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::pauseAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::suspendAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  ++*(_QWORD *)(a1 + 1272);
  if (*(_BYTE *)(a1 + 889) || (*(_BYTE *)(a1 + 889) = 1, *(_BYTE *)(a1 + 729)) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::resumeAllMediaPlayback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 1272);
  if (v2)
  {
    v3 = v2 - 1;
    *(_QWORD *)(a1 + 1272) = v3;
    if (v3)
      v4 = 1;
    else
      v4 = *(_BYTE *)(a1 + 889) == 0;
    if (v4)
      goto LABEL_10;
  }
  else if (!*(_BYTE *)(a1 + 889))
  {
LABEL_10:
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *(_BYTE *)(a1 + 889) = 0;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
    goto LABEL_10;
  v7 = 0;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v7, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
}

uint64_t WebKit::WebPageProxy::setMayStartMediaWhenInWindow(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 888) != a2)
  {
    *(_BYTE *)(this + 888) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMayStartMediaWhenInWindow>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::resumeDownload(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t *a4)
{
  WebKit::WebProcessPool *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24));
  WebKit::WebProcessPool::resumeDownload(v8, *(WebKit::WebsiteDataStore **)(a1 + 264), (WebKit::WebPageProxy *)a1, a2, (uint64_t)a3, 1, &v12);
  WTF::String::operator=((WTF::StringImpl **)(v12 + 280), a3);
  v9 = v12;
  v10 = *a4;
  *a4 = 0;
  v11 = *(_QWORD *)(v9 + 328);
  *(_QWORD *)(v9 + 328) = v10;
  if (!v11)
  {
    v12 = 0;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v9 = v12;
  v12 = 0;
  if (v9)
LABEL_5:
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

void WebKit::WebPageProxy::downloadRequest(WebKit::WebPageProxy *a1, const WebCore::ResourceRequest *a2, uint64_t *a3)
{
  WebKit::WebProcessPool *v6;
  WebKit::WebsiteDataStore *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WebKit::DownloadProxy *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  const WebKit::DownloadProxy *v14;

  v6 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)a1 + 6) + 24));
  v7 = (WebKit::WebsiteDataStore *)*((_QWORD *)a1 + 33);
  v13 = 0;
  WebKit::WebProcessPool::download(v6, v7, a1, a2, (const WTF::String *)&v13, &v14);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v11 = *a3;
  *a3 = 0;
  v12 = *((_QWORD *)v10 + 41);
  *((_QWORD *)v10 + 41) = v11;
  if (!v12)
  {
    v14 = 0;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v10 = v14;
  v14 = 0;
  if (v10)
LABEL_9:
    CFRelease(*((CFTypeRef *)v10 + 1));
}

unsigned int *WebKit::WebPageProxy::dataTaskWithRequest(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v10 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
  v11 = (unsigned int *)(v10 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  WebKit::NetworkProcessProxy::dataTaskWithRequest(v10, a1, *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24), a2, a3, a4, a5);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
}

uint64_t WebKit::WebPageProxy::loadAndDecodeImage(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, int a4, WTF::StringImpl *a5, uint64_t *a6)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13[3];
  uint64_t v14;
  int v15;

  v14 = a3;
  v15 = a4;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v13[0] = 0;
    WebKit::WebPageProxy::launchProcess(a1, v13, 0);
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v13[0] = a2;
  v13[1] = (WTF::StringImpl *)&v14;
  v13[2] = a5;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(*(_QWORD *)(a1 + 208), (uint64_t)v13, a6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
}

uint64_t WebKit::WebPageProxy::showColorPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;

  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 656))(&v15, v9, a1, a2, a3, a4);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v15;
  v15 = 0;
  v12 = *(_DWORD **)(v10 + 2048);
  *(_QWORD *)(v10 + 2048) = v11;
  if (v12)
  {
    if (v12[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
    }
    else
    {
      --v12[2];
      v15 = 0;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 2048) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2048), a2);
}

uint64_t WebKit::WebPageProxy::setColorPickerColor(uint64_t this, const Color *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 32) + 2048);
  if (v2)
  {
    ++v2[2];
    this = (*(uint64_t (**)(_DWORD *, const Color *))(*(_QWORD *)v2 + 24))(v2, a2);
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return this;
}

IPC::Encoder *WebKit::WebPageProxy::Internals::didChooseColor(IPC::Encoder *this, const WebCore::Color *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v2 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728))
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 2160;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v13 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v6, a2);
    LOBYTE(v11) = 0;
    v12 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v13, 0, (uint64_t)&v11, 1);
    if (v12)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v7);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didChooseColor(WebKit::WebPageProxy::Internals *this, const WebCore::Color *a2)
{
  return WebKit::WebPageProxy::Internals::didChooseColor((WebKit::WebPageProxy::Internals *)((char *)this - 16), a2);
}

IPC::Encoder *WebKit::WebPageProxy::Internals::didEndColorPicker(WebKit::WebPageProxy::Internals *this)
{
  IPC::Encoder *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  result = (IPC::Encoder *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
    v3 = *((_QWORD *)this + 5);
    if (!*(_BYTE *)(v3 + 729))
    {
      if (*(_BYTE *)(v3 + 728))
      {
        v4 = *(_QWORD *)(v3 + 208);
        v5 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896);
        v6 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v6 = 2166;
        *(_QWORD *)(v6 + 8) = v5;
        *(_QWORD *)(v6 + 528) = v6 + 16;
        *(_QWORD *)(v6 + 536) = v6 + 16;
        *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v6 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
        v13 = (IPC::Encoder *)v6;
        LOBYTE(v11) = 0;
        v12 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v13, 0, (uint64_t)&v11, 1);
        if (v12)
        {
          v8 = v11;
          v11 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        }
        result = v13;
        v13 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v7);
          return (IPC::Encoder *)WTF::fastFree(v9, v10);
        }
      }
    }
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPageProxy::Internals::didEndColorPicker(WebKit::WebPageProxy::Internals *this)
{
  return WebKit::WebPageProxy::Internals::didEndColorPicker((WebKit::WebPageProxy::Internals *)((char *)this - 16));
}

uint64_t WebKit::WebPageProxy::showDataListSuggestions(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  _DWORD *v12;

  v3 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 2000);
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 664))(&v12, v6, a1);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = v12;
    v12 = 0;
    v9 = *(_DWORD **)(v7 + 2000);
    *(_QWORD *)(v7 + 2000) = v8;
    if (v9)
    {
      if (v9[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        v10 = v12;
        v12 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
      }
      else
      {
        --v9[2];
        v12 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    v3 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 2000);
  }
  ++v3[2];
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebKit::WebPageProxy::handleKeydownInDataList(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 32) + 2000);
  if (v2)
  {
    ++v2[2];
    this = (*(uint64_t (**)(_DWORD *, const WTF::String *))(*(_QWORD *)v2 + 24))(v2, a2);
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return this;
}

_DWORD *WebKit::WebPageProxy::didCloseSuggestions(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  _DWORD *result;
  char v4;

  v2 = *((_QWORD *)this + 4);
  result = *(_DWORD **)(v2 + 2000);
  if (result)
  {
    *(_QWORD *)(v2 + 2000) = 0;
    if (result[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
    v4 = 0;
    return (_DWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCloseSuggestions>(*((_QWORD *)this + 26), (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didSelectOption(uint64_t this, const WTF::String *a2)
{
  uint64_t *v2;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v2 = (uint64_t *)a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidSelectDataListOption>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::showDateTimePicker(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t result;
  _DWORD *v11;

  v3 = *(_DWORD **)(a1 + 808);
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 672))(&v11, v6, a1);
    v7 = v11;
    v11 = 0;
    v8 = *(_DWORD **)(a1 + 808);
    *(_QWORD *)(a1 + 808) = v7;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
      }
      else
      {
        --v8[2];
        v11 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    v3 = *(_DWORD **)(a1 + 808);
  }
  ++v3[2];
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidSendRequest(_QWORD *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a1[30];
  if (!v6)
  {
    v7 = a1[31];
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_6;
    v6 = v8 - 16;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebExtensionController::resourceLoadDidSendRequest(v6, *(_QWORD *)(a1[4] + 744), a2, a3);
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_6:
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebKit::ResourceLoadInfo *, uint64_t))(*(_QWORD *)result + 16))(result, a2, a3);
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidPerformHTTPRedirection(_QWORD *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = a1[30];
  if (!v8)
  {
    v9 = a1[31];
    if (!v9)
      goto LABEL_6;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_6;
    v8 = v10 - 16;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebExtensionController::resourceLoadDidPerformHTTPRedirection(v8, *(_QWORD *)(a1[4] + 744), a2, a3, a4);
  CFRelease(*(CFTypeRef *)(v8 + 8));
LABEL_6:
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebKit::ResourceLoadInfo *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                  + 24))(result, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidReceiveChallenge(_QWORD *a1, const WebKit::ResourceLoadInfo *a2, id *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a1[30];
  if (!v6)
  {
    v7 = a1[31];
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_6;
    v6 = v8 - 16;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebExtensionController::resourceLoadDidReceiveChallenge(v6, *(_QWORD *)(a1[4] + 744), a2, a3);
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_6:
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebKit::ResourceLoadInfo *, id *))(*(_QWORD *)result + 32))(result, a2, a3);
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidReceiveResponse(_QWORD *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a1[30];
  if (!v6)
  {
    v7 = a1[31];
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      goto LABEL_6;
    v6 = v8 - 16;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebExtensionController::resourceLoadDidReceiveResponse(v6, *(_QWORD *)(a1[4] + 744), a2, a3);
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_6:
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebKit::ResourceLoadInfo *, uint64_t))(*(_QWORD *)result + 40))(result, a2, a3);
  return result;
}

uint64_t WebKit::WebPageProxy::resourceLoadDidCompleteWithError(_QWORD *a1, const WebKit::ResourceLoadInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = a1[30];
  if (!v8)
  {
    v9 = a1[31];
    if (!v9)
      goto LABEL_6;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_6;
    v8 = v10 - 16;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebExtensionController::resourceLoadDidCompleteWithError(v8, *(_QWORD *)(a1[4] + 744), a2, a3, a4);
  CFRelease(*(CFTypeRef *)(v8 + 8));
LABEL_6:
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebKit::ResourceLoadInfo *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                  + 48))(result, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPageProxy::setAllowsMediaDocumentInlinePlayback(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 521) != a2)
  {
    *(_BYTE *)(this + 521) = a2;
    v2 = a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetAllowsMediaDocumentInlinePlayback>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::requestDOMPasteAccess(uint64_t a1, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SecurityOrigin *this, _QWORD *a7)
{
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::URL *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int isSameOriginDomain;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::ApproximateTime *v27;
  const WTF::StringImpl *v28;
  double v29;
  double v30;
  double *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _DWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  NSObject *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  __int128 buf;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
  {
    v41 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::requestDOMPasteAccess(DOMPasteAccessCategory, FrameIden"
                                      "tifier, const IntRect &, const String &, CompletionHandler<void (DOMPasteAccessResponse)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8574: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
    v42 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 16))(v42, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v13 = a2;
  WebCore::SecurityOrigin::createFromString(this, a2);
  if (*((_DWORD *)v59 + 8) != 1)
  {
    v16 = WebKit::WebFrameProxy::webFrame(a3, a4);
    v17 = v16;
    if (!v16)
      goto LABEL_61;
    CFRetain(*(CFTypeRef *)(v16 + 8));
    v18 = *(_QWORD *)(v17 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        v18 = v19 - 16;
      else
        v18 = 0;
    }
    if (v18 == a1)
    {
      CFRetain(*(CFTypeRef *)(v17 + 8));
      for (i = v17; ; i = v26)
      {
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(i + 48), v20);
        isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v59, (const WebCore::SecurityOrigin *)buf);
        v24 = buf;
        *(_QWORD *)&buf = 0;
        if (v24)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v24, v22);
          if ((isSameOriginDomain & 1) != 0)
            break;
        }
        else if ((isSameOriginDomain & 1) != 0)
        {
          break;
        }
        v25 = *(_QWORD *)(i + 312);
        if (!v25)
          break;
        v26 = *(_QWORD *)(v25 + 8);
        if (!v26)
          break;
        CFRetain(*(CFTypeRef *)(v26 + 8));
        CFRelease(*(CFTypeRef *)(i + 8));
      }
      v56 = v17;
      v57 = v13;
      v58 = a5;
      CFRelease(*(CFTypeRef *)(i + 8));
      WTF::ApproximateTime::now(v27);
      v30 = v29;
      v31 = *(double **)(a1 + 480);
      v32 = *(unsigned int *)(a1 + 492);
      v33 = (WTF::StringImpl **)&v31[2 * v32];
      if ((_DWORD)v32)
      {
        v55 = a7;
        v34 = 0;
        v35 = *(_QWORD *)(a1 + 480);
        v36 = (WTF::StringImpl *)&v31[2 * v32];
        v37 = (WTF::StringImpl **)v36;
        do
        {
          if ((WTF::equal(*(WTF **)v31, *(const WTF::StringImpl **)this, v28) & 1) != 0 || v30 - v31[1] > 1.0)
          {
            v39 = (WTF::StringImpl **)v31;
            if (v37 != (WTF::StringImpl **)(*(_QWORD *)(a1 + 480) + 16 * *(unsigned int *)(a1 + 492)))
            {
              if (v31 == (double *)v36)
              {
                v39 = v37;
              }
              else
              {
                WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(v36, (WTF::StringImpl *)v31, v37);
                v39 = (WTF::StringImpl **)((char *)v37 + v35 - (_QWORD)v36);
              }
            }
            v40 = *(WTF::StringImpl **)v31;
            *v31 = 0.0;
            v36 = (WTF::StringImpl *)(v31 + 2);
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v38);
              else
                *(_DWORD *)v40 -= 2;
            }
            ++v34;
            v37 = v39;
          }
          else
          {
            v39 = v37;
          }
          v31 += 2;
          v35 += 16;
        }
        while (v31 < (double *)v33);
        v31 = *(double **)(a1 + 480);
        LODWORD(v32) = *(_DWORD *)(a1 + 492);
        v33 = v39;
        a7 = v55;
      }
      else
      {
        v34 = 0;
        v36 = (WTF::StringImpl *)&v31[2 * v32];
      }
      v14 = (WTF::StringImpl *)&v31[2 * v32];
      if (v36 != v14)
      {
        WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(v36, v14, v33);
        LODWORD(v32) = *(_DWORD *)(a1 + 492);
      }
      v44 = (v32 - v34);
      *(_DWORD *)(a1 + 492) = v44;
      v45 = *(_DWORD **)this;
      v13 = (const WTF::String *)v57;
      if (*(_QWORD *)this)
        *v45 += 2;
      v15 = isSameOriginDomain ^ 1u;
      *(_QWORD *)&buf = v45;
      *((double *)&buf + 1) = v30;
      a5 = v58;
      v17 = v56;
      if ((_DWORD)v44 == *(_DWORD *)(a1 + 488))
      {
        v46 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 480), v44 + 1, (unint64_t)&buf);
        v47 = (_QWORD *)(*(_QWORD *)(a1 + 480) + 16 * *(unsigned int *)(a1 + 492));
        v48 = *v46;
        *v46 = 0;
        *v47 = v48;
        v47[1] = v46[1];
        v49 = *(_DWORD *)(a1 + 492) + 1;
        *(_DWORD *)(a1 + 492) = v49;
        v50 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, v14);
            v49 = *(_DWORD *)(a1 + 492);
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
      }
      else
      {
        v51 = *(_QWORD *)(a1 + 480) + 16 * v44;
        *(_QWORD *)v51 = v45;
        *(double *)(v51 + 8) = v30;
        v49 = *(_DWORD *)(a1 + 492) + 1;
        *(_DWORD *)(a1 + 492) = v49;
      }
      if (v49 < 0xB)
      {
        v53 = 1;
LABEL_51:
        if (v17)
          CFRelease(*(CFTypeRef *)(v17 + 8));
        if (!v53)
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    else
    {
LABEL_61:
      v54 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::requestDOMPasteAccess(DOMPasteAccessCategory, FrameId"
                                        "entifier, const IntRect &, const String &, CompletionHandler<void (DOMPasteAccessResponse)> &&)";
        _os_log_fault_impl(&dword_196BCC000, v54, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8579: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
      }
      v15 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
    }
    v52 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 16))(v52, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = 0;
    goto LABEL_51;
  }
  v15 = 1;
LABEL_54:
  v53 = 1;
LABEL_55:
  result = (uint64_t)v59;
  if (!v59)
  {
    if (!v53)
      return result;
    return (*(uint64_t (**)(_QWORD, const WTF::String *, uint64_t, uint64_t, WebCore::SecurityOrigin *, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 1672))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v13, v15, a5, this, a7);
  }
  result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v59, v14);
  if (v53)
    return (*(uint64_t (**)(_QWORD, const WTF::String *, uint64_t, uint64_t, WebCore::SecurityOrigin *, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 1672))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v13, v15, a5, this, a7);
  return result;
}

unsigned int *WebKit::WebPageProxy::backForwardAddItem(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  WebKit::WebProcessProxy *v8;

  v4 = *(unsigned int **)(a1 + 208);
  v5 = v4 + 4;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = (WebKit::WebProcessProxy *)v4;
  result = (unsigned int *)WebKit::WebPageProxy::backForwardAddItemShared(a1, &v8, a2, a3, a4, *(_QWORD *)(a1 + 272) != 0);
  if (v4)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4 + 4);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::backForwardAddItemShared(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, int a6)
{
  WebKit::WebBackForwardListItem *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebKit::WebBackForwardListItem *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  NSObject *v22;
  const char *v23;
  WebKit::WebBackForwardListItem *v24;
  WTF::StringImpl *v25[5];
  WTF::StringImpl *v26[5];
  uint8_t buf[40];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WTF::URL::URL((uint64_t)v26, a5 + 3);
  WTF::URL::URL((uint64_t)v25, a5 + 4);
  if (!WTF::linkedOnOrAfterSDKWithBehavior())
    goto LABEL_6;
  if (WTF::URL::protocolIs()
    && (WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(*a2, (const WTF::URL *)v26) & 1) == 0)
  {
    v22 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_33:
      *(_BYTE *)(*((_QWORD *)*a2 + 18) + 98) = 1;
      goto LABEL_21;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::backForwardAddItemShared(Ref<WebProcessProxy> &&, FrameIdentifier, B"
                         "ackForwardListItemState &&, LoadedWebArchive)";
    v23 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8627: Invalid message dispatched %s";
LABEL_35:
    _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, v23, buf, 0xCu);
    goto LABEL_33;
  }
  if (WTF::URL::protocolIs()
    && (WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(*a2, (const WTF::URL *)v25) & 1) == 0)
  {
    v22 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_33;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::backForwardAddItemShared(Ref<WebProcessProxy> &&, FrameIdentifier, B"
                         "ackForwardListItemState &&, LoadedWebArchive)";
    v23 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8628: Invalid message dispatched %s";
    goto LABEL_35;
  }
LABEL_6:
  WebKit::WebBackForwardListItem::create((WTF::RunLoop *)a5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 744), (uint64_t *)&v24);
  v12 = v24;
  WebKit::WebPageProxy::currentResourceDirectoryURL((WebKit::WebPageProxy *)a1, (uint64_t)buf);
  WTF::URL::operator=((uint64_t)v12 + 344, (WTF::StringImpl *)buf);
  v14 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  *((_QWORD *)v12 + 50) = a3;
  *((_QWORD *)v12 + 51) = a4;
  if (a6)
  {
    v15 = *((_QWORD *)*a2 + 94);
    if (v15)
      CFRetain(*(CFTypeRef *)(v15 + 8));
    v16 = *((_QWORD *)v12 + 3);
    *((_QWORD *)v12 + 3) = v15;
    if (v16)
      CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  v17 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v17 && *(_BYTE *)(v17 + 440))
  {
    *(_BYTE *)(v17 + 440) = 0;
    WebKit::WebBackForwardList::addRootChildFrameItem(*(uint64_t **)(a1 + 592), &v24);
  }
  else
  {
    WebKit::WebBackForwardList::addItem(*(_QWORD *)(a1 + 592), (uint64_t *)&v24);
  }
  v19 = v24;
  v24 = 0;
  if (v19)
    CFRelease(*((CFTypeRef *)v19 + 1));
LABEL_21:
  v20 = v25[0];
  v25[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v26[0];
  v26[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageProxy::backForwardGoToItem(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!*(_QWORD *)(a1 + 1120))
  {
    WebKit::WebPageProxy::backForwardGoToItemShared(a1, a2, a3);
    return;
  }
  v3 = *(_QWORD *)(a1 + 592);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_8;
  v4 = *(_QWORD *)(v4 + 8);
  if (!v4)
    goto LABEL_8;
  if (!*(_BYTE *)(v3 + 48))
  {
    v4 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(v3 + 40);
  v5 = (unint64_t)(*(_DWORD *)(v3 + 36) + ~*(_DWORD *)(v3 + 40)) << 32;
LABEL_9:
  v7 = v5 | v4;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v6 + 16))(v6, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void WebKit::WebPageProxy::backForwardGoToItemShared(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  *(_QWORD *)v20 = a1;
  if (!WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(&WebKit::pageLevelMap(void)::map, v20))
  {
    v6 = *(_QWORD *)(a1 + 592);
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = WebKit::WebBackForwardList::itemForID((WebKit::WebBackForwardListItem *)v6, a2);
    if (v7)
    {
      v8 = (CFTypeRef *)v7;
      CFRetain(*(CFTypeRef *)(v7 + 8));
      WebKit::WebBackForwardList::goToItem((WebKit::WebBackForwardList *)v6, (WebKit::WebBackForwardListItem *)v8);
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9)
        {
          if (*(_BYTE *)(v6 + 48))
          {
            v9 = *(_QWORD *)(v6 + 40);
            v10 = (unint64_t)(*(_DWORD *)(v6 + 36) + ~*(_QWORD *)(v6 + 40)) << 32;
LABEL_11:
            *(_QWORD *)v20 = v10 | v9;
            v11 = *a3;
            *a3 = 0;
            (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 16))(v11, v20);
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            CFRelease(v8[1]);
LABEL_12:
            CFRelease(*(CFTypeRef *)(v6 + 8));
            return;
          }
          v9 = 0;
        }
      }
      v10 = 0;
      goto LABEL_11;
    }
    v16 = *(_QWORD *)(v6 + 16);
    if (v16)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (v16)
      {
        if (*(_BYTE *)(v6 + 48))
        {
          v16 = *(_QWORD *)(v6 + 40);
          v17 = (unint64_t)(*(_DWORD *)(v6 + 36) + ~*(_QWORD *)(v6 + 40)) << 32;
LABEL_28:
          *(_QWORD *)v20 = v17 | v16;
          v19 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, v20);
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          goto LABEL_12;
        }
        v16 = 0;
      }
    }
    v17 = 0;
    goto LABEL_28;
  }
  v12 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v20 = 136315138;
    *(_QWORD *)&v20[4] = "void WebKit::WebPageProxy::backForwardGoToItemShared(const BackForwardItemIdentifier &, Complet"
                         "ionHandler<void (const WebBackForwardListCounts &)> &&)";
    _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8664: Invalid message dispatched %s", v20, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
  v13 = *(_QWORD *)(a1 + 592);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_24;
  v14 = *(_QWORD *)(v14 + 8);
  if (!v14)
    goto LABEL_24;
  if (!*(_BYTE *)(v13 + 48))
  {
    v14 = 0;
LABEL_24:
    v15 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 40);
  v15 = (unint64_t)(*(_DWORD *)(v13 + 36) + ~*(_DWORD *)(v13 + 40)) << 32;
LABEL_25:
  *(_QWORD *)v20 = v15 | v14;
  v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
}

void WebKit::WebPageProxy::backForwardListContainsItem(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  CFTypeRef *v5;
  _BOOL8 v6;
  uint64_t v7;

  v5 = *(CFTypeRef **)(a1 + 592);
  CFRetain(v5[1]);
  v6 = WebKit::WebBackForwardList::itemForID((WebKit::WebBackForwardListItem *)v5, a2) != 0;
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v7 + 16))(v7, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  CFRelease(v5[1]);
}

void WebKit::WebPageProxy::backForwardItemAtIndex(uint64_t a1, WebKit::AuxiliaryProcessProxy *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  const IPC::Connection *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;

  v6 = WebKit::WebBackForwardList::itemAtIndex(*(_QWORD *)(a1 + 592), a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v9 = WebKit::AuxiliaryProcessProxy::fromConnection(a2, v8);
    if (v9 && (v10 = *(unsigned int *)(v7 + 444), (_DWORD)v10))
    {
      v11 = *(_QWORD *)(v7 + 432);
      v12 = 8 * v10;
      while (*(_QWORD *)(*(_QWORD *)v11 + 392) != *(_QWORD *)(v9 + 176))
      {
        v11 += 8;
        v12 -= 8;
        if (!v12)
          goto LABEL_7;
      }
      v13 = *(_OWORD *)(*(_QWORD *)v11 + 32);
    }
    else
    {
LABEL_7:
      v13 = *(_OWORD *)(v7 + 32);
    }
    v16 = v13;
    v17 = 1;
    v14 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    LOBYTE(v16) = 0;
    v17 = 0;
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 16))(v15, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t WebKit::WebPageProxy::backForwardListCounts(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 592);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_6;
  v3 = *(_QWORD *)(v3 + 8);
  if (!v3)
    goto LABEL_6;
  if (!*(_BYTE *)(v2 + 48))
  {
    v3 = 0;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v2 + 40);
  v4 = (unint64_t)(*(_DWORD *)(v2 + 36) + ~*(_DWORD *)(v2 + 40)) << 32;
LABEL_7:
  v7 = v4 | v3;
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v5 + 16))(v5, &v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebKit::WebPageProxy::registerEditCommandForUndo(WebKit::WebPageProxy *this, IPC::Connection *a2, uint64_t a3, const WTF::String *a4)
{
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  WebKit::WebEditCommandProxy *v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = (CFTypeRef *)API::Object::newObject(0x30uLL, 142);
  v12 = WebKit::WebEditCommandProxy::WebEditCommandProxy((WebKit::WebEditCommandProxy *)v8, a3, a4, this);
  if (!*((_QWORD *)v12 + 3))
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v14 = "void WebKit::WebPageProxy::registerEditCommandForUndo(IPC::Connection &, WebUndoStepID, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8705: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v12 = 0;
    goto LABEL_6;
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
  (*(void (**)(uint64_t, WebKit::WebEditCommandProxy **, _QWORD))(*(_QWORD *)v10 + 336))(v10, &v12, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  v8 = (CFTypeRef *)v12;
  v12 = 0;
  if (v8)
LABEL_6:
    CFRelease(v8[1]);
}

uint64_t WebKit::WebPageProxy::canUndoRedo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 352))(v6, a2);
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::executeUndoRedo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 360))(v6, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebKit::WebPageProxy::didGetImageForFindMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  CFTypeRef v5;
  WebKit *v6;
  uint64_t v7;
  int v8;
  CFTypeRef v9;
  __int16 v10;
  _BYTE v11[24];
  CFTypeRef cf;
  char v13;
  uint64_t v14;
  int v15;
  CFTypeRef v16;
  __int16 v17;
  _BYTE v18[72];
  WebKit *v19;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v4 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = v4;
  v10 = *(_WORD *)(a2 + 24);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v11, a3);
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v18, (uint64_t)v11);
  v18[64] = 1;
  WebKit::WebImage::create(&v14, &v19);
  std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
  if (v13)
  {
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  v6 = v19;
  if (!*((_QWORD *)v19 + 2))
  {
    v19 = 0;
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120), a1);
  v6 = v19;
  v19 = 0;
  if (v6)
LABEL_8:
    CFRelease(*((CFTypeRef *)v6 + 1));
}

void WebKit::WebPageProxy::setTextIndicatorFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v8;
  CFTypeRef *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const TextIndicatorData *v23;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  __int128 v38;
  _QWORD v39[2];

  v39[0] = a2;
  v39[1] = a3;
  v8 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v8)
  {
    v9 = (CFTypeRef *)v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = WebKit::WebFrameProxy::rootFrame(v9)[39];
    if (!v10 || (v11 = v10[1]) == 0)
    {
      v21 = *(_QWORD *)(a1 + 40);
      if (v21)
        v22 = *(_QWORD *)(v21 + 8);
      else
        v22 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1584))(v22);
      WebCore::TextIndicator::create((WebCore::TextIndicator *)a4, v23);
      (*(void (**)(uint64_t, _DWORD **, _QWORD))(*(_QWORD *)v22 + 688))(v22, &v25, a5);
      v24 = v25;
      v25 = 0;
      if (v24)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1592))(v22);
      goto LABEL_16;
    }
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v12 = *(_QWORD *)(v11 + 272);
    v13 = *(_QWORD *)(v11 + 280);
    v38 = a4[1];
    v37[0] = v39;
    v37[1] = &v38;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v14 = a4[1];
    v26 = *a4;
    v27 = v14;
    v25 = (_DWORD *)a1;
    v28 = a4[2];
    v29 = *((_QWORD *)a4 + 6);
    v15 = *((_QWORD *)a4 + 7);
    *((_QWORD *)a4 + 6) = 0;
    *((_QWORD *)a4 + 7) = 0;
    v30 = v15;
    v31 = *((_DWORD *)a4 + 16);
    v16 = *(__int128 *)((char *)a4 + 72);
    *((_QWORD *)a4 + 9) = 0;
    *((_QWORD *)a4 + 10) = 0;
    v32 = v16;
    v33 = *((_QWORD *)a4 + 11);
    *((_QWORD *)a4 + 11) = 0;
    WebCore::Color::Color();
    v34 = *((_DWORD *)a4 + 26);
    v35 = v11;
    v36 = a5;
    v17 = WebKit::WebFrameProxy::webFrame(v12, v13);
    if (v17)
    {
      v18 = v17;
      CFRetain(*(CFTypeRef *)(v17 + 8));
      v19 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v18 + 32) + 16));
      if (v19)
      {
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(*(_QWORD *)(v19 + 24), (uint64_t)v37, (uint64_t)&v25, *(_QWORD *)(v19 + 16));
        CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_11:
        WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0::~$_0((uint64_t *)&v25, v20);
LABEL_16:
        CFRelease(v9[1]);
        return;
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), (uint64_t)v37, (uint64_t)&v25, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
    goto LABEL_11;
  }
}

uint64_t *WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0::~$_0(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[13];
  if ((v4 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v5 = (_DWORD *)a1[12];
  a1[12] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)a1[11];
  a1[11] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)a1[10];
  a1[10] = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (WTF *)a1[7];
  if (v8)
  {
    a1[7] = 0;
    *((_DWORD *)a1 + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *a1;
  *a1 = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WebKit::WebPageProxy::clearTextIndicator(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 696))(v2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void WebKit::WebPageProxy::Internals::valueChangedForPopupMenu(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(v4 + 296);
  if (v5 || (v5 = *(_QWORD *)(v4 + 280)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v6 = *(_QWORD *)(v5 + 272);
    v7 = *(_QWORD *)(v5 + 280);
    v11 = a3;
    v8 = WebKit::WebFrameProxy::webFrame(v6, v7);
    if (v8)
    {
      v9 = v8;
      CFRetain(*(CFTypeRef *)(v8 + 8));
      v10 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v4 + 1344), (const WebKit::WebPageProxy *)v4, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v9 + 32) + 16));
      if (v10)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(*(_QWORD *)(v10 + 24), &v11, *(_QWORD *)(v10 + 16), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
LABEL_8:
        CFRelease(*(CFTypeRef *)(v5 + 8));
        goto LABEL_9;
      }
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(*(_QWORD *)(v4 + 208), &v11, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
    goto LABEL_8;
  }
LABEL_9:
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::WebPageProxy::Internals::setTextFromItemForPopupMenu(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(v4 + 208);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2432;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 4uLL, 4) = a3;
  LOBYTE(v13) = 0;
  v14 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v15, 0, (uint64_t)&v13, 1);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

_BYTE *WebKit::WebPageProxy::Internals::currentlyProcessedMouseDownEvent(WebKit::WebPageProxy::Internals *this)
{
  uint64_t v1;
  _BYTE *v3;

  v1 = *((_QWORD *)this + 105);
  if (v1 == *((_QWORD *)this + 106))
    return 0;
  v3 = (_BYTE *)(*((_QWORD *)this + 107) + (v1 << 7));
  if (*v3)
    return 0;
  else
    return v3;
}

void WebKit::WebPageProxy::postMessageToInjectedBundle(WebKit::WebPageProxy *this, WTF::StringImpl **a2, CFTypeRef *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  CFTypeRef *v18;
  CFTypeRef *v19;
  CFTypeRef *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  CFTypeRef *v25;
  CFTypeRef *v26;
  WTF::StringImpl *v27;
  CFTypeRef *v28;

  if (*((_BYTE *)this + 729) || !*((_BYTE *)this + 728))
  {
    v6 = *a2;
    if (*a2)
      *(_DWORD *)v6 += 2;
    v27 = v6;
    if (a3)
      CFRetain(a3[1]);
    v28 = a3;
    v7 = *((unsigned int *)this + 309);
    if ((_DWORD)v7 == *((_DWORD *)this + 308))
    {
      v8 = (uint64_t *)WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 306, v7 + 1, (unint64_t)&v27);
      v9 = *((unsigned int *)this + 309);
      v10 = v9 + 1;
      v11 = (_QWORD *)(*((_QWORD *)this + 153) + 16 * v9);
      v12 = *v8;
      *v8 = 0;
      *v11 = v12;
      v13 = v8[1];
      v8[1] = 0;
      v11[1] = v13;
      *((_DWORD *)this + 309) = v10;
      v14 = v28;
      v28 = 0;
      if (v14)
        CFRelease(v14[1]);
    }
    else
    {
      v21 = v7 + 1;
      v22 = *((_QWORD *)this + 153);
      v27 = 0;
      v23 = (WTF::StringImpl **)(v22 + 16 * v7);
      *v23 = v6;
      v23[1] = (WTF::StringImpl *)a3;
      *((_DWORD *)this + 309) = v21;
      v28 = 0;
    }
    v24 = v27;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  else
  {
    v15 = *((_QWORD *)this + 26);
    v16 = (unsigned int *)(v15 + 16);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v27 = (WTF::StringImpl *)&off_1E34D7358;
    WebKit::UserData::transform(a3, (uint64_t)&v27, (WebKit **)&v25);
    v18 = v25;
    if (v25)
      CFRetain(v25[1]);
    v26 = v18;
    v27 = (WTF::StringImpl *)a2;
    v28 = (CFTypeRef *)&v26;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(*((_QWORD *)this + 26), (uint64_t **)&v27, *(_QWORD *)(*((_QWORD *)this + 4) + 1896));
    v19 = v26;
    v26 = 0;
    if (v19)
      CFRelease(v19[1]);
    v20 = v25;
    v25 = 0;
    if (v20)
      CFRelease(v20[1]);
    if (v15)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
  }
}

void WebKit::WebPageProxy::showPopupMenuFromFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::IntRect *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v15;
  CFTypeRef *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _DWORD *v27;
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _DWORD *v41;
  NSObject *v42;
  _BYTE v43[16];
  _QWORD v44[2];
  _QWORD v45[2];
  __int128 buf;
  uint64_t v47;
  unsigned int v48;
  CFTypeRef cf;
  __int16 v50;
  char v51;
  _QWORD v52[4];

  v52[3] = *MEMORY[0x1E0C80C00];
  v45[0] = a3;
  v45[1] = a4;
  v15 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v15)
  {
    v16 = (CFTypeRef *)v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    v17 = WebKit::WebFrameProxy::rootFrame(v16)[39];
    if (v17)
    {
      v18 = v17[1];
      if (v18)
      {
        CFRetain(*(CFTypeRef *)(v18 + 8));
        v19 = *(_QWORD *)(v18 + 272);
        v20 = *(_QWORD *)(v18 + 280);
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v43, a5);
        v44[0] = v45;
        v44[1] = v43;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        *(_QWORD *)&buf = a1;
        *((_QWORD *)&buf + 1) = v18;
        v47 = a6;
        v48 = a8;
        v21 = *(const void **)a9;
        cf = v21;
        if (v21)
          CFRetain(v21);
        v50 = *(_WORD *)(a9 + 8);
        v51 = *(_BYTE *)(a9 + 10);
        v52[0] = *(_QWORD *)a7;
        v22 = *(_QWORD *)(a7 + 8);
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        v52[1] = v22;
        v23 = WebKit::WebFrameProxy::webFrame(v19, v20);
        if (v23)
        {
          v24 = v23;
          CFRetain(*(CFTypeRef *)(v23 + 8));
          v25 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v24 + 32) + 16));
          if (v25)
          {
            WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(*(_QWORD *)(v25 + 24), (uint64_t)v44, &buf, *(_QWORD *)(v25 + 16));
            CFRelease(*(CFTypeRef *)(v24 + 8));
LABEL_16:
            WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v26);
            v28 = cf;
            cf = 0;
            if (v28)
              CFRelease(v28);
            v29 = *((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v29)
              CFRelease(*(CFTypeRef *)(v29 + 8));
            v30 = buf;
            *(_QWORD *)&buf = 0;
            if (!v30)
              goto LABEL_30;
            v31 = *(const void **)(v30 + 8);
            goto LABEL_29;
          }
          CFRelease(*(CFTypeRef *)(v24 + 8));
        }
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(*(_QWORD *)(a1 + 208), (uint64_t)v44, &buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
        goto LABEL_16;
      }
    }
    if (a8 != -1 && *(_DWORD *)(a7 + 12) <= a8)
    {
      v42 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::showPopupMenu(IPC::Connection &, const IntRect &, uin"
                                        "t64_t, const Vector<WebPopupItem> &, int32_t, const PlatformPopupMenuData &)";
        _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 8879: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
      goto LABEL_30;
    }
    v27 = *(_DWORD **)(a1 + 472);
    *(_QWORD *)(a1 + 472) = 0;
    if (v27)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 24))(v27);
      *((_QWORD *)v27 + 2) = 0;
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      else
        --v27[2];
    }
    v32 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24))
          + 40);
    if (v32)
    {
      CFRetain(*(CFTypeRef *)(v32 + 8));
      if (*(_BYTE *)(a1 + 826))
      {
        if ((v33 = *(_QWORD *)(v32 + 176)) != 0 && *(_DWORD *)(v33 - 12) || *(_BYTE *)(v32 + 300))
        {
          v31 = *(const void **)(v32 + 8);
LABEL_29:
          CFRelease(v31);
LABEL_30:
          CFRelease(v16[1]);
          return;
        }
      }
      CFRelease(*(CFTypeRef *)(v32 + 8));
    }
    v34 = *(_QWORD *)(a1 + 40);
    if (v34)
      v35 = *(_QWORD *)(v34 + 8);
    else
      v35 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 1584))(v35);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v35 + 648))(&buf, v35, a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 1592))(v35);
    v36 = buf;
    if ((_QWORD)buf)
      ++*(_DWORD *)(buf + 8);
    v37 = *(_DWORD **)(a1 + 472);
    *(_QWORD *)(a1 + 472) = v36;
    if (v37)
    {
      if (v37[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
        if (!(_QWORD)buf)
          goto LABEL_30;
LABEL_44:
        v38 = *(_QWORD *)(a1 + 208);
        v39 = (unsigned int *)(v38 + 16);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
        WebKit::ResponsivenessTimer::stop((_BYTE *)(v38 + 56));
        if (v38)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v38 + 16));
        CFRetain(*(CFTypeRef *)(a1 + 8));
        (*(void (**)(double))(*(_QWORD *)buf + 16))(*(double *)(a1 + 640));
        CFRelease(*(CFTypeRef *)(a1 + 8));
        v41 = (_DWORD *)buf;
        *(_QWORD *)&buf = 0;
        if (v41)
        {
          if (v41[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
          else
            --v41[2];
        }
        goto LABEL_30;
      }
      --v37[2];
    }
    if (!v36)
      goto LABEL_30;
    goto LABEL_44;
  }
}

uint64_t WebKit::WebPageProxy::hidePopupMenu(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(this + 472);
  *(_QWORD *)(this + 472) = 0;
  if (v1)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 24))(v1);
    *((_QWORD *)v1 + 2) = 0;
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dispatchAfterCurrentContextMenuEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 780);
  if ((_DWORD)v3 == *(_DWORD *)(a1 + 776))
  {
    WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(a1 + 768, (unint64_t)a2);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 768);
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)(v4 + 8 * v3) = v5;
    *(_DWORD *)(a1 + 780) = v3 + 1;
  }
  return WebKit::WebPageProxy::processContextMenuCallbacks(a1, a2);
}

uint64_t WebKit::WebPageProxy::processContextMenuCallbacks(uint64_t this, void *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD *v9;
  int v10;
  int v11;

  v2 = *(unsigned __int8 *)(this + 760);
  if (v2 != 1)
  {
    v3 = *(_QWORD **)(this + 768);
    v9 = v3;
    v4 = *(unsigned int *)(this + 780);
    v10 = *(_DWORD *)(this + 776);
    v11 = v4;
    v8[0] = 0;
    *(_QWORD *)(this + 768) = 0;
    v8[1] = 0;
    *(_QWORD *)(this + 776) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, a2);
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *v3;
        *v3++ = 0;
        (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v7 + 16))(v7, v2 == 2);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v6 -= 8;
      }
      while (v6);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
  }
  return this;
}

unsigned int *WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebEditCommandProxy>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_DWORD *)(v8 - 4);
      if (!v9)
        goto LABEL_25;
      v10 = 0;
      do
      {
        while (1)
        {
          v11 = *(_QWORD *)(v8 + 8 * --v9);
          if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
            break;
          if (!v9)
            goto LABEL_14;
        }
        *(_QWORD *)(v8 + 8 * v9) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          WTF::fastFree((WTF *)v11, a2);
        }
        *(_QWORD *)(v8 + 8 * v9) = -1;
        ++v10;
      }
      while (v9);
LABEL_14:
      v8 = *(_QWORD *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        v14 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v10;
        v8 = *(_QWORD *)a1;
      }
      if (v8)
      {
        v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v8 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            v18 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v18 = *(_DWORD *)(v8 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_31;
        }
LABEL_29:
        v19 = v18;
        goto LABEL_30;
      }
    }
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v20 = a2[2];
  if (!v20)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a2;
    v22 = (unsigned int *)a2[2];
    a2[2] = v20;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = a2[2];
    }
  }
  do
    v25 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v25 + 1, (unsigned int *)v20));
  do
    v26 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v26 + 1, (unsigned int *)v20));
  v33 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v33, a3);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  if (v20)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v20);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v20));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v27);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::removeEditCommand(WebKit::WebPageProxy *this, WebKit::WebEditCommandProxy *a2)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>((uint64_t)this + 448, a2);
  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      v5 = *((_QWORD *)a2 + 3);
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveEditCommand>(*((_QWORD *)this + 26), &v5, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v22;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (!v7)
        goto LABEL_25;
      v8 = 0;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 8 * --v7);
          if ((unint64_t)(v9 + 1) >= 2 && !*(_QWORD *)(v9 + 8))
            break;
          if (!v7)
            goto LABEL_14;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, a2);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_14:
      v6 = *(_QWORD *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v8;
        v6 = *(_QWORD *)a1;
      }
      if (v6)
      {
        v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v6 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v6 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = a2[2];
  if (!v18 || !*(_QWORD *)(v18 + 8))
    return 0;
  v22 = a2[2];
  v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(_QWORD *)a1)
  {
    v20 = *(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if ((unsigned int **)v20 == v19)
      return 0;
  }
  else
  {
    if (!v19)
      return 0;
    v20 = 0;
  }
  if ((unsigned int **)v20 != v19)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  return 1;
}

uint64_t WebKit::WebPageProxy::checkTextOfParagraph(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _BYTE v13[16];

  if (*(_BYTE *)(a1 + 1096))
  {
    v6 = *(_QWORD *)(a1 + 1088);
  }
  else
  {
    v6 = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(_QWORD *)(a1 + 1088) = WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(_BYTE *)(a1 + 1096) = 1;
  }
  v7 = *a2;
  if (*a2)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebKit::TextChecker::checkTextOfParagraph(v6, v8, v9, a4, a3, (uint64_t)v13);
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v11);
}

uint64_t WebKit::WebPageProxy::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 1096))
  {
    *(_QWORD *)(a1 + 1088) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(_BYTE *)(a1 + 1096) = 1;
  }
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPageProxy::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (!*(_BYTE *)(a1 + 1096))
  {
    *(_QWORD *)(a1 + 1088) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(_BYTE *)(a1 + 1096) = 1;
  }
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, v6, 0, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WebKit::WebPageProxy::spellingUIIsShowing(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::WebPageProxy::getGuessesForWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  void *v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (!*(_BYTE *)(a1 + 1096))
  {
    *(_QWORD *)(a1 + 1088) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
    *(_BYTE *)(a1 + 1096) = 1;
  }
  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void WebKit::WebPageProxy::learnWord(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  int v3;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 209);
  if (v3)
  {
    *((_DWORD *)this + 209) = v3 - 1;
    if (!*((_BYTE *)this + 1096))
    {
      *((_QWORD *)this + 136) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
      *((_BYTE *)this + 1096) = 1;
    }
  }
  else
  {
    v5 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315138;
      v7 = "void WebKit::WebPageProxy::learnWord(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9340: Invalid message dispatched %s", (uint8_t *)&v6, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::ignoreWord(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  int v3;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 209);
  if (v3)
  {
    *((_DWORD *)this + 209) = v3 - 1;
    if (!*((_BYTE *)this + 1096))
    {
      *((_QWORD *)this + 136) = ++WebKit::TextChecker::uniqueSpellDocumentTag(WebKit::WebPageProxy *)::nextSpellDocumentTag;
      *((_BYTE *)this + 1096) = 1;
    }
  }
  else
  {
    v5 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v6 = 136315138;
      v7 = "void WebKit::WebPageProxy::ignoreWord(IPC::Connection &, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9348: Invalid message dispatched %s", (uint8_t *)&v6, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

WTF::StringImpl **WebKit::WebPageProxy::requestCheckingOfString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  __int128 v9;

  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v8 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v8 += 2;
  *(_QWORD *)(v6 + 16) = v8;
  v9 = *(_OWORD *)(a3 + 8);
  *(_WORD *)(v6 + 40) = *(_WORD *)(a3 + 24);
  *(_OWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 48) = a1;
  return WTF::RefCounted<WebKit::TextCheckerCompletion>::deref((WTF::StringImpl **)v6, v7);
}

unint64_t WebKit::WebPageProxy::focusFromServiceWorker(unint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 104) + 96))(*(_QWORD *)(a1 + 104), a1) & 1) != 0&& (*(_WORD *)(*(_QWORD *)(a1 + 32) + 48) & 4) == 0)
  {
    return WebKit::WebPageProxy::installActivityStateChangeCompletionHandler(a1, a2);
  }
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unint64_t WebKit::WebPageProxy::installActivityStateChangeCompletionHandler(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 729) || (v3 = result, !*(_BYTE *)(result + 728)))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = *(unsigned int *)(result + 980);
    if ((_DWORD)v4 == *(_DWORD *)(result + 976))
    {
      result = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 968, v4 + 1, (unint64_t)a2);
      v4 = *(unsigned int *)(v3 + 980);
      v5 = v4 + 1;
      v6 = *(_QWORD *)(v3 + 968);
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v5 = v4 + 1;
      v6 = *(_QWORD *)(result + 968);
      v7 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v6 + 8 * v4) = v7;
    *(_DWORD *)(v3 + 980) = v5;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::takeFocus(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 104) + 72))(*(_QWORD *)(a1 + 104), a1, (_DWORD)a2 == 1);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 768))(v6, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateEditorState(WebKit::WebPageProxy *a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t *v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  _OWORD v17[2];
  _BYTE v18[304];
  char v19;
  _BYTE v20[128];
  _BYTE v21[480];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3 == 2)
  {
    v5 = *((_QWORD *)a1 + 23);
    if (v5)
      a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5) ^ 1;
    else
      a3 = 1;
  }
  v6 = *((_QWORD *)a1 + 4);
  v7 = *(_QWORD *)a2;
  if (a3 == 1)
  {
    v9 = 0;
    v8 = a2[464] != 0;
  }
  else if (a3)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *(_BYTE *)(v6 + 688) != 0;
  }
  v11 = (_OWORD *)(v6 + 224);
  v10 = *(_QWORD *)(v6 + 224);
  v21[0] = 0;
  v22 = 0;
  if (v7 < v10)
  {
    if (!v8)
    {
LABEL_23:
      v15 = 0;
      goto LABEL_24;
    }
    std::optional<WebKit::EditorState>::operator=[abi:sn180100]<WebKit::EditorState&,void>((uint64_t)v21, v6 + 224);
    v12 = (uint64_t *)a2;
    goto LABEL_20;
  }
  v17[0] = *v11;
  *(_DWORD *)((char *)v17 + 15) = *(_DWORD *)(v6 + 239);
  v18[0] = 0;
  v19 = 0;
  if (*(_BYTE *)(v6 + 560))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>((uint64_t)v18, (__int128 *)(v6 + 256));
    v19 = 1;
  }
  std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100]((uint64_t)v20, (__int128 *)(v6 + 576));
  v13 = *(_OWORD *)a2;
  *(_DWORD *)(v6 + 239) = *(_DWORD *)(a2 + 15);
  *v11 = v13;
  std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>((WebKit::EditorState::PostLayoutData *)(v6 + 256), (unsigned __int8 *)a2 + 32);
  std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(v6 + 576, (uint64_t *)a2 + 44);
  std::optional<WebKit::EditorState>::operator=[abi:sn180100]<WebKit::EditorState,void>((uint64_t)v21, (uint64_t)v17);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v14);
  if (v19)
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v18, a2);
  if (v9)
  {
    if (!v22)
      __break(1u);
    v12 = (uint64_t *)v21;
LABEL_20:
    std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(*((_QWORD *)a1 + 4) + 576, v12 + 44);
  }
  if (!v22)
    goto LABEL_23;
  WebKit::WebPageProxy::didUpdateEditorState(a1, v21, a2);
  v15 = 1;
LABEL_24:
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](v21, a2);
  return v15;
}

uint64_t std::optional<WebKit::EditorState>::operator=[abi:sn180100]<WebKit::EditorState,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 480))
  {
    v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    *(_OWORD *)a1 = v4;
    std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)(a1 + 32), (unsigned __int8 *)(a2 + 32));
    std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(a1 + 352, (__int128 *)(a2 + 352));
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 480) = 1;
  }
  return a1;
}

uint64_t std::optional<WebKit::EditorState>::operator=[abi:sn180100]<WebKit::EditorState&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 480))
  {
    v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    *(_OWORD *)a1 = v4;
    std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>((WebKit::EditorState::PostLayoutData *)(a1 + 32), (unsigned __int8 *)(a2 + 32));
    std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(a1 + 352, (uint64_t *)(a2 + 352));
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState&,WebKit::EditorState*>(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 480) = 1;
  }
  return a1;
}

WTF *WebKit::WebPageProxy::logDiagnosticMessage(WTF *result, uint64_t a2, uint64_t a3, int a4)
{
  WTF *v6;
  uint64_t v7;
  double v8;

  v6 = result;
  v7 = *(_QWORD *)(*((_QWORD *)result + 33) + 24);
  if ((v7 & 0x8000000000000000) == 0 || v7 == -1)
  {
    if (!a4 || (result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v8 <= 0.05))
    {
      result = (WTF *)*((_QWORD *)v6 + 16);
      if (result)
        return (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6, a2, a3);
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess(WTF *a1, uint64_t a2, WTF::String *this, uint64_t a4, int a5)
{
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessage(a1, (uint64_t)this, a4, a5);
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315138;
      v12 = "void WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess(IPC::Connection &, const String &, const Strin"
            "g &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9655: Invalid message dispatched %s", (uint8_t *)&v11, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

WTF *WebKit::WebPageProxy::logDiagnosticMessageWithResult(WTF *result, uint64_t a2, uint64_t a3, unsigned __int8 a4, int a5)
{
  WTF *v8;
  uint64_t v9;
  double v10;

  v8 = result;
  v9 = *(_QWORD *)(*((_QWORD *)result + 33) + 24);
  if ((v9 & 0x8000000000000000) == 0 || v9 == -1)
  {
    if (!a5 || (result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v10 <= 0.05))
    {
      result = (WTF *)*((_QWORD *)v8 + 16);
      if (result)
        return (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, v8, a2, a3, a4);
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess(WTF *a1, uint64_t a2, WTF::String *this, uint64_t a4, unsigned __int8 a5, int a6)
{
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithResult(a1, (uint64_t)this, a4, a5, a6);
  }
  else
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v13 = 136315138;
      v14 = "void WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess(IPC::Connection &, const String &, c"
            "onst String &, uint32_t, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9671: Invalid message dispatched %s", (uint8_t *)&v13, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

WTF::StringImpl *WebKit::WebPageProxy::logDiagnosticMessageWithValue(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  v8 = *(_QWORD *)(*((_QWORD *)result + 33) + 24);
  if ((v8 & 0x8000000000000000) == 0 || v8 == -1)
  {
    if (!a5 || (result = (WTF::StringImpl *)WTF::cryptographicallyRandomUnitInterval(result), v9 <= 0.05))
    {
      v10 = *((_QWORD *)v7 + 16);
      if (v10)
      {
        WTF::String::numberToStringFixedPrecision();
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 32))(v10, v7, a2, a3, &v12);
        result = v12;
        v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess(WTF::StringImpl *a1, uint64_t a2, WTF::String *this, uint64_t a4, uint64_t a5, int a6)
{
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithValue(a1, (uint64_t)this, a4, a5, a6);
  }
  else
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v13 = 136315138;
      v14 = "void WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess(IPC::Connection &, const String &, co"
            "nst String &, double, unsigned int, ShouldSample)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9687: Invalid message dispatched %s", (uint8_t *)&v13, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

WTF *WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(WTF *result, uint64_t a2, uint64_t a3, int a4)
{
  WTF *v6;
  uint64_t v7;
  double v8;

  v6 = result;
  v7 = *(_QWORD *)(*((_QWORD *)result + 33) + 24);
  if ((v7 & 0x8000000000000000) == 0 || v7 == -1)
  {
    if (!a4 || (result = (WTF *)WTF::cryptographicallyRandomUnitInterval(result), v8 <= 0.05))
    {
      result = (WTF *)*((_QWORD *)v6 + 16);
      if (result)
        return (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v6, a2, a3);
    }
  }
  return result;
}

void WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(WTF *a1, uint64_t a2, WTF::String *this, uint64_t a4, int a5)
{
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(a1, (uint64_t)this, a4, a5);
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315138;
      v12 = "void WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(IPC::Connection &, const St"
            "ring &, const String &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9703: Invalid message dispatched %s", (uint8_t *)&v11, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF *a1, uint64_t a2, uint64_t a3, _QWORD **a4, int a5)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  WebKit *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  uint64_t v18;
  WebKit *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebKit *v23;
  int v24;
  int v25;
  WTF::String *v26;
  uint64_t v27;
  uint64_t v28;
  WebKit *v29;
  _QWORD v30[3];

  v9 = *(_QWORD *)(*((_QWORD *)a1 + 33) + 24);
  if ((v9 & 0x8000000000000000) == 0 || v9 == -1)
  {
    if (!a5 || (WTF::cryptographicallyRandomUnitInterval(a1), v10 <= 0.05))
    {
      v11 = *((_QWORD *)a1 + 16);
      if (v11)
      {
        v12 = (WebKit *)API::Object::newObject(0x18uLL, 9);
        *(_QWORD *)v12 = off_1E34CC2A8;
        WebKit::InitializeWebKit2(v12);
        *(_QWORD *)v12 = &off_1E34CC280;
        *((_QWORD *)v12 + 2) = 0;
        v29 = v12;
        v13 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a4);
        v14 = v13;
        v16 = v15;
        if (*a4)
          v17 = (uint64_t)&(*a4)[3 * *((unsigned int *)*a4 - 1)];
        else
          v17 = 0;
        if ((WTF::StringImpl **)v17 == v13)
        {
LABEL_19:
          (*(void (**)(uint64_t, WTF *, uint64_t, uint64_t, WebKit **))(*(_QWORD *)v11 + 48))(v11, a1, a2, a3, &v29);
          v23 = v29;
          v29 = 0;
          if (v23)
            CFRelease(*((CFTypeRef *)v23 + 1));
        }
        else
        {
          while (1)
          {
            v18 = *((unsigned int *)v14 + 4);
            if ((_DWORD)v18 == -1)
              break;
            v19 = v29;
            v30[0] = &v28;
            ((void (*)(uint64_t *__return_ptr, _QWORD *, WTF::StringImpl **))*(&off_1E34D5638 + v18))(&v27, v30, v14 + 1);
            v20 = v27;
            v27 = 0;
            v28 = v20;
            WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v19 + 2, v14, &v28, (uint64_t)v30);
            v21 = v28;
            v28 = 0;
            if (v21)
              CFRelease(*(CFTypeRef *)(v21 + 8));
            v22 = v27;
            v27 = 0;
            if (v22)
              CFRelease(*(CFTypeRef *)(v22 + 8));
            while (1)
            {
              v14 += 3;
              if (v14 == v16)
                break;
              if ((unint64_t)*v14 + 1 > 1)
                goto LABEL_18;
            }
            v14 = v16;
LABEL_18:
            if (v14 == (WTF::StringImpl **)v17)
              goto LABEL_19;
          }
          v24 = std::__throw_bad_variant_access[abi:sn180100]();
          WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(v24, v25, v26);
        }
      }
    }
  }
}

void WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(WTF *a1, uint64_t a2, WTF::String *this, uint64_t a4, _QWORD **a5, int a6)
{
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(a1, (uint64_t)this, a4, a5, a6);
  }
  else
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v13 = 136315138;
      v14 = "void WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(IPC::Connection &, const St"
            "ring &, const String &, const WebCore::DiagnosticLoggingClient::ValueDictionary &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9731: Invalid message dispatched %s", (uint8_t *)&v13, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess(uint64_t a1, uint64_t a2, WTF::String *this, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (WTF::String::containsOnlyASCII(this))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
    if ((v8 & 0x8000000000000000) == 0 || v8 == -1)
    {
      v9 = *(_QWORD *)(a1 + 128);
      if (v9)
        (*(void (**)(uint64_t, uint64_t, WTF::String *, uint64_t))(*(_QWORD *)v9 + 56))(v9, a1, this, a4);
    }
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315138;
      v12 = "void WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess(IPC::Connection &, const String &, W"
            "ebCore::DiagnosticLoggingDomain)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9747: Invalid message dispatched %s", (uint8_t *)&v11, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::logScrollingEvent(uint64_t a1, int a2, uint64_t a3)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  switch(a2)
  {
    case 0:
    case 4:
      WTFLogAlways();
      break;
    case 1:
    case 2:
      goto LABEL_7;
    case 3:
      if (a3)
      {
        WebCore::PerformanceLoggingClient::synchronousScrollingReasonsAsString();
        WTF::String::utf8();
        WTFLogAlways();
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, v3);
          else
            --*(_DWORD *)v5;
        }
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v3);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
      else
      {
LABEL_7:
        WTFLogAlways();
      }
      break;
    default:
      return;
  }
}

void WebKit::WebPageProxy::focusedFrameChanged(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a3 + 16))
  {
    v4 = a3;
    v6 = WebKit::WebFrameProxy::webFrame(*a3, a3[1]);
    if (v6)
    {
      v7 = v6;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      v8 = a1[37];
      a1[37] = v7;
      if (v8)
        CFRelease(*(CFTypeRef *)(v8 + 8));
      if (*((_BYTE *)v4 + 16))
      {
        WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(a1, a2, v4);
        return;
      }
      __break(1u);
    }
    else
    {
      v4 = (uint64_t *)off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_10:
        *(_BYTE *)(a2 + 98) = 1;
        return;
      }
    }
    v10 = 136315138;
    v11 = "void WebKit::WebPageProxy::focusedFrameChanged(IPC::Connection &, const std::optional<FrameIdentifier> &)";
    _os_log_fault_impl(&dword_196BCC000, (os_log_t)v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 9786: Invalid message dispatched %s", (uint8_t *)&v10, 0xCu);
    goto LABEL_10;
  }
  v9 = a1[37];
  a1[37] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

void WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = WebKit::WebFrameProxy::webFrame(*a3, a3[1]);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E34D5EB8;
    v8[1] = a2;
    v8[2] = a3;
    v10 = v8;
    WebKit::WebPageProxy::forEachWebContentProcess(a1, &v10);
    v9 = v10;
    v10 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPageProxy::processDidBecomeUnresponsive(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebKit::WebPageProxy *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    v7 = 134218752;
    v8 = this;
    v9 = 2048;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidBecomeUnresponsive:", (uint8_t *)&v7, 0x26u);
  }
  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      WebKit::WebPageProxy::updateBackingStoreDiscardableState(this);
      (*(void (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 9) + 264))(*((_QWORD *)this + 9), this);
    }
  }
}

void WebKit::WebPageProxy::processDidBecomeResponsive(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WebKit::WebPageProxy *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    v7 = 134218752;
    v8 = this;
    v9 = 2048;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    v13 = 1024;
    v14 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::processDidBecomeResponsive:", (uint8_t *)&v7, 0x26u);
  }
  if (!*((_BYTE *)this + 729))
  {
    if (*((_BYTE *)this + 728))
    {
      WebKit::WebPageProxy::updateBackingStoreDiscardableState(this);
      (*(void (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 9) + 256))(*((_QWORD *)this + 9), this);
    }
  }
}

void WebKit::WebPageProxy::dispatchProcessDidTerminate(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    v10 = *(_QWORD *)(v8 + 744);
    v11 = *(_QWORD *)(v8 + 1896);
    v12 = "ExceededMemoryLimit";
    switch((int)a2)
    {
      case 0:
        break;
      case 1:
        v12 = "ExceededCPULimit";
        break;
      case 2:
        v12 = "RequestedByClient";
        break;
      case 3:
        v12 = "IdleExit";
        break;
      case 4:
        v12 = "Unresponsive";
        break;
      case 5:
        v12 = "Crash";
        break;
      case 6:
        v12 = "ExceededProcessCountLimit";
        break;
      case 7:
        v12 = "NavigationSwap";
        break;
      case 8:
        v12 = "RequestedByNetworkProcess";
        break;
      case 9:
        v12 = "RequestedByGPUProcess";
        break;
      default:
        v12 = (const char *)&str_10_5;
        break;
    }
    v16 = 134219010;
    v17 = a1;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    v22 = 1024;
    v23 = v9;
    v24 = 2082;
    v25 = v12;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::dispatchProcessDidTerminate: reason=%{public}s", (uint8_t *)&v16, 0x30u);
  }
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    if ((_DWORD)a2 == 2 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a1) & 1) != 0)
      return;
  }
  else if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 248))(*(_QWORD *)(a1 + 72), a1, a2) & 1) != 0)
  {
    return;
  }
  if (a2 <= 9 && ((1 << a2) & 0x333) != 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if ((*(_WORD *)(v6 + 48) & 4) != 0)
    {
      WebKit::WebPageProxy::tryReloadAfterProcessTermination((WebKit::WebPageProxy *)a1);
    }
    else
    {
      v7 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_QWORD *)(v6 + 744);
        v14 = *(_QWORD *)(v6 + 1896);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
        if (v15)
          LODWORD(v15) = *(_DWORD *)(v15 + 108);
        v16 = 134218752;
        v17 = a1;
        v18 = 2048;
        v19 = v13;
        v20 = 2048;
        v21 = v14;
        v22 = 1024;
        v23 = v15;
        _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::dispatchProcessDidTerminate: Not eagerly reloading the view because it is not currently visible", (uint8_t *)&v16, 0x26u);
      }
      *(_BYTE *)(a1 + 858) = 1;
    }
  }
}

void WebKit::WebPageProxy::tryReloadAfterProcessTermination(WebKit::WebPageProxy *this)
{
  unsigned int v2;
  NSObject *v3;
  char v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint8_t buf[4];
  WebKit::WebPageProxy *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  CFTypeRef cf;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((_QWORD *)this + 4) + 1680));
  v2 = *((_DWORD *)this + 278) + 1;
  *((_DWORD *)this + 278) = v2;
  if (v2 < 2)
  {
    WTF::URL::URL((uint64_t)&v24, (WTF::StringImpl **)(*((_QWORD *)this + 4) + 984));
    v4 = v25;
    v5 = qword_1ECE71C68;
    v6 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    if ((v4 & 1) != 0)
    {
      if (v6)
      {
        v12 = *((_QWORD *)this + 4);
        v13 = *(_QWORD *)(v12 + 744);
        v14 = *(_QWORD *)(v12 + 1896);
        v15 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v15)
          LODWORD(v15) = *(_DWORD *)(v15 + 108);
        *(_DWORD *)buf = 134218752;
        v27 = this;
        v28 = 2048;
        v29 = v13;
        v30 = 2048;
        v31 = v14;
        v32 = 1024;
        v33 = v15;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, loading the pending API request URL again", buf, 0x26u);
      }
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, (const WTF::URL *)&v24, 0);
      cf = 0;
      WebKit::WebPageProxy::loadRequest((uint64_t)this, (WebCore::ResourceRequestBase *)buf, 1, 0, &v23);
      if (v23)
        CFRelease(*(CFTypeRef *)(v23 + 8));
      v16 = cf;
      cf = 0;
      if (v16)
        CFRelease(v16);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    }
    else
    {
      if (v6)
      {
        v7 = *((_QWORD *)this + 4);
        v8 = *(_QWORD *)(v7 + 744);
        v9 = *(_QWORD *)(v7 + 1896);
        v10 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v10)
          LODWORD(v10) = *(_DWORD *)(v10 + 108);
        *(_DWORD *)buf = 134218752;
        v27 = this;
        v28 = 2048;
        v29 = v8;
        v30 = 2048;
        v31 = v9;
        v32 = 1024;
        v33 = v10;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, reloading the page", buf, 0x26u);
      }
      WebKit::WebPageProxy::reload(&v22, this, 1);
      if (v22)
        CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  else
  {
    v3 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v18 = *((_QWORD *)this + 4);
      v19 = *(_QWORD *)(v18 + 744);
      v20 = *(_QWORD *)(v18 + 1896);
      v21 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      *(_DWORD *)buf = 134218752;
      v27 = this;
      v28 = 2048;
      v29 = v19;
      v30 = 2048;
      v31 = v20;
      v32 = 1024;
      v33 = v21;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::tryReloadAfterProcessTermination: process crashed and the client did not handle it, not reloading the page because we reached the maximum number of attempts", buf, 0x26u);
    }
    *((_DWORD *)this + 278) = 0;
  }
}

uint64_t std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(uint64_t a1, _DWORD *a2)
{
  int v4;
  char v5;
  WebKit::WebExtensionContextParameters **v6;
  unsigned int v7;
  WebKit::WebExtensionContextParameters *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = (WebKit::WebExtensionContextParameters **)(a1 + 16);
  if (v4)
  {
    v7 = *(_DWORD *)(a1 + 28);
    if (v7)
    {
      v8 = *v6;
      v9 = 152 * v7;
      do
      {
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v8, a2);
        v8 = (WebKit::WebExtensionContextParameters *)(v10 + 152);
        v9 -= 152;
      }
      while (v9);
    }
    WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v6, a2 + 4);
  }
  else
  {
    *v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v11 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v11;
    LODWORD(v11) = a2[6];
    a2[6] = 0;
    *(_DWORD *)(a1 + 24) = v11;
    LODWORD(v11) = a2[7];
    a2[7] = 0;
    *(_DWORD *)(a1 + 28) = v11;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::creationParametersForRemotePage@<X0>(uint64_t a1@<X0>, WebKit::WebProcessProxy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v9;
  _BYTE v11[24];
  uint64_t v12;
  _BYTE v13[208];

  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::RemotePageParameters>((uint64_t)v13, a4);
  v12 = 0;
  v11[0] = 0;
  v11[16] = 0;
  WebKit::WebPageProxy::creationParameters(a1, a2, a3, (uint64_t)v13, 1, (uint64_t)&v12, (uint64_t)v11, a5);
  return std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2598;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5670;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

uint64_t WebKit::WebPageProxy::enterAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 736))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

uint64_t WebKit::WebPageProxy::exitAcceleratedCompositingMode(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 744))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

uint64_t WebKit::WebPageProxy::updateAcceleratedCompositingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 752))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void WebKit::WebPageProxy::backForwardClear(WebKit::WebPageProxy *this)
{
  CFTypeRef *v1;

  v1 = (CFTypeRef *)*((_QWORD *)this + 74);
  CFRetain(v1[1]);
  WebKit::WebBackForwardList::clear((WebKit::WebBackForwardList *)v1);
  CFRelease(v1[1]);
}

uint64_t WebKit::WebPageProxy::recentGamepadAccessStateChanged(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
    if (a2)
      v6 = 82;
    else
      v6 = 81;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 1856))(v5, a2 ^ 1u);
    v7 = 0;
  }
  else
  {
    v5 = 0;
    if (a2)
      v6 = 82;
    else
      v6 = 81;
    v7 = 1;
  }
  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 8 * v6))();
  if ((v7 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  return result;
}

uint64_t WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *a2;
  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 216))(*(_QWORD *)(a1 + 72), a1, v5);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v7 = *a2;
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E34D5698;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v7;
  v10 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v4 + 224))(v4, a1, v5, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebPageProxy::negotiatedLegacyTLS(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v3 + 960);
  v5 = v3;
  if (v4)
  {
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v5 = *((_QWORD *)this + 4);
  }
  v7[0] = v4;
  v7[1] = v3 + 944;
  ++*(_DWORD *)(v3 + 1316);
  *(_BYTE *)(v3 + 1312) = 1;
  *(_BYTE *)(v5 + 1138) = 1;
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v7, a2, a3);
}

uint64_t WebKit::WebPageProxy::exceededDatabaseQuota(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::StringImpl **a4, _DWORD **a5, _DWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v22;

  v18 = *a11;
  *a11 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E34D56C0;
  v19[1] = v18;
  v22 = v19;
  WebKit::WebPageProxy::requestStorageSpace(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t *)&v22);
  result = (uint64_t)v22;
  if (v22)
    return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
  return result;
}

void WebKit::WebPageProxy::requestStorageSpace(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::StringImpl **a4, _DWORD **a5, _DWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  WTF *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  _BYTE buf[24];
  __int128 v70;
  WTF::StringImpl *v71;
  _BYTE v72[32];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v18 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(v19 + 744);
    v21 = *(_QWORD *)(v19 + 1896);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v22)
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v70 = v21;
    WORD4(v70) = 1024;
    *(_DWORD *)((char *)&v70 + 10) = v22;
    HIWORD(v70) = 2048;
    v71 = a2;
    *(_WORD *)v72 = 2048;
    *(_QWORD *)&v72[2] = a7;
    *(_WORD *)&v72[10] = 2048;
    *(_QWORD *)&v72[12] = a9;
    *(_WORD *)&v72[20] = 2048;
    *(_QWORD *)&v72[22] = a10;
    _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::requestStorageSpace for frame %llu, current quota %llu current usage %llu expected usage %llu", buf, 0x4Eu);
  }
  if ((_MergedGlobals_91 & 1) == 0)
  {
    byte_1ECE72DB0 = 0;
    xmmword_1ECE72D90 = 0u;
    *(_OWORD *)&qword_1ECE72DA0 = 0u;
    _MergedGlobals_91 = 1;
  }
  *(_QWORD *)buf = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(_QWORD *)&buf[8] = a1;
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a1, (WTF::StringImpl **)&buf[16]);
  *(_QWORD *)&v70 = a2;
  *((_QWORD *)&v70 + 1) = a3;
  v23 = *a4;
  if (*a4)
    *(_DWORD *)v23 += 2;
  v71 = v23;
  v24 = *a5;
  if (*a5)
    *v24 += 2;
  *(_QWORD *)v72 = v24;
  v25 = *a6;
  if (*a6)
    *v25 += 2;
  *(_QWORD *)&v72[8] = v25;
  *(_QWORD *)&v72[16] = a7;
  *(_QWORD *)&v72[24] = a8;
  *(_QWORD *)&v73 = a9;
  v26 = *a11;
  *a11 = 0;
  *((_QWORD *)&v73 + 1) = a10;
  v74 = v26;
  v27 = WTF::fastMalloc((WTF *)0x70);
  v29 = v27;
  *(_QWORD *)v27 = off_1E34D56E8;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)buf;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)&buf[8];
  v30 = *(_QWORD *)&buf[16];
  *(_OWORD *)&buf[8] = 0uLL;
  *(_QWORD *)(v27 + 24) = v30;
  *(_OWORD *)(v27 + 32) = v70;
  v31 = v71;
  if (v71)
    *(_DWORD *)v71 += 2;
  *(_QWORD *)(v27 + 48) = v31;
  v32 = *(_QWORD *)v72;
  if (*(_QWORD *)v72)
    **(_DWORD **)v72 += 2;
  *(_QWORD *)(v27 + 56) = v32;
  v33 = *(_QWORD *)&v72[8];
  if (*(_QWORD *)&v72[8])
    **(_DWORD **)&v72[8] += 2;
  *(_QWORD *)(v27 + 64) = v33;
  v34 = *(_OWORD *)&v72[16];
  *(_OWORD *)(v27 + 88) = v73;
  *(_OWORD *)(v27 + 72) = v34;
  v35 = v74;
  v74 = 0;
  *(_QWORD *)(v27 + 104) = v35;
  if (byte_1ECE72DB0)
  {
    v36 = *((_QWORD *)&xmmword_1ECE72D90 + 1);
    if ((_QWORD)xmmword_1ECE72D90)
    {
      v37 = dword_1ECE72DA8;
      if (*((_QWORD *)&xmmword_1ECE72D90 + 1) + 1 != (_QWORD)xmmword_1ECE72D90)
        goto LABEL_55;
    }
    else
    {
      v37 = dword_1ECE72DA8;
      if (*((_QWORD *)&xmmword_1ECE72D90 + 1))
      {
        if (*((_QWORD *)&xmmword_1ECE72D90 + 1) != dword_1ECE72DA8 - 1)
          goto LABEL_55;
      }
      else if (dword_1ECE72DA8)
      {
        v36 = 0;
LABEL_55:
        *(_QWORD *)(qword_1ECE72DA0 + 8 * v36) = v29;
        if (v36 == v37 - 1)
          v61 = 0;
        else
          v61 = v36 + 1;
        *((_QWORD *)&xmmword_1ECE72D90 + 1) = v61;
        goto LABEL_59;
      }
    }
    v38 = v37;
    v39 = ((unint64_t)v37 >> 2) + v37;
    if (v39 <= 0xF)
      v39 = 15;
    if (v39 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    v40 = (WTF *)qword_1ECE72DA0;
    v41 = v39 + 1;
    v42 = WTF::fastMalloc((WTF *)(8 * (v39 + 1)));
    v43 = (_QWORD *)v42;
    dword_1ECE72DA8 = v41;
    qword_1ECE72DA0 = v42;
    v44 = xmmword_1ECE72D90;
    if ((unint64_t)xmmword_1ECE72D90 <= *((_QWORD *)&xmmword_1ECE72D90 + 1))
    {
      if ((_QWORD)xmmword_1ECE72D90 != *((_QWORD *)&xmmword_1ECE72D90 + 1))
      {
        v56 = (_QWORD *)(v42 + 8 * xmmword_1ECE72D90);
        v57 = (uint64_t *)((char *)v40 + 8 * xmmword_1ECE72D90);
        v58 = 8 * *((_QWORD *)&xmmword_1ECE72D90 + 1) - 8 * xmmword_1ECE72D90;
        do
        {
          v59 = *v57;
          *v57 = 0;
          *v56 = v59;
          v60 = *v57;
          *v57 = 0;
          if (v60)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          ++v56;
          ++v57;
          v58 -= 8;
        }
        while (v58);
      }
    }
    else
    {
      if (*((_QWORD *)&xmmword_1ECE72D90 + 1))
      {
        v45 = 8 * *((_QWORD *)&xmmword_1ECE72D90 + 1);
        v46 = v40;
        do
        {
          v47 = *(_QWORD *)v46;
          *(_QWORD *)v46 = 0;
          *v43 = v47;
          v48 = *(_QWORD *)v46;
          *(_QWORD *)v46 = 0;
          if (v48)
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
          ++v43;
          v46 = (WTF *)((char *)v46 + 8);
          v45 -= 8;
        }
        while (v45);
        v41 = dword_1ECE72DA8;
        v44 = xmmword_1ECE72D90;
        v43 = (_QWORD *)qword_1ECE72DA0;
      }
      v49 = v44 - v38 + v41;
      if (v44 != v38)
      {
        v50 = v41;
        v51 = (uint64_t *)((char *)v40 + 8 * v44);
        v52 = &v43[v50];
        v53 = 8 * v44 - 8 * v38;
        do
        {
          v54 = *v51;
          *v51 = 0;
          *(_QWORD *)((char *)v52 + v53) = v54;
          v55 = *v51;
          *v51 = 0;
          if (v55)
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
          ++v51;
          v53 += 8;
        }
        while (v53);
      }
      *(_QWORD *)&xmmword_1ECE72D90 = v49;
    }
    if (v40)
    {
      if ((WTF *)qword_1ECE72DA0 == v40)
      {
        qword_1ECE72DA0 = 0;
        dword_1ECE72DA8 = 0;
      }
      WTF::fastFree(v40, v28);
    }
    v36 = *((_QWORD *)&xmmword_1ECE72D90 + 1);
    v37 = dword_1ECE72DA8;
    goto LABEL_55;
  }
  byte_1ECE72DB0 = 1;
  WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
LABEL_59:
  v62 = v74;
  v74 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *(WTF::StringImpl **)&v72[8];
  *(_QWORD *)&v72[8] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = *(WTF::StringImpl **)v72;
  *(_QWORD *)v72 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v71;
  v71 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = *(WTF::StringImpl **)&buf[16];
  *(_QWORD *)&buf[16] = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = *(_QWORD *)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v67)
    CFRelease(*(CFTypeRef *)(v67 + 8));
}

_QWORD *WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v3 = a1[12];
  a1[12] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return a1;
}

void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int **v17;
  NSObject *v18;
  const char *v19;
  _QWORD *v20;
  _BYTE buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a4 + 248);
  if (!v6)
  {
    v18 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_17:
      *(_BYTE *)(a2 + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &, GeolocationI"
                         "dentifier, FrameInfoData &&)";
    v19 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10765: Invalid message dispatched %s";
LABEL_19:
    _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, v19, buf, 0xCu);
    goto LABEL_17;
  }
  v9 = WebKit::WebFrameProxy::webFrame(v6, *(_QWORD *)(a4 + 256));
  if (!v9)
  {
    v18 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &, GeolocationI"
                         "dentifier, FrameInfoData &&)";
    v19 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10767: Invalid message dispatched %s";
    goto LABEL_19;
  }
  v10 = v9;
  CFRetain(*(CFTypeRef *)(v9 + 8));
  WebKit::GeolocationPermissionRequestManagerProxy::createRequest((uint64_t *)(*(_QWORD *)(a1 + 32) + 712), a3, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16), (uint64_t *)buf);
  v11 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34D5760;
  v12[1] = v11;
  v20 = v12;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(a1 + 104) + 304))(*(_QWORD *)(a1 + 104), a1, v10, a4, &v20);
  if (v20)
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = v14 ? *(_QWORD *)(v14 + 8) : 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1584))(v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v15 + 184))(v15, v10, a4, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1592))(v15);
    if (v20)
    {
      (*(void (**)(_QWORD *, _QWORD))(*v20 + 16))(v20, 0);
      v16 = v20;
      v20 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  v17 = *(unsigned int ***)buf;
  *(_QWORD *)buf = 0;
  if (v17)
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v17, v13);
  CFRelease(*(CFTypeRef *)(v10 + 8));
}

void WebKit::WebPageProxy::queryPermission(uint64_t a1, const WebCore::ClientOrigin *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  WebKit::UserMediaPermissionRequestManagerProxy *v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  BOOL v17;
  BOOL v18;
  WebKit::UserMediaPermissionRequestManagerProxy *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  BOOL v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebKit::UserMediaPermissionRequestManagerProxy *v32;
  WebKit::UserMediaPermissionRequestManagerProxy *v33;
  BOOL v34;
  WebKit::UserMediaPermissionRequestManagerProxy *v35;
  WebKit::UserMediaPermissionRequestManagerProxy *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;
  _QWORD v43[3];
  int v44;
  _BYTE v45[24];
  int v46;
  __int16 v47;
  BOOL v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 272))
  {
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 257);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return;
  }
  switch(*a3)
  {
    case 3:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = (WTF::StringImpl *)v43[0];
      v41 = (WTF::StringImpl *)v43[0];
      v14 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v18 = (WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(v14, v15, v16) & 1) != 0
         || WebKit::checkUsageDescriptionStringForType((WebKit *)2, v17);
      v32 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v11 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForCamera(v32, a2);
      v33 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v34 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForCamera(v33, a2);
      goto LABEL_39;
    case 5:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = 0;
      v9 = (WTF::StringImpl *)v43[0];
      v41 = (WTF::StringImpl *)v43[0];
      v11 = 1;
      goto LABEL_12;
    case 8:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = (WTF::StringImpl *)v43[0];
      v41 = (WTF::StringImpl *)v43[0];
      v19 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v18 = (WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(v19, v20, v21) & 1) != 0
         || WebKit::checkUsageDescriptionStringForType((WebKit *)1, v22);
      v35 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v11 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForMicrophone(v35, a2);
      v36 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)a1);
      v34 = WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForMicrophone(v36, a2);
LABEL_39:
      v13 = v34;
      if (!v9)
        goto LABEL_40;
      goto LABEL_13;
    case 0xB:
    case 0xC:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = (WTF::StringImpl *)v43[0];
      v41 = (WTF::StringImpl *)v43[0];
      v10 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)(*(_QWORD *)(a1 + 32) + 2128), (uint64_t)a2);
      v11 = v10 ^ 1;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
      if ((v12 & 0x8000000000000000) == 0 || v12 == -1)
      {
        v13 = 0;
LABEL_12:
        v18 = 1;
        if (!v9)
        {
LABEL_40:
          v37 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          return;
        }
LABEL_13:
        if (!v18)
        {
          if (v11)
            v28 = 258;
          else
            v28 = 257;
          v29 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v28);
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v41 = 0;
          goto LABEL_32;
        }
        v23 = *a3 == 11;
        LOBYTE(v43[0]) = 0;
        v44 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v43, (uint64_t)a2);
        v45[0] = 0;
        v46 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, (uint64_t)a2 + 32);
        LOBYTE(v47) = v11;
        HIBYTE(v47) = v13;
        v48 = v23;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
        v24 = *(unsigned int **)(a1 + 24);
        if (v24)
        {
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
        }
        v26 = *a4;
        *a4 = 0;
        v49 = v24;
        v50 = v26;
        v27 = WTF::fastMalloc((WTF *)0x60);
        *(_QWORD *)v27 = &off_1E34D5788;
        *(_BYTE *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 32) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v27 + 8, (uint64_t)v43);
        *(_BYTE *)(v27 + 40) = 0;
        *(_DWORD *)(v27 + 64) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v27 + 40, (uint64_t)v45);
        *(_BYTE *)(v27 + 74) = v48;
        *(_WORD *)(v27 + 72) = v47;
        *(_QWORD *)(v27 + 80) = v49;
        *(_QWORD *)(v27 + 88) = v50;
        v40 = v27;
        v49 = 0;
        v50 = 0;
        if (v46 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v46])(&v42, v45);
        v46 = -1;
        if (v44 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v44])(&v42, v43);
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 258);
        }
        else
        {
          API::SecurityOrigin::create(v43);
          (*(void (**)(_QWORD, WTF::StringImpl **, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 104) + 616))(*(_QWORD *)(a1 + 104), &v41, v43[0], &v40);
          v31 = v43[0];
          v43[0] = 0;
          if (v31)
            CFRelease(*(CFTypeRef *)(v31 + 8));
          v27 = v40;
          v40 = 0;
          if (!v27)
            goto LABEL_30;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_30:
        v9 = v41;
        goto LABEL_31;
      }
      if (v10)
        v38 = 257;
      else
        v38 = 258;
      v39 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v38);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
LABEL_31:
      v41 = 0;
      if (!v9)
        return;
LABEL_32:
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v30);
      else
        *(_DWORD *)v9 -= 2;
      return;
    case 0xD:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = 0;
      v11 = 0;
      v9 = (WTF::StringImpl *)v43[0];
      v41 = (WTF::StringImpl *)v43[0];
      goto LABEL_12;
    default:
      goto LABEL_40;
  }
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::WebPageProxy::userMediaPermissionRequestManager(WebKit::WebPageProxy *this)
{
  WebKit::UserMediaPermissionRequestManagerProxy *result;
  WebKit::UserMediaPermissionRequestManagerProxy *v3;
  uint64_t v4;

  result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((_QWORD *)this + 63);
  if (!result)
  {
    v3 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x120);
    result = WebKit::UserMediaPermissionRequestManagerProxy::UserMediaPermissionRequestManagerProxy(v3, this);
    v4 = *((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (WebKit::UserMediaPermissionRequestManagerProxy *)*((_QWORD *)this + 63);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::willStartCapture(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WebKit::WebProcessPool *v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896));
  WebKit::WebPageProxy::setMuted(a1, *(_BYTE *)(*(_QWORD *)(a1 + 32) + 872) & 0xE1);
  v7 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v6) & 1) != 0)goto LABEL_7;
  v9 = *(_QWORD *)(a1 + 224);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v8) & 1) != 0)
  {
LABEL_7:
    v10 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(_QWORD *)(a1 + 48) + 24);
    v11 = (_BYTE *)WebKit::WebProcessPool::ensureGPUProcess(v10);
    v12 = (uint64_t)v11;
    v13 = (unsigned int *)(v11 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *(unsigned __int8 *)(a2 + 112) - 1;
    v17 = v15 > 1 && *(_DWORD *)(a2 + 92) != 0;
    WebKit::GPUProcessProxy::updateCaptureAccess(v11, (void *)(*(_DWORD *)(a2 + 108) != 0), v17, v15 < 2, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176), a3);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
    v21[0] = *(_QWORD *)(a2 + 72) + 8;
    v21[1] = &v22;
    v22 = v18;
    WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(v12, (uint64_t)v21, 0, 0);
    WebKit::GPUProcessProxy::setOrientationForMediaCapture(v12, *(_DWORD *)(a1 + 1000));
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
  else
  {
    v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void WebKit::WebPageProxy::requestUserMediaPermissionForFrame(WebKit::WebPageProxy *a1, uint64_t a2, WTF::String *a3, uint64_t a4, uint64_t a5, WebCore::SecurityOriginData *a6, WebCore::SecurityOriginData *a7, uint64_t a8)
{
  WebKit::UserMediaPermissionRequestManagerProxy *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  NSObject *v20;
  WTF *v21;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebFrameProxy::webFrame(a4, a5))
  {
    v16 = WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
    WebCore::SecurityOriginData::securityOrigin(a6);
    WebCore::SecurityOriginData::securityOrigin(a7);
    WebKit::UserMediaPermissionRequestManagerProxy::requestUserMediaPermissionForFrame(v16, a3, a4, a5, (uint64_t *)buf, (uint64_t *)&v21, a8);
    v18 = v21;
    v21 = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v17);
    v19 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
  }
  else
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::requestUserMediaPermissionForFrame(IPC::Connection &, UserMediaReq"
                           "uestIdentifier, FrameIdentifier, const SecurityOriginData &, const SecurityOriginData &, Medi"
                           "aStreamRequest &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10928: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::enumerateMediaDevicesForFrame(WebKit::WebPageProxy *a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::SecurityOriginData *a5, WebCore::SecurityOriginData *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  WebKit::UserMediaPermissionRequestManagerProxy *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  NSObject *v20;
  WTF *v21;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    v16 = WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
    WebCore::SecurityOriginData::securityOrigin(a5);
    WebCore::SecurityOriginData::securityOrigin(a6);
    WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(v16, a3, a4, (uint64_t *)buf, (uint64_t *)&v21, a7);
    v18 = v21;
    v21 = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v17);
    v19 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::enumerateMediaDevicesForFrame(IPC::Connection &, FrameIdentifier, "
                           "const SecurityOriginData &, const SecurityOriginData &, CompletionHandler<void (const Vector<"
                           "CaptureDeviceWithCapabilities> &, MediaDeviceHashSalts &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10946: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::beginMonitoringCaptureDevices(WebKit::WebPageProxy *this)
{
  WebKit::UserMediaPermissionRequestManagerProxy *v1;

  v1 = WebKit::WebPageProxy::userMediaPermissionRequestManager(this);
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v1);
  {
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
    unk_1EE341E10 = 0;
    qword_1EE341E18 = 0;
    unk_1EE341E20 = 0;
    word_1EE341E28 = 1;
  }
  WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices((WebKit::UserMediaProcessManager *)&WebKit::UserMediaProcessManager::singleton(void)::manager);
}

void WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, WebCore::SecurityOriginData *a6, _DWORD **a7)
{
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WebKit::MediaKeySystemPermissionRequestManagerProxy *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  NSObject *v26;
  WTF *v27;
  WTF *v28;
  uint8_t buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebFrameProxy::webFrame(a4, a5))
  {
    WebCore::SecurityOriginData::securityOrigin(a6);
    API::SecurityOrigin::create(buf);
    v15 = v28;
    v28 = 0;
    if (v15)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v14);
    v16 = *(_QWORD *)(a1 + 512);
    if (!v16)
    {
      v17 = (WebKit::MediaKeySystemPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = a1;
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
      *((_QWORD *)v17 + 4) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100]((WebKit::MediaKeySystemPermissionRequestManagerProxy **)(a1 + 512), v17);
      v16 = *(_QWORD *)(a1 + 512);
    }
    WebCore::SecurityOriginData::securityOrigin(a6);
    WebKit::MediaKeySystemPermissionRequestManagerProxy::createRequestForFrame(v16, a3, a4, a5, (uint64_t *)&v27, a7, &v28);
    v19 = v27;
    v27 = 0;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v18);
    v20 = *(_QWORD *)(a1 + 104);
    v22 = v28;
    v21 = *(_QWORD *)buf;
    v23 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = &off_1E34D57B0;
    *((_QWORD *)v23 + 1) = v22;
    v27 = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD **, WTF **))(*(_QWORD *)v20 + 608))(v20, a1, v21, a7, &v27);
    v24 = v27;
    v27 = 0;
    if (v24)
      (*(void (**)(WTF *))(*(_QWORD *)v24 + 8))(v24);
    v25 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v25)
      CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &, MediaKe"
                           "ySystemRequestIdentifier, FrameIdentifier, const SecurityOriginData &, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10983: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned int *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = *(_QWORD *)(a1 + 264);
    CFRetain(*(CFTypeRef *)(v14 + 8));
    WebKit::WebDeviceOrientationAndMotionAccessController::shouldAllowAccess((uint64_t *)(v14 + 368), a1, v13, a5, a6, a7);
    CFRelease(*(CFTypeRef *)(v14 + 8));
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    v15 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v16 = 136315138;
      v17 = "void WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(IPC::Connection &, FrameIdentifier, F"
            "rameInfoData &&, BOOL, CompletionHandler<void (DeviceOrientationOrMotionPermissionState)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11005: Invalid message dispatched %s", (uint8_t *)&v16, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

uint64_t WebKit::WebPageProxy::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1584))(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 1472))(v12, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
}

uint64_t WebKit::WebPageProxy::updateWithTextRecognitionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD v7[3];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(*(_QWORD *)(a1 + 208), (uint64_t)v7, a5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::startVisualTranslation(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t *v3[2];

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v3[0] = (uint64_t *)a2;
      v3[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartVisualTranslation>(*(_QWORD *)(this + 208), v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

WTF::MachSendRight *WebKit::WebPageProxy::requestImageBitmap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8[8];
  char v9;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v8[0]) = 0;
    v9 = 0;
    v7 = 0;
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, v8, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v8);
  }
  else
  {
    v8[0] = a2;
    return (WTF::MachSendRight *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(*(_QWORD *)(a1 + 208), v8, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 1488))(v8, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
}

IPC::Encoder *WebKit::WebPageProxy::clearNotificationPermissionState(WebKit::WebPageProxy *this, void *a2)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v4;
  IPC::Encoder *result;

  v3 = *((_QWORD *)this + 4);
  v4 = *(WebCore::SecurityOriginData **)(v3 + 2128);
  if (v4)
  {
    *(_QWORD *)(v3 + 2128) = 0;
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  }
  result = (IPC::Encoder *)*((_QWORD *)this + 181);
  if (result)
    return WebKit::WebPageProxyTesting::clearNotificationPermissionState(result);
  return result;
}

void WebKit::WebPageProxy::requestNotificationPermission(uint64_t a1, WTF::StringImpl **this, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;

  API::SecurityOrigin::createFromString(this, &v14);
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)(*(_QWORD *)(a1 + 32) + 2128), v14 + 16, (uint64_t)v13);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = v14;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v7 = *(unsigned int **)(a1 + 24);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34D5828;
  v10[1] = v7;
  v10[2] = v9;
  v13[0] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 328))(v5, a1, v6, v13);
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v14;
  v14 = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
}

WTF::StringImpl *API::SecurityOrigin::createFromString@<X0>(WTF::StringImpl **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::URL *v6;
  WebKit *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10[5];
  char v11;
  _BYTE v12[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = API::Object::newObject(0x30uLL, 18);
  WTF::URL::URL((uint64_t)v10, this);
  v7 = (WebKit *)WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)v10, v6);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v7);
  *(_QWORD *)v5 = off_1E34BC2E0;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v5 + 16, (uint64_t)v12);
  *a2 = v5;
  if (v13 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v13])(&v11, v12);
  v13 = -1;
  result = v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageProxy::pageWillLikelyUseNotifications(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::ProcessThrottlerActivity *v8;
  int v9;
  WebKit::WebPageProxy *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    v9 = 134218752;
    v10 = this;
    v11 = 2048;
    v12 = v4;
    v13 = 2048;
    v14 = v5;
    v15 = 1024;
    v16 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::pageWillLikelyUseNotifications: This page is likely to use notifications and is allowed to run in the background", (uint8_t *)&v9, 0x26u);
  }
  if (!*(_QWORD *)(*((_QWORD *)this + 4) + 1920))
  {
    v7 = *((_QWORD *)this + 26) + 200;
    v8 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v8, v7, "Page is likely to show notifications", 37, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*((_QWORD *)this + 4) + 1920), v8);
  }
}

void WebKit::WebPageProxy::showNotification(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock **a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::ProcessThrottlerActivity *v18;
  _BYTE v19[22];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 512);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v8 = v9 - 16;
    else
      v8 = 0;
  }
  *(_QWORD *)v19 = "WebNotificationManagerProxy";
  *(_QWORD *)&v19[8] = 28;
  v10 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v8 + 456), (WTF::ASCIILiteralHash *)v19);
  if (v10)
    v11 = (uint64_t)(v10 - 16);
  else
    v11 = 0;
  WebKit::WebNotificationManagerProxy::show(v11, a1, a2, a3, a4);
  v12 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 744);
    v15 = *(_QWORD *)(v13 + 1896);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v16)
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    *(_DWORD *)v19 = 134218752;
    *(_QWORD *)&v19[4] = a1;
    *(_WORD *)&v19[12] = 2048;
    *(_QWORD *)&v19[14] = v14;
    v20 = 2048;
    v21 = v15;
    v22 = 1024;
    v23 = v16;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::showNotification: This page shows notifications and is allowed to run in the background", v19, 0x26u);
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1920))
  {
    v17 = *(_QWORD *)(a1 + 208) + 200;
    v18 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v18, v17, "Page has shown notification", 28, 0, 0);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(*(_QWORD *)(a1 + 32) + 1920), v18);
  }
}

void WebKit::WebPageProxy::cancelNotification(WebKit::WebPageProxy *this, const WTF::UUID *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  WebKit::WebNotificationManagerProxy *v7;
  _QWORD v8[2];

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 512) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6)
    v7 = (WebKit::WebNotificationManagerProxy *)(v6 - 16);
  else
    v7 = 0;
  WebKit::WebNotificationManagerProxy::cancel(v7, this, a2);
  if (v4)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WebKit::WebPageProxy::clearNotifications(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  WTF *v7;
  _QWORD v8[2];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 512) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6)
    v7 = (WTF *)(v6 - 16);
  else
    v7 = 0;
  WebKit::WebNotificationManagerProxy::clearNotifications(v7, a1, a2);
  if (v4)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WebKit::WebPageProxy::didDestroyNotification(WebKit::WebPageProxy *this, const WTF::UUID *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  WebKit::WebNotificationManagerProxy *v7;
  _QWORD v8[2];

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 512) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8[0] = "WebNotificationManagerProxy";
  v8[1] = 28;
  v6 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v5 + 456), (WTF::ASCIILiteralHash *)v8);
  if (v6)
    v7 = (WebKit::WebNotificationManagerProxy *)(v6 - 16);
  else
    v7 = 0;
  WebKit::WebNotificationManagerProxy::didDestroyNotification(v7, this, a2);
  if (v4)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

unsigned int *WebKit::WebPageProxy::runModal(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *result;
  uint64_t v16;
  IPC::Connection *v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 26);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebKit::ResponsivenessTimer::stop((_BYTE *)(v2 + 56));
  WebKit::AuxiliaryProcessProxy::protectedConnection(v2, (unsigned __int8 ***)&v17);
  IPC::Connection::wakeUpRunLoop((unsigned int *)v17);
  v5 = (unsigned __int8 **)v17;
  v17 = 0;
  if (!v5)
    goto LABEL_18;
  v6 = *v5;
  if (__ldaxr(*v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEABB3C](v6);
LABEL_8:
  v8 = *((_QWORD *)v6 + 1);
  v9 = v8 - 1;
  *((_QWORD *)v6 + 1) = v8 - 1;
  if (v8 == 1)
  {
    v16 = *((_QWORD *)v6 + 2);
    v11 = *((_QWORD *)v6 + 3);
    *((_QWORD *)v6 + 3) = 0;
    v10 = v16 == 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = __ldxr(v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
    goto LABEL_15;
  if (v9)
    goto LABEL_18;
LABEL_16:
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = off_1E34ACA48;
  *(_QWORD *)(v13 + 8) = v6;
  *(_QWORD *)(v13 + 16) = v11;
  *(_BYTE *)(v13 + 24) = v10;
  v18 = v13;
  WTF::ensureOnMainRunLoop();
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_18:
  result = (unsigned int *)(*(uint64_t (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 13) + 400))(*((_QWORD *)this + 13), this);
  if (v2)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  return result;
}

uint64_t WebKit::WebPageProxy::didChangeScrollOffsetPinningForMainFrame(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1400))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 785) = a2;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1408))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 416))(*(_QWORD *)(a1 + 104), a1);
}

uint64_t WebKit::WebPageProxy::updateWebsitePolicies(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D5850;
  v4[1] = a2;
  v6 = v4;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::didFinishLoadingDataForCustomContentProvider(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
  WebCore::ResourceResponseBase::sanitizeSuggestedFilename(a2, v9);
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v8 + 1208))(v8, &v13, a3, a4);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
}

void WebKit::WebPageProxy::beginPrinting(WebKit::WebPageProxy *this, WebKit::WebFrameProxy *a2, const PrintInfo *a3)
{
  __int128 *v3;
  const PrintInfo *v4;
  __int128 v5;
  __int128 **v6;
  char v7;
  __int128 v8;
  char v9;

  if (!*((_BYTE *)this + 731))
  {
    *((_BYTE *)this + 731) = 1;
    v5 = *((_OWORD *)a2 + 17);
    if (*((_BYTE *)this + 732))
    {
      v8 = v5;
      v3 = &v5;
      v4 = a3;
      v9 = 1;
      v6 = &v3;
      v7 = 2;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::BeginPrintingDuringDOMPrintOperation &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrintingDuringDOMPrintOperation&)#1}>((uint64_t)this, (uint64_t)&v8, (uint64_t)&v6);
    }
    else
    {
      v8 = v5;
      v3 = &v5;
      v4 = a3;
      v9 = 1;
      v6 = &v3;
      v7 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrinting>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::BeginPrinting &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrinting&)#1}>((uint64_t)this, (uint64_t)&v8, (uint64_t)&v6);
    }
  }
}

uint64_t WebKit::WebPageProxy::endPrinting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 731))
  {
    *(_BYTE *)(a1 + 731) = 0;
    if (*(_BYTE *)(a1 + 732))
    {
      v2 = *(_QWORD *)(a1 + 208);
      v6 = 0;
      return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(v2, (uint64_t)&v6, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 2, 1);
    }
    else
    {
      v5 = 0;
      return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v5, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
    }
  }
  else
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t WebKit::WebPageProxy::computePagesForPrinting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 **v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;

  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  *(_BYTE *)(a1 + 731) = 1;
  if (*(_BYTE *)(a1 + 732))
  {
    v12 = v8;
    v6 = &v8;
    v7 = a4;
    v13 = 1;
    v9 = &v6;
    v10 = a5;
    v11 = 2;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v9);
  }
  else
  {
    v12 = v8;
    v6 = &v8;
    v7 = a4;
    v13 = 1;
    v9 = &v6;
    v10 = a5;
    v11 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrinting &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrinting&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v9);
  }
}

uint64_t WebKit::WebPageProxy::drawPagesToPDF(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 **v23;
  _QWORD *v24;
  char v25;
  __int128 v26;
  char v27;

  v22 = *(_OWORD *)(a2 + 272);
  if (*(_BYTE *)(a1 + 732))
  {
    v21 = v22;
    v17 = &v22;
    v18 = a3;
    v19 = a4;
    v20 = a5;
    v7 = *a6;
    *a6 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34D4DE8;
    v8[1] = v7;
    v16 = v8;
    v26 = v21;
    v27 = 1;
    v23 = &v17;
    v24 = &v16;
    v25 = 2;
    v9 = WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(a1, (uint64_t)&v26, (uint64_t)&v23);
  }
  else
  {
    v15 = v22;
    v17 = &v22;
    v18 = a3;
    v19 = a4;
    v20 = a5;
    v10 = *a6;
    *a6 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34D4DE8;
    v11[1] = v10;
    v16 = v11;
    v26 = v15;
    v27 = 1;
    v23 = &v17;
    v24 = &v16;
    v25 = 0;
    v9 = WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawPagesToPDF &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(a1, (uint64_t)&v26, (uint64_t)&v23);
  }
  v12 = v9;
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return v12;
}

unsigned int *WebKit::WebPageProxy::drawToPDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  void *v7;
  unsigned int *result;
  uint64_t *v9[2];
  char v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v9[0] = 0;
    v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v6 + 16))(v6, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (unsigned int *)v9[0];
    v9[0] = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
  }
  else
  {
    v9[0] = v11;
    v9[1] = a4;
    v10 = a5;
    return (unsigned int *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(a1 + 208), v9, a6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setViewportSizeForCSSViewportUnits(uint64_t this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(this + 32);
  if (!*(_BYTE *)(v2 + 1868))
  {
    v4 = *(_QWORD *)a2;
    *(_BYTE *)(v2 + 1868) = 1;
LABEL_8:
    *(_QWORD *)(v2 + 1860) = v4;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v5 = *(_QWORD *)a2;
        v6 = 1;
        v7 = &v5;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportSizeForCSSViewportUnits>(*(_QWORD *)(this + 208), (uint64_t *)&v7, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
    return this;
  }
  if (*(float *)(v2 + 1860) != *(float *)a2 || *(float *)(v2 + 1864) != *((float *)a2 + 1))
  {
    v4 = *(_QWORD *)a2;
    goto LABEL_8;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::dictationAlternatives(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 816))(v10, v6, a2);
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

uint64_t WebKit::WebPageProxy::setScrollPinningBehavior(uint64_t result, int a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 32);
  if (*(unsigned __int8 *)(v2 + 1728) != a2)
  {
    *(_BYTE *)(v2 + 1728) = a2;
    if (!*(_BYTE *)(result + 729))
    {
      if (*(_BYTE *)(result + 728))
      {
        v3 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScrollPinningBehavior>(*(_QWORD *)(result + 208), &v3, *(_QWORD *)(v2 + 1896), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::getWebCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 392);
  v4 = *a2;
  *a2 = 0;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34D59B8;
  v5[1] = v4;
  v5[2] = a1;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 136))(v3, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::wrapCryptoKey(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = a2[1];
  a2[1] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34D59E0;
  v7[1] = v4;
  v7[2] = v6;
  v7[3] = v5;
  v9 = v7;
  WebKit::WebPageProxy::getWebCryptoMasterKey(a1, (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::WebPageProxy::unwrapCryptoKey(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 3) = 0;
  v11 = *(__int128 *)((char *)a2 + 40);
  v12 = v4;
  v6 = *a3;
  *a3 = 0;
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v8 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v8 = &off_1E34D5A08;
  *(_OWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  *(_OWORD *)(v8 + 48) = v11;
  *(_QWORD *)(v8 + 64) = v6;
  v10 = v8;
  WebKit::WebPageProxy::getWebCryptoMasterKey(a1, &v10);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(void))(*(_QWORD *)v10 + 8))();
  return result;
}

uint64_t WebKit::WebPageProxy::changeFont(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeFont>(*(_QWORD *)(result + 208), &v2, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::insertTextAsync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[3];

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v4[0] = a2;
      v4[1] = a3;
      v4[2] = a4;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertTextAsync>(*(_QWORD *)(result + 208), (uint64_t)v4, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setCompositionAsync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v7[6];

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v7[0] = a2;
      v7[1] = a3;
      v7[2] = a4;
      v7[3] = a5;
      v7[4] = a6;
      v7[5] = a7;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCompositionAsync>(*(_QWORD *)(result + 208), (uint64_t)v7, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setWritingSuggestion(uint64_t this, const WTF::String *a2, const EditingRange *a3)
{
  uint64_t *v3[2];

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v3[0] = (uint64_t *)a2;
      v3[1] = (uint64_t *)a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetWritingSuggestion>(*(_QWORD *)(this + 208), v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::confirmCompositionAsync(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ConfirmCompositionAsync>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setScrollPerformanceDataCollectionEnabled(uint64_t this, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(this + 920) != a2)
  {
    *(_BYTE *)(this + 920) = a2;
    v2 = (uint64_t *)(this + 912);
    if (a2)
    {
      if (*v2)
        return this;
      v5 = *(_QWORD *)(this + 184);
      if (*(_BYTE *)(v5 + 32))
      {
        this = 96;
        __break(0xC471u);
        return this;
      }
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v5;
      v3 = v2;
    }
    else
    {
      v3 = (uint64_t *)(this + 912);
      v4 = 0;
    }
    return (uint64_t)std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100](v3, v4);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::navigationGestureDidBegin(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  *((_BYTE *)this + 856) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1216))(v3);
  (*(void (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 9) + 328))(*((_QWORD *)this + 9), this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
}

uint64_t WebKit::WebPageProxy::navigationGestureWillEnd(WebKit::WebPageProxy *this, uint64_t a2, WebKit::WebBackForwardListItem *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v9;

  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  if ((_DWORD)a2)
  {
    *((_BYTE *)this + 1194) = 1;
    v9 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidStart>(*((_QWORD *)this + 26), (uint64_t)&v9, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  }
  (*(void (**)(uint64_t, uint64_t, WebKit::WebBackForwardListItem *))(*(_QWORD *)v7 + 1224))(v7, a2, a3);
  (*(void (**)(_QWORD, WebKit::WebPageProxy *, uint64_t, WebKit::WebBackForwardListItem *))(**((_QWORD **)this + 9) + 336))(*((_QWORD *)this + 9), this, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

uint64_t WebKit::WebPageProxy::navigationGestureDidEnd(WebKit::WebPageProxy *this, uint64_t a2, WebKit::WebBackForwardListItem *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebKit::ProvisionalPageProxy *v8;
  char v10;

  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  (*(void (**)(uint64_t, uint64_t, WebKit::WebBackForwardListItem *))(*(_QWORD *)v7 + 1232))(v7, a2, a3);
  (*(void (**)(_QWORD, WebKit::WebPageProxy *, uint64_t, WebKit::WebBackForwardListItem *))(**((_QWORD **)this + 9) + 344))(*((_QWORD *)this + 9), this, a2, a3);
  if (*((_BYTE *)this + 1194))
  {
    *((_BYTE *)this + 1194) = 0;
    v10 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(*((_QWORD *)this + 26), (uint64_t)&v10, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
    v8 = (WebKit::ProvisionalPageProxy *)*((_QWORD *)this + 140);
    if (v8)
      WebKit::ProvisionalPageProxy::swipeAnimationDidEnd(v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

uint64_t WebKit::WebPageProxy::navigationGestureSnapshotWasRemoved(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(this + 856) = 0;
  if (!*(_BYTE *)(this + 729))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
      v3 = *(_QWORD *)(v2 + 8);
    else
      v3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1256))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 72) + 352))(*(_QWORD *)(v1 + 72), v1);
  }
  return this;
}

void WebKit::WebPageProxy::isPlayingMediaDidChange(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 208);
  if ((!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v4 + 336))
     || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v4 + 352)))
    && !*(_BYTE *)(a1 + 729))
  {
    WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)a1, a2, 1);
  }
}

BOOL WebKit::WebPageProxy::hasActiveVideoForControlsManager(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  _BOOL8 v5;

  v1 = *((_QWORD *)this + 47);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 48);
  if (!v2)
    return 0;
  v3 = (_DWORD *)WebKit::PlaybackSessionManagerProxy::ensureModelAndInterface(v1, v2)[1];
  v4 = v3[4];
  v3[4] = v4 + 1;
  v5 = v3 != 0;
  if (v4)
    v3[4] = v4;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  return v5;
}

unsigned int *WebKit::WebPageProxy::handleAutoFillButtonClick(uint64_t a1, CFTypeRef **a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  CFTypeRef *v7;
  WebKit *v8;
  WebKit *v10;

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(unsigned int **)(a1 + 208);
  v5 = v4 + 4;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *a2;
  if (*a2)
    CFRetain(v7[1]);
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v4, (API::Object *)v7, &v10);
  (*(void (**)(uint64_t, uint64_t, WebKit *))(*(_QWORD *)v3 + 512))(v3, a1, v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(*((CFTypeRef *)v8 + 1));
  if (v7)
    CFRelease(v7[1]);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4 + 4);
}

unsigned int *WebKit::WebPageProxy::didResignInputElementStrongPasswordAppearance(uint64_t a1, CFTypeRef **a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  CFTypeRef *v7;
  WebKit *v8;
  WebKit *v10;

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(unsigned int **)(a1 + 208);
  v5 = v4 + 4;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *a2;
  if (*a2)
    CFRetain(v7[1]);
  WebKit::WebProcessProxy::transformHandlesToObjects((WebKit::WebProcessProxy *)v4, (API::Object *)v7, &v10);
  (*(void (**)(uint64_t, uint64_t, WebKit *))(*(_QWORD *)v3 + 520))(v3, a1, v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(*((CFTypeRef *)v8 + 1));
  if (v7)
    CFRelease(v7[1]);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4 + 4);
}

uint64_t WebKit::WebPageProxy::callAfterNextPresentationUpdate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 729) && *(_BYTE *)(a1 + 728) && *(_QWORD *)(a1 + 184))
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)(v6 + 8) = v7;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24);
    v14 = (unsigned int *)v6;
    v15 = v8;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = off_1E34D5A58;
    v9[1] = &v14;
    v9[2] = &v15;
    v13 = v9;
    WebKit::WebPageProxy::forEachWebContentProcess((_QWORD *)a1, &v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v15 = (uint64_t)v10;
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15);
      }
    }
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setUserInterfaceLayoutDirection(uint64_t result, int a2)
{
  int v2;

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v2 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUserInterfaceLayoutDirection>(*(_QWORD *)(result + 208), &v2, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::setURLSchemeHandlerForScheme(_QWORD *a1, const WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::StringImpl **v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10[2];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE v13[24];
  WTF::StringImpl *v14;
  char v15;

  WTF::URLParser::maybeCanonicalizeScheme();
  if (v15
    && (WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeHandler&>(a1 + 132, &v14, *a2, (uint64_t)v13), v12 = *((_QWORD *)*a2 + 2), WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>((uint64_t *)(a1[4] + 1832), &v12, (uint64_t *)a2, (uint64_t)v11), v15))
  {
    v10[0] = &v12;
    v10[1] = (uint64_t *)&v14;
    result = (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterURLSchemeHandler>(a1[26], v10, *(_QWORD *)(a1[4] + 1896), 0);
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeHandler&>(v6, v7, v8, v9);
  }
  return result;
}

_DWORD *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeHandler&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * (v11 & v9);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    ++*((_DWORD *)a3 + 2);
    result = *(_DWORD **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = a3;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_33:
        result = (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (uint64_t)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_33;
    }
    v21 = v24 + 16 * v27;
    v20 = 1;
    goto LABEL_37;
  }
  result = (_DWORD *)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v20 = 0;
  v21 = v18 + 16 * v19;
LABEL_37:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = v20;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v22 = 0;
        v23 = v8 + 16 * v21;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v26 = *v6;
      if (*v6)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_28;
  }
  v23 = v26 + 16 * v29;
  v22 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

void WebKit::WebPageProxy::startURLSchemeTask(uint64_t a1, WebKit::AuxiliaryProcessProxy *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  v6 = WebKit::AuxiliaryProcessProxy::fromConnection(this, this);
  v7 = v6;
  if (!v6)
    goto LABEL_7;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 2)
  {
    v7 = 0;
LABEL_7:
    v10 = 1;
    goto LABEL_8;
  }
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = 0;
LABEL_8:
  v11 = (unsigned int *)(v7 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = v7;
  WebKit::WebPageProxy::startURLSchemeTaskShared(a1, (uint64_t)this, &v13, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), a3);
  if (!v10)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
}

void WebKit::WebPageProxy::startURLSchemeTaskShared(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _BYTE v17[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(*a5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v15 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v17 = 136315138;
      *(_QWORD *)&v17[4] = "void WebKit::WebPageProxy::startURLSchemeTaskShared(IPC::Connection &, Ref<WebProcessProxy> &"
                           "&, PageIdentifier, URLSchemeTaskParameters &&)";
      _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12526: Invalid message dispatched %s", v17, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1832);
    v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, *a5);
    if (v10)
      v12 = v10 + 16 * *(unsigned int *)(v10 - 4);
    else
      v12 = 0;
    if (v12 == v11)
    {
      v16 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v17 = 136315138;
        *(_QWORD *)&v17[4] = "void WebKit::WebPageProxy::startURLSchemeTaskShared(IPC::Connection &, Ref<WebProcessProxy>"
                             " &&, PageIdentifier, URLSchemeTaskParameters &&)";
        _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12528: Invalid message dispatched %s", v17, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(*a3 + 144) + 98) = 1;
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 8);
      ++*(_DWORD *)(v13 + 8);
      v14 = *a3;
      *(_QWORD *)v17 = 0;
      WebKit::WebURLSchemeHandler::startTask((uint64_t *)v13, a1, v14, a4, (uint64_t)a5, (uint64_t *)v17);
      if (*(_QWORD *)v17)
        (*(void (**)(_QWORD))(**(_QWORD **)v17 + 8))(*(_QWORD *)v17);
      if (*(_DWORD *)(v13 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      else
        --*(_DWORD *)(v13 + 8);
    }
  }
}

void WebKit::WebPageProxy::stopURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_13:
      *(_BYTE *)(a2 + 98) = 1;
      return;
    }
    v13 = 136315138;
    v14 = "void WebKit::WebPageProxy::stopURLSchemeTask(IPC::Connection &, WebURLSchemeHandlerIdentifier, WebCore::Resour"
          "ceLoaderIdentifier)";
    v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12535: Invalid message dispatched %s";
LABEL_15:
    _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, v12, (uint8_t *)&v13, 0xCu);
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1832);
  v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, a3);
  if (v7)
    v9 = v7 + 16 * *(unsigned int *)(v7 - 4);
  else
    v9 = 0;
  if (v9 == v8)
  {
    v11 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_13;
    v13 = 136315138;
    v14 = "void WebKit::WebPageProxy::stopURLSchemeTask(IPC::Connection &, WebURLSchemeHandlerIdentifier, WebCore::Resour"
          "ceLoaderIdentifier)";
    v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12537: Invalid message dispatched %s";
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v8 + 8);
  ++*(_DWORD *)(v10 + 8);
  WebKit::WebURLSchemeHandler::stopTask((uint64_t *)v10, a1, a4);
  if (*(_DWORD *)(v10 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  else
    --*(_DWORD *)(v10 + 8);
}

void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(*a3 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_13:
      *(_BYTE *)(a2 + 98) = 1;
      return;
    }
    v15 = 136315138;
    v16 = "void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(IPC::Connection &, URLSchemeTaskParameters &&, Complet"
          "ionHandler<void (const WebCore::ResourceResponse &, const WebCore::ResourceError &, Vector<uint8_t> &&)> &&)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12544: Invalid message dispatched %s";
LABEL_15:
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&v15, 0xCu);
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 1832);
  v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9, *a3);
  if (v9)
    v11 = v9 + 16 * *(unsigned int *)(v9 - 4);
  else
    v11 = 0;
  if (v11 == v10)
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_13;
    v15 = 136315138;
    v16 = "void WebKit::WebPageProxy::loadSynchronousURLSchemeTask(IPC::Connection &, URLSchemeTaskParameters &&, Complet"
          "ionHandler<void (const WebCore::ResourceResponse &, const WebCore::ResourceError &, Vector<uint8_t> &&)> &&)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12546: Invalid message dispatched %s";
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v10 + 8);
  ++*(_DWORD *)(v12 + 8);
  WebKit::WebURLSchemeHandler::startTask((uint64_t *)v12, a1, *(_QWORD *)(a1 + 208), *(_QWORD *)(v8 + 1896), (uint64_t)a3, a4);
  if (*(_DWORD *)(v12 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 8);
}

uint64_t WebKit::WebPageProxy::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 104);
  v13 = WebKit::WebFrameProxy::webFrame(a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 336))(v12, a1, v13, a2, a3, a6, a7);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 160))(*(_QWORD *)(a1 + 72), a1, a3, a2, *(unsigned __int8 *)(a6 + 32));
}

uint64_t WebKit::WebPageProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WasLoadedWithDataTransferFromPrevalentResource>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::effectiveAppearanceDidChange(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8[2];

  if (!*(_BYTE *)(this + 729))
  {
    v1 = (_QWORD *)this;
    if (*(_BYTE *)(this + 728))
    {
      v2 = *(_QWORD *)(this + 40);
      if (v2)
        v3 = *(_QWORD *)(v2 + 8);
      else
        v3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 720))(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
      v5 = v1[5];
      if (v5)
        v6 = *(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 728))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
      v8[0] = v4;
      v8[1] = v7;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EffectiveAppearanceDidChange>(v1[26], v8, *(_QWORD *)(v1[4] + 1896), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::writePromisedAttachmentToPasteboard(WebKit::WebPageProxy *a1, uint64_t a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(a1, a4, a3) & 1) != 0)
  {
    v7 = *((_QWORD *)a1 + 5);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(uint64_t, const WTF::StringImpl *))(*(_QWORD *)v8 + 1704))(v8, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
  }
  else
  {
    v9 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v10 = 136315138;
      v11 = "void WebKit::WebPageProxy::writePromisedAttachmentToPasteboard(IPC::Connection &, PromisedAttachmentInfo &&,"
            " const String &)";
      _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12593: Invalid message dispatched %s", (uint8_t *)&v10, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::requestAttachmentIcon(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5, const WTF::String *a6, const WebCore::FloatSize *a7)
{
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[2];
  char v27;
  char v28;
  uint64_t v29;
  WTF *v30;
  uint8_t buf[4];
  const char *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v14 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) != 0)
  {
    v29 = *(_QWORD *)a7;
    buf[0] = 0;
    v33 = 0;
    WebKit::WebPageProxy::iconForAttachment(a5, a4, a6, (WebCore::FloatSize *)&v29, &v30);
    if (v30)
    {
      WebCore::ShareableBitmap::createHandle();
      if (v28)
      {
        if (v33)
        {
          WebCore::ShareableBitmapHandle::operator=((uint64_t)buf, (uint64_t)v26);
        }
        else
        {
          WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)buf, (uint64_t)v26);
          v33 = 1;
        }
      }
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
      v16 = v30;
      v30 = 0;
      if (v16)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v16, v15);
    }
    v17 = *((_QWORD *)this + 26);
    v18 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 2480;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v30 = (WTF *)v19;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)a3);
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v19, (unint64_t)buf);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v19, (int *)&v29);
    LOBYTE(v26[0]) = 0;
    v27 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v17, &v30, 0, (uint64_t)v26, 1);
    if (v27)
    {
      v21 = v26[0];
      v26[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v20);
      WTF::fastFree(v23, v24);
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
  }
  else
  {
    v25 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v32 = "void WebKit::WebPageProxy::requestAttachmentIcon(IPC::Connection &, const String &, const String &, const St"
            "ring &, const String &, const FloatSize &)";
      _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12601: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
  }
}

void *WebKit::WebPageProxy::attachmentForIdentifier@<X0>(void *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v5;

  if (*a2 && *((_DWORD *)*a2 + 1))
  {
    this = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 133, a2, a3);
    v5 = this;
    if (this)
      this = (void *)CFRetain(*((CFTypeRef *)this + 1));
  }
  else
  {
    v5 = 0;
  }
  *a4 = v5;
  return this;
}

WTF::StringImpl *WebKit::WebPageProxy::insertAttachment(_QWORD *a1, API::Attachment **a2, uint64_t *a3)
{
  API::Attachment *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  _QWORD v15[2];
  uint64_t *v16[4];
  WTF::StringImpl *v17;

  v6 = *a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)*a2 + 4);
  if (v7)
    *(_DWORD *)v7 += 2;
  v17 = v7;
  v15[0] = API::Attachment::fileSizeForDisplay(v6);
  v15[1] = v8;
  API::Attachment::fileName(*a2, (uint64_t)&v14);
  v9 = (uint64_t *)((char *)*a2 + 48);
  v16[0] = (uint64_t *)&v17;
  v16[1] = v15;
  v16[2] = (uint64_t *)&v14;
  v16[3] = v9;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(a1[26], v16, a3, *(_QWORD *)(a1[4] + 1896), 0, 1);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>(a1 + 133, &v17, (const WTF::StringImpl *)a2, (uint64_t)v16);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::updateAttachmentAttributes(uint64_t a1, API::Attachment *this, uint64_t *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  _QWORD v19[5];

  v6 = (char *)this + 32;
  v18[0] = API::Attachment::fileSizeForDisplay(this);
  v18[1] = v7;
  API::Attachment::fileName(this, (uint64_t)&v17);
  API::Attachment::associatedElementData((uint64_t)this, &v13);
  if (v13)
    v8 = *(_QWORD *)(v13 + 48);
  else
    v8 = 0;
  v14 = v8;
  v15 = (unsigned int *)v13;
  v16 = 0;
  v19[0] = v6;
  v19[1] = v18;
  v19[2] = (char *)this + 48;
  v19[3] = &v17;
  v19[4] = &v14;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)v19, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  v10 = v16;
  v16 = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5, const IPC::SharedBufferReference *a6)
{
  uint64_t v12;
  const WTF::StringImpl *v13;
  NSObject *v14;
  WTF::StringImpl **v15;
  const char *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  uint8_t buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v12 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v14 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(IPC::Connection &, const String"
                         " &, const String &, const String &, const IPC::SharedBufferReference &)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12672: Invalid message dispatched %s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v14 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromData(IPC::Connection &, const String"
                         " &, const String &, const String &, const IPC::SharedBufferReference &)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12673: Invalid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, v16, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v13, buf);
  v15 = *(WTF::StringImpl ***)buf;
  if (*(_QWORD *)buf)
    goto LABEL_8;
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v20, this, (WTF::StringImpl **)a3);
  v17 = v20;
  WTF::String::operator=(v20 + 6, a4);
  CFRetain(v17[1]);
  v19 = v17;
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 133, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v19, (uint64_t)buf);
  v18 = v19;
  v19 = 0;
  if (v18)
    CFRelease(v18[1]);
  WebKit::WebPageProxy::platformRegisterAttachment((uint64_t)this, (API::Attachment **)&v20, a5, (unsigned int *)a6);
  v15 = v20;
  v20 = 0;
  if (v15)
LABEL_8:
    CFRelease(v15[1]);
}

void WebKit::WebPageProxy::ensureAttachment(WebKit::WebPageProxy *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  API::Attachment *v6;
  API::Attachment *v7;
  API::Attachment *v8;
  _QWORD v9[3];
  API::Attachment *v10;

  WebKit::WebPageProxy::attachmentForIdentifier(a2, a3, (const WTF::StringImpl *)a3, v9);
  if (v9[0])
  {
    *(_QWORD *)this = v9[0];
  }
  else
  {
    v6 = (API::Attachment *)API::Object::newObject(0x48uLL, 41);
    v7 = API::Attachment::Attachment(v6, (const WTF::String *)a3, a2);
    *(_QWORD *)this = v7;
    CFRetain(*((CFTypeRef *)v7 + 1));
    v10 = v6;
    WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)a2 + 133, a3, (const WTF::StringImpl *)&v10, (uint64_t)v9);
    v8 = v10;
    v10 = 0;
    if (v8)
      CFRelease(*((CFTypeRef *)v8 + 1));
  }
}

void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  uint64_t v10;
  const WTF::StringImpl *v11;
  NSObject *v12;
  WTF::StringImpl **v13;
  const char *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  uint8_t buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v12 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(IPC::Connection &, const St"
                         "ring &, const String &, const String &)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12687: Invalid message dispatched %s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v12 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath(IPC::Connection &, const St"
                         "ring &, const String &, const String &)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12688: Invalid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, v14, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v11, buf);
  v13 = *(WTF::StringImpl ***)buf;
  if (*(_QWORD *)buf)
    goto LABEL_8;
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v18, this, (WTF::StringImpl **)a3);
  v15 = v18;
  WTF::String::operator=(v18 + 6, a4);
  WTF::String::operator=(v15 + 5, a5);
  CFRetain(v15[1]);
  v17 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 133, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v17, (uint64_t)buf);
  v16 = v17;
  v17 = 0;
  if (v16)
    CFRelease(v16[1]);
  WebKit::WebPageProxy::platformRegisterAttachment((uint64_t)this, (API::Attachment **)&v18, a5);
  v13 = v18;
  v18 = 0;
  if (v13)
LABEL_8:
    CFRelease(v13[1]);
}

void WebKit::WebPageProxy::registerAttachmentIdentifier(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint8_t buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifier(IPC::Connection &, const String &)";
    v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12705: Invalid message dispatched %s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentIdentifier(IPC::Connection &, const String &)";
    v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12706: Invalid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, v10, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v7, buf);
  v9 = *(_QWORD *)buf;
  if (*(_QWORD *)buf
    || (WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v11, this, (WTF::StringImpl **)a3),
        WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>((uint64_t *)this + 133, (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v11, (uint64_t)buf), v9 = v11, v11 = 0, v9))
  {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebPageProxy::registerAttachmentsFromSerializedData(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a1[28];
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, (const WTF::StringImpl *)a3) & 1) != 0)
  {
    v8 = a3[3];
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)a3;
      v10 = 24 * v8;
      v11 = v9 + 8;
      do
      {
        v12 = *(_QWORD *)(v11 - 8);
        *(_QWORD *)(v11 - 8) = 0;
        *(_QWORD *)buf = v12;
        WebKit::WebPageProxy::attachmentForIdentifier(a1, (WTF::StringImpl **)buf, v7, &v17);
        v13 = v17;
        if (v17
          || (WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)&v17, (const WTF::String *)a1, (WTF::StringImpl **)buf), API::Attachment::updateFromSerializedRepresentation(v17, (WebCore::SharedBuffer **)(v11 + 8), (_QWORD *)v11), (v13 = v17) != 0))
        {
          CFRelease(*(CFTypeRef *)(v13 + 8));
        }
        v15 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v11 += 24;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::registerAttachmentsFromSerializedData(IPC::Connection &, Vector<Se"
                           "rializedAttachmentData> &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12714: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

void WebKit::WebPageProxy::cloneAttachmentData(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3, WTF::StringImpl **a4)
{
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  uint8_t buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v9 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
    v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12730: Invalid message dispatched %s";
    goto LABEL_10;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v9 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
      v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12731: Invalid message dispatched %s";
LABEL_10:
      _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, v10, buf, 0xCu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if ((unint64_t)*a4 + 1 <= 1)
  {
    v9 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::cloneAttachmentData(IPC::Connection &, const String &, const String &)";
      v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12732: Invalid message dispatched %s";
      goto LABEL_10;
    }
LABEL_11:
    *((_BYTE *)a2 + 98) = 1;
    return;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)buf, this, a4);
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v11, &v14);
  v13 = v14;
  v12 = *(_QWORD *)buf;
  if (v14)
  {
    WTF::String::operator=((WTF::StringImpl **)(*(_QWORD *)buf + 48), (WTF::StringImpl *)(v14 + 6));
    WTF::String::operator=((WTF::StringImpl **)(v12 + 40), (WTF::StringImpl *)(v13 + 5));
    API::Attachment::cloneFileWrapperTo((API::Attachment *)v13, (API::Attachment *)v12);
    CFRelease(v13[1]);
  }
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
}

uint64_t WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers(_QWORD *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  CFTypeRef *v11;
  WTF::StringImpl *v12;
  void *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int *v22;
  uint64_t v23;
  void *v24;
  NSObject *v26;
  unsigned int *v27;
  API::Attachment *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 buf;
  unsigned int *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = 0;
  v6 = a1[28];
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) != 0)
  {
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(WTF::StringImpl ***)a2;
      v10 = 8 * v8;
      do
      {
        WebKit::WebPageProxy::attachmentForIdentifier(a1, v9, v7, &v28);
        v11 = (CFTypeRef *)v28;
        if (v28)
        {
          API::Attachment::createSerializedRepresentation((unsigned __int8 *)v28, &v27);
          if (v27)
          {
            v12 = *v9;
            if (*v9)
              *(_DWORD *)v12 += 2;
            *(_QWORD *)&buf = v12;
            API::Attachment::mimeType((API::Attachment *)v11, (_QWORD *)&buf + 1);
            v32 = v27;
            v27 = 0;
            if (HIDWORD(v30) == (_DWORD)v30)
            {
              WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v29, (unint64_t)&buf);
            }
            else
            {
              v14 = HIDWORD(v30) + 1;
              v15 = (_QWORD *)(v29 + 24 * HIDWORD(v30));
              v16 = buf;
              *(_QWORD *)&buf = 0;
              *v15 = v16;
              v17 = *((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              v15[1] = v17;
              v18 = v32;
              v32 = 0;
              v15[2] = v18;
              HIDWORD(v30) = v14;
            }
            v19 = v32;
            v32 = 0;
            if (v19)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v13);
            v20 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
            *((_QWORD *)&buf + 1) = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = (WTF::StringImpl *)buf;
            *(_QWORD *)&buf = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = v27;
            v27 = 0;
            if (v22)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v13);
          }
          CFRelease(v11[1]);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers(const Vector<Str"
                                      "ing> &, CompletionHandler<void (Vector<WebCore::SerializedAttachmentData> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12761: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1[26] + 144) + 98) = 1;
  }
  v23 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 16))(v23, &v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v24);
}

void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(const WTF::String *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL isEmpty;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  uint8_t buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v11 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(IPC::Connection &, const String &,"
                         " const String &, WebCore::AttachmentAssociatedElementType)";
    v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12805: Invalid message dispatched %s";
    goto LABEL_17;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v11 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *(_BYTE *)(a2 + 98) = 1;
      return;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didInsertAttachmentWithIdentifier(IPC::Connection &, const String &,"
                         " const String &, WebCore::AttachmentAssociatedElementType)";
    v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12806: Invalid message dispatched %s";
LABEL_17:
    _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, v18, buf, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::ensureAttachment((WebKit::WebPageProxy *)buf, a1, (WTF::StringImpl **)a3);
  v12 = *(_QWORD *)buf;
  *(_BYTE *)(*(_QWORD *)buf + 65) = a5;
  *(_BYTE *)(v12 + 64) = 1;
  v13 = *((_QWORD *)a1 + 5);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 1680))(v14, v12, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
  isEmpty = API::Attachment::isEmpty((API::Attachment *)v12);
  if (a5 && !isEmpty)
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E34D5B70;
    v19 = v16;
    WebKit::WebPageProxy::updateAttachmentAttributes((uint64_t)a1, (API::Attachment *)v12, (uint64_t *)&v19);
    v17 = (uint64_t)v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  CFRelease(*(CFTypeRef *)(v12 + 8));
}

void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::String *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3) & 1) == 0)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_DWORD *)v13 = 136315138;
    *(_QWORD *)&v13[4] = "void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(IPC::Connection &, const String &)";
    v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12819: Invalid message dispatched %s";
    goto LABEL_14;
  }
  if ((unint64_t)(*(_QWORD *)a3 + 1) <= 1)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    *(_DWORD *)v13 = 136315138;
    *(_QWORD *)&v13[4] = "void WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier(IPC::Connection &, const String &)";
    v12 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 12820: Invalid message dispatched %s";
LABEL_14:
    _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, v12, v13, 0xCu);
    goto LABEL_6;
  }
  WebKit::WebPageProxy::attachmentForIdentifier(this, (WTF::StringImpl **)a3, v7, v13);
  v9 = *(_QWORD *)v13;
  if (*(_QWORD *)v13)
  {
    v10 = *((_QWORD *)this + 5);
    *(_BYTE *)(*(_QWORD *)v13 + 64) = 0;
    if (v10)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 1688))(v11, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

uint64_t WebKit::WebPageProxy::insertTextPlaceholder(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _DWORD *v5[10];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v5[0]) = 0;
    v6 = 0;
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v3 + 16))(v3, v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v5[0] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(*(_QWORD *)(a1 + 208), v5, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::removeTextPlaceholder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v5 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), &v5, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void WebKit::WebPageProxy::detectDataInAllFrames(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;
  char v6;

  v6 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    cf = 0;
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v3 + 16))(v3, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    cf = &v6;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(*(_QWORD *)(a1 + 208), (_BYTE **)&cf, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void WebKit::WebPageProxy::removeDataDetectedLinks(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  char v4;
  CFTypeRef cf;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    cf = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v2 + 16))(v2, &cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = cf;
    cf = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v4 = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void WebKit::WebPageProxy::setPrivateClickMeasurement(uint64_t a1, char *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  __int128 v29;
  _OWORD v30[2];
  _BYTE v31[128];
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;

  v28 = *a2;
  v8 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v9 = *(_OWORD *)(a2 + 24);
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a2 + 33);
  v31[0] = 0;
  v32 = 0;
  if (a2[184])
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v31, (uint64_t)(a2 + 56));
    v32 = 1;
  }
  v10 = *((_OWORD *)a2 + 13);
  v33 = *((_OWORD *)a2 + 12);
  v34 = v10;
  LOBYTE(v35) = 0;
  v36 = 0;
  if (a2[232])
  {
    v11 = *((_QWORD *)a2 + 28);
    *((_QWORD *)a2 + 28) = 0;
    v35 = v11;
    v36 = 1;
  }
  v12 = *((_OWORD *)a2 + 15);
  v13 = *((_OWORD *)a2 + 16);
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 16) = 0u;
  v37 = v12;
  v38 = v13;
  LOBYTE(v39) = 0;
  v41 = 0;
  if (a2[296])
  {
    v14 = *((_OWORD *)a2 + 17);
    *((_QWORD *)a2 + 34) = 0;
    *((_QWORD *)a2 + 35) = 0;
    v39 = v14;
    v15 = *((_QWORD *)a2 + 36);
    *((_QWORD *)a2 + 36) = 0;
    v40 = v15;
    v41 = 1;
  }
  v16 = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = 0;
  v17 = *a3;
  *a3 = 0;
  v42 = v16;
  v43 = v17;
  v18 = *a4;
  *a4 = 0;
  v44 = v18;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = v19 + 1336;
  if (!*(_BYTE *)(v19 + 1664))
  {
    std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(v20, (uint64_t)&v28);
    *(_BYTE *)(v19 + 1664) = 1;
    goto LABEL_17;
  }
  WebCore::PrivateClickMeasurement::operator=(v20, (uint64_t)&v28);
  v22 = v43;
  v43 = 0;
  v23 = *(WTF::StringImpl **)(v19 + 1648);
  *(_QWORD *)(v19 + 1648) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v44;
  v44 = 0;
  v25 = *(WTF::StringImpl **)(v19 + 1656);
  *(_QWORD *)(v19 + 1656) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
LABEL_17:
    v26 = v44;
    v44 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v21);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v43;
  v43 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v28, v21);
}

WTF::StringImpl *WebKit::WebPageProxy::setPrivateClickMeasurement(uint64_t a1, char *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = 0;
  v5 = 0;
  WebKit::WebPageProxy::setPrivateClickMeasurement(a1, a2, &v5, &v4);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::privateClickMeasurementEventAttribution@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(this + 32);
  v3 = *(_BYTE *)(v2 + 1664);
  if (v3)
  {
    v4 = *(_BYTE *)(v2 + 1336);
    v5 = *(_DWORD **)(v2 + 1352);
    if (v5)
      *v5 += 2;
    v6 = *(_DWORD **)(v2 + 1648);
    if (v6)
      *v6 += 2;
    v7 = *(_DWORD **)(v2 + 1656);
    if (v7)
      *v7 += 2;
    *(_BYTE *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    v3 = 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v3;
  return this;
}

char *WebKit::WebPageProxy::Internals::speechSynthesisData(WebKit::WebPageProxy::Internals *this)
{
  char *v1;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  char *result;
  char *v10;
  WTF *v11[2];
  __int128 v12;
  uint64_t v13;

  v1 = (char *)this + 2152;
  if (*((_BYTE *)this + 2200))
    return v1;
  WebCore::PlatformSpeechSynthesizer::create();
  v13 = 0;
  v12 = 0u;
  *(_OWORD *)v11 = 0u;
  std::optional<WebKit::SpeechSynthesisData>::operator=[abi:sn180100]<WebKit::SpeechSynthesisData,void>((uint64_t)v1, (WTF::StringImpl *)&v10);
  v4 = v13;
  v13 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)&v12 + 1);
  *((_QWORD *)&v12 + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v12;
  *(_QWORD *)&v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v11[1];
  v11[1] = 0;
  if (v7)
    (*(void (**)(WTF *))(*(_QWORD *)v7 + 8))(v7);
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v8, v3);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (*((_BYTE *)this + 2200))
    return v1;
  __break(1u);
  return result;
}

uint64_t std::optional<WebKit::SpeechSynthesisData>::operator=[abi:sn180100]<WebKit::SpeechSynthesisData,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    v6 = *(_DWORD **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    v12 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v13 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;
    if (v13)
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v13, a2);
    v14 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v17 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    v21 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v9;
    v10 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::speechSynthesisVoiceList(uint64_t a1, uint64_t *a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  __int16 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  result = WebCore::PlatformSpeechSynthesizer::voiceList(*(WebCore::PlatformSpeechSynthesizer **)v3);
  v17 = 0;
  v18 = 0;
  v5 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v5)
  {
LABEL_13:
    v15 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v16);
  }
  if (!(v5 >> 27))
  {
    v6 = result;
    v7 = WTF::fastMalloc((WTF *)(32 * v5));
    LODWORD(v18) = v5;
    v17 = v7;
    if (*(_DWORD *)(v6 + 12))
    {
      v8 = 0;
      v9 = v7 + 16;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8 * v8);
        v11 = *(_DWORD **)(v10 + 8);
        if (v11)
          *v11 += 2;
        v12 = *(_DWORD **)(v10 + 16);
        if (v12)
          *v12 += 2;
        v13 = *(_DWORD **)(v10 + 24);
        if (v13)
          *v13 += 2;
        v14 = *(_WORD *)(v10 + 32);
        *(_QWORD *)(v9 - 16) = v11;
        *(_QWORD *)(v9 - 8) = v12;
        *(_QWORD *)v9 = v13;
        *(_WORD *)(v9 + 8) = v14;
        ++v8;
        v9 += 32;
      }
      while (v8 < *(unsigned int *)(v6 + 12));
      HIDWORD(v18) = v8;
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPageProxy::speechSynthesisSetFinishedCallback(uint64_t a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t result;

  v3 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v4 = *a2;
  *a2 = 0;
  result = *((_QWORD *)v3 + 3);
  *((_QWORD *)v3 + 3) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl **WebKit::WebPageProxy::speechSynthesisSpeak(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *a3, WebCore::PlatformSpeechSynthesisVoice *this, WTF::String *a5, WTF::String *a6, WTF::String *a7, BOOL a8, float a9, float a10, float a11, uint64_t *a12)
{
  WTF::StringImpl *v16;
  WTF *v17;
  float32x2_t v18;
  float v19;
  WTF *v20;
  WTF::StringImpl **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl **result;
  WTF *v37;
  WTF *v38;
  WTF *v39;

  WebCore::PlatformSpeechSynthesisVoice::create(this, a5, a6, a7);
  WebCore::PlatformSpeechSynthesisUtterance::create();
  WTF::String::operator=((WTF::StringImpl **)v38 + 2, a2);
  WTF::String::operator=((WTF::StringImpl **)v38 + 3, a3);
  v17 = v38;
  v18 = vminnm_f32((float32x2_t)__PAIR64__(LODWORD(a10), LODWORD(a9)), (float32x2_t)0x412000003F800000);
  *((int8x8_t *)v38 + 5) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3DCCCCCD00000000, v18), (int8x8_t)0x3DCCCCCD00000000, (int8x8_t)v18);
  v19 = fminf(a11, 2.0);
  if (v19 < 0.0)
    v19 = 0.0;
  *((float *)v17 + 12) = v19;
  v20 = v39;
  if (v39)
    ++*(_DWORD *)v39;
  v21 = (WTF::StringImpl **)*((_QWORD *)v17 + 4);
  *((_QWORD *)v17 + 4) = v20;
  if (v21)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v21, v16);
  v22 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v23 = *a12;
  *a12 = 0;
  v24 = *((_QWORD *)v22 + 2);
  *((_QWORD *)v22 + 2) = v23;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v26 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v27 = v38;
  v38 = 0;
  v28 = (WTF *)*((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = v27;
  if (v28)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v28, v25);
  v29 = *(_QWORD *)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v30 = (WTF *)*((_QWORD *)WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32))
               + 1);
  if (v30)
    ++*(_DWORD *)v30;
  v37 = v30;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v29 + 16))(v29, &v37);
  v32 = v37;
  v37 = 0;
  if (v32)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v32, v31);
  v33 = v38;
  v38 = 0;
  if (v33)
    WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v33, v31);
  result = (WTF::StringImpl **)v39;
  v39 = 0;
  if (result)
    return WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(result, v31);
  return result;
}

uint64_t WebKit::WebPageProxy::speechSynthesisPause(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v5 = *a2;
  *a2 = 0;
  v6 = *((_QWORD *)v4 + 4);
  *((_QWORD *)v4 + 4) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7);
}

uint64_t WebKit::WebPageProxy::speechSynthesisResume(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  v5 = *a2;
  *a2 = 0;
  v6 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(a1 + 32));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7 + 32))(*(_QWORD *)v7);
}

uint64_t WebKit::WebPageProxy::setCanShowPlaceholder(uint64_t this, const ElementContext *a2, char a3)
{
  const ElementContext *v3;
  char v4;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v3 = a2;
      v4 = a3;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanShowPlaceholder>(*(_QWORD *)(this + 208), (uint64_t)&v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

void WebKit::WebPageProxy::setMockWebAuthenticationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 264);
  CFRetain(*(CFTypeRef *)(v3 + 8));
  WebKit::WebsiteDataStore::setMockWebAuthenticationConfiguration(v3, a2);
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WebKit::WebPageProxy::startTextManipulations(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    v12 = *(_QWORD *)(a1 + 1144);
    *(_QWORD *)(a1 + 1144) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = a2;
    v14 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v13, a5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

WTF *WebKit::WebPageProxy::completeTextManipulation(uint64_t a1, WTF *a2, uint64_t *a3)
{
  void *v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)*a3 + 16))(*a3, 1, &v5);
    result = v5;
    if (v5)
    {
      v5 = 0;
      LODWORD(v6) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    v5 = a2;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(_QWORD *)(a1 + 208), (uint64_t *)&v5, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setOverriddenMediaType(WebKit::WebPageProxy *this, const WTF::String *a2)
{
  uint64_t *v5;

  WTF::String::operator=((WTF::StringImpl **)this + 150, a2);
  v5 = (uint64_t *)a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverriddenMediaType>(*((_QWORD *)this + 26), &v5, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
}

WTF::StringImpl *WebKit::WebPageProxy::loadServiceWorker(uint64_t a1, WTF::URL *a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *result;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _BYTE buf[12];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729))
  {
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v10 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(v11 + 744);
    v13 = *(_QWORD *)(v11 + 1896);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v37 = 2048;
    v38 = v12;
    v39 = 2048;
    v40 = v13;
    v41 = 1024;
    v42 = v14;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadServiceWorker:", buf, 0x26u);
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v15 + 2136))
  {
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  *(_BYTE *)(a1 + 1118) = 1;
  v17 = *a4;
  *a4 = 0;
  v18 = *(_QWORD *)(v15 + 2136);
  *(_QWORD *)(v15 + 2136) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a3)
  {
    v19 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v19 += 2;
    v34 = v19;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>navigator.serviceWorker.register('", 43, (uint64_t *)&v34, (uint64_t)"', { type: 'module' });</script>",
      33,
      &v35);
    WTF::String::utf8();
    v21 = v35;
    v22 = *(WTF **)buf;
    v35 = 0;
    *(_QWORD *)buf = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v25 = v34;
    v34 = 0;
    if (!v25)
      goto LABEL_29;
  }
  else
  {
    v23 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v23 += 2;
    v33 = v23;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>navigator.serviceWorker.register('", 43, (uint64_t *)&v33, (uint64_t)"');</script>",
      13,
      &v35);
    WTF::String::utf8();
    v24 = v35;
    v22 = *(WTF **)buf;
    v35 = 0;
    *(_QWORD *)buf = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v33;
    v33 = 0;
    if (!v25)
      goto LABEL_29;
  }
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::destroy(v25, v20);
    if (v22)
      goto LABEL_30;
    goto LABEL_52;
  }
  *(_DWORD *)v25 -= 2;
LABEL_29:
  if (v22)
  {
LABEL_30:
    v26 = (uint64_t)v22 + 16;
    v27 = *((_QWORD *)v22 + 1);
    goto LABEL_31;
  }
LABEL_52:
  v27 = 0;
  v26 = 0;
LABEL_31:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::URL::protocolHostAndPort(a2);
  WebKit::WebPageProxy::loadData(a1, v26, v27, (WTF::StringImpl *)buf, (WTF::StringImpl *)&v35, (WTF::StringImpl *)&v31, 0, 0, &v32);
  if (v32)
    CFRelease(*(CFTypeRef *)(v32 + 8));
  v29 = v31;
  v31 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
      if (!v22)
        return result;
      goto LABEL_47;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v22)
    return result;
LABEL_47:
  if (*(_DWORD *)v22 == 1)
    return (WTF::StringImpl *)WTF::fastFree(v22, v28);
  --*(_DWORD *)v22;
  return result;
}

uint64_t WebKit::WebPageProxy::gpuProcessExited(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  WebKit::WebProcessPool *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  *(_DWORD *)(a1 + 1156) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 600))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 808);
  if ((v6 & 0x700A800) != 0)
  {
    v7 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v5);
    v8 = (void *)result;
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 808);
  }
  else
  {
    v8 = 0;
  }
  if ((v6 & 0x6D5000) != 0)
  {
    v9 = *(_QWORD *)(a1 + 224);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v5);
    v10 = result;
  }
  else
  {
    v10 = 0;
  }
  if ((v8 | v10) == 1)
  {
    v11 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(a1 + 48) + 24));
    v12 = (_BYTE *)WebKit::WebProcessPool::ensureGPUProcess(v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E34D5D50;
    v16 = v14;
    WebKit::GPUProcessProxy::updateCaptureAccess(v12, v8, v10, 0, v13, (uint64_t *)&v16);
    v15 = (uint64_t)v16;
    v16 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WebKit::GPUProcessProxy::setOrientationForMediaCapture((uint64_t)v12, *(_DWORD *)(a1 + 1000));
  }
  return result;
}

void WebKit::WebPageProxy::requestSpeechRecognitionPermission(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = *(_QWORD *)(a1 + 1184);
  if (!v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v7 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    v8 = *(unsigned int **)(a1 + 24);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    *(_QWORD *)(v7 + 8) = v8;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_QWORD *)(v7 + 48) = 0x200000002;
    *(_DWORD *)(v7 + 56) = 2;
    std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1184), (WTF::StringImpl *)v7);
    v6 = *(_QWORD *)(a1 + 1184);
  }
  WebKit::SpeechRecognitionPermissionManager::request(v6, a2, a3);
}

uint64_t WebKit::WebPageProxy::requestUserMediaPermissionForSpeechRecognition(WebCore::SpeechRecognitionCaptureSource *a1, uint64_t a2, uint64_t a3, WebCore::SecurityOrigin *a4, uint64_t a5, uint64_t *a6)
{
  WebKit::UserMediaPermissionRequestManagerProxy *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _BYTE v16[48];

  WebCore::SpeechRecognitionCaptureSource::findCaptureDevice(a1);
  if (v16[40])
  {
    v12 = WebKit::WebPageProxy::userMediaPermissionRequestManager(a1);
    WebKit::UserMediaPermissionRequestManagerProxy::checkUserMediaPermissionForSpeechRecognition((uint64_t)v12, a2, a3, a4, a5, (uint64_t)v16, a6);
  }
  else
  {
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v13);
}

uint64_t WebKit::WebPageProxy::createRealtimeMediaSourceForSpeechRecognition@<X0>(WebKit::WebProcessProxy **this@<X0>, uint64_t a2@<X8>)
{
  const WTF::StringImpl *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v12[40];
  unsigned __int8 v13;

  WebCore::SpeechRecognitionCaptureSource::findCaptureDevice((WebCore::SpeechRecognitionCaptureSource *)this);
  if (v13)
  {
    v5 = (unint64_t)this[28];
      goto LABEL_8;
    while (1)
    {
      WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v4);
      v7 = WebKit::WebProcessProxy::ensureSpeechRecognitionRemoteRealtimeMediaSourceManager(this[26]);
      v5 = v13;
      if (v13)
        break;
      __break(1u);
LABEL_8:
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      v6[64] = 1;
    }
    v8 = WTF::fastMalloc((WTF *)0x2D8);
    v9 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebKit::SpeechRecognitionRemoteRealtimeMediaSource::SpeechRecognitionRemoteRealtimeMediaSource(v8, v9, v7, (uint64_t)v12);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 16) = 6;
  }
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v10);
}

void WebKit::WebPageProxy::modelElementGetCamera(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  unsigned int *v4;

  v4 = *(unsigned int **)(a1 + 416);
  if (v4)
    WebKit::ModelElementController::getCameraForModelElement(v4, a2, a3, a4);
}

uint64_t WebKit::WebPageProxy::modelElementSetCamera(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, float64_t a5, float64_t a6)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::setCameraForModelElement(result, a2, a3, a4, a5, a6);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsPlayingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::isPlayingAnimationForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

void WebKit::WebPageProxy::modelElementSetAnimationIsPlaying(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int *v5;

  v5 = *(unsigned int **)(a1 + 416);
  if (v5)
    WebKit::ModelElementController::setAnimationIsPlayingForModelElement(v5, a2, a3, a4, a5);
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsLoopingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::isLoopingAnimationForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetIsLoopingAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::setIsLoopingAnimationForModelElement(result, a2, a3, a4, a5);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementAnimationDuration(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::animationDurationForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementAnimationCurrentTime(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::animationCurrentTimeForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetAnimationCurrentTime(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4, double a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::setAnimationCurrentTimeForModelElement(result, a2, a3, a4, a5);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementHasAudio(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::hasAudioForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::modelElementIsMuted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::isMutedForModelElement((uint64_t)result, a2, a3, a4);
  return result;
}

uint64_t WebKit::WebPageProxy::modelElementSetIsMuted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 416);
  if (result)
    return WebKit::ModelElementController::setIsMutedForModelElement(result, a2, a3, a4, a5);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::takeModelElementFullscreen(WTF::StringImpl *result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];

  v3 = *((_QWORD *)result + 52);
  if (v3)
  {
    WebKit::WebPageProxy::currentURL(result, &v8);
    MEMORY[0x19AEABB0C](v9, &v8, 0);
    WebKit::ModelElementController::takeModelElementFullscreen(v3, a2, a3, (WTF::URL *)v9);
    v7 = v9[0];
    v9[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::appPrivacyReportTestingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t *v9;

  v4 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
  v9 = &v8;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(v4, &v9, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 356;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34D5D78;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

unsigned int *WebKit::WebPageProxy::clearAppPrivacyReportTestingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t *v9;

  v4 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(a1 + 264));
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
  v9 = &v8;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(v4, &v9, a2, 0, 0, 1);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 362;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34D5DA0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::WebPageProxy::requestCookieConsent(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 344))(*(_QWORD *)(a1 + 104));
}

unsigned int *WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *result;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25[2];
  uint64_t v26;
  uint64_t v27;

  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1176))(v13);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  if (v14)
  {
    {
      if (WebKit::singleton(void)::singleton)
      {
        v16 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 16);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          *(_BYTE *)(a1 + 1320) = 1;
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
          v20 = *(unsigned int **)(a1 + 24);
          if (v20)
          {
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
          }
          v22 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v22 = &off_1E34D5DC8;
          *(_QWORD *)(v22 + 8) = v20;
          *(float *)(v22 + 16) = a3;
          *(float *)(v22 + 20) = a4;
          *(float *)(v22 + 24) = a5;
          *(float *)(v22 + 28) = a6;
          v26 = a2;
          v27 = v19;
          v24 = v22;
          v25[0] = &v27;
          v25[1] = &v26;
          WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v16, v25, &v24, 0, 0, 1);
          v23 = v24;
          v24 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
        }
      }
    }
    else
    {
      WebKit::singleton(void)::singleton = 0;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::cancelTextRecognitionForVideoInElementFullScreen(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1176))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  if (v4)
  {
    *((_BYTE *)this + 1320) = 0;
    v6 = *((_QWORD *)this + 5);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1192))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::shouldAvoidSynchronouslyWaitingToPreventDeadlock(WebKit::WebPageProxy *this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (*((_BYTE *)this + 1289))
    return 1;
  result = WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled(this);
  if ((_DWORD)result)
  {
    {
      if (WebKit::singleton(void)::singleton)
      {
        v2 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
        if (v2)
        {
          v3 = (unsigned int *)(v2 + 16);
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 + 1, v3));
          v5 = *(_QWORD *)(v2 + 144);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
          if (v5)
            return 0;
        }
      }
    }
    else
    {
      WebKit::singleton(void)::singleton = 0;
    }
    return 1;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::pauseAllAnimations(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::playAllAnimations(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void WebKit::WebPageProxy::didCreateSleepDisabler(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  WebCore::SleepDisabler *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v26;
  int v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*a4)
  {
    v6 = (WebCore::SleepDisabler *)WTF::fastMalloc((WTF *)0x28);
    WebCore::SleepDisabler::SleepDisabler();
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 1968);
    v8 = *v7;
    if (*v7
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(*(_QWORD *)(a1 + 32) + 1968), 0), (v8 = *v7) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = (_QWORD *)(v8 + 16 * v13);
    v15 = *v14;
    if (*v14)
    {
      v16 = 0;
      v17 = 1;
      do
      {
        if (v15 == a3)
        {
          WebCore::SleepDisabler::~SleepDisabler(v6);
          WTF::fastFree(v6, v20);
          return;
        }
        if (v15 == -1)
          v16 = v14;
        v13 = (v13 + v17) & v9;
        v14 = (_QWORD *)(v8 + 16 * v13);
        v15 = *v14;
        ++v17;
      }
      while (*v14);
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v14 = v16;
      }
    }
    *v14 = a3;
    std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)v14 + 1, v6);
    v18 = *v7;
    if (*v7)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v21 = *v7;
    if (*v7)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 <= 0x400)
    {
      if (3 * v24 > 4 * v23)
        return;
LABEL_25:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v7, v14);
      return;
    }
    if (v24 <= 2 * v23)
      goto LABEL_25;
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v27 = 136315138;
      v28 = "void WebKit::WebPageProxy::didCreateSleepDisabler(IPC::Connection &, SleepDisablerIdentifier, const String &, BOOL)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13952: Invalid message dispatched %s", (uint8_t *)&v27, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
}

WebCore::SleepDisabler *WebKit::WebPageProxy::didDestroySleepDisabler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::SleepDisabler *result;
  uint64_t v4;
  WebCore::SleepDisabler *v5;
  uint64_t v6;

  v6 = a2;
  v2 = *(_QWORD *)(a1 + 32);
  result = (WebCore::SleepDisabler *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v2 + 1968), &v6);
  v4 = *(_QWORD *)(v2 + 1968);
  if (v4)
  {
    v5 = (WebCore::SleepDisabler *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if (v5 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v2 + 1968), (uint64_t)result);
  return result;
}

void WebKit::WebPageProxy::beginSystemPreview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  uint64_t v5;
  const void *v6;

  v5 = *(_QWORD *)(a1 + 408);
  if (v5)
  {
    WebKit::SystemPreviewController::begin(v5, a2, a3, a4, a5);
  }
  else
  {
    v6 = *a5;
    *a5 = 0;
    (*(void (**)(const void *))(*(_QWORD *)v6 + 16))(v6);
    (*(void (**)(const void *))(*(_QWORD *)v6 + 8))(v6);
  }
}

void WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::SecurityOriginData *a5, uint64_t a6)
{
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  NSObject *v31;
  uint64_t v32;
  char v33;
  _BYTE buf[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2576))
  {
    v10 = WebKit::WebFrameProxy::webFrame(a3, a4);
    if (v10)
    {
      v32 = v10;
      CFRetain(*(CFTypeRef *)(v10 + 8));
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, a5);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2576) + 40);
      if (v12)
      {
        v33 = 1;
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 32);
          v14 = (uint64_t *)(v13 + 2584);
          v15 = *(_QWORD *)(v13 + 2584);
          if (v15
            || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v13 + 2584), 0), (v15 = *v14) != 0))
          {
            v16 = *(_DWORD *)(v15 - 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v12, v11) & v16;
          v18 = v15 + 16 * v17;
          if ((WTF::equal(*(WTF **)v18, 0, v19) & 1) == 0)
          {
            v21 = 0;
            v22 = 1;
            do
            {
              if (*(_QWORD *)v18 == -1)
              {
                v21 = v18;
              }
              else if ((WTF::equalIgnoringASCIICase(*(WTF **)v18, *(const WTF::StringImpl **)v12, v20) & 1) != 0)
              {
                goto LABEL_26;
              }
              v17 = (v17 + v22) & v16;
              v18 = v15 + 16 * v17;
              ++v22;
            }
            while (!WTF::equal(*(WTF **)v18, 0, v20));
            if (v21)
            {
              *(_QWORD *)v21 = 0;
              *(_BYTE *)(v21 + 8) = 0;
              --*(_DWORD *)(*v14 - 16);
              v18 = v21;
            }
          }
          WTF::String::operator=((WTF::StringImpl **)v18, (WTF::StringImpl *)v12);
          *(_BYTE *)(v18 + 8) = 0;
          v23 = *v14;
          v24 = *v14 ? *(_DWORD *)(v23 - 12) + 1 : 1;
          *(_DWORD *)(v23 - 12) = v24;
          v25 = *v14;
          v26 = *v14 ? *(_DWORD *)(v25 - 12) : 0;
          v27 = (*(_DWORD *)(v25 - 16) + v26);
          v28 = *(unsigned int *)(v25 - 4);
          if (v28 > 0x400)
            break;
          if (3 * v28 <= 4 * v27)
            goto LABEL_25;
LABEL_26:
          v29 = *(unsigned __int8 *)(v18 + 8);
          if ((v29 & a6) == 0)
          {
            *(_BYTE *)(v18 + 8) = v29 | a6;
            (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 264)
                                                                                            + 392)
                                                                              + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 392), buf, v12, a6, v33 & 1);
            v33 = 0;
          }
          v12 = *(_QWORD *)(v12 + 16);
          if (!v12)
            goto LABEL_33;
        }
        if (v28 > 2 * v27)
          goto LABEL_26;
LABEL_25:
        v18 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v14, (WTF::ASCIICaseInsensitiveHash **)v18);
        goto LABEL_26;
      }
LABEL_33:
      v30 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v11);
        else
          *(_DWORD *)v30 -= 2;
      }
      CFRelease(*(CFTypeRef *)(v32 + 8));
    }
    else
    {
      v31 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "void WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(IPC::Connection &,"
                             " FrameIdentifier, const SecurityOriginData &, WindowProxyProperty)";
        _os_log_fault_impl(&dword_196BCC000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 13996: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
    }
  }
}

void WebKit::WebPageProxy::dispatchLoadEventToFrameOwnerElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;
  __int128 v12;
  char v13;

  v9[0] = a2;
  v9[1] = a3;
  v4 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v6 = *(_QWORD *)(v5 + 312);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        CFRetain(*(CFTypeRef *)(v7 + 8));
        v8 = v9;
        v12 = *(_OWORD *)(v7 + 272);
        v13 = 1;
        v10 = &v8;
        v11 = 0;
        WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DispatchLoadEventToFrameOwnerElement &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::DispatchLoadEventToFrameOwnerElement&)#1}>(a1, (uint64_t)&v12, (uint64_t)&v10);
        CFRelease(*(CFTypeRef *)(v7 + 8));
      }
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebPageProxy::focusRemoteFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 264) == v7 || (v10 = *(_QWORD *)(v9 + 1104)) != 0 && *(_QWORD *)(v10 + 72) == v7)
        {
          WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses((_QWORD *)a1, a2, v11);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 80))(*(_QWORD *)(a1 + 104), a1);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebPageProxy::postMessageToRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v13[0] = a5;
  v13[1] = a6;
  v12[0] = v14;
  v12[1] = a4;
  v12[2] = v13;
  v12[3] = a7;
  v12[4] = a8;
  v9 = WebKit::WebFrameProxy::webFrame(a5, a6);
  if (v9)
  {
    v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v11 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v10 + 32) + 16));
    if (v11)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(*(_QWORD *)(v11 + 24), (uint64_t)v12, *(_QWORD *)(v11 + 16), 0);
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(*(_QWORD *)(a1 + 208), (uint64_t)v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
}

WTF::StringImpl *WebKit::WebPageProxy::renderTreeAsTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4, __int16 a5, uint64_t *a6)
{
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[3];
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  __int16 v27;
  _QWORD v28[2];

  v28[0] = a2;
  v28[1] = a3;
  v27 = a5;
  v23[0] = (WTF::StringImpl *)v28;
  v23[1] = a4;
  v23[2] = (WTF::StringImpl *)&v27;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  v11 = v10 + 1.0;
  v12 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>(&v24, *(_QWORD *)(v14 + 24), (uint64_t **)v23, *(_QWORD *)(v14 + 16), v11);
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>(&v24, *(_QWORD *)(a1 + 208), (uint64_t **)v23, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), v11);
LABEL_6:
  v15 = v26;
  if (!v26)
  {
    v19 = v25;
    v25 = 0;
    v23[0] = v19;
    v20 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v22 = v23[0];
    v23[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E34D42C0[v15])(v23, &v24);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v23[0];
  v23[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  if ((_DWORD)v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E34D42C0[v15])(v23, &v24);
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::frameTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  unsigned int v24;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v21 = (WTF::StringImpl *)v25;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  v9 = v8 + 1.0;
  v10 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v11 + 32) + 16));
    if (v12)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>((uint64_t)v22, *(_QWORD *)(v12 + 24), (uint64_t **)&v21, *(_QWORD *)(v12 + 16), v9);
      CFRelease(*(CFTypeRef *)(v11 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>((uint64_t)v22, *(_QWORD *)(a1 + 208), (uint64_t **)&v21, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), v9);
LABEL_6:
  v13 = v24;
  if (!v24)
  {
    v17 = v23;
    v23 = 0;
    v21 = v17;
    v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v20 = v21;
    v21 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34D42D0[v13])(&v21, v22);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if ((_DWORD)v13 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34D42D0[v13])(&v21, v22);
  return result;
}

IPC::Encoder *WebKit::WebPageProxy::requestTargetedElement(WebKit::WebPageProxy *a1, API::TargetedElementRequest *this, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  int v21;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  if (*((_BYTE *)a1 + 729) || !*((_BYTE *)a1 + 728))
  {
    v20[0] = 0;
    v20[1] = 0;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (IPC::Encoder *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v5);
  }
  else
  {
    API::TargetedElementRequest::makeRequest(this, a1, (uint64_t)v20);
    v8 = *a3;
    *a3 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1 + 6, (uint64_t)a1 + 16);
    v9 = (unsigned int *)*((_QWORD *)a1 + 3);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = *((_QWORD *)a1 + 26);
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2336;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v24 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::TargetedElementRequest,void>::encode((IPC::Encoder *)v13, (uint64_t)v20);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34D5EE0;
    v14[1] = v8;
    v14[2] = v9;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v22[0] = v14;
    v22[1] = v15;
    v23 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v24, 0, (uint64_t)v22, 1);
    if (v23)
    {
      v17 = v22[0];
      v22[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    result = v24;
    v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      result = (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
    if (v21 != -1)
      return (IPC::Encoder *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E34D42E0[v21])(v22, v20);
  }
  return result;
}

WTF::MachSendRight *WebKit::WebPageProxy::takeSnapshotForTargetedElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8[2];
  _OWORD v9[4];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v9[0]) = 0;
    v10 = 0;
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 16))(v3, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v9);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 48);
    v9[0] = *(_OWORD *)(a2 + 32);
    v9[1] = v6;
    v7 = v5;
    v8[0] = &v7;
    v8[1] = (uint64_t *)v9;
    return (WTF::MachSendRight *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(*(_QWORD *)(a1 + 208), v8, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::requestTextExtraction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6[10];
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v6[0]) = 0;
    v7 = 0;
    v9 = 0u;
    v8 = 0u;
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
    if (v7 != -1)
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v7])(&v10, v6);
  }
  else
  {
    v6[0] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(*(_QWORD *)(a1 + 208), v6, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

unsigned int *WebKit::WebPageProxy::sendScrollPositionChangedForNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int *result;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  char v26;
  uint64_t *v27[3];
  char v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;

  v31[0] = a3;
  v31[1] = a4;
  v29 = a6;
  v30 = a7;
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int8 *)(a2 + 16);
  v27[0] = v31;
  v27[1] = a5;
  v27[2] = &v29;
  v13 = *(_QWORD *)(a1 + 200);
  v28 = a8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), v13);
  v14 = *(unsigned int **)(v13 + 8);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v25 = (WTF *)v14;
  v26 = a9;
  if (v12)
  {
    v16 = WebKit::WebFrameProxy::webFrame(v10, v11);
    if (v16)
    {
      v17 = v16;
      CFRetain(*(CFTypeRef *)(v16 + 8));
      v18 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v17 + 32) + 16));
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 24);
        v32 = *(_QWORD *)(v18 + 16);
        WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(v19, v27, (uint64_t *)&v25, &v32, 0);
        CFRelease(*(CFTypeRef *)(v17 + 8));
        goto LABEL_9;
      }
      CFRelease(*(CFTypeRef *)(v17 + 8));
    }
  }
  v21 = *(_QWORD *)(a1 + 208);
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(v21, v27, (uint64_t *)&v25, &v32, 0);
LABEL_9:
  result = (unsigned int *)v25;
  v25 = 0;
  if (result)
  {
    do
    {
      v23 = __ldaxr(result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, result));
    if (!v24)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v20);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::bindRemoteAccessibilityFrames(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  WTF *v18;
  size_t v19;
  WTF *v20;
  WTF *v21;
  int v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  int *v26[3];
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _QWORD v32[2];

  v32[0] = a3;
  v32[1] = a4;
  v31 = a2;
  v26[0] = &v31;
  v26[1] = (int *)v32;
  v26[2] = a5;
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  v11 = v10 + 1.0;
  v12 = WebKit::WebFrameProxy::webFrame(a3, a4);
  if (v12)
  {
    v13 = v12;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v13 + 32) + 16));
    if (v14)
    {
      WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>(&v27, *(_QWORD *)(v14 + 24), v26, *(_QWORD *)(v14 + 16), v11);
      CFRelease(*(CFTypeRef *)(v13 + 8));
      goto LABEL_6;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>(&v27, *(_QWORD *)(a1 + 208), v26, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), v11);
LABEL_6:
  v15 = v30;
  if (v30)
  {
    v24 = 0;
    v25 = 0;
    result = WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v24);
    v18 = v24;
    if (!v24)
      goto LABEL_15;
    v24 = 0;
    LODWORD(v25) = 0;
LABEL_14:
    result = WTF::fastFree(v18, v17);
LABEL_15:
    if ((_DWORD)v15 == -1)
      return result;
    return ((uint64_t (*)(int **, uint64_t *))off_1E34D4318[v15])(v26, &v27);
  }
  v18 = v28;
  v19 = HIDWORD(v29);
  v28 = 0;
  v29 = 0;
  v21 = 0;
  v22 = 0;
  v23 = v19;
  if ((_DWORD)v19)
  {
    v22 = v19;
    v21 = (WTF *)WTF::fastMalloc((WTF *)v19);
    memcpy(v21, v18, v19);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v21);
  v20 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v20, v17);
  }
  if (v18)
    goto LABEL_14;
  return ((uint64_t (*)(int **, uint64_t *))off_1E34D4318[v15])(v26, &v27);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  uint64_t result;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *a1;
  *a1 = 0;
  v6 = *(WTF **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = v2;
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(&v8, (uint64_t)&v6);
  v4 = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    WTF::fastFree(v4, v3);
  }
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebPageProxy::documentURLForConsoleLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[5];

  v5 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v5)
  {
    v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6 + 48);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    v11[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v11);
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v10 = v11[0];
    v11[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

WTF *WebKit::WebPageProxy::resetVisibilityAdjustmentsForTargetedElements(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v7;
  int v8;
  WTF *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[40];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)result + 729) || (v5 = result, !*((_BYTE *)result + 728)))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v16 = 0;
  v17 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    if (v7 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v8 = 48 * v7;
    v9 = (WTF *)WTF::fastMalloc((WTF *)(48 * v7));
    LODWORD(v17) = (v8 & 0xFFFFFFF0) / 0x30;
    v16 = v9;
    if (*(_DWORD *)(a2 + 12))
    {
      v10 = 0;
      v11 = (char *)v9 + 8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v10);
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)&v18[8] = *(_OWORD *)(v12 + 32);
        *(_OWORD *)&v18[24] = v14;
        *((_QWORD *)v11 - 1) = v13;
        *(_OWORD *)v11 = *(_OWORD *)v18;
        *((_OWORD *)v11 + 1) = *(_OWORD *)&v18[16];
        *((_QWORD *)v11 + 4) = *(_QWORD *)&v18[32];
        ++v10;
        v11 += 48;
      }
      while (v10 < *(unsigned int *)(a2 + 12));
      HIDWORD(v17) = v10;
    }
  }
  *(_QWORD *)v18 = &v16;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(*((_QWORD *)v5 + 26), (uint64_t *)v18, a3, *(_QWORD *)(*((_QWORD *)v5 + 4) + 1896), 0, 1);
  result = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::adjustVisibilityForTargetedElements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  IPC::Encoder *v46[3];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729) || (v6 = a1, !*(_BYTE *)(a1 + 728)))
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      if (v8 >> 26)
      {
        __break(0xC471u);
LABEL_38:
        JUMPOUT(0x19735ED0CLL);
      }
      v10 = (uint64_t *)WTF::fastMalloc((WTF *)(v8 << 6));
      LODWORD(v44) = v8;
      v43 = v10;
      if (*(_DWORD *)(a2 + 12))
      {
        v42 = v6;
        v11 = 0;
        while (1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v11);
          v13 = *(_QWORD *)(v12 + 16);
          v14 = *(_OWORD *)(v12 + 48);
          v48 = *(_OWORD *)(v12 + 32);
          v49 = v14;
          *(_QWORD *)&v47 = v13;
          v50 = 0;
          v51 = 0;
          v15 = *(unsigned int *)(v12 + 108);
          if ((_DWORD)v15)
          {
            if (v15 >> 29)
            {
              __break(0xC471u);
              goto LABEL_38;
            }
            v16 = WTF::fastMalloc((WTF *)(8 * v15));
            LODWORD(v51) = v15;
            v50 = v16;
            if (*(_DWORD *)(v12 + 108))
            {
              v17 = 0;
              do
              {
                v18 = *(_QWORD *)(v12 + 96) + 16 * v17;
                v19 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v18 + 12));
                if (v19 <= 8)
                  v20 = 8;
                else
                  v20 = v19;
                v21 = WTF::fastZeroedMalloc((WTF *)(8 * v20 + 16));
                v23 = v21 + 16;
                v45 = v21 + 16;
                *(_DWORD *)(v21 + 8) = v20 - 1;
                *(_DWORD *)(v21 + 12) = v20;
                *(_QWORD *)v21 = 0;
                v24 = *(unsigned int *)(v18 + 12);
                if ((_DWORD)v24)
                {
                  v25 = *(WTF::StringImpl ***)v18;
                  v26 = 8 * v24;
                  do
                  {
                    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&v45, v25++, v22, (uint64_t)v46);
                    v26 -= 8;
                  }
                  while (v26);
                  v23 = v45;
                }
                *(_QWORD *)(v16 + 8 * v17++) = v23;
              }
              while (v17 < *(unsigned int *)(v12 + 108));
              v16 = v50;
              LODWORD(v15) = v51;
            }
            else
            {
              LODWORD(v17) = HIDWORD(v51);
            }
          }
          else
          {
            LODWORD(v17) = 0;
            v16 = 0;
          }
          v27 = v47;
          v28 = &v10[8 * v11];
          v29 = v49;
          *((_OWORD *)v28 + 1) = v48;
          *((_OWORD *)v28 + 2) = v29;
          *(_OWORD *)v28 = v27;
          v28[7] = 0;
          v50 = 0;
          v28[6] = v16;
          LODWORD(v51) = 0;
          *((_DWORD *)v28 + 14) = v15;
          HIDWORD(v51) = 0;
          ++v11;
          *((_DWORD *)v28 + 15) = v17;
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v9);
          if (v11 >= *(unsigned int *)(a2 + 12))
          {
            HIDWORD(v44) = v11;
            v6 = v42;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v10 = 0;
    }
    LODWORD(v11) = 0;
LABEL_27:
    v30 = *(_QWORD *)(v6 + 208);
    v31 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 1896);
    v32 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v32 = 2103;
    *(_QWORD *)(v32 + 8) = v31;
    *(_QWORD *)(v32 + 528) = v32 + 16;
    *(_QWORD *)(v32 + 536) = v32 + 16;
    *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v32 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
    v46[0] = (IPC::Encoder *)v32;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v32, 8uLL, 8) = v11;
    if ((_DWORD)v11)
    {
      v33 = &v10[8 * (unint64_t)v11];
      do
      {
        IPC::ArgumentCoder<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&>((IPC::Encoder *)v32, v10);
        IPC::VectorArgumentCoder<false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v32, (uint64_t)(v10 + 6));
        v10 += 8;
      }
      while (v10 != v33);
    }
    v34 = *a3;
    *a3 = 0;
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v35 = &off_1E34D5FA8;
    v35[1] = v34;
    v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_QWORD *)&v47 = v35;
    *((_QWORD *)&v47 + 1) = v36;
    LOBYTE(v48) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v30, v46, 0, (uint64_t)&v47, 1);
    if ((_BYTE)v48)
    {
      v38 = v47;
      *(_QWORD *)&v47 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    v39 = v46[0];
    v46[0] = 0;
    if (v39)
    {
      IPC::Encoder::~Encoder(v39, v37);
      WTF::fastFree(v40, v41);
    }
    return WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, (WTF::StringImpl *)v37);
  }
}

uint64_t WebKit::WebPageProxy::numberOfVisibilityAdjustmentRects(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(*(_QWORD *)(a1 + 208), (uint64_t)&v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

unsigned int *WebKit::WebPageProxy::addNowPlayingMetadataObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[24];

  v4 = a1 + 1360;
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 1360)))
  {
    v6[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartObservingNowPlayingMetadata>(*(_QWORD *)(a1 + 208), (uint64_t)v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
  }
  return WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>(v4, a2, (uint64_t)v6);
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v20 = (unsigned int *)*a2;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::removeNowPlayingMetadataObserver(uint64_t a1, uint64_t *a2)
{
  _QWORD **v3;
  uint64_t result;
  char v5;

  v3 = (_QWORD **)(a1 + 1360);
  WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(a1 + 1360, a2);
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v3);
  if ((_DWORD)result)
  {
    v5 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopObservingNowPlayingMetadata>(*(_QWORD *)(a1 + 208), (uint64_t)&v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
  }
  return result;
}

void WebKit::WebPageProxy::setNowPlayingMetadataObserverForTesting(uint64_t a1, _QWORD **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (uint64_t *)(a1 + 1376);
  v5 = *(uint64_t **)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = 0;
  if (v5)
  {
    WebKit::WebPageProxy::removeNowPlayingMetadataObserver(a1, v5);
    v8 = 0;
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)&v8, (uint64_t)v5);
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *v4;
  *v4 = (uint64_t)v6;
  if (v7)
  {
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)v4, v7);
    v6 = (_QWORD *)*v4;
  }
  if (v6)
    WebKit::WebPageProxy::addNowPlayingMetadataObserver(a1, v6);
}

uint64_t WebKit::WebPageProxy::nowPlayingMetadataChanged(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = (uint64_t *)(a1 + 1360);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D5FF8;
  v4[1] = a2;
  v6 = v4;
  WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(&v8, (_QWORD **)a1);
  if (HIDWORD(v9))
  {
    v5 = v8;
    v6 = 8 * HIDWORD(v9);
    do
    {
      if (*v5)
      {
        if (*(_QWORD *)(*v5 + 8))
        {
          v10 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v10))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*v5 + 8));
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
}

uint64_t WebKit::WebPageProxy::frameNameChanged(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34D6020;
  v8[1] = a2;
  v8[2] = v11;
  v8[3] = a5;
  v10 = v8;
  WebKit::WebPageProxy::forEachWebContentProcess(a1, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::closeCurrentTypingCommand(uint64_t this)
{
  char v1;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v1 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CloseCurrentTypingCommand>(*(_QWORD *)(this + 208), (uint64_t)&v1, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t API::ObjectImpl<(API::Object::Type)88>::type()
{
  return 88;
}

void `non-virtual thunk to'WebKit::WebPageProxy::Internals::~Internals(WebKit::WebPageProxy::Internals *this, WTF::StringImpl *a2)
{
  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

{
  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageProxy::Internals::~Internals((WebKit::WebPageProxy::Internals *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t API::ObjectImpl<(API::Object::Type)86>::type()
{
  return 86;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(WTF::StringImpl **a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **result;

  v2 = qword_1ECE72D50;
  if (qword_1ECE72D50)
  {
    v3 = *(_DWORD *)(qword_1ECE72D50 - 4);
    v4 = *(_DWORD *)(qword_1ECE72D50 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  qword_1ECE72D50 = (uint64_t)(v6 + 4);
  v6[2] = v5 - 1;
  v6[3] = v5;
  *v6 = 0;
  *(_DWORD *)(qword_1ECE72D50 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (WTF::StringImpl **)(v2 + 16 * v8);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = qword_1ECE72D50;
          if (qword_1ECE72D50)
            v13 = *(_DWORD *)(qword_1ECE72D50 - 8);
          else
            v13 = 0;
          v14 = *((_DWORD *)v11 + 4);
          if (v14 >= 0x100)
            v15 = v14 >> 8;
          else
            v15 = WTF::StringImpl::hashSlowCase(v11);
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          *v18 = 0;
          v19 = *v10;
          *v10 = 0;
          *v18 = v19;
          v18[1] = *(WTF::StringImpl **)(v2 + 16 * v8 + 8);
          v20 = *v10;
          *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v7);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v10 == a1)
            v9 = v18;
        }
        else
        {
          *v10 = 0;
        }
      }
      ++v8;
    }
    while (v8 != v3);
  }
  else
  {
    v9 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  int v9;

  v3 = a1[1];
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v8 = *a1;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v5;
    v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;

  v3 = 0;
  v4 = *(_DWORD *)(result + 8);
  v5 = *a2;
  do
  {
    ++v3;
    v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (((v3 | v4) & 0x80000000) == 0)
  {
    v7 = __OFADD__(v4, v3);
    v8 = (v4 + v3);
    if (!v7)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(v8, 1, *(int8x16_t **)result, *(_QWORD *)(result + 8), *a2, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[5];

  v9 = result;
  v16[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v16[0];
        if (v16[0])
        {
          v12 = (_BYTE *)(v16[0] + 20);
          *(_DWORD *)v16[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v12 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v11 + 20), a3, a4);
          }
          v13 = 0;
          do
          {
            *((_BYTE *)&v16[3] + v13--) = (a5 % 0xA) | 0x30;
            v14 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v14);
          if (v13 + 26 <= 25)
            result = (uint64_t)memcpy(&v12[a4], (char *)&v16[3] + v13 + 1, -v13);
        }
        goto LABEL_12;
      }
LABEL_15:
      v11 = 0;
      goto LABEL_12;
    }
LABEL_16:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_15;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v16[0];
  if (v16[0])
  {
    v15 = (char *)(v16[0] + 20);
    *(_DWORD *)v16[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(v15, a3, a4, a5);
  }
LABEL_12:
  *a6 = v11;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *result, int8x16_t *a2, int a3, unint64_t a4)
{
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v17[25];
  uint64_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v7 = a2[1];
      v20.val[0] = a2[2];
      v8 = a2[3];
      a2 += 4;
      v9 = v8;
      v20.val[1] = 0uLL;
      v21.val[0] = v7;
      v19.val[1] = 0uLL;
      v10 = result;
      vst2q_s8(v10, v19);
      v10 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v10, v21);
      v11 = result + 64;
      vst2q_s8(v11, v20);
      v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v13;
    result += 2;
  }
  v14 = 0;
  do
  {
    v17[v14-- + 24] = (a4 % 0xA) | 0x30;
    v15 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v15);
  if (v14 + 26 <= 25)
  {
    do
    {
      *(_WORD *)v4 = *((unsigned __int8 *)&v18 + v14);
      v4 += 2;
    }
    while (!__CFADD__(v14++, 1));
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::TakeScreenshot>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1542;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *result;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = a2[4];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1531;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,std::optional<double> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,std::optional<double> const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,std::optional<double> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,std::optional<double> const&,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *result;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2[3]);
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2[5]);
  v5 = a2[6];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowMainResourceForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1817;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadURLInFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2275;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  return IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, a2[2]);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDataInFrame>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2270;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WTF::String const&,WTF::String const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, **(const void ***)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 24));
  return IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)(a2 + 32));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1529;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3E28;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[2]);
  LOBYTE(v4) = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 25);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3E28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3E28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL))#1},void,void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>::call(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t *v3;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char v36;
  __int128 v37;
  unint64_t v38;
  unsigned int v39;
  BOOL v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  char v44;
  __int128 v45;
  char v46;

  v3 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v42);
  if (!v44)
  {
    v14 = 0;
    LOBYTE(v35) = 0;
    v41 = 0;
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a2, (uint64_t)&v45);
  if (!v46)
    goto LABEL_47;
  v5 = a2[1];
  v6 = (WTF::StringImpl *)*a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v26 = 0;
    v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 = *a2;
        v26 = a2[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
LABEL_42:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (!v26)
      {
        v5 = 0;
        v6 = 0;
        goto LABEL_46;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
      goto LABEL_45;
    }
LABEL_46:
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30, v6);
    goto LABEL_47;
  }
  v8 = (unsigned __int8 *)v6 + v7;
  v9 = v8 + 1;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v26 = v5;
    v27 = 0;
    goto LABEL_42;
  }
  v10 = *v8;
  if (v10 >= 2)
    goto LABEL_46;
  if (v10)
  {
    v11 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    if (v12)
    {
      v5 = a2[1];
      v9 = (unsigned __int8 *)a2[2];
      v10 = 1;
      v6 = (WTF::StringImpl *)*a2;
      goto LABEL_17;
    }
LABEL_45:
    v6 = (WTF::StringImpl *)*a2;
    v5 = a2[1];
    goto LABEL_46;
  }
  v11 = 0;
LABEL_17:
  v18 = v9 - (unsigned __int8 *)v6;
  if (v5 <= v18)
  {
    v31 = 0;
    v32 = 0;
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a2;
        v31 = a2[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_49;
  }
  v19 = (unsigned __int8 *)v6 + v18;
  a2[2] = (uint64_t)(v19 + 1);
  if (!v6)
  {
    v31 = v5;
    v32 = 0;
LABEL_49:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (!v34)
      goto LABEL_50;
    if (!v31)
    {
      v5 = 0;
      v6 = 0;
LABEL_50:
      *a2 = 0;
      a2[1] = 0;
      v11 = a2[3];
      if (!v11)
      {
LABEL_51:
        v14 = 0;
        LOBYTE(v35) = 0;
        v22 = 1;
        goto LABEL_24;
      }
LABEL_53:
      if (v5)
        (*(void (**)(unint64_t, WTF::StringImpl *))(*(_QWORD *)v11 + 16))(v11, v6);
      goto LABEL_51;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
LABEL_47:
    v6 = (WTF::StringImpl *)*a2;
    v5 = a2[1];
    goto LABEL_50;
  }
  v20 = *v19;
  if (v20 >= 2)
    goto LABEL_50;
  v2 = v20 != 0;
  if (!v44)
  {
    __break(1u);
    goto LABEL_53;
  }
  LOBYTE(v35) = 0;
  v36 = 0;
  if (v43)
  {
    v21 = v42;
    v42 = 0;
    v35 = v21;
    v36 = 1;
  }
  v22 = 0;
  v37 = v45;
  v38 = v11;
  v39 = v10;
  v40 = v2;
  v14 = 1;
LABEL_24:
  v41 = v14;
  if (!v44 || !v43 || (v23 = v42, v42 = 0, !v23))
  {
LABEL_29:
    if (!v22)
      goto LABEL_30;
LABEL_13:
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    goto LABEL_30;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v23, v6);
  if (v22)
    goto LABEL_13;
LABEL_30:
  if (!v14)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(v3);
  v24 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, __int128 *, unint64_t *, BOOL))(*(_QWORD *)v24 + 16))(v24, &v35, &v37, &v38, v2);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v41)
  {
    if (v36)
    {
      result = v35;
      v35 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  _QWORD v6[2];
  WTF::StringImpl *v7;
  char v8;

  LOBYTE(v7) = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *, uint64_t *, _QWORD))(*(_QWORD *)v1 + 16))(v1, &v7, v6, &v4, 0);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1533;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3E50;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3E50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3E50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _BYTE v7[16];
  _BYTE v8[24];

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(v7, a2);
  if (v8[16])
  {
    v4 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v2);
  }
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  char v7;

  LOBYTE(v6) = 0;
  v7 = 0;
  LOBYTE(v4) = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v6, &v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5)
  {
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(_BYTE *a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unsigned __int8 v19;

  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v14);
  if (v16)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v17);
    v6 = v19;
    if (v19)
    {
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *a1 = 0;
      a1[8] = 0;
      v7 = v15;
      if (v15)
      {
        v8 = v14;
        v14 = 0;
        *(_QWORD *)a1 = v8;
        a1[8] = 1;
      }
      a1[16] = 0;
      a1[24] = 0;
      v9 = 1;
      v10 = v18;
      if (v18)
      {
        v10 = 0;
        *((_QWORD *)a1 + 2) = v17;
        a1[24] = 1;
      }
    }
    else
    {
      v9 = 0;
      *a1 = 0;
      v7 = v15;
      v10 = v16 == 0;
    }
    a1[32] = v9;
    if (!v10)
    {
      if (v7)
      {
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            if (v6)
              return result;
            goto LABEL_9;
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v6)
      return result;
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
LABEL_9:
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1, v3);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1532;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3E78;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3E78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3E78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _BYTE v7[16];
  _BYTE v8[24];

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>>(v7, a2);
  if (v8[16])
  {
    v4 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(v2);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1538;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34D3EA0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3EA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3EA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v6, a2);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v9)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _BYTE v4[24];
  WTF::StringImpl *v5;
  char v6;

  LOBYTE(v5) = 0;
  v6 = 0;
  v4[0] = 0;
  v4[16] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, _BYTE *))(*(_QWORD *)v1 + 16))(v1, &v5, v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 v19;

  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v14);
  if (v16)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v17);
    v6 = v19;
    if (v19)
    {
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
      v7 = v15;
      if (v15)
      {
        v8 = v14;
        v14 = 0;
        *(_QWORD *)a1 = v8;
        *(_BYTE *)(a1 + 8) = 1;
      }
      v9 = 0;
      *(_OWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 32) = v18;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)a1 = 0;
      v7 = v15;
      v9 = v16 == 0;
    }
    *(_BYTE *)(a1 + 40) = v10;
    if (!v9)
    {
      if (v7)
      {
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            if (v6)
              return result;
            goto LABEL_8;
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v6)
      return result;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
  }
LABEL_8:
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1539;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3EC8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3EC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3EC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char v5;

  LOBYTE(v4) = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5)
  {
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<std::optional<WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  result = IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v5);
  v4 = v7;
  if (v7)
  {
    *a2 = 0;
    a2[8] = 0;
    v4 = 1;
    if (v6)
    {
      *(_QWORD *)a2 = v5;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1535;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3EF0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3EF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3EF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v6, a2);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v9)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1541;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,BOOL,WebKit::CoordinateSystem>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3F18;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3F18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3F18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  __int128 v19;
  char v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  char v23;
  __int128 v24;
  unsigned __int8 v25;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v21);
  if (!v23)
  {
    v10 = 0;
    LOBYTE(v17) = 0;
    v20 = 0;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v24);
  v6 = v25;
  if (v25)
  {
    if (!v23)
    {
      __break(1u);
      return result;
    }
    LOBYTE(v17) = 0;
    v18 = 0;
    v7 = v22;
    if (v22)
    {
      v8 = v21;
      v21 = 0;
      v17 = v8;
      v18 = 1;
    }
    v9 = 0;
    v19 = v24;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    LOBYTE(v17) = 0;
    v7 = v22;
    v9 = v23 == 0;
  }
  v20 = v10;
  if (v9 || !v7 || (v14 = v21, v21 = 0, !v14))
  {
LABEL_20:
    if (v6)
      goto LABEL_21;
LABEL_11:
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    goto LABEL_21;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v14, v5);
  if (!v6)
    goto LABEL_11;
LABEL_21:
  if (!v10)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(v2);
  v15 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, __int128 *))(*(_QWORD *)v15 + 16))(v15, &v17, &v19);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v20)
  {
    if (v18)
    {
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _QWORD v4[2];
  WTF::StringImpl *v5;
  char v6;

  LOBYTE(v5) = 0;
  v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v1 + 16))(v1, &v5, v4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1540;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3F40;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2[3]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3F40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3F40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1537;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,unsigned int>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3F68;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,unsigned int>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v2[1]);
  LODWORD(v2) = *((_DWORD *)v2 + 4);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3F68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3F68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v6, a2);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v9)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1536;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3F90;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3F90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3F90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>)#1},void,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)&v6, a2);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v6, &v8);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v9)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2284;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3FB8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3FB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3FB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || (v5 = *a2) == 0)
  {
LABEL_8:
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v10 + 16))(v10, 0, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    a3 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v6);
        a3 = 0;
        v16 = *a2;
        v17 = a2[1];
        v18 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v9 = 0;
        if (v18 && v17)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v17);
          v9 = *a2;
          a3 = a2[1];
        }
      }
      else
      {
        a3 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  a3 = v6;
  v9 = v5;
  if (v8 >= 3)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v9);
        v14 = *a2;
        a3 = a2[1];
        v15 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v15)
        {
          if (a3)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
        }
      }
    }
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2188;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode((IPC::Encoder *)v12, *(_DWORD **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D3FE0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D3FE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D3FE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3;
  WTF::MachSendRight *result;
  uint64_t v5;
  _BYTE v6[72];
  char v7;

  if (!a2
    || !*(_QWORD *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6), !v7))
  {
    v6[0] = 0;
    v6[64] = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  return result;
}

void IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v3[72];
  char v4;

  IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a1, v3);
  if (v4)
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder,std::optional<WebCore::ShareableBitmapHandle>>((uint64_t)v3, a2);
    if (v4)
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v3);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,void>::decode<IPC::Decoder,std::optional<WebCore::ShareableBitmapHandle>>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  v2 = a2;
  if (*(_BYTE *)(a1 + 72))
  {
    *a2 = 0;
    a2[64] = 0;
    if (*(_BYTE *)(a1 + 64))
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a2, a1);
      v2[64] = 1;
    }
    v2[72] = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2190;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned long>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4008;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(a1, *(_DWORD **)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4008;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4008;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  unsigned int *result;
  unsigned int *v4;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  v4 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v2);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;

  if (*(_QWORD *)(result + 144))
  {
    v11 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>(*(_QWORD *)(v11 + 144), a2, a3, a4, a5, a6);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageTesting::IsEditingCommandEnabled>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  unsigned __int16 v13;
  void *v14;
  uint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3691, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v12 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v20;
LABEL_11:
      *(_DWORD *)(a5 + 16) = v12;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  v13 = IPC::Decoder::decode<std::tuple<BOOL>>(v20);
  if (v13 >= 0x100u)
  {
    if (!v21)
    {
      v15 = v20;
      v20 = 0;
      *(_QWORD *)a5 = v15;
      *(_BYTE *)(a5 + 8) = v13;
      goto LABEL_11;
    }
LABEL_16:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(v19);
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v12 = v21;
  if (v21 != -1)
LABEL_12:
    ((void (*)(char *, uint64_t **))off_1E34D4020[v12])(&v24, &v20);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;

  if (*(_QWORD *)(result + 144))
  {
    v11 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>(*(_QWORD *)(v11 + 144), a2, a3, a4, a5, a6);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPage::ComputePagesForPrintingiOS>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t *v19;
  int v20;
  IPC::Encoder *v21;
  uint64_t v22;
  char v23;

  v22 = 0;
  IPC::Connection::createSyncMessageEncoder(3693, a3, &v22, (uint64_t *)&v21);
  v11 = v21;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v21 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v11, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v11, *(_DWORD **)(a2 + 8));
  IPC::Connection::sendSyncMessage(a1, v22, (uint64_t *)&v21, a4, (uint64_t)&v19, a6);
  v12 = v20;
  if (v20)
  {
    if (v20 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v19;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, uint64_t **))off_1E34D4020[v12])(&v23, &v19);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  v13 = IPC::Decoder::decode<std::tuple<double>>(v19);
  if ((_BYTE)v14)
  {
    if (!v20)
    {
      v15 = v19;
      v19 = 0;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x197363024);
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v12 = v20;
  if (v20 != -1)
    goto LABEL_10;
LABEL_11:
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t API::FormClient::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

BOOL API::FullscreenClient::isType(uint64_t a1, int a2)
{
  return a2 == 0;
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v1 + 8));
  WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)v1);
  CFRelease(*(CFTypeRef *)(v1 + 8));
}

WebCore::RunLoopObserver *std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100](WebCore::RunLoopObserver **a1, WebCore::RunLoopObserver *a2)
{
  WebCore::RunLoopObserver *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::RunLoopObserver::~RunLoopObserver(result);
    return (WebCore::RunLoopObserver *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::NetworkIssueReporter *std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100](WebKit::NetworkIssueReporter **a1, WTF::StringImpl *a2)
{
  WebKit::NetworkIssueReporter *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkIssueReporter::~NetworkIssueReporter(result, a2);
    return (WebKit::NetworkIssueReporter *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::WebScreenOrientationManagerProxy *std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100](WebKit::WebScreenOrientationManagerProxy **a1, WebKit::WebScreenOrientationManagerProxy *a2)
{
  WebKit::WebScreenOrientationManagerProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(result);
    return (WebKit::WebScreenOrientationManagerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::SpeechRecognitionPermissionManager *std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100](WebKit::SpeechRecognitionPermissionManager **a1, WTF::StringImpl *a2)
{
  WebKit::SpeechRecognitionPermissionManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SpeechRecognitionPermissionManager::~SpeechRecognitionPermissionManager(result, a2);
    return (WebKit::SpeechRecognitionPermissionManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::InspectorTargetProxy *std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](WebKit::InspectorTargetProxy **a1, WebKit::InspectorTargetProxy *a2)
{
  WebKit::InspectorTargetProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(result, a2);
    return (WebKit::InspectorTargetProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t Inspector::InspectorTarget::isProvisional(Inspector::InspectorTarget *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(*(CFTypeRef *)(v6 + 8));
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    v3 = *(WTF **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return (uint64_t *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

WebKit::WebWheelEventCoalescer *std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100](WebKit::WebWheelEventCoalescer **a1, WTF **a2)
{
  WebKit::WebWheelEventCoalescer *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = (WebKit::WebWheelEventCoalescer *)a2;
  if (result)
  {
    WebKit::WebWheelEventCoalescer::~WebWheelEventCoalescer(result, a2);
    return (WebKit::WebWheelEventCoalescer *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::WebWheelEventCoalescer::~WebWheelEventCoalescer(WebKit::WebWheelEventCoalescer *this, WTF **a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF ***v8;
  uint64_t v9;
  WTF ***v10;
  uint64_t v11;
  WTF *v12;

  v3 = *((_QWORD *)this + 32);
  v4 = *((_QWORD *)this + 33);
  v5 = (WTF *)*((_QWORD *)this + 34);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_20;
    v10 = (WTF ***)((char *)v5 + 8 * v3);
    v11 = 8 * v4 - 8 * v3;
    do
    {
      a2 = *v10;
      *v10 = 0;
      if (a2)
        std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v10, a2);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        a2 = *(WTF ***)v5;
        *(_QWORD *)v5 = 0;
        if (a2)
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v5, a2);
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)*((_QWORD *)this + 34);
      v3 = *((_QWORD *)this + 32);
    }
    v7 = *((unsigned int *)this + 70);
    if (v3 != v7)
    {
      v8 = (WTF ***)((char *)v5 + 8 * v3);
      v9 = 8 * v7 - 8 * v3;
      do
      {
        a2 = *v8;
        *v8 = 0;
        if (a2)
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v8, a2);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 34);
LABEL_20:
  if (v5)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v5, a2);
  }
  v12 = (WTF *)*((_QWORD *)this + 2);
  if ((WebKit::WebWheelEventCoalescer *)((char *)this + 32) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2);
  }
}

WebKit::MediaKeySystemPermissionRequestManagerProxy *std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100](WebKit::MediaKeySystemPermissionRequestManagerProxy **a1, WebKit::MediaKeySystemPermissionRequestManagerProxy *a2)
{
  WebKit::MediaKeySystemPermissionRequestManagerProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::MediaKeySystemPermissionRequestManagerProxy::~MediaKeySystemPermissionRequestManagerProxy(result, a2);
    return (WebKit::MediaKeySystemPermissionRequestManagerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WTF **std::unique_ptr<WebKit::ModelElementController>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(*(_QWORD *)v2 + 8) = 0;
      v3 = *(unsigned int **)v2;
      *(_QWORD *)v2 = 0;
      if (v3)
      {
        do
        {
          v4 = __ldaxr(v3);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, v3));
        if (!v5)
        {
          atomic_store(1u, v3);
          WTF::fastFree((WTF *)v3, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v2 = 0;
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

WTF **std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    _Block_release(*((const void **)v2 + 35));
    v3 = *((_QWORD *)v2 + 34);
    *((_QWORD *)v2 + 34) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v2 + 33, 0);
    v5 = (const void *)*((_QWORD *)v2 + 32);
    *((_QWORD *)v2 + 32) = 0;
    if (v5)
      CFRelease(v5);
    v6 = (const void *)*((_QWORD *)v2 + 31);
    *((_QWORD *)v2 + 31) = 0;
    if (v6)
      CFRelease(v6);
    v7 = (const void *)*((_QWORD *)v2 + 30);
    *((_QWORD *)v2 + 30) = 0;
    if (v7)
      CFRelease(v7);
    v8 = (const void *)*((_QWORD *)v2 + 29);
    *((_QWORD *)v2 + 29) = 0;
    if (v8)
      CFRelease(v8);
    v9 = (WTF::StringImpl *)*((_QWORD *)v2 + 28);
    *((_QWORD *)v2 + 28) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)v2 + 23);
    *((_QWORD *)v2 + 23) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = (WTF::StringImpl *)*((_QWORD *)v2 + 18);
    *((_QWORD *)v2 + 18) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v4);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(*(_QWORD *)v2 + 8) = 0;
      v12 = *(unsigned int **)v2;
      *(_QWORD *)v2 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v4);
        }
      }
    }
    else
    {
      *(_QWORD *)v2 = 0;
    }
    return (WTF **)WTF::fastFree(v2, v4);
  }
  return result;
}

void std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>(WebKit::WebsitePoliciesData *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 112) == *(unsigned __int8 *)(a2 + 112))
  {
    if (*((_BYTE *)this + 112))
      WebKit::WebsitePoliciesData::operator=((uint64_t)this, (uint64_t *)a2);
  }
  else if (*((_BYTE *)this + 112))
  {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(this, (WTF::StringImpl *)a2);
    *((_BYTE *)this + 112) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>((uint64_t)this, (uint64_t *)a2);
    *((_BYTE *)this + 112) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(result + 48))
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(result, a2);
      v5 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      v6 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = v5;
      if (v6)
        WTF::fastFree((WTF *)(v6 - 16), v4);
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      result = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v7;
      if (result)
        return WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(result, v4);
    }
  }
  else if (*(_BYTE *)(result + 48))
  {
    return std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](result, (void *)a2);
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 24) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(_QWORD *)(v3 + 32) = 0;
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(v3 + 32) = v8;
    *(_QWORD *)(v3 + 40) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(v3 + 40) = v9;
    *(_BYTE *)(v3 + 48) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_BYTE *)(result + 48))
  {
    v2 = result;
    result = *(_QWORD *)(result + 40);
    if (result)
      result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(result, a2);
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
      result = WTF::fastFree((WTF *)(v3 - 16), a2);
    v4 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v4 != -1)
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v4])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    *(_BYTE *)(v2 + 48) = 0;
  }
  return result;
}

uint64_t API::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, uint64_t a6, char a7)
{
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v10;
  v11 = *a3;
  if (*a3)
    *v11 += 2;
  *(_QWORD *)(a1 + 16) = v11;
  v12 = *a4;
  if (*a4)
    *v12 += 2;
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *a5;
  if (*a5)
    *v13 += 2;
  *(_QWORD *)(a1 + 32) = v13;
  if (a6)
    CFRetain(*(CFTypeRef *)(a6 + 8));
  *(_QWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 48) = a7;
  return a1;
}

void std::default_delete<API::SubstituteData>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;

  if (this)
  {
    v3 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, this);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, this);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, this);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v7, this);
    }
    WTF::fastFree(this, this);
  }
}

WebCore::Color *std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>(WebCore::Color *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*((_BYTE *)result + 8))
      return (WebCore::Color *)WebCore::Color::operator=();
  }
  else if (*((_BYTE *)result + 8))
  {
    return (WebCore::Color *)std::__optional_destruct_base<WebCore::Color,false>::reset[abi:sn180100]((uint64_t)result, (void *)a2);
  }
  else
  {
    result = (WebCore::Color *)WebCore::Color::Color(result, (const Color *)a2);
    *((_BYTE *)result + 8) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::Color,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 8))
  {
    if ((*(_QWORD *)result & 0x8000000000000) != 0)
    {
      v2 = (unsigned int *)(*(_QWORD *)result & 0xFFFFFFFFFFFFLL);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v5 = result;
        WTF::fastFree((WTF *)v2, a2);
        result = v5;
      }
    }
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _DWORD *v4;
  __int16 v5;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      ++*v4;
    *result = v4;
    WebCore::Color::Color((WebCore::Color *)(result + 1), (const Color *)(a2 + 8));
    WebCore::Color::Color((WebCore::Color *)(v3 + 2), (const Color *)(a2 + 16));
    WebCore::Color::Color((WebCore::Color *)(v3 + 3), (const Color *)(a2 + 24));
    *((_OWORD *)v3 + 2) = *(_OWORD *)(a2 + 32);
    *((_WORD *)v3 + 24) = *(_WORD *)(a2 + 48);
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 7), (uint64_t *)(a2 + 56));
    v5 = *(_WORD *)(a2 + 72);
    *((_BYTE *)v3 + 74) = *(_BYTE *)(a2 + 74);
    *((_WORD *)v3 + 36) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0xAAAAAAB)
  {
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 24 * v7;
      do
      {
        *(_BYTE *)v6 = *(_BYTE *)v8;
        v10 = *(_DWORD **)(v8 + 8);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(v6 + 8) = v10;
        v11 = *(_DWORD *)(v8 + 16);
        *(_BYTE *)(v6 + 20) = *(_BYTE *)(v8 + 20);
        *(_DWORD *)(v6 + 16) = v11;
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *a2 = 0;
    *result = v4;
    WebCore::Color::Color();
    WebCore::Color::Color();
    WebCore::Color::Color();
    *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
    *((_WORD *)v3 + 24) = *((_WORD *)a2 + 24);
    v3[7] = 0;
    v3[8] = 0;
    v5 = a2[7];
    a2[7] = 0;
    v3[7] = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *((_DWORD *)v3 + 16) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *((_DWORD *)v3 + 17) = v5;
    LOWORD(v5) = *((_WORD *)a2 + 36);
    *((_BYTE *)v3 + 74) = *((_BYTE *)a2 + 74);
    *((_WORD *)v3 + 36) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>::KeyValuePair<WTF::ASCIILiteral,WebCore::DOMPasteAccessCategory>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::DOMPasteAccessCategory>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WebCore::DOMPasteAccessCategory,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPasteAccessCategory>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t i;
  WTF::ASCIICaseInsensitiveHash **v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::ASCIICaseInsensitiveHash *v17;
  WTF::StringImpl *v18;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 16 * i);
      v10 = *v9;
      if (*v9 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = WTF::ASCIICaseInsensitiveHash::hash(v10, v7);
          v14 = 0;
          do
          {
            v15 = v13 & v12;
            v13 = ++v14 + v15;
          }
          while (*(_QWORD *)(v11 + 16 * v15));
          v16 = v11 + 16 * v15;
          *(_QWORD *)v16 = 0;
          v17 = *v9;
          *v9 = 0;
          *(_QWORD *)v16 = v17;
          *(_BYTE *)(v16 + 8) = *(_BYTE *)(v2 + 16 * i + 8);
          v18 = *v9;
          *v9 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v7);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = ((a2 - result) & 0xFFFFFFFFFFFFFF80) + a3 - 32;
    do
    {
      v6 = *((_OWORD *)v3 - 7);
      *(_OWORD *)(v5 - 96) = *((_OWORD *)v3 - 8);
      *(_OWORD *)(v5 - 80) = v6;
      v7 = *((_OWORD *)v3 - 6);
      v8 = *((_OWORD *)v3 - 5);
      v9 = *((_OWORD *)v3 - 3);
      *(_OWORD *)(v5 - 32) = *((_OWORD *)v3 - 4);
      *(_OWORD *)(v5 - 16) = v9;
      *(_OWORD *)(v5 - 64) = v7;
      *(_OWORD *)(v5 - 48) = v8;
      v10 = *((_QWORD *)v3 - 4);
      *((_QWORD *)v3 - 4) = 0;
      *(_QWORD *)v5 = v10;
      *(_BYTE *)(v5 + 8) = *((_BYTE *)v3 - 24);
      v11 = *((_QWORD *)v3 - 2);
      *((_QWORD *)v3 - 2) = 0;
      *(_QWORD *)(v5 + 16) = v11;
      v12 = (const void *)*((_QWORD *)v3 - 2);
      *((_QWORD *)v3 - 2) = 0;
      if (v12)
        CFRelease(v12);
      result = (WTF::StringImpl *)*((_QWORD *)v3 - 4);
      *((_QWORD *)v3 - 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 - 128);
      v5 -= 128;
    }
    while (v3 != v4);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::NativeWebMouseEvent>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *((_OWORD *)v5 + 1);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = *((_OWORD *)v5 + 2);
      v8 = *((_OWORD *)v5 + 3);
      v9 = *((_OWORD *)v5 + 5);
      *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 48) = v8;
      v10 = *((_QWORD *)v5 + 12);
      *((_QWORD *)v5 + 12) = 0;
      *(_QWORD *)(a3 + 96) = v10;
      *(_BYTE *)(a3 + 104) = *((_BYTE *)v5 + 104);
      v11 = *((_QWORD *)v5 + 14);
      *((_QWORD *)v5 + 14) = 0;
      *(_QWORD *)(a3 + 112) = v11;
      v12 = (const void *)*((_QWORD *)v5 + 14);
      *((_QWORD *)v5 + 14) = 0;
      if (v12)
        CFRelease(v12);
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 12);
      *((_QWORD *)v5 + 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 128);
      a3 += 128;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(result + 48))
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(result, a2);
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v7, (unsigned __int8 **)(a2 + 32));
      v5 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = v7;
      v7 = v5;
      if (v5)
        WTF::fastFree((WTF *)(v5 - 16), v4);
      WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable(&v7, (unsigned __int8 **)(a2 + 40));
      result = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v7;
      v7 = result;
      if (result)
        return WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(result, v6);
    }
  }
  else if (*(_BYTE *)(result + 48))
  {
    return std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::reset[abi:sn180100](result, (void *)a2);
  }
  else
  {
    result = std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>(result, a2);
    *(_BYTE *)(v3 + 48) = 1;
  }
  return result;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS2_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIN8Messages7WebPage25FindStringIncludingImagesEEEDaOT_SD_EUlRSK_T0_E_vJRNS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEE4callESQ_SW_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  char v15;
  IPC::Encoder *v16;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = **(_DWORD ***)(a1 + 8);
  ++*v6;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2204;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v7, v5);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34D41E8;
  v8[1] = v6;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    v10 = v14[0];
    v14[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EED1Ev(_QWORD *a1)
{
  WebKit::FindStringCallbackAggregator *v2;

  v2 = (WebKit::FindStringCallbackAggregator *)a1[1];
  *a1 = &off_1E34D41E8;
  a1[1] = 0;
  if (v2)
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EED0Ev(WTF *this, void *a2)
{
  WebKit::FindStringCallbackAggregator *v3;

  v3 = (WebKit::FindStringCallbackAggregator *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D41E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage25FindStringIncludingImagesEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EE4callES1F_(uint64_t a1, uint64_t *a2)
{
  void *v3;
  WTF *v4;
  __int128 v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  int v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;

  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, &v5);
      if (v11)
      {
        v12 = v5;
        v13 = v6;
        WebKit::FindStringCallbackAggregator::foundString(*(_QWORD *)(a1 + 8), (uint64_t)&v12, v9, v10);
        if (v11)
        {
          v4 = v7;
          if (v7)
          {
            v7 = 0;
            v8 = 0;
            WTF::fastFree(v4, v3);
          }
        }
      }
    }
  }
}

WebKit::FindStringCallbackAggregator *WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(WebKit::FindStringCallbackAggregator *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator(result);
    return (WebKit::FindStringCallbackAggregator *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS2_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIN8Messages7WebPage10FindStringEEEDaOT_SD_EUlRSK_T0_E_vJRNS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEE4callESQ_SW_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  char v15;
  IPC::Encoder *v16;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = **(_DWORD ***)(a1 + 8);
  ++*v6;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2203;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v7, v5);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34D4238;
  v8[1] = v6;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    v10 = v14[0];
    v14[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EED1Ev(_QWORD *a1)
{
  WebKit::FindStringCallbackAggregator *v2;

  v2 = (WebKit::FindStringCallbackAggregator *)a1[1];
  *a1 = &off_1E34D4238;
  a1[1] = 0;
  if (v2)
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EED0Ev(WTF *this, void *a2)
{
  WebKit::FindStringCallbackAggregator *v3;

  v3 = (WebKit::FindStringCallbackAggregator *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4238;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::FindStringCallbackAggregator>::deref(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage10FindStringEZZZN6WebKit12WebPageProxy10findStringERKNS_6StringENS_9OptionSetINS8_11FindOptionsEEEjONS_17CompletionHandlerIFvbEEEENK3__0clIS7_EEDaOT_SJ_ENKUlRSN_T0_E_clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESM_SP_SQ_EUlNSt3__18optionalINSV_16ProcessQualifiedINSU_INSV_19FrameIdentifierTypeESY_yEEEEEEONS_6VectorINSV_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibE_EENSG_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlS1F_E_vJS1F_EE4callES1F_(uint64_t a1, uint64_t *a2)
{
  void *v3;
  WTF *v4;
  __int128 v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  int v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;

  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, &v5);
      if (v11)
      {
        v12 = v5;
        v13 = v6;
        WebKit::FindStringCallbackAggregator::foundString(*(_QWORD *)(a1 + 8), (uint64_t)&v12, v9, v10);
        if (v11)
        {
          v4 = v7;
          if (v7)
          {
            v7 = 0;
            v8 = 0;
            WTF::fastFree(v4, v3);
          }
        }
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3API21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3API21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(WebKit::WebPageProxyFrameLoadStateObserver *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 5);
  while (v3)
  {
    v4 = v3;
    v3 = (WTF *)*((_QWORD *)v3 + 2);
    v5 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::fastFree(v4, a2);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

unsigned int *WebKit::WebPageProxyFrameLoadStateObserver::didCancelProvisionalLoad(WebKit::WebPageProxyFrameLoadStateObserver *this)
{
  return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 4, 0);
}

WebKit::WebPageProxyFrameLoadStateObserver *std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100](WebKit::WebPageProxyFrameLoadStateObserver **a1, WTF::StringImpl *a2)
{
  WebKit::WebPageProxyFrameLoadStateObserver *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebPageProxyFrameLoadStateObserver::~WebPageProxyFrameLoadStateObserver(result, a2);
    return (WebKit::WebPageProxyFrameLoadStateObserver *)WTF::fastFree(v4, v5);
  }
  return result;
}

void std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>(WebCore::PrivateClickMeasurement *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 312) == a2[312])
  {
    if (*((_BYTE *)a1 + 312))
      WebCore::PrivateClickMeasurement::operator=((uint64_t)a1, (uint64_t)a2);
  }
  else if (*((_BYTE *)a1 + 312))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(a1, (WTF::StringImpl *)a2);
    *(_BYTE *)(v2 + 312) = 0;
  }
  else
  {
    *((_BYTE *)WebCore::PrivateClickMeasurement::PrivateClickMeasurement(a1, (const WebCore::PrivateClickMeasurement *)a2)+ 312) = 1;
  }
}

void std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  const void *v5;
  char v6;

  if (*(_BYTE *)(a1 + 296))
  {
    v3 = *(WTF::StringImpl **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 232);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v4])(&v6, a1 + 208);
    *(_DWORD *)(a1 + 232) = -1;
    v5 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
    *(_BYTE *)(a1 + 296) = 0;
  }
}

uint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebPopupItem>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebPopupItem>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 48);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)result = v4;
    WebCore::Color::Color();
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    v5 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(v3 + 40) = v5;
    v6 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(v3 + 48) = v6;
    v7 = *((_QWORD *)a2 + 7);
    *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
    *(_QWORD *)(v3 + 56) = v7;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    v8 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
    *(_QWORD *)(v3 + 72) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = 0;
    *(_DWORD *)(v3 + 80) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = 0;
    *(_DWORD *)(v3 + 84) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 22);
    *(_BYTE *)(v3 + 92) = *((_BYTE *)a2 + 92);
    *(_DWORD *)(v3 + 88) = v8;
    WebCore::Color::Color();
    v9 = *(__int128 *)((char *)a2 + 136);
    v10 = *(__int128 *)((char *)a2 + 152);
    v11 = *(__int128 *)((char *)a2 + 168);
    v12 = *(__int128 *)((char *)a2 + 177);
    v13 = *(__int128 *)((char *)a2 + 104);
    v14 = *(__int128 *)((char *)a2 + 120);
    *(_BYTE *)(v3 + 208) = 0;
    *(_OWORD *)(v3 + 120) = v14;
    *(_OWORD *)(v3 + 104) = v13;
    *(_OWORD *)(v3 + 177) = v12;
    *(_OWORD *)(v3 + 168) = v11;
    *(_OWORD *)(v3 + 152) = v10;
    *(_OWORD *)(v3 + 136) = v9;
    *(_BYTE *)(v3 + 288) = 0;
    if (*((_BYTE *)a2 + 288))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>((_QWORD *)(v3 + 208), (uint64_t *)a2 + 26);
      *(_BYTE *)(v3 + 288) = 1;
    }
    v15 = *((_WORD *)a2 + 148);
    *(_BYTE *)(v3 + 298) = *((_BYTE *)a2 + 298);
    *(_WORD *)(v3 + 296) = v15;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>(WebKit::EditorState::PostLayoutData *this, unsigned __int8 *a2)
{
  __int128 v4;
  int v5;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;

  if (*((unsigned __int8 *)this + 304) == a2[304])
  {
    if (*((_BYTE *)this + 304))
    {
      v4 = *(_OWORD *)a2;
      *((_BYTE *)this + 16) = a2[16];
      *(_OWORD *)this = v4;
      WebCore::Color::operator=();
      *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
      WTF::String::operator=((WTF::StringImpl **)this + 5, (WTF::StringImpl *)(a2 + 40));
      WTF::String::operator=((WTF::StringImpl **)this + 6, (WTF::StringImpl *)(a2 + 48));
      v5 = *((_DWORD *)a2 + 16);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 16) = v5;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 72, (uint64_t)(a2 + 72));
      v6 = a2[92];
      *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
      *((_BYTE *)this + 92) = v6;
      WebCore::Color::operator=();
      v7 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)((char *)this + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)((char *)this + 120) = v7;
      v8 = *(_OWORD *)(a2 + 152);
      v9 = *(_OWORD *)(a2 + 168);
      v10 = *(_OWORD *)(a2 + 177);
      *(_OWORD *)((char *)this + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)((char *)this + 177) = v10;
      *(_OWORD *)((char *)this + 168) = v9;
      *(_OWORD *)((char *)this + 152) = v8;
      std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::FontAttributes,false> const&>((_DWORD *)this + 52, a2 + 208);
      v11 = *((_WORD *)a2 + 148);
      *((_BYTE *)this + 298) = a2[298];
      *((_WORD *)this + 148) = v11;
    }
  }
  else if (*((_BYTE *)this + 304))
  {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(this, a2);
    *((_BYTE *)this + 304) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>((uint64_t)this, (__int128 *)a2);
    *((_BYTE *)this + 304) = 1;
  }
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v4 = *(_DWORD *)(a1 + 12);
    }
    v6 = *(unsigned int *)(a2 + 12);
    if (v4 != (_DWORD)v6)
    {
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v4);
      v8 = (uint64_t *)(*(_QWORD *)a2 + 8 * v4);
      v9 = 8 * v6 - 8 * v4;
      do
      {
        v10 = *v8++;
        *v7++ = v10;
        v9 -= 8;
      }
      while (v9);
      v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

_DWORD *std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::FontAttributes,false> const&>(_DWORD *result, unsigned __int8 *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  unsigned __int8 v6;

  v3 = result;
  if (*((unsigned __int8 *)result + 80) == a2[80])
  {
    if (*((_BYTE *)result + 80))
    {
      v4 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        ++*v4;
      v5 = *(_DWORD **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
        WTF::RefCounted<WebCore::Font>::deref(v5);
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
      *((_WORD *)v3 + 24) = *((_WORD *)a2 + 24);
      result = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 14, (uint64_t)(a2 + 56));
      v6 = a2[74];
      *((_WORD *)v3 + 36) = *((_WORD *)a2 + 36);
      *((_BYTE *)v3 + 74) = v6;
    }
  }
  else if (*((_BYTE *)result + 80))
  {
    return std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    result = std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(result, (uint64_t)a2);
    *((_BYTE *)v3 + 80) = 1;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v4));
      a1[3] = v5;
      v4 = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::TextList const*,WebCore::TextList const*,WebCore::TextList*,0>(*(_QWORD *)a2, *(_QWORD *)a2 + 24 * v4, *(_QWORD *)a1);
    v6 = a1[3];
    v7 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v6 != v7)
    {
      v8 = *(_QWORD *)a2 + 24 * v7;
      v9 = 3 * v6;
      v10 = *(_QWORD *)a1 + 24 * v6;
      v11 = *(_QWORD *)a2 + 8 * v9;
      do
      {
        *(_BYTE *)v10 = *(_BYTE *)v11;
        v12 = *(_DWORD **)(v11 + 8);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v10 + 8) = v12;
        v13 = *(_DWORD *)(v11 + 16);
        *(_BYTE *)(v10 + 20) = *(_BYTE *)(v11 + 20);
        *(_DWORD *)(v10 + 16) = v13;
        v11 += 24;
        v10 += 24;
      }
      while (v11 != v8);
      LODWORD(v6) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::TextList const*,WebCore::TextList const*,WebCore::TextList*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_BYTE *)a3 = *(_BYTE *)v4;
    WTF::String::operator=((WTF::StringImpl **)(a3 + 8), (WTF::StringImpl *)(v4 + 8));
    v6 = *(_BYTE *)(v4 + 20);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    *(_BYTE *)(a3 + 20) = v6;
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)result = v4;
    WebCore::Color::Color((WebCore::Color *)(result + 24), (const Color *)a2 + 3);
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    v5 = (_DWORD *)*((_QWORD *)a2 + 5);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(v3 + 40) = v5;
    v6 = (_DWORD *)*((_QWORD *)a2 + 6);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(v3 + 48) = v6;
    v7 = *((_QWORD *)a2 + 7);
    *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
    *(_QWORD *)(v3 + 56) = v7;
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3 + 72, (uint64_t)a2 + 72);
    v8 = *((_DWORD *)a2 + 22);
    *(_BYTE *)(v3 + 92) = *((_BYTE *)a2 + 92);
    *(_DWORD *)(v3 + 88) = v8;
    WebCore::Color::Color((WebCore::Color *)(v3 + 96), (const Color *)a2 + 12);
    v9 = *(__int128 *)((char *)a2 + 136);
    v10 = *(__int128 *)((char *)a2 + 152);
    v11 = *(__int128 *)((char *)a2 + 168);
    v12 = *(__int128 *)((char *)a2 + 177);
    v13 = *(__int128 *)((char *)a2 + 104);
    v14 = *(__int128 *)((char *)a2 + 120);
    *(_BYTE *)(v3 + 208) = 0;
    *(_OWORD *)(v3 + 120) = v14;
    *(_OWORD *)(v3 + 104) = v13;
    *(_OWORD *)(v3 + 177) = v12;
    *(_OWORD *)(v3 + 168) = v11;
    *(_OWORD *)(v3 + 152) = v10;
    *(_OWORD *)(v3 + 136) = v9;
    *(_BYTE *)(v3 + 288) = 0;
    if (*((_BYTE *)a2 + 288))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>((_QWORD *)(v3 + 208), (uint64_t)(a2 + 13));
      *(_BYTE *)(v3 + 288) = 1;
    }
    v15 = *((_WORD *)a2 + 148);
    *(_BYTE *)(v3 + 298) = *((_BYTE *)a2 + 298);
    *(_WORD *)(v3 + 296) = v15;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

__n128 std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 112) == *((unsigned __int8 *)a2 + 112))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v4 = *(_OWORD *)a2;
      v5 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (uint64_t)(a2 + 6));
      WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 64, (uint64_t)(a2 + 8));
      result = *((__n128 *)a2 + 6);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(__n128 *)(a1 + 96) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 112))
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::reset[abi:sn180100](a1, a2);
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 8);
    result = *((__n128 *)a2 + 5);
    v9 = *((_OWORD *)a2 + 6);
    *(__n128 *)(a1 + 80) = result;
    *(_OWORD *)(a1 + 96) = v9;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 84 * v4);
      v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      v8 = *(_QWORD *)a1 + 84 * v6;
      v9 = *(_QWORD *)a2 + 84 * v6;
      v10 = 84 * v7 - 84 * v6;
      do
      {
        v11 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v11;
        v12 = *(_OWORD *)(v9 + 32);
        v13 = *(_OWORD *)(v9 + 48);
        v14 = *(_OWORD *)(v9 + 64);
        *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
        *(_OWORD *)(v8 + 48) = v13;
        *(_OWORD *)(v8 + 64) = v14;
        *(_OWORD *)(v8 + 32) = v12;
        v8 += 84;
        v9 += 84;
        v10 -= 84;
      }
      while (v10);
      v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

_OWORD *std::construct_at[abi:sn180100]<WebKit::EditorState::VisualData,WebKit::EditorState::VisualData const&,WebKit::EditorState::VisualData*>(_OWORD *result, uint64_t *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (result)
  {
    v3 = result;
    v4 = *(_OWORD *)a2;
    v5 = *((_OWORD *)a2 + 2);
    result[1] = *((_OWORD *)a2 + 1);
    result[2] = v5;
    *result = v4;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 3), a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 4), a2 + 8);
    v6 = *((_OWORD *)a2 + 6);
    v3[5] = *((_OWORD *)a2 + 5);
    v3[6] = v6;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = result;
  v3 = *((_DWORD *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3)
    return v2;
  if (v3 < 0x30C30C4)
  {
    v5 = 84 * v3;
    v6 = WTF::fastMalloc((WTF *)(84 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x54;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = 84 * v7;
      do
      {
        v10 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v6 = *(_OWORD *)v8;
        *(_OWORD *)(v6 + 16) = v10;
        v11 = *(_OWORD *)(v8 + 32);
        v12 = *(_OWORD *)(v8 + 48);
        v13 = *(_OWORD *)(v8 + 64);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(v8 + 80);
        *(_OWORD *)(v6 + 48) = v12;
        *(_OWORD *)(v6 + 64) = v13;
        *(_OWORD *)(v6 + 32) = v11;
        v6 += 84;
        v8 += 84;
        v9 -= 84;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState&,WebKit::EditorState*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *(_DWORD *)(result + 15) = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)result = v4;
    *(_BYTE *)(result + 32) = 0;
    v5 = result + 32;
    *(_BYTE *)(v3 + 336) = 0;
    if (*((_BYTE *)a2 + 336))
    {
      std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>(v5, a2 + 2);
      *(_BYTE *)(v3 + 336) = 1;
    }
    std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](v3 + 352, (uint64_t *)a2 + 44);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v4 = *(_OWORD *)a2;
    v5 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v4;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 8);
    v6 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v6;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (*(unsigned __int8 *)(a1 + 200) == *(unsigned __int8 *)(a2 + 200))
  {
    if (*(_BYTE *)(a1 + 200))
    {
      WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
      v5 = *(unsigned int *)(a1 + 76);
      if ((_DWORD)v5)
      {
        v6 = 40 * v5;
        v7 = *(_QWORD *)(a1 + 64) + 24;
        do
        {
          WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v4);
          v8 = *(WTF::StringImpl **)(v7 - 8);
          *(_QWORD *)(v7 - 8) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v8 -= 2;
          }
          v7 += 40;
          v6 -= 40;
        }
        while (v6);
      }
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 64, (_DWORD *)(a2 + 64));
      std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 80), a2 + 80);
    }
  }
  else if (*(_BYTE *)(a1 + 200))
  {
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::reset[abi:sn180100]((_BYTE *)a1, (WTF::StringImpl *)a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::RemotePageParameters,WebKit::RemotePageParameters,WebKit::RemotePageParameters*>(a1, a2);
    *(_BYTE *)(a1 + 200) = 1;
  }
}

_BYTE *std::__optional_destruct_base<WebKit::RemotePageParameters,false>::reset[abi:sn180100](_BYTE *result, WTF::StringImpl *a2)
{
  _BYTE *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (result[200])
  {
    v2 = result;
    if (result[192])
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(result + 80), a2);
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v2 + 64), a2);
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    result = *(_BYTE **)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
      else
        *(_DWORD *)result -= 2;
    }
    v2[200] = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D4180[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34D42A0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>(WebCore::ApplicationManifest *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 264) == *(unsigned __int8 *)(a2 + 264))
  {
    if (*((_BYTE *)this + 264))
      WebCore::ApplicationManifest::operator=((uint64_t)this, (_DWORD *)a2);
  }
  else if (*((_BYTE *)this + 264))
  {
    WebCore::ApplicationManifest::~ApplicationManifest(this, (void *)a2);
    *((_BYTE *)this + 264) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>(this, (uint64_t *)a2);
    *((_BYTE *)this + 264) = 1;
  }
}

uint64_t WebCore::ApplicationManifest::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 2));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 4));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 6));
  WTF::URL::operator=(a1 + 32, (WTF::StringImpl *)(a2 + 8));
  *(_DWORD *)(a1 + 72) = a2[18];
  WTF::URL::operator=(a1 + 80, (WTF::StringImpl *)(a2 + 20));
  WTF::URL::operator=(a1 + 120, (WTF::StringImpl *)(a2 + 30));
  WTF::URL::operator=(a1 + 160, (WTF::StringImpl *)(a2 + 40));
  WebCore::Color::operator=();
  WebCore::Color::operator=();
  v4 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a1 + 216), (WTF::StringImpl *)(*(_QWORD *)(a1 + 216) + 8 * v4));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 216, a2 + 54);
  v5 = *(_DWORD *)(a1 + 244);
  if (v5)
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*(WTF::StringImpl **)(a1 + 232), (WTF::StringImpl *)(*(_QWORD *)(a1 + 232) + 72 * v5));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 232, a2 + 58);
  v6 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v6)
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(*(WTF::StringImpl **)(a1 + 248), (WTF::StringImpl *)(*(_QWORD *)(a1 + 248) + (v6 << 6)));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 248, a2 + 62);
  return a1;
}

_QWORD *std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    *a2 = 0;
    *result = v4;
    v5 = a2[1];
    a2[1] = 0;
    result[1] = v5;
    v6 = a2[2];
    a2[2] = 0;
    result[2] = v6;
    v7 = a2[3];
    a2[3] = 0;
    result[3] = v7;
    WTF::URL::URL((uint64_t)(result + 4), a2 + 4);
    *((_DWORD *)v3 + 18) = *((_DWORD *)a2 + 18);
    WTF::URL::URL((uint64_t)(v3 + 10), a2 + 10);
    WTF::URL::URL((uint64_t)(v3 + 15), a2 + 15);
    WTF::URL::URL((uint64_t)(v3 + 20), a2 + 20);
    WebCore::Color::Color();
    WebCore::Color::Color();
    v3[27] = 0;
    v3[28] = 0;
    v8 = a2[27];
    a2[27] = 0;
    v3[27] = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 56);
    *((_DWORD *)a2 + 56) = 0;
    *((_DWORD *)v3 + 56) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 57);
    *((_DWORD *)a2 + 57) = 0;
    *((_DWORD *)v3 + 57) = v8;
    v3[29] = 0;
    v3[30] = 0;
    v9 = a2[29];
    a2[29] = 0;
    v3[29] = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 60);
    *((_DWORD *)a2 + 60) = 0;
    *((_DWORD *)v3 + 60) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 61);
    *((_DWORD *)a2 + 61) = 0;
    *((_DWORD *)v3 + 61) = v9;
    v3[31] = 0;
    v3[32] = 0;
    v10 = a2[31];
    a2[31] = 0;
    v3[31] = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 64);
    *((_DWORD *)a2 + 64) = 0;
    *((_DWORD *)v3 + 64) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 65);
    *((_DWORD *)a2 + 65) = 0;
    *((_DWORD *)v3 + 65) = v10;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;

  v2 = result;
  if (*((unsigned __int8 *)result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((_BYTE *)result + 24))
      return (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=((uint64_t)result, a2);
  }
  else if (*((_BYTE *)result + 24))
  {
    result = *(WTF::StringImpl **)result;
    if (*(_QWORD *)v2)
      result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)*((unsigned int *)v2 + 2));
    *((_BYTE *)v2 + 24) = 0;
  }
  else
  {
    result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)result, a2);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  char v10;

  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  v3 = *(WTF::StringImpl ***)a1;
  *(_QWORD *)a1 = v7;
  v7 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v8 = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  v9 = v5;
  LOBYTE(v5) = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(a1 + 20) = v10;
  v10 = v5;
  if (v3)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result)
  {
    v3 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 16) = v5;
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 33);
    *(_BYTE *)(result + 56) = 0;
    v8 = result + 56;
    *(_OWORD *)(v8 - 23) = v7;
    *(_OWORD *)(v8 - 32) = v6;
    *(_BYTE *)(v8 + 128) = 0;
    if (*(_BYTE *)(a2 + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
      *(_BYTE *)(v3 + 184) = 1;
    }
    v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 208) = v9;
    *(_BYTE *)(v3 + 224) = 0;
    *(_BYTE *)(v3 + 232) = 0;
    if (*(_BYTE *)(a2 + 232))
    {
      v10 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(v3 + 224) = v10;
      *(_BYTE *)(v3 + 232) = 1;
    }
    v11 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v3 + 240) = v11;
    v12 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(v3 + 248) = v12;
    v13 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(v3 + 256) = v13;
    v14 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(v3 + 264) = v14;
    *(_BYTE *)(v3 + 272) = 0;
    *(_BYTE *)(v3 + 296) = 0;
    if (*(_BYTE *)(a2 + 296))
    {
      v15 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(v3 + 272) = v15;
      v16 = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(v3 + 280) = v16;
      v17 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a2 + 288) = 0;
      *(_QWORD *)(v3 + 288) = v17;
      *(_BYTE *)(v3 + 296) = 1;
    }
    v18 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(v3 + 304) = v18;
    v19 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(v3 + 312) = v19;
    v20 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(v3 + 320) = v20;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WebCore::SleepDisabler *std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100](WebCore::SleepDisabler **a1, WebCore::SleepDisabler *a2)
{
  WebCore::SleepDisabler *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::SleepDisabler::~SleepDisabler(result);
    return (WebCore::SleepDisabler *)WTF::fastFree(v4, v5);
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26RenderTreeAsTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage19FrameTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage29BindRemoteAccessibilityFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) ^ 1 | *(v4 - 1))
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::SleepDisabler **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::SleepDisabler **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebCore::SleepDisabler *)-1)
        std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebCore::PrivateClickMeasurement *std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100](WebCore::PrivateClickMeasurement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*((_BYTE *)this + 328))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(this, a2);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D4338;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D4338;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

char *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::call(char *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      v5[0] = result + 24;
      v5[1] = result + 48;
      v6 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>(v4, (uint64_t)v5);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D4360;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D4360;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12[2];
  char v13;
  IPC::Encoder *v14;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 16);
      v5 = (uint64_t *)((char *)result + 24);
      v6 = (uint64_t *)((char *)result + 48);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1420;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v14 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v5);
      v12[0] = *((_QWORD *)v3 + 4);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v12);
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v7, v6);
      LOBYTE(v12[0]) = 0;
      v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v14, 0, (uint64_t)v12, 1);
      if (v13)
      {
        v9 = v12[0];
        v12[0] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      result = v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
  }
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (qword_1ECE72D58 && (v0 = *(_DWORD *)(qword_1ECE72D58 - 4)) != 0)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72D58 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v2 = qword_1ECE72D58;
  if (qword_1ECE72D58)
  {
    v3 = *(_DWORD *)(qword_1ECE72D58 - 4);
    v4 = *(_DWORD *)(qword_1ECE72D58 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72D58 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72D58 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1ECE72D58)
            v14 = *(_DWORD *)(qword_1ECE72D58 - 8);
          else
            v14 = 0;
          v15 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(qword_1ECE72D58 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(qword_1ECE72D58 + 16 * v20);
          v23 = (unsigned int *)v22[1];
          v22[1] = 0;
          if (v23)
          {
            do
            {
              v26 = __ldaxr(v23);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v23));
            if (!v27)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v6);
            }
          }
          *v22 = *v8;
          v24 = v2 + 16 * v7;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v22[1] = v25;
          v11 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v11)
            goto LABEL_19;
          do
          {
            v28 = __ldaxr(v11);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v11));
          if (v29)
            goto LABEL_19;
        }
        else
        {
          v10 = v2 + 16 * v7;
          v11 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (!v11)
            goto LABEL_19;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (v13)
            goto LABEL_19;
        }
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_19:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::forMostVisibleWebPageIfAny(PAL::SessionID,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy*)> &&)::$_0,void,WebKit::WebPageProxy&>::call(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t *v4;
  uint64_t v5;

  if (*(_QWORD *)(a2 + 280))
  {
    if ((v3 = *(_WORD *)(*(_QWORD *)(a2 + 32) + 48), (v3 & 4) != 0)
      && ((v4 = *(uint64_t **)(a1 + 8), !*v4) || (*(_WORD *)(*(_QWORD *)(*v4 + 32) + 48) & 4) == 0)
      || (v3 & 2) != 0 && ((v4 = *(uint64_t **)(a1 + 8), !*v4) || (*(_WORD *)(*(_QWORD *)(*v4 + 32) + 48) & 2) == 0))
    {
      CFRetain(*(CFTypeRef *)(a2 + 8));
      v5 = *v4;
      *v4 = a2;
      if (v5)
        CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPageProxy::*&)(void),WebKit::WebPageProxy*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF *WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  const void *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)v2 + 8) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (WTF::StringImpl **)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    if (v4)
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v4, a2);
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *API::NavigationClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a3 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v9);
  cf = 0;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, 1, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::NavigationClient::shouldAllowLegacyTLS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::NavigationClient::shouldBypassContentModeSafeguards(API::NavigationClient *this)
{
  return 0;
}

uint64_t API::NavigationClient::processDidTerminate()
{
  return 0;
}

WTF *API::NavigationClient::legacyWebCryptoMasterKey(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  LOBYTE(v6) = 0;
  v8 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void API::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
}

void API::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
}

uint64_t API::NavigationClient::willGoToBackForwardListItem()
{
  return 0;
}

uint64_t API::NavigationClient::decidePolicyForSOAuthorizationLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_1,void,PAL::HysteresisState>::call(uint64_t a1, int a2)
{
  return WebKit::WebPageProxy::recentGamepadAccessStateChanged(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D45C8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D45C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)(v2 - 16));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanRunBeforeUnloadConfirmPanel>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2374;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseIconLoadingClient>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2439;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetHasResourceLoadClient>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2393;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D45F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D45F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v5;
  v5 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D4618;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D4618;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, const void **a2)
{
  const void *v3;
  WebKit *v4;
  uint64_t v5;
  uint64_t (**v6)();
  WebKit *v7;
  WebKit *v8;
  uint64_t (**v9)();

  v3 = *a2;
  v9 = &off_1E34D7358;
  WebKit::UserData::transform(v3, (uint64_t)&v9, &v8);
  v4 = v8;
  v8 = 0;
  v9 = (uint64_t (**)())v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v5 + 16))(v5, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v9;
  v9 = 0;
  if (v6)
    CFRelease(v6[1]);
  v7 = v8;
  v8 = 0;
  if (v7)
    CFRelease(*((CFTypeRef *)v7 + 1));
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2299;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v6, a2[1]);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WindowScreenDidChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2506;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v8, *(int **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *a1 = &off_1E34D4640;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(uint64_t **)v2;
    v4 = *(_QWORD *)(v2 + 8) - 1;
    *(_QWORD *)(v2 + 8) = v4;
    if (v3)
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_8;
      v6 = *(_BYTE *)(v2 + 16);
      *(_BYTE *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
      *(_BYTE *)(v2 + 16) = v6;
      if (*(_QWORD *)v2)
        goto LABEL_8;
      v4 = *(_QWORD *)(v2 + 8);
    }
    if (!v4)
      MEMORY[0x19AEB936C](v2, 0x1020C40545B2139);
  }
LABEL_8:
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E34D4640;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::call(uint64_t a1)
{
  char v2;

  v2 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(*(_QWORD *)(a1 + 16), (uint64_t)&v2, *(_QWORD *)(a1 + 8), 0);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D4668;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D4668;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = v3;
        v7 = *(_QWORD *)(a1 + 8);
        CFRetain(*(CFTypeRef *)(v5 - 8));
        if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(_QWORD *)(v7 + 32) + 1752)))
        {
          WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(_QWORD *)(v7 + 32) + 1752));
          if (v6)
            WebKit::WebPageProxy::closePage(v7);
        }
        CFRelease(*(CFTypeRef *)(v5 - 8));
      }
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(_QWORD *)(a1 + 32) + 1752)))
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(_QWORD *)(a1 + 32) + 1752));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2273;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode((IPC::Encoder *)v6, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *(uint64_t **)(a2 + 8));
  v7 = **(_QWORD **)(a2 + 16);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  LOBYTE(v7) = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = v7;
  LOBYTE(v13) = 0;
  v14 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v15, 0, (uint64_t)&v13, 1);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34D4690;
  WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D4690;
  WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageProxy *v2;
  WebCore::DataSegment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v2 = *(WebKit::WebPageProxy **)(a1 + 8);
  v3 = *(WebCore::DataSegment **)(a1 + 688);
  v4 = WebCore::DataSegment::data(v3);
  v5 = WebCore::DataSegment::size(v3);
  *(_QWORD *)(a1 + 280) = v4;
  *(_QWORD *)(a1 + 288) = v5;
  v6 = *(_QWORD *)(a1 + 24);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v6);
  WebKit::WebProcessProxy::assumeReadAccessToBaseURL(*(WebKit::WebProcessProxy **)(a1 + 24), v2, (WTF::StringImpl **)(a1 + 608));
  WebKit::WebProcessProxy::assumeReadAccessToBaseURL(*(WebKit::WebProcessProxy **)(a1 + 24), v2, (WTF::StringImpl **)(a1 + 648));
  if (WTF::URL::protocolIs())
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(*(WebKit::WebProcessProxy **)(a1 + 24), (const WTF::URL *)(a1 + 608));
  if (WTF::URL::protocolIs())
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(*(WebKit::WebProcessProxy **)(a1 + 24), (const WTF::URL *)(a1 + 648));
  v7 = *((_QWORD *)v2 + 26);
  v8 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 1896);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2267;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v18 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode((IPC::Encoder *)v9, a1 + 32);
  LOBYTE(v16) = 0;
  v17 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v18, 0, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    result = (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 169))
    return (IPC::Encoder *)WebKit::ResponsivenessTimer::start(v15 + 56);
  if (!*(_BYTE *)(v15 + 185))
    *(_WORD *)(v15 + 184) = 256;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2243;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetControlledByAutomation>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2379;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundColor>(uint64_t a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2371;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTopContentInsetFenced>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2435;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = v9;
  IPC::Encoder::addAttachment(v8, *((_QWORD *)a2 + 1));
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D46B8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D46B8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Color *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *((_QWORD *)result + 1);
      if (*(_BYTE *)(v2 + 704))
      {
        *(_BYTE *)(v2 + 704) = 0;
        v3 = *(_QWORD *)(v2 + 40);
        if (v3)
        {
          result = *(IPC::Encoder **)(v3 + 8);
          if (result)
            result = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)result + 1376))(result);
        }
        if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728))
        {
          v4 = *(_QWORD *)(v2 + 32);
          v5 = (WebCore::Color *)(v4 + 1784);
          v6 = *(_QWORD *)(v2 + 208);
          v7 = *(_QWORD *)(v4 + 1896);
          v8 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v8 = 2436;
          *(_QWORD *)(v8 + 8) = v7;
          *(_QWORD *)(v8 + 528) = v8 + 16;
          *(_QWORD *)(v8 + 536) = v8 + 16;
          *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v8 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
          v15 = (IPC::Encoder *)v8;
          IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v8, v5);
          LOBYTE(v13) = 0;
          v14 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v15, 0, (uint64_t)&v13, 1);
          if (v14)
          {
            v10 = v13;
            v13 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
          result = v15;
          v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v9);
            return (IPC::Encoder *)WTF::fastFree(v11, v12);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D46E0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D46E0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 8);
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = *(unsigned __int8 *)(v3 + 858);
      *(_BYTE *)(v3 + 858) = 0;
      if (v4)
      {
        v5 = qword_1ECE71A28;
        if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(_QWORD *)(v3 + 32);
          v7 = *(_QWORD *)(v6 + 744);
          v8 = *(_QWORD *)(v6 + 1896);
          v9 = *(_QWORD *)(*(_QWORD *)(v3 + 208) + 136);
          if (v9)
            LODWORD(v9) = *(_DWORD *)(v9 + 108);
          v10 = 134218752;
          v11 = v3;
          v12 = 2048;
          v13 = v7;
          v14 = 2048;
          v15 = v8;
          v16 = 1024;
          v17 = v9;
          _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::activityStateDidChange: view is becoming visible after a crash, attempt a reload", (uint8_t *)&v10, 0x26u);
        }
        WebKit::WebPageProxy::tryReloadAfterProcessTermination((WebKit::WebPageProxy *)v3);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34D4708;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D4708;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 20);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 8);
    v3 = 8 * v1;
    do
    {
      v4 = *v2;
      *v2++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_1,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v6 = *(uint64_t **)(a1 + 24);
  v7 = **(unsigned int ***)(a1 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2364;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v20 = (IPC::Encoder *)v9;
  v10 = *(_WORD *)(v5 + 48);
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 2uLL, 2) = v10;
  v11 = *v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v11;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E34D4758;
  v12[1] = v7;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v20, 0, (uint64_t)v18, 1);
  if (v19)
  {
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage16SetActivityStateEZZN6WebKit12WebPageProxy27dispatchActivityStateChangeEvENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENS_17CompletionHandlerIFvPNS2_7DecoderEEEEOSM_NS_19ThreadLikeAssertionEEUlSQ_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D4758;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage16SetActivityStateEZZN6WebKit12WebPageProxy27dispatchActivityStateChangeEvENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENS_17CompletionHandlerIFvPNS2_7DecoderEEEEOSM_NS_19ThreadLikeAssertionEEUlSQ_E_vJSQ_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D4758;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

char *IPC::ArgumentCoder<std::tuple<BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::ArgumentCoder<std::optional<WebKit::WebKeyboardEvent>,void>::encode<IPC::Encoder,std::optional<WebKit::WebKeyboardEvent> const&>(a1, *(_QWORD *)(a2 + 8));
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebKeyboardEvent>,void>::encode<IPC::Encoder,std::optional<WebKit::WebKeyboardEvent> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 96);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 96))
    {
      return IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode(a1, (char *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetInitialFocus,WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper((uint64_t)v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetInitialFocus,WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34D4780;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34D4780;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetInitialFocus,WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ClearSelection>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ClearSelection &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ClearSelection&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2133;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RestoreSelectionInFocusedEditableElement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2341;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2497;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D47A8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D47A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D47A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a2 || (v2 = *a2) == 0)
  {
LABEL_20:
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v3 = a2[1];
  if (v3 <= a2[2] - v2)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (!v16)
      goto LABEL_15;
    v25 = a2;
    v33 = a1;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v2);
      v14 = 0;
      v27 = *v25;
      v26 = v25[1];
      v28 = v25[3];
      *v25 = 0;
      v25[1] = 0;
      v15 = 0;
      if (v28)
      {
        a1 = v33;
        a2 = v25;
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v27);
          a2 = v25;
          a1 = v33;
          v15 = *v25;
          v14 = v25[1];
        }
LABEL_15:
        *a2 = 0;
        a2[1] = 0;
        v17 = a2[3];
        if (v17 && v14)
        {
          v32 = a1;
          v18 = a2;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
LABEL_31:
          a2 = v18;
          a1 = v32;
        }
LABEL_19:
        v21 = *a2;
        v20 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v22 = a2[3];
        if (v22 && v20)
        {
          v24 = a1;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v22 + 16))(a2[3], v21);
          a1 = v24;
        }
        goto LABEL_20;
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    a1 = v33;
    a2 = v25;
    goto LABEL_15;
  }
  v4 = (unsigned __int8 *)a2[2];
  v5 = v4 + 1;
  a2[2] = v4 + 1;
  v6 = *v4;
  if (v6 >= 2)
  {
    v14 = v3;
    v15 = v2;
    goto LABEL_15;
  }
  v7 = ((unint64_t)(v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v3 < v7 || v3 - v7 <= 3)
  {
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      v32 = a1;
      v18 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v2);
      a2 = v18;
      a1 = v32;
      v29 = *v18;
      v30 = v18[1];
      v31 = v18[3];
      *v18 = 0;
      v18[1] = 0;
      if (v31)
      {
        if (v30)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
          goto LABEL_31;
        }
      }
    }
    goto LABEL_19;
  }
  v9 = v6 == 0;
  v11 = v2 + v7 + 4;
  v10 = *(unsigned int *)(v2 + v7);
  v12 = !v9;
  a2[2] = v11;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IncreaseListLevel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2254;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecreaseListLevel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2151;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeListType>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2127;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBaseWritingDirection>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2373;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetNeedsFontAttributes>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2413;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScheduleFullEditorStateUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2350;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectAll>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2354;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  __int128 v15;
  _QWORD v16[2];
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2198;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  v15 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = off_1E34D47D0;
  *(_OWORD *)(v9 + 8) = v15;
  v16[0] = v9;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    v11 = v16[0];
    v16[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34D47D0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34D47D0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExecuteEditCommandWithCallback,WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ExecuteEditCommand>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ExecuteEditCommand &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ExecuteEditCommand&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExecuteEditCommand>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2197;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEditable>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2384;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::DragData const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WebKit::SandboxExtensionHandle &&::CrashOnOverflow,16ul,WebKit::SandboxExtensionHandle &&::FastMalloc> &&>,void>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WebKit::SandboxExtensionHandle &&::CrashOnOverflow,16ul,WebKit::SandboxExtensionHandle &&::FastMalloc> &,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DragData,void>::encode(a1, *(int **)a2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, *(const char ****)(a2 + 8));
  return IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D47F8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D47F8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v9;

  if (a2 && *a2)
  {
    v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    v4 = *(_QWORD *)(a1 + 8);
    if (v3 >= 0x100u)
    {
      v5 = *(_QWORD *)(v4 + 40);
      if (v5)
        v6 = *(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      v9 = v3 != 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v6 + 288))(v6, v9);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
  }
  v7 = *(_QWORD *)(v4 + 40);
  if (v7)
    v6 = *(_QWORD *)(v7 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 288))(v6, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  __int128 v23;
  IPC::Encoder *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _OWORD v28[2];
  _QWORD v29[2];
  __int128 v30;
  char v31;
  uint64_t v32;
  char v33;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2295;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v24 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a4;
  IPC::ArgumentCoder<WebCore::DragData,void>::encode((IPC::Encoder *)v8, *(int **)(a2 + 16));
  v27 = *((_BYTE *)a3 + 16);
  LOBYTE(a2) = v27;
  v28[0] = *(__int128 *)((char *)a3 + 24);
  *(_OWORD *)((char *)v28 + 10) = *(__int128 *)((char *)a3 + 34);
  v9 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 7) = 0;
  v30 = *(__int128 *)((char *)a3 + 72);
  v31 = *((_BYTE *)a3 + 88);
  v10 = *((_QWORD *)a3 + 12);
  *((_QWORD *)a3 + 12) = 0;
  v33 = *((_BYTE *)a3 + 104);
  v11 = v33;
  v12 = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 8) = 0;
  v23 = *a3;
  v25 = *(_QWORD *)a3;
  *((_QWORD *)a3 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v13 = off_1E34D4820;
  *(_OWORD *)(v13 + 8) = v23;
  *(_BYTE *)(v13 + 24) = a2;
  v14 = v28[0];
  *(_OWORD *)(v13 + 42) = *(_OWORD *)((char *)v28 + 10);
  *(_OWORD *)(v13 + 32) = v14;
  v26 = 0;
  v29[0] = 0;
  *(_QWORD *)(v13 + 64) = v9;
  v29[1] = 0;
  *(_QWORD *)(v13 + 72) = v12;
  v15 = v30;
  *(_BYTE *)(v13 + 96) = v31;
  *(_OWORD *)(v13 + 80) = v15;
  *(_QWORD *)(v13 + 104) = v10;
  *(_BYTE *)(v13 + 112) = v11;
  v32 = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v16);
  v17 = v26;
  v26 = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
  v25 = v13;
  v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v27 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, 0, (uint64_t)&v25, 1);
  if (v27)
  {
    v19 = v25;
    v25 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = off_1E34D4820;
  v3 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 8), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34D4820;
  v3 = (WTF::StringImpl *)*((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragControllerAction,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  __int16 i;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int *v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  IntRect *v29;
  __int128 *v30;
  char v31;
  __int16 v32;
  char v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  __int128 v64;
  unsigned __int8 v65;
  __int128 v66;
  unsigned __int8 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  if (!a2 || (v4 = *a2) == 0)
  {
LABEL_43:
    v59[0] = 0;
    v59[1] = 0;
    v68 = 0uLL;
    v23 = *(_QWORD *)(a1 + 8);
    v29 = (IntRect *)v59;
    v30 = &v68;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v34 = 0;
    goto LABEL_44;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v22 = 0;
    v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v35 + 16))(v35);
        v22 = 0;
        v53 = *a2;
        v54 = a2[1];
        v55 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v21 = 0;
        if (v55 && v54)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
          v21 = *a2;
          v22 = a2[1];
        }
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
    }
LABEL_34:
    *a2 = 0;
    a2[1] = 0;
    v20 = (uint64_t *)a2[3];
    if (v20)
      goto LABEL_63;
    goto LABEL_35;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v6 + 1);
  if (*v6 >= 2u)
  {
    v22 = v5;
    v21 = v4;
    goto LABEL_34;
  }
  if (!*v6)
  {
    LOWORD(v7) = 0;
    i = 0;
    goto LABEL_13;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    v26 = 0;
    v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    v44 = a2[3];
    if (v44)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
      v26 = 0;
      v45 = *a2;
      v46 = a2[1];
      v47 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v27 = 0;
      if (v47)
      {
        if (v46)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
          v27 = *a2;
          v26 = a2[1];
        }
      }
    }
  }
  else
  {
    a2[2] = (unint64_t)(v6 + 2);
    v7 = v6[1];
    if (v7 <= 0x20 && ((1 << v7) & 0x100010116) != 0)
    {
      i = 256;
LABEL_13:
      v10 = 0x10000;
      goto LABEL_14;
    }
    v26 = v5;
    v27 = v4;
  }
  *a2 = 0;
  a2[1] = 0;
  v28 = a2[3];
  if (v28 && v26)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v27, v26);
  v10 = 0;
  LOWORD(v7) = 0;
  for (i = 256; ; i = 0)
  {
LABEL_14:
    if (!HIWORD(v10))
      goto LABEL_40;
    v11 = a2[1];
    v12 = *a2;
    v13 = a2[2] - *a2;
    if (v11 <= v13)
    {
      v36 = 0;
      v37 = 0;
      *a2 = 0;
      a2[1] = 0;
      v38 = a2[3];
      if (v38)
      {
        if (v11)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v38 + 16))(v38);
          v37 = *a2;
          v36 = a2[1];
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
      }
LABEL_37:
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v39 = a2[3];
      if (v39)
      {
        if (v36)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
LABEL_40:
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
LABEL_41:
      *a2 = 0;
      a2[1] = 0;
      v40 = a2[3];
      if (v40)
        goto LABEL_60;
      goto LABEL_42;
    }
    v14 = (unsigned __int8 *)(v12 + v13);
    a2[2] = (unint64_t)(v14 + 1);
    if (!v12)
    {
      v36 = v11;
      v37 = 0;
      goto LABEL_37;
    }
    v15 = *v14;
    if (v15 >= 7)
      goto LABEL_41;
    if (v11 <= (unint64_t)&v14[-v12 + 1])
    {
      v48 = 0;
      v49 = 0;
      *a2 = 0;
      a2[1] = 0;
      v50 = a2[3];
      if (v50)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v50 + 16))(v50);
        v48 = 0;
        v56 = *a2;
        v57 = a2[1];
        v58 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v49 = 0;
        if (v58)
        {
          if (v57)
          {
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
            v49 = *a2;
            v48 = a2[1];
          }
        }
      }
      goto LABEL_55;
    }
    a2[2] = (unint64_t)(v14 + 2);
    v16 = v14[1];
    if (v16 >= 2)
    {
      v48 = v11;
      v49 = v12;
LABEL_55:
      *a2 = 0;
      a2[1] = 0;
      v51 = a2[3];
      if (v51 && v48)
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
      goto LABEL_42;
    }
    v17 = ((unint64_t)(v14 + 5) & 0xFFFFFFFFFFFFFFFCLL) - v12;
    if (v11 < v17 || v11 - v17 <= 3)
    {
      *a2 = 0;
      a2[1] = 0;
      v52 = a2[3];
      if (v52)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v52 + 16))(v52);
        v12 = *a2;
        v11 = a2[1];
        v40 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v40)
        {
LABEL_60:
          if (v11)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v40 + 16))(v40, v12);
        }
      }
LABEL_42:
      v41 = *a2;
      v42 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v43 = a2[3];
      if (v43 && v42)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
      goto LABEL_43;
    }
    v18 = (int *)(v12 + v17);
    v19 = *v18;
    a2[2] = (unint64_t)(v18 + 1);
    IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v64);
    if (!v65)
      goto LABEL_42;
    IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)&v66);
    if (!v67)
      goto LABEL_42;
    v20 = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>((uint64_t *)a2, (uint64_t)&v68);
    if (!v70)
      goto LABEL_42;
    v22 = v65;
    if (v65)
    {
      v22 = v67;
      if (v67)
        break;
    }
    __break(1u);
LABEL_63:
    if (v22)
      (*(void (**)(uint64_t *, unint64_t, unint64_t))(*v20 + 16))(v20, v21, v22);
LABEL_35:
    v10 = 0;
    LOWORD(v7) = 0;
  }
  *(_OWORD *)&v59[1] = v64;
  v60 = v66;
  v61 = v68;
  v62 = v69;
  LOWORD(v59[0]) = v7 | v10 | i;
  BYTE2(v59[0]) = v15;
  BYTE3(v59[0]) = v16 != 0;
  HIDWORD(v59[0]) = v19;
  v63 = 1;
  v23 = *(_QWORD *)(a1 + 8);
  if (BYTE8(v69))
  {
    *(_QWORD *)(a1 + 32) = v62;
    v24 = a1 + 32;
    v25 = *(_BYTE *)(v24 - 8);
    v68 = v61;
    LOBYTE(v69) = 1;
    WebKit::WebPageProxy::performDragControllerAction(v23, v25, v24, (uint64_t)&v68);
    return;
  }
  v29 = (IntRect *)&v59[1];
  v30 = &v60;
  v31 = v16 != 0;
  v32 = v59[0];
  v33 = v15;
  v34 = v19;
LABEL_44:
  WebKit::WebPageProxy::didPerformDragControllerAction(v23, v32, v33, v31, v34, v29, v30);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, __int128 *a3, uint64_t *a4, char a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v8 = *a4;
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2183;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v21 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v18 = *((_QWORD *)a3 + 2);
  LOBYTE(v19) = *((_BYTE *)a3 + 24);
  v17 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E34D4848;
  *(_OWORD *)(v11 + 8) = v17;
  *(_QWORD *)(v11 + 24) = v18;
  *(_BYTE *)(v11 + 32) = v19;
  v18 = v11;
  v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a5, (uint64_t)&v18, 1);
  if (v20)
  {
    v13 = v18;
    v18 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, *a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, v2[1]);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, v2[2]);
  LOBYTE(v2) = *(_BYTE *)v2[3];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D4848;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D4848;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebPageProxy *v4;
  IntSize v5;
  char v6;
  IntPoint v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[15];
  char v13;
  char v14;
  _BYTE v15[31];
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)&v14);
    if (v16)
    {
      v17[0] = *(_OWORD *)v15;
      *(_OWORD *)((char *)v17 + 15) = *(_OWORD *)&v15[15];
      *(_OWORD *)v15 = v17[0];
      v4 = *(WebKit::WebPageProxy **)(a1 + 8);
      if (v15[23])
      {
        v5 = (IntSize)&v15[15];
        v6 = *(_BYTE *)(a1 + 32);
        v11 = v14;
        *(_QWORD *)v12 = *(_QWORD *)&v17[0];
        *(_QWORD *)&v12[7] = *(_QWORD *)((char *)v17 + 7);
        v13 = 1;
        v7 = (IntPoint)&v11;
        WebKit::WebPageProxy::dragEnded((uint64_t)v4, v5, (_QWORD *)(a1 + 24), v6, v7);
        return;
      }
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v10 = a2[3];
      if (v10)
      {
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      }
      v4 = *(WebKit::WebPageProxy **)(a1 + 8);
    }
    WebKit::WebPageProxy::resetCurrentDragInformation(v4);
  }
  else
  {
    WebKit::WebPageProxy::resetCurrentDragInformation(*(WebKit::WebPageProxy **)(a1 + 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidStartDrag>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2178;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DragCancelled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2182;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2281;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::encode((IPC::Encoder *)v8, *(char **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Encoder *)v8, *(_QWORD *)(a2 + 16));
  LOBYTE(v14) = 0;
  v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    v10 = v14;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[680])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[664];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::WebHitTestResultData>(a1, v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData>(a1, (uint64_t)v4, a2);
    if (v5)
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v4);
  }
  else
  {
    *a2 = 0;
    a2[680] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v6;

  v6 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>>(a1, a2, &v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[680] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>(a2, a3, (uint64_t)&v8, (uint64_t)a4);
    if (v9)
    {
      v7 = v8;
      v8 = 0;
      if (v7)
        CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
  else
  {
    *a4 = 0;
    a4[680] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = a4;
  if (*(_BYTE *)(a1 + 664) && a2[1] && *(_BYTE *)(a3 + 8))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6WebKit20WebHitTestResultDataEN3WTF9OptionSetINS3_16WebEventModifierEEENS3_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S8_S9_EJEJEJS4_S8_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(a4, (uint64_t *)a1, a2, (uint64_t *)a3);
    *(_BYTE *)(result + 680) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6WebKit20WebHitTestResultDataEN3WTF9OptionSetINS3_16WebEventModifierEEENS3_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S8_S9_EJEJEJS4_S8_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t v6;

  *(_BYTE *)(WebKit::WebHitTestResultData::WebHitTestResultData(a1, a2) + 664) = *a3;
  v6 = *a4;
  if (v6)
    CFRetain(*(CFTypeRef *)(v6 + 8));
  *(_QWORD *)(a1 + 672) = v6;
  return a1;
}

WebKit::WebHitTestResultData *std::__optional_destruct_base<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](WebKit::WebHitTestResultData *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 680))
  {
    v2 = *((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 + 8));
    WebKit::WebHitTestResultData::~WebHitTestResultData(this);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2181;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode((IPC::Encoder *)v12, *(char **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4870;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4870;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4870;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::SetLastKnownMousePosition>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::SetLastKnownMousePosition &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::SetLastKnownMousePosition&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2401;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *(_DWORD **)(a2 + 8));
  return IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *(_DWORD **)(a2 + 16));
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2249;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode((IPC::Encoder *)v8, *(char **)(a2 + 8));
  v9 = **(_BYTE **)(a2 + 16);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = v9;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v8, *(char **)(a2 + 24));
  v10 = *((_OWORD *)a3 + 6);
  v26 = *((_OWORD *)a3 + 5);
  v27 = v10;
  v28 = *((_OWORD *)a3 + 7);
  v11 = *((_OWORD *)a3 + 2);
  v22 = *((_OWORD *)a3 + 1);
  v23 = v11;
  v12 = *((_OWORD *)a3 + 4);
  v24 = *((_OWORD *)a3 + 3);
  v25 = v12;
  v13 = *a3;
  *a3 = 0;
  v29 = a3[16];
  v14 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v14 = &off_1E34D4898;
  *(_QWORD *)(v14 + 16) = v13;
  *(_OWORD *)(v14 + 96) = v26;
  *(_OWORD *)(v14 + 112) = v27;
  *(_OWORD *)(v14 + 128) = v28;
  *(_QWORD *)(v14 + 144) = v29;
  *(_OWORD *)(v14 + 32) = v22;
  *(_OWORD *)(v14 + 48) = v23;
  *(_OWORD *)(v14 + 64) = v24;
  *(_OWORD *)(v14 + 80) = v25;
  v21 = v14;
  *(_QWORD *)&v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  BYTE8(v22) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)&v21, 1);
  if (BYTE8(v22))
  {
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D4898;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D4898;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  char *v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  unsigned __int8 v39;
  _QWORD v40[3];
  unsigned __int8 v41;
  char v42;

  v2 = (char *)(a1 + 16);
  if (!a2 || !*a2)
  {
    IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>((char *)(a1 + 16));
    return;
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)v38);
  if (!v39)
    goto LABEL_24;
  v5 = a2[1];
  v6 = *a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v15 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v14 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
    }
LABEL_37:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = (uint64_t *)a2[3];
    if (!v13)
      goto LABEL_38;
    goto LABEL_51;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  v9 = v6 + v7 + 1;
  a2[2] = v9;
  if (!v6)
  {
    v15 = v5;
    v14 = 0;
    goto LABEL_37;
  }
  if (*v8 >= 2u)
    goto LABEL_38;
  if (*v8)
  {
    if (v5 <= v9 - v6)
    {
      v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      v34 = a2[3];
      if (v34)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v22 = 0;
        v35 = *a2;
        v36 = a2[1];
        v37 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v37)
        {
          if (v36)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
            v22 = a2[1];
          }
        }
      }
    }
    else
    {
      v9 = (uint64_t)(v8 + 2);
      a2[2] = (uint64_t)(v8 + 2);
      if (v8[1] < 2u)
        goto LABEL_10;
      v22 = v5;
    }
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (!v23 || !v22)
      goto LABEL_22;
    v28 = *(void (**)(void))(*(_QWORD *)v23 + 16);
LABEL_35:
    v28();
LABEL_22:
    v6 = *a2;
    v5 = a2[1];
    goto LABEL_23;
  }
LABEL_10:
  v10 = v9 - v6;
  if (v5 <= v10)
  {
    v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v31 = a2[1];
    }
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (!v33)
      goto LABEL_23;
    if (!v31)
    {
      v5 = 0;
      v6 = 0;
      goto LABEL_23;
    }
    v28 = *(void (**)(void))(*(_QWORD *)v33 + 16);
    goto LABEL_35;
  }
  v11 = (unsigned __int8 *)(v6 + v10);
  a2[2] = (uint64_t)(v11 + 1);
  v12 = *v11;
  if (v12 >= 2)
  {
LABEL_23:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v6);
    goto LABEL_24;
  }
  v13 = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)v40);
  if (v42)
  {
    v15 = v39;
    if (v39)
    {
      if (*(_QWORD *)v2)
      {
        v16 = *(_QWORD *)(*(_QWORD *)v2 + 8);
        if (v16)
        {
          v17 = v40[0];
          v18 = v40[1];
          v19 = v40[2];
          v20 = v41;
          CFRetain(*(CFTypeRef *)(v16 - 8));
          if (!*(_BYTE *)(v16 + 713))
          {
            v21 = (IPC::Encoder *)(v16 - 16);
            if (v20)
            {
              *(_QWORD *)(a1 + 64) = v19;
              WebKit::WebPageProxy::sendWheelEvent(v21, v17, v18, (char *)(a1 + 32), *(_BYTE *)(a1 + 144), *(_DWORD *)(a1 + 145), *(_WORD *)(a1 + 149), *(_BYTE *)(a1 + 151));
            }
            else
            {
              WebKit::WebPageProxy::handleWheelEventReply(v21, *(_BYTE *)(a1 + 151), v12 != 0);
            }
          }
          CFRelease(*(CFTypeRef *)(v16 - 8));
        }
      }
      return;
    }
    __break(1u);
LABEL_51:
    if (v15)
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 16))(v13, v14, v15);
      v6 = *a2;
      v5 = a2[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
LABEL_38:
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v6);
    goto LABEL_22;
  }
LABEL_24:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27 = a2[3];
  if (v27 && v26)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
  IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(v2);
}

void IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(char *a1)
{
  uint64_t v1;

  if (*(_QWORD *)a1)
  {
    v1 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v1)
    {
      CFRetain(*(CFTypeRef *)(v1 - 8));
      if (!*(_BYTE *)(v1 + 713))
        WebKit::WebPageProxy::handleWheelEventReply((WebKit::WebPageProxy *)(v1 - 16), a1[135], 0);
      CFRelease(*(CFTypeRef *)(v1 - 8));
    }
  }
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result, (uint64_t)&v15);
      v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::KeyEvent>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::KeyEvent &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::KeyEvent&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2264;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode((IPC::Encoder *)v8, *(char **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2, uint64_t a3)
{
  WebKit::WebKeyboardEvent *v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  const void *v13;

  if (this != a2)
  {
    v5 = this;
    do
    {
      v6 = *((_OWORD *)v5 + 1);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = (_DWORD *)*((_QWORD *)v5 + 4);
      if (v7)
        *v7 += 2;
      *(_QWORD *)(a3 + 32) = v7;
      v8 = (_DWORD *)*((_QWORD *)v5 + 5);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(a3 + 40) = v8;
      v9 = (_DWORD *)*((_QWORD *)v5 + 6);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(a3 + 48) = v9;
      v10 = (_DWORD *)*((_QWORD *)v5 + 7);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(a3 + 56) = v10;
      v11 = (_DWORD *)*((_QWORD *)v5 + 8);
      if (v11)
        *v11 += 2;
      *(_QWORD *)(a3 + 64) = v11;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)v5 + 72);
      v12 = *((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      *(_QWORD *)(a3 + 88) = v12;
      v13 = (const void *)*((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      if (v13)
        CFRelease(v13);
      WebKit::WebKeyboardEvent::~WebKeyboardEvent(v5, a2);
      v5 = (WebKit::WebKeyboardEvent *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  __int128 v19;
  IPC::Encoder *v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 31;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  v9 = a3[2];
  v19 = *a3;
  v23 = a3[1];
  v24 = v9;
  v10 = *((_QWORD *)a3 + 6);
  v21 = a3[4];
  v22 = *((_DWORD *)a3 + 20);
  v11 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 1) = 0;
  v12 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v12 = &off_1E34D48C0;
  *(_OWORD *)(v12 + 16) = v19;
  v13 = v24;
  *(_OWORD *)(v12 + 32) = v23;
  *(_OWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 64) = v10;
  *(_QWORD *)(v12 + 72) = v11;
  *(_OWORD *)(v12 + 80) = v21;
  *(_DWORD *)(v12 + 96) = v22;
  *(_QWORD *)&v23 = v12;
  *((_QWORD *)&v23 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  LOBYTE(v24) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)&v23, 1);
  if ((_BYTE)v24)
  {
    v15 = v23;
    *(_QWORD *)&v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, a2[1]);
  return IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::encode(a1, (char *)a2[2]);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = &off_1E34D48C0;
  v3 = *(WTF **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D48C0;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  char v9;
  _OWORD v10[2];

  v2 = a1 + 16;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>((uint64_t)v6, a2), v9))
  {
    v3 = v6[0];
    v10[0] = v7;
    v10[1] = v8;
    v4 = v10;
    v5 = v2;
  }
  else
  {
    v6[0] = 0;
    LOBYTE(v8) = 0;
    v4 = v6;
    v5 = v2;
    v3 = 0;
  }
  WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0::operator()(v5, v3, (uint64_t)v4);
}

uint64_t *IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t *result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  char v20;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_7;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_7:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_8;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
    goto LABEL_9;
  }
  result = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)v19);
  if (v20)
  {
    v11 = v19[1];
    *(_OWORD *)(a1 + 8) = v19[0];
    *(_OWORD *)(a1 + 24) = v11;
    *(_BYTE *)a1 = v9 != 0;
    *(_BYTE *)(a1 + 40) = 1;
    return result;
  }
LABEL_9:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (uint64_t *)a2[3];
  if (result)
  {
    if (v18)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v17);
  }
  return result;
}

void WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  v8 = *(_QWORD *)a1;
  CFRetain(*(CFTypeRef *)(v4 - 8));
  if (!*(_BYTE *)(a3 + 24))
  {
    v11 = *(unsigned __int8 *)(a1 + 16);
    v10 = a1 + 16;
    v9 = v11;
    if (v11 == 13)
    {
      v17 = *(_QWORD *)(v8 + 792);
      if (v17)
      {
        v13 = 0;
        v16 = 0;
        v18 = v17 - 1;
        *(_QWORD *)(v8 + 792) = v18;
        v14 = v18 == 0;
        goto LABEL_21;
      }
    }
    else if (v9 == 12)
    {
      if (*(_BYTE *)(v8 + 800) == 1)
      {
        v16 = 0;
        v14 = 0;
        if ((_DWORD)a2)
          v19 = 2;
        else
          v19 = 3;
        *(_BYTE *)(v8 + 800) = v19;
        v13 = 1;
LABEL_21:
        v28[0] = 0;
        v28[24] = 0;
        WebKit::WebPageProxy::didReceiveEvent(v8, v9, a2, (uint64_t)v28);
        v20 = *(_QWORD *)(v8 + 40);
        if (!v20)
          goto LABEL_6;
        v21 = *(_QWORD *)(v20 + 8);
        if (!v21)
          goto LABEL_6;
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1584))(v21);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 616))(v21, v10, a2);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1592))(v21);
        if (v16)
        {
          v22 = *(_QWORD *)(v8 + 40);
          if (v22)
            v23 = *(_QWORD *)(v22 + 8);
          else
            v23 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1584))(v23);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 624))(v23, a2);
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1592))(v23);
          if (!v13)
          {
LABEL_25:
            if (!v14)
              goto LABEL_6;
LABEL_35:
            v26 = *(_QWORD *)(v8 + 40);
            if (v26)
              v27 = *(_QWORD *)(v26 + 8);
            else
              v27 = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1584))(v27);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 640))(v27, a2);
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1592))(v27);
            goto LABEL_6;
          }
        }
        else if (!v13)
        {
          goto LABEL_25;
        }
        v24 = *(_QWORD *)(v8 + 40);
        if (v24)
          v25 = *(_QWORD *)(v24 + 8);
        else
          v25 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1584))(v25);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 632))(v25, a2);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1592))(v25);
        if (!v14)
          goto LABEL_6;
        goto LABEL_35;
      }
    }
    else if (v9 == 11)
    {
      v12 = *(_QWORD *)(v8 + 784);
      if (v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = v12 - 1;
        *(_QWORD *)(v8 + 784) = v15;
        v16 = v15 == 0;
        goto LABEL_21;
      }
    }
    v13 = 0;
    v16 = 0;
    v14 = 0;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 16);
  if (*(_BYTE *)(a3 + 24))
  {
    WebKit::WebPageProxy::sendPreventableTouchEvent(v8, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (unsigned __int8 *)(a1 + 16));
LABEL_6:
    CFRelease(*(CFTypeRef *)(v4 - 8));
    return;
  }
  __break(1u);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResetPotentialTapSecurityOrigin>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2338;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  __int128 v19;
  IPC::Encoder *v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 31;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  v9 = a3[2];
  v19 = *a3;
  v23 = a3[1];
  v24 = v9;
  v10 = *((_QWORD *)a3 + 6);
  v21 = a3[4];
  v22 = *((_DWORD *)a3 + 20);
  v11 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 1) = 0;
  v12 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v12 = &off_1E34D48E8;
  *(_OWORD *)(v12 + 16) = v19;
  v13 = v24;
  *(_OWORD *)(v12 + 32) = v23;
  *(_OWORD *)(v12 + 48) = v13;
  *(_QWORD *)(v12 + 64) = v10;
  *(_QWORD *)(v12 + 72) = v11;
  *(_OWORD *)(v12 + 80) = v21;
  *(_DWORD *)(v12 + 96) = v22;
  *(_QWORD *)&v23 = v12;
  *((_QWORD *)&v23 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  LOBYTE(v24) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)&v23, 1);
  if ((_BYTE)v24)
  {
    v15 = v23;
    *(_QWORD *)&v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34D48E8;
  v3 = *(WTF **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D48E8;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;
  char v8;

  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>((uint64_t)v6, a2);
      if (v8)
      {
        if (v7)
        {
          v3 = *(_QWORD *)(a1 + 16);
          v4 = v6[2];
          v5 = v6[1];
          *(_QWORD *)(a1 + 80) = v6[3];
          WebKit::WebPageProxy::sendUnpreventableTouchEvent(v3, v5, v4, (unsigned __int8 *)(a1 + 32));
        }
      }
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPointer>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2121;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TouchWithIdentifierWasRemoved>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2470;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CenterSelectionInVisibleArea>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2124;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D4910;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D4910;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D4938;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D4938;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D4960;
  WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D4960;
  WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::call(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  CFTypeRef *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  int BoolValueForKey;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WebKit::WebProcessProxy *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WebKit::ProvisionalFrameProxy **v40;
  WebKit::ProvisionalFrameProxy *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  void *v44;
  WebCore::ResourceRequest *v45;
  uint64_t v46;
  const void *v47;
  CFTypeRef v48;
  uint64_t v49;
  char v50;
  void *v51;
  WebKit::WebProcessProxy *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  char v58;
  WTF::StringImpl *v59;
  WebKit::SandboxExtensionImpl *v60;
  const char **v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  WebKit::WebProcessPool *v69;
  uint64_t v70;
  WebKit::SandboxExtensionImpl *v71;
  WebKit::WebProcessPool *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WebKit::SandboxExtensionImpl *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WebKit::SandboxExtensionImpl *v83;
  const char **v84;
  WebKit::SandboxExtensionImpl *v85;
  char v86;
  char v87;
  _BYTE buf[32];
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  _QWORD v94[23];
  CFTypeRef cf;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  char v101;
  __int16 v102;
  _QWORD v103[3];
  int v104;
  _BYTE v105[56];
  __int16 v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v5 + 729))
  {
    v9 = *(_QWORD *)(v5 + 160);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v9 + 8), buf))
    {
      v10 = *(_QWORD *)(v5 + 40);
      if (v10)
        v11 = *(_QWORD *)(v10 + 8);
      else
        v11 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
      v16 = *(_QWORD *)(v5 + 224);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v16 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v15);
      v18 = *(_QWORD *)(a1 + 64);
      if (BoolValueForKey
        && (v19 = *(_QWORD *)(v18 + 24)) != 0
        && (v20 = *(_QWORD *)(v19 + 8)) != 0
        && (*(_QWORD *)(v20 + 264) == v18 || (v21 = *(_QWORD *)(v20 + 1104)) != 0 && *(_QWORD *)(v21 + 72) == v18)
        && (v22 = *(_QWORD *)(v5 + 1120)) != 0)
      {
        v23 = *(_QWORD *)(v22 + 40);
      }
      else
      {
        v23 = *(_QWORD *)(v18 + 32);
      }
      v24 = *(_QWORD *)(v23 + 16);
      v25 = (unsigned int *)(v24 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      v27 = *a2;
      v28 = *((_QWORD *)*a2 + 22);
      if (v28 != *(_QWORD *)(v24 + 176))
      {
        *(_BYTE *)(a1 + 24) = 3;
        v36 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(_QWORD *)(v5 + 32);
          v38 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 136);
          if (v38)
          {
            LODWORD(v38) = *(_DWORD *)(v38 + 108);
            if (*(_BYTE *)(v5 + 729))
              v39 = 0;
            else
              v39 = v38;
          }
          else
          {
            v39 = 0;
          }
          v64 = *(_QWORD *)(v37 + 744);
          v65 = *(_QWORD *)(v37 + 1896);
          v66 = *((_QWORD *)v27 + 17);
          if (v66)
            LODWORD(v66) = *(_DWORD *)(v66 + 108);
          *(_DWORD *)buf = 134219522;
          *(_QWORD *)&buf[4] = v5;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v64;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v65;
          v89 = 1024;
          v90 = v38;
          v91 = 1024;
          v92 = v39;
          v93 = 1024;
          LODWORD(v94[0]) = v66;
          WORD2(v94[0]) = 2082;
          *(_QWORD *)((char *)v94 + 6) = a4;
          _os_log_impl(&dword_196BCC000, v36, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction, swapping process %i with process %i for navigation, reason=%{public}s", buf, 0x3Cu);
          v27 = *a2;
        }
        v67 = *((_QWORD *)v27 + 127);
        if (v67)
        {
          v68 = *(uint64_t **)v67;
          ++*(_QWORD *)(v67 + 8);
          if (v68)
          {
            if (*v68)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*v68 + 16))(*v68, 1);
          }
        }
        if (a3)
        {
          v69 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v5 + 48) + 24));
          WebKit::WebBackForwardCache::takeSuspendedPage(*((WebKit::WebBackForwardCache **)v69 + 95), *(WebKit::WebBackForwardListItem **)(*(_QWORD *)(a1 + 32) + 464), &v85);
          v71 = v85;
          if (v85 && (*((_BYTE *)v85 + 88) || *((_BYTE *)v85 + 90)))
          {
            v85 = 0;
            (*(void (**)(WebKit::SandboxExtensionImpl *))(*(_QWORD *)v71 + 8))(v71);
          }
        }
        else
        {
          v85 = 0;
          v72 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v5 + 48) + 24));
          WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(*((WebKit::WebBackForwardCache **)v72 + 95), (WebKit::WebPageProxy *)v5, *a2);
        }
        WebKit::WebPageProxy::continueNavigationInNewProcess(v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), &v85, a2, *(_BYTE *)(a1 + 56), 1, v70, 0, 0, 0, *(_BYTE *)(a1 + 104), *(_QWORD *)(a1 + 112));
        v73 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
        v74 = *(_QWORD *)(a1 + 32);
        v84 = 0;
        buf[0] = 0;
        buf[8] = 0;
        WebKit::WebPageProxy::receivedPolicyDecision(v5, v73, v74, (API::WebsitePolicies **)&v84, (_QWORD *)(a1 + 40), 1, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
        if (buf[8])
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
        v75 = v85;
        v85 = 0;
        if (v75)
          (*(void (**)(WebKit::SandboxExtensionImpl *))(*(_QWORD *)v75 + 8))(v75);
        if (!v67)
          goto LABEL_107;
        v76 = *(uint64_t **)v67;
        v77 = *(_QWORD *)(v67 + 8) - 1;
        *(_QWORD *)(v67 + 8) = v77;
        if (v76)
        {
          v78 = *v76;
          if (!*v76
            || (v79 = *(_BYTE *)(v67 + 16),
                *(_BYTE *)(v67 + 16) = 1,
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 16))(v78, 0),
                *(_BYTE *)(v67 + 16) = v79,
                *(_QWORD *)v67))
          {
LABEL_107:
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v25);
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
            return;
          }
          v77 = *(_QWORD *)(v67 + 8);
        }
        if (!v77)
          MEMORY[0x19AEB936C](v67, 0x1020C40545B2139);
        goto LABEL_107;
      }
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 176);
      v30 = qword_1ECE71668;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(_QWORD *)(v5 + 32);
        v32 = *(_QWORD *)(v31 + 744);
        v33 = *(_QWORD *)(v31 + 1896);
        v34 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 136);
        if (v34)
        {
          LODWORD(v34) = *(_DWORD *)(v34 + 108);
          if (*(_BYTE *)(v5 + 729))
            v35 = 0;
          else
            v35 = v34;
        }
        else
        {
          v35 = 0;
        }
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v32;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v33;
        v89 = 1024;
        v90 = v34;
        v91 = 1024;
        v92 = v35;
        v93 = 2082;
        v94[0] = a4;
        _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: keep using process %i for navigation, reason=%{public}s", buf, 0x36u);
      }
      v40 = (WebKit::ProvisionalFrameProxy **)(*(_QWORD *)(a1 + 64) + 320);
      v41 = *v40;
      *v40 = 0;
      std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100](v40, 0);
      if (v41)
      {
        WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v41, v42);
        WTF::fastFree(v43, v44);
      }
      if (v29 != v28)
      {
        LOBYTE(v89) = 0;
        memset(buf, 0, 17);
        v45 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v92);
        v101 = 0;
        v102 = 0;
        v104 = 0;
        v105[0] = 0;
        v105[48] = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        v100 = 0;
        *(_DWORD *)((char *)v103 + 7) = 0;
        v46 = *(_QWORD *)(a1 + 32);
        v103[2] = 0;
        v103[0] = 0;
        WebCore::ResourceRequestBase::operator=((uint64_t)v45, v46 + 232);
        v47 = *(const void **)(v46 + 424);
        if (v47)
          CFRetain(v47);
        v48 = cf;
        cf = v47;
        if (v48)
          CFRelease(v48);
        v49 = *(_QWORD *)(a1 + 32);
        if ((*(_BYTE *)(v49 + 738) & 1) != 0)
          v50 = 1;
        else
          v50 = 2;
        HIBYTE(v102) = v50;
        *(_OWORD *)&buf[16] = *(_OWORD *)(*(_QWORD *)(a1 + 64) + 272);
        if (!(_BYTE)v89)
          LOBYTE(v89) = 1;
        v112 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 648);
        *(_QWORD *)&buf[8] = *(_QWORD *)(v49 + 16);
        LOBYTE(v85) = 0;
        v87 = 0;
        if (*(_BYTE *)(v49 + 1048))
        {
          std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>((uint64_t)&v85, v49 + 1000);
          v87 = 1;
        }
        std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v105, (uint64_t)&v85);
        std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v85, v51);
        v52 = *a2;
        v85 = (WebKit::SandboxExtensionImpl *)buf;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>((uint64_t)v52, (uint64_t *)&v85, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v53);
      }
      v54 = *(_QWORD *)(a1 + 32);
      v55 = *(_QWORD *)(v54 + 480);
      if (v55 || (v55 = *(_QWORD *)(v54 + 464)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v55 + 8));
        LOBYTE(v85) = 0;
        v86 = 0;
        v57 = (unsigned __int8 *)(a1 + 24);
        v56 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
        if (*(_BYTE *)(a1 + 24))
        {
          v58 = 0;
LABEL_95:
          v81 = *(_QWORD *)(a1 + 32);
          v82 = *(_QWORD *)(v81 + 3472);
          if (v82)
            CFRetain(*(CFTypeRef *)(v82 + 8));
          v84 = (const char **)v82;
          buf[0] = 0;
          buf[8] = 0;
          if (v86)
          {
            v83 = v85;
            v85 = 0;
            *(_QWORD *)buf = v83;
            buf[8] = 1;
          }
          WebKit::WebPageProxy::receivedPolicyDecision(v5, v56, v81, (API::WebsitePolicies **)&v84, (_QWORD *)(a1 + 40), 0, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
          if (buf[8])
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
          if (v82)
            CFRelease(*(CFTypeRef *)(v82 + 8));
          if (v86)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v85);
          if ((v58 & 1) == 0)
            CFRelease(*(CFTypeRef *)(v55 + 8));
          goto LABEL_107;
        }
        WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v55 + 56));
        if (WTF::URL::protocolIs())
        {
          v84 = 0;
          WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle((WebKit::WebPageProxy *)v5, *a2, (const WTF::URL *)buf, (const WTF::URL *)(v55 + 344), &v84, 1);
          v60 = (WebKit::SandboxExtensionImpl *)v84;
          v84 = 0;
          if (v86)
          {
            v61 = (const char **)v85;
            v85 = v60;
            if (v61)
            {
              WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v61);
              WTF::fastFree(v62, v63);
            }
          }
          else
          {
            v85 = v60;
            v86 = 1;
          }
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v84);
        }
        v80 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v59);
          else
            *(_DWORD *)v80 -= 2;
        }
        v58 = 0;
      }
      else
      {
        LOBYTE(v85) = 0;
        v86 = 0;
        v57 = (unsigned __int8 *)(a1 + 24);
        v58 = 1;
      }
      v56 = (WTF::StringImpl *)*v57;
      goto LABEL_95;
    }
  }
  v12 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(CFTypeRef **)(v13 + 3472);
  if (v14)
  {
    CFRetain(v14[1]);
    CFRetain(v14[1]);
  }
  v85 = (WebKit::SandboxExtensionImpl *)v14;
  buf[0] = 0;
  buf[8] = 0;
  WebKit::WebPageProxy::receivedPolicyDecision(v5, v12, v13, &v85, (_QWORD *)(a1 + 40), 0, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
  if (buf[8])
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
  if (v14)
  {
    CFRelease(v14[1]);
    CFRelease(v14[1]);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D4988;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D4988;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v6 = a1[1];
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (a2)
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v6 + 72) + 200))(*(_QWORD *)(v6 + 72), v6, a1[3], a2);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D49B0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D49B0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v6 = a1[1];
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (a2)
      {
        v7 = a1[3];
        if (*(_QWORD *)(v7 + 488))
        {
          WTF::String::operator=((WTF::StringImpl **)(a2 + 272), (WTF::StringImpl *)(v7 + 488));
          v7 = a1[3];
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 72) + 192))(*(_QWORD *)(v6 + 72), v6, v7, a2);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2463;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *a1 = off_1E34D49D8;
  v3 = a1[75];
  a1[75] = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = a1[73];
  a1[73] = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;

  *a1 = off_1E34D49D8;
  v3 = a1[75];
  a1[75] = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = a1[73];
  a1[73] = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 1), a2);
  return WTF::fastFree((WTF *)a1, v9);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 584);
  v3 = a1 + 8;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(v1, &v3, *(_QWORD *)(a1 + 592), 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34D4A00;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D4A00;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  API::WebsitePolicies *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  CFTypeRef v36;
  int v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  CFTypeRef cf;
  _QWORD v42[14];
  char v43;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 464);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 32);
    v6 = *(_QWORD *)(v5 + 960);
    v7 = v5;
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 + 8));
      v7 = *(_QWORD *)(v2 + 32);
      v3 = *(_QWORD *)(a1 + 24);
    }
    v42[0] = v6;
    v42[1] = v5 + 944;
    ++*(_DWORD *)(v5 + 1316);
    *(_BYTE *)(v5 + 1312) = 1;
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(_DWORD **)(v4 + 56);
    if (v9)
      *v9 += 2;
    v38 = 0;
    WTF::URL::invalidate((WTF::URL *)&v38);
    *(_QWORD *)(v7 + 1144) = v8;
    v11 = *(WTF::StringImpl **)(v7 + 1152);
    *(_QWORD *)(v7 + 1152) = v9;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::String::operator=((WTF::StringImpl **)(v7 + 1232), (WTF::StringImpl *)&v38);
    *(_OWORD *)(v7 + 1240) = v39;
    *(_OWORD *)(v7 + 1256) = v40;
    v32 = v38;
    v38 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    WebKit::ProvisionalPageProxy::goToBackForwardItem(*(_QWORD **)(v2 + 1120), *(_QWORD *)(a1 + 24), v4, (API::WebsitePolicies **)(a1 + 40), *(_BYTE *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v42, v33, v34);
  }
  else
  {
    v12 = *(_QWORD *)(v2 + 592);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13 && *(_QWORD *)(v13 + 8) && *(_BYTE *)(v12 + 48))
    {
      v14 = *(_QWORD *)(v12 + 40);
      if (v14 >= *(unsigned int *)(v12 + 36))
      {
        __break(0xC471u);
        return;
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v14);
      if (v15 && (*(_BYTE *)(v3 + 977) || *(_BYTE *)(v3 + 976)))
      {
        v16 = *(_QWORD **)(v2 + 1120);
        v17 = (_QWORD *)(v15 + 32);
        v18 = v16[2];
        v16 += 2;
        v19 = (*(uint64_t (**)(_QWORD *))(v18 + 56))(v16);
        v20 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v20 = 2380;
        *(_QWORD *)(v20 + 8) = v19;
        *(_QWORD *)(v20 + 528) = v20 + 16;
        *(_QWORD *)(v20 + 536) = v20 + 16;
        *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v20 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
        v38 = (WTF::StringImpl *)v20;
        IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode((IPC::Encoder *)v20, v17);
        (*(void (**)(_QWORD *, WTF::StringImpl **, _QWORD))(*v16 + 32))(v16, &v38, 0);
        v22 = v38;
        v38 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v21);
          WTF::fastFree(v23, v24);
        }
      }
    }
    LOBYTE(v42[0]) = 0;
    v43 = 0;
    v25 = *(API::WebsitePolicies **)(a1 + 40);
    if (v25)
    {
      API::WebsitePolicies::data(v25, (uint64_t)&v38);
      std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)v42, (uint64_t *)&v38);
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v38, v26);
    }
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(_QWORD *)(v27 + 496);
    v29 = *(_QWORD **)(v2 + 1120);
    if (v28)
    {
      WebKit::ProvisionalPageProxy::loadData(v29, v27, *(_QWORD *)v28, *(unsigned int *)(v28 + 12), (WTF::StringImpl *)(v28 + 16), (WTF::StringImpl *)(v28 + 24), (WTF::StringImpl *)(v28 + 32), *(const void **)(v28 + 40), *(_BYTE *)(a1 + 32), v37, *(_WORD *)(v2 + 1256), (uint64_t)v42, *(_BYTE *)(v28 + 48));
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v38, (const WebCore::ResourceRequest *)(v27 + 232));
      WebKit::ProvisionalPageProxy::loadRequest(v29, v27, (uint64_t)&v38, 0, *(unsigned __int8 *)(a1 + 32), *(_WORD *)(v2 + 1256), (uint64_t)v42, v35, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v36 = cf;
      cf = 0;
      if (v36)
        CFRelease(v36);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v38);
    }
    if (v43)
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v42, v30);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D4A28;
  WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2::~$_2(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E34D4A28;
  WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2::~$_2(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::LoadedWebArchive,WebKit::WebsiteDataStore *)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = v4;
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v3, v1, (WTF::ASCIICaseInsensitiveHash **)(a1 + 24), v2, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUserAgent(WTF::String &&,WebKit::WebPageProxy::IsCustomUserAgent)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  char v21;
  IPC::Encoder *v22;

  v6 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 304);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2440;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v22 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v6);
  LOBYTE(v20[0]) = 0;
  v21 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v22, 0, (uint64_t)v20, 1);
  if (v21)
  {
    v9 = v20[0];
    v20[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  v13 = **(_BYTE **)(a1 + 16);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2392;
  *(_QWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v22 = (IPC::Encoder *)v14;
  *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = v13;
  LOBYTE(v20[0]) = 0;
  v21 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v22, 0, (uint64_t)v20, 1);
  if (v21)
  {
    v16 = v20[0];
    v20[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResumeActiveDOMObjectsAndAnimations>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2344;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SuspendActiveDOMObjectsAndAnimations>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2461;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4A78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4A78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4AA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4AA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCustomTextEncodingName>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2381;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTextZoomFactor>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2433;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setPageZoomFactor(double)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 632);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2418;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v5;
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageAndTextZoomFactors>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2416;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  v10 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
  LOBYTE(v18) = 0;
  v19 = 0;
  v12 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, a4, (uint64_t)&v18, 1);
  if (v19)
  {
    v13 = v18;
    v18 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScalePage>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2347;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, (_DWORD *)a2[1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::EventDispatcher::PageScreenDidChange>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 30;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,std::optional<unsigned int> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,unsigned int,std::optional<unsigned int> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)a2[2]);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AccessibilitySettingsDidChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2099;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseFixedLayout>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2438;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFixedLayoutSize>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2387;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDefaultUnobscuredSize>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2382;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMinimumUnobscuredSize>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2410;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMaximumUnobscuredSize>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2405;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(uint64_t a1, _WORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2266;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOWORD(a3) = **a2;
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 2uLL, 2) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetSuppressScrollbarAnimations>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2430;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableVerticalRubberBanding>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2386;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableHorizontalRubberBanding>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2385;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundExtendsBeyondPage>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2372;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationMode>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2420;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationBehavesLikeColumns>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2419;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageLength>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2417;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetGapBetweenPages>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2391;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34D4AF0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D4AF0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  WTF **v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  WTF *result;
  uint64_t v26;
  WTF *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  WTF *v51;
  unint64_t v52;
  char v53;
  WTF *v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  if (a2)
  {
    v4 = (void *)*a2;
    if (v4)
    {
      v5 = a2[1];
      v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
      if (v5 >= v6 && v5 - v6 > 7)
      {
        v8 = (WTF **)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        v9 = (unint64_t)*v8;
        a2[2] = (unint64_t)(v8 + 1);
        v58 = 0;
        v59 = 0;
        if (v9 >= 0x10000)
        {
          while (1)
          {
            result = IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v54);
            if (!v57)
              break;
            v24 = HIDWORD(v59);
            if (HIDWORD(v59) == (_DWORD)v59)
            {
              result = (WTF *)WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)&v58, (unint64_t)&v54);
            }
            else
            {
              v26 = v58 + 16 * HIDWORD(v59);
              *(_QWORD *)v26 = 0;
              *(_QWORD *)(v26 + 8) = 0;
              v27 = v54;
              v54 = 0;
              *(_QWORD *)v26 = v27;
              *(_DWORD *)(v26 + 8) = v55;
              LODWORD(v27) = v56;
              v56 = 0;
              *(_DWORD *)(v26 + 12) = (_DWORD)v27;
              HIDWORD(v59) = v24 + 1;
            }
            if (v57)
            {
              result = v54;
              if (v54)
              {
                v54 = 0;
                v55 = 0;
                result = (WTF *)WTF::fastFree(result, v4);
              }
            }
            if (!--v9)
            {
              v14 = HIDWORD(v59);
              v9 = v58;
              v15 = v59;
              if (v59 <= HIDWORD(v59))
                goto LABEL_21;
              v43 = (WTF *)v58;
              v46 = HIDWORD(v59);
              if (HIDWORD(v59))
              {
                if (HIDWORD(v59) >> 28)
                {
                  __break(0xC471u);
                  return result;
                }
                v15 = HIDWORD(v59);
                v44 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v59)));
                v43 = (WTF *)v9;
                if (v44 != v9)
                {
                  v45 = v44;
                  v15 = v46;
                  WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move((WTF *)v9, (WTF *)(v9 + 16 * v46), v44);
                  v43 = (WTF *)v45;
                }
              }
              if (v9)
              {
                if (v43 == (WTF *)v9)
                {
                  v15 = 0;
                  v43 = 0;
                  v58 = 0;
                }
                WTF::fastFree((WTF *)v9, v4);
              }
              v9 = (unint64_t)v43;
              v14 = v46;
              goto LABEL_21;
            }
          }
        }
        else
        {
          if (!v9)
          {
            v14 = 0;
            v15 = 0;
LABEL_21:
            v58 = 0;
            v59 = 0;
            v51 = (WTF *)v9;
            v52 = __PAIR64__(v14, v15);
            v53 = 1;
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
            v16 = a2[1];
            v17 = (char *)*a2;
            v18 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
            if (v16 < v18 || v16 - v18 <= 3)
            {
              v39 = 0;
              v40 = 0;
              *a2 = 0;
              a2[1] = 0;
              v41 = a2[3];
              if (v41)
              {
                if (v16)
                {
                  (*(void (**)(unint64_t))(*(_QWORD *)v41 + 16))(v41);
                  v40 = *a2;
                  v39 = a2[1];
                }
                else
                {
                  v39 = 0;
                  v40 = 0;
                }
              }
            }
            else
            {
              v19 = &v17[v18];
              a2[2] = (unint64_t)(v19 + 4);
              if (v17)
              {
                v20 = *(_DWORD *)v19;
                v51 = 0;
                v52 = 0;
                v49 = v20;
                v50 = 1;
                WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v17);
                v47 = 0;
                v54 = (WTF *)v9;
                v48 = 0;
                v55 = v15;
                v56 = v14;
                v21 = *(_QWORD *)(a1 + 8);
                if (v14)
                  (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 120) + 16))(*(_QWORD *)(v21 + 120));
                else
                  (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 112) + 32))(*(_QWORD *)(v21 + 112));
                WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v22);
                return (WTF *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v23);
              }
              v39 = v16;
              v40 = 0;
            }
            *a2 = 0;
            a2[1] = 0;
            v42 = a2[3];
            if (v42 && v39)
              (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v17);
            goto LABEL_42;
          }
          LODWORD(v59) = v9;
          v58 = WTF::fastMalloc((WTF *)(16 * v9));
          while (1)
          {
            IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v54);
            if (!v57)
              break;
            v10 = HIDWORD(v59);
            if (HIDWORD(v59) == (_DWORD)v59)
            {
              WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)&v58, (unint64_t)&v54);
            }
            else
            {
              v11 = v58 + 16 * HIDWORD(v59);
              *(_QWORD *)v11 = 0;
              *(_QWORD *)(v11 + 8) = 0;
              v12 = v54;
              v54 = 0;
              *(_QWORD *)v11 = v12;
              *(_DWORD *)(v11 + 8) = v55;
              LODWORD(v12) = v56;
              v56 = 0;
              *(_DWORD *)(v11 + 12) = (_DWORD)v12;
              HIDWORD(v59) = v10 + 1;
            }
            if (v57)
            {
              v13 = v54;
              if (v54)
              {
                v54 = 0;
                v55 = 0;
                WTF::fastFree(v13, v4);
              }
            }
            if (!--v9)
            {
              v9 = v58;
              v15 = v59;
              v14 = HIDWORD(v59);
              goto LABEL_21;
            }
          }
        }
        WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
        v35 = a2[3];
        if (v35)
        {
          if (v5)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v35 + 16))(v35);
            v36 = *a2;
            v37 = a2[1];
            v38 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v38)
            {
              if (v37)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
            }
          }
        }
      }
      v28 = *a2;
      v29 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v30 = a2[3];
      if (v30)
        v31 = v29 == 0;
      else
        v31 = 1;
      if (!v31)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
LABEL_42:
      v32 = *a2;
      v33 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v34 = a2[3];
      if (v34)
      {
        if (v33)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      }
    }
  }
  v47 = 0;
  v48 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), *(_QWORD *)(a1 + 8), a1 + 24);
  return (WTF *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v23);
}

unint64_t WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * a1[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  int v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = (WTF *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(_QWORD *)v3 = v6;
      result = WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D4B40;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D4B40;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  WTF *result;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[16];
  unsigned __int8 v12;
  WTF *v13;
  int v14;
  char v15;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, v11);
    if (v15)
    {
      v3 = v12;
      v4 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 112);
      if (v12)
        (*(void (**)(void))(v4 + 24))();
      else
        (*(void (**)(void))(v4 + 32))();
      v8 = v3 != 0;
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v9 + 16))(v9, v8);
      result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v15)
      {
        result = v13;
        if (v13)
        {
          v13 = 0;
          v14 = 0;
          return (WTF *)WTF::fastFree(result, v10);
        }
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), *(_QWORD *)(a1 + 8), a1 + 16);
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), *(_QWORD *)(a1 + 8), a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2206;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4B90;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4B90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4B90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  _QWORD v39[2];
  char v40;
  __int128 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  if (!a2 || (v4 = (WTF::StringImpl *)*a2) == 0)
  {
LABEL_39:
    v41 = 0uLL;
    v25 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 16))(v25, &v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v18 = &v41;
    goto LABEL_40;
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = *a2;
        v31 = a2[1];
        v32 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v32)
        {
          if (v31)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
        }
      }
    }
LABEL_37:
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v23)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v28)
      {
        if (v27)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_39;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v45 = 0;
  v46 = 0;
  if (v9 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v41);
      if (!v44)
        goto LABEL_36;
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>((uint64_t)&v45, (unint64_t)&v41);
      }
      else
      {
        v19 = v45 + 32 * HIDWORD(v46);
        *(_OWORD *)v19 = v41;
        v20 = v42;
        v42 = 0;
        *(_QWORD *)(v19 + 16) = v20;
        *(_QWORD *)(v19 + 24) = v43;
        ++HIDWORD(v46);
      }
      if (v44)
      {
        v21 = v42;
        v42 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v4);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      --v9;
    }
    while (v9);
    v33 = HIDWORD(v46);
    v13 = (WTF::StringImpl *)v45;
    if (v46 > HIDWORD(v46))
    {
      v34 = (WTF::StringImpl *)v45;
      if (HIDWORD(v46))
      {
        if (HIDWORD(v46) >> 27)
        {
          __break(0xC471u);
          return;
        }
        v35 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v46)));
        LODWORD(v46) = v33;
        v45 = v35;
        v34 = v13;
        if ((WTF::StringImpl *)v35 != v13)
        {
          WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(v13, (WTF::StringImpl *)((char *)v13 + 32 * v33), v35);
          v34 = (WTF::StringImpl *)v45;
        }
      }
      if (v13)
      {
        if (v34 == v13)
        {
          v45 = 0;
          LODWORD(v46) = 0;
        }
        WTF::fastFree(v13, v4);
LABEL_21:
        v13 = (WTF::StringImpl *)v45;
      }
      else
      {
        v13 = v34;
      }
    }
    v14 = v46;
    goto LABEL_24;
  }
  if (v9)
  {
    LODWORD(v46) = v9;
    v45 = WTF::fastMalloc((WTF *)(32 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v41);
      if (!v44)
        break;
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>((uint64_t)&v45, (unint64_t)&v41);
      }
      else
      {
        v10 = v45 + 32 * HIDWORD(v46);
        *(_OWORD *)v10 = v41;
        v11 = v42;
        v42 = 0;
        *(_QWORD *)(v10 + 16) = v11;
        *(_QWORD *)(v10 + 24) = v43;
        ++HIDWORD(v46);
      }
      if (v44)
      {
        v12 = v42;
        v42 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v4);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      if (!--v9)
        goto LABEL_21;
    }
LABEL_36:
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v4);
    goto LABEL_37;
  }
  v13 = 0;
  v14 = 0;
LABEL_24:
  v36 = v14;
  v45 = 0;
  v46 = 0;
  v40 = 1;
  WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v4);
  v39[0] = 0;
  v39[1] = 0;
  v37[0] = v13;
  v37[1] = v36;
  WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v15);
  v38 = 1;
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 16))(v16, v37);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v38)
  {
    v18 = (__int128 *)v37;
LABEL_40:
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v17);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebFoundTextRange>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;
  unint64_t v7;

  v3 = (__n128 *)WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  result = *v3;
  *(__n128 *)v4 = *v3;
  v6 = v3[1].n128_u64[0];
  v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19736FB68);
    }
    v4 = *(WTF::StringImpl **)a1;
    v5 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *((_QWORD *)v5 + 2);
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      *(_QWORD *)(a3 + 24) = v7;
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebFoundTextRange>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[2];
      v3[2] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebKit::WebFoundTextRange>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceFoundTextRangeWithString>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2318;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecorateTextRangeWithStyle>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2150;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScrollTextRangeToVisible>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2352;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearAllDecoratedFoundText>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2130;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidBeginTextSearchOperation>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2155;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2335;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4BB8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4BB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4BB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD v16[4];
  char v17;

  if (!a2 || !*a2)
  {
LABEL_7:
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    a3.n128_u32[0] = 0;
    a4.n128_u32[0] = 0;
    a5.n128_u32[0] = 0;
    a6.n128_u32[0] = 0;
    (*(void (**)(uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)v8 + 16))(v8, a3, a4, a5, a6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)v16);
  if (!v17)
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11 && v10)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v13 = *a2;
      v14 = a2[1];
      v15 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v15 && v14)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_7;
  }
  a3.n128_u32[0] = v16[0];
  a4.n128_u32[0] = v16[1];
  a5.n128_u32[0] = v16[2];
  a6.n128_u32[0] = v16[3];
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)v8 + 16))(v8, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2102;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4BE0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)>>(WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4BE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)>>(WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4BE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)>>(WTF::CompletionHandler<void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)v8);
    if (v9)
    {
      v3 = v8[0];
      v4 = v8[1];
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3, v4);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0, 0);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2315;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4C08;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4C08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4C08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GetImageForFindMatch>(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2224;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectFindMatch>(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2355;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HideFindUI>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2253;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34D4C30;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D4C30;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v3)(void);

  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<float>>(a2) & 0xFF00000000) != 0)
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16);
  else
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16);
  return v3();
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2346;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v8, a2[1]);
  v9 = a2[2];
  v10 = *v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v9 + 1);
  LOBYTE(v20) = 0;
  LODWORD(v21) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v20, a3);
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v22 = v11;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = &off_1E34D4C58;
  *(_BYTE *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v12 + 8, (uint64_t)&v20);
  *(_QWORD *)(v12 + 24) = v22;
  v22 = 0;
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D4170[v21])(&v23, &v20);
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20 = v12;
  v21 = v13;
  LOBYTE(v22) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, 0, (uint64_t)&v20, 1);
  if ((_BYTE)v22)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E34D4C58;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34D4170[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E34D4C58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34D4170[v4])(&v6, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char *v16;
  WTF *v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36[2];
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  char v54;

  v2 = a1 + 8;
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(a1 + 8);
  v3 = a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(a1 + 8);
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v43);
  if (!v44)
    goto LABEL_38;
  v5 = v3[1];
  v6 = (WTF::StringImpl *)*v3;
  v7 = v3[2] - *v3;
  if (v5 <= v7)
  {
    v23 = 0;
    v24 = 0;
    *v3 = 0;
    v3[1] = 0;
    v25 = v3[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *v3;
        v23 = v3[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_30;
  }
  v8 = (char *)v6 + v7;
  v3[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v23 = v5;
    v24 = 0;
LABEL_30:
    v5 = 0;
    v6 = 0;
    *v3 = 0;
    v3[1] = 0;
    v26 = v3[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
        v6 = (WTF::StringImpl *)*v3;
        v5 = v3[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_31;
  }
  v9 = *v8;
  if (v9 < 2)
  {
    if (*v8)
    {
      IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::decode(v3, (uint64_t)v51);
      if (!v54)
        goto LABEL_35;
      do
      {
        v3 = (uint64_t *)v51[0];
        v46 = v51[1];
        v47 = v52;
        v2 = v53;
        v51[0] = 0;
        v53 = 0;
        LOBYTE(v49) = 1;
        v50 = 1;
        std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, v10);
        if (v44)
        {
          *(_OWORD *)v36 = v43;
          v37 = v3;
          v38 = v46;
          v39 = v47;
          v45 = 0;
          v48 = 0;
          v40 = v2;
          v41 = 1;
          goto LABEL_14;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        v10 = (WTF::StringImpl *)*v3;
        v28 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v29 = v3[3];
        if (!v29)
          break;
        if (!v28)
          break;
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v29 + 16))(v29, v10);
      }
      while (v54);
      std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, v10);
      goto LABEL_37;
    }
    LOBYTE(v51[0]) = 0;
    v54 = 0;
    LOBYTE(v45) = 0;
    LOBYTE(v49) = 0;
    v50 = 1;
    std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51, v6);
    if (!v44)
      goto LABEL_34;
    *(_OWORD *)v36 = v43;
    LOBYTE(v37) = 0;
    v41 = 0;
LABEL_14:
    v42 = 1;
    std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v11);
    if (v9)
    {
      v13 = v37;
      v47 = v39;
      v37 = 0;
      v40 = 0;
      v45 = v13;
      v46 = v38;
      v48 = v2;
      v49 = 1;
    }
    else
    {
      if (v36[1])
      {
        if ((unint64_t)v36[1] >> 32)
        {
          __break(0xC471u);
          JUMPOUT(0x197371264);
        }
        v16 = (char *)WTF::fastMalloc(v36[1]);
        v17 = (WTF *)v16;
        v18 = 0;
        do
        {
          *((_BYTE *)v18 + (_QWORD)v16) = *((_BYTE *)v36[0] + (unint64_t)v18);
          v18 = (WTF *)((char *)v18 + 1);
        }
        while (v36[1] != v18);
        API::SerializedScriptValue::createFromWireBytes(v16, (WTF *)LODWORD(v36[1]), v51);
        v19 = (uint64_t *)v51[0];
        CFRetain(*(CFTypeRef *)(v51[0] + 8));
        v45 = v19;
        v49 = 0;
        v20 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v20 + 16))(v20, &v45);
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (v49 != -1)
          ((void (*)(__int128 *, uint64_t **))off_1E34D4250[v49])(&v43, &v45);
        v49 = -1;
        v22 = v51[0];
        v51[0] = 0;
        if (v22)
          CFRelease(*(CFTypeRef *)(v22 + 8));
        WTF::fastFree(v17, v21);
        return std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v15);
      }
      v45 = 0;
      v49 = 0;
    }
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v14 + 16))(v14, &v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v49 != -1)
      ((void (*)(_QWORD *, uint64_t **))off_1E34D4250[v49])(v51, &v45);
    return std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v15);
  }
LABEL_31:
  *v3 = 0;
  v3[1] = 0;
  v27 = v3[3];
  if (v27 && v5)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v27 + 16))(v27, v6);
LABEL_37:
  v30 = *v3;
  v31 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v32 = v3[3];
  if (v32 && v31)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
LABEL_38:
  v33 = *v3;
  v34 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v35 = v3[3];
  if (v35 && v34)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
  return IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _BYTE v4[40];
  _QWORD v5[4];
  int v6;
  char v7;

  v4[0] = 0;
  v4[32] = 0;
  v5[0] = 0;
  v6 = 0;
  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v6 != -1)
    ((void (*)(char *, _QWORD *))off_1E34D4250[v6])(&v7, v5);
  return std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2232;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4C80;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4C80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4C80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2239;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4CA8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4CA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4CA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2221;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4CD0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4CD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4CD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34D4CF8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34D4CF8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];
  char v10;
  _BYTE v11[40];
  char v12;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WebCore::AttributedString>(a2, v11);
  if (v12)
  {
    WebCore::AttributedString::AttributedString();
    v10 = 1;
    if (v12)
      MEMORY[0x19AEAEECC](v11);
  }
  else
  {
    v9[0] = 0;
    v10 = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = a2[3];
    if (!v8)
      return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
    if (!v7)
      return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
    if (!v10)
      return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
  }
  v4 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v10)
    return MEMORY[0x19AEAEECC](v9);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  _BYTE v4[40];

  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v4);
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return MEMORY[0x19AEAEECC](v4);
}

WTF **WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WTF *v15;
  WTF *v16[2];
  char v17;
  IPC::Encoder *v18;

  v5 = **(_DWORD ***)(a1 + 8);
  ++*v5;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2223;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v18 = (IPC::Encoder *)v6;
  v15 = 0;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E34D4D48;
  *((_QWORD *)v7 + 1) = v5;
  v16[0] = 0;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(v16);
  v8 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v16[0] = v7;
  v16[1] = v8;
  v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    v10 = v16[0];
    v16[0] = 0;
    if (v10)
      (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v15);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSW_NS_19ThreadLikeAssertionEEUlS10_E_vJS10_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D4D48;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSW_NS_19ThreadLikeAssertionEEUlS10_E_vJS10_EED0Ev(WTF **a1)
{
  void *v2;

  *a1 = (WTF *)off_1E34D4D48;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSW_NS_19ThreadLikeAssertionEEUlS10_E_vJS10_EE4callES10_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _BYTE v40[17];
  int v41;
  uint64_t v42;
  __int128 v43;
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebKit::FrameTreeNodeData>(a2, (uint64_t)&v48);
    v5 = v75;
    if (v75)
    {
      v19 = v48;
      v6 = v49;
      v49 = 0;
      v20 = v6;
      v21 = v50;
      v22 = v51;
      LODWORD(v50) = v50 & 0xFFFFFFFE;
      v7 = v52;
      v52 = 0;
      v23 = v7;
      v24 = v53;
      v25 = v54;
      LODWORD(v53) = v53 & 0xFFFFFFFE;
      v26 = v55;
      v8 = v56;
      v56 = 0u;
      v27 = v8;
      *(_QWORD *)&v8 = v57;
      v57 = 0;
      v28 = v8;
      v9 = v58;
      v58 = 0;
      v29 = v9;
      *(_QWORD *)&v8 = v59;
      v59 = 0;
      v30 = v8;
      v10 = v60;
      v60 = 0;
      v31 = v10;
      *(_QWORD *)&v8 = v61;
      v61 = 0;
      v32 = v8;
      v34 = v63;
      v33 = v62;
      v11 = v64;
      v64 = 0u;
      v35 = v11;
      v38 = v67;
      v36 = v65;
      v37 = v66;
      v12 = v68;
      v65 = 0;
      v68 = 0;
      v39 = v12;
      v40[0] = 0;
      v41 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v40, (uint64_t)&v69);
      v13 = v73;
      v42 = v70;
      v44[0] = v72[0];
      *(_OWORD *)((char *)v44 + 14) = *(_OWORD *)((char *)v72 + 14);
      v43 = v71;
      v70 = 0;
      v73 = 0;
      v45 = v13;
      v14 = v74;
      v74 = 0;
      v5 = 1;
      v46 = v14;
    }
    else
    {
      LOBYTE(v19) = 0;
    }
    v47 = v5;
    std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48, v4);
    if (v47
      || (v16 = (void *)*a2, v17 = a2[1], *a2 = 0, a2[1] = 0, (v18 = a2[3]) != 0)
      && v17
      && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v18 + 16))(v18, v16), v47))
    {
      _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_ENKUlOS4_E_clESP_(*v2, (unint64_t)&v19);
      std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v15);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v16);
      _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSA_E_EEvOSU_(v2);
    }
  }
  else
  {
    _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSA_E_EEvOSU_((uint64_t *)(a1 + 8));
  }
}

void _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlOSA_E_EEvOSU_(uint64_t *a1)
{
  void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  char v6;
  __int16 v7;
  _BYTE v8[192];
  const void *v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[5];
  char v13;
  int v14;
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, 25);
  _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_ENKUlOS4_E_clESP_(*a1, (unint64_t)&v7);
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v2);
  v4 = (WTF::StringImpl *)v12[0];
  v12[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (DWORD2(v11) != -1)
    ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v11)])(&v6, &v10);
  DWORD2(v11) = -1;
  v5 = v9;
  v9 = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
}

__n128 _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_ENKUlOS4_E_clESP_(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v4 = *(_DWORD *)(a1 + 28);
  if (v4 == *(_DWORD *)(a1 + 24))
  {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(a1 + 16, a2);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16) + 312 * v4;
    *(_WORD *)v6 = *(_WORD *)a2;
    WTF::URL::URL(v6 + 8, (uint64_t *)(a2 + 8));
    WTF::URL::URL(v6 + 48, (uint64_t *)(a2 + 48));
    *(_QWORD *)(v6 + 88) = *(_QWORD *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 96) = v7;
    v8 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(v6 + 104) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *(_DWORD *)(v6 + 112) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *(_DWORD *)(v6 + 116) = v8;
    *(_QWORD *)(v6 + 120) = 0;
    *(_QWORD *)(v6 + 128) = 0;
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v6 + 120) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(v6 + 128) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *(_DWORD *)(v6 + 132) = v9;
    *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    v10 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(v6 + 136) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(v6 + 144) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(v6 + 148) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 152);
    *(_BYTE *)(v6 + 156) = *(_BYTE *)(a2 + 156);
    *(_DWORD *)(v6 + 152) = v10;
    v11 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v6 + 160) = v11;
    v12 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(v6 + 168) = v12;
    v13 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(v6 + 176) = v13;
    v14 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(v6 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(v6 + 184) = v14;
    v15 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *(_BYTE *)(v6 + 208) = 0;
    v6 += 208;
    *(_QWORD *)(v6 - 8) = v15;
    *(_DWORD *)(v6 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v6, a2 + 208);
    v16 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v6 + 32) = v16;
    result = *(__n128 *)(a2 + 248);
    v17 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v6 + 70) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v6 + 56) = v17;
    *(__n128 *)(v6 + 40) = result;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    v18 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(v6 + 88) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *(_DWORD *)(v6 + 96) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *(_DWORD *)(v6 + 100) = v18;
    ++*(_DWORD *)(a1 + 28);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  char v8;

  if (*(_BYTE *)(a1 + 312))
  {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 296, a2);
    v4 = *(WTF::StringImpl **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(unsigned int *)(a1 + 232);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v5])(&v8, a1 + 208);
    *(_DWORD *)(a1 + 232) = -1;
    v6 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2219;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4D70;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4D70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4D70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2234;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4D98;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4D98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4D98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4DC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4DC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::call(uint64_t a1, IPC::SharedBufferReference *this)
{
  const void *v3;
  WTF *v4;
  WebKit *v5;
  uint64_t v6;
  WebKit *v7;
  uint64_t v8;
  WebKit *v9;

  if (*((_BYTE *)this + 24))
  {
    v3 = (const void *)IPC::SharedBufferReference::span(this);
    API::Data::create(v4, v3, &v9);
    v5 = v9;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit *))(*(_QWORD *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v9;
    v9 = 0;
    if (v7)
      CFRelease(*((CFTypeRef *)v7 + 1));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4DE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4DE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::call(uint64_t a1, WebCore::SharedBuffer **a2)
{
  WebCore::SharedBuffer *v3;
  const void *v4;
  WebKit *v5;
  uint64_t v6;
  WebKit *v7;
  uint64_t v8;
  WebKit *v9;

  v3 = *a2;
  if (*a2)
  {
    v4 = (const void *)WebCore::SharedBuffer::data(*a2);
    API::Data::create(*((WTF **)v3 + 6), v4, &v9);
    v5 = v9;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit *))(*(_QWORD *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v9;
    v9 = 0;
    if (v7)
      CFRelease(*((CFTypeRef *)v7 + 1));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2238;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4E10;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4E10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4E10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2236;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D4E38;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4E38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4E38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[32];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v7, a2), !v8))
  {
    v7[0] = 0;
    v7[24] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_18;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v6;
    v20 = 0;
LABEL_18:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_19;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v5);
    goto LABEL_10;
  }
  if (!v9)
  {
    LOBYTE(v29) = 0;
    v31 = 0;
    LOBYTE(v25) = 0;
    v27 = 0;
    v28 = 1;
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v5);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<IPC::SharedBufferReference>(a2, (uint64_t)&v29);
  if (v31)
  {
    v11 = v29;
    v25 = v29;
    v27 = 1;
    v28 = 1;
    v24 = v30;
    v30 = 0u;
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
    *(_QWORD *)a1 = v11;
    v26 = 0u;
    *(_OWORD *)(a1 + 8) = v24;
    *(_BYTE *)(a1 + 24) = 1;
LABEL_8:
    *(_BYTE *)(a1 + 32) = 1;
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v12);
  }
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
LABEL_10:
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16 && v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34D4E60;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34D4E60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  _BYTE v5[40];

  v2 = a1 + 8;
  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v5, a2), !v5[32]))
  {
    v5[0] = 0;
    v5[24] = 0;
  }
  WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(v2, (IPC::SharedBufferReference *)v5);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

unsigned int *WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(uint64_t a1, IPC::SharedBufferReference *this)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int *result;
  WTF::StringImpl *v17;
  unsigned int *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *v21;

  if (*((_BYTE *)this + 24)
    && (IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, &v21), (v3 = v21) != 0))
  {
    if (byte_1ECE72D48 == 1)
    {
      v4 = (WTF::StringImpl *)qword_1ECE72D68;
    }
    else
    {
      WTF::WorkQueue::create();
      v4 = v17;
      qword_1ECE72D68 = (uint64_t)v17;
      byte_1ECE72D48 = 1;
    }
    WTF::String::isolatedCopy();
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v18 = v3;
    v19 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E34D4E88;
    v7[1] = v17;
    v8 = v18;
    v17 = 0;
    v18 = 0;
    v7[2] = v8;
    v9 = v19;
    v19 = 0;
    v7[3] = v9;
    v20 = v7;
    (*(void (**)(WTF::StringImpl *, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v19;
    v19 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v18;
    v18 = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v21;
    if (v21)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v10);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    LOWORD(v17) = 261;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v17);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34D4E88;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34D4E88;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WebCore::Archive *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  const WTF::String *v2;
  WTF::RunLoop *v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Archive *result;
  _QWORD *v10;
  uint64_t v11;
  char v12[16];
  int v13;
  WebCore::Archive *v14;

  v2 = (const WTF::String *)(a1 + 8);
  WebCore::LegacyWebArchive::create();
  v3 = (WTF::RunLoop *)WebCore::Archive::saveResourcesToDisk(v14, v2);
  if (v13)
  {
    if (v13 != 1)
    {
      v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WebCore::Archive *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v10);
    }
    v4 = 1;
    v5 = v12[0];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  WTF::RunLoop::main(v3);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E34D4EB0;
  *(_QWORD *)(v7 + 8) = v6;
  *(_WORD *)(v7 + 16) = v5 | (v4 << 8);
  v11 = v7;
  WTF::RunLoop::dispatch();
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v13 != -1)
    ((void (*)(uint64_t *, char *))off_1E34D4EC8[v13])(&v11, v12);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WebCore::Archive *)(*(uint64_t (**)(WebCore::Archive *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4EB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4EB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;
  __int16 v4;
  __int16 v5;

  if (*(_BYTE *)(a1 + 17))
  {
    v1 = *(unsigned __int8 *)(a1 + 16);
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v4 = v1 | 0x100;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 16))(v2, &v4);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v5 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 16))(v2, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12ArchiveErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2226;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4EE8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4EE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4EE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[32];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v7, a2), !v8))
  {
    v7[0] = 0;
    v7[24] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2233;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4F10;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4F10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4F10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[32];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v7, a2), !v8))
  {
    v7[0] = 0;
    v7[24] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2241;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D4F38;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D4F38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D4F38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[32];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v7, a2), !v8))
  {
    v7[0] = 0;
    v7[24] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D4F60;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D4F60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v3 - 8));
    WebKit::WebPageProxy::callAfterNextPresentationUpdate(v3 - 16, (uint64_t *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  char v15;
  IPC::Encoder *v16;

  v5 = **(unsigned int ***)(a1 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2487;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34D4FB0;
  v8[1] = v5;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    v10 = v14[0];
    v14[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEZZN6WebKit12WebPageProxy32updateRenderingWithForcedRepaintEONS_17CompletionHandlerIFvvEEEENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlST_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D4FB0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEZZN6WebKit12WebPageProxy32updateRenderingWithForcedRepaintEONS_17CompletionHandlerIFvvEEEENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlST_E_vJST_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D4FB0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::preferencesDidChange(void)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(v5 + 732);
  v7 = *(_QWORD *)(v5 + 224);
  v8 = v7 + 40;
  v9 = v7 + 64;
  if (v6)
  {
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 2302;
    *(_QWORD *)(v10 + 8) = a3;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v21 = (IPC::Encoder *)v10;
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v10, v8);
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v10, v9);
    LOBYTE(v19) = 0;
    v20 = 0;
    v11 = a2;
    v12 = 2;
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2301;
    *(_QWORD *)(v13 + 8) = a3;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v21 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v13, v8);
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>((IPC::Encoder *)v13, v9);
    LOBYTE(v19) = 0;
    v20 = 0;
    v11 = a2;
    v12 = 0;
  }
  WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v21, v12, (uint64_t)&v19, 1);
  if (v20)
  {
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didCreateMainFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5000;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didCreateMainFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5000;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didCreateMainFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didDestroyFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v3 = *(_QWORD *)(a2 + 144);
  if (v3 && v3 != *((_QWORD *)result + 1))
  {
    v6 = (uint64_t *)*((_QWORD *)result + 2);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2213;
    *(_QWORD *)(v7 + 8) = a3;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v14 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, v6);
    LOBYTE(v12) = 0;
    v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::UpdateFrameSize>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::UpdateFrameSize &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::UpdateFrameSize&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateFrameSize>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanUseCredentialStorage>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2377;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::forEachWebContentProcess(WTF::Function<void ()(WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)> &&)::$_0,void,WebKit::RemotePageProxy &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16));
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses(WebKit::WebFrameProxy &,WTF::String const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18[3];
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v5 = *(_QWORD *)(a2 + 136);
  if (v5)
    v6 = *(_DWORD *)(v5 + 108);
  else
    v6 = 0;
  v7 = *((_QWORD *)result + 1);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 16) + 136);
  if (v8)
    LODWORD(v8) = *(_DWORD *)(v8 + 108);
  if (v6 != (_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)result + 3);
    v10 = *(_OWORD *)(**((_QWORD **)result + 2) + 272);
    v16 = *(_OWORD *)(v7 + 272);
    v17 = v10;
    v18[0] = (uint64_t *)&v17;
    v18[1] = (uint64_t *)&v16;
    v18[2] = v9;
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 2149;
    *(_QWORD *)(v11 + 8) = a3;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v21 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v11, v18);
    LOBYTE(v19) = 0;
    v20 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v21, 0, (uint64_t)&v19, 1);
    if (v20)
    {
      v13 = v19;
      v19 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses(IPC::Connection &,WTF::URL const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v3 = *(_QWORD *)(a2 + 144);
  if (v3 && v3 != *((_QWORD *)result + 1))
  {
    v6 = (uint64_t *)*((_QWORD *)result + 2);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2276;
    *(_QWORD *)(v7 + 8) = a3;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v14 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v6);
    LOBYTE(v12) = 0;
    v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34D50C8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D50C8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_BYTE *)(a2 + 2) && WTF::URL::protocolIs())
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(*(WebKit::WebProcessProxy **)(a1 + 16), (const WTF::URL *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::ObjectImpl<(API::Object::Type)77>::type()
{
  return 77;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D5118;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D5118;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(uint64_t a1, unsigned int a2, uint64_t a3, char a4, _QWORD *a5, __int16 a6, int a7)
{
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  __n128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  WebKit *v47;
  WebKit *isFullWebBrowserOrRunningTest;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFTypeRef *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  const WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  const WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  __int128 v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  CFTypeRef v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  CFTypeRef v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  CFTypeRef *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const WTF::StringImpl *v105;
  const WTF::URL *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  __int128 v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  CFTypeRef v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  CFTypeRef v126;
  _BYTE buf[24];
  __int128 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  unsigned int v135;
  __int16 v136;
  _BOOL4 v137;
  __int16 v138;
  _BOOL4 v139;
  __int16 v140;
  int v141;
  CFTypeRef cf;
  _BYTE v143[24];
  int v144;
  WTF::StringImpl *v145;
  __int128 v146;
  _OWORD v147[11];
  char v148;
  uint64_t v149;
  _QWORD v150[4];
  __int16 v151;
  CFTypeRef v152;
  char v153[24];
  int v154;
  _DWORD *v155;
  __int128 v156;
  _OWORD v157[2];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  _DWORD *v163;
  __n128 v164;
  __int128 v165;
  __int16 v166;
  uint64_t v167;
  char v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 8);
  v14 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 136);
    if (v15)
      LODWORD(v15) = *(_DWORD *)(v15 + 108);
    v16 = *(_QWORD *)(v13 + 32);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD **)(v17 + 24);
    if (v18)
    {
      v18 = (_QWORD *)v18[1];
      if (v18)
      {
        if (v18[33] == v17)
        {
          LODWORD(v18) = 1;
        }
        else
        {
          v18 = (_QWORD *)v18[138];
          if (v18)
            LODWORD(v18) = v18[9] == v17;
        }
      }
    }
    v19 = *(_QWORD *)(v16 + 744);
    v20 = *(_QWORD *)(v16 + 1896);
    v21 = *(_QWORD *)(v17 + 272);
    v22 = *(_QWORD *)(a1 + 48);
    if (v22)
      v22 = *(_QWORD *)(v22 + 16);
    v23 = *a5 != 0;
    *(_DWORD *)buf = 134220544;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v128 = v20;
    WORD4(v128) = 1024;
    *(_DWORD *)((char *)&v128 + 10) = v15;
    HIWORD(v128) = 2048;
    v129 = v21;
    v130 = 1024;
    v131 = (int)v18;
    v132 = 2048;
    v133 = v22;
    v134 = 1024;
    v135 = a2;
    v136 = 1024;
    v137 = v23;
    v138 = 1024;
    v139 = (a6 & 0xFF00) != 0;
    v140 = 1024;
    v141 = a7;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: listener called: frameID=%llu, isMainFrame=%d, navigationID=%llu, policyAction=%u, safeBrowsingWarning=%d, isAppBoundDomain=%d, wasNavigationIntercepted=%d", buf, 0x58u);
  }
  v120 = a5;
  v24 = *(_QWORD *)(a1 + 48);
  if (a3)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  v25 = *(_QWORD *)(v24 + 3472);
  *(_QWORD *)(v24 + 3472) = a3;
  if (v25)
    CFRelease(*(CFTypeRef *)(v25 + 8));
  v150[0] = v13;
  v26 = *(_QWORD *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v26 + 8));
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  v150[1] = v26;
  v150[2] = v27;
  CFRetain(*(CFTypeRef *)(v28 + 8));
  v150[3] = v28;
  v151 = *(_WORD *)(a1 + 88);
  WebCore::ResourceRequest::ResourceRequest(&v152, (const WebCore::ResourceRequest *)(a1 + 96));
  v153[0] = 0;
  v154 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v153, a1 + 296);
  v29 = *(_DWORD **)(a1 + 328);
  if (v29)
    *v29 += 2;
  v30 = (__int128 *)(a1 + 336);
  v31 = *(_OWORD *)(a1 + 352);
  v156 = *(_OWORD *)(a1 + 336);
  v157[0] = v31;
  *(_OWORD *)((char *)v157 + 14) = *(_OWORD *)(a1 + 366);
  v32 = *(_QWORD *)(a1 + 40);
  v33 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  v155 = v29;
  v158 = v32;
  if (v33)
    CFRetain(*(CFTypeRef *)(v33 + 8));
  v34 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v159 = v33;
  v160 = v34;
  v161 = a7;
  v162 = a4;
  v35 = *(_DWORD **)(a1 + 384);
  if (v35)
    *v35 += 2;
  v36 = a1 + 384;
  v163 = v35;
  v37 = *(__n128 *)(a1 + 392);
  v38 = *(_OWORD *)(a1 + 408);
  v164 = v37;
  v165 = v38;
  LOBYTE(v166) = 0;
  v168 = 0;
  v39 = v120;
  if (*(_BYTE *)(a1 + 80))
  {
    v166 = *(_WORD *)(a1 + 64);
    v40 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v167 = v40;
    v168 = 1;
  }
  if (a2 != 2)
  {
    v41 = *(_QWORD *)(a1 + 32);
    v42 = *(_QWORD *)(v41 + 24);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 8);
      if (v43)
      {
        if (*(_QWORD *)(v43 + 264) == v41)
        {
          v45 = a1 + 384;
          v46 = 1;
LABEL_32:
          v47 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(a1 + 48) + 232));
          isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v47);
          if ((_DWORD)isFullWebBrowserOrRunningTest)
          {
            if (WebKit::hasProhibitedUsageStrings(isFullWebBrowserOrRunningTest))
            {
LABEL_34:
              v49 = 256;
LABEL_35:
              *(_WORD *)(v13 + 1256) = v49;
            }
LABEL_43:
            v51 = *(_QWORD *)(a1 + 32);
            v52 = *(_QWORD *)(v51 + 24);
            v36 = v45;
            if (v52)
            {
              v53 = *(_QWORD *)(v52 + 8);
              if (v53)
              {
                if (*(_QWORD *)(v53 + 264) == v51
                  || (v54 = *(_QWORD *)(v53 + 1104)) != 0 && *(_QWORD *)(v54 + 72) == v51)
                {
                  *(_WORD *)(v13 + 1258) = *(_WORD *)(v13 + 1256);
                }
              }
            }
            goto LABEL_49;
          }
          if ((a6 & 0xFF00) == 0)
          {
            if (*(_BYTE *)(v13 + 1257))
              *(_BYTE *)(v13 + 1257) = 0;
            goto LABEL_43;
          }
          if (*(_BYTE *)(v13 + 1260))
            goto LABEL_43;
          if (v46
            && (WebKit::shouldTreatURLProtocolAsAppBound(v47, (const WTF::URL *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 264) + 208) + 480)) & 1) != 0)
          {
            *(_BYTE *)(v13 + 1261) = 1;
            v50 = v45;
LABEL_69:
            v45 = v50;
            v49 = 257;
            goto LABEL_35;
          }
          v50 = v45;
          if (*(_BYTE *)(v13 + 1261))
          {
            if ((_BYTE)a6)
              goto LABEL_69;
            if (!v46)
              goto LABEL_34;
          }
          else if (!*(_BYTE *)(v13 + 1263))
          {
            goto LABEL_34;
          }
          v107 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(_QWORD *)(a1 + 48) + 232));
          WebKit::WebPageProxy::errorForUnpermittedAppBoundDomainNavigation(v107, (uint64_t)&v123);
          v108 = *(_QWORD *)(v13 + 72);
          *(_WORD *)buf = *(_WORD *)(a1 + 88);
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(a1 + 96));
          v143[0] = 0;
          v144 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v143, a1 + 296);
          v109 = *(WTF::StringImpl **)(a1 + 328);
          if (v109)
            *(_DWORD *)v109 += 2;
          v145 = v109;
          v110 = *v30;
          v147[0] = *(_OWORD *)(a1 + 352);
          *(_OWORD *)((char *)v147 + 14) = *(_OWORD *)(a1 + 366);
          v146 = v110;
          (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v108 + 64))(v108, v13, buf, *(_QWORD *)(a1 + 48), v50, &v123, 0);
          v112 = v145;
          v145 = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v111);
            else
              *(_DWORD *)v112 -= 2;
          }
          if (v144 != -1)
            ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v144])(&v122, v143);
          v144 = -1;
          v113 = cf;
          cf = 0;
          if (v113)
            CFRelease(v113);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
          v114 = qword_1ECE71320;
          if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
          {
            v115 = *(_QWORD *)(v13 + 32);
            v116 = *(_QWORD *)(v115 + 744);
            v117 = *(_QWORD *)(v115 + 1896);
            v118 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 136);
            if (v118)
              LODWORD(v118) = *(_DWORD *)(v118 + 108);
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v116;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&v128 = v117;
            WORD4(v128) = 1024;
            *(_DWORD *)((char *)&v128 + 10) = v118;
            _os_log_error_impl(&dword_196BCC000, v114, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it is attempting to navigate away from an app-bound domain or navigate after using restricted APIs", buf, 0x26u);
          }
          goto LABEL_94;
        }
        v44 = *(_QWORD *)(v43 + 1104);
        if (v44)
        {
          v45 = a1 + 384;
          v46 = *(_QWORD *)(v44 + 72) == v41;
          goto LABEL_32;
        }
      }
    }
    v45 = a1 + 384;
    v46 = 0;
    goto LABEL_32;
  }
LABEL_49:
  if (*(_BYTE *)(v13 + 1304))
    v37.n128_f64[0] = WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)v13);
  (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 424) + 264))(*(_QWORD *)(a1 + 424), v37);
  v55 = *v120;
  if (!*v120)
  {
    WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()((uint64_t)v150, (WTF::StringImpl *)a2);
    return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v150, v67);
  }
  v56 = *(_QWORD *)(a1 + 32);
  v57 = *(_QWORD *)(v56 + 24);
  if (!v57)
    goto LABEL_80;
  v58 = *(_QWORD *)(v57 + 8);
  if (v58)
  {
    if ((*(_QWORD *)(v58 + 264) == v56 || (v59 = *(_QWORD *)(v58 + 1104)) != 0 && *(_QWORD *)(v59 + 72) == v56)
      && (*(_BYTE *)(v55 + 16) & 1) != 0)
    {
      v119 = v36;
      v60 = *(_QWORD *)(v13 + 32);
      v61 = *(CFTypeRef **)(v60 + 960);
      v62 = v60;
      if (v61)
      {
        CFRetain(v61[1]);
        v62 = *(_QWORD *)(v13 + 32);
        v55 = *v120;
      }
      v123 = (WTF::StringImpl *)v61;
      v124 = (WTF::StringImpl *)(v60 + 944);
      ++*(_DWORD *)(v60 + 1316);
      *(_BYTE *)(v60 + 1312) = 1;
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      v64 = *(_DWORD **)(v55 + 8);
      if (v64)
        *v64 += 2;
      *(_QWORD *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      *(_QWORD *)(v62 + 1144) = v63;
      v66 = *(WTF::StringImpl **)(v62 + 1152);
      *(_QWORD *)(v62 + 1152) = v64;
      v36 = v119;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v65);
        else
          *(_DWORD *)v66 -= 2;
      }
      WTF::String::operator=((WTF::StringImpl **)(v62 + 1232), (WTF::StringImpl *)buf);
      *(_OWORD *)(v62 + 1240) = *(_OWORD *)&buf[8];
      *(_OWORD *)(v62 + 1256) = v128;
      v39 = v120;
      v70 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v68);
        else
          *(_DWORD *)v70 -= 2;
      }
      WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(_QWORD *)(v13 + 32) + 944), (uint64_t)v68, v69);
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v123, v71, v72);
      v56 = *(_QWORD *)(a1 + 32);
      v57 = *(_QWORD *)(v56 + 24);
      if (!v57)
        goto LABEL_80;
    }
  }
  v73 = *(_QWORD *)(v57 + 8);
  if (!v73 || *(_QWORD *)(v73 + 264) != v56 && ((v74 = *(_QWORD *)(v73 + 1104)) == 0 || *(_QWORD *)(v74 + 72) != v56))
  {
LABEL_80:
    WebKit::interruptedForPolicyChangeError((WebKit *)(*(_QWORD *)(a1 + 48) + 232), (uint64_t)&v123);
    v75 = *(_QWORD *)(v13 + 72);
    *(_WORD *)buf = *(_WORD *)(a1 + 88);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(a1 + 96));
    v143[0] = 0;
    v144 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v143, a1 + 296);
    v76 = *(WTF::StringImpl **)(a1 + 328);
    if (v76)
      *(_DWORD *)v76 += 2;
    v145 = v76;
    v77 = *v30;
    v147[0] = *(_OWORD *)(a1 + 352);
    *(_OWORD *)((char *)v147 + 14) = *(_OWORD *)(a1 + 366);
    v146 = v77;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v75 + 64))(v75, v13, buf, *(_QWORD *)(a1 + 48), v36, &v123, 0);
    v79 = v145;
    v145 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v78);
      else
        *(_DWORD *)v79 -= 2;
    }
    if (v144 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v144])(&v122, v143);
    v144 = -1;
    v80 = cf;
    cf = 0;
    if (v80)
      CFRelease(v80);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
    v81 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v82 = *(_QWORD *)(v13 + 32);
      v83 = *(_QWORD *)(v82 + 744);
      v84 = *(_QWORD *)(v82 + 1896);
      v85 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 136);
      if (v85)
        LODWORD(v85) = *(_DWORD *)(v85 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v83;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v128 = v84;
      WORD4(v128) = 1024;
      *(_DWORD *)((char *)&v128 + 10) = v85;
      _os_log_impl(&dword_196BCC000, v81, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: Ignoring request to load subframe resource because Safe Browsing found a match.", buf, 0x26u);
    }
LABEL_94:
    WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()((uint64_t)v150, (WTF::StringImpl *)2);
    v86 = v126;
    v126 = 0;
    if (v86)
      CFRelease(v86);
    v87 = v125;
    v125 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v67);
      else
        *(_DWORD *)v87 -= 2;
    }
    v88 = v124;
    v124 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v67);
      else
        *(_DWORD *)v88 -= 2;
    }
    v89 = v123;
    v123 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
        WTF::StringImpl::destroy(v89, v67);
      else
        *(_DWORD *)v89 -= 2;
    }
    return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v150, v67);
  }
  v90 = *(_QWORD *)(v13 + 32);
  v91 = *(CFTypeRef **)(v90 + 960);
  v92 = v90;
  if (v91)
  {
    CFRetain(v91[1]);
    v92 = *(_QWORD *)(v13 + 32);
  }
  v123 = (WTF::StringImpl *)v91;
  v124 = (WTF::StringImpl *)(v90 + 944);
  ++*(_DWORD *)(v90 + 1316);
  *(_BYTE *)(v90 + 1312) = 1;
  WTF::String::operator=((WTF::StringImpl **)(v92 + 1224), (WTF::StringImpl *)(*v39 + 48));
  v93 = *(_QWORD *)(a1 + 424);
  v94 = *v39;
  v95 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)buf = v13;
  *(_QWORD *)&buf[8] = v95;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted((uint64_t)&buf[16], (uint64_t)v150);
  v148 = a2;
  v96 = *(_QWORD *)(a1 + 424);
  (*(void (**)(uint64_t))(*(_QWORD *)v96 + 1584))(v96);
  v149 = v96;
  v97 = WTF::fastMalloc((WTF *)0x1D0);
  *(_QWORD *)v97 = off_1E34D5140;
  *(_QWORD *)(v97 + 8) = *(_QWORD *)buf;
  v98 = *(_QWORD *)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)(v97 + 16) = v98;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted(v97 + 24, (uint64_t)&buf[16]);
  *(_BYTE *)(v97 + 448) = v148;
  v99 = v149;
  v149 = 0;
  *(_QWORD *)(v97 + 456) = v99;
  v122 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v93 + 256))(v93, v94, &v122);
  v101 = v122;
  v122 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = v149;
  v149 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 1592))(v102);
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)&buf[16], v100);
  v103 = *(_QWORD *)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v103)
    CFRelease(*(CFTypeRef *)(v103 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 104) + 536))(*(_QWORD *)(v13 + 104));
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v123, v104, v105);
  return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v150, v67);
}

void WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef *v10;
  API::WebsitePolicies *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef *v25;
  WTF::StringImpl *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  CFTypeRef *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  API::WebsitePolicies *v33;
  API::WebsitePolicies *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t *v37;
  uint64_t v38;
  WebCore::SecurityOriginData *v39;
  const WTF::URL *v40;
  int v41;
  uint64_t v42;
  API::WebsitePolicies *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  const WTF::URL *v49;
  CFTypeRef v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  __int128 v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  uint64_t v58;
  const WTF::String *v59;
  char v60;
  CFTypeRef *v61;
  char v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  __int128 v65;
  API::WebsitePolicies *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL isLockdownModeExplicitlySet;
  _BOOL4 v71;
  CFTypeRef v72;
  WTF::StringImpl *v73;
  const void *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  WebKit::WebProcessPool *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  const char **v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  CFTypeRef *v96;
  uint64_t v97;
  _DWORD *v98;
  __int128 v99;
  WTF::StringImpl *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  CFTypeRef *v108;
  CFTypeRef *v109;
  WebKit::WebsiteDataStore *v110;
  CFTypeRef *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  int v118;
  _BYTE *v119;
  uint64_t v120;
  const char **v121;
  char v122;
  CFTypeRef *v123;
  char v124;
  _BYTE buf[24];
  __int128 v126;
  uint64_t v127;
  __int16 v128;
  int v129;
  __int16 v130;
  __int128 v131;
  __int16 v132;
  uint64_t v133;
  char v134;
  char v135;
  CFTypeRef *v136;
  CFTypeRef cf;
  CFTypeRef v138;
  _BYTE v139[24];
  int v140;
  WTF::StringImpl *v141;
  __int128 v142;
  _OWORD v143[2];
  _BYTE v144[24];
  __int128 v145;
  WTF::StringImpl *v146;
  const void *v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 264) == v5 || (v8 = *(_QWORD *)(v7 + 1104)) != 0 && *(_QWORD *)(v8 + 72) == v5)
      {
        v9 = *(_QWORD *)(a1 + 336);
        v10 = *(CFTypeRef **)(v9 + 3472);
        if (v10)
          goto LABEL_10;
        v11 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(_QWORD *)(v4 + 48) + 56));
        API::WebsitePolicies::copy(v11, (API::WebsitePolicies **)buf);
        v12 = *(_QWORD *)(v9 + 3472);
        *(_QWORD *)(v9 + 3472) = *(_QWORD *)buf;
        if (v12)
          CFRelease(*(CFTypeRef *)(v12 + 8));
        v10 = *(CFTypeRef **)(*(_QWORD *)(a1 + 336) + 3472);
        if (v10)
        {
LABEL_10:
          CFRetain(v10[1]);
          v13 = *(_QWORD *)(a1 + 336);
          *(_BYTE *)(v13 + 3401) = WebKit::WebPageProxy::effectiveContentModeAfterAdjustingPolicies((WebKit::WebPageProxy *)v4, (API::WebsitePolicies *)v10, (const WebCore::ResourceRequest *)(v13 + 232));
          CFRelease(v10[1]);
        }
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 336);
  v15 = *(_BYTE *)(a1 + 353) != 0;
  v16 = *(_QWORD *)(a1 + 24);
  v120 = *(_QWORD *)(a1 + 16);
  v118 = *(unsigned __int8 *)(a1 + 352);
  v17 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 208) + 136);
    if (v18)
      LODWORD(v18) = *(_DWORD *)(v18 + 108);
    v19 = *(_QWORD *)(v4 + 32);
    v20 = *(_QWORD **)(v16 + 24);
    if (v20)
    {
      v20 = (_QWORD *)v20[1];
      if (v20)
      {
        if (v20[33] == v16)
        {
          LODWORD(v20) = 1;
        }
        else
        {
          v20 = (_QWORD *)v20[138];
          if (v20)
            LODWORD(v20) = v20[9] == v16;
        }
      }
    }
    v21 = *(_QWORD *)(v19 + 744);
    v22 = *(_QWORD *)(v19 + 1896);
    v23 = *(_QWORD *)(v16 + 272);
    if (v14)
      v24 = *(_QWORD *)(v14 + 16);
    else
      v24 = 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v21;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&v126 = v22;
    WORD4(v126) = 1024;
    *(_DWORD *)((char *)&v126 + 10) = v18;
    HIWORD(v126) = 2048;
    v127 = v23;
    v128 = 1024;
    v129 = (int)v20;
    v130 = 2048;
    *(_QWORD *)&v131 = v24;
    WORD4(v131) = 1024;
    *(_DWORD *)((char *)&v131 + 10) = (_DWORD)a2;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: frameID=%llu, isMainFrame=%d, navigationID=%llu, policyAction=%u", buf, 0x46u);
  }
  v25 = *(CFTypeRef **)(v4 + 264);
  CFRetain(v25[1]);
  v123 = v25;
  v28 = *(_QWORD *)(v14 + 3472);
  if (v28)
  {
    CFRetain(*(CFTypeRef *)(v28 + 8));
    v29 = *(CFTypeRef **)(v28 + 136);
    if (v29)
      v30 = v29 == v25;
    else
      v30 = 1;
    v31 = !v30;
    if (!v30)
    {
      CFRetain(v29[1]);
      v123 = v29;
      CFRelease(v25[1]);
      v15 = 1;
      v25 = v29;
    }
    v32 = *(_QWORD *)(v28 + 144);
    if (v32 && v32 != *(_QWORD *)(v4 + 232))
      v15 = 1;
    CFRelease(*(CFTypeRef *)(v28 + 8));
  }
  else
  {
    v31 = 0;
  }
  if (!*(_BYTE *)(v14 + 3400))
  {
    v33 = *(API::WebsitePolicies **)(v14 + 3472);
    if (!v33)
    {
      v34 = (API::WebsitePolicies *)API::Object::newObject(0xA8uLL, 123);
      v33 = API::WebsitePolicies::WebsitePolicies(v34);
      v35 = *(_QWORD *)(v14 + 3472);
      *(_QWORD *)(v14 + 3472) = v33;
      if (v35)
      {
        CFRelease(*(CFTypeRef *)(v35 + 8));
        v33 = *(API::WebsitePolicies **)(v14 + 3472);
      }
    }
    *((_BYTE *)v33 + 104) = 0;
    v36 = (WTF::StringImpl **)*((_QWORD *)v33 + 14);
    *((_QWORD *)v33 + 14) = 0;
    if (v36)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v26);
  }
  v37 = (uint64_t *)(a1 + 328);
  v38 = *(_QWORD *)(v14 + 3472);
  if (!v38 || *(_BYTE *)(v38 + 131) == 2)
  {
    v39 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v14 + 232));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v39, v40);
    v41 = WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission((WebKit::WebDeviceOrientationAndMotionAccessController *)(v25 + 46), (const WebCore::SecurityOriginData *)buf);
    if ((_DWORD)v126 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v126])(v144, buf);
    if (v41 != 2)
    {
      v42 = *(_QWORD *)(v14 + 3472);
      if (v42)
        goto LABEL_52;
      v42 = API::Object::newObject(0xA8uLL, 123);
      v43 = API::WebsitePolicies::WebsitePolicies((API::WebsitePolicies *)v42);
      v44 = *(_QWORD *)(v14 + 3472);
      *(_QWORD *)(v14 + 3472) = v43;
      if (v44)
      {
        CFRelease(*(CFTypeRef *)(v44 + 8));
        v42 = *(_QWORD *)(v14 + 3472);
      }
      if (v42)
      {
LABEL_52:
        CFRetain(*(CFTypeRef *)(v42 + 8));
        *(_BYTE *)(v42 + 131) = v41;
        CFRelease(*(CFTypeRef *)(v42 + 8));
      }
      else
      {
        MEMORY[0x83] = v41;
      }
    }
  }
  v45 = (uint64_t *)(a1 + 344);
  if ((_DWORD)a2)
    goto LABEL_54;
  v56 = *(_QWORD *)(v4 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v56 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v27) & 1) == 0)
  {
    v67 = *(_QWORD *)(v16 + 24);
    if (!v67
      || (v68 = *(_QWORD *)(v67 + 8)) == 0
      || *(_QWORD *)(v68 + 264) != v16 && ((v69 = *(_QWORD *)(v68 + 1104)) == 0 || *(_QWORD *)(v69 + 72) != v16))
    {
LABEL_54:
      v46 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 976);
      v47 = *(_QWORD *)(v14 + 3472);
      if (v47)
      {
        CFRetain(*(CFTypeRef *)(v47 + 8));
        CFRetain(*(CFTypeRef *)(v47 + 8));
      }
      *(_QWORD *)buf = v47;
      LOBYTE(v121) = 0;
      v122 = 0;
      WebKit::WebPageProxy::receivedPolicyDecision(v4, a2, v14, (API::WebsitePolicies **)buf, (_QWORD *)(a1 + 344), 0, (uint64_t)&v121, (__int16 *)(a1 + 400), (uint64_t *)(a1 + 328));
      if (v122)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v121);
      if (v47)
      {
        CFRelease(*(CFTypeRef *)(v47 + 8));
        CFRelease(*(CFTypeRef *)(v47 + 8));
      }
      if ((_DWORD)a2 == 2 && v118 && *(_QWORD *)(v14 + 16) == v46)
      {
        v48 = qword_1ECE71320;
        if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
        {
          v113 = *(_QWORD *)(v4 + 32);
          v114 = *(_QWORD *)(v113 + 744);
          v115 = *(_QWORD *)(v113 + 1896);
          v116 = *(_QWORD *)(*(_QWORD *)(v4 + 208) + 136);
          if (v116)
            LODWORD(v116) = *(_DWORD *)(v116 + 108);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = v4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v114;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&v126 = v115;
          WORD4(v126) = 1024;
          *(_DWORD *)((char *)&v126 + 10) = v116;
          _os_log_error_impl(&dword_196BCC000, v48, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: Failing navigation because decision was intercepted and policy action is Ignore.", buf, 0x26u);
        }
        v49 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v14 + 232));
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, v49, 0);
        cf = 0;
        WebKit::cancelledError((WebKit *)buf, (uint64_t)v144);
        v50 = cf;
        cf = 0;
        if (v50)
          CFRelease(v50);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
        WebCore::ResourceErrorBase::setType();
        v51 = *(_QWORD *)(v4 + 72);
        *(_WORD *)buf = *(_WORD *)(a1 + 32);
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(a1 + 40));
        v139[0] = 0;
        v140 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v139, a1 + 240);
        v52 = *(WTF::StringImpl **)(a1 + 272);
        if (v52)
          *(_DWORD *)v52 += 2;
        v141 = v52;
        v53 = *(_OWORD *)(a1 + 280);
        v143[0] = *(_OWORD *)(a1 + 296);
        *(_OWORD *)((char *)v143 + 14) = *(_OWORD *)(a1 + 310);
        v142 = v53;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v51 + 64))(v51, v4, buf, v14, a1 + 360, v144, 0);
        v55 = v141;
        v141 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
        if (v140 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v140])(&v124, v139);
        v140 = -1;
        v72 = v138;
        v138 = 0;
        if (v72)
          CFRelease(v72);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
        v74 = v147;
        v147 = 0;
        if (v74)
          CFRelease(v74);
        v75 = v146;
        v146 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v73);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = *(WTF::StringImpl **)&v144[8];
        *(_QWORD *)&v144[8] = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v73);
          else
            *(_DWORD *)v76 -= 2;
        }
        v77 = *(WTF::StringImpl **)v144;
        *(_QWORD *)v144 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v73);
          else
            *(_DWORD *)v77 -= 2;
        }
      }
      goto LABEL_134;
    }
  }
  v58 = *(_QWORD *)(v4 + 224);
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v58 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, v57)|| (*(_BYTE *)(*v45 + 304) == 3 ? (v60 = 1) : (v60 = v31), (v60 & 1) != 0))
  {
    v61 = 0;
    v62 = 0;
    goto LABEL_82;
  }
  v78 = *(_QWORD *)(v14 + 496);
  if (v78
    && WebCore::MIMETypeRegistry::isWebArchiveMIMEType((WebCore::MIMETypeRegistry *)(v78 + 16), v59))
  {
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(_QWORD *)(v14 + 496) + 32));
LABEL_144:
    v101 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v102 = *(_QWORD *)(v4 + 32);
      v103 = *(_QWORD *)(v102 + 744);
      v104 = *(_QWORD *)(v102 + 1896);
      v105 = *(_QWORD *)(*(_QWORD *)(v4 + 208) + 136);
      if (v105)
        LODWORD(v105) = *(_DWORD *)(v105 + 108);
      *(_DWORD *)v144 = 134218752;
      *(_QWORD *)&v144[4] = v4;
      *(_WORD *)&v144[12] = 2048;
      *(_QWORD *)&v144[14] = v103;
      *(_WORD *)&v144[22] = 2048;
      *(_QWORD *)&v145 = v104;
      WORD4(v145) = 1024;
      *(_DWORD *)((char *)&v145 + 10) = v105;
      _os_log_impl(&dword_196BCC000, v101, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: Swapping in non-persistent websiteDataStore for web archive.", v144, 0x26u);
    }
    v106 = *(_QWORD *)(v14 + 464);
    if (v106)
    {
      v107 = *(_QWORD *)(v106 + 24);
      if (v107)
      {
        CFRetain(*(CFTypeRef *)(v107 + 8));
        CFRelease(*(CFTypeRef *)(v107 + 8));
        v108 = *(CFTypeRef **)(*(_QWORD *)(v14 + 464) + 24);
        if (v108)
          CFRetain(v108[1]);
        CFRetain(v108[1]);
        v109 = v123;
        v123 = v108;
        if (v109)
          CFRelease(v109[1]);
        CFRelease(v108[1]);
        v61 = 0;
        v62 = 1;
        goto LABEL_168;
      }
    }
    WebKit::WebsiteDataStore::createNonPersistent((WebKit::WebsiteDataStore **)v144);
    v61 = v123;
    if (v123)
    {
      CFRetain(v123[1]);
      v123 = *(CFTypeRef **)v144;
      CFRelease(v61[1]);
    }
    else
    {
      v123 = *(CFTypeRef **)v144;
    }
    v62 = 1;
    goto LABEL_167;
  }
  v97 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v14 + 232));
  v98 = *(_DWORD **)v97;
  if (*(_QWORD *)v97)
    *v98 += 2;
  *(_QWORD *)buf = v98;
  v99 = *(_OWORD *)(v97 + 24);
  *(_OWORD *)&buf[8] = *(_OWORD *)(v97 + 8);
  v126 = v99;
  if (WTF::URL::protocolIs() && *(_QWORD *)buf && WTF::StringImpl::endsWith())
    goto LABEL_144;
  v110 = *(WebKit::WebsiteDataStore **)(v4 + 272);
  if (!v110)
  {
    v61 = 0;
    v62 = 0;
    goto LABEL_168;
  }
  *(_QWORD *)(v4 + 272) = 0;
  v111 = v123;
  v123 = (CFTypeRef *)v110;
  if (v111)
  {
    CFRelease(v111[1]);
    v112 = *(_QWORD *)(v4 + 272);
    *(_QWORD *)(v4 + 272) = 0;
    if (v112)
      CFRelease(*(CFTypeRef *)(v112 + 8));
  }
  v61 = 0;
  v62 = 0;
LABEL_167:
  v15 = 1;
LABEL_168:
  v117 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v100);
    else
      *(_DWORD *)v117 -= 2;
  }
LABEL_82:
  v63 = (WTF::StringImpl **)WTF::URL::URL((uint64_t)v144, (WTF::StringImpl **)(*(_QWORD *)(v4 + 32) + 1000));
  v64 = *(_QWORD *)(v4 + 1120);
  if (v64 && *(_QWORD *)(v64 + 88) == *(_QWORD *)(v14 + 16))
  {
    WTF::String::operator=(v63, (WTF::StringImpl *)(v64 + 312));
    v65 = *(_OWORD *)(v64 + 336);
    *(_OWORD *)&v144[8] = *(_OWORD *)(v64 + 320);
    v145 = v65;
  }
  v119 = (_BYTE *)(a1 + 32);
  v66 = *(API::WebsitePolicies **)(v14 + 3472);
  if (v66 && *((_BYTE *)v66 + 153))
  {
    *(_BYTE *)(v4 + 1291) = 1;
LABEL_95:
    v71 = API::WebsitePolicies::lockdownModeEnabled(v66);
    goto LABEL_119;
  }
  isLockdownModeExplicitlySet = API::PageConfiguration::isLockdownModeExplicitlySet(*(API::PageConfiguration **)(v4 + 48));
  v66 = *(API::WebsitePolicies **)(v14 + 3472);
  *(_BYTE *)(v4 + 1291) = isLockdownModeExplicitlySet;
  if (v66)
    goto LABEL_95;
  v71 = API::PageConfiguration::lockdownModeEnabled(*(API::PageConfiguration **)(v4 + 48));
LABEL_119:
  v79 = v71;
  *(_QWORD *)buf = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(_QWORD *)&buf[8] = v4;
  buf[16] = 0;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  v80 = *v45;
  *v45 = 0;
  *(_QWORD *)&v126 = v14;
  *((_QWORD *)&v126 + 1) = v80;
  v81 = *v37;
  *v37 = 0;
  v127 = v81;
  LOBYTE(v128) = v15;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  *(_QWORD *)&v131 = v16;
  v82 = (unsigned int *)(v120 + 16);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 + 1, v82));
  LOBYTE(v132) = 0;
  v134 = 0;
  v84 = *(unsigned __int8 *)(a1 + 416);
  if (*(_BYTE *)(a1 + 416))
  {
    v132 = *(_WORD *)(a1 + 400);
    v85 = *(_QWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 408) = 0;
    v133 = v85;
    v134 = 1;
  }
  v135 = v62;
  if (v61)
    CFRetain(v61[1]);
  v136 = v61;
  v86 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v4 + 48) + 24));
  v87 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v87 = off_1E34D4960;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)buf;
  v88 = *(_QWORD *)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)(v87 + 16) = v88;
  *(_BYTE *)(v87 + 24) = buf[16];
  *(_QWORD *)(v87 + 32) = v126;
  v89 = *((_QWORD *)&v126 + 1);
  v126 = 0u;
  *(_QWORD *)(v87 + 40) = v89;
  v90 = v127;
  v127 = 0;
  *(_QWORD *)(v87 + 48) = v90;
  *(_BYTE *)(v87 + 56) = v128;
  *(_QWORD *)(v87 + 64) = v131;
  v131 = 0u;
  *(_QWORD *)(v87 + 72) = v120;
  *(_BYTE *)(v87 + 80) = 0;
  *(_BYTE *)(v87 + 96) = 0;
  if (v84)
  {
    *(_WORD *)(v87 + 80) = v132;
    v91 = v133;
    v133 = 0;
    *(_QWORD *)(v87 + 88) = v91;
    *(_BYTE *)(v87 + 96) = 1;
  }
  *(_BYTE *)(v87 + 104) = v62;
  v136 = 0;
  *(_QWORD *)(v87 + 112) = v61;
  v121 = (const char **)v87;
  WebKit::WebProcessPool::processForNavigation(v86, v4, v16, v14, (uint64_t)v144, v15, v79, v119, (WebKit::WebsiteDataStore **)&v123, (uint64_t *)&v121);
  v93 = v121;
  v121 = 0;
  if (v93)
    (*((void (**)(const char **))*v93 + 1))(v93);
  WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(buf, v92);
  v95 = *(WTF::StringImpl **)v144;
  *(_QWORD *)v144 = 0;
  if (!v95)
  {
LABEL_132:
    if (!v61)
      goto LABEL_134;
    goto LABEL_133;
  }
  if (*(_DWORD *)v95 != 2)
  {
    *(_DWORD *)v95 -= 2;
    goto LABEL_132;
  }
  WTF::StringImpl::destroy(v95, v94);
  if (v61)
LABEL_133:
    CFRelease(v61[1]);
LABEL_134:
  v96 = v123;
  v123 = 0;
  if (v96)
    CFRelease(v96[1]);
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2 + 32;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v8 = a1 + 32;
  WTF::URL::URL(a1 + 40, (uint64_t *)(a2 + 40));
  WTF::URL::URL(a1 + 80, (uint64_t *)(v7 + 48));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v7 + 88);
  v9 = *(_QWORD *)(v7 + 96);
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v9;
  v10 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(a1 + 136) = v10;
  LODWORD(v10) = *(_DWORD *)(v7 + 112);
  *(_DWORD *)(v7 + 112) = 0;
  *(_DWORD *)(a1 + 144) = v10;
  LODWORD(v10) = *(_DWORD *)(v7 + 116);
  *(_DWORD *)(v7 + 116) = 0;
  *(_DWORD *)(a1 + 148) = v10;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v11 = *(_QWORD *)(v7 + 120);
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(a1 + 152) = v11;
  LODWORD(v11) = *(_DWORD *)(v7 + 128);
  *(_DWORD *)(v7 + 128) = 0;
  *(_DWORD *)(a1 + 160) = v11;
  LODWORD(v11) = *(_DWORD *)(v7 + 132);
  *(_DWORD *)(v7 + 132) = 0;
  *(_DWORD *)(a1 + 164) = v11;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v12 = *(_QWORD *)(v7 + 136);
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(a1 + 168) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 144);
  *(_DWORD *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 176) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 148);
  *(_DWORD *)(v7 + 148) = 0;
  *(_DWORD *)(a1 + 180) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 152);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(v7 + 156);
  *(_DWORD *)(a1 + 184) = v12;
  v13 = *(_QWORD *)(v7 + 160);
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *(_QWORD *)(v7 + 168);
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(a1 + 200) = v14;
  v15 = *(_QWORD *)(v7 + 176);
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(a1 + 208) = v15;
  v16 = *(_QWORD *)(v7 + 184);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(v7 + 192);
  *(_QWORD *)(a1 + 216) = v16;
  v17 = *(_QWORD *)(v7 + 200);
  *(_QWORD *)(v7 + 200) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = v17;
  *(_DWORD *)(a1 + 264) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 240, v7 + 208);
  v18 = *(_QWORD *)(v7 + 240);
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(a1 + 272) = v18;
  v19 = *(_OWORD *)(v7 + 248);
  v20 = *(_OWORD *)(v7 + 264);
  *(_OWORD *)(v8 + 278) = *(_OWORD *)(v7 + 278);
  *(_OWORD *)(v8 + 264) = v20;
  *(_OWORD *)(v8 + 248) = v19;
  v21 = *(_QWORD *)(v7 + 296);
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(a1 + 328) = v21;
  v22 = *(_QWORD *)(v7 + 304);
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(a1 + 336) = v22;
  v23 = *(_QWORD *)(v7 + 312);
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(a1 + 344) = v23;
  *(_WORD *)(a1 + 352) = *(_WORD *)(v7 + 320);
  WTF::URL::URL(a1 + 360, (uint64_t *)(v7 + 328));
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(v7 + 384))
  {
    *(_WORD *)(a1 + 400) = *(_WORD *)(a2 + 400);
    v24 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(a1 + 408) = v24;
    *(_BYTE *)(a1 + 416) = 1;
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100](a1 + 400, a2);
  v4 = *(WTF::StringImpl **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(WTF::StringImpl **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(unsigned int *)(a1 + 264);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v9])(&v15, a1 + 240);
  *(_DWORD *)(a1 + 264) = -1;
  v10 = *(const void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 40));
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_19SafeBrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34D5140;
  v3 = a1[57];
  a1[57] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)(a1 + 3), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_19SafeBrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34D5140;
  v3 = *((_QWORD *)a1 + 57);
  *((_QWORD *)a1 + 57) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)a1 + 24, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v4);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_19SafeBrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEE4callES1B_(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD v14[2];
  WTF::StringImpl *v15[6];
  WTF::StringImpl **v16;

  v4 = (WTF::StringImpl *)a1[1];
  v5 = *((_QWORD *)v4 + 4);
  v6 = *(_QWORD *)(v5 + 960);
  v7 = v5;
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *((_QWORD *)v4 + 4);
  }
  v14[0] = v6;
  v14[1] = v5 + 944;
  ++*(_DWORD *)(v5 + 1316);
  *(_BYTE *)(v5 + 1312) = 1;
  v15[0] = 0;
  WTF::String::operator=((WTF::StringImpl **)(v7 + 1224), (WTF::StringImpl *)v15);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v15[2] = v4;
  v15[3] = (WTF::StringImpl *)(a1 + 2);
  v15[4] = (WTF::StringImpl *)(a1 + 3);
  v15[5] = (WTF::StringImpl *)(a1 + 56);
  v15[0] = (WTF::StringImpl *)(a1 + 3);
  v15[1] = v4;
  v10 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v10 == -1)
  {
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS8_3RefINSA_15WebProcessProxyENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEERNSA_13WebFrameProxyEONSA_20NavigationActionDataEONS8_17CompletionHandlerIFvONSA_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENSA_28ProcessSwapRequestedByClientEONS8_6RefPtrINSA_19SafeBrowsingWarningENSE_IS12_EENSG_IS12_EEEENS_8optionalINSA_26NavigatingToAppBoundDomainEEENSA_24WasNavigationInterceptedEENUlOT_E_clINS_7variantIJNSA_18ContinueUnsafeLoadENS8_3URLEEEEEEDaS1C_EUlRKS1H_E_JZZZNSB_31decidePolicyForNavigationActionESJ_SL_SN_ST_ENSU_clESW_SZ_S10_S16_S19_S1A_ENS1E_IS1I_EES1J_S1C_EUlS1G_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJS1G_S1H_EEEEEEDcS1B_DpT0_(v13);
  }
  else
  {
    v16 = v15;
    ((void (*)(WTF::StringImpl ***, uint64_t))off_1E34D5158[v10])(&v16, a2);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v14, v11, v12);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS8_3RefINSA_15WebProcessProxyENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEERNSA_13WebFrameProxyEONSA_20NavigationActionDataEONS8_17CompletionHandlerIFvONSA_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENSA_28ProcessSwapRequestedByClientEONS8_6RefPtrINSA_19SafeBrowsingWarningENSE_IS12_EENSG_IS12_EEEENS_8optionalINSA_26NavigatingToAppBoundDomainEEENSA_24WasNavigationInterceptedEENUlOT_E_clINS_7variantIJNSA_18ContinueUnsafeLoadENS8_3URLEEEEEEDaS1C_EUlRKS1H_E_JZZZNSB_31decidePolicyForNavigationActionESJ_SL_SN_ST_ENSU_clESW_SZ_S10_S16_S19_S1A_ENS1E_IS1I_EES1J_S1C_EUlS1G_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJS1G_S1H_EEEEEEDcS1B_DpT0_(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if (*a2)
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = **(unsigned __int8 **)(v2 + 40);
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 16);
    if (!*(_BYTE *)(v5 + 1049))
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 104) + 64))(*(_QWORD *)(v5 + 104), **(_QWORD **)(v2 + 24));
    v3 = *(_QWORD *)(v2 + 32);
    v4 = 2;
  }
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(v3, (WTF::StringImpl *)v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS8_3RefINSA_15WebProcessProxyENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEERNSA_13WebFrameProxyEONSA_20NavigationActionDataEONS8_17CompletionHandlerIFvONSA_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENSA_28ProcessSwapRequestedByClientEONS8_6RefPtrINSA_19SafeBrowsingWarningENSE_IS12_EENSG_IS12_EEEENS_8optionalINSA_26NavigatingToAppBoundDomainEEENSA_24WasNavigationInterceptedEENUlOT_E_clINS_7variantIJNSA_18ContinueUnsafeLoadENS8_3URLEEEEEEDaS1C_EUlRKS1H_E_JZZZNSB_31decidePolicyForNavigationActionESJ_SL_SN_ST_ENSU_clESW_SZ_S10_S16_S19_S1A_ENS1E_IS1I_EES1J_S1C_EUlS1G_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJS1G_S1H_EEEEEEDcS1B_DpT0_(uint64_t **a1, const WTF::URL *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  _BYTE v5[192];
  CFTypeRef cf;
  uint64_t v7;

  v3 = (*a1)[1];
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(**a1, (WTF::StringImpl *)2);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v5, a2, 0);
  cf = 0;
  WebKit::WebPageProxy::loadRequest(v3, (WebCore::ResourceRequestBase *)v5, 1, 0, &v7);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = off_1E34D5178;
  WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref((WTF **)(a1 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(WTF **a1, void *a2)
{
  void *v3;

  *a1 = (WTF *)off_1E34D5178;
  WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34D51A0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D51A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(_QWORD *a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  __int16 v6;
  WTF::StringImpl *v7;
  char v8;
  const char **v9;
  char v10;
  API::WebsitePolicies *v11;

  if (a4)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a1[1];
    v11 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    LOBYTE(v6) = 0;
    v8 = 0;
    WebKit::WebPageProxy::receivedPolicyDecision(v4, a2, 0, &v11, a1 + 4, 0, (uint64_t)&v9, &v6, a1 + 3);
    if (v8 && v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (v10)
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v9);
  }
}

void API::NavigationResponse::~NavigationResponse(API::NavigationResponse *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::NavigationResponse *)((char *)this + 224), a2);
  v5 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationResponse *)((char *)this + 24));
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::NavigationResponse *)((char *)this + 224), a2);
  v5 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationResponse *)((char *)this + 24));
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)79>::type()
{
  return 79;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,unsigned long long,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = off_1E34D51F0;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 7);
  v3 = (const void *)a1[31];
  a1[31] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[5];
  a1[5] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,unsigned long long,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E34D51F0;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 7);
  v3 = (const void *)a1[31];
  a1[31] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  v7 = a1[4];
  a1[4] = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,unsigned long long,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(_QWORD *a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v6;
  WebCore::MIMETypeRegistry *v7;
  const WTF::String *v8;
  WebCore::MIMETypeRegistry *v9;
  const WTF::String *v10;
  WebCore::PreviewConverter *v11;
  const WTF::String *v12;
  WebCore::PreviewConverter *v13;
  const WTF::String *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WebKit::WebProcessPool *v31;
  char v32;
  unsigned __int8 v33;
  WebKit::WebsiteDataStore *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  CFTypeRef v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  const WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _QWORD v57[2];
  char v58;
  _BYTE buf[24];
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  char v65;
  const char **v66;
  char v67;
  char v68;
  WTF::StringImpl *v69;
  char v70;
  CFTypeRef cf;
  __int128 v72;
  __int128 v73;
  WTF::StringImpl *v74[10];

  v74[7] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a4)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  v4 = (int)a2;
  v6 = a1[1];
  if (!(_DWORD)a2)
  {
    if (*(_BYTE *)(a1[5] + 779))
    {
      v7 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1[6] + 224));
      if ((WebCore::MIMETypeRegistry::isPDFMIMEType(v7, v8) & 1) != 0
        || (v9 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1[6] + 224)),
            (WebCore::MIMETypeRegistry::isSupportedModelMIMEType(v9, v10) & 1) != 0)
        || (v11 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1[6] + 224)),
            (WebCore::PreviewConverter::supportsMIMEType(v11, v12) & 1) != 0))
      {
        v4 = 1;
        goto LABEL_15;
      }
    }
    v13 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1[6] + 224));
    if (!WebCore::PreviewConverter::supportsMIMEType(v13, v14))
    {
LABEL_14:
      v4 = 0;
      goto LABEL_15;
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 208) + 144) + 352))
    {
      xpc_connection_get_audit_token();
      v15 = sandbox_enable_state_flag();
      v16 = qword_1ECE71780;
      v4 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v17 = *(_QWORD *)(v6 + 32);
      v18 = *(_QWORD *)(v17 + 744);
      v19 = *(_QWORD *)(v17 + 1896);
      v20 = *(_QWORD *)(*(_QWORD *)(v6 + 208) + 136);
      if (v20)
        LODWORD(v20) = *(_DWORD *)(v20 + 108);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 2048;
      v60 = v19;
      v61 = 1024;
      v62 = v20;
      v63 = 1024;
      v64 = v15;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Enabling EnableQuickLookSandboxResources state flag, status = %d", buf, 0x2Cu);
      goto LABEL_14;
    }
LABEL_78:
    __break(1u);
  }
LABEL_15:
  if (!*(_BYTE *)(v6 + 729) && *(_BYTE *)(v6 + 728))
  {
    v24 = a1[4];
    v25 = *(_QWORD *)(v6 + 32);
    v26 = *(_QWORD *)(v25 + 960);
    if (v26)
      CFRetain(*(CFTypeRef *)(v26 + 8));
    v57[0] = v26;
    v57[1] = v25 + 944;
    ++*(_DWORD *)(v25 + 1316);
    if (v4 == 2 && v24)
    {
      v27 = *(_QWORD **)(v6 + 32);
      if (*(_QWORD *)(v24 + 16) == v27[122])
      {
        *(_BYTE *)(v25 + 1312) = 1;
        v27[143] = 0;
        v28 = (WTF::StringImpl *)v27[144];
        v27[144] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, a2);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      v33 = 0;
      v32 = 0;
      *(_WORD *)buf = *(_WORD *)(v6 + 1256);
      buf[2] = 2;
    }
    else
    {
      if (v4 == 1)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v6 + 208) + 512);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
            v31 = (WebKit::WebProcessPool *)(v30 - 16);
          else
            v31 = 0;
        }
        else
        {
          v31 = 0;
        }
        v34 = *(WebKit::WebsiteDataStore **)(v6 + 264);
        if (v24)
        {
          *(_WORD *)buf = *(_WORD *)(v24 + 3072);
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(v24 + 3080));
          LOBYTE(v72) = 0;
          DWORD2(v73) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v72, v24 + 3280);
          v35 = *(WTF::StringImpl **)(v24 + 3312);
          if (v35)
            *(_DWORD *)v35 += 2;
          v74[0] = v35;
          v36 = *(_OWORD *)(v24 + 3320);
          *(_OWORD *)&v74[3] = *(_OWORD *)(v24 + 3336);
          *(_OWORD *)((char *)&v74[4] + 6) = *(_OWORD *)(v24 + 3350);
          *(_OWORD *)&v74[1] = v36;
        }
        else
        {
          *(_WORD *)buf = 0;
          WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&buf[8]);
          LOBYTE(v74[5]) = 0;
          LODWORD(v74[6]) = 0;
          WORD2(v74[6]) = 0;
          v72 = 0u;
          v73 = 0u;
          memset(v74, 0, 25);
        }
        WebKit::WebProcessPool::createDownloadProxy(v31, v34, (const WebCore::ResourceRequest *)(a1 + 7), (WebKit::WebPageProxy *)v6, (const WebKit::FrameInfoData *)buf, (uint64_t)&v56);
        v38 = v74[0];
        v74[0] = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v37);
          else
            *(_DWORD *)v38 -= 2;
        }
        if (DWORD2(v73) != -1)
          ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[DWORD2(v73)])(&v58, &v72);
        DWORD2(v73) = -1;
        v39 = cf;
        cf = 0;
        if (v39)
          CFRelease(v39);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
        v40 = v56;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 24), v6 + 16);
        v41 = *(unsigned int **)(v6 + 24);
        if (v41)
        {
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 + 1, v41));
        }
        v43 = a1[6];
        a1[6] = 0;
        v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v44 = &off_1E34D49B0;
        v44[1] = v6;
        v44[2] = v41;
        v44[3] = v43;
        v45 = *(_QWORD *)(v40 + 328);
        *(_QWORD *)(v40 + 328) = v44;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        if (v24)
        {
          v46 = v56;
          *(_BYTE *)(v56 + 312) = *(_BYTE *)(v24 + 536);
          *(_QWORD *)buf = *(_QWORD *)(v24 + 448);
          v47 = *(_QWORD *)(v24 + 456);
          *(_QWORD *)(v24 + 448) = 0;
          *(_QWORD *)(v24 + 456) = 0;
          *(_QWORD *)&buf[8] = v47;
          WebKit::DownloadProxy::setRedirectChain(v46, buf);
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v48);
        }
        v49 = v56;
        v50 = *(_QWORD *)(v56 + 56);
        v25 = v50 >> 8;
        v56 = 0;
        CFRelease(*(CFTypeRef *)(v49 + 8));
        v32 = 1;
        v33 = v50;
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      *(_WORD *)buf = *(_WORD *)(v6 + 1256);
      buf[2] = v4;
      if (!v24)
      {
        v51 = 0;
LABEL_65:
        *(_QWORD *)&buf[8] = v51;
        *(_QWORD *)&buf[16] = v33 | (v25 << 8);
        LOBYTE(v60) = v32;
        LOBYTE(v61) = 0;
        v65 = 0;
        LOBYTE(v66) = 0;
        v67 = 0;
        v68 = 0;
        v70 = 0;
        v52 = a1[3];
        a1[3] = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v52 + 16))(v52, buf);
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        if (v70)
        {
          v55 = v69;
          v69 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v53);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
        if (v67)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v66);
        if (v65)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v61, v53);
        WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v57, (uint64_t)v53, v54);
        return;
      }
    }
    v51 = *(_QWORD *)(v24 + 16);
    goto LABEL_65;
  }
  *(_WORD *)buf = 0;
  buf[2] = 2;
  *(_QWORD *)&buf[8] = 0;
  buf[16] = 0;
  LOBYTE(v60) = 0;
  LOBYTE(v61) = 0;
  v65 = 0;
  LOBYTE(v66) = 0;
  v67 = 0;
  v68 = 0;
  v70 = 0;
  v21 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v70)
  {
    v23 = v69;
    v69 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  if (v67)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v66);
  if (v65)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v61, v22);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(unsigned long long,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_1E34D5218;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
  {
    v3 = *(uint64_t **)v2;
    v4 = *(_QWORD *)(v2 + 8) - 1;
    *(_QWORD *)(v2 + 8) = v4;
    if (v3)
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_8;
      v6 = *(_BYTE *)(v2 + 16);
      *(_BYTE *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
      *(_BYTE *)(v2 + 16) = v6;
      if (*(_QWORD *)v2)
        goto LABEL_8;
      v4 = *(_QWORD *)(v2 + 8);
    }
    if (!v4)
      MEMORY[0x19AEB936C](v2, 0x1020C40545B2139);
  }
LABEL_8:
  v7 = a1[4];
  a1[4] = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  v8 = a1[3];
  a1[3] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(unsigned long long,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E34D5218;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = *(uint64_t **)v3;
    v5 = *(_QWORD *)(v3 + 8) - 1;
    *(_QWORD *)(v3 + 8) = v5;
    if (v4)
    {
      v6 = *v4;
      if (!*v4)
        goto LABEL_8;
      v7 = *(_BYTE *)(v3 + 16);
      *(_BYTE *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
      *(_BYTE *)(v3 + 16) = v7;
      if (*(_QWORD *)v3)
        goto LABEL_8;
      v5 = *(_QWORD *)(v3 + 8);
    }
    if (!v5)
      MEMORY[0x19AEB936C](v3, 0x1020C40545B2139);
  }
LABEL_8:
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(unsigned long long,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  IPC::Encoder *v21;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(v2[20] + 8), *(_QWORD *)(a1 + 56));
  v4 = v3;
  if (v3 && (CFRetain(*(CFTypeRef *)(v3 + 8)), (v6 = v2[35]) != 0))
  {
    if (!v2[140])
    {
      v7 = v2[26];
      v8 = *(_QWORD *)(v2[4] + 1896);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 2456;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v21 = (IPC::Encoder *)v9;
      LOBYTE(v19[0]) = 0;
      v20 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v21, 0, (uint64_t)v19, 1);
      if (v20)
      {
        v11 = v19[0];
        v19[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v10);
        WTF::fastFree(v13, v14);
      }
      v6 = v2[35];
    }
    v21 = *(IPC::Encoder **)(a1 + 32);
    v15 = v21;
    *(_QWORD *)(a1 + 32) = 0;
    v16 = *(_QWORD *)(a1 + 48);
    v19[0] = 0;
    WebKit::WebPageProxy::continueNavigationInNewProcess((uint64_t)v2, v4, v6, v19, &v21, 0, 2, v5, v16, 1, 0, 0, 0);
    if (v15)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v15 + 4);
    if (v19[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 8))(v19[0]);
    v17 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!v4)
      return;
  }
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_0,void,WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34D5240;
  if (*(_BYTE *)(a1 + 584))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 272), a2);
  v3 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 64));
  v6 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34D5240;
  if (*(_BYTE *)(a1 + 584))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 272), a2);
  v3 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 64));
  v6 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_0,void,WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebKit::WebProcessProxy *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::URL *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _BOOL8 v28;
  void *v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  _BYTE v61[25];
  _BYTE v62[128];
  char v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unsigned __int8 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  __int128 v78;
  _BYTE v79[25];
  char v80[128];
  char v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  WTF::StringImpl *v92;
  char v93;
  const char **v94[186];
  char v95;
  uint64_t v96;
  const char **v97[186];
  char v98;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v4 = v3;
  v6 = *v5;
  *v5 = 0;
  if (v6)
  {
    v7 = *(_QWORD **)(v3 + 8);
    *(_BYTE *)(v6 + 1048) = 1;
    if (*(_BYTE *)(v3 + 593))
      *(_BYTE *)(v6 + 1288) = *(_BYTE *)(v3 + 592);
    v8 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(v3 + 600), *(_QWORD *)(v3 + 608));
    if (v8)
    {
      v9 = v8;
      CFRetain(*(CFTypeRef *)(v8 + 8));
      if (*(_BYTE *)(v4 + 616))
      {
        CFRetain(*(CFTypeRef *)(v9 + 8));
        v10 = *(_QWORD *)(v6 + 288);
        *(_QWORD *)(v6 + 288) = v9;
        if (v10)
          CFRelease(*(CFTypeRef *)(v10 + 8));
        v11 = *(_QWORD *)(v9 + 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            CFRetain(*(CFTypeRef *)(v12 - 8));
            WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(*(_QWORD *)(v12 + 16) + 1952, (unsigned int *)v6, (uint64_t)&v77);
            CFRelease(*(CFTypeRef *)(v12 - 8));
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    v13 = *(_QWORD *)(v7[33] + 408);
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 16);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (!*(_BYTE *)(v4 + 617))
      {
        v59 = *(_QWORD *)(v7[33] + 24);
        v75 = *(_QWORD *)(v7[4] + 744);
        v96 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 744);
        v77 = &v59;
        *(_QWORD *)&v78 = &v75;
        *((_QWORD *)&v78 + 1) = &v96;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(v13, &v77);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 1896);
    v17 = (WebKit::WebProcessProxy *)v7[26];
    v18 = (unsigned int *)((char *)v17 + 16);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_QWORD *)(v6 + 184);
    LOBYTE(v59) = 0;
    BYTE8(v64) = 0;
    v96 = 0;
    LOBYTE(v75) = 0;
    v76 = 0;
    WebKit::WebPageProxy::creationParameters(v6, v17, v20, (uint64_t)&v59, 0, (uint64_t)&v96, (uint64_t)&v75, (uint64_t)&v77);
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v94, (uint64_t *)&v77);
    v95 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()((uint64_t *)(v4 + 264), v16, 1, (uint64_t)v94);
    if (v95)
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(v94);
    WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v77);
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v21);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18);
    v22 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v4 + 24));
    v24 = v23;
    v25 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 64));
    v26 = (unsigned __int8 *)WTF::URL::host(v25);
    v28 = WTF::operator==(v22, v24, v26, v27);
    *(_BYTE *)(v6 + 736) = v28;
    if (*(_BYTE *)(v4 + 584))
    {
      v30 = *(_OWORD *)(v4 + 296);
      v60 = *(_OWORD *)(v4 + 280);
      *(_OWORD *)v61 = v30;
      LOBYTE(v59) = *(_BYTE *)(v4 + 272);
      *(_QWORD *)(v4 + 280) = 0;
      *(_QWORD *)(v4 + 288) = 0;
      *(_OWORD *)&v61[9] = *(_OWORD *)(v4 + 305);
      v62[0] = 0;
      v63 = 0;
      v31 = *(unsigned __int8 *)(v4 + 456);
      if (*(_BYTE *)(v4 + 456))
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v62, v4 + 328);
        v63 = 1;
      }
      v32 = *(_OWORD *)(v4 + 480);
      v64 = *(_OWORD *)(v4 + 464);
      v65 = v32;
      LOBYTE(v66) = 0;
      v67 = 0;
      v33 = *(unsigned __int8 *)(v4 + 504);
      if (*(_BYTE *)(v4 + 504))
      {
        v34 = *(_QWORD *)(v4 + 496);
        *(_QWORD *)(v4 + 496) = 0;
        v66 = v34;
        v33 = 1;
        v67 = 1;
      }
      v35 = *(_OWORD *)(v4 + 512);
      v36 = *(_OWORD *)(v4 + 528);
      *(_OWORD *)(v4 + 512) = 0u;
      *(_OWORD *)(v4 + 528) = 0u;
      v68 = v35;
      v69 = v36;
      LOBYTE(v70) = 0;
      v72 = 0;
      if (*(_BYTE *)(v4 + 568))
      {
        v37 = *(_OWORD *)(v4 + 544);
        *(_QWORD *)(v4 + 552) = 0;
        *(_QWORD *)(v4 + 544) = 0;
        v70 = v37;
        v38 = *(_QWORD *)(v4 + 560);
        *(_QWORD *)(v4 + 560) = 0;
        v71 = v38;
        v72 = 1;
      }
      v39 = *(_QWORD *)(v4 + 576);
      *(_QWORD *)(v4 + 576) = 0;
      v74 = 0;
      v73 = v39;
      LOBYTE(v77) = v59;
      v40 = v60;
      v60 = 0uLL;
      v78 = v40;
      *(_OWORD *)v79 = *(_OWORD *)v61;
      *(_OWORD *)&v79[9] = *(_OWORD *)&v61[9];
      v80[0] = 0;
      v81 = 0;
      if (v31)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v80, (uint64_t)v62);
        v81 = 1;
        v33 = v67;
      }
      v82 = v64;
      v83 = v65;
      LOBYTE(v84) = 0;
      v85 = 0;
      if (v33)
      {
        v41 = v66;
        v66 = 0;
        v84 = v41;
        v85 = 1;
      }
      v42 = v68;
      v43 = v69;
      v68 = 0u;
      v69 = 0u;
      v86 = v42;
      v87 = v43;
      LOBYTE(v88) = 0;
      v90 = 0;
      if (v72)
      {
        v44 = v70;
        v70 = 0uLL;
        v88 = v44;
        v45 = v71;
        v71 = 0;
        v89 = v45;
        v90 = 1;
      }
      v46 = v73;
      v73 = 0uLL;
      v91 = v46;
      v47 = v74;
      v74 = 0;
      v92 = v47;
      v93 = 1;
      v48 = *(_QWORD *)(v6 + 32);
      v49 = v48 + 1336;
      if (*(_BYTE *)(v48 + 1664))
      {
        WebCore::PrivateClickMeasurement::operator=(v49, (uint64_t)&v77);
        v51 = *((_QWORD *)&v91 + 1);
        *((_QWORD *)&v91 + 1) = 0;
        v52 = *(WTF::StringImpl **)(v48 + 1648);
        *(_QWORD *)(v48 + 1648) = v51;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v50);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v92;
        v92 = 0;
        v54 = *(WTF::StringImpl **)(v48 + 1656);
        *(_QWORD *)(v48 + 1656) = v53;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v50);
          else
            *(_DWORD *)v54 -= 2;
        }
      }
      else
      {
        std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(v49, (uint64_t)&v77);
        *(_BYTE *)(v48 + 1664) = 1;
      }
      std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100]((WebCore::PrivateClickMeasurement *)&v77, v50);
      v56 = v74;
      v74 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v55);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = (WTF::StringImpl *)*((_QWORD *)&v73 + 1);
      *((_QWORD *)&v73 + 1) = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v55);
        else
          *(_DWORD *)v57 -= 2;
      }
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v59, v55);
    }
    v58 = 1;
    *(_BYTE *)(v6 + 737) = 1;
    {
      v58 = dword_1ECE7350C == 0;
    }
    else
    {
      qword_1ECE73518 = 0;
      WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
      unk_1ECE73508 = 0u;
    }
    *(_BYTE *)(v6 + 1304) = v58;
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections((WebKit::WebPageProxy *)v28, v29);
    *(_BYTE *)(v6 + 1305) = dword_1ECE72D8C == 0;
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    LOBYTE(v97[0]) = 0;
    v98 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()((uint64_t *)(v3 + 264), 0, 0, (uint64_t)v97);
    if (v98)
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(v97);
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char **v8[186];
  char v9;
  const char **v10[186];
  char v11;

  v6 = *a1;
  *a1 = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0;
  if (*(_BYTE *)(a4 + 1488))
  {
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v8, (uint64_t *)a4);
    v9 = 1;
    LOBYTE(v10[0]) = 0;
    v11 = 0;
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v10, (uint64_t *)v8);
    v11 = 1;
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, const char ***))(*(_QWORD *)v6 + 16))(v6, a2, a3, v10);
  if (v11)
    WebKit::WebPageCreationParameters::~WebPageCreationParameters(v10);
  if (v9)
    WebKit::WebPageCreationParameters::~WebPageCreationParameters(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34D5268;
  v3 = a1[13];
  a1[13] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 11), a2);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34D5268;
  v3 = *((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 88, a2);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D5290;
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D5290;
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = a1[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      *(_BYTE *)(v2 + 1273) = 1;
      v4 = a1[39];
      v5 = a1[1];
      a1[1] = 0;
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = &off_1E34D52B8;
      v6[1] = v5;
      v9 = v6;
      v7 = a1[41];
      a1[41] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD **))(*(_QWORD *)v7 + 16))(v7, v2 - 16, v4, a1 + 2, a1 + 40, &v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D52B8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D52B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      *(_BYTE *)(v2 + 1273) = 0;
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D52E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D52E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;

  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *a6;
  *a6 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E34D5308;
  v13[1] = v11;
  v13[2] = v12;
  v15 = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 104))(v10, a2, a5, a3, a4, &v15);
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D5308;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D5308;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5330;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5330;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;

  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *a6;
  *a6 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E34D5358;
  v13[1] = v11;
  v13[2] = v12;
  v15 = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 112))(v10, a2, a5, a3, a4, &v15);
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D5358;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D5358;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34D5380;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D5380;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;

  v10 = *(_QWORD *)(a2 + 104);
  v11 = a1 + 16;
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *a6;
  *a6 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = &off_1E34D53A8;
  v14[1] = v12;
  v14[2] = v13;
  v16 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 120))(v10, a2, a5, v11, a3, a4, &v16);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS2_13FrameInfoDataERKNS_6StringESJ_ONS_17CompletionHandlerIFvSJ_EEEEN3__0clERS3_PNS2_13WebFrameProxyESG_SJ_ONSK_IFvvEEEEUlRT_E_vJSJ_EED1Ev(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D53A8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS2_13FrameInfoDataERKNS_6StringESJ_ONS_17CompletionHandlerIFvSJ_EEEEN3__0clERS3_PNS2_13WebFrameProxyESG_SJ_ONSK_IFvvEEEEUlRT_E_vJSJ_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D53A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS2_13FrameInfoDataERKNS_6StringESJ_ONS_17CompletionHandlerIFvSJ_EEEEN3__0clERS3_PNS2_13WebFrameProxyESG_SJ_ONSK_IFvvEEEEUlRT_E_vJSJ_EE4callESJ_(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D53D0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D53D0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD v13[4];
  _DWORD v14[4];

  *(float *)v14 = a2;
  *(float *)&v14[1] = a3;
  *(float *)&v14[2] = a4;
  *(float *)&v14[3] = a5;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  v13[0] = (*(float (**)(uint64_t, _DWORD *))(*(_QWORD *)v7 + 472))(v7, v14);
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v11 + 16))(v11, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D53F8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D53F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[4];

  *(float *)v9 = a2;
  *(float *)&v9[1] = a3;
  *(float *)&v9[2] = a4;
  *(float *)&v9[3] = a5;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v7 + 472))(v7, v9);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D5420;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D5420;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    if (*(_BYTE *)(a1 + 32))
      WTF::RunLoop::TimerBase::start();
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if ((v7 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D5448;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D5448;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  result = WebKit::WebPageProxy::endPrinting(v1, (uint64_t *)(a1 + 24));
  *(_BYTE *)(v1 + 732) = 0;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaVolume>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2408;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5470;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5470;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2457;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D54C0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D54C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D54C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2332;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5510;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5510;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5510;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || (v5 = *a2) == 0)
  {
LABEL_8:
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v10 + 16))(v10, 0, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    a3 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v6);
        a3 = 0;
        v16 = *a2;
        v17 = a2[1];
        v18 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v9 = 0;
        if (v18 && v17)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v17);
          v9 = *a2;
          a3 = a2[1];
        }
      }
      else
      {
        a3 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  a3 = v6;
  v9 = v5;
  if (v8 >= 4)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v9);
        v14 = *a2;
        a3 = a2[1];
        v15 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v15)
        {
          if (a3)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
        }
      }
    }
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2290;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5538;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5538;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2462;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5560;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5560;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2345;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5588;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5588;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5588;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMayStartMediaWhenInWindow>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2406;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2268;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,std::optional<WebCore::FloatSize> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,std::optional<WebCore::FloatSize> const&,unsigned long>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D55B0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,std::optional<WebCore::FloatSize> const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,std::optional<WebCore::FloatSize> const&,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>((uint64_t)a1, *(_QWORD *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D55B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D55B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  char v37;
  _BYTE v38[80];
  int v39;
  char v40;
  _OWORD v41[3];
  uint64_t v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>((uint64_t *)(a1 + 8));
  v4 = *(_QWORD *)a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>((uint64_t *)(a1 + 8));
  v5 = *((_QWORD *)a2 + 1);
  if (v5 <= *((_QWORD *)a2 + 2) - v4)
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = *((_QWORD *)a2 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v23 = *(_QWORD *)a2;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 3);
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        if (v25)
        {
          if (v24)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        }
      }
    }
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6 + 1;
  v7 = *v6;
  if (v7 > 1)
  {
LABEL_5:
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v10 = *((_QWORD *)a2 + 3);
    if (v10 && v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    v38[0] = 0;
    v40 = 0;
LABEL_7:
    v11 = *(_QWORD *)a2;
    v12 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v13 = *((_QWORD *)a2 + 3);
    if (!v13)
      return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(v2);
    if (!v12)
      return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    if (!v40)
      return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(v2);
    goto LABEL_22;
  }
  if (v7)
  {
    IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode(a2, &v29);
    if (BYTE8(v29)
      || (v26 = *(_QWORD *)a2,
          v27 = *((_QWORD *)a2 + 1),
          *(_QWORD *)a2 = 0,
          *((_QWORD *)a2 + 1) = 0,
          (v28 = *((_QWORD *)a2 + 3)) != 0)
      && v27
      && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26), BYTE8(v29)))
    {
      *(_QWORD *)&v41[0] = v29;
      v15 = 1;
      v47 = 1;
    }
    else
    {
      v15 = 0;
      LOBYTE(v41[0]) = 0;
    }
    v48 = v15;
    v16 = 1;
    if (!v15)
      goto LABEL_5;
  }
  else
  {
    IPC::Decoder::decode<WebCore::ResourceError>((uint64_t *)a2, (uint64_t)&v29);
    if (v37)
    {
      v18 = v29;
      v29 = 0uLL;
      v41[0] = v18;
      v41[1] = v30;
      v41[2] = v31;
      LODWORD(v30) = v30 & 0xFFFFFFFE;
      v42 = v32;
      v43 = v33;
      v44 = v34;
      v19 = v35;
      v32 = 0;
      v35 = 0;
      v45 = v19;
      v46 = v36;
      v20 = 1;
      v47 = 0;
    }
    else
    {
      v20 = 0;
      LOBYTE(v41[0]) = 0;
    }
    v48 = v20;
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v17);
    v16 = 0;
    if (!v20)
      goto LABEL_5;
  }
  v38[0] = 0;
  v39 = -1;
  ((void (*)(__int128 *, _BYTE *, _OWORD *))off_1E34D55D8[v16])(&v29, v38, v41);
  v39 = v16;
  v40 = 1;
  if (v48)
  {
    if (v47 != -1)
    {
      ((void (*)(__int128 *, _OWORD *))off_1E34D55C8[v47])(&v29, v41);
      if (!v40)
        goto LABEL_7;
    }
  }
LABEL_22:
  v21 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v38);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v40)
  {
    if (v39 != -1)
      return ((uint64_t (*)(_OWORD *, _BYTE *))off_1E34D55C8[v39])(v41, v38);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  _QWORD v6[8];
  char v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  v6[7] = 0;
  memset(&v6[5], 0, 14);
  v7 = 1;
  v8 = 0;
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34D55C8[v8])(&v4, &v5);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  v6 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  v7 = a3[8];
  a3[8] = 0;
  *(_QWORD *)(a2 + 64) = v7;
  *(_BYTE *)(a2 + 72) = *((_BYTE *)a3 + 72);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCloseSuggestions>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2164;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidSelectDataListOption>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2177;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetAllowsMediaDocumentInlinePlayback>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2366;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = a2;
  v4 = result;
  if (result > (WTF::StringImpl *)a3)
    return WTF::VectorMover<false,WebKit::OptionItem>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (WTF::StringImpl **)((char *)a3 + ((a2 - result) & 0xFFFFFFFFFFFFFFF0) - 8);
    do
    {
      v6 = *((_QWORD *)v3 - 2);
      v3 = (WTF::StringImpl *)((char *)v3 - 16);
      *(_QWORD *)v3 = 0;
      *(v5 - 1) = v6;
      *v5 = *((_QWORD *)v3 + 1);
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 2;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF::StringImpl **)result;
      v5 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
      v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(_QWORD *)v3 = v6;
      result = WTF::VectorMover<false,WebKit::OptionItem>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF::StringImpl **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  IPC::Encoder *result;
  WTF *v27;
  void *v28;
  IPC::Encoder *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2313;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v29 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v8, *(int **)(a2 + 8));
  v9 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v30 = v9;
  v10 = *(_OWORD *)(a3 + 24);
  v31 = *(_OWORD *)(a3 + 8);
  v32 = v10;
  v33 = *(_OWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  v34 = v11;
  *(_QWORD *)&v10 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  v35 = v10;
  v36 = *(_DWORD *)(a3 + 72);
  v12 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a3 + 80) = 0u;
  v37 = v12;
  v38 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  WebCore::Color::Color();
  v39 = *(_DWORD *)(a3 + 112);
  v13 = *(_QWORD *)(a3 + 120);
  v14 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 120) = 0;
  v40 = v13;
  v41 = v14;
  v15 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v15 = off_1E34D55F8;
  *(_QWORD *)(v15 + 8) = v30;
  v16 = v31;
  v17 = v33;
  *(_OWORD *)(v15 + 32) = v32;
  *(_OWORD *)(v15 + 48) = v17;
  *(_OWORD *)(v15 + 16) = v16;
  v18 = v34;
  v30 = 0;
  v34 = 0;
  *(_QWORD *)(v15 + 64) = v18;
  *(_QWORD *)&v16 = v35;
  v35 = 0;
  *(_QWORD *)(v15 + 72) = v16;
  *(_DWORD *)(v15 + 80) = v36;
  *(_QWORD *)(v15 + 88) = v37;
  v19 = *((_QWORD *)&v37 + 1);
  v37 = 0u;
  *(_QWORD *)(v15 + 96) = v19;
  v20 = v38;
  v38 = 0;
  *(_QWORD *)(v15 + 104) = v20;
  WebCore::Color::Color();
  *(_DWORD *)(v15 + 120) = v39;
  v21 = v40;
  v40 = 0;
  *(_QWORD *)(v15 + 128) = v21;
  *(_QWORD *)(v15 + 136) = v41;
  WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0::~$_0(&v30, v22);
  v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v30 = v15;
  *(_QWORD *)&v31 = v23;
  BYTE8(v31) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v29, 0, (uint64_t)&v30, 1);
  if (BYTE8(v31))
  {
    v25 = v30;
    v30 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34D55F8;
  WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E34D55F8;
  WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  CFTypeRef *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  char v14;

  v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v13);
    if (v14)
    {
      *(_OWORD *)(a1 + 32) = v13;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = WebKit::WebFrameProxy::rootFrame(*(CFTypeRef **)(a1 + 128));
      WebKit::WebPageProxy::setTextIndicatorFromFrame(v5, (uint64_t)v6[34], (uint64_t)v6[35], (__int128 *)(a1 + 16), *(_QWORD *)(a1 + 136));
      return;
    }
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9 && v8)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v10 = *a2;
      v11 = a2[1];
      v12 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v12)
      {
        if (v11)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
  }
  IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(v2);
}

void IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  CFTypeRef *v4;

  v2 = (__int128 *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)a1;
  v4 = WebKit::WebFrameProxy::rootFrame(*(CFTypeRef **)(a1 + 120));
  WebKit::WebPageProxy::setTextIndicatorFromFrame(v3, (uint64_t)v4[34], (uint64_t)v4[35], v2, *(_QWORD *)(a1 + 128));
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2159;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  LODWORD(a3) = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v14) = 0;
  v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    v10 = v14;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = v9[1];
          v9[1] = 0;
          if (v12)
            CFRelease(*((CFTypeRef *)v12 + 1));
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  __int128 v23;
  IPC::Encoder *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  CFTypeRef cf;
  __int16 v30;
  char v31;
  _QWORD v32[2];

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2313;
  *(_QWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v24 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v8, *(int **)(a2 + 8));
  v23 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_DWORD *)a3 + 6);
  v9 = (const void *)*((_QWORD *)a3 + 4);
  cf = v9;
  if (v9)
    CFRetain(v9);
  v30 = *((_WORD *)a3 + 20);
  v31 = *((_BYTE *)a3 + 42);
  v10 = *((_QWORD *)a3 + 6);
  v11 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  v13 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v13 = off_1E34D5620;
  *(_OWORD *)(v13 + 8) = v23;
  v25 = 0;
  v26 = 0;
  v14 = v28;
  *(_QWORD *)(v13 + 24) = v27;
  *(_DWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v9;
  if (v9)
    CFRetain(v9);
  *(_WORD *)(v13 + 48) = v30;
  *(_BYTE *)(v13 + 50) = v31;
  *(_QWORD *)(v13 + 56) = v10;
  v32[0] = 0;
  v32[1] = 0;
  *(_QWORD *)(v13 + 64) = v11;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v12);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v16 = v26;
  v26 = 0;
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  v17 = v25;
  v25 = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
  v25 = v13;
  v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  LOBYTE(v27) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, 0, (uint64_t)&v25, 1);
  if ((_BYTE)v27)
  {
    v19 = v25;
    v25 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E34D5620;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E34D5620;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 56, a2);
  v4 = (const void *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  FloatRect v17;
  char v18;
  _BYTE v19[16];

  v2 = a1 + 8;
  if (!a2 || !*a2)
  {
LABEL_9:
    IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(v2);
    return;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v17);
  if (!v18)
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13 && v12)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      v14 = *a2;
      v15 = a2[1];
      v16 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v16 && v15)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 16) + 144);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = WebKit::WebFrameProxy::rootFrame((CFTypeRef *)v5);
    v9 = (uint64_t)v8[34];
    v10 = (uint64_t)v8[35];
    WebCore::IntRect::IntRect((WebCore::IntRect *)v19, &v17);
    WebKit::WebPageProxy::showPopupMenuFromFrame(v7, v6, v9, v10, (const WebCore::IntRect *)v19, *(_QWORD *)(a1 + 24), a1 + 56, *(_DWORD *)(a1 + 32), a1 + 40);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  FloatRect v9;

  v9.m_location = 0;
  v9.m_size = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 16) + 144);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = WebKit::WebFrameProxy::rootFrame((CFTypeRef *)v2);
    v6 = (uint64_t)v5[34];
    v7 = (uint64_t)v5[35];
    WebCore::IntRect::IntRect((WebCore::IntRect *)v8, &v9);
    WebKit::WebPageProxy::showPopupMenuFromFrame(v4, v3, v6, v7, (const WebCore::IntRect *)v8, *(_QWORD *)(a1 + 16), a1 + 48, *(_DWORD *)(a1 + 24), a1 + 32);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseFilesForOpenPanelWithDisplayStringAndIcon>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2163;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, **(const void ***)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2199;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseFilesForOpenPanel>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2162;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCancelForOpenPanel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2158;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2176;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

WTF::StringImpl **WTF::RefCounted<WebKit::TextCheckerCompletion>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[2];
    *((_QWORD *)v2 + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_0,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_1,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_2,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_3,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned long long,long long,BOOL,double> const&>@<X0>(WebKit **a1@<X8>)
{
  return API::String::create(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_0,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_1,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_2,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_3,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned long long,long long,BOOL,double> const&>(uint64_t *a1@<X1>, WebKit **a2@<X8>)
{
  uint64_t v3;
  WebKit *v4;

  v3 = *a1;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 34);
  *((_QWORD *)v4 + 2) = v3;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD280;
  *a2 = v4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_0,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_1,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_2,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_3,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned long long,long long,BOOL,double> const&>(uint64_t *a1@<X1>, WebKit **a2@<X8>)
{
  uint64_t v3;
  WebKit *v4;

  v3 = *a1;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 35);
  *((_QWORD *)v4 + 2) = v3;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD2A8;
  *a2 = v4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_0,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_1,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_2,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_3,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned long long,long long,BOOL,double> const&>(char *a1@<X1>, WebKit **a2@<X8>)
{
  char v3;
  WebKit *v4;

  v3 = *a1;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 32);
  *((_BYTE *)v4 + 16) = v3;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD258;
  *a2 = v4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_0,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_1,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_2,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_3,WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(WTF::String const&,WTF::String const&,WebCore::DiagnosticLoggingDictionary const&,WebCore::ShouldSample)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,unsigned long long,long long,BOOL,double> const&>(uint64_t *a1@<X1>, WebKit **a2@<X8>)
{
  uint64_t v3;
  WebKit *v4;

  v3 = *a1;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 33);
  *((_QWORD *)v4 + 2) = v3;
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AE778;
  *a2 = v4;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5670;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5670;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GamepadActivity>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2214;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *(_QWORD *)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 80 * v6;
    do
    {
      result = IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::encode<IPC::Encoder,std::optional<WebKit::GamepadData> const&>(a1, v7);
      v7 += 80;
      v8 -= 80;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::encode<IPC::Encoder,std::optional<WebKit::GamepadData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 72);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 72))
    {
      return IPC::ArgumentCoder<WebKit::GamepadData,void>::encode(a1, (int *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D5698;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D5698;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  WTF::StringImpl *result;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  if (a2)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 216))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
  cf = 0;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, 2, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D56C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D56C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34D56E8;
  WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D56E8;
  WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const WTF::URL *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[5];
  char v37;
  WTF *v38[3];
  int v39;
  uint8_t buf[4];
  const char *v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  v32 = *(_OWORD *)(a1 + 8);
  v34 = v8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = WTF::fastMalloc((WTF *)0x40);
  v12 = v11;
  *(_QWORD *)v11 = &off_1E34D5710;
  *(_OWORD *)(v11 + 8) = v32;
  *(_OWORD *)(v11 + 24) = v34;
  *(_QWORD *)(v11 + 40) = v9;
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = v4;
  v13 = v32;
  if (*(_BYTE *)(v32 + 1193))
  {
    _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESE_SE_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEE4callEy(v11, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return;
  }
  v14 = WebKit::WebFrameProxy::webFrame(v3, v2);
  if (!v14)
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_31:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 208) + 144) + 98) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return;
    }
LABEL_33:
    *(_DWORD *)buf = 136315138;
    v41 = "void WebKit::WebPageProxy::makeStorageSpaceRequest(FrameIdentifier, const String &, const String &, const Stri"
          "ng &, uint64_t, uint64_t, uint64_t, uint64_t, CompletionHandler<void (uint64_t)> &&)";
    _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 10751: Invalid message dispatched %s", buf, 0xCu);
    goto LABEL_31;
  }
  v15 = v14;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v32, &v35);
  MEMORY[0x19AEABB0C](v36, &v35, 0);
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)v36, v16);
  if (v43)
    v18 = WebCore::operator==() ^ 1;
  else
    v18 = 1;
  if (v39 != -1)
    ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v39])(&v37, v38);
  v39 = -1;
  v19 = v36[0];
  v36[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v17);
      if (v18)
        goto LABEL_17;
      goto LABEL_19;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v18)
  {
LABEL_19:
    if (v43)
    {
      v21 = v6;
      v22 = v7;
      v33 = v5;
      v23 = a1 + 56;
      v24 = a1 + 64;
      WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)buf);
      API::SecurityOrigin::create(v36);
      v26 = v38[0];
      v38[0] = 0;
      if (v26)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v25);
      v27 = *(_QWORD *)(v13 + 104);
      v28 = v36[0];
      v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = &off_1E34D5738;
      *((_QWORD *)v29 + 1) = v12;
      v38[0] = v29;
      (*(void (**)(uint64_t, uint64_t, NSObject *, WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v27 + 256))(v27, v13, v15, v28, v23, v24, v4, v33, v22, v21, v38);
      v30 = v38[0];
      v38[0] = 0;
      if (v30)
        (*(void (**)(WTF *))(*(_QWORD *)v30 + 8))(v30);
      v31 = v36[0];
      v36[0] = 0;
      if (v31)
        CFRelease(*((CFTypeRef *)v31 + 1));
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_17:
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_26:
  if (v43)
  {
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v42])(v36, buf);
  }
  CFRelease(v15[1].isa);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESE_SE_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D5710;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESE_SE_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D5710;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESE_SE_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEE4callEy(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[12];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(_QWORD *)(v6 + 744);
    v8 = *(_QWORD *)(v6 + 1896);
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 208) + 136);
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v25 = 134219264;
    *(_QWORD *)&v25[4] = v4;
    v26 = 2048;
    v27 = v7;
    v28 = 2048;
    v29 = v8;
    v30 = 1024;
    v31 = v9;
    v32 = 2048;
    v33 = v10;
    v34 = 2048;
    v35 = a2;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::requestStorageSpace response for frame %llu, quota %llu", v25, 0x3Au);
  }
  if (*(_QWORD *)(a1 + 56) >= a2)
  {
    WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v4, (WTF::StringImpl **)v25);
    v13 = WTF::equal(*(WTF **)v25, *(const WTF::StringImpl **)(a1 + 40), v11);
    v14 = *(WTF::StringImpl **)v25;
    *(_QWORD *)v25 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13)
          goto LABEL_17;
LABEL_12:
        v15 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(v4 + 32);
          v17 = *(_QWORD *)(v16 + 744);
          v18 = *(_QWORD *)(v16 + 1896);
          v19 = *(_QWORD *)(*(_QWORD *)(v4 + 208) + 136);
          if (v19)
            LODWORD(v19) = *(_DWORD *)(v19 + 108);
          *(_DWORD *)v25 = 134218752;
          *(_QWORD *)&v25[4] = v4;
          v26 = 2048;
          v27 = v17;
          v28 = 2048;
          v29 = v18;
          v30 = 1024;
          v31 = v19;
          _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::storage space increase denied", v25, 0x26u);
        }
        *(_BYTE *)(v4 + 1193) = 1;
        goto LABEL_17;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13)
      goto LABEL_17;
    goto LABEL_12;
  }
LABEL_17:
  v20 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if ((_MergedGlobals_91 & 1) == 0)
  {
    xmmword_1ECE72D90 = 0u;
    *(_OWORD *)&qword_1ECE72DA0 = 0u;
    _MergedGlobals_91 = 1;
    goto LABEL_19;
  }
  v22 = xmmword_1ECE72D90;
  if ((_QWORD)xmmword_1ECE72D90 == *((_QWORD *)&xmmword_1ECE72D90 + 1))
  {
LABEL_19:
    byte_1ECE72DB0 = 0;
    return result;
  }
  v23 = *(_QWORD *)(qword_1ECE72DA0 + 8 * xmmword_1ECE72D90);
  *(_QWORD *)(qword_1ECE72DA0 + 8 * xmmword_1ECE72D90) = 0;
  if (v22 == dword_1ECE72DA8 - 1)
    v24 = 0;
  else
    v24 = v22 + 1;
  *(_QWORD *)&xmmword_1ECE72D90 = v24;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5738;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5738;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int **v3;

  v3 = (unsigned int **)a1[1];
  *a1 = &off_1E34D5760;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int **v3;

  v3 = (unsigned int **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5760;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  WTF::StringImpl *result;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(WTF::StringImpl **)(v2 + 8);
  if (result)
  {
    result = WebKit::GeolocationPermissionRequestManagerProxy::didReceiveGeolocationPermissionDecision(result, *(_QWORD *)(v2 + 16), a2);
    *(_QWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E34D5788;
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v7])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v8 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v8])(&v11, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E34D5788;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((unsigned int *)this + 16);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v7])(&v10, (char *)this + 40);
  *((_DWORD *)this + 16) = -1;
  v8 = *((unsigned int *)this + 8);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v8])(&v11, (char *)this + 8);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::call(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 0xFF00) != 0)
  {
    if (!(_BYTE)a2)
      goto LABEL_21;
    if (a2 != 2)
    {
      if (a2 == 1)
      {
        LOBYTE(v3) = 1;
        if (*(_BYTE *)(a1 + 72))
          LOBYTE(v3) = 2;
      }
      else
      {
        LOBYTE(v3) = a2;
      }
      goto LABEL_17;
    }
    if (!*(_BYTE *)(a1 + 73))
    {
      LOBYTE(v3) = 2;
    }
    else
    {
LABEL_21:
      if (*(_BYTE *)(a1 + 74))
      {
        v3 = *(_QWORD *)(a1 + 80);
        if (!v3)
          goto LABEL_17;
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          goto LABEL_17;
        WebKit::WebPageProxy::pageWillLikelyUseNotifications((WebKit::WebPageProxy *)(v3 - 16));
      }
      LOBYTE(v3) = 0;
    }
LABEL_17:
    v4 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3 | 0x100);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  v3 = (WTF::StringImpl **)a1[1];
  *a1 = &off_1E34D57B0;
  a1[1] = 0;
  if (v3)
    WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D57B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
    return WebKit::MediaKeySystemPermissionRequestProxy::allow(v2);
  else
    return WebKit::MediaKeySystemPermissionRequestProxy::deny(v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2493;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D57D8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode(a1, *(_QWORD *)a2);
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, *(_QWORD *)(a2 + 8));
  return IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, *(int **)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D57D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D57D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || (v5 = *a2) == 0)
  {
LABEL_8:
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v10 + 16))(v10, 0, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v5)
  {
    a3 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v6);
        a3 = 0;
        v16 = *a2;
        v17 = a2[1];
        v18 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v9 = 0;
        if (v18 && v17)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v17);
          v9 = *a2;
          a3 = a2[1];
        }
      }
      else
      {
        a3 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  a3 = v6;
  v9 = v5;
  if (v8 >= 3)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v9);
        v14 = *a2;
        a3 = a2[1];
        v15 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v15)
        {
          if (a3)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
        }
      }
    }
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartVisualTranslation>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2453;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2331;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5800;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5800;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5800;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t *v2;
  WTF::MachSendRight *result;
  __n128 v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BYTE v12[64];
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  _BYTE v16[72];
  char v17;
  uint64_t v18;
  unsigned __int8 v19;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*(_QWORD *)a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a2, v16);
  if (!v17)
  {
    v12[0] = 0;
    v15 = 0;
    goto LABEL_10;
  }
  result = (WTF::MachSendRight *)IPC::Decoder::decode<WTF::String>((uint64_t *)a2, &v18);
  v6 = v19;
  if (!v19)
  {
    v12[0] = 0;
    goto LABEL_14;
  }
  if (v17)
  {
    v12[0] = 0;
    v13 = 0;
    if (v16[64])
    {
      v5.n128_f64[0] = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v12, (uint64_t)v16);
      v6 = 1;
      v13 = 1;
      v14 = v18;
    }
    else
    {
      v14 = v18;
      v6 = 1;
    }
LABEL_14:
    v15 = v6;
    if (v17)
    {
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
      v6 = v15;
    }
    if (v6)
    {
LABEL_17:
      v10 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _BYTE *, uint64_t *, __n128))(*(_QWORD *)v10 + 16))(v10, v12, &v14, v5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      return std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v12, v11);
    }
LABEL_10:
    v7 = *(WTF::StringImpl **)a2;
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v9 = *((_QWORD *)a2 + 3);
    if (!v9 || !v8 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9, v7), !v15))
    {
      std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v12, v7);
      return IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(v2);
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

WTF::MachSendRight *IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  _BYTE v6[72];

  v6[0] = 0;
  v6[64] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, v6, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
}

WTF::MachSendRight *std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](WTF::MachSendRight *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 80))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](this);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D5828;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D5828;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = (CFTypeRef *)(v5 - 16);
    CFRetain(*(CFTypeRef *)(v5 - 8));
    if ((_DWORD)a2)
      WebKit::WebPageProxy::pageWillLikelyUseNotifications((WebKit::WebPageProxy *)v6);
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if ((v7 & 1) == 0)
    CFRelease(v6[1]);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CopyLinkToHighlight>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2145;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateWebsitePolicies(WebKit::WebsitePoliciesData &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2492;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode((IPC::Encoder *)v6, v5);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::NotifyUserScripts>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2287;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2175;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanRunModal>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2375;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::BeginPrintingDuringDOMPrintOperation &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrintingDuringDOMPrintOperation&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2116;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrinting>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::BeginPrinting &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrinting&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2115;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2195;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5878;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5878;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5878;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2194;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D58A0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D58A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D58A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2141;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode((IPC::Encoder *)v12, *(_DWORD **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D58C8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D58C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D58C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  double v3;
  uint64_t v4;
  WTF *result;
  void *v6;
  WTF *v7;
  int v8;
  double v9;
  uint64_t v10;
  char v11;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>((uint64_t)&v7, a2);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  v3 = v9;
  v4 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **, uint64_t *, double))(*(_QWORD *)v4 + 16))(v4, &v7, &v10, v3);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v11)
  {
    result = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  _QWORD v4[2];
  WTF *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **, _QWORD *, double))(*(_QWORD *)v1 + 16))(v1, &v5, v4, 0.0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v5;
  if (v5)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  WTF *result;
  void *v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;

  IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v20);
  if (!v22)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
LABEL_12:
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v16);
    return result;
  }
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v12 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v5, v4);
        v11 = (void *)*a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
    }
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (!result)
    {
LABEL_26:
      v15 = 0;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 40) = 0;
      goto LABEL_19;
    }
LABEL_28:
    if (v12)
      result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v11);
    goto LABEL_26;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v11 = 0;
    goto LABEL_25;
  }
  v9 = *v8;
  result = (WTF *)IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a2, (uint64_t)&v23);
  if (v24)
  {
    if (!v22)
    {
      __break(1u);
      goto LABEL_28;
    }
    v13 = v20;
    v20 = 0;
    *(_QWORD *)a1 = v13;
    v14 = v21;
    HIDWORD(v21) = 0;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 24) = v23;
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 40) = v15;
LABEL_19:
  if (v22)
  {
    result = v20;
    if (v20)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      result = (WTF *)WTF::fastFree(result, v11);
    }
  }
  if (!v15)
    goto LABEL_12;
  return result;
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrinting &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrinting&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2140;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode((IPC::Encoder *)v12, *(_DWORD **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D58F0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D58F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D58F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  double v3;
  uint64_t v4;
  WTF *result;
  void *v6;
  WTF *v7;
  int v8;
  double v9;
  uint64_t v10;
  char v11;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>((uint64_t)&v7, a2);
  if (!v11)
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  v3 = v9;
  v4 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **, uint64_t *, double))(*(_QWORD *)v4 + 16))(v4, &v7, &v10, v3);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v11)
  {
    result = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2185;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5918;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(a1, v2[1]);
  v4 = *((_DWORD *)v2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = *((_DWORD *)v2 + 5);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5918;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5918;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawPagesToPDF &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(uint64_t **)(a3 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 16), 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2184;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5940;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5940;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2189;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5968;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>(a1, (uint64_t)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5968;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2228;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5990;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5990;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5990;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2, __n128 a3, __n128 a4)
{
  unint64_t v5;
  char v6;
  uint64_t v7;

  if (a2 && *a2 && (v5 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>(a2), v6))
  {
    a4.n128_u32[0] = HIDWORD(v5);
    a3.n128_u32[0] = v5;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v7 + 16))(v7, a3, a4);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    a3.n128_u32[0] = 0;
    a4.n128_u32[0] = 0;
    (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v7 + 16))(v7, a3, a4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportSizeForCSSViewportUnits>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2443;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScrollPinningBehavior>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2423;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D59B8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D59B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(a1 + 8);
  if (!*(_BYTE *)(a2 + 16))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34D59E0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34D59E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *result;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  char v14;
  WTF *v15;
  uint64_t v16;

  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_9;
  v15 = 0;
  v16 = 0;
  v3 = WebCore::wrapSerializedCryptoKey();
  v5 = v3;
  if (v3)
  {
    v12 = v15;
    v6 = v16;
    v15 = 0;
    v16 = 0;
    v13 = v6;
    v14 = 1;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v7 + 16))(v7, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v14)
    {
      v8 = v12;
      if (v12)
      {
        v12 = 0;
        LODWORD(v13) = 0;
        WTF::fastFree(v8, v4);
      }
    }
  }
  result = v15;
  if (v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    result = (WTF *)WTF::fastFree(result, v4);
  }
  if ((v5 & 1) == 0)
  {
LABEL_9:
    LOBYTE(v12) = 0;
    v14 = 0;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v10 + 16))(v10, &v12);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v14)
    {
      result = v12;
      if (v12)
      {
        v12 = 0;
        LODWORD(v13) = 0;
        return (WTF *)WTF::fastFree(result, v11);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34D5A08;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34D5A08;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  if (!*(_BYTE *)(a2 + 16) || (WebCore::unwrapCryptoKey(), !v8))
  {
    LOBYTE(v6) = 0;
    v8 = 0;
  }
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeFont>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2125;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FontChanges,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertTextAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2260;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  return IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(a1, *(char **)(a2 + 16));
}

_QWORD *IPC::Decoder::decode<std::tuple<WebKit::EditingRange>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebKit::EditingRange>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCompositionAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2378;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(_QWORD *)(a2 + 8));
  IPC::VectorArgumentCoder<false,WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(_QWORD *)(a2 + 16));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, *(uint64_t **)(a2 + 24));
  v4 = *(uint64_t **)(a2 + 32);
  v5 = *v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(uint64_t **)(a2 + 40);
  v8 = *v7;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = v7[1];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v9;
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a2;
    v8 = 32 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::encode(a1, v7);
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned __int8 **)a2;
    v7 = 40 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
}

char *IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, uint64_t *a2)
{
  int v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*a2)
    v4 = *(_DWORD *)(*a2 - 12);
  else
    v4 = 0;
  result = IPC::Encoder::grow(this, 4uLL, 4);
  *(_DWORD *)result = v4;
  v6 = *a2;
  if (*a2)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 24 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *a2;
      if ((_DWORD)v7)
      {
        v10 = 24 * v7;
        v9 = v6;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 24;
          v10 -= 24;
          if (!v10)
          {
            v9 = v8;
            break;
          }
        }
      }
      if (v6)
        goto LABEL_12;
      goto LABEL_16;
    }
    v9 = v6 + 24 * v7;
  }
  else
  {
    v9 = 0;
    LODWORD(v7) = 0;
  }
  v8 = v6 + 24 * v7;
  if (v6)
  {
LABEL_12:
    v11 = v6 + 24 * *(unsigned int *)(v6 - 4);
    goto LABEL_17;
  }
LABEL_16:
  v11 = 0;
LABEL_17:
  while (v9 != v11)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, (uint64_t *)v9);
    v12 = *(unsigned int *)(v9 + 20);
    result = IPC::Encoder::grow(this, 8uLL, 8);
    *(_QWORD *)result = v12;
    v13 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v13)
    {
      v14 = *(uint64_t **)(v9 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = *v14;
        *(_QWORD *)IPC::Encoder::grow(this, 8uLL, 8) = v16;
        v17 = v14[1];
        result = IPC::Encoder::grow(this, 8uLL, 8);
        *(_QWORD *)result = v17;
        v14 += 2;
      }
      while (v14 != v15);
    }
    v18 = v9 + 24;
    v9 = v8;
    if (v18 != v8)
    {
      v9 = v18;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 24;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetWritingSuggestion>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2444;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v21 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  v9 = a2[1];
  v10 = *v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
  v11 = v9[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v11;
  LOBYTE(v19) = 0;
  v20 = 0;
  v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
  if (v20)
  {
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }
  return v13;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ConfirmCompositionAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2142;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2466;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,unsigned int>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5A30;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,unsigned int>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, v2[1]);
  LODWORD(v2) = *((_DWORD *)v2 + 4);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5A30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5A30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3;
  WTF::MachSendRight *result;
  uint64_t v5;
  _BYTE v6[72];
  char v7;

  if (!a2
    || !*(_QWORD *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6), !v7))
  {
    v6[0] = 0;
    v6[64] = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidStart>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2464;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::callAfterNextPresentationUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD v13[2];
  char v14;
  IPC::Encoder *v15;

  v3 = **(unsigned int ***)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = **(_QWORD **)(a1 + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 24;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34D5A80;
  v7[1] = v3;
  v13[0] = v7;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v14 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)v13, 1);
  if (v14)
  {
    v9 = v13[0];
    v13[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages11DrawingArea28DispatchAfterEnsuringDrawingEZZN6WebKit12WebPageProxy31callAfterNextPresentationUpdateEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlST_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D5A80;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages11DrawingArea28DispatchAfterEnsuringDrawingEZZN6WebKit12WebPageProxy31callAfterNextPresentationUpdateEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSQ_NS_19ThreadLikeAssertionEEUlST_E_vJST_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D5A80;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D5AA8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D5AA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::call(IPC::Encoder *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  v2 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v2 + 729) || !*(_BYTE *)(v2 + 728))
  {
    v3 = *a2;
    if (*a2)
    {
      *a2 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
      return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else
  {
    v4 = result;
    v5 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v6 = *(_QWORD *)(v2 + 208);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 2171;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v20 = (IPC::Encoder *)v8;
      *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = 1;
      v9 = *((_QWORD *)v4 + 3);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D5AF8;
      v10[1] = v5;
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 208);
      v11 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 2171;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v20 = (IPC::Encoder *)v12;
      *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = 0;
      v13 = *((_QWORD *)v4 + 3);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E34D5AD0;
    }
    v18[0] = v10;
    v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      v15 = v18[0];
      v18[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>(a2, (uint64_t)&v5);
    if (v8)
    {
      v4 = v6;
      v3 = v7;
      v6 = 0;
      v7 = 0;
      if (v3)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
      if (v4)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v2);
    }
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5AF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5AF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  _QWORD v6[3];
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>(a2, (uint64_t)v6);
    if (v7)
    {
      WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}::operator()(v2, (IPC::SharedBufferReference *)v6);
      return (unsigned int *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
    }
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
  }
  memset(v6, 0, sizeof(v6));
  return WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}::operator()(v2, (IPC::SharedBufferReference *)v6);
}

unsigned int *WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}::operator()(uint64_t *a1, IPC::SharedBufferReference *this)
{
  WebCore::SharedBuffer *v3;
  const void *v4;
  WebKit *v5;
  uint64_t v6;
  void *v7;
  WebKit *v8;
  uint64_t v10;
  WebKit *v11;
  WebCore::SharedBuffer *v12;

  IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, &v12);
  v3 = v12;
  if (v12)
  {
    v4 = (const void *)WebCore::SharedBuffer::data(v12);
    API::Data::create(*((WTF **)v3 + 6), v4, &v11);
    v5 = v11;
    v6 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, WebKit *))(*(_QWORD *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v8 = v11;
    v11 = 0;
    if (v8)
      CFRelease(*((CFTypeRef *)v8 + 1));
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v3, v7);
  }
  else
  {
    v10 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUserInterfaceLayoutDirection>(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2441;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13 != -1)
      {
        if (v14)
        {
          v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          v17 = *(_DWORD **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
          v18 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v16 = v19;
          v20 = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v16 + 8) = v20;
          v21 = *(_DWORD **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v21)
          {
            if (v21[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            else
              --v21[2];
          }
          v22 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v11 = v16;
        }
        else
        {
          v15 = *(_DWORD **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            if (v15[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
              v14 = *(WTF::StringImpl **)v13;
            }
            else
            {
              --v15[2];
            }
          }
          *(_QWORD *)v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = (_DWORD *)v25[1];
          v25[1] = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
          *v25 = *v12;
          v27 = v4 + 16 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v29 = *(_DWORD **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[2];
          }
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterURLSchemeHandler>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2308;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WasLoadedWithDataTransferFromPrevalentResource>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2501;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EffectiveAppearanceDidChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2192;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2256;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5B20;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[3]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5B20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5B20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    v17 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v18 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v17;
    if (v18)
      CFRelease(*(CFTypeRef *)(v18 + 8));
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        v23 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = v8 + 16 * v14;
  v28 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v29 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v27 + 8) = v28;
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v13);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v16 + 16 * v21));
          v22 = v16 + 16 * v21;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            CFRelease(*(CFTypeRef *)(v23 + 8));
            v24 = *(WTF::StringImpl **)v22;
            *(_QWORD *)v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v9);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v22 = 0;
          }
          v25 = *v12;
          *v12 = 0;
          *(_QWORD *)v22 = v25;
          v26 = v4 + 16 * v10;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v27;
          v28 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
            CFRelease(*(CFTypeRef *)(v28 + 8));
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v9);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a2)
            v11 = v22;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            CFRelease(*(CFTypeRef *)(v15 + 8));
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v9);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2479;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5B48;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 24));
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(a1, *(IPC::SharedBufferReference **)(a2 + 32));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5B48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5B48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (unsigned int *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v4)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  v9 = v3[2];
  v3[2] = 0;
  v6[2] = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x197381D3CLL);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *a3 = v6;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      a3[1] = v7;
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      a3[2] = v8;
      v9 = (unsigned int *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, a2);
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2218;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5B98;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5B98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5B98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[33];
  char v11;
  char v12;
  uint64_t v13[33];
  char v14;
  char v15;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>((uint64_t *)(a1 + 8));
    return;
  }
  IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>(a2, v13);
  LOBYTE(v10[0]) = 0;
  if (!v15)
  {
    v12 = 0;
LABEL_16:
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (!v9 || !v8 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7), !v12))
    {
      IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(v2);
      return;
    }
    goto LABEL_11;
  }
  v11 = 0;
  if (!v14)
  {
    v12 = 1;
    goto LABEL_11;
  }
  std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>(v10, v13);
  v11 = 1;
  v12 = 1;
  if (v15)
  {
    if (v14)
    {
      WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v13, v4);
      if (!v12)
        goto LABEL_16;
    }
  }
LABEL_11:
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v12)
  {
    if (v11)
      WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v10, v6);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _BYTE v3[264];
  char v4;

  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4)
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v3, v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2240;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5BC0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5BC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5BC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(uint64_t a1, _DWORD **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2261;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5BE8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5BE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5BE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD v9[6];
  char v10;
  _OWORD v11[5];
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a2 || !*a2)
  {
LABEL_6:
    LOBYTE(v11[0]) = 0;
    LOBYTE(v12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 16))(v4, v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  IPC::Decoder::decode<std::optional<WebCore::ElementContext>>(a2, (uint64_t)v11);
  if (!v13)
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7 && v6)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
    goto LABEL_6;
  }
  v9[2] = v11[2];
  v9[3] = v11[3];
  v9[4] = v11[4];
  v9[5] = v12;
  v9[0] = v11[0];
  v9[1] = v11[1];
  v10 = 1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 16))(v4, v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2316;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5C10;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5C10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateCurrentModifierState>(uint64_t a1, _BYTE **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2484;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = **a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SimulateDeviceOrientationChange>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2446;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t a1, _BYTE **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2153;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = **a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5C38;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5C38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5C38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;
  char v6;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(a2, (uint64_t)&cf);
    if (v6)
    {
      v3 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v3 + 16))(v3, &cf);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v6)
      {
        v4 = cf;
        cf = 0;
        if (v4)
          CFRelease(v4);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t *a1)
{
  uint64_t v1;
  CFTypeRef v2;
  CFTypeRef cf;

  cf = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v1 + 16))(v1, &cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
}

void IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebKit::DataDetectionResult>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WebKit::DataDetectionResult>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::DataDetectionResult,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2314;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5C60;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5C60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5C60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;
  char v6;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(a2, (uint64_t)&cf);
    if (v6)
    {
      v3 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v3 + 16))(v3, &cf);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v6)
      {
        v4 = cf;
        cf = 0;
        if (v4)
          CFRelease(v4);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>((uint64_t *)(a1 + 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SystemPreviewActionTriggered>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2465;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode((IPC::Encoder *)v8, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::webViewDidMoveToWindow(void)::$_0,void,WebKit::WebViewDidMoveToWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanShowPlaceholder>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2376;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v8, *(_QWORD *)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2452;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::VectorArgumentCoder<false,WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v12, *(_QWORD *)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5CB0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void IPC::VectorArgumentCoder<false,WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 32 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5CB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5CB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2138;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5CD8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 48 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::encode(a1, v7);
      v7 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5CD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5CD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  int v13;
  unint64_t v14;
  int v15;
  WTF *result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  unsigned int v61;
  int v62;
  char v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;

  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(_QWORD *)(a1 + 8));
  v4 = *a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(_QWORD *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v26 = 0;
    v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v26 = 0;
        v57 = *a2;
        v58 = a2[1];
        v59 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v27 = 0;
        if (v59 && v58)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57);
          v27 = *a2;
          v26 = a2[1];
        }
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_25;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v26 = v5;
    v27 = v4;
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29 && v26)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
    goto LABEL_48;
  }
  v8 = ((unint64_t)(v6 + 8) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v5 < v8 || v5 - v8 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
      v31 = *a2;
      v32 = a2[1];
      v33 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v33)
      {
        if (v32)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
      }
    }
LABEL_47:
    v51 = *a2;
    v52 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v53 = a2[3];
    if (v53 && v52)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
LABEL_48:
    v54 = *a2;
    v55 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v56 = a2[3];
    if (v56)
    {
      if (v55)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
    }
    return IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(_QWORD *)(a1 + 8));
  }
  v10 = (unint64_t *)((unint64_t)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  a2[2] = (uint64_t)(v10 + 1);
  v68 = 0;
  v69 = 0;
  if (v11 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>((uint64_t)&v64, a2);
      if (!v67)
        goto LABEL_45;
      v34 = HIDWORD(v69);
      if (HIDWORD(v69) == (_DWORD)v69)
      {
        v35 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, HIDWORD(v69) + 1, (unint64_t)&v64);
        v36 = HIDWORD(v69);
        result = (WTF *)v68;
        v37 = v68 + 40 * HIDWORD(v69);
        v38 = *(_QWORD *)(v35 + 32);
        v39 = *(_OWORD *)(v35 + 16);
        *(_OWORD *)v37 = *(_OWORD *)v35;
        *(_OWORD *)(v37 + 16) = v39;
        *(_QWORD *)(v37 + 32) = v38;
        v34 = v36;
      }
      else
      {
        result = (WTF *)v68;
        v40 = v68 + 40 * HIDWORD(v69);
        v41 = v64;
        v42 = v65;
        *(_QWORD *)(v40 + 32) = v66;
        *(_OWORD *)v40 = v41;
        *(_OWORD *)(v40 + 16) = v42;
      }
      v43 = (v34 + 1);
      HIDWORD(v69) = v34 + 1;
      --v11;
    }
    while (v11);
    v24 = v69;
    if (v69 > v43)
    {
      v44 = result;
      if (!(_DWORD)v43)
        goto LABEL_55;
      if (v43 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      v45 = 40 * v43;
      result = (WTF *)WTF::fastMalloc((WTF *)(40 * v43));
      v24 = (v45 & 0xFFFFFFF8) / 0x28;
      LODWORD(v69) = v24;
      v68 = (uint64_t)result;
      if (result == v44)
      {
LABEL_55:
        v68 = 0;
        LODWORD(v69) = 0;
      }
      else
      {
        v46 = 0;
        do
        {
          v47 = (char *)result + v46;
          v48 = *(_OWORD *)((char *)v44 + v46);
          v49 = *(_OWORD *)((char *)v44 + v46 + 16);
          *((_QWORD *)v47 + 4) = *(_QWORD *)((char *)v44 + v46 + 32);
          *(_OWORD *)v47 = v48;
          *((_OWORD *)v47 + 1) = v49;
          v46 += 40;
        }
        while (v45 != v46);
        if (!v44)
          goto LABEL_57;
      }
      WTF::fastFree(v44, v12);
      result = (WTF *)v68;
      v24 = v69;
    }
LABEL_57:
    v23 = HIDWORD(v69);
    goto LABEL_21;
  }
  if (v11)
  {
    LODWORD(v69) = 40 * (int)v11 / 0x28u;
    v68 = WTF::fastMalloc((WTF *)(40 * v11));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>((uint64_t)&v64, a2);
      if (!v67)
        break;
      v13 = HIDWORD(v69);
      if (HIDWORD(v69) == (_DWORD)v69)
      {
        v14 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, HIDWORD(v69) + 1, (unint64_t)&v64);
        v15 = HIDWORD(v69);
        result = (WTF *)v68;
        v17 = v68 + 40 * HIDWORD(v69);
        v18 = *(_QWORD *)(v14 + 32);
        v19 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)v17 = *(_OWORD *)v14;
        *(_OWORD *)(v17 + 16) = v19;
        *(_QWORD *)(v17 + 32) = v18;
        v13 = v15;
      }
      else
      {
        result = (WTF *)v68;
        v20 = v68 + 40 * HIDWORD(v69);
        v21 = v64;
        v22 = v65;
        *(_QWORD *)(v20 + 32) = v66;
        *(_OWORD *)v20 = v21;
        *(_OWORD *)(v20 + 16) = v22;
      }
      v23 = v13 + 1;
      HIDWORD(v69) = v13 + 1;
      if (!--v11)
      {
        v24 = v69;
        goto LABEL_21;
      }
    }
LABEL_45:
    v50 = (WTF *)v68;
    if (v68)
    {
      v68 = 0;
      LODWORD(v69) = 0;
      WTF::fastFree(v50, v12);
    }
    goto LABEL_47;
  }
  v23 = 0;
  v24 = 0;
  result = 0;
LABEL_21:
  v60 = result;
  v61 = v24;
  v62 = v23;
  v63 = 1;
  result = (WTF *)(*(uint64_t (**)(_QWORD, BOOL, WTF **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v7 != 0, &v60);
  if (v63)
  {
    result = v60;
    if (v60)
    {
      v60 = 0;
      v61 = 0;
      return (WTF *)WTF::fastFree(result, v25);
    }
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1)
{
  void *v1;
  WTF *result;
  WTF *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  (*(void (**)(uint64_t, _QWORD, WTF **))(*(_QWORD *)a1 + 16))(a1, 0, &v3);
  result = v3;
  if (v3)
  {
    v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverriddenMediaType>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2414;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsTakingSnapshotsForApplicationSuspension>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2399;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetNeedsDOMWindowResizeEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2412;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2229;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5D00;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5D00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5D00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2225;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5D28;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5D28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearLoadedSubresourceDomains>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2132;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ModelInlinePreviewDidLoad>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2280;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ModelInlinePreviewDidFailToLoad>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2279;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v8, *(WebCore::ResourceError **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5D78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5D78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  __int16 v16;
  char v17;

  if (a2 && *a2)
  {
    v4 = IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(a2);
    if (HIBYTE(v4))
    {
      v15 = v4 & 0xFFFFFF | 0x1000000;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 16))(v5, &v15);
    }
    else
    {
      v7 = *a2;
      v8 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v9 = a2[3];
      if (v9)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
          v10 = *a2;
          v11 = a2[1];
          v12 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v12)
          {
            if (v11)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
          }
        }
      }
      v17 = 0;
      v16 = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v5 + 16))(v5, &v16);
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v5 + 16))(v5, &v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5DA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5DA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D5DC8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5DC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (!*(_BYTE *)(v3 + 1304) || !*(_BYTE *)(a2 + 64))
        goto LABEL_11;
      v6 = *(_QWORD *)(v3 + 24);
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
      if (*(_BYTE *)(a2 + 64))
      {
        (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)v7 + 1184))(v7, a2, *(float *)(a1 + 16), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28));
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
        *(_BYTE *)(v3 + 1304) = 0;
LABEL_11:
        CFRelease(*(CFTypeRef *)(v3 - 8));
        return;
      }
      __break(1u);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2445;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5DF0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5DF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5DF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsWindowResizingEnabled>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2400;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateTestReport>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2216;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D5E18;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5E18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WebKit::WebPageProxy *a1, _DWORD *a2)
{
  WebKit::WebPageProxy *ParametersForAdvancedPrivacyProtections;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebPageProxy *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  char v21;
  IPC::Encoder *v22;

  ParametersForAdvancedPrivacyProtections = (WebKit::WebPageProxy *)WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(a1, a2);
  if (!dword_1ECE72D8C)
  {
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(ParametersForAdvancedPrivacyProtections, v5);
    if (dword_1ECE72D8C)
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)qword_1ECE72D80, (WTF::StringImpl *)(qword_1ECE72D80 + 24 * dword_1ECE72D8C));
    v6 = WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)&qword_1ECE72D80, a2);
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v6, v7);
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&qword_1ECE72D80, dword_1ECE72D8C);
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = (WebKit::WebPageProxy *)CFRetain(*(CFTypeRef *)(v9 - 8));
      if (!*(_BYTE *)(v9 + 713) && *(_BYTE *)(v9 + 712))
      {
        WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v10, v11);
        v12 = *(_QWORD *)(v9 + 192);
        v13 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 1896);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 2365;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v22 = (IPC::Encoder *)v14;
        IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v14, (uint64_t)&qword_1ECE72D80);
        LOBYTE(v20) = 0;
        v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          v16 = v20;
          v20 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        v17 = v22;
        v22 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v15);
          WTF::fastFree(v18, v19);
        }
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5E40;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5E40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(*(_QWORD *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2289;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5E68;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5E68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5E68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2298;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5E90;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5E90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5E90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(v24 + 8), 0);
          *(_QWORD *)v24 = *v13;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 8) = v26;
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)v25, 0);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::SleepDisabler *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebCore::SleepDisabler *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebCore::SleepDisabler *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UseRedirectionForCurrentNavigation>(uint64_t a1, WebCore::ResourceResponseBase **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2494;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::ASCIICaseInsensitiveHash **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::ASCIICaseInsensitiveHash *v24;
  WTF::StringImpl *v25;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = v4 << (6 * v5 >= (2 * v4));
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = 8;
LABEL_6:
  v7 = WTF::fastMalloc((WTF *)(16 * v6 + 16));
  if (v6)
  {
    v10 = v6;
    v11 = (_BYTE *)(v7 + 24);
    do
    {
      *((_QWORD *)v11 - 1) = 0;
      *v11 = 0;
      v11 += 16;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v12);
      if (*v14 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v14, 0, v9))
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::ASCIICaseInsensitiveHash::hash(*v14, v8);
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v21 = WTF::equal(*(WTF **)(v16 + 16 * v20), 0, v9);
            v18 = ++v19 + v20;
          }
          while (!v21);
          v22 = v16 + 16 * v20;
          v23 = *(WTF::StringImpl **)v22;
          *(_QWORD *)v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v14;
          *v14 = 0;
          *(_QWORD *)v22 = v24;
          *(_BYTE *)(v22 + 8) = *(_BYTE *)(v3 + 16 * v12 + 8);
          v25 = *v14;
          *v14 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v8);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v14 == a2)
            v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v13;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DispatchLoadEventToFrameOwnerElement &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::DispatchLoadEventToFrameOwnerElement&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(*(_QWORD *)(v7 + 24), *(uint64_t ***)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(*(_QWORD *)(a1 + 208), *(uint64_t ***)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2180;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v3 = *(_QWORD *)(a2 + 144);
  if (v3 && v3 != *((_QWORD *)result + 1))
  {
    v6 = (uint64_t *)*((_QWORD *)result + 2);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2212;
    *(_QWORD *)(v7 + 8) = a3;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v14 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, v6);
    LOBYTE(v12) = 0;
    v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2311;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v16 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v14) = 0;
  v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    v10 = v14;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;

  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>((uint64_t)a1, *(_QWORD *)(a2 + 24));
  v4 = *(uint64_t **)(a2 + 32);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);
  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
}

uint64_t *WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>(uint64_t *result, uint64_t a2, uint64_t **a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t *v22;
  int v23;
  IPC::Encoder *v24;
  uint64_t v25;

  v5 = result;
  if (!*(_QWORD *)(a2 + 144))
  {
    *(_BYTE *)result = 1;
    *((_DWORD *)result + 4) = 1;
    return result;
  }
  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 144);
  v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3698, a4, &v25, (uint64_t *)&v24);
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(v24, a3);
  IPC::Connection::sendSyncMessage(v10, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, a5);
  if (v23)
  {
    if (v23 == 1)
    {
      *(_BYTE *)v5 = (_BYTE)v22;
      v11 = 1;
      *((_DWORD *)v5 + 4) = 1;
LABEL_10:
      ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34D4020[v11])(&v20, &v22);
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  LOBYTE(v20) = 0;
  v21 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, &v20);
  if (v21)
  {
    v11 = v23;
    if (!v23)
    {
      v13 = v22;
      v22 = 0;
      v14 = v20;
      *v5 = (uint64_t)v13;
      v5[1] = (uint64_t)v14;
      *((_DWORD *)v5 + 4) = 0;
      goto LABEL_10;
    }
LABEL_14:
    v18 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::operator>><std::tuple<WTF::String>>(v18, v19);
  }
  *(_BYTE *)v5 = 13;
  *((_DWORD *)v5 + 4) = 1;
  v11 = v23;
  if (v23 != -1)
    goto LABEL_10;
LABEL_11:
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }
  return (uint64_t *)kdebug_trace();
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::String>>(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)&v7);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(a2, (WTF::StringImpl *)&v7);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t *v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  v4 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOWORD(v2) = *(_WORD *)v2[2];
  result = IPC::Encoder::grow(a1, 2uLL, 2);
  *(_WORD *)result = (_WORD)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t *v21;
  int v22;
  IPC::Encoder *v23;
  uint64_t v24;

  v5 = result;
  if (!*(_QWORD *)(a2 + 144))
  {
    *(_BYTE *)result = 1;
    *(_DWORD *)(result + 16) = 1;
    return result;
  }
  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 144);
  v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3694, a4, &v24, (uint64_t *)&v23);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v23, *a3);
  IPC::Connection::sendSyncMessage(v10, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, a5);
  if (v22)
  {
    if (v22 == 1)
    {
      *(_BYTE *)v5 = (_BYTE)v21;
      v11 = 1;
      *(_DWORD *)(v5 + 16) = 1;
LABEL_10:
      ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34D4020[v11])(&v19, &v21);
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  LOBYTE(v19) = 0;
  v20 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v21, &v19);
  if (v20)
  {
    v11 = v22;
    if (!v22)
    {
      v13 = v21;
      v21 = 0;
      v14 = v19;
      *(_QWORD *)v5 = v13;
      *(_QWORD *)(v5 + 8) = v14;
      *(_DWORD *)(v5 + 16) = 0;
      goto LABEL_10;
    }
LABEL_14:
    v18 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v18);
  }
  *(_BYTE *)v5 = 13;
  *(_DWORD *)(v5 + 16) = 1;
  v11 = v22;
  if (v22 != -1)
    goto LABEL_10;
LABEL_11:
  v15 = v23;
  v23 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }
  return kdebug_trace();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E34D5EE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D5EE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int v53;
  char v54;
  _QWORD v55[2];
  char v56;
  WTF *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (v4 = (WTF::StringImpl *)*a2) == 0)
  {
LABEL_43:
    v59 = 0uLL;
    WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(v2, (uint64_t)&v59);
    v27 = (WTF::StringImpl **)&v59;
    goto LABEL_44;
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v29 = *a2;
        v30 = a2[1];
        v31 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v31)
        {
          if (v30)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
        }
      }
    }
LABEL_39:
    v47 = *a2;
    v48 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v49 = a2[3];
    if (v49)
    {
      if (v48)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47);
        v50 = *a2;
        v48 = a2[1];
        v49 = a2[3];
LABEL_42:
        *a2 = 0;
        a2[1] = 0;
        if (v49)
        {
          if (v48)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v50);
        }
        goto LABEL_43;
      }
    }
    else
    {
      v48 = 0;
    }
    v50 = 0;
    goto LABEL_42;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v57 = 0;
  v58 = 0;
  if (v9 >= 0x1745)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::TargetedElementInfo>((uint64_t)&v59, a2);
      if (!v78)
        goto LABEL_38;
      v32 = HIDWORD(v58);
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>((unsigned int *)&v57, (unint64_t)&v59);
      }
      else
      {
        v33 = (char *)v57 + 176 * HIDWORD(v58);
        v34 = v59;
        v35 = v60;
        v36 = v61;
        *((_DWORD *)v33 + 12) = v62;
        *((_OWORD *)v33 + 1) = v35;
        *((_OWORD *)v33 + 2) = v36;
        *(_OWORD *)v33 = v34;
        v37 = v63;
        v63 = 0;
        *((_QWORD *)v33 + 7) = v37;
        v38 = v64;
        v64 = 0;
        *((_QWORD *)v33 + 8) = v38;
        v39 = v65;
        v65 = 0;
        *((_QWORD *)v33 + 10) = 0;
        *((_QWORD *)v33 + 11) = 0;
        *((_QWORD *)v33 + 9) = v39;
        v40 = v66;
        v66 = 0;
        *((_QWORD *)v33 + 10) = v40;
        LODWORD(v40) = v67;
        v67 = 0;
        *((_DWORD *)v33 + 22) = v40;
        LODWORD(v40) = v68;
        v68 = 0;
        *((_DWORD *)v33 + 23) = v40;
        v41 = v69;
        v42 = v70;
        v33[128] = v71;
        *((_OWORD *)v33 + 6) = v41;
        *((_OWORD *)v33 + 7) = v42;
        *((_QWORD *)v33 + 17) = 0;
        *((_QWORD *)v33 + 18) = 0;
        v43 = v72;
        v72 = 0;
        *((_QWORD *)v33 + 17) = v43;
        LODWORD(v43) = v73;
        v73 = 0;
        *((_DWORD *)v33 + 36) = v43;
        LODWORD(v43) = v74;
        v74 = 0;
        *((_DWORD *)v33 + 37) = v43;
        *((_QWORD *)v33 + 19) = 0;
        v44 = v75;
        v75 = 0;
        *((_QWORD *)v33 + 19) = v44;
        LODWORD(v44) = v76;
        *((_WORD *)v33 + 82) = v77;
        *((_DWORD *)v33 + 40) = v44;
        HIDWORD(v58) = v32 + 1;
      }
      if (v78)
        WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v59, v4);
      if (!--v9)
      {
        LODWORD(v9) = v58;
        v24 = HIDWORD(v58);
        v23 = v57;
        if (v58 <= HIDWORD(v58))
          goto LABEL_20;
        v45 = v57;
        if (HIDWORD(v58))
        {
          if (HIDWORD(v58) >= 0x1745D18)
          {
            __break(0xC471u);
            return;
          }
          v46 = WTF::fastMalloc((WTF *)(176 * HIDWORD(v58)));
          LODWORD(v9) = 176 * v24 / 0xB0;
          if ((WTF::StringImpl *)v46 == v23)
          {
            v45 = v23;
          }
          else
          {
            v45 = (WTF *)v46;
            WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(v23, (WTF::StringImpl *)((char *)v23 + 176 * v24), v46);
          }
        }
        if (v23)
        {
          if (v45 == v23)
          {
            LODWORD(v9) = 0;
            v45 = 0;
          }
          WTF::fastFree(v23, v4);
        }
        v23 = v45;
        goto LABEL_20;
      }
    }
  }
  if (v9)
  {
    LODWORD(v58) = 176 * (int)v9 / 0xB0u;
    v57 = (WTF *)WTF::fastMalloc((WTF *)(176 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TargetedElementInfo>((uint64_t)&v59, a2);
      if (!v78)
        break;
      v10 = HIDWORD(v58);
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>((unsigned int *)&v57, (unint64_t)&v59);
      }
      else
      {
        v11 = (char *)v57 + 176 * HIDWORD(v58);
        v12 = v59;
        v13 = v60;
        v14 = v61;
        *((_DWORD *)v11 + 12) = v62;
        *((_OWORD *)v11 + 1) = v13;
        *((_OWORD *)v11 + 2) = v14;
        *(_OWORD *)v11 = v12;
        v15 = v63;
        v63 = 0;
        *((_QWORD *)v11 + 7) = v15;
        v16 = v64;
        v64 = 0;
        *((_QWORD *)v11 + 8) = v16;
        v17 = v65;
        v65 = 0;
        *((_QWORD *)v11 + 10) = 0;
        *((_QWORD *)v11 + 11) = 0;
        *((_QWORD *)v11 + 9) = v17;
        v18 = v66;
        v66 = 0;
        *((_QWORD *)v11 + 10) = v18;
        LODWORD(v18) = v67;
        v67 = 0;
        *((_DWORD *)v11 + 22) = v18;
        LODWORD(v18) = v68;
        v68 = 0;
        *((_DWORD *)v11 + 23) = v18;
        v19 = v69;
        v20 = v70;
        v11[128] = v71;
        *((_OWORD *)v11 + 6) = v19;
        *((_OWORD *)v11 + 7) = v20;
        *((_QWORD *)v11 + 17) = 0;
        *((_QWORD *)v11 + 18) = 0;
        v21 = v72;
        v72 = 0;
        *((_QWORD *)v11 + 17) = v21;
        LODWORD(v21) = v73;
        v73 = 0;
        *((_DWORD *)v11 + 36) = v21;
        LODWORD(v21) = v74;
        v74 = 0;
        *((_DWORD *)v11 + 37) = v21;
        *((_QWORD *)v11 + 19) = 0;
        v22 = v75;
        v75 = 0;
        *((_QWORD *)v11 + 19) = v22;
        LODWORD(v22) = v76;
        *((_WORD *)v11 + 82) = v77;
        *((_DWORD *)v11 + 40) = v22;
        HIDWORD(v58) = v10 + 1;
      }
      if (v78)
        WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v59, v4);
      if (!--v9)
      {
        v23 = v57;
        LODWORD(v9) = v58;
        v24 = HIDWORD(v58);
        goto LABEL_20;
      }
    }
LABEL_38:
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
    goto LABEL_39;
  }
  v24 = 0;
  v23 = 0;
LABEL_20:
  v57 = 0;
  v58 = 0;
  v56 = 1;
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
  v55[0] = 0;
  v55[1] = 0;
  v51 = v23;
  v52 = v9;
  v53 = v24;
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v25);
  v54 = 1;
  WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(v2, (uint64_t)&v51);
  v27 = &v51;
LABEL_44:
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
}

void IPC::Decoder::decode<WebCore::TargetedElementInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 176))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

__n128 WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 176 * a1[3];
  v5 = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)v4 = v5;
  v8 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v8;
  v9 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v9;
  v10 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v4 + 72) = v10;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v11 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v4 + 80) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v4 + 88) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v4 + 92) = v11;
  result = *(__n128 *)(v3 + 96);
  v13 = *(_OWORD *)(v3 + 112);
  *(_BYTE *)(v4 + 128) = *(_BYTE *)(v3 + 128);
  *(__n128 *)(v4 + 96) = result;
  *(_OWORD *)(v4 + 112) = v13;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  v14 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v4 + 136) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v14;
  *(_QWORD *)(v4 + 152) = 0;
  v15 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v4 + 152) = v15;
  LODWORD(v15) = *(_DWORD *)(v3 + 160);
  *(_WORD *)(v4 + 164) = *(_WORD *)(v3 + 164);
  *(_DWORD *)(v4 + 160) = v15;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 176 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x1745D18)
    {
      __break(0xC471u);
      JUMPOUT(0x197386904);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 176 * *((unsigned int *)result + 3));
    v5 = 176 * a2;
    v6 = WTF::fastMalloc((WTF *)(176 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0xB0;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  for (; result != a2; a3 += 176)
  {
    v5 = *(_OWORD *)result;
    v6 = *((_OWORD *)result + 1);
    v7 = *((_OWORD *)result + 2);
    *(_DWORD *)(a3 + 48) = *((_DWORD *)result + 12);
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)a3 = v5;
    v8 = *((_QWORD *)result + 7);
    *((_QWORD *)result + 7) = 0;
    *(_QWORD *)(a3 + 56) = v8;
    v9 = *((_QWORD *)result + 8);
    *((_QWORD *)result + 8) = 0;
    *(_QWORD *)(a3 + 64) = v9;
    v10 = *((_QWORD *)result + 9);
    *((_QWORD *)result + 9) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    v11 = *((_QWORD *)result + 10);
    *((_QWORD *)result + 10) = 0;
    *(_QWORD *)(a3 + 80) = v11;
    LODWORD(v11) = *((_DWORD *)result + 22);
    *((_DWORD *)result + 22) = 0;
    *(_DWORD *)(a3 + 88) = v11;
    LODWORD(v11) = *((_DWORD *)result + 23);
    *((_DWORD *)result + 23) = 0;
    *(_DWORD *)(a3 + 92) = v11;
    v12 = *((_OWORD *)result + 6);
    v13 = *((_OWORD *)result + 7);
    *(_BYTE *)(a3 + 128) = *((_BYTE *)result + 128);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 112) = v13;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    v14 = *((_QWORD *)result + 17);
    *((_QWORD *)result + 17) = 0;
    *(_QWORD *)(a3 + 136) = v14;
    LODWORD(v14) = *((_DWORD *)result + 36);
    *((_DWORD *)result + 36) = 0;
    *(_DWORD *)(a3 + 144) = v14;
    LODWORD(v14) = *((_DWORD *)result + 37);
    *((_DWORD *)result + 37) = 0;
    *(_DWORD *)(a3 + 148) = v14;
    *(_QWORD *)(a3 + 152) = 0;
    v15 = *((_QWORD *)result + 19);
    *((_QWORD *)result + 19) = 0;
    *(_QWORD *)(a3 + 152) = v15;
    LODWORD(v15) = *((_DWORD *)result + 40);
    *(_WORD *)(a3 + 164) = *((_WORD *)result + 82);
    *(_DWORD *)(a3 + 160) = v15;
    WebCore::TargetedElementInfo::~TargetedElementInfo(result, a2);
    result = (WTF::StringImpl *)(v16 + 176);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WebCore::TargetedElementInfo *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WebCore::TargetedElementInfo **)a1;
    v5 = 176 * v3;
    do
    {
      WebCore::TargetedElementInfo::~TargetedElementInfo(v4, a2);
      v4 = (WebCore::TargetedElementInfo *)(v6 + 176);
      v5 -= 176;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a1[1];
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    CFRetain(*(CFTypeRef *)(v4 - 8));
    v20 = 0;
    v21 = 0;
    v6 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v6)
    {
LABEL_9:
      v16 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
      CFRelease(*(CFTypeRef *)(v4 - 8));
      CFRelease(*(CFTypeRef *)(v4 - 8));
      return;
    }
    if (!(v6 >> 29))
    {
      v7 = WTF::fastMalloc((WTF *)(8 * v6));
      LODWORD(v21) = v6;
      v20 = v7;
      v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        v9 = v7;
        v10 = 0;
        v11 = *(__int128 **)a2;
        v12 = 176 * v8;
        do
        {
          v13 = v10;
          v14 = API::Object::newObject(0xD0uLL, 22);
          v15 = API::TargetedElementInfo::TargetedElementInfo(v14, v4 - 16, v11);
          v10 = v13 + 1;
          *(_QWORD *)(v9 + 8 * v13) = v15;
          v11 += 11;
          v12 -= 176;
        }
        while (v12);
        HIDWORD(v21) = v13 + 1;
      }
      goto LABEL_9;
    }
    __break(0xC471u);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v18 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 16))(v18, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2467;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34D5F08;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5F08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5F08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3;
  WTF::MachSendRight *result;
  uint64_t v5;
  _BYTE v6[72];
  char v7;

  if (!a2
    || !*(_QWORD *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6), !v7))
  {
    v6[0] = 0;
    v6[64] = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2337;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5F30;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5F30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5F30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[80];
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[88];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WebCore::TextExtraction::Item>(a2, (uint64_t)v19);
  v5 = v23;
  v13[0] = 0;
  if (v23)
  {
    v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v19);
    v15 = v20;
    v16 = v21;
    v6 = v22;
    v21 = 0;
    v22 = 0;
    v17 = v6;
    v5 = 1;
  }
  v18 = v5;
  std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v4);
  if (v18
    || (v10 = (void *)*a2, v11 = a2[1], *a2 = 0, a2[1] = 0, (v12 = a2[3]) != 0)
    && v11
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v12 + 16))(v12, v10), v18))
  {
    v8 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v10);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v4[0] = 0;
  v5 = 0;
  v7 = 0u;
  v6 = 0u;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v2);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v5])(&v8, v4);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  char v5;

  if (*(_BYTE *)(a1 + 120))
  {
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, a2);
    v3 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v3])(&v5, a1);
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AddConsoleMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2100;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  v8 = *a4;
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1342;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v11 = *a3;
  *a3 = 0;
  LOBYTE(v10) = *((_BYTE *)a3 + 8);
  v12 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = &off_1E34D5F58;
  *(_QWORD *)(v12 + 8) = v11;
  *(_BYTE *)(v12 + 16) = v10;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, a5, (uint64_t)v18, 1);
  if (v19)
  {
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, (int *)v2[1]);
  IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(a1, (uint64_t)v2[2]);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, (int *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D5F58;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5F58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::ScrollingTree *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WebCore::ScrollingTree *result)
{
  uint64_t v1;
  WebKit::RemoteScrollingCoordinatorProxy *v2;
  BOOL v3;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::RemoteScrollingCoordinatorProxy **)(v1 + 8);
    if (v2)
      v3 = *((_BYTE *)result + 16) == 0;
    else
      v3 = 1;
    if (!v3)
      return WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(v2);
  }
  return result;
}

uint64_t *WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>(uint64_t *result, uint64_t a2, int **a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  char v23;
  uint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;

  v5 = result;
  if (!*(_QWORD *)(a2 + 144))
  {
    *(_BYTE *)result = 1;
    *((_DWORD *)result + 8) = 1;
    return result;
  }
  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 144);
  v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3692, a4, &v27, (uint64_t *)&v26);
  IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v26, a3);
  IPC::Connection::sendSyncMessage(v10, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, a5);
  if (v25)
  {
    if (v25 == 1)
    {
      *(_BYTE *)v5 = (_BYTE)v24;
      v11 = 1;
      *((_DWORD *)v5 + 8) = 1;
LABEL_10:
      ((void (*)(_QWORD *, uint64_t **))off_1E34D4020[v11])(v21, &v24);
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  LOBYTE(v21[0]) = 0;
  v23 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v24, (uint64_t)v21);
  if (v23)
  {
    v11 = v25;
    if (!v25)
    {
      v13 = v24;
      v24 = 0;
      v14 = v21[0];
      v15 = v22;
      *v5 = (uint64_t)v13;
      v5[1] = v14;
      v5[2] = v21[1];
      *((_DWORD *)v5 + 6) = v15;
      *((_DWORD *)v5 + 8) = 0;
      goto LABEL_10;
    }
LABEL_14:
    v19 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v19, v20);
  }
  *(_BYTE *)v5 = 13;
  *((_DWORD *)v5 + 8) = 1;
  v11 = v25;
  if (v25 != -1)
    goto LABEL_10;
LABEL_11:
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v12);
    WTF::fastFree(v17, v18);
  }
  return (uint64_t *)kdebug_trace();
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(uint64_t *a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  WTF *v7;
  int v8;
  char v9;

  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(a1, &v7);
  std::__optional_storage_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>>(a2, (uint64_t)&v7);
  if (v9)
  {
    v5 = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, int **a2)
{
  int v4;

  v4 = **a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, (uint64_t *)a2[1]);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2[2], a2[2][3]);
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  unint64_t v5;
  void *v6;
  WTF *v7;
  int v8;
  char v9;

  result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v7);
  if (v9)
  {
    result = (WTF *)IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v7, v5, (uint64_t)a2);
    if (v9)
    {
      result = v7;
      if (v7)
      {
        v7 = 0;
        v8 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v4);
        result = v13;
        a4 = v15;
        a2 = *v13;
        a3 = v13[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v11 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v14 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v14;
    }
    goto LABEL_12;
  }
  v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_QWORD *)a4 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a4 + 8) = v10;
  *(_DWORD *)(a4 + 16) = v9;
  v11 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 24) = v11;
  return result;
}

uint64_t std::__optional_storage_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
    {
      result = WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(result, (uint64_t *)a2);
      *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    }
  }
  else if (*(_BYTE *)(result + 24))
  {
    result = *(_QWORD *)result;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v4 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(result + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(result + 12) = v4;
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

WTF *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *result;
  WTF *v6;
  uint64_t v7;

  v2 = *a1;
  v6 = *(WTF **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = v3;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v6);
  result = v6;
  if (v6)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::UpdateRemotePageAccessibilityOffset &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::UpdateRemotePageAccessibilityOffset&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (v5)
    {
      v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1344), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(_QWORD *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(*(_QWORD *)(v7 + 24), *(_QWORD *)a3, *(_QWORD *)(v7 + 16), *(_BYTE *)(a3 + 8));
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(*(_QWORD *)(a1 + 208), *(_QWORD *)a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), *(_BYTE *)(a3 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2486;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2339;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D5F80;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

char *IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)a2 + 48 * v6;
    v9 = v7;
    do
    {
      v10 = *v9;
      v9 += 6;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
      result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(a1, v7 + 2);
      v7 = v9;
    }
    while (v9 != (_QWORD *)v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5F80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5F80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    v5 = *(_QWORD *)a1 + 48;
    do
    {
      v5 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2)+ 64;
      v4 -= 64;
    }
    while (v4);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5FA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5FA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2288;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34D5FD0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D5FD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D5FD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<double>>(a2), v4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartObservingNowPlayingMetadata>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2450;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopObservingNowPlayingMetadata>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2458;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

_DWORD *WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(_DWORD *result, _QWORD **a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  v3 = result;
  if (*a2)
  {
    v4 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      v3[2] = v4;
      *(_QWORD *)v3 = v5;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = (char *)result;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((_DWORD *)v9 != result)
  {
    do
    {
      v10 = *(unsigned int ***)(*(_QWORD *)v6 + 8);
      if (v10)
      {
        result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*(_QWORD *)v6 + 8), *(_QWORD *)(*(_QWORD *)v6 + 8));
        v11 = *v10;
        if (*v10)
        {
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
      }
      else
      {
        v11 = 0;
      }
      v13 = v3[3];
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v13) = v11;
      v3[3] = v13 + 1;
      while (1)
      {
        v6 += 8;
        if (v6 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_19;
      }
      v6 = v8;
LABEL_19:
      ;
    }
    while (v6 != (char *)v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::nowPlayingMetadataChanged(WebCore::NowPlayingMetadata const&)::$_0,void,WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8));
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::frameNameChanged(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  char v14;
  IPC::Encoder *v15;

  v3 = *(_QWORD *)(a2 + 144);
  if (v3 && v3 != *((_QWORD *)result + 1))
  {
    v6 = (uint64_t *)*((_QWORD *)result + 2);
    v7 = (uint64_t *)*((_QWORD *)result + 3);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 2211;
    *(_QWORD *)(v8 + 8) = a3;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v15 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, v6);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v7);
    LOBYTE(v13) = 0;
    v14 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)&v13, 1);
    if (v14)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CloseCurrentTypingCommand>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2136;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::TextAnimationController::document(uint64_t this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::FocusController *v9;

  v2 = (_QWORD *)this;
  if (!a2 || (v3 = *(_QWORD *)(a2 + 8)) == 0 || (v4 = *(WebCore::Page **)(v3 + 32)) == 0)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  ++*(_DWORD *)v4;
  WebCore::Page::checkedFocusController(v4);
  v5 = WebCore::FocusController::focusedOrMainFrame(v9);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      this = 286;
      __break(0xC471u);
      return this;
    }
    --*(_DWORD *)v9;
  }
  if (v5)
  {
    v8 = *(_QWORD *)(v5 + 296);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    *v2 = v8;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  else
  {
    *v2 = 0;
  }
  return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
}

void sub_1973887EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  _DWORD *v10;

  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x19738882CLL);
    }
    --*a10;
  }
  WTF::RefCounted<WebCore::Page>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::TextAnimationController::unreplacedRangeForSessionWithID@<X0>(const WTF::UUID **this@<X0>, const WTF::UUID *a2@<X1>, uint64_t a3@<X8>)
{
  const WTF::UUID *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  BOOL v18;
  char *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33[2];
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 v40;
  uint64_t v41;

  WebKit::TextAnimationController::contextRangeForSessionWithID(&v36, *this, a2);
  if (!v40)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
  }
  v6 = this[3];
  if (!v6)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
LABEL_25:
    *(_QWORD *)a3 = v36;
    *(_DWORD *)(a3 + 8) = v37;
    v28 = v38;
    v36 = 0;
    v38 = 0;
    *(_QWORD *)(a3 + 16) = v28;
    *(_DWORD *)(a3 + 24) = v39;
    *(_BYTE *)(a3 + 32) = 1;
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
  }
  v7 = *((_DWORD *)v6 - 2);
  LODWORD(v33[0]) = -1640531527;
  WORD2(v33[0]) = 0;
  BYTE6(v33[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(v33, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v33);
  v9 = *(_QWORD *)a2;
  v10 = *((_QWORD *)a2 + 1);
  v11 = result & v7;
  v12 = (uint64_t *)((char *)v6 + 48 * (result & v7));
  v13 = *v12;
  v14 = v12[1];
  if (v14 != v10 || v13 != v9)
  {
    v16 = 1;
    while (v13 | v14)
    {
      v11 = (v11 + v16) & v7;
      v17 = (uint64_t *)((char *)v6 + 48 * v11);
      v13 = *v17;
      v14 = v17[1];
      v18 = v14 == v10 && v13 == v9;
      ++v16;
      if (v18)
        goto LABEL_14;
    }
    v27 = v40;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (!v27)
      return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
    goto LABEL_25;
  }
LABEL_14:
  v19 = (char *)v6 + 48 * v11;
  if (v19[40])
  {
    v20 = (WTF::StringImpl *)*((_QWORD *)v19 + 4);
    if (v20)
      *(_DWORD *)v20 += 2;
    if (v40)
    {
      result = WebCore::resolveCharacterRange();
      if (v40)
      {
        v21 = v36;
        v22 = v38;
        *(_DWORD *)(v36 + 24) += 2;
        *(_DWORD *)(v22 + 24) += 2;
        v23 = v39;
        v32 = v39;
        v24 = v34;
        *(_DWORD *)(v34 + 24) += 2;
        v41 = v21;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v41);
        v25 = v35;
        v30 = v35;
        v29 = 0;
        *(_QWORD *)a3 = v24;
        *(_DWORD *)(a3 + 8) = v25;
        v31 = 0;
        *(_QWORD *)(a3 + 16) = v22;
        *(_DWORD *)(a3 + 24) = v23;
        *(_BYTE *)(a3 + 32) = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v34);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v33);
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v26);
          else
            *(_DWORD *)v20 -= 2;
        }
        return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
      }
    }
  }
  __break(1u);
  return result;
}

void sub_197388A90(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  WTF::StringImpl *v17;

  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::TextAnimationController::contextRangeForSessionWithID(_BYTE *this, const WTF::UUID *a2, const WTF::UUID *a3)
{
  uint64_t v3;
  WebCore::Page *v4;

  if (a2 && (v3 = *((_QWORD *)a2 + 1)) != 0 && (v4 = *(WebCore::Page **)(v3 + 32)) != 0)
  {
    ++*(_DWORD *)v4;
    WebCore::Page::contextRangeForSessionWithID(v4, a3);
    return WTF::RefCounted<WebCore::Page>::deref(v4);
  }
  else
  {
    *this = 0;
    this[32] = 0;
  }
  return this;
}

void sub_197388B2C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::TextAnimationController::contextRangeForTextAnimationID(WebKit::TextAnimationController *this, const WTF::UUID *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  const Range *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  WebKit::TextAnimationController *v88;
  WTF *v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 5);
  if (!v6)
    goto LABEL_20;
  v7 = *(_DWORD *)(v6 - 8);
  LODWORD(v94) = -1640531527;
  WORD2(v94) = 0;
  BYTE6(v94) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v94, a3);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v94);
  v10 = *a3;
  v11 = a3[1];
  v12 = v8 & v7;
  v13 = (uint64_t *)(v6 + 32 * v12);
  v14 = *v13;
  v15 = v13[1];
  if (v15 == v11 && v14 == v10)
  {
LABEL_13:
    v20 = v6 + 32 * v12;
    v21 = *((_QWORD *)a2 + 5);
    if (!v21)
    {
LABEL_18:
      if (v21 != v20)
      {
        WebCore::makeSimpleRange(*(WebCore **)(v20 + 16), v9);
        *(_QWORD *)this = v94;
        *((_DWORD *)this + 2) = DWORD2(v94);
        v22 = v95;
        *(_QWORD *)&v94 = 0;
        v95 = 0;
        *((_QWORD *)this + 2) = v22;
        *((_DWORD *)this + 6) = v96;
        *((_BYTE *)this + 32) = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v95);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v94);
        return;
      }
      goto LABEL_20;
    }
LABEL_17:
    v21 += 32 * *(unsigned int *)(v21 - 4);
    goto LABEL_18;
  }
  v17 = 1;
  while (v14 | v15)
  {
    v12 = ((_DWORD)v12 + v17) & v7;
    v18 = (uint64_t *)(v6 + 32 * v12);
    v14 = *v18;
    v15 = v18[1];
    v19 = v15 == v11 && v14 == v10;
    ++v17;
    if (v19)
      goto LABEL_13;
  }
  v21 = *((_QWORD *)a2 + 5);
  if (v21)
  {
    v20 = v21 + 32 * *(unsigned int *)(v21 - 4);
    goto LABEL_17;
  }
LABEL_20:
  v23 = *((_QWORD *)a2 + 1);
  if (!v23)
  {
    v26 = 0;
    v24 = 0;
LABEL_29:
    v25 = (_QWORD *)(v23 + 32 * v24);
    goto LABEL_30;
  }
  v24 = *(unsigned int *)(v23 - 4);
  v25 = (_QWORD *)(v23 + 32 * v24);
  if (!*(_DWORD *)(v23 - 12))
  {
    v26 = (_QWORD *)(v23 + 32 * v24);
    goto LABEL_29;
  }
  v26 = (_QWORD *)*((_QWORD *)a2 + 1);
  if ((_DWORD)v24)
  {
    v27 = 32 * v24;
    v26 = (_QWORD *)*((_QWORD *)a2 + 1);
    while (*v26 <= 1uLL)
    {
      v26 += 4;
      v27 -= 32;
      if (!v27)
      {
        v26 = v25;
        break;
      }
    }
  }
LABEL_30:
  if (v23)
    v28 = (_QWORD *)(v23 + 32 * *(unsigned int *)(v23 - 4));
  else
    v28 = 0;
  if (v28 != v26)
  {
    while (1)
    {
      v94 = *(_OWORD *)v26;
      v29 = *((_QWORD *)a2 + 1);
      if (!v29)
        goto LABEL_47;
      v30 = *(_DWORD *)(v29 - 8);
      LODWORD(v90) = -1640531527;
      WORD2(v90) = 0;
      BYTE6(v90) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v90, &v94);
      v31 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v90) & v30;
      v32 = (uint64_t *)(v29 + 32 * v31);
      v33 = *v32;
      v34 = v32[1];
      if (v34 != *((_QWORD *)&v94 + 1) || v33 != (_QWORD)v94)
        break;
LABEL_46:
      v39 = *(_QWORD *)(v29 + 32 * v31 + 16);
      v40 = *(_QWORD *)(v29 + 32 * v31 + 24);
LABEL_48:
      if (v40 == a3[1] && v39 == *a3)
      {
        WebKit::TextAnimationController::unreplacedRangeForSessionWithID((const WTF::UUID **)a2, (const WTF::UUID *)&v94, (uint64_t)this);
        return;
      }
      v42 = v26 + 4;
      v26 = v25;
      if (v42 != v25)
      {
        v26 = v42;
        while (*v26 <= 1uLL)
        {
          v26 += 4;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
      if (v26 == v28)
        goto LABEL_58;
    }
    v36 = 1;
    while (v33 | v34)
    {
      v31 = ((_DWORD)v31 + v36) & v30;
      v37 = (uint64_t *)(v29 + 32 * v31);
      v33 = *v37;
      v34 = v37[1];
      v38 = v34 == *((_QWORD *)&v94 + 1) && v33 == (_QWORD)v94;
      ++v36;
      if (v38)
        goto LABEL_46;
    }
LABEL_47:
    v39 = 0;
    v40 = 0;
    goto LABEL_48;
  }
LABEL_58:
  v43 = *((_QWORD *)a2 + 2);
  if (!v43)
  {
    v46 = 0;
    v44 = 0;
LABEL_68:
    v45 = (_QWORD *)(v43 + 32 * v44);
    goto LABEL_69;
  }
  v44 = *(unsigned int *)(v43 - 4);
  v45 = (_QWORD *)(v43 + 32 * v44);
  if (!*(_DWORD *)(v43 - 12))
  {
    v46 = (_QWORD *)(v43 + 32 * v44);
    goto LABEL_68;
  }
  v46 = (_QWORD *)*((_QWORD *)a2 + 2);
  if ((_DWORD)v44)
  {
    v47 = 32 * v44;
    v46 = (_QWORD *)*((_QWORD *)a2 + 2);
    while (*v46 <= 1uLL)
    {
      v46 += 4;
      v47 -= 32;
      if (!v47)
      {
        v46 = v45;
        break;
      }
    }
  }
LABEL_69:
  if (v43)
    v48 = (_QWORD *)(v43 + 32 * *(unsigned int *)(v43 - 4));
  else
    v48 = 0;
  if (v48 != v46)
  {
    v88 = this;
    do
    {
      v93 = *(_OWORD *)v46;
      v49 = *((_QWORD *)a2 + 2);
      if (v49)
      {
        v50 = v48;
        v51 = *(_DWORD *)(v49 - 8);
        LODWORD(v94) = -1640531527;
        WORD2(v94) = 0;
        BYTE6(v94) = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v94, &v93);
        v52 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v94) & v51;
        v53 = (uint64_t *)(v49 + 32 * v52);
        v54 = *v53;
        v55 = v53[1];
        v56 = v55 == *((_QWORD *)&v93 + 1) && v54 == (_QWORD)v93;
        v48 = v50;
        if (v56)
        {
LABEL_86:
          v60 = v49 + 32 * v52;
          v61 = *(unsigned int *)(v60 + 28);
          if ((_DWORD)v61)
          {
            if (!(v61 >> 27))
            {
              v62 = WTF::fastMalloc((WTF *)(32 * v61));
              v64 = *(unsigned int *)(v60 + 28);
              if ((_DWORD)v64)
              {
                v65 = *(__int128 **)(v60 + 16);
                v66 = 32 * v64;
                v67 = (_OWORD *)v62;
                do
                {
                  v68 = *v65;
                  v69 = v65[1];
                  v65 += 2;
                  *v67 = v68;
                  v67[1] = v69;
                  v67 += 2;
                  v66 -= 32;
                }
                while (v66);
              }
              v70 = (_QWORD *)(v62 + 32 * v61);
              v89 = (WTF *)v62;
              v71 = (_QWORD *)v62;
              while (1)
              {
                if (v71[1] == a3[1] && *v71 == *a3)
                {
                  WebKit::TextAnimationController::contextRangeForSessionWithID(&v94, *(const WTF::UUID **)a2, (const WTF::UUID *)&v93);
                  if ((_BYTE)v97)
                  {
                    WebCore::resolveCharacterRange();
                    *(_QWORD *)v88 = v90;
                    *((_DWORD *)v88 + 2) = DWORD2(v90);
                    v81 = v91;
                    *(_QWORD *)&v90 = 0;
                    v91 = 0;
                    *((_QWORD *)v88 + 2) = v81;
                    *((_DWORD *)v88 + 6) = v92;
                    *((_BYTE *)v88 + 32) = 1;
                    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v91);
                    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v90);
                    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94);
                    WTF::fastFree(v89, v82);
                    return;
                  }
                  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94);
                }
                v71 += 4;
                if (v71 == v70)
                {
                  WTF::fastFree(v89, v63);
                  this = v88;
                  v48 = v50;
                  goto LABEL_101;
                }
              }
            }
            __break(0xC471u);
LABEL_136:
            __break(1u);
            return;
          }
        }
        else
        {
          v57 = 1;
          while (v54 | v55)
          {
            v52 = ((_DWORD)v52 + v57) & v51;
            v58 = (uint64_t *)(v49 + 32 * v52);
            v54 = *v58;
            v55 = v58[1];
            v59 = v55 == *((_QWORD *)&v93 + 1) && v54 == (_QWORD)v93;
            ++v57;
            if (v59)
              goto LABEL_86;
          }
        }
      }
LABEL_101:
      v73 = v46 + 4;
      v46 = v45;
      if (v73 != v45)
      {
        v46 = v73;
        while (*v46 <= 1uLL)
        {
          v46 += 4;
          if (v46 == v45)
          {
            v46 = v45;
            break;
          }
        }
      }
    }
    while (v46 != v48);
  }
  v76 = (_QWORD *)*((_QWORD *)a2 + 4);
  v75 = (uint64_t *)((char *)a2 + 32);
  v74 = v76;
  if (v76)
  {
    v77 = *((unsigned int *)v74 - 1);
    v78 = &v74[10 * v77];
    if (*((_DWORD *)v74 - 3))
    {
      v79 = v74;
      if ((_DWORD)v77)
      {
        v80 = 80 * v77;
        v79 = v74;
        while (*v79 <= 1uLL)
        {
          v79 += 10;
          v80 -= 80;
          if (!v80)
          {
            v79 = v78;
            goto LABEL_118;
          }
        }
      }
      goto LABEL_118;
    }
    v79 = &v74[10 * v77];
  }
  else
  {
    v79 = 0;
    LODWORD(v77) = 0;
  }
  v78 = &v74[10 * v77];
LABEL_118:
  if (v74)
    v83 = &v74[10 * *((unsigned int *)v74 - 1)];
  else
    v83 = 0;
  while (v79 != v83)
  {
    v90 = *(_OWORD *)v79;
    WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v75, (uint64_t *)&v90, &v94);
    if (!v99)
      goto LABEL_136;
    if (*((_QWORD *)&v94 + 1) == a3[1] && (_QWORD)v94 == *a3)
    {
      v86 = v95;
      *(_DWORD *)(v95 + 24) += 2;
      *(_QWORD *)this = v86;
      *((_DWORD *)this + 2) = v96;
      v87 = v97;
      *(_DWORD *)(v97 + 24) += 2;
      *((_QWORD *)this + 2) = v87;
      *((_DWORD *)this + 6) = v98;
      *((_BYTE *)this + 32) = 1;
      std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94);
      return;
    }
    std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94);
    v85 = v79 + 10;
    v79 = v78;
    if (v85 != v78)
    {
      v79 = v85;
      while (*v79 <= 1uLL)
      {
        v79 += 10;
        if (v79 == v78)
        {
          v79 = v78;
          break;
        }
      }
    }
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 32) = 0;
}

void sub_197389204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v20;

  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a19);
  WTF::fastFree(a12, v20);
  _Unwind_Resume(a1);
}

WTF *WebKit::TextAnimationController::removeTransparentMarkersForSessionID(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  __int128 v10;
  WTF *result;
  WTF *v12;
  int v13;
  unsigned int v14;
  _OWORD v15[3];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 1, (uint64_t *)a2);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v5 += 32 * *(unsigned int *)(v5 - 4);
  if (v5 != v4)
    WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(this, (const WTF::UUID *)(v4 + 16));
  v6 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 2, (uint64_t *)a2);
  WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take((uint64_t *)this + 2, v6, &v12);
  if (v14)
  {
    v8 = v12;
    v9 = 32 * v14;
    do
    {
      v10 = *((_OWORD *)v8 + 1);
      v15[0] = *(_OWORD *)v8;
      v15[1] = v10;
      WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(this, (const WTF::UUID *)v15);
      v8 = (WTF *)((char *)v8 + 32);
      v9 -= 32;
    }
    while (v9);
    WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 4, (uint64_t *)a2, v15);
    if (v16)
      WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(this, (const WTF::UUID *)v15);
    std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
  }
  result = v12;
  if (v12)
  {
    v12 = 0;
    v13 = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

void sub_197389354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  void *v13;

  std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12);
  if (a9)
    WTF::fastFree(a9, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  uint64_t result;
  WebCore::Document *v4;
  _QWORD *v5;
  uint64_t v6;
  WebCore::Document *v7;

  result = WebKit::TextAnimationController::document((uint64_t)&v7, *(_QWORD *)this);
  v4 = v7;
  if (v7)
  {
    if (!*((_QWORD *)v7 + 187))
      WebCore::Document::ensureMarkers(v7);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34D6DB0;
    v5[1] = a2;
    v6 = (uint64_t)v5;
    WebCore::DocumentMarkerController::removeMarkers();
    result = v6;
    if (v6)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return result;
}

void sub_197389448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::TextAnimationController::removeInitialTextAnimation(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebPage *v6;
  _QWORD v7[2];

  result = WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::take((uint64_t *)this + 1, (uint64_t *)a2);
  v7[0] = result;
  v7[1] = v4;
  if (result | v4)
  {
    if (*(_QWORD *)this)
    {
      v5 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v5)
        v6 = (WebKit::WebPage *)(v5 - 16);
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    return (uint64_t)WebKit::WebPage::removeTextAnimationForAnimationID(v6, (const WTF::UUID *)v7);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(a1, a2);
  if (!*a1)
  {
    if (v3)
      goto LABEL_3;
    return 0;
  }
  if ((_QWORD *)(*a1 + 32 * *(unsigned int *)(*a1 - 4)) == v3)
    return 0;
LABEL_3:
  v4 = v3[2];
  WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::UUID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(a1, v3);
  return v4;
}

uint64_t WebKit::TextAnimationController::addInitialTextAnimation(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[120];
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  __n128 v23;
  _QWORD v24[3];

  WTF::UUID::UUID((WTF::UUID *)&v23);
  WebKit::TextAnimationController::unreplacedRangeForSessionWithID((const WTF::UUID **)this, a2, (uint64_t)&v18);
  if (v22)
  {
    if (v18 != v20 || v19 != v21)
    {
      WebKit::TextAnimationController::createTextIndicatorForRange(this, v17);
      if (v17[112])
      {
        if (*(_QWORD *)this)
        {
          v6 = *(_QWORD *)(*(_QWORD *)this + 8);
          if (v6)
            v7 = v6 - 16;
          else
            v7 = 0;
        }
        else
        {
          v7 = 0;
        }
        v14[0] = 0;
        v15 = 0;
        v16 = 0;
        v13 = 0;
        v24[0] = &v23;
        v24[1] = v14;
        v24[2] = v17;
        v9 = *(_QWORD *)(v7 + 32);
        v8 = v7 + 32;
        v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
        IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(v8, (uint64_t)v24, &v13, v10, 0);
        v11 = v13;
        v13 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        WTF::HashMap<WTF::UUID,WTF::UUID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::inlineSet<WTF::UUID const&,WTF::UUID&>((uint64_t *)this + 1, a2, &v23, (uint64_t)v14);
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v5);
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
}

void sub_19738968C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v8 - 120);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::TextAnimationController::createTextIndicatorForRange@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE v14[48];
  WTF *v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)result && (v3 = *(_QWORD *)(*(_QWORD *)result + 8)) != 0 && (v4 = *(_DWORD **)(v3 + 32)) != 0)
  {
    ++*v4;
    *a2 = 0;
    a2[112] = 0;
    WebCore::TextIndicator::createWithRange();
    if (v21)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v14, (const TextIndicatorData *)(v21 + 8));
      std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>((uint64_t)a2, (uint64_t)v14);
      if ((v20 & 0x8000000000000) != 0)
      {
        v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v5);
        }
      }
      v6 = v19;
      v19 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v7 = v18;
      v18 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v8 = v17;
      v17 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v9 = v15;
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v9, v5);
      }
      v10 = (_DWORD *)v21;
      v21 = 0;
      if (v10)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v10);
    }
    return WTF::RefCounted<WebCore::Page>::deref(v4);
  }
  else
  {
    *a2 = 0;
    a2[112] = 0;
  }
  return result;
}

void sub_197389830(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22)
{
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;

  if ((a22 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a21 + 8))(a21);
    else
      --a21[2];
  }
  if (a20)
  {
    if (a20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
    else
      --a20[2];
  }
  if (a19)
  {
    if (a19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a19 + 8))(a19);
    else
      --a19[2];
  }
  if (a16)
    WTF::fastFree(a16, a2);
  v29 = *(_DWORD **)(v24 - 40);
  *(_QWORD *)(v24 - 40) = 0;
  if (v29)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v29);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v23, a2);
  WTF::RefCounted<WebCore::Page>::deref(v22);
  _Unwind_Resume(a1);
}

uint64_t WebKit::TextAnimationController::addDestinationTextAnimation(uint64_t a1, const WTF::UUID *a2, __int128 *a3, uint64_t **a4)
{
  WebCore *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  int v77;
  WTF *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 *v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  char v110;
  WTF::StringImpl *v112;
  __int128 *v113;
  uint64_t **v114;
  uint64_t *v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  _QWORD v124[2];
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  WebCore::Node *v136;
  _BYTE v137[32];
  char v138;
  __int128 v139;
  __int128 v140;
  uint64_t *v141;
  int v142;
  __int16 v143;
  char v144;
  __int128 v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  WTF::UUID::UUID((WTF::UUID *)&v139);
  WebKit::TextAnimationController::contextRangeForSessionWithID(v137, *(const WTF::UUID **)a1, a2);
  if (!v138)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v137);
  WebKit::TextAnimationController::document((uint64_t)&v136, *(_QWORD *)a1);
  v8 = v136;
  if (!v136)
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v137);
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    goto LABEL_24;
  v10 = *(_DWORD *)(v9 - 8);
  LODWORD(v121) = -1640531527;
  WORD2(v121) = 0;
  BYTE6(v121) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v121, a2);
  v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v121);
  v12 = *(_QWORD *)a2;
  v13 = *((_QWORD *)a2 + 1);
  v14 = v11 & v10;
  v15 = (uint64_t *)(v9 + 48 * (v11 & v10));
  v16 = *v15;
  v17 = v15[1];
  if (v17 != v13 || v16 != v12)
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = (v14 + v19) & v10;
      v20 = (uint64_t *)(v9 + 48 * v14);
      v16 = *v20;
      v17 = v20[1];
      v21 = v17 == v13 && v16 == v12;
      ++v19;
      if (v21)
        goto LABEL_15;
    }
LABEL_24:
    v33 = *(_QWORD *)a3;
    v32 = *((_QWORD *)a3 + 1);
    v27 = 1;
    goto LABEL_25;
  }
LABEL_15:
  v22 = v9 + 48 * v14;
  if (!*(_BYTE *)(v22 + 40))
    goto LABEL_138;
  v23 = v22 + 16;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(WTF::StringImpl **)(v23 + 16);
  if (v26)
    *(_DWORD *)v26 += 2;
  v112 = v26;
  v27 = 0;
  v28 = *((_QWORD *)a3 + 1);
  v29 = v25 + v24;
  v30 = v28 >= v25;
  v31 = v28 - v25;
  if (v30)
    v32 = v31;
  else
    v32 = 0;
  if (v30)
    v33 = v29;
  else
    v33 = 0;
LABEL_25:
  if (!v138)
LABEL_138:
    __break(1u);
  v116 = v32;
  v117 = v27;
  WebCore::resolveCharacterRange();
  WebCore::makeRangeSelectingNodeContents(v8, v34);
  v113 = a3;
  v114 = a4;
  v115 = (uint64_t *)(a1 + 24);
  v35 = v134;
  *(_DWORD *)(v134 + 24) += 2;
  v36 = v129;
  v129 = v35;
  v121 = v36;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v121);
  v130 = v135;
  WTF::UUID::UUID((WTF::UUID *)&v121);
  v38 = v121;
  v37 = v122;
  v124[0] = v121;
  v124[1] = v122;
  v39 = v129;
  *(_DWORD *)(v129 + 24) += 2;
  v125 = v39;
  v126 = v130;
  v40 = v131;
  *(_DWORD *)(v131 + 24) += 2;
  v127 = v40;
  v128 = v132;
  v42 = (uint64_t *)(a1 + 32);
  v41 = *(_QWORD *)(a1 + 32);
  if (v41
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(a1 + 32), 0), (v41 = *v42) != 0))
  {
    v43 = *(_DWORD *)(v41 - 8);
  }
  else
  {
    v43 = 0;
  }
  LODWORD(v121) = -1640531527;
  WORD2(v121) = 0;
  BYTE6(v121) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v121, a2);
  v44 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v121) & v43;
  v45 = (_QWORD *)(v41 + 80 * v44);
  v47 = *v45;
  v46 = v45[1];
  if (*(_OWORD *)v45 != 0)
  {
    v48 = 0;
    v49 = 1;
    do
    {
      if (v46 == *((_QWORD *)a2 + 1) && v47 == *(_QWORD *)a2)
      {
        std::optional<WebKit::TextAnimationUnstyledRangeData>::operator=[abi:sn180100]<WebKit::TextAnimationUnstyledRangeData&,void>((uint64_t)(v45 + 2), (uint64_t)v124);
        goto LABEL_50;
      }
      if (!(v47 ^ 1 | v46))
        v48 = v45;
      v44 = (v44 + v49) & v43;
      v45 = (_QWORD *)(v41 + 80 * v44);
      v47 = *v45;
      v46 = v45[1];
      ++v49;
    }
    while (*(_OWORD *)v45 != 0);
    if (v48)
    {
      *((_BYTE *)v48 + 64) = 0;
      *v48 = 0;
      v48[1] = 0;
      *((_BYTE *)v48 + 16) = 0;
      --*(_DWORD *)(*v42 - 16);
      v45 = v48;
    }
  }
  *(_OWORD *)v45 = *(_OWORD *)a2;
  std::optional<WebKit::TextAnimationUnstyledRangeData>::operator=[abi:sn180100]<WebKit::TextAnimationUnstyledRangeData&,void>((uint64_t)(v45 + 2), (uint64_t)v124);
  v51 = *v42;
  if (*v42)
    v52 = *(_DWORD *)(v51 - 12) + 1;
  else
    v52 = 1;
  *(_DWORD *)(v51 - 12) = v52;
  v53 = *v42;
  if (*v42)
    v54 = *(_DWORD *)(v53 - 12);
  else
    v54 = 0;
  v55 = (*(_DWORD *)(v53 - 16) + v54);
  v56 = *(unsigned int *)(v53 - 4);
  if (v56 <= 0x400)
  {
    if (3 * v56 > 4 * v55)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v56 <= 2 * v55)
LABEL_49:
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand((uint64_t *)(a1 + 32), (uint64_t)v45);
LABEL_50:
  WebKit::TextAnimationController::createTextIndicatorForRange((_DWORD *)a1, &v121);
  if (v123)
  {
    if (*(_QWORD *)a1)
    {
      v58 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (v58)
        v59 = v58 - 16;
      else
        v59 = 0;
    }
    else
    {
      v59 = 0;
    }
    LOBYTE(v119) = 2;
    *(_QWORD *)&v120 = v38;
    *((_QWORD *)&v120 + 1) = v37;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v59 + 24), v59 + 16);
    v60 = *(unsigned int **)(v59 + 24);
    if (v60)
    {
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 + 1, v60));
    }
    v145 = *(_OWORD *)a2;
    v62 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v62 = &off_1E34D6DD8;
    *(_QWORD *)(v62 + 16) = v60;
    *(_OWORD *)(v62 + 32) = v145;
    v118 = v62;
    *(_QWORD *)&v140 = &v139;
    *((_QWORD *)&v140 + 1) = &v119;
    v141 = &v121;
    v64 = *(_QWORD *)(v59 + 32);
    v63 = v59 + 32;
    v65 = (*(uint64_t (**)(uint64_t))(v64 + 56))(v63);
    IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(v63, (uint64_t)&v140, &v118, v65, 0);
    v66 = v118;
    v118 = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    v119 = v139;
    *(_QWORD *)&v120 = v33;
    *((_QWORD *)&v120 + 1) = v116;
    v69 = *(_QWORD *)(a1 + 16);
    v67 = (uint64_t *)(a1 + 16);
    v68 = v69;
    if (v69
      || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v67, 0), (v68 = *v67) != 0))
    {
      v70 = *(_DWORD *)(v68 - 8);
    }
    else
    {
      v70 = 0;
    }
    LODWORD(v140) = -1640531527;
    WORD2(v140) = 0;
    BYTE6(v140) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v140, a2);
    v72 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v140) & v70;
    v73 = v68 + 32 * v72;
    v75 = *(_QWORD *)v73;
    v74 = *(_QWORD *)(v73 + 8);
    if (*(_OWORD *)v73 != 0)
    {
      v76 = 0;
      v77 = 1;
      while (v74 != *((_QWORD *)a2 + 1) || v75 != *(_QWORD *)a2)
      {
        if (!(v75 ^ 1 | v74))
          v76 = (_OWORD *)v73;
        v72 = ((_DWORD)v72 + v77) & v70;
        v73 = v68 + 32 * v72;
        v75 = *(_QWORD *)v73;
        v74 = *(_QWORD *)(v73 + 8);
        ++v77;
        if (*(_OWORD *)v73 == 0)
        {
          if (v76)
          {
            *v76 = 0u;
            v76[1] = 0u;
            --*(_DWORD *)(*v67 - 16);
            v73 = (uint64_t)v76;
          }
          goto LABEL_73;
        }
      }
LABEL_84:
      v86 = (_QWORD *)(v73 + 16);
      v87 = *(unsigned int *)(v73 + 28);
      if ((_DWORD)v87 == *(_DWORD *)(v73 + 24))
      {
        v88 = (__int128 *)WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v119);
        v89 = (_OWORD *)(*(_QWORD *)(v73 + 16) + 32 * *(unsigned int *)(v73 + 28));
        v90 = *v88;
        v91 = v88[1];
      }
      else
      {
        v89 = (_OWORD *)(*v86 + 32 * v87);
        v90 = v119;
        v91 = v120;
      }
      *v89 = v90;
      v89[1] = v91;
      ++*(_DWORD *)(v73 + 28);
      v140 = *v113;
      v92 = *v114;
      if (*v114)
        *(_DWORD *)v92 += 2;
      v141 = v92;
      v93 = *v115;
      if (*v115
        || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v115, 0), (v93 = *v115) != 0))
      {
        v94 = *(_DWORD *)(v93 - 8);
      }
      else
      {
        v94 = 0;
      }
      v142 = -1640531527;
      v143 = 0;
      v144 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v142, a2);
      v95 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v142) & v94;
      v96 = (_QWORD *)(v93 + 48 * v95);
      v98 = *v96;
      v97 = v96[1];
      if (*(_OWORD *)v96 != 0)
      {
        v99 = 0;
        v100 = 1;
        do
        {
          if (v97 == *((_QWORD *)a2 + 1) && v98 == *(_QWORD *)a2)
          {
            std::optional<WebKit::ReplacedRangeAndString>::operator=[abi:sn180100]<WebKit::ReplacedRangeAndString&,void>((uint64_t)(v96 + 2), &v140);
            goto LABEL_113;
          }
          if (!(v98 ^ 1 | v97))
            v99 = v96;
          v95 = (v95 + v100) & v94;
          v96 = (_QWORD *)(v93 + 48 * v95);
          v98 = *v96;
          v97 = v96[1];
          ++v100;
        }
        while (*(_OWORD *)v96 != 0);
        if (v99)
        {
          *((_BYTE *)v99 + 40) = 0;
          *v99 = 0;
          v99[1] = 0;
          *((_BYTE *)v99 + 16) = 0;
          --*(_DWORD *)(*v115 - 16);
          v96 = v99;
        }
      }
      *(_OWORD *)v96 = *(_OWORD *)a2;
      std::optional<WebKit::ReplacedRangeAndString>::operator=[abi:sn180100]<WebKit::ReplacedRangeAndString&,void>((uint64_t)(v96 + 2), &v140);
      v102 = *v115;
      if (*v115)
        v103 = *(_DWORD *)(v102 - 12) + 1;
      else
        v103 = 1;
      *(_DWORD *)(v102 - 12) = v103;
      v104 = *v115;
      if (*v115)
        v105 = *(_DWORD *)(v104 - 12);
      else
        v105 = 0;
      v106 = (*(_DWORD *)(v104 - 16) + v105);
      v107 = *(unsigned int *)(v104 - 4);
      if (v107 > 0x400)
      {
        if (v107 > 2 * v106)
        {
LABEL_113:
          v108 = (WTF::StringImpl *)v141;
          v141 = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
              WTF::StringImpl::destroy(v108, v57);
            else
              *(_DWORD *)v108 -= 2;
          }
          goto LABEL_117;
        }
      }
      else if (3 * v107 > 4 * v106)
      {
        goto LABEL_113;
      }
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v115, (uint64_t)v96);
      goto LABEL_113;
    }
LABEL_73:
    *(_OWORD *)v73 = *(_OWORD *)a2;
    v79 = *(WTF **)(v73 + 16);
    if (v79)
    {
      *(_QWORD *)(v73 + 16) = 0;
      *(_DWORD *)(v73 + 24) = 0;
      WTF::fastFree(v79, v71);
    }
    *(_QWORD *)(v73 + 16) = 0;
    *(_QWORD *)(v73 + 24) = 0;
    v80 = *v67;
    if (*v67)
      v81 = *(_DWORD *)(v80 - 12) + 1;
    else
      v81 = 1;
    *(_DWORD *)(v80 - 12) = v81;
    v82 = *v67;
    if (*v67)
      v83 = *(_DWORD *)(v82 - 12);
    else
      v83 = 0;
    v84 = (*(_DWORD *)(v82 - 16) + v83);
    v85 = *(unsigned int *)(v82 - 4);
    if (v85 > 0x400)
    {
      if (v85 > 2 * v84)
        goto LABEL_84;
    }
    else if (3 * v85 > 4 * v84)
    {
      goto LABEL_84;
    }
    v73 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v67, v73);
    goto LABEL_84;
  }
LABEL_117:
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v121, v57);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v127);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v125);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v131);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v129);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v134);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v133);
  v110 = v117;
  if (!v112)
    v110 = 1;
  if ((v110 & 1) == 0)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, v109);
    else
      *(_DWORD *)v112 -= 2;
  }
  if (v136)
  {
    if (*((_DWORD *)v136 + 6) == 2)
    {
      if ((*((_WORD *)v136 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v136);
    }
    else
    {
      *((_DWORD *)v136 + 6) -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v137);
}

void sub_19738A1D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t *a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  WTF::StringImpl *v50;
  uint64_t v52;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a24, a2);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a15);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a16);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a48);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a46);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v48 - 240));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v48 - 256));
  if (!a10)
    a18 = 1;
  if ((a18 & 1) == 0)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v50);
    else
      *(_DWORD *)a10 -= 2;
  }
  v52 = *(_QWORD *)(v48 - 224);
  if (v52)
  {
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52);
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v48 - 216);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  if (*(_BYTE *)(a1 + 112))
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v4;
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 48, (_DWORD *)(a2 + 48));
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    v7 = *(_DWORD **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v6;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    v9 = *(_DWORD **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v8;
    if (v9)
    {
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[2];
    }
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    v11 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v10;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
    WebCore::Color::operator=();
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  }
  else
  {
    WebCore::TextIndicatorData::TextIndicatorData(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

WTF *WebKit::TextAnimationController::clearAnimationsForSessionID(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  _QWORD *v4;
  WTF *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  WebKit::WebPage *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  WTF *result;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  _OWORD v20[2];
  WTF *v21;
  int v22;
  unsigned int v23;
  _BYTE v24[72];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebKit::TextAnimationController::removeTransparentMarkersForSessionID(this, a2);
  WebKit::TextAnimationController::removeInitialTextAnimation(this, a2);
  v4 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 2, (uint64_t *)a2);
  WTF::HashMap<WTF::UUID,WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Vector<WebKit::TextAnimationRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take((uint64_t *)this + 2, v4, &v21);
  if (v23)
  {
    v5 = v21;
    v6 = 32 * v23;
    do
    {
      v7 = *((_OWORD *)v5 + 1);
      v20[0] = *(_OWORD *)v5;
      v20[1] = v7;
      if (*(_QWORD *)this)
      {
        v8 = *(_QWORD *)(*(_QWORD *)this + 8);
        if (v8)
          v9 = (WebKit::WebPage *)(v8 - 16);
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      WebKit::WebPage::removeTextAnimationForAnimationID(v9, (const WTF::UUID *)v20);
      v5 = (WTF *)((char *)v5 + 32);
      v6 -= 32;
    }
    while (v6);
  }
  v10 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)this + 3, (uint64_t *)a2);
  WTF::HashMap<WTF::UUID,std::optional<WebKit::ReplacedRangeAndString>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::ReplacedRangeAndString>>,WTF::HashTableTraits>::take((uint64_t *)this + 3, (uint64_t)v10, (uint64_t)&v17);
  if (v19)
  {
    v12 = v18;
    v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (uint64_t *)((char *)this + 32);
  v14 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v13, (uint64_t *)a2);
  WTF::HashMap<WTF::UUID,std::optional<WebKit::TextAnimationUnstyledRangeData>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<std::optional<WebKit::TextAnimationUnstyledRangeData>>,WTF::HashTableTraits>::take(v13, (uint64_t)v14, (uint64_t)v24);
  std::__optional_destruct_base<WebKit::TextAnimationUnstyledRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24);
  result = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

void sub_19738A5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  _Unwind_Resume(exception_object);
}

void WebKit::TextAnimationController::enableSourceTextAnimationAfterElementWithID(WebKit::TextAnimationController *this, const WTF::String *a2, const WTF::UUID *a3)
{
  Node *v6;
  uint64_t v7;
  uint64_t v8;
  Node *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  WebCore *v18;
  uint64_t v19;
  int v20;
  char v21;
  _BYTE v22[104];
  uint64_t v23;
  _DWORD *v24;

  WebKit::TextAnimationController::document((uint64_t)&v23, *(_QWORD *)this);
  v7 = v23;
  if (v23)
  {
    v8 = *(_QWORD *)(v23 + 1272);
    if (v8)
    {
      *(_DWORD *)(v8 + 24) += 2;
      WebCore::VisibleSelection::selectionFromContentsOfNode((WebCore::VisibleSelection *)v8, v6);
      WebCore::VisibleSelection::range((WebCore::VisibleSelection *)v22);
      if (v21)
      {
        WebCore::TreeScope::getElementById((WebCore::TreeScope *)(v7 + 96), a2);
        if (v18)
        {
          WebCore::makeRangeSelectingNodeContents(v18, v9);
          v10 = v16;
          if (v14 != v16 || v15 != v17)
          {
            *(_DWORD *)(v16 + 24) += 2;
            v11 = v19;
            v19 = v10;
            v24 = (_DWORD *)v11;
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v24);
            v20 = v17;
          }
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
          v12 = v18;
          v18 = 0;
          if (v12)
          {
            if (*((_DWORD *)v12 + 6) == 2)
            {
              if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v12);
            }
            else
            {
              *((_DWORD *)v12 + 6) -= 2;
            }
          }
        }
        if (!v21)
        {
          __break(1u);
          return;
        }
        WebCore::createLiveRange();
        WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>((uint64_t)&v14, (uint64_t *)this + 5, a3, (uint64_t *)&v24);
        v13 = v24;
        v24 = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v22);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

void sub_19738A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a20);
  if (*(_DWORD *)(v21 + 24) == 2)
  {
    if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v21);
  }
  else
  {
    *(_DWORD *)(v21 + 24) -= 2;
  }
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  _DWORD *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  __int16 v30;
  char v31;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v29 = -1640531527;
  v30 = 0;
  v31 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, a3);
  result = (_DWORD *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 32 * v11);
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v13 == a3[1] && v14 == *a3)
      {
        v19 = *a2;
        if (*a2)
          v20 = *(unsigned int *)(v19 - 4);
        else
          v20 = 0;
        v28 = 0;
        v27 = v19 + 32 * v20;
        goto LABEL_36;
      }
      if (!(v14 ^ 1 | v13))
        v15 = v12;
      v11 = ((_DWORD)v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 32 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a3;
  v18 = *a4;
  *a4 = 0;
  result = (_DWORD *)v12[2];
  v12[2] = v18;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_29:
      result = (_DWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a2, (uint64_t)v12);
      v12 = result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_29;
  }
  v27 = v23 + 32 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v28;
  return result;
}

WebCore *WebKit::TextAnimationController::enableTextAnimationTypeForElementWithID(WebKit::TextAnimationController *this, const WTF::String *a2, const WTF::UUID *a3)
{
  WebCore *result;
  uint64_t v7;
  Node *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  WebCore *v16;
  uint64_t v17;

  result = (WebCore *)WebKit::TextAnimationController::document((uint64_t)&v17, *(_QWORD *)this);
  v7 = v17;
  if (v17)
  {
    WebCore::TreeScope::getElementById((WebCore::TreeScope *)(v17 + 96), a2);
    result = v16;
    if (v16)
    {
      WebCore::makeRangeSelectingNodeContents(v16, v8);
      if (v12 != v14 || v13 != v15)
      {
        WebCore::createLiveRange();
        WTF::HashMap<WTF::UUID,WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::Range,WTF::RawPtrTraits<WebCore::Range>,WTF::DefaultRefDerefTraits<WebCore::Range>>>((uint64_t)&v10, (uint64_t *)this + 5, a3, (uint64_t *)&v11);
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
    }
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        return (WebCore *)WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return result;
}

void sub_19738ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, ...)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a5);
  if (a5)
  {
    if (a5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a5 + 8))(a5);
    else
      --a5[2];
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v6);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)va);
  v9 = *(_QWORD *)(v7 - 48);
  *(_QWORD *)(v7 - 48) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebCookieJar::cookiesInPartitionedCookieStorage@<X0>(WebCore::Document *this@<X1>, WTF::URL *a2@<X2>, uint64_t a3@<X0>, _BYTE *a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  WebCore::Quirks *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  _BOOL4 v31;
  const char *v32;
  int v33;
  int Length;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char *v43;
  char *v44;
  char *v45;
  const char *CStringPtr;
  size_t v47;
  uint64_t v48;
  char *v49;
  const char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  const char *v55;
  __int16 v56;
  UniChar *v57;
  uint64_t v58;
  UniChar *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  CFTypeRef v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *obj;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  char v76;
  _QWORD v77[5];
  WTF::StringImpl *v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  void (*v82)(uint64_t);
  void *v83;
  CFTypeRef cf;
  WTF::StringImpl *v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  uint64_t v89;
  CFRange v90;
  CFRange v91;

  v89 = *MEMORY[0x1E0C80C00];
  v10 = (WebCore::Quirks *)*((_QWORD *)this + 86);
  if (!v10)
    v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
  result = WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(v10, a2);
  if ((result & 1) == 0 || !*(_QWORD *)(a3 + 88))
  {
    *a5 = 0;
    return result;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 126);
  if (v12)
    *(_DWORD *)v12 += 2;
  v85 = v12;
  v86 = *(_OWORD *)((char *)this + 1016);
  v87 = *(_OWORD *)((char *)this + 1032);
  WebCore::RegistrableDomain::RegistrableDomain(&v78, (const WTF::URL *)&v85);
  v14 = v78;
  if (!v78)
    goto LABEL_74;
  v15 = *(_DWORD *)v78;
  *(_DWORD *)v78 += 2;
  v78 = 0;
  if (v15)
    *(_DWORD *)v14 = v15;
  else
    WTF::StringImpl::destroy(v14, v13);
  if (!*((_DWORD *)v14 + 1))
  {
LABEL_74:
    *a5 = 0;
    goto LABEL_83;
  }
  v67 = v14;
  v78 = 0;
  v79 = &v78;
  v80 = 0x3812000000;
  v81 = __Block_byref_object_copy__10;
  v82 = __Block_byref_object_dispose__10;
  v83 = &unk_197A0BBD2;
  cf = 0;
  v16 = *(void **)(a3 + 88);
  v17 = WTF::URL::operator NSURL *();
  v18 = WTF::URL::operator NSURL *();
  v19 = WTF::StringImpl::operator NSString *();
  WebKit::policyProperties(&v73, a4, (uint64_t)a2);
  v20 = v73;
  v77[0] = MEMORY[0x1E0C809B0];
  v77[1] = 3221225472;
  v77[2] = ___ZNK6WebKit12WebCookieJar33cookiesInPartitionedCookieStorageERKN7WebCore8DocumentERKN3WTF3URLERKNS1_12SameSiteInfoE_block_invoke;
  v77[3] = &unk_1E34D6090;
  v77[4] = &v78;
  objc_msgSend(v16, "_getCookiesForURL:mainDocumentURL:partition:policyProperties:completionHandler:", v17, v18, v19, v73, v77);
  if (v20)
    CFRelease(v20);
  v21 = v79[6];
  if (!v21 || !-[WTF::StringImpl count](v21, "count"))
  {
    *a5 = 0;
    goto LABEL_80;
  }
  v66 = a5;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 1;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  obj = v79[6];
  v23 = -[WTF::StringImpl countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v69, v88, 16);
  if (!v23)
    goto LABEL_67;
  v24 = *(_QWORD *)v70;
  do
  {
    v25 = 0;
    do
    {
      if (*(_QWORD *)v70 != v24)
        objc_enumerationMutation(obj);
      v26 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * v25);
      if (objc_msgSend((id)objc_msgSend(v26, "name"), "length") && (objc_msgSend(v26, "isHTTPOnly") & 1) == 0)
      {
        v27 = v75;
        v28 = (const __CFString *)objc_msgSend(v26, "name");
        v29 = objc_msgSend(v26, "value");
        v30 = (const __CFString *)v29;
        v31 = v27 != 0;
        if (v27)
          v32 = "; ";
        else
          v32 = "";
        v33 = v75;
        if (v28)
        {
          Length = CFStringGetLength(v28);
          if (v30)
          {
LABEL_29:
            v35 = CFStringGetLength(v30);
            v36 = v35 + 1;
            if (v35 == -1)
              v36 = -1;
            goto LABEL_31;
          }
        }
        else
        {
          Length = 0;
          if (v29)
            goto LABEL_29;
        }
        v36 = 1;
LABEL_31:
        v37 = __CFADD__(v36, Length);
        v38 = v36 + Length;
        if (v37)
          v38 = -1;
        v39 = 2 * (v27 != 0);
        v37 = __CFADD__(v38, 2 * v31);
        v40 = v38 + 2 * v31;
        if (v37)
          v40 = -1;
        v37 = __CFADD__(v40, v33);
        v41 = (v40 + v33);
        if (v37)
          v41 = 0xFFFFFFFFLL;
        v42 = v74;
        if ((v74 || (v42 = v73) != 0) && (*((_BYTE *)v42 + 16) & 4) == 0
          || v28 && !CFStringGetCStringPtr(v28, 0x201u)
          || v30 && !CFStringGetCStringPtr(v30, 0x201u))
        {
          v52 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v73);
          if (v52)
          {
            if (v27)
            {
              v53 = 4 * (v27 != 0);
              v54 = (_WORD *)v52;
              v55 = "; ";
              do
              {
                v56 = *(unsigned __int8 *)v55++;
                *v54++ = v56;
                v53 -= 2;
              }
              while (v53);
            }
            v57 = (UniChar *)(v52 + 4 * (v27 != 0));
            if (v28)
            {
              v90.length = CFStringGetLength(v28);
              v90.location = 0;
              CFStringGetCharacters(v28, v90, v57);
              v58 = CFStringGetLength(v28);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v57[v58];
            *v59 = 61;
            if (v30)
            {
              v91.length = CFStringGetLength(v30);
              v91.location = 0;
              CFStringGetCharacters(v30, v91, v59 + 1);
            }
          }
        }
        else
        {
          v43 = (char *)MEMORY[0x19AEAB398](&v73, v41);
          v44 = v43;
          if (v43)
          {
            if ((_DWORD)v39)
              memcpy(v43, v32, 2 * (v27 != 0));
            v45 = &v44[v39];
            if (v28)
            {
              CStringPtr = CFStringGetCStringPtr(v28, 0x201u);
              v47 = CFStringGetLength(v28);
              memcpy(v45, CStringPtr, v47);
              v48 = CFStringGetLength(v28);
            }
            else
            {
              v48 = 0;
            }
            v49 = &v45[v48];
            v45[v48] = 61;
            if (v30)
            {
              v50 = CFStringGetCStringPtr(v30, 0x201u);
              v51 = CFStringGetLength(v30);
              memcpy(v49 + 1, v50, v51);
            }
          }
        }
      }
      ++v25;
    }
    while (v25 != v23);
    v60 = -[WTF::StringImpl countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v69, v88, 16);
    v23 = v60;
  }
  while (v60);
LABEL_67:
  v61 = v73;
  if (v73)
  {
    v62 = v66;
LABEL_69:
    *(_DWORD *)v61 += 2;
  }
  else
  {
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v73);
    v62 = v66;
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v73);
    v61 = v73;
    if (v73)
      goto LABEL_69;
  }
  *v62 = v61;
  v63 = v74;
  v74 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v22);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v73;
  v73 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v22);
    else
      *(_DWORD *)v64 -= 2;
  }
LABEL_80:
  _Block_object_dispose(&v78, 8);
  v65 = cf;
  cf = 0;
  if (v65)
    CFRelease(v65);
  v14 = v67;
LABEL_83:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = (uint64_t)v85;
  v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19738B280(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,WTF::StringImpl *a37)
{
  WTF::StringImpl *v38;
  CFTypeRef v39;
  WTF::StringImpl *v40;

  if (a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  _Block_object_dispose(&a30, 8);
  v39 = cf;
  cf = 0;
  if (v39)
    CFRelease(v39);
  if (*(_DWORD *)a11 == 2)
    WTF::StringImpl::destroy(a11, v38);
  else
    *(_DWORD *)a11 -= 2;
  v40 = a37;
  a37 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

CFTypeRef WebKit::policyProperties(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  CFTypeRef result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_92 & 1) == 0)
  {
    v8 = a3;
    qword_1ECE72DC8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", &stru_1E351F1B8);
    _MergedGlobals_92 = 1;
  }
  v5 = WTF::URL::operator NSURL *();
  if (*a2)
    v6 = v5;
  else
    v6 = qword_1ECE72DC8;
  v10[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2[1], v8, CFSTR("_kCFHTTPCookiePolicyPropertySiteForCookies"), CFSTR("_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation"), v6);
  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 2);
  *a1 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void ___ZNK6WebKit12WebCookieJar33cookiesInPartitionedCookieStorageERKN7WebCore8DocumentERKN3WTF3URLERKNS1_12SameSiteInfoE_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (cf)
    CFRetain(cf);
  v4 = *(const void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = cf;
  if (v4)
    CFRelease(v4);
}

WTF::StringImpl *WebKit::WebCookieJar::setCookiesInPartitionedCookieStorage(uint64_t a1, WebCore::Document *this, WTF::URL *a3, _BYTE *a4, uint64_t a5)
{
  WebCore::Quirks *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  void *v17;
  __CFString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v10 = (WebCore::Quirks *)*((_QWORD *)this + 86);
  if (!v10)
    v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
  result = (WTF::StringImpl *)WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(v10, a3);
  if ((_DWORD)result && *(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 126);
    if (v12)
      *(_DWORD *)v12 += 2;
    v30 = v12;
    v13 = *(_OWORD *)((char *)this + 1032);
    v31 = *(_OWORD *)((char *)this + 1016);
    v32 = v13;
    WebCore::RegistrableDomain::RegistrableDomain(&v29, (const WTF::URL *)&v30);
    v15 = v29;
    if (v29)
    {
      v16 = *(_DWORD *)v29;
      *(_DWORD *)v29 += 2;
      v29 = 0;
      if (v16)
        *(_DWORD *)v15 = v16;
      else
        WTF::StringImpl::destroy(v15, v14);
      if (*((_DWORD *)v15 + 1))
      {
        v17 = (void *)MEMORY[0x1E0C92C00];
        v18 = *(_QWORD *)a5 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
        v19 = WTF::URL::operator NSURL *();
        v20 = (void *)objc_msgSend(v17, "_cookieForSetCookieString:forURL:partition:", v18, v19, WTF::StringImpl::operator NSString *());
        v21 = v20;
        if (v20)
        {
          if (objc_msgSend((id)objc_msgSend(v20, "name"), "length") && (objc_msgSend(v21, "isHTTPOnly") & 1) == 0)
          {
            v22 = *(void **)(a1 + 88);
            if (!v22)
            {
              v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C08]), "_initWithIdentifier:private:", CFSTR("WebCookieJar"), 1);
              v24 = *(const void **)(a1 + 88);
              *(_QWORD *)(a1 + 88) = v23;
              if (v24)
              {
                CFRelease(v24);
                v23 = *(void **)(a1 + 88);
              }
              objc_msgSend(v23, "setCookieAcceptPolicy:", 0, v29);
              v22 = *(void **)(a1 + 88);
            }
            v33[0] = v21;
            v25 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1, v29);
            v26 = WTF::URL::operator NSURL *();
            v27 = WTF::URL::operator NSURL *();
            WebKit::policyProperties(&v29, a4, (uint64_t)a3);
            v28 = v29;
            objc_msgSend(v22, "_setCookies:forURL:mainDocumentURL:policyProperties:", v25, v26, v27, v29);
            if (v28)
              CFRelease(v28);
          }
        }
      }
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19738B758(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::requestActiveNowPlayingSessionInfo(WebCore::PlatformMediaSessionManager *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[2];
  WTF::StringImpl *v16[2];
  _BYTE v17[32];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  char v24;

  v3 = WebCore::PlatformMediaSessionManager::sharedManagerIfExists(a1);
  if (v3)
  {
    v4 = v3;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 56))(v15);
    if (v24)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
      if (v24)
      {
        v7 = *a2;
        *a2 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, result, v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v8);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v5);
  }
  v17[24] = 0;
  v17[0] = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v18 = 0;
  v19 = 0;
  v20 = 0x3FF0000000000000;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v9 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, 0, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v10);
  v12 = v16[1];
  v16[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v16[0];
  v16[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v15[1];
  v15[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v15[0];
  v15[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19738B96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldUsePDFPlugin(uint64_t a1, WebCore::MIMETypeRegistry *a2)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112) + 712) & 0x8000000000000) == 0)
    return 0;
  if ((WebCore::MIMETypeRegistry::isPDFMIMEType(a2, a2) & 1) != 0)
    return 1;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  return WTF::StringView::endsWithIgnoringASCIICase();
}

uint64_t WebKit::WebPage::performDictionaryLookupAtLocation(WebCore::Page **this, const WebCore::FloatPoint *a2)
{
  uint64_t result;
  uint64_t v5;
  WebCore::ScrollView *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  const WebCore::HitTestResult *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WebCore::FocusController *v24;
  WebCore::FocusController *v25[4];
  char v26;
  uint64_t v27;
  _BYTE v28[80];
  uint64_t v29;

  result = WebKit::WebPage::mainFramePlugIn((WebKit::WebPage *)this, a2);
  if (!result
    || (result = WebKit::PluginView::performDictionaryLookupAtLocation((WebKit::PluginView *)result, a2),
        (result & 1) == 0))
  {
    v5 = *((_QWORD *)this[6] + 20);
    if (v5 && *(_BYTE *)(v5 + 144) == 0)
    {
      v7 = *(WebCore::ScrollView **)(v5 + 288);
      v8 = roundf(*(float *)a2);
      v9 = 0x7FFFFFFFLL;
      v10 = (int)v8;
      if (v8 <= -2147500000.0)
        v10 = 0x80000000;
      if (v8 < 2147500000.0)
        v9 = v10;
      v11 = roundf(*((float *)a2 + 1));
      v12 = 0x7FFFFFFF00000000;
      v13 = 0x8000000000000000;
      if (v11 > -2147500000.0)
        v13 = (unint64_t)(int)v11 << 32;
      if (v11 < 2147500000.0)
        v12 = v13;
      v27 = v12 | v9;
      v14 = WebCore::ScrollView::windowToContents(v7, (const WebCore::IntPoint *)&v27);
      v15 = (int8x8_t)vcgt_s32((int32x2_t)v14, (int32x2_t)0xFE000000FE000000);
      v25[0] = (WebCore::FocusController *)vorr_s8((int8x8_t)(*(_QWORD *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v14, 6uLL)), v15));
      WebCore::EventHandler::hitTestResultAtPoint();
      if (v29)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 8) + 528);
        if (!v17)
          return MEMORY[0x19AEADBAC](v28);
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          return MEMORY[0x19AEADBAC](v28);
        v19 = (unsigned int *)(v18 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      else
      {
        WebCore::Page::checkedFocusController(this[6]);
        v21 = WebCore::FocusController::focusedOrMainFrame(v25[0]);
        v18 = v21;
        if (v21)
        {
          v22 = (unsigned int *)(v21 + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
        v24 = v25[0];
        v25[0] = 0;
        if (v24)
        {
          if (!*(_DWORD *)v24)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          --*(_DWORD *)v24;
        }
        if (!v21)
          return MEMORY[0x19AEADBAC](v28);
      }
      WebCore::DictionaryLookup::rangeAtHitTestResult((WebCore::DictionaryLookup *)v28, v16);
      if (v26)
        WebKit::WebPage::performDictionaryLookupForRange((WebKit::WebPage *)this, v18, (uint64_t)v25);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
      return MEMORY[0x19AEADBAC](v28);
    }
  }
  return result;
}

void sub_19738BCBC(_Unwind_Exception *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (a3)
  {
    if (!*a3)
    {
      __break(0xC471u);
      JUMPOUT(0x19738BCFCLL);
    }
    --*a3;
  }
  MEMORY[0x19AEADBAC](va);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::performDictionaryLookupForRange(WebKit::WebPage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  int v13;
  WebCore::ScrollView *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  const FloatRect *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WebCore::LocalFrame *v24;
  double v25;
  double v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  float v36;
  void *v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF *v49;
  _DWORD *v50;
  WTF *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  _OWORD v55[4];
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  _BYTE v61[40];
  WTF::StringImpl *v62[2];
  __int128 v63;
  __int128 v64;
  WTF *v65;
  uint64_t v66;
  int v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  int v72;
  _QWORD v73[2];
  WebCore::FloatQuad *v74;
  int v75;
  int v76;

  v6 = WebCore::Document::editor(*(WebCore::Document **)(a2 + 296));
  *(_BYTE *)(v6 + 488) = 1;
  WebCore::plainText();
  v8 = v62[0];
  if (!v62[0])
    goto LABEL_36;
  v9 = *((_QWORD *)v62[0] + 1);
  v10 = *((unsigned int *)v62[0] + 1);
  if ((*((_BYTE *)v62[0] + 16) & 4) == 0)
  {
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned __int16 *)(v9 + 2 * i);
        if (v12 > 0xFF)
        {
          if (MEMORY[0x19AEBA3C8]() != 9)
            goto LABEL_12;
        }
        else if (v12 - 9 >= 5 && v12 != 32)
        {
          goto LABEL_12;
        }
      }
      i = -1;
LABEL_12:
      v8 = v62[0];
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (!(_DWORD)v10)
  {
LABEL_20:
    v62[0] = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
LABEL_36:
    *(_BYTE *)(v6 + 488) = 0;
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v57 = 1065353216;
    HIWORD(v60) = 0;
    v58 = 0u;
    v59 = 0u;
    LOBYTE(v60) = 0;
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v61);
    goto LABEL_37;
  }
  i = 0;
  while (1)
  {
    v13 = *(unsigned __int8 *)(v9 + i);
    if ((v13 - 9) >= 5 && v13 != 32)
      break;
    if (v10 == ++i)
    {
      i = -1;
      break;
    }
  }
LABEL_22:
  v62[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (i == -1)
    goto LABEL_36;
  WebCore::RenderObject::absoluteTextQuads();
  if (v76)
  {
    WebCore::DictionaryPopupInfo::DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)v55);
    if (!v76)
    {
      __break(0xC471u);
      return;
    }
    v14 = *(WebCore::ScrollView **)(a2 + 288);
    WebCore::FloatQuad::boundingBox(v74);
    v62[0] = (WTF::StringImpl *)__PAIR64__(v16, v15);
    v62[1] = (WTF::StringImpl *)__PAIR64__(v18, v17);
    v73[0] = WebCore::enclosingIntRect((WebCore *)v62, v19);
    v73[1] = v20;
    v21 = WebCore::ScrollView::contentsToWindow(v14, (const WebCore::IntRect *)v73);
    v22 = *(_QWORD *)(*(_QWORD *)a3 + 64) & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v22 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v22)
          v22 = *(_QWORD *)(v22 + 8);
      }
      v23 = *(_DWORD *)(WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(v22 + 80)) + 44);
      WebKit::WebPage::totalScaleFactor(a1, v24);
      v26 = v25 / *(float *)(*((_QWORD *)a1 + 6) + 368) * (double)v23;
    }
    else
    {
      v26 = 0.0;
    }
    v36 = v26;
    *(float *)v55 = (float)(int)v21;
    *((float *)v55 + 1) = (float)SHIDWORD(v21) + v36;
    WebCore::ImageOverlay::isInsideOverlay();
    WebCore::TextIndicator::createWithRange();
    if (v73[0])
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v62, (const TextIndicatorData *)(v73[0] + 8));
      *(_OWORD *)((char *)v55 + 8) = *(_OWORD *)v62;
      *(_OWORD *)((char *)&v55[1] + 8) = v63;
      *(_OWORD *)((char *)&v55[2] + 8) = v64;
      v38 = (WTF *)*((_QWORD *)&v55[3] + 1);
      if (*((_QWORD *)&v55[3] + 1))
      {
        *((_QWORD *)&v55[3] + 1) = 0;
        LODWORD(v56) = 0;
        WTF::fastFree(v38, v37);
      }
      *((_QWORD *)&v55[3] + 1) = v65;
      v39 = v66;
      v65 = 0;
      v66 = 0;
      v56 = v39;
      v57 = v67;
      v40 = v68;
      v68 = 0;
      v41 = (_DWORD *)v58;
      *(_QWORD *)&v58 = v40;
      if (v41)
      {
        if (v41[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
        else
          --v41[2];
      }
      v42 = v69;
      v69 = 0;
      v43 = (_DWORD *)*((_QWORD *)&v58 + 1);
      *((_QWORD *)&v58 + 1) = v42;
      if (v43)
      {
        if (v43[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
        else
          --v43[2];
      }
      v44 = v70;
      v70 = 0;
      v45 = (_DWORD *)v59;
      *(_QWORD *)&v59 = v44;
      if (v45)
      {
        if (v45[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
        else
          --v45[2];
      }
      WebCore::Color::operator=();
      v60 = v72;
      if ((v71 & 0x8000000000000) != 0)
      {
        v52 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          WTF::fastFree((WTF *)v52, v27);
        }
      }
      v46 = v70;
      v70 = 0;
      if (v46)
      {
        if (v46[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
        else
          --v46[2];
      }
      v47 = v69;
      v69 = 0;
      if (v47)
      {
        if (v47[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
        else
          --v47[2];
      }
      v48 = v68;
      v68 = 0;
      if (v48)
      {
        if (v48[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
        else
          --v48[2];
      }
      v49 = v65;
      if (v65)
      {
        v65 = 0;
        LODWORD(v66) = 0;
        WTF::fastFree(v49, v27);
      }
      *(_BYTE *)(v6 + 488) = 0;
      v50 = (_DWORD *)v73[0];
      v73[0] = 0;
      if (v50)
        WTF::RefCounted<WebCore::TextIndicator>::deref(v50);
    }
    else
    {
      *(_BYTE *)(v6 + 488) = 0;
    }
  }
  else
  {
    *(_BYTE *)(v6 + 488) = 0;
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v57 = 1065353216;
    HIWORD(v60) = 0;
    v58 = 0u;
    v59 = 0u;
    LOBYTE(v60) = 0;
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v61);
  }
  v51 = v74;
  if (v74)
  {
    v74 = 0;
    v75 = 0;
    WTF::fastFree(v51, v27);
  }
LABEL_37:
  v29 = *((_QWORD *)a1 + 4);
  v28 = (_QWORD *)((char *)a1 + 32);
  v30 = (*(uint64_t (**)(_QWORD *))(v29 + 56))(v28);
  v31 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v31 = 1903;
  *(_QWORD *)(v31 + 8) = v30;
  *(_QWORD *)(v31 + 528) = v31 + 16;
  *(_QWORD *)(v31 + 536) = v31 + 16;
  *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v31 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
  v62[0] = (WTF::StringImpl *)v31;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode((IPC::Encoder *)v31, (int *)v55);
  (*(void (**)(_QWORD *, WTF::StringImpl **, _QWORD))(*v28 + 32))(v28, v62, 0);
  v33 = v62[0];
  v62[0] = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v34, v35);
  }
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)v55);
}

void sub_19738C2A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF *a35,int a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF *v46;

  if ((a22 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a21 + 8))(a21);
    else
      --a21[2];
  }
  if (a20)
  {
    if (a20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
    else
      --a20[2];
  }
  if (a19)
  {
    if (a19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a19 + 8))(a19);
    else
      --a19[2];
  }
  if (a16)
    WTF::fastFree(a16, a2);
  v46 = *(WTF **)(v41 - 96);
  if (v46)
  {
    *(_QWORD *)(v41 - 96) = 0;
    *(_DWORD *)(v41 - 88) = 0;
    WTF::fastFree(v46, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::performDictionaryLookupOfCurrentSelection(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;
  WebCore::FocusController *v7[4];
  char v8;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v7[0]);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = v7[0];
  v7[0] = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    WebCore::DictionaryLookup::rangeForSelection();
    if (v8)
      WebKit::WebPage::performDictionaryLookupForRange((WebKit::WebPage *)this, v3, (uint64_t)v7);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_19738C690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::createTextIndicatorForTextAnimationID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  const WTF::UUID *v4;
  uint64_t v5;
  void *v6;
  _BYTE v8[120];
  _BYTE v9[40];

  v4 = *(const WTF::UUID **)(a1 + 2472);
  WebKit::TextAnimationController::contextRangeForTextAnimationID((WebKit::TextAnimationController *)v9, v4, a2);
  if (v9[32])
  {
    WebKit::TextAnimationController::createTextIndicatorForRange(v4, v8);
  }
  else
  {
    v8[0] = 0;
    v8[112] = 0;
  }
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9);
}

void sub_19738C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v12);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v10 - 56);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::updateUnderlyingTextVisibilityForTextAnimationID(uint64_t a1, const WTF::UUID *a2, int a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  char v14;
  uint64_t v15;

  v7 = *(uint64_t **)(a1 + 2472);
  WebKit::TextAnimationController::document((uint64_t)&v15, *v7);
  v8 = v15;
  if (!v15)
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (a3)
  {
    WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID((WebKit::TextAnimationController *)v7, a2);
LABEL_9:
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_10;
  }
  WebKit::TextAnimationController::contextRangeForTextAnimationID((WebKit::TextAnimationController *)v13, (const WTF::UUID *)v7, (uint64_t *)a2);
  if (v14)
  {
    if (!*(_QWORD *)(v8 + 1496))
    {
      result = WebCore::Document::ensureMarkers((WebCore::Document *)v8);
      if (!v14)
      {
        __break(1u);
        return result;
      }
    }
    WebCore::DocumentMarkerController::addTransparentContentMarker();
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13);
    goto LABEL_9;
  }
  v12 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13);
LABEL_10:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

void sub_19738C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::insertDictatedTextAsync(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _BYTE *a5)
{
  unsigned int *result;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::FocusController *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WebCore *v21;
  WebCore::Node *v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  WebCore::ThreadGlobalData *v26;
  WebCore::FocusController *v27;
  char v28;
  uint64_t (*v29)();
  WebCore *inserted;
  char v31;
  unint64_t StatusReg;
  uint64_t v33;
  WebCore::ThreadGlobalData *v34;
  WebCore *v35;
  uint64_t v36;
  WebCore::ThreadGlobalData *v37;
  WebCore::FocusController *v38;
  WebCore::FocusController *v39[13];
  _BYTE v40[40];

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v39[0]);
  v9 = result;
  if (result)
  {
    v10 = result + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v39[0];
  v39[0] = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19738CDB8);
    }
    --*(_DWORD *)v12;
  }
  if (result)
  {
    if (*a3 != -1)
    {
      WebKit::EditingRange::toRange((uint64_t)result, 0, (uint64_t)v40);
      if (v40[32])
      {
        WebCore::VisibleSelection::VisibleSelection();
        WebCore::FrameSelection::setSelection();
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v39);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40);
    }
    if (*a5)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v13 = a1 + 32;
      v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
      v16 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v16 = 2002;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v16 + 528) = v16 + 16;
      *(_QWORD *)(v16 + 536) = v16 + 16;
      *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v16 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
      v39[0] = (WebCore::FocusController *)v16;
      (*(void (**)(uint64_t, WebCore::FocusController **, _QWORD))(*(_QWORD *)v13 + 32))(v13, v39, 0);
      v18 = v39[0];
      v39[0] = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v19, v20);
      }
    }
    v21 = (WebCore *)*((_QWORD *)v9 + 37);
    if (v21 && (v22 = (WebCore::Node *)*((_QWORD *)v21 + 156)) != 0)
    {
      *((_DWORD *)v22 + 6) += 2;
      v24 = a5[3];
      v23 = a5 + 3;
      if (v24)
      {
        v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v25 || (v26 = *(WebCore::ThreadGlobalData **)(v25 + 96)) == 0)
          v26 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v21);
        if (!*((_QWORD *)v26 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v26);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v22 + 48))(v22, v39[0]);
        v27 = v39[0];
        v39[0] = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 4) == 1)
            (*(void (**)(WebCore::FocusController *))(*(_QWORD *)v27 + 8))(v27);
          else
            --*((_DWORD *)v27 + 4);
        }
        v28 = 0;
        v21 = (WebCore *)*((_QWORD *)v9 + 37);
      }
      else
      {
        v28 = 0;
      }
    }
    else
    {
      v22 = 0;
      v23 = a5 + 3;
      v28 = 1;
    }
    if (*(_QWORD *)(WebCore::Document::editor(v21) + 32))
      v29 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    else
      v29 = 0;
    if (!v29)
    {
      WebCore::Document::editor(*((WebCore::Document **)v9 + 37));
      inserted = (WebCore *)WebCore::Editor::insertDictatedText();
      v31 = *v23 ? v28 : 1;
      if ((v31 & 1) == 0)
      {
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v33 = *(_QWORD *)(StatusReg + 736);
        if (!v33 || (v34 = *(WebCore::ThreadGlobalData **)(v33 + 96)) == 0)
          v34 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(inserted);
        if (!*((_QWORD *)v34 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v34);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v22 + 48))(v22, v39[0]);
        v35 = v39[0];
        v39[0] = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 4) == 1)
            v35 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v35 + 8))(v35);
          else
            --*((_DWORD *)v35 + 4);
        }
        v36 = *(_QWORD *)(StatusReg + 736);
        if (!v36 || (v37 = *(WebCore::ThreadGlobalData **)(v36 + 96)) == 0)
          v37 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v35);
        if (!*((_QWORD *)v37 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v37);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v22 + 48))(v22, v39[0]);
        v38 = v39[0];
        v39[0] = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 4) == 1)
          {
            (*(void (**)(WebCore::FocusController *))(*(_QWORD *)v38 + 8))(v38);
            if ((v28 & 1) == 0)
            {
LABEL_56:
              if (*((_DWORD *)v22 + 6) == 2)
              {
                if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v22);
              }
              else
              {
                *((_DWORD *)v22 + 6) -= 2;
              }
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9 + 2);
          }
          --*((_DWORD *)v38 + 4);
        }
      }
    }
    if ((v28 & 1) == 0)
      goto LABEL_56;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9 + 2);
  }
  return result;
}

void sub_19738CDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Encoder *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (a9)
  {
    if (*((_DWORD *)a9 + 4) == 1)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)a9 + 8))(a9);
    else
      --*((_DWORD *)a9 + 4);
  }
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::addDictationAlternative(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *result;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FocusController *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::FocusController *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore *v20;
  WebCore::Node *v21;
  WebCore *v22;
  WebCore::Node *v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  char v45;
  WebCore::Node *v46;
  WebCore::FocusController *v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  WebCore::Node *v62;
  int v63;
  char v64;
  __int16 v65;
  char v66;
  uint64_t v67[2];
  unsigned __int8 v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v47);
  v8 = result;
  if (result)
  {
    v9 = result + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = v47;
  v47 = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x19738D404);
    }
    --*(_DWORD *)v11;
  }
  if (result)
  {
    v12 = *((_QWORD *)result + 37);
    if (v12)
    {
      *(_DWORD *)(v12 + 24) += 2;
      v13 = *(_QWORD *)(v12 + 3064);
      v14 = *(WebCore::FocusController **)(v13 + 56);
      if (v14)
        *((_DWORD *)v14 + 6) += 2;
      v47 = v14;
      v48 = *(_DWORD *)(v13 + 64);
      v49 = *(_BYTE *)(v13 + 68);
      v15 = *(_QWORD *)(v13 + 72);
      if (v15)
        *(_DWORD *)(v15 + 24) += 2;
      v50 = v15;
      v51 = *(_DWORD *)(v13 + 80);
      v52 = *(_BYTE *)(v13 + 84);
      v16 = *(_QWORD *)(v13 + 88);
      if (v16)
        *(_DWORD *)(v16 + 24) += 2;
      v53 = v16;
      v54 = *(_DWORD *)(v13 + 96);
      v55 = *(_BYTE *)(v13 + 100);
      v17 = *(_QWORD *)(v13 + 104);
      if (v17)
        *(_DWORD *)(v17 + 24) += 2;
      v56 = v17;
      v57 = *(_DWORD *)(v13 + 112);
      v58 = *(_BYTE *)(v13 + 116);
      v18 = *(_QWORD *)(v13 + 120);
      if (v18)
        *(_DWORD *)(v18 + 24) += 2;
      v59 = v18;
      v60 = *(_DWORD *)(v13 + 128);
      v61 = *(_BYTE *)(v13 + 132);
      v19 = *(WebCore::Node **)(v13 + 136);
      if (v19)
        *((_DWORD *)v19 + 6) += 2;
      v62 = v19;
      v63 = *(_DWORD *)(v13 + 144);
      v64 = *(_BYTE *)(v13 + 148);
      v65 = *(_WORD *)(v13 + 152);
      v66 = *(_BYTE *)(v13 + 154);
      v20 = (WebCore *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v47);
      v22 = v20;
      if (v20)
      {
        *((_DWORD *)v20 + 6) += 2;
        WebCore::firstPositionInNode(v20, v21);
        v23 = v62;
        if (v62)
          *((_DWORD *)v62 + 6) += 2;
        v43 = v23;
        v44 = v63;
        v45 = v64;
        WebCore::makeBoundaryPoint();
        WebCore::makeBoundaryPoint();
        v24 = v68;
        if ((_BYTE)v36 && v68)
        {
          WebCore::SimpleRange::SimpleRange();
          v38 = v69;
          v39 = (int)v70;
          v25 = v71;
          v69 = 0;
          v71 = 0;
          v40 = v25;
          v41 = v72;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v71);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v69);
          v24 = v68;
          v26 = 1;
        }
        else
        {
          v26 = 0;
          LOBYTE(v38) = 0;
        }
        v42 = v26;
        if (v24)
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v67);
        if ((_BYTE)v36)
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v34);
        if (v42)
        {
          WebCore::characterCount();
          if (!v42)
            __break(1u);
          WebCore::findClosestPlainText();
          if (v34 == v36 && v35 == v37)
          {
            v27 = *a4;
            *a4 = 0;
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 0);
          }
          else
          {
            if (!*(_QWORD *)(v12 + 1496))
              WebCore::Document::ensureMarkers((WebCore::Document *)v12);
            v29 = *a2;
            if (*a2)
              *v29 += 2;
            v69 = a3;
            v70 = v29;
            v73 = 1;
            WebCore::DocumentMarkerController::addMarker();
            if (v73 != -1)
              ((void (*)(uint64_t *, uint64_t *))off_1E34D6C10[v73])(v67, &v69);
            v27 = *a4;
            *a4 = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 1);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v36);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v34);
        }
        else
        {
          v28 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38);
        v30 = v43;
        v43 = 0;
        if (v30)
        {
          if (*((_DWORD *)v30 + 6) == 2)
          {
            if ((*((_WORD *)v30 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v30);
          }
          else
          {
            *((_DWORD *)v30 + 6) -= 2;
          }
        }
        v31 = v46;
        v46 = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 6) == 2)
          {
            if ((*((_WORD *)v31 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v31);
          }
          else
          {
            *((_DWORD *)v31 + 6) -= 2;
          }
        }
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      else
      {
        v33 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v47);
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    else
    {
      v32 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 16))(v32, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
  }
  return result;
}

void sub_19738D470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WebCore::Node *a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a23);
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v24);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
  _Unwind_Resume(a1);
}

void sub_19738D618()
{
  JUMPOUT(0x19738D598);
}

void sub_19738D620()
{
  JUMPOUT(0x19738D5A8);
}

void sub_19738D628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23)
{
  if (a23)
  {
    if (*a23)
      --*a23;
    else
      __break(0xC471u);
  }
  JUMPOUT(0x19738D5C8);
}

void sub_19738D66C()
{
  JUMPOUT(0x19738D5C8);
}

unsigned int *WebKit::WebPage::dictationAlternativesAtSelection(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::FocusController *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WebCore::Node *v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  void *v31;
  WTF *v32;
  WebCore::Node *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[32];
  char v41;
  WebCore::FocusController *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  __int16 v59;
  char v60;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v42);
  v4 = result;
  if (result)
  {
    v5 = result + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v42;
  v42 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      goto LABEL_73;
    }
    --*(_DWORD *)v7;
  }
  if (!result)
    return result;
  v8 = *((_QWORD *)result + 37);
  if (!v8)
  {
    v42 = 0;
    v43 = 0;
    v30 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v30 + 16))(v30, &v42);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v32 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v32, v31);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
  }
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(_QWORD *)(v8 + 3064);
  v10 = *(WebCore::FocusController **)(v9 + 56);
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  v42 = v10;
  LODWORD(v43) = *(_DWORD *)(v9 + 64);
  BYTE4(v43) = *(_BYTE *)(v9 + 68);
  v11 = *(_QWORD *)(v9 + 72);
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  v44 = v11;
  v45 = *(_DWORD *)(v9 + 80);
  v46 = *(_BYTE *)(v9 + 84);
  v12 = *(_QWORD *)(v9 + 88);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v47 = v12;
  v48 = *(_DWORD *)(v9 + 96);
  v49 = *(_BYTE *)(v9 + 100);
  v13 = *(_QWORD *)(v9 + 104);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v50 = v13;
  v51 = *(_DWORD *)(v9 + 112);
  v52 = *(_BYTE *)(v9 + 116);
  v14 = *(_QWORD *)(v9 + 120);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v53 = v14;
  v54 = *(_DWORD *)(v9 + 128);
  v55 = *(_BYTE *)(v9 + 132);
  v15 = *(_QWORD *)(v9 + 136);
  if (v15)
    *(_DWORD *)(v15 + 24) += 2;
  v56 = v15;
  v57 = *(_DWORD *)(v9 + 144);
  v58 = *(_BYTE *)(v9 + 148);
  v59 = *(_WORD *)(v9 + 152);
  v60 = *(_BYTE *)(v9 + 154);
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::previous();
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::next();
  WebCore::VisibleSelection::VisibleSelection();
  WebCore::VisibleSelection::range((WebCore::VisibleSelection *)&v38);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v38);
  if (v34)
  {
    if (*((_DWORD *)v34 + 6) == 2)
    {
      if ((*((_WORD *)v34 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v34);
    }
    else
    {
      *((_DWORD *)v34 + 6) -= 2;
    }
  }
  if (v33)
  {
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  v17 = v35;
  v35 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 6) == 2)
    {
      if ((*((_WORD *)v17 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v17);
    }
    else
    {
      *((_DWORD *)v17 + 6) -= 2;
    }
  }
  if (!v41)
  {
    v38 = 0;
    v39 = 0;
    v27 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v27 + 16))(v27, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v29 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v29, v28);
    }
    goto LABEL_54;
  }
  if (!*(_QWORD *)(v8 + 1496))
  {
    WebCore::Document::ensureMarkers((WebCore::Document *)v8);
    if (!v41)
    {
      __break(1u);
LABEL_73:
      JUMPOUT(0x19738DB30);
    }
  }
  WebCore::DocumentMarkerController::markersInRange();
  v36 = 0;
  v37 = 0;
  if (!HIDWORD(v39))
    goto LABEL_48;
  if (HIDWORD(v39) >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19738DB80);
  }
  LODWORD(v37) = HIDWORD(v39);
  v36 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v39)));
  if (HIDWORD(v39))
  {
    v18 = 0;
    v19 = v38;
    v20 = 8 * HIDWORD(v39);
    do
    {
      if (*(_QWORD *)v19)
      {
        v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if (*(_DWORD *)(v21 + 96) == 1)
        {
          v22 = *(WebCore::Node **)(v21 + 32);
          v35 = v22;
          if (v18 == (_DWORD)v37)
          {
            v23 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v18 + 1, (unint64_t)&v35);
            *((_QWORD *)v36 + HIDWORD(v37)) = *v23;
          }
          else
          {
            *((_QWORD *)v36 + v18) = v22;
          }
          v18 = ++HIDWORD(v37);
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  else
  {
LABEL_48:
    v18 = 0;
  }
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, v18);
  v24 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v26 = v36;
  if (v36)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v26, v25);
  }
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v25);
LABEL_54:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v42);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
}

uint64_t WebKit::WebPage::clearDictationAlternatives(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  Node *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  Node *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  WebCore::FocusController *v39;
  uint64_t v40;
  uint64_t v41;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v39);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v39;
  v39 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v8 = *(_QWORD *)(result + 296);
    if (!v8)
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    *(_DWORD *)(v8 + 24) += 2;
    v41 = 0;
    v9 = *(unsigned int *)(a2 + 12);
    v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = (v11 | HIWORD(v11)) + 1;
    if (v12 > 0x400)
    {
      if (v12 > 2 * v9)
        goto LABEL_14;
    }
    else if (3 * v12 > 4 * v9)
    {
LABEL_12:
      v13 = (double)v9;
      v14 = (double)v12;
      v15 = 0.604166667;
LABEL_15:
      if (v14 * v15 <= v13)
        LODWORD(v12) = 2 * v12;
      if (v12 <= 8)
        v16 = 8;
      else
        v16 = v12;
      v17 = WTF::fastZeroedMalloc((WTF *)(8 * v16 + 16));
      v41 = v17 + 16;
      *(_DWORD *)(v17 + 8) = v16 - 1;
      *(_DWORD *)(v17 + 12) = v16;
      *(_QWORD *)v17 = 0;
      v19 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v19)
      {
        v20 = *(uint64_t **)a2;
        v21 = &v20[v19];
        while (1)
        {
          v22 = *v20;
          v23 = v41;
          if (v41
            || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(&v41),
                (v23 = v41) != 0))
          {
            v24 = *(_DWORD *)(v23 - 8);
          }
          else
          {
            v24 = 0;
          }
          v25 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v18 = (Node *)(v23 + 8 * v28);
          v29 = *(_QWORD *)v18;
          if (*(_QWORD *)v18)
          {
            v30 = 0;
            v31 = 1;
            while (v29 != v22)
            {
              if (v29 == -1)
                v30 = v18;
              v28 = (v28 + v31) & v24;
              v18 = (Node *)(v23 + 8 * v28);
              v29 = *(_QWORD *)v18;
              ++v31;
              if (!*(_QWORD *)v18)
              {
                if (v30)
                {
                  *(_QWORD *)v30 = 0;
                  --*(_DWORD *)(v41 - 16);
                  v18 = v30;
                }
                goto LABEL_33;
              }
            }
            goto LABEL_39;
          }
LABEL_33:
          *(_QWORD *)v18 = v22;
          v32 = v41;
          v33 = v41 ? *(_DWORD *)(v41 - 12) + 1 : 1;
          *(_DWORD *)(v41 - 12) = v33;
          v34 = (*(_DWORD *)(v32 - 16) + v33);
          v35 = *(unsigned int *)(v32 - 4);
          if (v35 > 0x400)
            break;
          if (3 * v35 <= 4 * v34)
            goto LABEL_38;
LABEL_39:
          if (++v20 == v21)
            goto LABEL_44;
        }
        if (v35 > 2 * v34)
          goto LABEL_39;
LABEL_38:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(&v41);
        goto LABEL_39;
      }
LABEL_44:
      WebCore::makeRangeSelectingNodeContents((WebCore *)v8, v18);
      if (!*(_QWORD *)(v8 + 1496))
        WebCore::Document::ensureMarkers((WebCore::Document *)v8);
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E34D6E00;
      v36[1] = &v41;
      v38 = v36;
      WebCore::DocumentMarkerController::filterMarkers();
      if (v38)
        (*(void (**)(_QWORD *))(*v38 + 8))(v38);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v39);
      if (v41)
        WTF::fastFree((WTF *)(v41 - 16), v37);
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    }
    LODWORD(v12) = 2 * v12;
    if (v12 <= 0x400)
      goto LABEL_12;
LABEL_14:
    v13 = (double)v9;
    v14 = (double)v12;
    v15 = 0.416666667;
    goto LABEL_15;
  }
  return result;
}

void sub_19738E0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  if (a14)
    WTF::fastFree((WTF *)(a14 - 16), v17);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::accessibilityTransferRemoteToken(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v5 = *a2;
  if (*a2)
  {
    v6 = objc_msgSend(*a2, "bytes");
    v7 = objc_msgSend(v5, "length");
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v12[0] = v6;
  v12[1] = v7;
  v13[0] = v12;
  v13[1] = v14;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = a1 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  return IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(v8, (uint64_t)v13, v10, 0);
}

void WebKit::WebPage::bindRemoteAccessibilityFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  void *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  char v23;
  void *v24;
  WTF *v25;
  CFTypeRef v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  WebKit::WebProcess *v31;
  CFTypeRef cf;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::webFrame((uint64_t)v9, a3, a4);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 && (v13 = *(unsigned int **)(v12 + 8)) != 0 && !*((_BYTE *)v13 + 144))
    {
      v16 = v13 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)v13))
      {
        WebKit::WebPage::accessibilityRemoteTokenData(&cf);
        v18 = (void *)cf;
        if (cf)
        {
          v19 = (char *)objc_msgSend((id)cf, "bytes");
          v20 = objc_msgSend(v18, "length");
          v21 = v20;
          v33 = 0;
          LODWORD(v34) = 0;
          HIDWORD(v34) = v20;
          if (v20)
          {
            if (HIDWORD(v20))
            {
              __break(0xC471u);
              return;
            }
            v22 = (WTF *)WTF::fastMalloc((WTF *)v20);
            LODWORD(v34) = v21;
            v33 = v22;
            do
            {
              v23 = *v19++;
              *(_BYTE *)v22 = v23;
              v22 = (WTF *)((char *)v22 + 1);
              --v21;
            }
            while (v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
        }
        getpid();
        WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v33);
        v25 = v33;
        if (v33)
        {
          v33 = 0;
          LODWORD(v34) = 0;
          WTF::fastFree(v25, v24);
        }
        v26 = cf;
        cf = 0;
        if (v26)
          CFRelease(v26);
      }
      else
      {
        v35 = 0;
        v36 = 0;
        WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v35);
        v28 = v35;
        if (v35)
        {
          v35 = 0;
          LODWORD(v36) = 0;
          WTF::fastFree(v28, v27);
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
    }
    else
    {
      v37 = 0;
      v38 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v37);
      v15 = v37;
      if (v37)
      {
        v37 = 0;
        LODWORD(v38) = 0;
        WTF::fastFree(v15, v14);
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v39 = 0;
    v40 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v39);
    v30 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree(v30, v29);
    }
  }
}

